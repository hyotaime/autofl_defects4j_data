{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYLineAndShapeRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 114,
      "end_line": 1228,
      "comment": "\r\n * A renderer that connects data points with lines and/or draws shapes at each\r\n * data point.  This renderer is designed for use with the {@link XYPlot}\r\n * class.  The example shown here is generated by\r\n * the \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e program included in the\r\n * JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYLineAndShapeRendererSample.png\"\r\n * alt\u003d\"XYLineAndShapeRendererSample.png\" /\u003e\r\n *\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 118,
      "end_line": 118,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesLinesVisible"
      ],
      "begin_line": 124,
      "end_line": 124,
      "comment": "\r\n     * A table of flags that control (per series) whether or not lines are\r\n     * visible.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseLinesVisible"
      ],
      "begin_line": 127,
      "end_line": 127,
      "comment": " The default value returned by the getLinesVisible() method. "
    },
    {
      "type": "field",
      "varNames": [
        "legendLine"
      ],
      "begin_line": 130,
      "end_line": 130,
      "comment": " The shape that is used to represent a line in the legend. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesVisible"
      ],
      "begin_line": 136,
      "end_line": 136,
      "comment": "\r\n     * A table of flags that control (per series) whether or not shapes are\r\n     * visible.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesVisible"
      ],
      "begin_line": 139,
      "end_line": 139,
      "comment": " The default value returned by the getShapeVisible() method. "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesFilled"
      ],
      "begin_line": 145,
      "end_line": 145,
      "comment": "\r\n     * A table of flags that control (per series) whether or not shapes are\r\n     * filled.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesFilled"
      ],
      "begin_line": 148,
      "end_line": 148,
      "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
      "type": "field",
      "varNames": [
        "drawOutlines"
      ],
      "begin_line": 151,
      "end_line": 151,
      "comment": " A flag that controls whether outlines are drawn for shapes. "
    },
    {
      "type": "field",
      "varNames": [
        "useFillPaint"
      ],
      "begin_line": 157,
      "end_line": 157,
      "comment": "\r\n     * A flag that controls whether the fill paint is used for filling\r\n     * shapes.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useOutlinePaint"
      ],
      "begin_line": 163,
      "end_line": 163,
      "comment": "\r\n     * A flag that controls whether the outline paint is used for drawing shape\r\n     * outlines.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "drawSeriesLineAsPath"
      ],
      "begin_line": 169,
      "end_line": 169,
      "comment": "\r\n     * A flag that controls whether or not each series is drawn as a single\r\n     * path.\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer()",
      "begin_line": 174,
      "end_line": 176,
      "comment": "\r\n     * Creates a new renderer with both lines and shapes visible.\r\n     ",
      "child_ranges": [
        "(line 175,col 9)-(line 175,col 25)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer(boolean, boolean)",
      "begin_line": 184,
      "end_line": 201,
      "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param lines  lines visible?\r\n     * @param shapes  shapes visible?\r\n     ",
      "child_ranges": [
        "(line 185,col 9)-(line 185,col 52)",
        "(line 186,col 9)-(line 186,col 38)",
        "(line 187,col 9)-(line 187,col 65)",
        "(line 189,col 9)-(line 189,col 53)",
        "(line 190,col 9)-(line 190,col 40)",
        "(line 192,col 9)-(line 192,col 34)",
        "(line 193,col 9)-(line 193,col 52)",
        "(line 194,col 9)-(line 194,col 37)",
        "(line 196,col 9)-(line 196,col 33)",
        "(line 197,col 9)-(line 197,col 37)",
        "(line 200,col 9)-(line 200,col 42)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawSeriesLineAsPath()",
      "begin_line": 211,
      "end_line": 213,
      "comment": "\r\n     * Returns a flag that controls whether or not each series is drawn as a\r\n     * single path.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawSeriesLineAsPath(boolean)\r\n     ",
      "child_ranges": [
        "(line 212,col 9)-(line 212,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)",
      "begin_line": 224,
      "end_line": 229,
      "comment": "\r\n     * Sets the flag that controls whether or not each series is drawn as a\r\n     * single path and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getDrawSeriesLineAsPath()\r\n     ",
      "child_ranges": [
        "(line 225,col 9)-(line 228,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getPassCount()",
      "begin_line": 238,
      "end_line": 240,
      "comment": "\r\n     * Returns the number of passes through the data that the renderer requires\r\n     * in order to draw the chart.  Most charts will require a single pass, but\r\n     * some require two passes.\r\n     *\r\n     * @return The pass count.\r\n     ",
      "child_ranges": [
        "(line 239,col 9)-(line 239,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemLineVisible(int, int)",
      "begin_line": 253,
      "end_line": 261,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item is\r\n     * visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 254,col 9)-(line 254,col 53)",
        "(line 255,col 9)-(line 260,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesLinesVisible(int)",
      "begin_line": 273,
      "end_line": 275,
      "comment": "\r\n     * Returns the flag used to control whether or not the lines for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setSeriesLinesVisible(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 274,col 9)-(line 274,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, java.lang.Boolean)",
      "begin_line": 286,
      "end_line": 289,
      "comment": "\r\n     * Sets the \u0027lines visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getSeriesLinesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 287,col 9)-(line 287,col 57)",
        "(line 288,col 9)-(line 288,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, boolean)",
      "begin_line": 300,
      "end_line": 302,
      "comment": "\r\n     * Sets the \u0027lines visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSeriesLinesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 301,col 9)-(line 301,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseLinesVisible()",
      "begin_line": 311,
      "end_line": 313,
      "comment": "\r\n     * Returns the base \u0027lines visible\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseLinesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 312,col 9)-(line 312,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseLinesVisible(boolean)",
      "begin_line": 323,
      "end_line": 326,
      "comment": "\r\n     * Sets the base \u0027lines visible\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseLinesVisible()\r\n     ",
      "child_ranges": [
        "(line 324,col 9)-(line 324,col 37)",
        "(line 325,col 9)-(line 325,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendLine()",
      "begin_line": 335,
      "end_line": 337,
      "comment": "\r\n     * Returns the shape used to represent a line in the legend.\r\n     *\r\n     * @return The legend line (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendLine(Shape)\r\n     ",
      "child_ranges": [
        "(line 336,col 9)-(line 336,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLegendLine(java.awt.Shape)",
      "begin_line": 347,
      "end_line": 353,
      "comment": "\r\n     * Sets the shape used as a line in each legend item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param line  the line (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendLine()\r\n     ",
      "child_ranges": [
        "(line 348,col 9)-(line 350,col 9)",
        "(line 351,col 9)-(line 351,col 31)",
        "(line 352,col 9)-(line 352,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeVisible(int, int)",
      "begin_line": 370,
      "end_line": 378,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item is\r\n     * visible.\r\n     * \u003cp\u003e\r\n     * The default implementation passes control to the\r\n     * \u003ccode\u003egetSeriesShapesVisible\u003c/code\u003e method. You can override this method\r\n     * if you require different behaviour.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 371,col 9)-(line 371,col 54)",
        "(line 372,col 9)-(line 377,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesVisible(int)",
      "begin_line": 390,
      "end_line": 392,
      "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setSeriesShapesVisible(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 391,col 9)-(line 391,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, boolean)",
      "begin_line": 403,
      "end_line": 405,
      "comment": "\r\n     * Sets the \u0027shapes visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param visible  the flag.\r\n     *\r\n     * @see #getSeriesShapesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 404,col 9)-(line 404,col 65)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, java.lang.Boolean)",
      "begin_line": 416,
      "end_line": 419,
      "comment": "\r\n     * Sets the \u0027shapes visible\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesVisible(int)\r\n     ",
      "child_ranges": [
        "(line 417,col 9)-(line 417,col 58)",
        "(line 418,col 9)-(line 418,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseShapesVisible()",
      "begin_line": 428,
      "end_line": 430,
      "comment": "\r\n     * Returns the base \u0027shape visible\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseShapesVisible(boolean)\r\n     ",
      "child_ranges": [
        "(line 429,col 9)-(line 429,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)",
      "begin_line": 440,
      "end_line": 443,
      "comment": "\r\n     * Sets the base \u0027shapes visible\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesVisible()\r\n     ",
      "child_ranges": [
        "(line 441,col 9)-(line 441,col 38)",
        "(line 442,col 9)-(line 442,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeFilled(int, int)",
      "begin_line": 460,
      "end_line": 468,
      "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item\r\n     * is filled.\r\n     * \u003cp\u003e\r\n     * The default implementation passes control to the\r\n     * \u003ccode\u003egetSeriesShapesFilled\u003c/code\u003e method. You can override this method\r\n     * if you require different behaviour.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 461,col 9)-(line 461,col 53)",
        "(line 462,col 9)-(line 467,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesFilled(int)",
      "begin_line": 480,
      "end_line": 482,
      "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are filled.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setSeriesShapesFilled(int, Boolean)\r\n     ",
      "child_ranges": [
        "(line 481,col 9)-(line 481,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, boolean)",
      "begin_line": 493,
      "end_line": 495,
      "comment": "\r\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesFilled(int)\r\n     ",
      "child_ranges": [
        "(line 494,col 9)-(line 494,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, java.lang.Boolean)",
      "begin_line": 506,
      "end_line": 509,
      "comment": "\r\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getSeriesShapesFilled(int)\r\n     ",
      "child_ranges": [
        "(line 507,col 9)-(line 507,col 57)",
        "(line 508,col 9)-(line 508,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseShapesFilled()",
      "begin_line": 518,
      "end_line": 520,
      "comment": "\r\n     * Returns the base \u0027shape filled\u0027 attribute.\r\n     *\r\n     * @return The base flag.\r\n     *\r\n     * @see #setBaseShapesFilled(boolean)\r\n     ",
      "child_ranges": [
        "(line 519,col 9)-(line 519,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesFilled(boolean)",
      "begin_line": 530,
      "end_line": 533,
      "comment": "\r\n     * Sets the base \u0027shapes filled\u0027 flag and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getBaseShapesFilled()\r\n     ",
      "child_ranges": [
        "(line 531,col 9)-(line 531,col 37)",
        "(line 532,col 9)-(line 532,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawOutlines()",
      "begin_line": 543,
      "end_line": 545,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if outlines should be drawn for shapes, and\r\n     * \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawOutlines(boolean)\r\n     ",
      "child_ranges": [
        "(line 544,col 9)-(line 544,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawOutlines(boolean)",
      "begin_line": 559,
      "end_line": 562,
      "comment": "\r\n     * Sets the flag that controls whether outlines are drawn for\r\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     * \u003cP\u003e\r\n     * In some cases, shapes look better if they do NOT have an outline, but\r\n     * this flag allows you to set your own preference.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getDrawOutlines()\r\n     ",
      "child_ranges": [
        "(line 560,col 9)-(line 560,col 33)",
        "(line 561,col 9)-(line 561,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseFillPaint()",
      "begin_line": 577,
      "end_line": 579,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the fill paint\r\n     * setting to fill shapes, and \u003ccode\u003efalse\u003c/code\u003e if it should just\r\n     * use the regular paint.\r\n     * \u003cp\u003e\r\n     * Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the\r\n     * effect of this flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseFillPaint(boolean)\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 578,col 9)-(line 578,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseFillPaint(boolean)",
      "begin_line": 590,
      "end_line": 593,
      "comment": "\r\n     * Sets the flag that controls whether the fill paint is used to fill\r\n     * shapes, and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getUseFillPaint()\r\n     ",
      "child_ranges": [
        "(line 591,col 9)-(line 591,col 33)",
        "(line 592,col 9)-(line 592,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseOutlinePaint()",
      "begin_line": 605,
      "end_line": 607,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the outline paint\r\n     * setting to draw shape outlines, and \u003ccode\u003efalse\u003c/code\u003e if it should just\r\n     * use the regular paint.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseOutlinePaint(boolean)\r\n     * @see #getUseFillPaint()\r\n     ",
      "child_ranges": [
        "(line 606,col 9)-(line 606,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseOutlinePaint(boolean)",
      "begin_line": 621,
      "end_line": 624,
      "comment": "\r\n     * Sets the flag that controls whether the outline paint is used to draw\r\n     * shape outlines, and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     * \u003cp\u003e\r\n     * Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the\r\n     * effect of this flag.\r\n     *\r\n     * @param flag  the flag.\r\n     *\r\n     * @see #getUseOutlinePaint()\r\n     ",
      "child_ranges": [
        "(line 622,col 9)-(line 622,col 36)",
        "(line 623,col 9)-(line 623,col 26)"
      ]
    },
    {
      "type": "class_interface",
      "name": "State",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYItemRendererState"
      ],
      "begin_line": 631,
      "end_line": 690,
      "comment": "\r\n     * Records the state for the renderer.  This is used to preserve state\r\n     * information between calls to the drawItem() method for a single chart\r\n     * drawing.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "seriesPath"
      ],
      "begin_line": 634,
      "end_line": 634,
      "comment": " The path for the current series. "
    },
    {
      "type": "field",
      "varNames": [
        "lastPointGood"
      ],
      "begin_line": 640,
      "end_line": 640,
      "comment": "\r\n         * A flag that indicates if the last (x, y) point was \u0027good\u0027\r\n         * (non-null).\r\n         "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.State(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 647,
      "end_line": 649,
      "comment": "\r\n         * Creates a new state instance.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 648,col 13)-(line 648,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.isLastPointGood()",
      "begin_line": 657,
      "end_line": 659,
      "comment": "\r\n         * Returns a flag that indicates if the last point drawn (in the\r\n         * current series) was \u0027good\u0027 (non-null).\r\n         *\r\n         * @return A boolean.\r\n         ",
      "child_ranges": [
        "(line 658,col 13)-(line 658,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.setLastPointGood(boolean)",
      "begin_line": 667,
      "end_line": 669,
      "comment": "\r\n         * Sets a flag that indicates if the last point drawn (in the current\r\n         * series) was \u0027good\u0027 (non-null).\r\n         *\r\n         * @param good  the flag.\r\n         ",
      "child_ranges": [
        "(line 668,col 13)-(line 668,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State.startSeriesPass(org.jfree.data.xy.XYDataset, int, int, int, int, int)",
      "begin_line": 682,
      "end_line": 688,
      "comment": "\r\n         * This method is called by the {@link XYPlot} at the start of each\r\n         * series pass.  We reset the state for the current series.\r\n         *\r\n         * @param dataset  the dataset.\r\n         * @param series  the series index.\r\n         * @param firstItem  the first item index for this pass.\r\n         * @param lastItem  the last item index for this pass.\r\n         * @param pass  the current pass index.\r\n         * @param passCount  the number of passes.\r\n         ",
      "child_ranges": [
        "(line 684,col 13)-(line 684,col 36)",
        "(line 685,col 13)-(line 685,col 39)",
        "(line 686,col 13)-(line 687,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 708,
      "end_line": 718,
      "comment": "\r\n     * Initialises the renderer.\r\n     * \u003cP\u003e\r\n     * This method will be called before the first item is rendered, giving the\r\n     * renderer an opportunity to initialise any state information it wants to\r\n     * maintain.  The renderer can do nothing if it chooses.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param data  the data.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return The renderer state.\r\n     ",
      "child_ranges": [
        "(line 714,col 9)-(line 714,col 38)",
        "(line 715,col 9)-(line 715,col 45)",
        "(line 716,col 9)-(line 716,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 738,
      "end_line": 774,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param pass  the pass index.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 744,col 9)-(line 746,col 9)",
        "(line 749,col 9)-(line 773,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isLinePass(int)",
      "begin_line": 784,
      "end_line": 786,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified pass is the one for drawing\r\n     * lines.\r\n     *\r\n     * @param pass  the pass.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 785,col 9)-(line 785,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isItemPass(int)",
      "begin_line": 796,
      "end_line": 798,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified pass is the one for drawing\r\n     * items.\r\n     *\r\n     * @param pass  the pass.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 797,col 9)-(line 797,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
      "begin_line": 819,
      "end_line": 868,
      "comment": "\r\n     * Draws the item (first pass). This method draws the lines\r\n     * connecting the items.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param dataset  the dataset.\r\n     * @param pass  the pass.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 824,col 9)-(line 826,col 9)",
        "(line 829,col 9)-(line 829,col 52)",
        "(line 830,col 9)-(line 830,col 52)",
        "(line 831,col 9)-(line 833,col 9)",
        "(line 835,col 9)-(line 835,col 56)",
        "(line 836,col 9)-(line 836,col 56)",
        "(line 837,col 9)-(line 839,col 9)",
        "(line 841,col 9)-(line 841,col 63)",
        "(line 842,col 9)-(line 842,col 62)",
        "(line 844,col 9)-(line 844,col 79)",
        "(line 845,col 9)-(line 845,col 78)",
        "(line 847,col 9)-(line 847,col 79)",
        "(line 848,col 9)-(line 848,col 78)",
        "(line 851,col 9)-(line 854,col 9)",
        "(line 856,col 9)-(line 856,col 60)",
        "(line 857,col 9)-(line 857,col 32)",
        "(line 858,col 9)-(line 863,col 9)",
        "(line 864,col 9)-(line 864,col 70)",
        "(line 865,col 9)-(line 867,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawShape1(java.awt.Graphics2D, int, int, int, boolean, java.awt.Shape)",
      "begin_line": 882,
      "end_line": 887,
      "comment": "\r\n     * Draws a shape (first pass).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param pass  the pass.\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param selected  is the data item selected?\r\n     * @param shape  the shape.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 884,col 9)-(line 884,col 60)",
        "(line 885,col 9)-(line 885,col 58)",
        "(line 886,col 9)-(line 886,col 23)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
      "begin_line": 911,
      "end_line": 952,
      "comment": "\r\n     * Draws the item (first pass). This method draws the lines\r\n     * connecting the items. Instead of drawing separate lines,\r\n     * a GeneralPath is constructed and drawn at the end of\r\n     * the series painting.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param plot  the plot (can be used to obtain standard color information\r\n     *              etc).\r\n     * @param dataset  the dataset.\r\n     * @param pass  the pass.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 917,col 9)-(line 917,col 63)",
        "(line 918,col 9)-(line 918,col 62)",
        "(line 921,col 9)-(line 921,col 52)",
        "(line 922,col 9)-(line 922,col 52)",
        "(line 923,col 9)-(line 923,col 79)",
        "(line 924,col 9)-(line 924,col 78)",
        "(line 926,col 9)-(line 926,col 32)",
        "(line 928,col 9)-(line 946,col 9)",
        "(line 948,col 9)-(line 951,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawShape2(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.CrosshairState, org.jfree.chart.entity.EntityCollection)",
      "begin_line": 974,
      "end_line": 1054,
      "comment": "\r\n     * Draws the item shapes and adds chart entities (second pass). This method\r\n     * draws the shapes which mark the item positions. If \u003ccode\u003eentities\u003c/code\u003e\r\n     * is not \u003ccode\u003enull\u003c/code\u003e it will be populated with entity information\r\n     * for points that fall within the data area.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param pass  the pass.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param selected  is the data item selected?\r\n     * @param crosshairState  the crosshair state.\r\n     * @param entities the entity collection.\r\n     ",
      "child_ranges": [
        "(line 979,col 9)-(line 979,col 32)",
        "(line 982,col 9)-(line 982,col 52)",
        "(line 983,col 9)-(line 983,col 52)",
        "(line 984,col 9)-(line 986,col 9)",
        "(line 988,col 9)-(line 988,col 60)",
        "(line 989,col 9)-(line 989,col 63)",
        "(line 990,col 9)-(line 990,col 62)",
        "(line 991,col 9)-(line 991,col 79)",
        "(line 992,col 9)-(line 992,col 78)",
        "(line 994,col 9)-(line 1027,col 9)",
        "(line 1029,col 9)-(line 1029,col 28)",
        "(line 1030,col 9)-(line 1030,col 28)",
        "(line 1031,col 9)-(line 1034,col 9)",
        "(line 1037,col 9)-(line 1040,col 9)",
        "(line 1042,col 9)-(line 1042,col 66)",
        "(line 1043,col 9)-(line 1043,col 63)",
        "(line 1044,col 9)-(line 1045,col 63)",
        "(line 1049,col 9)-(line 1053,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendItem(int, int)",
      "begin_line": 1065,
      "end_line": 1122,
      "comment": "\r\n     * Returns a legend item for the specified series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A legend item for the series.\r\n     ",
      "child_ranges": [
        "(line 1067,col 9)-(line 1067,col 32)",
        "(line 1068,col 9)-(line 1070,col 9)",
        "(line 1072,col 9)-(line 1072,col 33)",
        "(line 1073,col 9)-(line 1073,col 58)",
        "(line 1074,col 9)-(line 1118,col 9)",
        "(line 1120,col 9)-(line 1120,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.clone()",
      "begin_line": 1131,
      "end_line": 1143,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException if the clone cannot be created.\r\n     ",
      "child_ranges": [
        "(line 1132,col 9)-(line 1132,col 78)",
        "(line 1133,col 9)-(line 1134,col 64)",
        "(line 1135,col 9)-(line 1137,col 9)",
        "(line 1138,col 9)-(line 1139,col 65)",
        "(line 1140,col 9)-(line 1141,col 64)",
        "(line 1142,col 9)-(line 1142,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)",
      "begin_line": 1152,
      "end_line": 1200,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 1153,col 9)-(line 1155,col 9)",
        "(line 1156,col 9)-(line 1158,col 9)",
        "(line 1159,col 9)-(line 1161,col 9)",
        "(line 1162,col 9)-(line 1162,col 67)",
        "(line 1163,col 9)-(line 1166,col 9)",
        "(line 1167,col 9)-(line 1169,col 9)",
        "(line 1170,col 9)-(line 1172,col 9)",
        "(line 1173,col 9)-(line 1176,col 9)",
        "(line 1177,col 9)-(line 1179,col 9)",
        "(line 1180,col 9)-(line 1183,col 9)",
        "(line 1184,col 9)-(line 1186,col 9)",
        "(line 1187,col 9)-(line 1189,col 9)",
        "(line 1190,col 9)-(line 1192,col 9)",
        "(line 1193,col 9)-(line 1195,col 9)",
        "(line 1196,col 9)-(line 1198,col 9)",
        "(line 1199,col 9)-(line 1199,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1210,
      "end_line": 1214,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1212,col 9)-(line 1212,col 35)",
        "(line 1213,col 9)-(line 1213,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1223,
      "end_line": 1226,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1224,col 9)-(line 1224,col 36)",
        "(line 1225,col 9)-(line 1225,col 60)"
      ]
    }
  ]
}