{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "MinMaxCategoryRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"
      ],
      "begin_line": 103,
      "end_line": 571,
      "comment": "\r\n * Renderer for drawing min max plot. This renderer draws all the series under\r\n * the same category in the same x position using \u003ccode\u003eobjectIcon\u003c/code\u003e and\r\n * a line from the maximum value to the minimum value. For use with the\r\n * {@link CategoryPlot} class. The example shown here is generated by\r\n * the \u003ccode\u003eMinMaxCategoryPlotDemo1.java\u003c/code\u003e program included in the\r\n * JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/MinMaxCategoryRendererSample.png\"\r\n * alt\u003d\"MinMaxCategoryRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 106,
      "end_line": 106,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "plotLines"
      ],
      "begin_line": 109,
      "end_line": 109,
      "comment": " A flag indicating whether or not lines are drawn between XY points. "
    },
    {
      "type": "field",
      "varNames": [
        "groupPaint"
      ],
      "begin_line": 114,
      "end_line": 114,
      "comment": "\r\n     * The paint of the line between the minimum value and the maximum value.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "groupStroke"
      ],
      "begin_line": 119,
      "end_line": 119,
      "comment": "\r\n     * The stroke of the line between the minimum value and the maximum value.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "minIcon"
      ],
      "begin_line": 122,
      "end_line": 123,
      "comment": " The icon used to indicate the minimum value."
    },
    {
      "type": "field",
      "varNames": [
        "maxIcon"
      ],
      "begin_line": 126,
      "end_line": 127,
      "comment": " The icon used to indicate the maximum value."
    },
    {
      "type": "field",
      "varNames": [
        "objectIcon"
      ],
      "begin_line": 130,
      "end_line": 131,
      "comment": " The icon used to indicate the values."
    },
    {
      "type": "field",
      "varNames": [
        "lastCategory"
      ],
      "begin_line": 134,
      "end_line": 134,
      "comment": " The last category. "
    },
    {
      "type": "field",
      "varNames": [
        "min"
      ],
      "begin_line": 137,
      "end_line": 137,
      "comment": " The minimum. "
    },
    {
      "type": "field",
      "varNames": [
        "max"
      ],
      "begin_line": 140,
      "end_line": 140,
      "comment": " The maximum. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.MinMaxCategoryRenderer()",
      "begin_line": 145,
      "end_line": 147,
      "comment": "\r\n     * Default constructor.\r\n     ",
      "child_ranges": [
        "(line 146,col 9)-(line 146,col 16)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.isDrawLines()",
      "begin_line": 157,
      "end_line": 159,
      "comment": "\r\n     * Gets whether or not lines are drawn between category points.\r\n     *\r\n     * @return boolean true if line will be drawn between sequenced categories,\r\n     *         otherwise false.\r\n     *\r\n     * @see #setDrawLines(boolean)\r\n     ",
      "child_ranges": [
        "(line 158,col 9)-(line 158,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setDrawLines(boolean)",
      "begin_line": 170,
      "end_line": 176,
      "comment": "\r\n     * Sets the flag that controls whether or not lines are drawn to connect\r\n     * the items within a series and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param draw  the new value of the flag.\r\n     *\r\n     * @see #isDrawLines()\r\n     ",
      "child_ranges": [
        "(line 171,col 9)-(line 174,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getGroupPaint()",
      "begin_line": 186,
      "end_line": 188,
      "comment": "\r\n     * Returns the paint used to draw the line between the minimum and maximum\r\n     * value items in each category.\r\n     *\r\n     * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setGroupPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 187,col 9)-(line 187,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setGroupPaint(java.awt.Paint)",
      "begin_line": 199,
      "end_line": 205,
      "comment": "\r\n     * Sets the paint used to draw the line between the minimum and maximum\r\n     * value items in each category and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getGroupPaint()\r\n     ",
      "child_ranges": [
        "(line 200,col 9)-(line 202,col 9)",
        "(line 203,col 9)-(line 203,col 32)",
        "(line 204,col 9)-(line 204,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getGroupStroke()",
      "begin_line": 215,
      "end_line": 217,
      "comment": "\r\n     * Returns the stroke used to draw the line between the minimum and maximum\r\n     * value items in each category.\r\n     *\r\n     * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setGroupStroke(Stroke)\r\n     ",
      "child_ranges": [
        "(line 216,col 9)-(line 216,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setGroupStroke(java.awt.Stroke)",
      "begin_line": 226,
      "end_line": 232,
      "comment": "\r\n     * Sets the stroke of the line between the minimum value and the maximum\r\n     * value and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param stroke the new stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     ",
      "child_ranges": [
        "(line 227,col 9)-(line 229,col 9)",
        "(line 230,col 9)-(line 230,col 34)",
        "(line 231,col 9)-(line 231,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getObjectIcon()",
      "begin_line": 241,
      "end_line": 243,
      "comment": "\r\n     * Returns the icon drawn for each data item.\r\n     *\r\n     * @return The icon (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setObjectIcon(Icon)\r\n     ",
      "child_ranges": [
        "(line 242,col 9)-(line 242,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setObjectIcon(javax.swing.Icon)",
      "begin_line": 253,
      "end_line": 259,
      "comment": "\r\n     * Sets the icon drawn for each data item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param icon  the icon.\r\n     *\r\n     * @see #getObjectIcon()\r\n     ",
      "child_ranges": [
        "(line 254,col 9)-(line 256,col 9)",
        "(line 257,col 9)-(line 257,col 31)",
        "(line 258,col 9)-(line 258,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getMaxIcon()",
      "begin_line": 269,
      "end_line": 271,
      "comment": "\r\n     * Returns the icon displayed for the maximum value data item within each\r\n     * category.\r\n     *\r\n     * @return The icon (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setMaxIcon(Icon)\r\n     ",
      "child_ranges": [
        "(line 270,col 9)-(line 270,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setMaxIcon(javax.swing.Icon)",
      "begin_line": 282,
      "end_line": 288,
      "comment": "\r\n     * Sets the icon displayed for the maximum value data item within each\r\n     * category and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param icon  the icon (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getMaxIcon()\r\n     ",
      "child_ranges": [
        "(line 283,col 9)-(line 285,col 9)",
        "(line 286,col 9)-(line 286,col 28)",
        "(line 287,col 9)-(line 287,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getMinIcon()",
      "begin_line": 298,
      "end_line": 300,
      "comment": "\r\n     * Returns the icon displayed for the minimum value data item within each\r\n     * category.\r\n     *\r\n     * @return The icon (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setMinIcon(Icon)\r\n     ",
      "child_ranges": [
        "(line 299,col 9)-(line 299,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setMinIcon(javax.swing.Icon)",
      "begin_line": 311,
      "end_line": 317,
      "comment": "\r\n     * Sets the icon displayed for the minimum value data item within each\r\n     * category and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param icon  the icon (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getMinIcon()\r\n     ",
      "child_ranges": [
        "(line 312,col 9)-(line 314,col 9)",
        "(line 315,col 9)-(line 315,col 28)",
        "(line 316,col 9)-(line 316,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 333,
      "end_line": 426,
      "comment": "\r\n     * Draw a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area in which the data is drawn.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 339,col 9)-(line 339,col 53)",
        "(line 340,col 9)-(line 425,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.equals(java.lang.Object)",
      "begin_line": 439,
      "end_line": 457,
      "comment": "\r\n     * Tests this instance for equality with an arbitrary object.  The icon\r\n     * fields are NOT included in the test, so this implementation is a little\r\n     * weak.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.7\r\n     ",
      "child_ranges": [
        "(line 440,col 9)-(line 442,col 9)",
        "(line 443,col 9)-(line 445,col 9)",
        "(line 446,col 9)-(line 446,col 67)",
        "(line 447,col 9)-(line 449,col 9)",
        "(line 450,col 9)-(line 452,col 9)",
        "(line 453,col 9)-(line 455,col 9)",
        "(line 456,col 9)-(line 456,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)",
      "begin_line": 468,
      "end_line": 498,
      "comment": "\r\n     * Returns an icon.\r\n     *\r\n     * @param shape  the shape.\r\n     * @param fillPaint  the fill paint.\r\n     * @param outlinePaint  the outline paint.\r\n     *\r\n     * @return The icon.\r\n     ",
      "child_ranges": [
        "(line 471,col 7)-(line 471,col 48)",
        "(line 472,col 7)-(line 472,col 50)",
        "(line 473,col 7)-(line 473,col 54)",
        "(line 474,col 7)-(line 497,col 8)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.Anonymous-3a56ccf2-04ef-416f-8259-5cdde251e656.paintIcon(java.awt.Component, java.awt.Graphics, int, int)",
      "begin_line": 475,
      "end_line": 487,
      "comment": "",
      "child_ranges": [
        "(line 476,col 15)-(line 476,col 45)",
        "(line 477,col 15)-(line 477,col 73)",
        "(line 478,col 15)-(line 481,col 15)",
        "(line 482,col 15)-(line 485,col 15)",
        "(line 486,col 15)-(line 486,col 75)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.Anonymous-7f5d3268-2979-4531-b6bf-26cd49aa028e.getIconWidth()",
      "begin_line": 489,
      "end_line": 491,
      "comment": "",
      "child_ranges": [
        "(line 490,col 13)-(line 490,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.Anonymous-71dbf4e2-1dad-45f2-8664-1124a2b88fa8.getIconHeight()",
      "begin_line": 493,
      "end_line": 495,
      "comment": "",
      "child_ranges": [
        "(line 494,col 13)-(line 494,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)",
      "begin_line": 509,
      "end_line": 535,
      "comment": "\r\n     * Returns an icon from a shape.\r\n     *\r\n     * @param shape  the shape.\r\n     * @param fill  the fill flag.\r\n     * @param outline  the outline flag.\r\n     *\r\n     * @return The icon.\r\n     ",
      "child_ranges": [
        "(line 511,col 9)-(line 511,col 50)",
        "(line 512,col 9)-(line 512,col 52)",
        "(line 513,col 9)-(line 513,col 56)",
        "(line 514,col 9)-(line 534,col 10)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.Anonymous-8d27d6f1-96a5-42e3-84aa-8fa06d3ad799.paintIcon(java.awt.Component, java.awt.Graphics, int, int)",
      "begin_line": 515,
      "end_line": 525,
      "comment": "",
      "child_ranges": [
        "(line 516,col 17)-(line 516,col 47)",
        "(line 517,col 17)-(line 517,col 75)",
        "(line 518,col 17)-(line 520,col 17)",
        "(line 521,col 17)-(line 523,col 17)",
        "(line 524,col 17)-(line 524,col 77)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.Anonymous-0d0b6405-dd7d-4922-9e65-47a1d7b85e14.getIconWidth()",
      "begin_line": 527,
      "end_line": 529,
      "comment": "",
      "child_ranges": [
        "(line 528,col 17)-(line 528,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.Anonymous-bce3ea40-ae8e-4434-a770-e113dadaffaf.getIconHeight()",
      "begin_line": 531,
      "end_line": 533,
      "comment": "",
      "child_ranges": [
        "(line 532,col 17)-(line 532,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 544,
      "end_line": 548,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 545,col 9)-(line 545,col 36)",
        "(line 546,col 9)-(line 546,col 62)",
        "(line 547,col 9)-(line 547,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 558,
      "end_line": 569,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 560,col 9)-(line 560,col 35)",
        "(line 561,col 9)-(line 561,col 62)",
        "(line 562,col 9)-(line 562,col 60)",
        "(line 564,col 9)-(line 565,col 48)",
        "(line 566,col 9)-(line 567,col 48)",
        "(line 568,col 9)-(line 568,col 79)"
      ]
    }
  ]
}