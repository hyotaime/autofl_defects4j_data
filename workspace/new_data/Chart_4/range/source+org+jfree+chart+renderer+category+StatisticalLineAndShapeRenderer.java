{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "StatisticalLineAndShapeRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 101,
      "end_line": 490,
      "comment": "\r\n * A renderer that draws shapes for each data item, and lines between data\r\n * items.  Each point has a mean value and a standard deviation line. For use\r\n * with the {@link CategoryPlot} class.  The example shown\r\n * here is generated by the \u003ccode\u003eStatisticalLineChartDemo1.java\u003c/code\u003e program\r\n * included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/StatisticalLineRendererSample.png\"\r\n * alt\u003d\"StatisticalLineRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 105,
      "end_line": 105,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "errorIndicatorPaint"
      ],
      "begin_line": 108,
      "end_line": 108,
      "comment": " The paint used to show the error indicator. "
    },
    {
      "type": "field",
      "varNames": [
        "errorIndicatorStroke"
      ],
      "begin_line": 116,
      "end_line": 116,
      "comment": "\r\n     * The stroke used to draw the error indicators.  If null, the renderer\r\n     * will use the itemOutlineStroke.\r\n     *\r\n     * @since 1.0.13\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.StatisticalLineAndShapeRenderer()",
      "begin_line": 121,
      "end_line": 123,
      "comment": "\r\n     * Constructs a default renderer (draws shapes and lines).\r\n     ",
      "child_ranges": [
        "(line 122,col 9)-(line 122,col 25)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.StatisticalLineAndShapeRenderer(boolean, boolean)",
      "begin_line": 131,
      "end_line": 136,
      "comment": "\r\n     * Constructs a new renderer.\r\n     *\r\n     * @param linesVisible  draw lines?\r\n     * @param shapesVisible  draw shapes?\r\n     ",
      "child_ranges": [
        "(line 133,col 9)-(line 133,col 43)",
        "(line 134,col 9)-(line 134,col 40)",
        "(line 135,col 9)-(line 135,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.getErrorIndicatorPaint()",
      "begin_line": 146,
      "end_line": 148,
      "comment": "\r\n     * Returns the paint used for the error indicators.\r\n     *\r\n     * @return The paint used for the error indicators (possibly\r\n     *         \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setErrorIndicatorPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 147,col 9)-(line 147,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.setErrorIndicatorPaint(java.awt.Paint)",
      "begin_line": 159,
      "end_line": 162,
      "comment": "\r\n     * Sets the paint used for the error indicators (if \u003ccode\u003enull\u003c/code\u003e,\r\n     * the item paint is used instead) and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getErrorIndicatorPaint()\r\n     ",
      "child_ranges": [
        "(line 160,col 9)-(line 160,col 41)",
        "(line 161,col 9)-(line 161,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.getErrorIndicatorStroke()",
      "begin_line": 174,
      "end_line": 176,
      "comment": "\r\n     * Returns the stroke used for the error indicators.\r\n     *\r\n     * @return The stroke used for the error indicators (possibly\r\n     *         \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setErrorIndicatorStroke(Stroke)\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 175,col 9)-(line 175,col 41)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.setErrorIndicatorStroke(java.awt.Stroke)",
      "begin_line": 189,
      "end_line": 192,
      "comment": "\r\n     * Sets the stroke used for the error indicators (if \u003ccode\u003enull\u003c/code\u003e,\r\n     * the item outline stroke is used instead) and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getErrorIndicatorStroke()\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 190,col 9)-(line 190,col 43)",
        "(line 191,col 9)-(line 191,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
      "begin_line": 203,
      "end_line": 205,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 204,col 9)-(line 204,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 222,
      "end_line": 422,
      "comment": "\r\n     * Draw a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area in which the data is drawn.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset (a {@link StatisticalCategoryDataset} is\r\n     *                 required).\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param pass  the pass.\r\n     ",
      "child_ranges": [
        "(line 228,col 9)-(line 230,col 9)",
        "(line 234,col 9)-(line 238,col 9)",
        "(line 240,col 9)-(line 240,col 58)",
        "(line 241,col 9)-(line 243,col 9)",
        "(line 244,col 9)-(line 244,col 60)",
        "(line 246,col 9)-(line 247,col 55)",
        "(line 248,col 9)-(line 248,col 65)",
        "(line 249,col 9)-(line 251,col 9)",
        "(line 252,col 9)-(line 252,col 60)",
        "(line 255,col 9)-(line 255,col 18)",
        "(line 256,col 9)-(line 265,col 9)",
        "(line 266,col 9)-(line 267,col 41)",
        "(line 272,col 9)-(line 272,col 61)",
        "(line 273,col 9)-(line 330,col 9)",
        "(line 332,col 9)-(line 332,col 29)",
        "(line 333,col 9)-(line 373,col 9)",
        "(line 375,col 9)-(line 411,col 9)",
        "(line 413,col 9)-(line 420,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.equals(java.lang.Object)",
      "begin_line": 431,
      "end_line": 449,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 432,col 9)-(line 434,col 9)",
        "(line 435,col 9)-(line 437,col 9)",
        "(line 438,col 9)-(line 439,col 56)",
        "(line 440,col 9)-(line 443,col 9)",
        "(line 444,col 9)-(line 447,col 9)",
        "(line 448,col 9)-(line 448,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.hashCode()",
      "begin_line": 456,
      "end_line": 460,
      "comment": "\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     ",
      "child_ranges": [
        "(line 457,col 9)-(line 457,col 36)",
        "(line 458,col 9)-(line 458,col 70)",
        "(line 459,col 9)-(line 459,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 469,
      "end_line": 473,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 470,col 9)-(line 470,col 36)",
        "(line 471,col 9)-(line 471,col 69)",
        "(line 472,col 9)-(line 472,col 71)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 483,
      "end_line": 488,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 485,col 9)-(line 485,col 35)",
        "(line 486,col 9)-(line 486,col 69)",
        "(line 487,col 9)-(line 487,col 71)"
      ]
    }
  ]
}