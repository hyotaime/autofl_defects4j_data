{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/CategoryStepRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "CategoryStepRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 83,
      "end_line": 370,
      "comment": "\r\n * A \"step\" renderer similar to {@link XYStepRenderer} but\r\n * that can be used with the {@link CategoryPlot} class.  The example shown\r\n * here is generated by the \u003ccode\u003eCategoryStepChartDemo1.java\u003c/code\u003e program\r\n * included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/CategoryStepRendererSample.png\"\r\n * alt\u003d\"CategoryStepRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "class_interface",
      "name": "State",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.CategoryItemRendererState"
      ],
      "begin_line": 89,
      "end_line": 108,
      "comment": "\r\n     * State information for the renderer.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "line"
      ],
      "begin_line": 95,
      "end_line": 95,
      "comment": "\r\n         * A working line for re-use to avoid creating large numbers of\r\n         * objects.\r\n         "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.State.State(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 103,
      "end_line": 106,
      "comment": "\r\n         * Creates a new state instance.\r\n         *\r\n         * @param info  collects plot rendering information (\u003ccode\u003enull\u003c/code\u003e\r\n         *              permitted).\r\n         ",
      "child_ranges": [
        "(line 104,col 13)-(line 104,col 24)",
        "(line 105,col 13)-(line 105,col 44)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 111,
      "end_line": 111,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "STAGGER_WIDTH"
      ],
      "begin_line": 114,
      "end_line": 114,
      "comment": " could make this configurable"
    },
    {
      "type": "field",
      "varNames": [
        "stagger"
      ],
      "begin_line": 120,
      "end_line": 120,
      "comment": "\r\n     * A flag that controls whether or not the steps for multiple series are\r\n     * staggered.\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.CategoryStepRenderer()",
      "begin_line": 125,
      "end_line": 127,
      "comment": "\r\n     * Creates a new renderer (stagger defaults to \u003ccode\u003efalse\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 126,col 9)-(line 126,col 20)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.CategoryStepRenderer(boolean)",
      "begin_line": 135,
      "end_line": 138,
      "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param stagger  should the horizontal part of the step be staggered by\r\n     *                 series?\r\n     ",
      "child_ranges": [
        "(line 136,col 9)-(line 136,col 31)",
        "(line 137,col 9)-(line 137,col 73)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.getStagger()",
      "begin_line": 145,
      "end_line": 147,
      "comment": "\r\n     * Returns the flag that controls whether the series steps are staggered.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 146,col 9)-(line 146,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.setStagger(boolean)",
      "begin_line": 156,
      "end_line": 159,
      "comment": "\r\n     * Sets the flag that controls whether or not the series steps are\r\n     * staggered and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param shouldStagger  a boolean.\r\n     ",
      "child_ranges": [
        "(line 157,col 9)-(line 157,col 37)",
        "(line 158,col 9)-(line 158,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.getLegendItem(int, int)",
      "begin_line": 169,
      "end_line": 210,
      "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item.\r\n     ",
      "child_ranges": [
        "(line 171,col 9)-(line 171,col 35)",
        "(line 172,col 9)-(line 174,col 9)",
        "(line 177,col 9)-(line 179,col 9)",
        "(line 181,col 9)-(line 181,col 61)",
        "(line 182,col 9)-(line 183,col 24)",
        "(line 184,col 9)-(line 184,col 35)",
        "(line 185,col 9)-(line 185,col 34)",
        "(line 186,col 9)-(line 189,col 9)",
        "(line 190,col 9)-(line 190,col 30)",
        "(line 191,col 9)-(line 194,col 9)",
        "(line 195,col 9)-(line 195,col 48)",
        "(line 196,col 9)-(line 196,col 48)",
        "(line 198,col 9)-(line 199,col 39)",
        "(line 200,col 9)-(line 200,col 56)",
        "(line 201,col 9)-(line 201,col 57)",
        "(line 202,col 9)-(line 204,col 9)",
        "(line 205,col 9)-(line 205,col 53)",
        "(line 206,col 9)-(line 206,col 36)",
        "(line 207,col 9)-(line 207,col 33)",
        "(line 208,col 9)-(line 208,col 43)",
        "(line 209,col 9)-(line 209,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.createState(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 222,
      "end_line": 224,
      "comment": "\r\n     * Creates a new state instance.  This method is called from\r\n     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int,\r\n     * PlotRenderingInfo)}, and we override it to ensure that the state\r\n     * contains a working Line2D instance.\r\n     *\r\n     * @param info  the plot rendering info (\u003ccode\u003enull\u003c/code\u003e is permitted).\r\n     *\r\n     * @return A new state instance.\r\n     ",
      "child_ranges": [
        "(line 223,col 9)-(line 223,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.drawLine(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryStepRenderer.State, org.jfree.chart.plot.PlotOrientation, double, double, double, double)",
      "begin_line": 243,
      "end_line": 256,
      "comment": "\r\n     * Draws a line taking into account the specified orientation.\r\n     * \u003cp\u003e\r\n     * In version 1.0.5, the signature of this method was changed by the\r\n     * addition of the \u0027state\u0027 parameter.  This is an incompatible change, but\r\n     * is considered a low risk because it is unlikely that anyone has\r\n     * subclassed this renderer.  If this *does* cause trouble for you, please\r\n     * report it as a bug.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param orientation  the plot orientation.\r\n     * @param x0  the x-coordinate for the start of the line.\r\n     * @param y0  the y-coordinate for the start of the line.\r\n     * @param x1  the x-coordinate for the end of the line.\r\n     * @param y1  the y-coordinate for the end of the line.\r\n     ",
      "child_ranges": [
        "(line 247,col 9)-(line 254,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 272,
      "end_line": 347,
      "comment": "\r\n     * Draw a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area in which the data is drawn.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 278,col 9)-(line 280,col 9)",
        "(line 282,col 9)-(line 282,col 53)",
        "(line 283,col 9)-(line 285,col 9)",
        "(line 286,col 9)-(line 286,col 60)",
        "(line 289,col 9)-(line 290,col 52)",
        "(line 291,col 9)-(line 292,col 52)",
        "(line 293,col 9)-(line 293,col 34)",
        "(line 294,col 9)-(line 295,col 41)",
        "(line 296,col 9)-(line 296,col 57)",
        "(line 297,col 9)-(line 297,col 59)",
        "(line 299,col 9)-(line 324,col 8)",
        "(line 325,col 8)-(line 325,col 66)",
        "(line 329,col 8)-(line 332,col 8)",
        "(line 335,col 8)-(line 335,col 63)",
        "(line 336,col 8)-(line 345,col 8)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.CategoryStepRenderer.equals(java.lang.Object)",
      "begin_line": 356,
      "end_line": 368,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 357,col 9)-(line 359,col 9)",
        "(line 360,col 9)-(line 362,col 9)",
        "(line 363,col 9)-(line 363,col 63)",
        "(line 364,col 9)-(line 366,col 9)",
        "(line 367,col 9)-(line 367,col 33)"
      ]
    }
  ]
}