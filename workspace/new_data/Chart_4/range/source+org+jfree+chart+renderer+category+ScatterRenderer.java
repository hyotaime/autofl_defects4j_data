{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/ScatterRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "ScatterRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 86,
      "end_line": 592,
      "comment": "\n * A renderer that handles the multiple values from a\n * {@link MultiValueCategoryDataset} by plotting a shape for each value for\n * each given item in the dataset. The example shown here is generated by\n * the \u003ccode\u003eScatterRendererDemo1.java\u003c/code\u003e program included in the\n * JFreeChart Demo Collection:\n * \u003cbr\u003e\u003cbr\u003e\n * \u003cimg src\u003d\"../../../../../images/ScatterRendererSample.png\"\n * alt\u003d\"ScatterRendererSample.png\" /\u003e\n *\n * @since 1.0.7\n "
    },
    {
      "type": "field",
      "varNames": [
        "seriesShapesFilled"
      ],
      "begin_line": 93,
      "end_line": 93,
      "comment": "\n     * A table of flags that control (per series) whether or not shapes are\n     * filled.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "baseShapesFilled"
      ],
      "begin_line": 98,
      "end_line": 98,
      "comment": "\n     * The default value returned by the getShapeFilled() method.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useFillPaint"
      ],
      "begin_line": 104,
      "end_line": 104,
      "comment": "\n     * A flag that controls whether the fill paint is used for filling\n     * shapes.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "drawOutlines"
      ],
      "begin_line": 109,
      "end_line": 109,
      "comment": "\n     * A flag that controls whether outlines are drawn for shapes.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useOutlinePaint"
      ],
      "begin_line": 115,
      "end_line": 115,
      "comment": "\n     * A flag that controls whether the outline paint is used for drawing shape\n     * outlines - if not, the regular series paint is used.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useSeriesOffset"
      ],
      "begin_line": 121,
      "end_line": 121,
      "comment": "\n     * A flag that controls whether or not the x-position for each item is\n     * offset within the category according to the series.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "itemMargin"
      ],
      "begin_line": 127,
      "end_line": 127,
      "comment": "\n     * The item margin used for series offsetting - this allows the positioning\n     * to match the bar positions of the {@link BarRenderer} class.\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.ScatterRenderer()",
      "begin_line": 132,
      "end_line": 140,
      "comment": "\n     * Constructs a new renderer.\n     ",
      "child_ranges": [
        "(line 133,col 9)-(line 133,col 52)",
        "(line 134,col 9)-(line 134,col 37)",
        "(line 135,col 9)-(line 135,col 34)",
        "(line 136,col 9)-(line 136,col 34)",
        "(line 137,col 9)-(line 137,col 37)",
        "(line 138,col 9)-(line 138,col 36)",
        "(line 139,col 9)-(line 139,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getUseSeriesOffset()",
      "begin_line": 150,
      "end_line": 152,
      "comment": "\n     * Returns the flag that controls whether or not the x-position for each\n     * data item is offset within the category according to the series.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseSeriesOffset(boolean)\n     ",
      "child_ranges": [
        "(line 151,col 9)-(line 151,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setUseSeriesOffset(boolean)",
      "begin_line": 163,
      "end_line": 166,
      "comment": "\n     * Sets the flag that controls whether or not the x-position for each\n     * data item is offset within its category according to the series, and\n     * sends a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset.\n     *\n     * @see #getUseSeriesOffset()\n     ",
      "child_ranges": [
        "(line 164,col 9)-(line 164,col 38)",
        "(line 165,col 9)-(line 165,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getItemMargin()",
      "begin_line": 179,
      "end_line": 181,
      "comment": "\n     * Returns the item margin, which is the gap between items within a\n     * category (expressed as a percentage of the overall category width).\n     * This can be used to match the offset alignment with the bars drawn by\n     * a {@link BarRenderer}).\n     *\n     * @return The item margin.\n     *\n     * @see #setItemMargin(double)\n     * @see #getUseSeriesOffset()\n     ",
      "child_ranges": [
        "(line 180,col 9)-(line 180,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setItemMargin(double)",
      "begin_line": 193,
      "end_line": 199,
      "comment": "\n     * Sets the item margin, which is the gap between items within a category\n     * (expressed as a percentage of the overall category width), and sends\n     * a {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param margin  the margin (0.0 \u003c\u003d margin \u003c 1.0).\n     *\n     * @see #getItemMargin()\n     * @see #getUseSeriesOffset()\n     ",
      "child_ranges": [
        "(line 194,col 9)-(line 196,col 9)",
        "(line 197,col 9)-(line 197,col 33)",
        "(line 198,col 9)-(line 198,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getDrawOutlines()",
      "begin_line": 209,
      "end_line": 211,
      "comment": "\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if outlines should be drawn for shapes, and\n     * \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setDrawOutlines(boolean)\n     ",
      "child_ranges": [
        "(line 210,col 9)-(line 210,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setDrawOutlines(boolean)",
      "begin_line": 225,
      "end_line": 228,
      "comment": "\n     * Sets the flag that controls whether outlines are drawn for\n     * shapes, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     * \u003cp/\u003e\n     * In some cases, shapes look better if they do NOT have an outline, but\n     * this flag allows you to set your own preference.\n     *\n     * @param flag the flag.\n     *\n     * @see #getDrawOutlines()\n     ",
      "child_ranges": [
        "(line 226,col 9)-(line 226,col 33)",
        "(line 227,col 9)-(line 227,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getUseOutlinePaint()",
      "begin_line": 238,
      "end_line": 240,
      "comment": "\n     * Returns the flag that controls whether the outline paint is used for\n     * shape outlines.  If not, the regular series paint is used.\n     *\n     * @return A boolean.\n     *\n     * @see #setUseOutlinePaint(boolean)\n     ",
      "child_ranges": [
        "(line 239,col 9)-(line 239,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setUseOutlinePaint(boolean)",
      "begin_line": 251,
      "end_line": 254,
      "comment": "\n     * Sets the flag that controls whether the outline paint is used for shape\n     * outlines, and sends a {@link RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param use the flag.\n     *\n     * @see #getUseOutlinePaint()\n     ",
      "child_ranges": [
        "(line 252,col 9)-(line 252,col 35)",
        "(line 253,col 9)-(line 253,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getItemShapeFilled(int, int)",
      "begin_line": 268,
      "end_line": 270,
      "comment": "\n     * Returns the flag used to control whether or not the shape for an item\n     * is filled. The default implementation passes control to the\n     * \u003ccode\u003egetSeriesShapesFilled\u003c/code\u003e method. You can override this method\n     * if you require different behaviour.\n     *\n     * @param series the series index (zero-based).\n     * @param item   the item index (zero-based).\n     * @return A boolean.\n     ",
      "child_ranges": [
        "(line 269,col 9)-(line 269,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getSeriesShapesFilled(int)",
      "begin_line": 279,
      "end_line": 288,
      "comment": "\n     * Returns the flag used to control whether or not the shapes for a series\n     * are filled.\n     *\n     * @param series the series index (zero-based).\n     * @return A boolean.\n     ",
      "child_ranges": [
        "(line 280,col 9)-(line 280,col 66)",
        "(line 281,col 9)-(line 286,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setSeriesShapesFilled(int, java.lang.Boolean)",
      "begin_line": 297,
      "end_line": 300,
      "comment": "\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series the series index (zero-based).\n     * @param filled the flag.\n     ",
      "child_ranges": [
        "(line 298,col 9)-(line 298,col 59)",
        "(line 299,col 9)-(line 299,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setSeriesShapesFilled(int, boolean)",
      "begin_line": 309,
      "end_line": 312,
      "comment": "\n     * Sets the \u0027shapes filled\u0027 flag for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series the series index (zero-based).\n     * @param filled the flag.\n     ",
      "child_ranges": [
        "(line 310,col 9)-(line 310,col 76)",
        "(line 311,col 9)-(line 311,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getBaseShapesFilled()",
      "begin_line": 319,
      "end_line": 321,
      "comment": "\n     * Returns the base \u0027shape filled\u0027 attribute.\n     *\n     * @return The base flag.\n     ",
      "child_ranges": [
        "(line 320,col 9)-(line 320,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setBaseShapesFilled(boolean)",
      "begin_line": 329,
      "end_line": 332,
      "comment": "\n     * Sets the base \u0027shapes filled\u0027 flag and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param flag the flag.\n     ",
      "child_ranges": [
        "(line 330,col 9)-(line 330,col 37)",
        "(line 331,col 9)-(line 331,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getUseFillPaint()",
      "begin_line": 341,
      "end_line": 343,
      "comment": "\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the fill paint\n     * setting to fill shapes, and \u003ccode\u003efalse\u003c/code\u003e if it should just\n     * use the regular paint.\n     *\n     * @return A boolean.\n     ",
      "child_ranges": [
        "(line 342,col 9)-(line 342,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.setUseFillPaint(boolean)",
      "begin_line": 352,
      "end_line": 355,
      "comment": "\n     * Sets the flag that controls whether the fill paint is used to fill\n     * shapes, and sends a {@link RendererChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag the flag.\n     ",
      "child_ranges": [
        "(line 353,col 9)-(line 353,col 33)",
        "(line 354,col 9)-(line 354,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
      "begin_line": 367,
      "end_line": 369,
      "comment": "\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset. This takes into account the range\n     * between the min/max values, possibly ignoring invisible series.\n     *\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n     *\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\n     ",
      "child_ranges": [
        "(line 368,col 10)-(line 368,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 386,
      "end_line": 454,
      "comment": "\n     * Draw a single data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the area in which the data is drawn.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param selected  is the item selected?\n     * @param pass  the pass index.\n     ",
      "child_ranges": [
        "(line 392,col 9)-(line 394,col 9)",
        "(line 395,col 9)-(line 395,col 58)",
        "(line 396,col 9)-(line 398,col 9)",
        "(line 399,col 9)-(line 399,col 60)",
        "(line 401,col 9)-(line 401,col 60)",
        "(line 403,col 9)-(line 403,col 74)",
        "(line 404,col 9)-(line 404,col 47)",
        "(line 405,col 9)-(line 407,col 9)",
        "(line 408,col 9)-(line 408,col 39)",
        "(line 409,col 9)-(line 452,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.getLegendItem(int, int)",
      "begin_line": 464,
      "end_line": 513,
      "comment": "\n     * Returns a legend item for a series.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item.\n     ",
      "child_ranges": [
        "(line 466,col 9)-(line 466,col 36)",
        "(line 467,col 9)-(line 469,col 9)",
        "(line 471,col 9)-(line 510,col 9)",
        "(line 511,col 9)-(line 511,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.equals(java.lang.Object)",
      "begin_line": 521,
      "end_line": 552,
      "comment": "\n     * Tests this renderer for equality with an arbitrary object.\n     *\n     * @param obj the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n     * @return A boolean.\n     ",
      "child_ranges": [
        "(line 522,col 9)-(line 524,col 9)",
        "(line 525,col 9)-(line 527,col 9)",
        "(line 528,col 9)-(line 528,col 53)",
        "(line 529,col 9)-(line 532,col 9)",
        "(line 533,col 9)-(line 535,col 9)",
        "(line 536,col 9)-(line 538,col 9)",
        "(line 539,col 9)-(line 541,col 9)",
        "(line 542,col 9)-(line 544,col 9)",
        "(line 545,col 9)-(line 547,col 9)",
        "(line 548,col 9)-(line 550,col 9)",
        "(line 551,col 9)-(line 551,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.clone()",
      "begin_line": 561,
      "end_line": 566,
      "comment": "\n     * Returns an independent copy of the renderer.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  should not happen.\n     ",
      "child_ranges": [
        "(line 562,col 9)-(line 562,col 64)",
        "(line 563,col 9)-(line 564,col 64)",
        "(line 565,col 9)-(line 565,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 574,
      "end_line": 577,
      "comment": "\n     * Provides serialization support.\n     *\n     * @param stream the output stream.\n     * @throws java.io.IOException if there is an I/O error.\n     ",
      "child_ranges": [
        "(line 575,col 9)-(line 575,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.ScatterRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 586,
      "end_line": 590,
      "comment": "\n     * Provides serialization support.\n     *\n     * @param stream the input stream.\n     * @throws java.io.IOException    if there is an I/O error.\n     * @throws ClassNotFoundException if there is a classpath problem.\n     ",
      "child_ranges": [
        "(line 588,col 9)-(line 588,col 35)"
      ]
    }
  ]
}