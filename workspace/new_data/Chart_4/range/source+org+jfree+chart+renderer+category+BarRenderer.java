{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/BarRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "BarRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 144,
      "end_line": 1412,
      "comment": "\r\n * A {@link CategoryItemRenderer} that draws individual data items as bars.\r\n * The example shown here is generated by the \u003ccode\u003eBarChartDemo1.java\u003c/code\u003e\r\n * program included in the JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/BarRendererSample.png\"\r\n * alt\u003d\"BarRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 148,
      "end_line": 148,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_ITEM_MARGIN"
      ],
      "begin_line": 151,
      "end_line": 151,
      "comment": " The default item margin percentage. "
    },
    {
      "type": "field",
      "varNames": [
        "BAR_OUTLINE_WIDTH_THRESHOLD"
      ],
      "begin_line": 157,
      "end_line": 157,
      "comment": "\r\n     * Constant that controls the minimum width before a bar has an outline\r\n     * drawn.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "defaultBarPainter"
      ],
      "begin_line": 164,
      "end_line": 164,
      "comment": "\r\n     * The default bar painter assigned to each new instance of this renderer.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter()",
      "begin_line": 173,
      "end_line": 175,
      "comment": "\r\n     * Returns the default bar painter.\r\n     *\r\n     * @return The default bar painter.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 174,col 9)-(line 174,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)",
      "begin_line": 184,
      "end_line": 189,
      "comment": "\r\n     * Sets the default bar painter.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 185,col 9)-(line 187,col 9)",
        "(line 188,col 9)-(line 188,col 48)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "defaultShadowsVisible"
      ],
      "begin_line": 194,
      "end_line": 194,
      "comment": "\r\n     * The default value for the initialisation of the shadowsVisible flag.\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible()",
      "begin_line": 205,
      "end_line": 207,
      "comment": "\r\n     * Returns the default value for the \u003ccode\u003eshadowsVisible\u003c/code\u003e flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDefaultShadowsVisible(boolean)\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 206,col 9)-(line 206,col 49)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setDefaultShadowsVisible(boolean)",
      "begin_line": 218,
      "end_line": 220,
      "comment": "\r\n     * Sets the default value for the shadows visible flag.\r\n     *\r\n     * @param visible  the new value for the default.\r\n     *\r\n     * @see #getDefaultShadowsVisible()\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 219,col 9)-(line 219,col 52)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "itemMargin"
      ],
      "begin_line": 223,
      "end_line": 223,
      "comment": " The margin between items (bars) within a category. "
    },
    {
      "type": "field",
      "varNames": [
        "drawBarOutline"
      ],
      "begin_line": 226,
      "end_line": 226,
      "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "maximumBarWidth"
      ],
      "begin_line": 229,
      "end_line": 229,
      "comment": " The maximum bar width as a percentage of the available space. "
    },
    {
      "type": "field",
      "varNames": [
        "minimumBarLength"
      ],
      "begin_line": 232,
      "end_line": 232,
      "comment": " The minimum bar length (in Java2D units). "
    },
    {
      "type": "field",
      "varNames": [
        "gradientPaintTransformer"
      ],
      "begin_line": 238,
      "end_line": 238,
      "comment": "\r\n     * An optional class used to transform gradient paint objects to fit each\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "positiveItemLabelPositionFallback"
      ],
      "begin_line": 244,
      "end_line": 244,
      "comment": "\r\n     * The fallback position if a positive item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "negativeItemLabelPositionFallback"
      ],
      "begin_line": 250,
      "end_line": 250,
      "comment": "\r\n     * The fallback position if a negative item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "upperClip"
      ],
      "begin_line": 253,
      "end_line": 253,
      "comment": " The upper clip (axis) value for the axis. "
    },
    {
      "type": "field",
      "varNames": [
        "lowerClip"
      ],
      "begin_line": 257,
      "end_line": 257,
      "comment": " The lower clip (axis) value for the axis. "
    },
    {
      "type": "field",
      "varNames": [
        "base"
      ],
      "begin_line": 261,
      "end_line": 261,
      "comment": " The base value for the bars (defaults to 0.0). "
    },
    {
      "type": "field",
      "varNames": [
        "includeBaseInRange"
      ],
      "begin_line": 267,
      "end_line": 267,
      "comment": "\r\n     * A flag that controls whether the base value is included in the range\r\n     * returned by the findRangeBounds() method.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "barPainter"
      ],
      "begin_line": 274,
      "end_line": 274,
      "comment": "\r\n     * The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowsVisible"
      ],
      "begin_line": 281,
      "end_line": 281,
      "comment": "\r\n     * The flag that controls whether or not shadows are drawn for the bars.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowPaint"
      ],
      "begin_line": 288,
      "end_line": 288,
      "comment": "\r\n     * The shadow paint.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowXOffset"
      ],
      "begin_line": 295,
      "end_line": 295,
      "comment": "\r\n     * The x-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowYOffset"
      ],
      "begin_line": 302,
      "end_line": 302,
      "comment": "\r\n     * The y-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.BarRenderer()",
      "begin_line": 307,
      "end_line": 325,
      "comment": "\r\n     * Creates a new bar renderer with default settings.\r\n     ",
      "child_ranges": [
        "(line 308,col 9)-(line 308,col 16)",
        "(line 309,col 9)-(line 309,col 24)",
        "(line 310,col 9)-(line 310,col 39)",
        "(line 311,col 9)-(line 311,col 46)",
        "(line 312,col 9)-(line 312,col 36)",
        "(line 313,col 9)-(line 313,col 35)",
        "(line 315,col 9)-(line 315,col 54)",
        "(line 316,col 9)-(line 316,col 54)",
        "(line 317,col 9)-(line 317,col 79)",
        "(line 318,col 9)-(line 318,col 36)",
        "(line 319,col 9)-(line 319,col 73)",
        "(line 320,col 9)-(line 320,col 49)",
        "(line 321,col 9)-(line 321,col 57)",
        "(line 322,col 9)-(line 322,col 38)",
        "(line 323,col 9)-(line 323,col 33)",
        "(line 324,col 9)-(line 324,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getBase()",
      "begin_line": 335,
      "end_line": 337,
      "comment": "\r\n     * Returns the base value for the bars.  The default value is\r\n     * \u003ccode\u003e0.0\u003c/code\u003e.\r\n     *\r\n     * @return The base value for the bars.\r\n     *\r\n     * @see #setBase(double)\r\n     ",
      "child_ranges": [
        "(line 336,col 9)-(line 336,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setBase(double)",
      "begin_line": 347,
      "end_line": 350,
      "comment": "\r\n     * Sets the base value for the bars and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param base  the new base value.\r\n     *\r\n     * @see #getBase()\r\n     ",
      "child_ranges": [
        "(line 348,col 9)-(line 348,col 25)",
        "(line 349,col 9)-(line 349,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getItemMargin()",
      "begin_line": 360,
      "end_line": 362,
      "comment": "\r\n     * Returns the item margin as a percentage of the available space for all\r\n     * bars.\r\n     *\r\n     * @return The margin percentage (where 0.10 is ten percent).\r\n     *\r\n     * @see #setItemMargin(double)\r\n     ",
      "child_ranges": [
        "(line 361,col 9)-(line 361,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setItemMargin(double)",
      "begin_line": 374,
      "end_line": 377,
      "comment": "\r\n     * Sets the item margin and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.  The value is expressed as a percentage of the\r\n     * available width for plotting all the bars, with the resulting amount to\r\n     * be distributed between all the bars evenly.\r\n     *\r\n     * @param percent  the margin (where 0.10 is ten percent).\r\n     *\r\n     * @see #getItemMargin()\r\n     ",
      "child_ranges": [
        "(line 375,col 9)-(line 375,col 34)",
        "(line 376,col 9)-(line 376,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.isDrawBarOutline()",
      "begin_line": 386,
      "end_line": 388,
      "comment": "\r\n     * Returns a flag that controls whether or not bar outlines are drawn.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawBarOutline(boolean)\r\n     ",
      "child_ranges": [
        "(line 387,col 9)-(line 387,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setDrawBarOutline(boolean)",
      "begin_line": 398,
      "end_line": 401,
      "comment": "\r\n     * Sets the flag that controls whether or not bar outlines are drawn and\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param draw  the flag.\r\n     *\r\n     * @see #isDrawBarOutline()\r\n     ",
      "child_ranges": [
        "(line 399,col 9)-(line 399,col 35)",
        "(line 400,col 9)-(line 400,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getMaximumBarWidth()",
      "begin_line": 411,
      "end_line": 413,
      "comment": "\r\n     * Returns the maximum bar width, as a percentage of the available drawing\r\n     * space.\r\n     *\r\n     * @return The maximum bar width.\r\n     *\r\n     * @see #setMaximumBarWidth(double)\r\n     ",
      "child_ranges": [
        "(line 412,col 9)-(line 412,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setMaximumBarWidth(double)",
      "begin_line": 424,
      "end_line": 427,
      "comment": "\r\n     * Sets the maximum bar width, which is specified as a percentage of the\r\n     * available space for all bars, and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param percent  the percent (where 0.05 is five percent).\r\n     *\r\n     * @see #getMaximumBarWidth()\r\n     ",
      "child_ranges": [
        "(line 425,col 9)-(line 425,col 39)",
        "(line 426,col 9)-(line 426,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getMinimumBarLength()",
      "begin_line": 437,
      "end_line": 439,
      "comment": "\r\n     * Returns the minimum bar length (in Java2D units).  The default value is\r\n     * 0.0.\r\n     *\r\n     * @return The minimum bar length.\r\n     *\r\n     * @see #setMinimumBarLength(double)\r\n     ",
      "child_ranges": [
        "(line 438,col 9)-(line 438,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)",
      "begin_line": 455,
      "end_line": 461,
      "comment": "\r\n     * Sets the minimum bar length and sends a {@link RendererChangeEvent} to\r\n     * all registered listeners.  The minimum bar length is specified in Java2D\r\n     * units, and can be used to prevent bars that represent very small data\r\n     * values from disappearing when drawn on the screen.  Typically you would\r\n     * set this to (say) 0.5 or 1.0 Java 2D units.  Use this attribute with\r\n     * caution, however, because setting it to a non-zero value will\r\n     * artificially increase the length of bars representing small values,\r\n     * which may misrepresent your data.\r\n     *\r\n     * @param min  the minimum bar length (in Java2D units, must be \u003e\u003d 0.0).\r\n     *\r\n     * @see #getMinimumBarLength()\r\n     ",
      "child_ranges": [
        "(line 456,col 9)-(line 458,col 9)",
        "(line 459,col 9)-(line 459,col 36)",
        "(line 460,col 9)-(line 460,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getGradientPaintTransformer()",
      "begin_line": 471,
      "end_line": 473,
      "comment": "\r\n     * Returns the gradient paint transformer (an object used to transform\r\n     * gradient paint objects to fit each bar).\r\n     *\r\n     * @return A transformer (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\r\n     ",
      "child_ranges": [
        "(line 472,col 9)-(line 472,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
      "begin_line": 483,
      "end_line": 487,
      "comment": "\r\n     * Sets the gradient paint transformer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param transformer  the transformer (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getGradientPaintTransformer()\r\n     ",
      "child_ranges": [
        "(line 485,col 9)-(line 485,col 52)",
        "(line 486,col 9)-(line 486,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getPositiveItemLabelPositionFallback()",
      "begin_line": 497,
      "end_line": 499,
      "comment": "\r\n     * Returns the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\r\n     ",
      "child_ranges": [
        "(line 498,col 9)-(line 498,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 510,
      "end_line": 514,
      "comment": "\r\n     * Sets the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getPositiveItemLabelPositionFallback()\r\n     ",
      "child_ranges": [
        "(line 512,col 9)-(line 512,col 58)",
        "(line 513,col 9)-(line 513,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getNegativeItemLabelPositionFallback()",
      "begin_line": 524,
      "end_line": 526,
      "comment": "\r\n     * Returns the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\r\n     ",
      "child_ranges": [
        "(line 525,col 9)-(line 525,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 537,
      "end_line": 541,
      "comment": "\r\n     * Sets the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getNegativeItemLabelPositionFallback()\r\n     ",
      "child_ranges": [
        "(line 539,col 9)-(line 539,col 58)",
        "(line 540,col 9)-(line 540,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getIncludeBaseInRange()",
      "begin_line": 555,
      "end_line": 557,
      "comment": "\r\n     * Returns the flag that controls whether or not the base value for the\r\n     * bars is included in the range calculated by\r\n     * {@link #findRangeBounds(CategoryDataset)}.\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the base is included in the range, and\r\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @since 1.0.1\r\n     *\r\n     * @see #setIncludeBaseInRange(boolean)\r\n     ",
      "child_ranges": [
        "(line 556,col 9)-(line 556,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)",
      "begin_line": 571,
      "end_line": 576,
      "comment": "\r\n     * Sets the flag that controls whether or not the base value for the bars\r\n     * is included in the range calculated by\r\n     * {@link #findRangeBounds(CategoryDataset)}.  If the flag is changed,\r\n     * a {@link RendererChangeEvent} is sent to all registered listeners.\r\n     *\r\n     * @param include  the new value for the flag.\r\n     *\r\n     * @since 1.0.1\r\n     *\r\n     * @see #getIncludeBaseInRange()\r\n     ",
      "child_ranges": [
        "(line 572,col 9)-(line 575,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getBarPainter()",
      "begin_line": 587,
      "end_line": 589,
      "comment": "\r\n     * Returns the bar painter.\r\n     *\r\n     * @return The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setBarPainter(BarPainter)\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 588,col 9)-(line 588,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setBarPainter(org.jfree.chart.renderer.category.BarPainter)",
      "begin_line": 601,
      "end_line": 607,
      "comment": "\r\n     * Sets the bar painter for this renderer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getBarPainter()\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 602,col 9)-(line 604,col 9)",
        "(line 605,col 9)-(line 605,col 34)",
        "(line 606,col 9)-(line 606,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowsVisible()",
      "begin_line": 617,
      "end_line": 619,
      "comment": "\r\n     * Returns the flag that controls whether or not shadows are drawn for\r\n     * the bars.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 618,col 9)-(line 618,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowVisible(boolean)",
      "begin_line": 629,
      "end_line": 632,
      "comment": "\r\n     * Sets the flag that controls whether or not shadows are\r\n     * drawn by the renderer.\r\n     *\r\n     * @param visible  the new flag value.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 630,col 9)-(line 630,col 38)",
        "(line 631,col 9)-(line 631,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowPaint()",
      "begin_line": 643,
      "end_line": 645,
      "comment": "\r\n     * Returns the shadow paint.\r\n     *\r\n     * @return The shadow paint.\r\n     *\r\n     * @see #setShadowPaint(Paint)\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 644,col 9)-(line 644,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowPaint(java.awt.Paint)",
      "begin_line": 657,
      "end_line": 663,
      "comment": "\r\n     * Sets the shadow paint and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getShadowPaint()\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 658,col 9)-(line 660,col 9)",
        "(line 661,col 9)-(line 661,col 33)",
        "(line 662,col 9)-(line 662,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowXOffset()",
      "begin_line": 672,
      "end_line": 674,
      "comment": "\r\n     * Returns the shadow x-offset.\r\n     *\r\n     * @return The shadow x-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 673,col 9)-(line 673,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowXOffset(double)",
      "begin_line": 684,
      "end_line": 687,
      "comment": "\r\n     * Sets the x-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 685,col 9)-(line 685,col 36)",
        "(line 686,col 9)-(line 686,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowYOffset()",
      "begin_line": 696,
      "end_line": 698,
      "comment": "\r\n     * Returns the shadow y-offset.\r\n     *\r\n     * @return The shadow y-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 697,col 9)-(line 697,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowYOffset(double)",
      "begin_line": 708,
      "end_line": 711,
      "comment": "\r\n     * Sets the y-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 709,col 9)-(line 709,col 36)",
        "(line 710,col 9)-(line 710,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getLowerClip()",
      "begin_line": 719,
      "end_line": 722,
      "comment": "\r\n     * Returns the lower clip value.  This value is recalculated in the\r\n     * initialise() method.\r\n     *\r\n     * @return The value.\r\n     ",
      "child_ranges": [
        "(line 721,col 9)-(line 721,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getUpperClip()",
      "begin_line": 730,
      "end_line": 733,
      "comment": "\r\n     * Returns the upper clip value.  This value is recalculated in the\r\n     * initialise() method.\r\n     *\r\n     * @return The value.\r\n     ",
      "child_ranges": [
        "(line 732,col 9)-(line 732,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 748,
      "end_line": 767,
      "comment": "\r\n     * Initialises the renderer and returns a state object that will be passed\r\n     * to subsequent calls to the drawItem method.  This method gets called\r\n     * once at the start of the process of drawing a chart.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data is to be plotted.\r\n     * @param plot  the plot.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param info  collects chart rendering information for return to caller.\r\n     *\r\n     * @return The renderer state.\r\n     ",
      "child_ranges": [
        "(line 754,col 9)-(line 755,col 37)",
        "(line 758,col 9)-(line 758,col 73)",
        "(line 759,col 9)-(line 759,col 62)",
        "(line 760,col 9)-(line 760,col 62)",
        "(line 763,col 9)-(line 763,col 64)",
        "(line 765,col 9)-(line 765,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)",
      "begin_line": 777,
      "end_line": 815,
      "comment": "\r\n     * Calculates the bar width and stores it in the renderer state.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param state  the renderer state.\r\n     ",
      "child_ranges": [
        "(line 782,col 9)-(line 782,col 69)",
        "(line 783,col 9)-(line 783,col 65)",
        "(line 784,col 9)-(line 814,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)",
      "begin_line": 832,
      "end_line": 866,
      "comment": "\r\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\r\n     * the minimum x-coordinate for a vertical bar, and the minimum\r\n     * y-coordinate for a horizontal bar.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param orientation  the plot orientation.\r\n     * @param dataArea  the data area.\r\n     * @param domainAxis  the domain axis.\r\n     * @param state  the renderer state (has the bar width precalculated).\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The coordinate.\r\n     ",
      "child_ranges": [
        "(line 840,col 9)-(line 840,col 27)",
        "(line 841,col 9)-(line 846,col 9)",
        "(line 847,col 9)-(line 848,col 52)",
        "(line 849,col 9)-(line 850,col 64)",
        "(line 851,col 9)-(line 851,col 45)",
        "(line 852,col 9)-(line 864,col 9)",
        "(line 865,col 9)-(line 865,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarL0L1(double)",
      "begin_line": 876,
      "end_line": 890,
      "comment": "\r\n     * Calculates the coordinates for the length of a single bar.\r\n     *\r\n     * @param value  the value represented by the bar.\r\n     *\r\n     * @return The coordinates for each end of the bar (or \u003ccode\u003enull\u003c/code\u003e if\r\n     *         the bar is not visible for the current axis range).\r\n     ",
      "child_ranges": [
        "(line 877,col 9)-(line 877,col 38)",
        "(line 878,col 9)-(line 878,col 38)",
        "(line 879,col 9)-(line 879,col 51)",
        "(line 880,col 9)-(line 880,col 52)",
        "(line 881,col 9)-(line 883,col 9)",
        "(line 884,col 9)-(line 886,col 9)",
        "(line 887,col 9)-(line 887,col 41)",
        "(line 888,col 9)-(line 888,col 43)",
        "(line 889,col 9)-(line 889,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
      "begin_line": 904,
      "end_line": 916,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.  This takes into account the range\r\n     * of values in the dataset, plus the flag that determines whether or not\r\n     * the base value for the bars should be included in the range.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     * @param includeInterval  include the interval if the dataset has one?\r\n     *\r\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 906,col 9)-(line 908,col 9)",
        "(line 909,col 9)-(line 909,col 71)",
        "(line 910,col 9)-(line 914,col 9)",
        "(line 915,col 9)-(line 915,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.getLegendItem(int, int)",
      "begin_line": 926,
      "end_line": 974,
      "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 928,col 9)-(line 928,col 36)",
        "(line 929,col 9)-(line 931,col 9)",
        "(line 934,col 9)-(line 936,col 9)",
        "(line 938,col 9)-(line 938,col 62)",
        "(line 939,col 9)-(line 940,col 24)",
        "(line 941,col 9)-(line 941,col 35)",
        "(line 942,col 9)-(line 942,col 34)",
        "(line 943,col 9)-(line 946,col 9)",
        "(line 947,col 9)-(line 947,col 30)",
        "(line 948,col 9)-(line 951,col 9)",
        "(line 952,col 9)-(line 952,col 48)",
        "(line 953,col 9)-(line 953,col 48)",
        "(line 954,col 9)-(line 954,col 62)",
        "(line 955,col 9)-(line 955,col 65)",
        "(line 957,col 9)-(line 960,col 52)",
        "(line 961,col 9)-(line 961,col 58)",
        "(line 962,col 9)-(line 962,col 57)",
        "(line 963,col 9)-(line 965,col 9)",
        "(line 966,col 9)-(line 966,col 35)",
        "(line 967,col 9)-(line 967,col 45)",
        "(line 968,col 9)-(line 968,col 55)",
        "(line 969,col 9)-(line 969,col 38)",
        "(line 970,col 9)-(line 972,col 9)",
        "(line 973,col 9)-(line 973,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 991,
      "end_line": 1093,
      "comment": "\r\n     * Draws the bar for a single (series, category) data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param selected  is the item selected?\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 998,col 9)-(line 998,col 58)",
        "(line 999,col 9)-(line 1001,col 9)",
        "(line 1003,col 9)-(line 1003,col 57)",
        "(line 1004,col 9)-(line 1006,col 9)",
        "(line 1008,col 9)-(line 1008,col 53)",
        "(line 1009,col 9)-(line 1009,col 60)",
        "(line 1010,col 9)-(line 1011,col 43)",
        "(line 1012,col 9)-(line 1012,col 51)",
        "(line 1013,col 9)-(line 1015,col 9)",
        "(line 1017,col 9)-(line 1017,col 53)",
        "(line 1018,col 9)-(line 1018,col 77)",
        "(line 1019,col 9)-(line 1019,col 77)",
        "(line 1028,col 9)-(line 1028,col 48)",
        "(line 1029,col 9)-(line 1029,col 50)",
        "(line 1030,col 9)-(line 1030,col 50)",
        "(line 1031,col 9)-(line 1031,col 55)",
        "(line 1032,col 9)-(line 1032,col 34)",
        "(line 1033,col 9)-(line 1035,col 9)",
        "(line 1036,col 9)-(line 1036,col 30)",
        "(line 1037,col 9)-(line 1037,col 30)",
        "(line 1038,col 9)-(line 1055,col 9)",
        "(line 1058,col 9)-(line 1058,col 31)",
        "(line 1059,col 9)-(line 1066,col 9)",
        "(line 1067,col 9)-(line 1070,col 9)",
        "(line 1071,col 9)-(line 1072,col 25)",
        "(line 1074,col 9)-(line 1075,col 34)",
        "(line 1076,col 9)-(line 1079,col 9)",
        "(line 1082,col 9)-(line 1082,col 49)",
        "(line 1083,col 9)-(line 1085,col 57)",
        "(line 1088,col 9)-(line 1088,col 64)",
        "(line 1089,col 9)-(line 1091,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateSeriesWidth(double, org.jfree.chart.axis.CategoryAxis, int, int)",
      "begin_line": 1105,
      "end_line": 1113,
      "comment": "\r\n     * Calculates the available space for each series.\r\n     *\r\n     * @param space  the space along the entire axis (in Java2D units).\r\n     * @param axis  the category axis.\r\n     * @param categories  the number of categories.\r\n     * @param series  the number of series.\r\n     *\r\n     * @return The width of one series.\r\n     ",
      "child_ranges": [
        "(line 1107,col 9)-(line 1108,col 52)",
        "(line 1109,col 9)-(line 1111,col 9)",
        "(line 1112,col 9)-(line 1112,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.drawItemLabelForBar(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.data.category.CategoryDataset, int, int, boolean, org.jfree.chart.labels.CategoryItemLabelGenerator, java.awt.geom.Rectangle2D, boolean)",
      "begin_line": 1132,
      "end_line": 1190,
      "comment": "\r\n     * Draws an item label.  This method is used for bars instead of\r\n     * {@link #drawItemLabel()} so that the bar can be used to calculate the\r\n     * label anchor point.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row.\r\n     * @param column  the column.\r\n     * @param selected  is the item selected?\r\n     * @param plot  the plot.\r\n     * @param generator  the label generator.\r\n     * @param bar  the bar.\r\n     * @param negative  a flag indicating a negative value.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 1137,col 9)-(line 1137,col 69)",
        "(line 1138,col 9)-(line 1140,col 9)",
        "(line 1142,col 9)-(line 1142,col 65)",
        "(line 1143,col 9)-(line 1143,col 30)",
        "(line 1144,col 9)-(line 1144,col 63)",
        "(line 1145,col 9)-(line 1145,col 27)",
        "(line 1148,col 9)-(line 1148,col 42)",
        "(line 1149,col 9)-(line 1154,col 9)",
        "(line 1157,col 9)-(line 1158,col 75)",
        "(line 1160,col 9)-(line 1182,col 9)",
        "(line 1184,col 9)-(line 1189,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
      "begin_line": 1201,
      "end_line": 1301,
      "comment": "\r\n     * Calculates the item label anchor point.\r\n     *\r\n     * @param anchor  the anchor.\r\n     * @param bar  the bar.\r\n     * @param orientation  the plot orientation.\r\n     *\r\n     * @return The anchor point.\r\n     ",
      "child_ranges": [
        "(line 1205,col 9)-(line 1205,col 30)",
        "(line 1206,col 9)-(line 1206,col 51)",
        "(line 1207,col 9)-(line 1207,col 40)",
        "(line 1208,col 9)-(line 1208,col 31)",
        "(line 1209,col 9)-(line 1209,col 40)",
        "(line 1210,col 9)-(line 1210,col 37)",
        "(line 1211,col 9)-(line 1211,col 43)",
        "(line 1212,col 9)-(line 1212,col 34)",
        "(line 1213,col 9)-(line 1213,col 43)",
        "(line 1215,col 9)-(line 1215,col 43)",
        "(line 1216,col 9)-(line 1216,col 34)",
        "(line 1217,col 9)-(line 1217,col 43)",
        "(line 1218,col 9)-(line 1218,col 37)",
        "(line 1219,col 9)-(line 1219,col 43)",
        "(line 1220,col 9)-(line 1220,col 34)",
        "(line 1221,col 9)-(line 1221,col 43)",
        "(line 1223,col 9)-(line 1297,col 9)",
        "(line 1299,col 9)-(line 1299,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)",
      "begin_line": 1310,
      "end_line": 1324,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified anchor point is inside a bar.\r\n     *\r\n     * @param anchor  the anchor point.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1311,col 9)-(line 1323,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.equals(java.lang.Object)",
      "begin_line": 1333,
      "end_line": 1384,
      "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1334,col 9)-(line 1336,col 9)",
        "(line 1337,col 9)-(line 1339,col 9)",
        "(line 1340,col 9)-(line 1340,col 45)",
        "(line 1341,col 9)-(line 1343,col 9)",
        "(line 1344,col 9)-(line 1346,col 9)",
        "(line 1347,col 9)-(line 1349,col 9)",
        "(line 1350,col 9)-(line 1352,col 9)",
        "(line 1353,col 9)-(line 1355,col 9)",
        "(line 1356,col 9)-(line 1359,col 9)",
        "(line 1360,col 9)-(line 1363,col 9)",
        "(line 1364,col 9)-(line 1367,col 9)",
        "(line 1368,col 9)-(line 1370,col 9)",
        "(line 1371,col 9)-(line 1373,col 9)",
        "(line 1374,col 9)-(line 1376,col 9)",
        "(line 1377,col 9)-(line 1379,col 9)",
        "(line 1380,col 9)-(line 1382,col 9)",
        "(line 1383,col 9)-(line 1383,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1393,
      "end_line": 1396,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1394,col 9)-(line 1394,col 36)",
        "(line 1395,col 9)-(line 1395,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.BarRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1406,
      "end_line": 1410,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1408,col 9)-(line 1408,col 35)",
        "(line 1409,col 9)-(line 1409,col 61)"
      ]
    }
  ]
}