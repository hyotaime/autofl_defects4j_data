{
  "filepath": "/tmp/Chart-4b/tests/org/jfree/chart/plot/junit/XYPlotTests.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYPlotTests",
      "is_interface": false,
      "parent_types": [
        "TestCase"
      ],
      "begin_line": 110,
      "end_line": 1218,
      "comment": "\n * Tests for the {@link XYPlot} class.\n "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
      "begin_line": 117,
      "end_line": 119,
      "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
      "child_ranges": [
        "(line 118,col 9)-(line 118,col 48)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(java.lang.String)",
      "begin_line": 126,
      "end_line": 128,
      "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
      "child_ranges": [
        "(line 127,col 9)-(line 127,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
      "begin_line": 144,
      "end_line": 439,
      "comment": "\n     * Some checks for the equals() method.\n     ",
      "child_ranges": [
        "(line 146,col 9)-(line 146,col 36)",
        "(line 147,col 9)-(line 147,col 36)",
        "(line 148,col 9)-(line 148,col 40)",
        "(line 151,col 9)-(line 151,col 57)",
        "(line 152,col 9)-(line 152,col 41)",
        "(line 153,col 9)-(line 153,col 57)",
        "(line 154,col 9)-(line 154,col 40)",
        "(line 157,col 9)-(line 157,col 73)",
        "(line 158,col 9)-(line 158,col 41)",
        "(line 159,col 9)-(line 159,col 73)",
        "(line 160,col 9)-(line 160,col 40)",
        "(line 163,col 9)-(line 163,col 59)",
        "(line 164,col 9)-(line 164,col 41)",
        "(line 165,col 9)-(line 165,col 59)",
        "(line 166,col 9)-(line 166,col 40)",
        "(line 169,col 9)-(line 169,col 63)",
        "(line 170,col 9)-(line 170,col 41)",
        "(line 171,col 9)-(line 171,col 63)",
        "(line 172,col 9)-(line 172,col 40)",
        "(line 175,col 9)-(line 175,col 73)",
        "(line 176,col 9)-(line 176,col 41)",
        "(line 177,col 9)-(line 177,col 73)",
        "(line 178,col 9)-(line 178,col 40)",
        "(line 181,col 9)-(line 181,col 67)",
        "(line 182,col 9)-(line 182,col 41)",
        "(line 183,col 9)-(line 183,col 67)",
        "(line 184,col 9)-(line 184,col 40)",
        "(line 187,col 9)-(line 187,col 57)",
        "(line 188,col 9)-(line 188,col 41)",
        "(line 189,col 9)-(line 189,col 57)",
        "(line 190,col 9)-(line 190,col 40)",
        "(line 193,col 9)-(line 193,col 62)",
        "(line 194,col 9)-(line 194,col 41)",
        "(line 195,col 9)-(line 195,col 62)",
        "(line 196,col 9)-(line 196,col 40)",
        "(line 199,col 9)-(line 199,col 71)",
        "(line 200,col 9)-(line 200,col 41)",
        "(line 201,col 9)-(line 201,col 71)",
        "(line 202,col 9)-(line 202,col 40)",
        "(line 205,col 9)-(line 205,col 66)",
        "(line 206,col 9)-(line 206,col 41)",
        "(line 207,col 9)-(line 207,col 66)",
        "(line 208,col 9)-(line 208,col 40)",
        "(line 211,col 9)-(line 211,col 45)",
        "(line 212,col 9)-(line 212,col 41)",
        "(line 213,col 9)-(line 213,col 45)",
        "(line 214,col 9)-(line 214,col 40)",
        "(line 217,col 9)-(line 217,col 44)",
        "(line 218,col 9)-(line 218,col 41)",
        "(line 219,col 9)-(line 219,col 44)",
        "(line 220,col 9)-(line 220,col 40)",
        "(line 223,col 9)-(line 223,col 55)",
        "(line 224,col 9)-(line 224,col 41)",
        "(line 225,col 9)-(line 225,col 55)",
        "(line 226,col 9)-(line 226,col 40)",
        "(line 229,col 9)-(line 229,col 59)",
        "(line 230,col 9)-(line 230,col 41)",
        "(line 231,col 9)-(line 231,col 59)",
        "(line 232,col 9)-(line 232,col 40)",
        "(line 235,col 9)-(line 235,col 47)",
        "(line 236,col 9)-(line 236,col 41)",
        "(line 237,col 9)-(line 237,col 47)",
        "(line 238,col 9)-(line 238,col 40)",
        "(line 241,col 9)-(line 241,col 46)",
        "(line 242,col 9)-(line 242,col 46)",
        "(line 243,col 9)-(line 243,col 41)",
        "(line 244,col 9)-(line 244,col 46)",
        "(line 245,col 9)-(line 245,col 40)",
        "(line 248,col 9)-(line 249,col 40)",
        "(line 250,col 9)-(line 250,col 41)",
        "(line 251,col 9)-(line 252,col 40)",
        "(line 253,col 9)-(line 253,col 40)",
        "(line 256,col 9)-(line 256,col 46)",
        "(line 257,col 9)-(line 257,col 41)",
        "(line 258,col 9)-(line 258,col 46)",
        "(line 259,col 9)-(line 259,col 40)",
        "(line 262,col 9)-(line 262,col 45)",
        "(line 263,col 9)-(line 263,col 41)",
        "(line 264,col 9)-(line 264,col 45)",
        "(line 265,col 9)-(line 265,col 40)",
        "(line 268,col 9)-(line 269,col 40)",
        "(line 270,col 9)-(line 270,col 41)",
        "(line 271,col 9)-(line 272,col 40)",
        "(line 273,col 9)-(line 273,col 40)",
        "(line 276,col 9)-(line 276,col 48)",
        "(line 277,col 9)-(line 277,col 41)",
        "(line 278,col 9)-(line 278,col 48)",
        "(line 279,col 9)-(line 279,col 40)",
        "(line 282,col 9)-(line 282,col 49)",
        "(line 283,col 9)-(line 283,col 41)",
        "(line 284,col 9)-(line 284,col 49)",
        "(line 285,col 9)-(line 285,col 40)",
        "(line 288,col 9)-(line 289,col 40)",
        "(line 290,col 9)-(line 290,col 41)",
        "(line 291,col 9)-(line 292,col 40)",
        "(line 293,col 9)-(line 293,col 40)",
        "(line 296,col 9)-(line 296,col 45)",
        "(line 297,col 9)-(line 297,col 41)",
        "(line 298,col 9)-(line 298,col 45)",
        "(line 299,col 9)-(line 299,col 40)",
        "(line 302,col 9)-(line 302,col 44)",
        "(line 303,col 9)-(line 303,col 41)",
        "(line 304,col 9)-(line 304,col 44)",
        "(line 305,col 9)-(line 305,col 40)",
        "(line 308,col 9)-(line 308,col 46)",
        "(line 309,col 9)-(line 309,col 41)",
        "(line 310,col 9)-(line 310,col 46)",
        "(line 311,col 9)-(line 311,col 40)",
        "(line 314,col 9)-(line 315,col 40)",
        "(line 316,col 9)-(line 316,col 41)",
        "(line 317,col 9)-(line 318,col 40)",
        "(line 319,col 9)-(line 319,col 40)",
        "(line 322,col 9)-(line 322,col 51)",
        "(line 323,col 9)-(line 323,col 41)",
        "(line 324,col 9)-(line 324,col 51)",
        "(line 325,col 9)-(line 325,col 40)",
        "(line 328,col 9)-(line 328,col 51)",
        "(line 329,col 9)-(line 329,col 41)",
        "(line 330,col 9)-(line 330,col 51)",
        "(line 331,col 9)-(line 331,col 40)",
        "(line 334,col 9)-(line 334,col 72)",
        "(line 335,col 9)-(line 335,col 41)",
        "(line 336,col 9)-(line 336,col 72)",
        "(line 337,col 9)-(line 337,col 40)",
        "(line 339,col 9)-(line 339,col 73)",
        "(line 340,col 9)-(line 340,col 41)",
        "(line 341,col 9)-(line 341,col 73)",
        "(line 342,col 9)-(line 342,col 40)",
        "(line 345,col 9)-(line 345,col 62)",
        "(line 346,col 9)-(line 346,col 41)",
        "(line 347,col 9)-(line 347,col 62)",
        "(line 348,col 9)-(line 348,col 40)",
        "(line 351,col 9)-(line 351,col 27)",
        "(line 352,col 9)-(line 352,col 41)",
        "(line 353,col 9)-(line 353,col 27)",
        "(line 354,col 9)-(line 354,col 40)",
        "(line 357,col 9)-(line 357,col 64)",
        "(line 358,col 9)-(line 358,col 41)",
        "(line 359,col 9)-(line 359,col 64)",
        "(line 360,col 9)-(line 360,col 40)",
        "(line 363,col 9)-(line 364,col 41)",
        "(line 365,col 9)-(line 365,col 41)",
        "(line 366,col 9)-(line 367,col 41)",
        "(line 368,col 9)-(line 368,col 40)",
        "(line 369,col 9)-(line 370,col 41)",
        "(line 371,col 9)-(line 371,col 41)",
        "(line 372,col 9)-(line 373,col 41)",
        "(line 374,col 9)-(line 374,col 40)",
        "(line 375,col 9)-(line 376,col 41)",
        "(line 377,col 9)-(line 377,col 41)",
        "(line 378,col 9)-(line 379,col 41)",
        "(line 380,col 9)-(line 380,col 40)",
        "(line 381,col 9)-(line 382,col 41)",
        "(line 383,col 9)-(line 383,col 41)",
        "(line 384,col 9)-(line 385,col 41)",
        "(line 386,col 9)-(line 386,col 40)",
        "(line 388,col 9)-(line 388,col 48)",
        "(line 389,col 9)-(line 389,col 41)",
        "(line 390,col 9)-(line 390,col 48)",
        "(line 391,col 9)-(line 391,col 40)",
        "(line 393,col 9)-(line 393,col 48)",
        "(line 394,col 9)-(line 394,col 41)",
        "(line 395,col 9)-(line 395,col 48)",
        "(line 396,col 9)-(line 396,col 40)",
        "(line 398,col 9)-(line 398,col 51)",
        "(line 399,col 9)-(line 399,col 41)",
        "(line 400,col 9)-(line 400,col 51)",
        "(line 401,col 9)-(line 401,col 40)",
        "(line 403,col 9)-(line 403,col 53)",
        "(line 404,col 9)-(line 404,col 41)",
        "(line 405,col 9)-(line 405,col 53)",
        "(line 406,col 9)-(line 406,col 40)",
        "(line 408,col 9)-(line 408,col 61)",
        "(line 409,col 9)-(line 409,col 41)",
        "(line 410,col 9)-(line 410,col 61)",
        "(line 411,col 9)-(line 411,col 40)",
        "(line 413,col 9)-(line 413,col 50)",
        "(line 414,col 9)-(line 414,col 41)",
        "(line 415,col 9)-(line 415,col 50)",
        "(line 416,col 9)-(line 416,col 40)",
        "(line 418,col 9)-(line 418,col 53)",
        "(line 419,col 9)-(line 419,col 41)",
        "(line 420,col 9)-(line 420,col 53)",
        "(line 421,col 9)-(line 421,col 40)",
        "(line 423,col 9)-(line 423,col 66)",
        "(line 424,col 9)-(line 424,col 41)",
        "(line 425,col 9)-(line 425,col 66)",
        "(line 426,col 9)-(line 426,col 40)",
        "(line 428,col 9)-(line 429,col 29)",
        "(line 430,col 9)-(line 430,col 53)",
        "(line 431,col 9)-(line 431,col 41)",
        "(line 432,col 9)-(line 432,col 53)",
        "(line 433,col 9)-(line 433,col 40)",
        "(line 435,col 9)-(line 435,col 52)",
        "(line 436,col 9)-(line 436,col 41)",
        "(line 437,col 9)-(line 437,col 52)",
        "(line 438,col 9)-(line 438,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
      "begin_line": 444,
      "end_line": 456,
      "comment": "\n     * Confirm that basic cloning works.\n     ",
      "child_ranges": [
        "(line 445,col 9)-(line 445,col 33)",
        "(line 446,col 9)-(line 446,col 25)",
        "(line 447,col 9)-(line 452,col 9)",
        "(line 453,col 9)-(line 453,col 29)",
        "(line 454,col 9)-(line 454,col 51)",
        "(line 455,col 9)-(line 455,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
      "begin_line": 461,
      "end_line": 480,
      "comment": "\n     * Tests cloning for a more complex plot.\n     ",
      "child_ranges": [
        "(line 462,col 9)-(line 463,col 76)",
        "(line 464,col 9)-(line 464,col 59)",
        "(line 465,col 9)-(line 466,col 33)",
        "(line 467,col 9)-(line 467,col 50)",
        "(line 468,col 9)-(line 468,col 49)",
        "(line 469,col 9)-(line 469,col 47)",
        "(line 470,col 9)-(line 470,col 25)",
        "(line 471,col 9)-(line 476,col 9)",
        "(line 477,col 9)-(line 477,col 29)",
        "(line 478,col 9)-(line 478,col 51)",
        "(line 479,col 9)-(line 479,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning3()",
      "begin_line": 486,
      "end_line": 505,
      "comment": "\n     * Tests cloning for a plot where the fixed legend items have been\n     * specified.\n     ",
      "child_ranges": [
        "(line 487,col 9)-(line 488,col 76)",
        "(line 489,col 9)-(line 489,col 61)",
        "(line 490,col 9)-(line 490,col 35)",
        "(line 491,col 9)-(line 491,col 25)",
        "(line 492,col 9)-(line 497,col 9)",
        "(line 498,col 9)-(line 498,col 29)",
        "(line 499,col 9)-(line 499,col 51)",
        "(line 500,col 9)-(line 500,col 34)",
        "(line 503,col 9)-(line 503,col 36)",
        "(line 504,col 9)-(line 504,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
      "begin_line": 510,
      "end_line": 525,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 511,col 9)-(line 511,col 33)",
        "(line 512,col 9)-(line 512,col 49)",
        "(line 513,col 9)-(line 513,col 32)",
        "(line 514,col 9)-(line 514,col 25)",
        "(line 515,col 9)-(line 520,col 9)",
        "(line 521,col 9)-(line 521,col 29)",
        "(line 522,col 9)-(line 522,col 51)",
        "(line 523,col 9)-(line 523,col 34)",
        "(line 524,col 9)-(line 524,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
      "begin_line": 530,
      "end_line": 550,
      "comment": "\n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
      "child_ranges": [
        "(line 531,col 9)-(line 531,col 33)",
        "(line 532,col 9)-(line 533,col 41)",
        "(line 534,col 9)-(line 534,col 25)",
        "(line 535,col 9)-(line 540,col 9)",
        "(line 541,col 9)-(line 541,col 29)",
        "(line 542,col 9)-(line 542,col 51)",
        "(line 543,col 9)-(line 543,col 34)",
        "(line 546,col 9)-(line 546,col 42)",
        "(line 547,col 9)-(line 547,col 35)",
        "(line 548,col 9)-(line 548,col 42)",
        "(line 549,col 9)-(line 549,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
      "begin_line": 555,
      "end_line": 623,
      "comment": "\n     * Tests the independence of the clones.\n     ",
      "child_ranges": [
        "(line 556,col 9)-(line 557,col 76)",
        "(line 558,col 9)-(line 558,col 61)",
        "(line 559,col 9)-(line 559,col 65)",
        "(line 560,col 9)-(line 560,col 59)",
        "(line 561,col 9)-(line 561,col 62)",
        "(line 562,col 9)-(line 562,col 47)",
        "(line 563,col 9)-(line 563,col 25)",
        "(line 564,col 9)-(line 570,col 9)",
        "(line 571,col 9)-(line 571,col 34)",
        "(line 573,col 9)-(line 573,col 45)",
        "(line 574,col 9)-(line 574,col 35)",
        "(line 575,col 9)-(line 575,col 45)",
        "(line 576,col 9)-(line 576,col 34)",
        "(line 578,col 9)-(line 578,col 43)",
        "(line 579,col 9)-(line 579,col 35)",
        "(line 580,col 9)-(line 580,col 43)",
        "(line 581,col 9)-(line 581,col 34)",
        "(line 583,col 9)-(line 583,col 63)",
        "(line 584,col 9)-(line 584,col 35)",
        "(line 585,col 9)-(line 585,col 63)",
        "(line 586,col 9)-(line 586,col 34)",
        "(line 588,col 9)-(line 588,col 40)",
        "(line 589,col 9)-(line 589,col 35)",
        "(line 590,col 9)-(line 590,col 40)",
        "(line 591,col 9)-(line 591,col 34)",
        "(line 593,col 9)-(line 593,col 44)",
        "(line 594,col 9)-(line 594,col 35)",
        "(line 595,col 9)-(line 595,col 44)",
        "(line 596,col 9)-(line 596,col 34)",
        "(line 598,col 9)-(line 598,col 42)",
        "(line 599,col 9)-(line 599,col 35)",
        "(line 600,col 9)-(line 600,col 42)",
        "(line 601,col 9)-(line 601,col 34)",
        "(line 603,col 9)-(line 603,col 61)",
        "(line 604,col 9)-(line 604,col 35)",
        "(line 605,col 9)-(line 605,col 61)",
        "(line 606,col 9)-(line 606,col 34)",
        "(line 608,col 9)-(line 608,col 39)",
        "(line 609,col 9)-(line 609,col 35)",
        "(line 610,col 9)-(line 610,col 39)",
        "(line 611,col 9)-(line 611,col 34)",
        "(line 613,col 9)-(line 613,col 57)",
        "(line 614,col 9)-(line 614,col 35)",
        "(line 615,col 9)-(line 615,col 57)",
        "(line 616,col 9)-(line 616,col 34)",
        "(line 618,col 9)-(line 618,col 57)",
        "(line 619,col 9)-(line 619,col 35)",
        "(line 620,col 9)-(line 620,col 57)",
        "(line 621,col 9)-(line 621,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
      "begin_line": 629,
      "end_line": 640,
      "comment": "\n     * Setting a null renderer should be allowed, but is generating a null\n     * pointer exception in 0.9.7.\n     ",
      "child_ranges": [
        "(line 630,col 9)-(line 630,col 31)",
        "(line 631,col 9)-(line 638,col 9)",
        "(line 639,col 9)-(line 639,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
      "begin_line": 645,
      "end_line": 670,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
      "child_ranges": [
        "(line 647,col 9)-(line 647,col 50)",
        "(line 648,col 9)-(line 648,col 57)",
        "(line 649,col 9)-(line 649,col 55)",
        "(line 650,col 9)-(line 650,col 71)",
        "(line 651,col 9)-(line 651,col 70)",
        "(line 652,col 9)-(line 652,col 25)",
        "(line 654,col 9)-(line 667,col 9)",
        "(line 668,col 9)-(line 668,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
      "begin_line": 676,
      "end_line": 701,
      "comment": "\n     * Serialize an instance, restore it, and check for equality.  This test\n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
      "child_ranges": [
        "(line 678,col 9)-(line 678,col 51)",
        "(line 679,col 9)-(line 679,col 59)",
        "(line 680,col 9)-(line 681,col 68)",
        "(line 682,col 9)-(line 682,col 77)",
        "(line 683,col 9)-(line 683,col 25)",
        "(line 685,col 9)-(line 698,col 9)",
        "(line 699,col 9)-(line 699,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
      "begin_line": 713,
      "end_line": 755,
      "comment": "\n     * Problem to reproduce a bug in serialization.  The bug (first reported\n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null\n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop,\n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty\n     * lists in the constructor) not being initialized by the readObject()\n     * method following deserialization.  This test has been written to\n     * reproduce the bug (now fixed).\n     ",
      "child_ranges": [
        "(line 715,col 9)-(line 715,col 62)",
        "(line 716,col 9)-(line 725,col 10)",
        "(line 726,col 9)-(line 726,col 33)",
        "(line 729,col 9)-(line 743,col 9)",
        "(line 745,col 9)-(line 745,col 36)",
        "(line 746,col 9)-(line 746,col 30)",
        "(line 747,col 9)-(line 753,col 9)",
        "(line 754,col 9)-(line 754,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
      "begin_line": 761,
      "end_line": 808,
      "comment": "\n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
      "child_ranges": [
        "(line 763,col 9)-(line 763,col 62)",
        "(line 764,col 9)-(line 773,col 10)",
        "(line 774,col 9)-(line 774,col 47)",
        "(line 775,col 9)-(line 775,col 69)",
        "(line 776,col 9)-(line 776,col 77)",
        "(line 777,col 9)-(line 777,col 68)",
        "(line 778,col 9)-(line 778,col 76)",
        "(line 779,col 9)-(line 779,col 33)",
        "(line 782,col 9)-(line 796,col 9)",
        "(line 798,col 9)-(line 798,col 36)",
        "(line 799,col 9)-(line 799,col 30)",
        "(line 800,col 9)-(line 806,col 9)",
        "(line 807,col 9)-(line 807,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
      "begin_line": 815,
      "end_line": 866,
      "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
      "child_ranges": [
        "(line 816,col 9)-(line 816,col 63)",
        "(line 817,col 9)-(line 817,col 60)",
        "(line 818,col 9)-(line 818,col 58)",
        "(line 819,col 9)-(line 819,col 72)",
        "(line 820,col 9)-(line 820,col 77)",
        "(line 821,col 9)-(line 821,col 60)",
        "(line 822,col 9)-(line 822,col 58)",
        "(line 823,col 9)-(line 823,col 72)",
        "(line 824,col 9)-(line 824,col 63)",
        "(line 825,col 9)-(line 825,col 35)",
        "(line 826,col 9)-(line 826,col 41)",
        "(line 827,col 9)-(line 827,col 39)",
        "(line 828,col 9)-(line 828,col 37)",
        "(line 829,col 9)-(line 829,col 25)",
        "(line 830,col 9)-(line 843,col 9)",
        "(line 844,col 9)-(line 844,col 29)",
        "(line 848,col 9)-(line 848,col 66)",
        "(line 849,col 9)-(line 849,col 64)",
        "(line 850,col 9)-(line 850,col 76)",
        "(line 851,col 9)-(line 852,col 57)",
        "(line 853,col 9)-(line 853,col 66)",
        "(line 854,col 9)-(line 854,col 64)",
        "(line 855,col 9)-(line 855,col 76)",
        "(line 856,col 9)-(line 857,col 57)",
        "(line 858,col 9)-(line 858,col 45)",
        "(line 859,col 9)-(line 859,col 48)",
        "(line 860,col 9)-(line 860,col 47)",
        "(line 861,col 9)-(line 861,col 46)",
        "(line 862,col 9)-(line 862,col 45)",
        "(line 863,col 9)-(line 863,col 48)",
        "(line 864,col 9)-(line 864,col 47)",
        "(line 865,col 9)-(line 865,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
      "begin_line": 871,
      "end_line": 890,
      "comment": "\n     * Some checks for the getRendererForDataset() method.\n     ",
      "child_ranges": [
        "(line 872,col 9)-(line 872,col 48)",
        "(line 873,col 9)-(line 873,col 48)",
        "(line 874,col 9)-(line 874,col 48)",
        "(line 875,col 9)-(line 875,col 48)",
        "(line 876,col 9)-(line 876,col 57)",
        "(line 877,col 9)-(line 877,col 57)",
        "(line 878,col 9)-(line 878,col 35)",
        "(line 879,col 9)-(line 879,col 31)",
        "(line 880,col 9)-(line 880,col 31)",
        "(line 881,col 9)-(line 881,col 31)",
        "(line 882,col 9)-(line 882,col 32)",
        "(line 884,col 9)-(line 884,col 32)",
        "(line 885,col 9)-(line 885,col 57)",
        "(line 886,col 9)-(line 886,col 57)",
        "(line 887,col 9)-(line 887,col 57)",
        "(line 888,col 9)-(line 888,col 59)",
        "(line 889,col 9)-(line 889,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
      "begin_line": 895,
      "end_line": 907,
      "comment": "\n     * Some checks for the getLegendItems() method.\n     ",
      "child_ranges": [
        "(line 898,col 9)-(line 898,col 40)",
        "(line 899,col 9)-(line 899,col 40)",
        "(line 900,col 9)-(line 900,col 57)",
        "(line 901,col 9)-(line 901,col 35)",
        "(line 902,col 9)-(line 902,col 31)",
        "(line 903,col 9)-(line 903,col 31)",
        "(line 904,col 9)-(line 904,col 32)",
        "(line 905,col 9)-(line 905,col 59)",
        "(line 906,col 9)-(line 906,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
      "begin_line": 914,
      "end_line": 937,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
      "child_ranges": [
        "(line 917,col 9)-(line 917,col 56)",
        "(line 918,col 9)-(line 918,col 69)",
        "(line 919,col 9)-(line 919,col 69)",
        "(line 920,col 9)-(line 920,col 69)",
        "(line 921,col 9)-(line 921,col 69)",
        "(line 922,col 9)-(line 922,col 69)",
        "(line 923,col 9)-(line 923,col 69)",
        "(line 924,col 9)-(line 924,col 69)",
        "(line 925,col 9)-(line 925,col 69)",
        "(line 926,col 9)-(line 926,col 69)",
        "(line 927,col 9)-(line 927,col 70)",
        "(line 928,col 9)-(line 928,col 70)",
        "(line 929,col 9)-(line 929,col 70)",
        "(line 930,col 9)-(line 930,col 70)",
        "(line 931,col 9)-(line 931,col 70)",
        "(line 932,col 9)-(line 932,col 70)",
        "(line 934,col 9)-(line 934,col 76)",
        "(line 935,col 9)-(line 935,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
      "begin_line": 944,
      "end_line": 950,
      "comment": "\n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
      "child_ranges": [
        "(line 946,col 9)-(line 946,col 51)",
        "(line 947,col 9)-(line 947,col 71)",
        "(line 948,col 9)-(line 948,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
      "begin_line": 956,
      "end_line": 966,
      "comment": "\n     * A test for a bug where setting the renderer doesn\u0027t register the plot\n     * as a RendererChangeListener.\n     ",
      "child_ranges": [
        "(line 957,col 9)-(line 957,col 35)",
        "(line 958,col 9)-(line 958,col 63)",
        "(line 959,col 9)-(line 959,col 35)",
        "(line 962,col 9)-(line 962,col 67)",
        "(line 963,col 9)-(line 963,col 41)",
        "(line 964,col 9)-(line 964,col 48)",
        "(line 965,col 9)-(line 965,col 48)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
      "begin_line": 971,
      "end_line": 989,
      "comment": "\n     * Some checks for the removeAnnotation() method.\n     ",
      "child_ranges": [
        "(line 972,col 9)-(line 972,col 35)",
        "(line 973,col 9)-(line 973,col 66)",
        "(line 974,col 9)-(line 974,col 66)",
        "(line 975,col 9)-(line 975,col 66)",
        "(line 976,col 9)-(line 976,col 31)",
        "(line 977,col 9)-(line 977,col 31)",
        "(line 978,col 9)-(line 978,col 31)",
        "(line 979,col 9)-(line 979,col 34)",
        "(line 980,col 9)-(line 980,col 77)",
        "(line 981,col 9)-(line 981,col 28)",
        "(line 985,col 9)-(line 985,col 34)",
        "(line 986,col 9)-(line 986,col 34)",
        "(line 987,col 9)-(line 987,col 60)",
        "(line 988,col 9)-(line 988,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
      "begin_line": 994,
      "end_line": 1004,
      "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
      "child_ranges": [
        "(line 995,col 9)-(line 995,col 35)",
        "(line 996,col 9)-(line 996,col 40)",
        "(line 997,col 9)-(line 997,col 32)",
        "(line 998,col 9)-(line 999,col 45)",
        "(line 1000,col 9)-(line 1000,col 45)",
        "(line 1001,col 9)-(line 1001,col 34)",
        "(line 1002,col 9)-(line 1002,col 78)",
        "(line 1003,col 9)-(line 1003,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
      "begin_line": 1009,
      "end_line": 1019,
      "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
      "child_ranges": [
        "(line 1010,col 9)-(line 1010,col 35)",
        "(line 1011,col 9)-(line 1011,col 40)",
        "(line 1012,col 9)-(line 1012,col 31)",
        "(line 1013,col 9)-(line 1014,col 45)",
        "(line 1015,col 9)-(line 1015,col 45)",
        "(line 1016,col 9)-(line 1016,col 33)",
        "(line 1017,col 9)-(line 1017,col 78)",
        "(line 1018,col 9)-(line 1018,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
      "begin_line": 1025,
      "end_line": 1045,
      "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
      "child_ranges": [
        "(line 1026,col 9)-(line 1026,col 58)",
        "(line 1027,col 9)-(line 1028,col 71)",
        "(line 1029,col 9)-(line 1029,col 47)",
        "(line 1030,col 9)-(line 1030,col 58)",
        "(line 1031,col 9)-(line 1031,col 32)",
        "(line 1032,col 9)-(line 1043,col 9)",
        "(line 1044,col 9)-(line 1044,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
      "begin_line": 1051,
      "end_line": 1071,
      "comment": "\n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
      "child_ranges": [
        "(line 1052,col 9)-(line 1052,col 58)",
        "(line 1053,col 9)-(line 1054,col 71)",
        "(line 1055,col 9)-(line 1055,col 47)",
        "(line 1056,col 9)-(line 1056,col 31)",
        "(line 1057,col 9)-(line 1057,col 32)",
        "(line 1058,col 9)-(line 1069,col 9)",
        "(line 1070,col 9)-(line 1070,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
      "begin_line": 1077,
      "end_line": 1097,
      "comment": "\n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
      "child_ranges": [
        "(line 1078,col 9)-(line 1078,col 58)",
        "(line 1079,col 9)-(line 1079,col 79)",
        "(line 1080,col 9)-(line 1080,col 63)",
        "(line 1081,col 9)-(line 1082,col 71)",
        "(line 1083,col 9)-(line 1083,col 32)",
        "(line 1084,col 9)-(line 1095,col 9)",
        "(line 1096,col 9)-(line 1096,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
      "begin_line": 1103,
      "end_line": 1106,
      "comment": "\n     * Check that removing a marker that isn\u0027t assigned to the plot returns\n     * false.\n     ",
      "child_ranges": [
        "(line 1104,col 9)-(line 1104,col 35)",
        "(line 1105,col 9)-(line 1105,col 67)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
      "begin_line": 1112,
      "end_line": 1115,
      "comment": "\n     * Check that removing a marker that isn\u0027t assigned to the plot returns\n     * false.\n     ",
      "child_ranges": [
        "(line 1113,col 9)-(line 1113,col 35)",
        "(line 1114,col 9)-(line 1114,col 66)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetDomainAxisForDataset()",
      "begin_line": 1120,
      "end_line": 1166,
      "comment": "\n     * Some tests for the getDomainAxisForDataset() method.\n     ",
      "child_ranges": [
        "(line 1121,col 9)-(line 1121,col 53)",
        "(line 1122,col 9)-(line 1122,col 47)",
        "(line 1123,col 9)-(line 1123,col 47)",
        "(line 1124,col 9)-(line 1124,col 62)",
        "(line 1125,col 9)-(line 1125,col 66)",
        "(line 1126,col 9)-(line 1126,col 61)",
        "(line 1129,col 9)-(line 1129,col 29)",
        "(line 1130,col 9)-(line 1135,col 9)",
        "(line 1136,col 9)-(line 1136,col 25)",
        "(line 1139,col 9)-(line 1139,col 21)",
        "(line 1140,col 9)-(line 1145,col 9)",
        "(line 1146,col 9)-(line 1146,col 25)",
        "(line 1150,col 9)-(line 1150,col 49)",
        "(line 1151,col 9)-(line 1151,col 38)",
        "(line 1152,col 9)-(line 1152,col 61)",
        "(line 1154,col 9)-(line 1154,col 42)",
        "(line 1155,col 9)-(line 1155,col 62)",
        "(line 1157,col 9)-(line 1158,col 33)",
        "(line 1159,col 9)-(line 1159,col 52)",
        "(line 1160,col 9)-(line 1160,col 61)",
        "(line 1162,col 9)-(line 1163,col 33)",
        "(line 1164,col 9)-(line 1164,col 52)",
        "(line 1165,col 9)-(line 1165,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRangeAxisForDataset()",
      "begin_line": 1171,
      "end_line": 1217,
      "comment": "\n     * Some tests for the getRangeAxisForDataset() method.\n     ",
      "child_ranges": [
        "(line 1172,col 9)-(line 1172,col 53)",
        "(line 1173,col 9)-(line 1173,col 47)",
        "(line 1174,col 9)-(line 1174,col 47)",
        "(line 1175,col 9)-(line 1175,col 62)",
        "(line 1176,col 9)-(line 1176,col 66)",
        "(line 1177,col 9)-(line 1177,col 60)",
        "(line 1180,col 9)-(line 1180,col 29)",
        "(line 1181,col 9)-(line 1186,col 9)",
        "(line 1187,col 9)-(line 1187,col 25)",
        "(line 1190,col 9)-(line 1190,col 21)",
        "(line 1191,col 9)-(line 1196,col 9)",
        "(line 1197,col 9)-(line 1197,col 25)",
        "(line 1201,col 9)-(line 1201,col 49)",
        "(line 1202,col 9)-(line 1202,col 37)",
        "(line 1203,col 9)-(line 1203,col 60)",
        "(line 1205,col 9)-(line 1205,col 41)",
        "(line 1206,col 9)-(line 1206,col 61)",
        "(line 1208,col 9)-(line 1209,col 33)",
        "(line 1210,col 9)-(line 1210,col 51)",
        "(line 1211,col 9)-(line 1211,col 60)",
        "(line 1213,col 9)-(line 1214,col 33)",
        "(line 1215,col 9)-(line 1215,col 51)",
        "(line 1216,col 9)-(line 1216,col 61)"
      ]
    }
  ]
}