{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYAreaRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "org.jfree.chart.util.PublicCloneable"
      ],
      "begin_line": 131,
      "end_line": 778,
      "comment": "\r\n * Area item renderer for an {@link XYPlot}.  This class can draw (a) shapes at\r\n * each point, or (b) lines between points, or (c) both shapes and lines,\r\n * or (d) filled areas, or (e) filled areas and shapes. The example shown here\r\n * is generated by the \u003ccode\u003eXYAreaRendererDemo1.java\u003c/code\u003e program included\r\n * in the JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYAreaRendererSample.png\"\r\n * alt\u003d\"XYAreaRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 135,
      "end_line": 135,
      "comment": " For serialization. "
    },
    {
      "type": "class_interface",
      "name": "XYAreaRendererState",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYItemRendererState"
      ],
      "begin_line": 140,
      "end_line": 159,
      "comment": "\r\n     * A state object used by this renderer.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "area"
      ],
      "begin_line": 143,
      "end_line": 143,
      "comment": " Working storage for the area under one series. "
    },
    {
      "type": "field",
      "varNames": [
        "line"
      ],
      "begin_line": 146,
      "end_line": 146,
      "comment": " Working line that can be recycled. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.XYAreaRendererState.XYAreaRendererState(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 153,
      "end_line": 157,
      "comment": "\r\n         * Creates a new state.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 154,col 13)-(line 154,col 24)",
        "(line 155,col 13)-(line 155,col 38)",
        "(line 156,col 13)-(line 156,col 44)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "SHAPES"
      ],
      "begin_line": 162,
      "end_line": 162,
      "comment": " Useful constant for specifying the type of rendering (shapes only). "
    },
    {
      "type": "field",
      "varNames": [
        "LINES"
      ],
      "begin_line": 165,
      "end_line": 165,
      "comment": " Useful constant for specifying the type of rendering (lines only). "
    },
    {
      "type": "field",
      "varNames": [
        "SHAPES_AND_LINES"
      ],
      "begin_line": 170,
      "end_line": 170,
      "comment": "\r\n     * Useful constant for specifying the type of rendering (shapes and lines).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "AREA"
      ],
      "begin_line": 173,
      "end_line": 173,
      "comment": " Useful constant for specifying the type of rendering (area only). "
    },
    {
      "type": "field",
      "varNames": [
        "AREA_AND_SHAPES"
      ],
      "begin_line": 178,
      "end_line": 178,
      "comment": "\r\n     * Useful constant for specifying the type of rendering (area and shapes).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "plotShapes"
      ],
      "begin_line": 181,
      "end_line": 181,
      "comment": " A flag indicating whether or not shapes are drawn at each XY point. "
    },
    {
      "type": "field",
      "varNames": [
        "plotLines"
      ],
      "begin_line": 184,
      "end_line": 184,
      "comment": " A flag indicating whether or not lines are drawn between XY points. "
    },
    {
      "type": "field",
      "varNames": [
        "plotArea"
      ],
      "begin_line": 187,
      "end_line": 187,
      "comment": " A flag indicating whether or not Area are drawn at each XY point. "
    },
    {
      "type": "field",
      "varNames": [
        "showOutline"
      ],
      "begin_line": 190,
      "end_line": 190,
      "comment": " A flag that controls whether or not the outline is shown. "
    },
    {
      "type": "field",
      "varNames": [
        "legendArea"
      ],
      "begin_line": 196,
      "end_line": 196,
      "comment": "\r\n     * The shape used to represent an area in each legend item (this should\r\n     * never be \u003ccode\u003enull\u003c/code\u003e).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "useFillPaint"
      ],
      "begin_line": 204,
      "end_line": 204,
      "comment": "\r\n     * A flag that can be set to specify that the fill paint should be used\r\n     * to fill the area under the renderer.\r\n     *\r\n     * @since 1.0.14\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "gradientTransformer"
      ],
      "begin_line": 212,
      "end_line": 212,
      "comment": "\r\n     * A transformer that is applied to the paint used to fill under the\r\n     * area *if* it is an instance of GradientPaint.\r\n     *\r\n     * @since 1.0.14\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.XYAreaRenderer()",
      "begin_line": 217,
      "end_line": 219,
      "comment": "\r\n     * Constructs a new renderer.\r\n     ",
      "child_ranges": [
        "(line 218,col 9)-(line 218,col 19)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.XYAreaRenderer(int)",
      "begin_line": 226,
      "end_line": 228,
      "comment": "\r\n     * Constructs a new renderer.\r\n     *\r\n     * @param type  the type of the renderer.\r\n     ",
      "child_ranges": [
        "(line 227,col 9)-(line 227,col 31)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.XYAreaRenderer(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
      "begin_line": 241,
      "end_line": 276,
      "comment": "\r\n     * Constructs a new renderer.  To specify the type of renderer, use one of\r\n     * the constants: \u003ccode\u003eSHAPES\u003c/code\u003e, \u003ccode\u003eLINES\u003c/code\u003e,\r\n     * \u003ccode\u003eSHAPES_AND_LINES\u003c/code\u003e, \u003ccode\u003eAREA\u003c/code\u003e or\r\n     * \u003ccode\u003eAREA_AND_SHAPES\u003c/code\u003e.\r\n     *\r\n     * @param type  the type of renderer.\r\n     * @param toolTipGenerator  the tool tip generator to use\r\n     *                          (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     * @param urlGenerator  the URL generator (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     ",
      "child_ranges": [
        "(line 244,col 9)-(line 244,col 16)",
        "(line 245,col 9)-(line 245,col 50)",
        "(line 246,col 9)-(line 246,col 42)",
        "(line 248,col 9)-(line 250,col 9)",
        "(line 251,col 9)-(line 253,col 9)",
        "(line 254,col 9)-(line 257,col 9)",
        "(line 258,col 9)-(line 260,col 9)",
        "(line 261,col 9)-(line 264,col 9)",
        "(line 265,col 9)-(line 265,col 33)",
        "(line 266,col 9)-(line 266,col 45)",
        "(line 267,col 9)-(line 267,col 33)",
        "(line 268,col 9)-(line 268,col 33)",
        "(line 269,col 9)-(line 269,col 32)",
        "(line 270,col 9)-(line 270,col 33)",
        "(line 271,col 9)-(line 271,col 34)",
        "(line 272,col 9)-(line 272,col 25)",
        "(line 273,col 9)-(line 273,col 31)",
        "(line 274,col 9)-(line 274,col 34)",
        "(line 275,col 9)-(line 275,col 74)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getPlotShapes()",
      "begin_line": 283,
      "end_line": 285,
      "comment": "\r\n     * Returns true if shapes are being plotted by the renderer.\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e if shapes are being plotted by the renderer.\r\n     ",
      "child_ranges": [
        "(line 284,col 9)-(line 284,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getPlotLines()",
      "begin_line": 292,
      "end_line": 294,
      "comment": "\r\n     * Returns true if lines are being plotted by the renderer.\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e if lines are being plotted by the renderer.\r\n     ",
      "child_ranges": [
        "(line 293,col 9)-(line 293,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getPlotArea()",
      "begin_line": 301,
      "end_line": 303,
      "comment": "\r\n     * Returns true if Area is being plotted by the renderer.\r\n     *\r\n     * @return \u003ccode\u003etrue\u003c/code\u003e if Area is being plotted by the renderer.\r\n     ",
      "child_ranges": [
        "(line 302,col 9)-(line 302,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.isOutline()",
      "begin_line": 313,
      "end_line": 315,
      "comment": "\r\n     * Returns a flag that controls whether or not outlines of the areas are\r\n     * drawn.\r\n     *\r\n     * @return The flag.\r\n     *\r\n     * @see #setOutline(boolean)\r\n     ",
      "child_ranges": [
        "(line 314,col 9)-(line 314,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.setOutline(boolean)",
      "begin_line": 325,
      "end_line": 328,
      "comment": "\r\n     * Sets a flag that controls whether or not outlines of the areas are drawn\r\n     * and sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param show  the flag.\r\n     *\r\n     * @see #isOutline()\r\n     ",
      "child_ranges": [
        "(line 326,col 9)-(line 326,col 32)",
        "(line 327,col 9)-(line 327,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getLegendArea()",
      "begin_line": 335,
      "end_line": 337,
      "comment": "\r\n     * Returns the shape used to represent an area in the legend.\r\n     *\r\n     * @return The legend area (never \u003ccode\u003enull\u003c/code\u003e).\r\n     ",
      "child_ranges": [
        "(line 336,col 9)-(line 336,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.setLegendArea(java.awt.Shape)",
      "begin_line": 345,
      "end_line": 351,
      "comment": "\r\n     * Sets the shape used as an area in each legend item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param area  the area (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     ",
      "child_ranges": [
        "(line 346,col 9)-(line 348,col 9)",
        "(line 349,col 9)-(line 349,col 31)",
        "(line 350,col 9)-(line 350,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getUseFillPaint()",
      "begin_line": 361,
      "end_line": 363,
      "comment": "\r\n     * Returns the flag that controls whether the series fill paint is used to\r\n     * fill the area under the line.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.14\r\n     ",
      "child_ranges": [
        "(line 362,col 9)-(line 362,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.setUseFillPaint(boolean)",
      "begin_line": 374,
      "end_line": 377,
      "comment": "\r\n     * Sets the flag that controls whether or not the series fill paint is\r\n     * used to fill the area under the line and sends a\r\n     * {@link RendererChangeEvent} to all listeners.\r\n     *\r\n     * @param use  the new flag value.\r\n     *\r\n     * @since 1.0.14\r\n     ",
      "child_ranges": [
        "(line 375,col 9)-(line 375,col 32)",
        "(line 376,col 9)-(line 376,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getGradientTransformer()",
      "begin_line": 386,
      "end_line": 388,
      "comment": "\r\n     * Returns the gradient paint transformer.\r\n     *\r\n     * @return The gradient paint transformer (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.14\r\n     ",
      "child_ranges": [
        "(line 387,col 9)-(line 387,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.setGradientTransformer(org.jfree.chart.util.GradientPaintTransformer)",
      "begin_line": 398,
      "end_line": 404,
      "comment": "\r\n     * Sets the gradient paint transformer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param transformer  the transformer (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.14\r\n     ",
      "child_ranges": [
        "(line 399,col 9)-(line 401,col 9)",
        "(line 402,col 9)-(line 402,col 47)",
        "(line 403,col 9)-(line 403,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 419,
      "end_line": 427,
      "comment": "\r\n     * Initialises the renderer and returns a state object that should be\r\n     * passed to all subsequent calls to the drawItem() method.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param data  the data.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return A state object for use by the renderer.\r\n     ",
      "child_ranges": [
        "(line 421,col 9)-(line 421,col 66)",
        "(line 425,col 9)-(line 425,col 48)",
        "(line 426,col 9)-(line 426,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.getLegendItem(int, int)",
      "begin_line": 438,
      "end_line": 472,
      "comment": "\r\n     * Returns a default legend item for the specified series.  Subclasses\r\n     * should override this method to generate customised items.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A legend item for the series.\r\n     ",
      "child_ranges": [
        "(line 439,col 9)-(line 439,col 33)",
        "(line 440,col 9)-(line 440,col 34)",
        "(line 441,col 9)-(line 470,col 9)",
        "(line 471,col 9)-(line 471,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 489,
      "end_line": 685,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color information\r\n     *              etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 494,col 9)-(line 496,col 9)",
        "(line 497,col 9)-(line 497,col 68)",
        "(line 500,col 9)-(line 500,col 52)",
        "(line 501,col 9)-(line 501,col 52)",
        "(line 502,col 9)-(line 504,col 9)",
        "(line 505,col 9)-(line 506,col 42)",
        "(line 507,col 9)-(line 508,col 41)",
        "(line 512,col 9)-(line 512,col 53)",
        "(line 513,col 9)-(line 513,col 69)",
        "(line 514,col 9)-(line 514,col 69)",
        "(line 515,col 9)-(line 517,col 9)",
        "(line 518,col 9)-(line 519,col 42)",
        "(line 520,col 9)-(line 521,col 41)",
        "(line 523,col 9)-(line 524,col 32)",
        "(line 525,col 9)-(line 526,col 32)",
        "(line 527,col 9)-(line 529,col 9)",
        "(line 530,col 9)-(line 531,col 42)",
        "(line 532,col 9)-(line 533,col 41)",
        "(line 535,col 9)-(line 536,col 41)",
        "(line 537,col 9)-(line 537,col 31)",
        "(line 538,col 9)-(line 561,col 9)",
        "(line 563,col 9)-(line 574,col 9)",
        "(line 577,col 9)-(line 582,col 9)",
        "(line 584,col 9)-(line 584,col 60)",
        "(line 585,col 9)-(line 585,col 59)",
        "(line 586,col 9)-(line 586,col 62)",
        "(line 587,col 9)-(line 587,col 27)",
        "(line 588,col 9)-(line 588,col 29)",
        "(line 590,col 9)-(line 590,col 27)",
        "(line 591,col 9)-(line 602,col 9)",
        "(line 604,col 9)-(line 614,col 9)",
        "(line 618,col 9)-(line 670,col 9)",
        "(line 672,col 9)-(line 672,col 66)",
        "(line 673,col 9)-(line 673,col 63)",
        "(line 674,col 9)-(line 674,col 68)",
        "(line 675,col 9)-(line 676,col 63)",
        "(line 679,col 9)-(line 679,col 64)",
        "(line 680,col 9)-(line 683,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.clone()",
      "begin_line": 694,
      "end_line": 698,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\r\n     ",
      "child_ranges": [
        "(line 695,col 9)-(line 695,col 62)",
        "(line 696,col 9)-(line 696,col 65)",
        "(line 697,col 9)-(line 697,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.equals(java.lang.Object)",
      "begin_line": 707,
      "end_line": 737,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 708,col 9)-(line 710,col 9)",
        "(line 711,col 9)-(line 713,col 9)",
        "(line 714,col 9)-(line 714,col 51)",
        "(line 715,col 9)-(line 717,col 9)",
        "(line 718,col 9)-(line 720,col 9)",
        "(line 721,col 9)-(line 723,col 9)",
        "(line 724,col 9)-(line 726,col 9)",
        "(line 727,col 9)-(line 729,col 9)",
        "(line 730,col 9)-(line 732,col 9)",
        "(line 733,col 9)-(line 735,col 9)",
        "(line 736,col 9)-(line 736,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.hashCode()",
      "begin_line": 744,
      "end_line": 751,
      "comment": "\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     ",
      "child_ranges": [
        "(line 745,col 9)-(line 745,col 38)",
        "(line 746,col 9)-(line 746,col 63)",
        "(line 747,col 9)-(line 747,col 64)",
        "(line 748,col 9)-(line 748,col 65)",
        "(line 749,col 9)-(line 749,col 67)",
        "(line 750,col 9)-(line 750,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 761,
      "end_line": 765,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 763,col 9)-(line 763,col 35)",
        "(line 764,col 9)-(line 764,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYAreaRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 774,
      "end_line": 777,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 775,col 9)-(line 775,col 36)",
        "(line 776,col 9)-(line 776,col 60)"
      ]
    }
  ]
}