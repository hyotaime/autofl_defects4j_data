{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/xy/DeviationRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "DeviationRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer"
      ],
      "begin_line": 80,
      "end_line": 378,
      "comment": "\r\n * A specialised subclass of the {@link XYLineAndShapeRenderer} that requires\r\n * an {@link IntervalXYDataset} and represents the y-interval by shading an\r\n * area behind the y-values on the chart.\r\n * The example shown here is generated by the\r\n * \u003ccode\u003eDeviationRendererDemo1.java\u003c/code\u003e program included in the\r\n * JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/DeviationRendererSample.png\"\r\n * alt\u003d\"DeviationRendererSample.png\" /\u003e\r\n *\r\n * @since 1.0.5\r\n "
    },
    {
      "type": "class_interface",
      "name": "State",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State"
      ],
      "begin_line": 85,
      "end_line": 110,
      "comment": "\r\n     * A state object that is passed to each call to \u003ccode\u003edrawItem\u003c/code\u003e.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "upperCoordinates"
      ],
      "begin_line": 91,
      "end_line": 91,
      "comment": "\r\n         * A list of coordinates for the upper y-values in the current series\r\n         * (after translation into Java2D space).\r\n         "
    },
    {
      "type": "field",
      "varNames": [
        "lowerCoordinates"
      ],
      "begin_line": 97,
      "end_line": 97,
      "comment": "\r\n         * A list of coordinates for the lower y-values in the current series\r\n         * (after translation into Java2D space).\r\n         "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.State.State(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 104,
      "end_line": 108,
      "comment": "\r\n         * Creates a new state instance.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 105,col 13)-(line 105,col 24)",
        "(line 106,col 13)-(line 106,col 62)",
        "(line 107,col 13)-(line 107,col 62)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "alpha"
      ],
      "begin_line": 113,
      "end_line": 113,
      "comment": " The alpha transparency for the interval shading. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.DeviationRenderer()",
      "begin_line": 119,
      "end_line": 121,
      "comment": "\r\n     * Creates a new renderer that displays lines and shapes for the data\r\n     * items, as well as the shaded area for the y-interval.\r\n     ",
      "child_ranges": [
        "(line 120,col 9)-(line 120,col 25)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.DeviationRenderer(boolean, boolean)",
      "begin_line": 129,
      "end_line": 133,
      "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param lines  show lines between data items?\r\n     * @param shapes  show a shape for each data item?\r\n     ",
      "child_ranges": [
        "(line 130,col 9)-(line 130,col 29)",
        "(line 131,col 9)-(line 131,col 44)",
        "(line 132,col 9)-(line 132,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.getAlpha()",
      "begin_line": 142,
      "end_line": 144,
      "comment": "\r\n     * Returns the alpha transparency for the background shading.\r\n     *\r\n     * @return The alpha transparency.\r\n     *\r\n     * @see #setAlpha(float)\r\n     ",
      "child_ranges": [
        "(line 143,col 9)-(line 143,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.setAlpha(float)",
      "begin_line": 154,
      "end_line": 161,
      "comment": "\r\n     * Sets the alpha transparency for the background shading, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param alpha   the alpha (in the range 0.0f to 1.0f).\r\n     *\r\n     * @see #getAlpha()\r\n     ",
      "child_ranges": [
        "(line 155,col 9)-(line 158,col 9)",
        "(line 159,col 9)-(line 159,col 27)",
        "(line 160,col 9)-(line 160,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.setDrawSeriesLineAsPath(boolean)",
      "begin_line": 169,
      "end_line": 171,
      "comment": "\r\n     * This method is overridden so that this flag cannot be changed---it is\r\n     * set to \u003ccode\u003etrue\u003c/code\u003e for this renderer.\r\n     *\r\n     * @param flag  ignored.\r\n     ",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 182,
      "end_line": 184,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003e\r\n     *         or empty).\r\n     ",
      "child_ranges": [
        "(line 183,col 9)-(line 183,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 198,
      "end_line": 204,
      "comment": "\r\n     * Initialises and returns a state object that can be passed to each\r\n     * invocation of the {@link #drawItem} method.\r\n     *\r\n     * @param g2  the graphics target.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param dataset  the dataset.\r\n     * @param info  the plot rendering info.\r\n     *\r\n     * @return A newly initialised state object.\r\n     ",
      "child_ranges": [
        "(line 200,col 9)-(line 200,col 38)",
        "(line 201,col 9)-(line 201,col 45)",
        "(line 202,col 9)-(line 202,col 48)",
        "(line 203,col 9)-(line 203,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.getPassCount()",
      "begin_line": 212,
      "end_line": 214,
      "comment": "\r\n     * Returns the number of passes (through the dataset) used by this\r\n     * renderer.\r\n     *\r\n     * @return \u003ccode\u003e3\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 213,col 9)-(line 213,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.isItemPass(int)",
      "begin_line": 226,
      "end_line": 228,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if this is the pass where the shapes are\r\n     * drawn.\r\n     *\r\n     * @param pass  the pass index.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #isLinePass(int)\r\n     ",
      "child_ranges": [
        "(line 227,col 9)-(line 227,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.isLinePass(int)",
      "begin_line": 240,
      "end_line": 242,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if this is the pass where the lines are\r\n     * drawn.\r\n     *\r\n     * @param pass  the pass index.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #isItemPass(int)\r\n     ",
      "child_ranges": [
        "(line 241,col 9)-(line 241,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 259,
      "end_line": 355,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the data is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 265,col 9)-(line 267,col 9)",
        "(line 270,col 9)-(line 325,col 9)",
        "(line 326,col 9)-(line 354,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.DeviationRenderer.equals(java.lang.Object)",
      "begin_line": 364,
      "end_line": 376,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 365,col 9)-(line 367,col 9)",
        "(line 368,col 9)-(line 370,col 9)",
        "(line 371,col 9)-(line 371,col 57)",
        "(line 372,col 9)-(line 374,col 9)",
        "(line 375,col 9)-(line 375,col 33)"
      ]
    }
  ]
}