{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/LevelRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "LevelRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 87,
      "end_line": 456,
      "comment": "\r\n * A {@link CategoryItemRenderer} that draws individual data items as\r\n * horizontal lines, spaced in the same way as bars in a bar chart.  The\r\n * example shown here is generated by the\r\n * \u003ccode\u003eOverlaidBarChartDemo2.java\u003c/code\u003e program included in the JFreeChart\r\n * Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/LevelRendererSample.png\"\r\n * alt\u003d\"LevelRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 91,
      "end_line": 91,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "DEFAULT_ITEM_MARGIN"
      ],
      "begin_line": 94,
      "end_line": 94,
      "comment": " The default item margin percentage. "
    },
    {
      "type": "field",
      "varNames": [
        "itemMargin"
      ],
      "begin_line": 97,
      "end_line": 97,
      "comment": " The margin between items within a category. "
    },
    {
      "type": "field",
      "varNames": [
        "maxItemWidth"
      ],
      "begin_line": 100,
      "end_line": 100,
      "comment": " The maximum item width as a percentage of the available space. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.LevelRenderer()",
      "begin_line": 105,
      "end_line": 114,
      "comment": "\r\n     * Creates a new renderer with default settings.\r\n     ",
      "child_ranges": [
        "(line 106,col 9)-(line 106,col 16)",
        "(line 107,col 9)-(line 107,col 46)",
        "(line 108,col 9)-(line 108,col 32)",
        "(line 110,col 9)-(line 110,col 77)",
        "(line 113,col 9)-(line 113,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.getItemMargin()",
      "begin_line": 123,
      "end_line": 125,
      "comment": "\r\n     * Returns the item margin.\r\n     *\r\n     * @return The margin.\r\n     *\r\n     * @see #setItemMargin(double)\r\n     ",
      "child_ranges": [
        "(line 124,col 9)-(line 124,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.setItemMargin(double)",
      "begin_line": 137,
      "end_line": 140,
      "comment": "\r\n     * Sets the item margin and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.  The value is expressed as a percentage of the\r\n     * available width for plotting all the bars, with the resulting amount to\r\n     * be distributed between all the bars evenly.\r\n     *\r\n     * @param percent  the new margin.\r\n     *\r\n     * @see #getItemMargin()\r\n     ",
      "child_ranges": [
        "(line 138,col 9)-(line 138,col 34)",
        "(line 139,col 9)-(line 139,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.getMaximumItemWidth()",
      "begin_line": 150,
      "end_line": 152,
      "comment": "\r\n     * Returns the maximum width, as a percentage of the available drawing\r\n     * space.\r\n     *\r\n     * @return The maximum width.\r\n     *\r\n     * @see #setMaximumItemWidth(double)\r\n     ",
      "child_ranges": [
        "(line 151,col 9)-(line 151,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.setMaximumItemWidth(double)",
      "begin_line": 163,
      "end_line": 166,
      "comment": "\r\n     * Sets the maximum item width, which is specified as a percentage of the\r\n     * available space for all items, and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param percent  the percent.\r\n     *\r\n     * @see #getMaximumItemWidth()\r\n     ",
      "child_ranges": [
        "(line 164,col 9)-(line 164,col 36)",
        "(line 165,col 9)-(line 165,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 183,
      "end_line": 192,
      "comment": "\r\n     * Initialises the renderer and returns a state object that will be passed\r\n     * to subsequent calls to the drawItem method.\r\n     * \u003cp\u003e\r\n     * This method gets called once at the start of the process of drawing a\r\n     * chart.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data is to be plotted.\r\n     * @param plot  the plot.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param info  collects chart rendering information for return to caller.\r\n     *\r\n     * @return The renderer state.\r\n     ",
      "child_ranges": [
        "(line 187,col 9)-(line 188,col 37)",
        "(line 189,col 9)-(line 189,col 65)",
        "(line 190,col 9)-(line 190,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.calculateItemWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)",
      "begin_line": 202,
      "end_line": 239,
      "comment": "\r\n     * Calculates the bar width and stores it in the renderer state.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     * @param rendererIndex  the renderer index.\r\n     * @param state  the renderer state.\r\n     ",
      "child_ranges": [
        "(line 206,col 9)-(line 206,col 69)",
        "(line 207,col 9)-(line 207,col 65)",
        "(line 208,col 9)-(line 238,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)",
      "begin_line": 256,
      "end_line": 292,
      "comment": "\r\n     * Calculates the coordinate of the first \"side\" of a bar.  This will be\r\n     * the minimum x-coordinate for a vertical bar, and the minimum\r\n     * y-coordinate for a horizontal bar.\r\n     *\r\n     * @param plot  the plot.\r\n     * @param orientation  the plot orientation.\r\n     * @param dataArea  the data area.\r\n     * @param domainAxis  the domain axis.\r\n     * @param state  the renderer state (has the bar width precalculated).\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The coordinate.\r\n     ",
      "child_ranges": [
        "(line 264,col 9)-(line 264,col 27)",
        "(line 265,col 9)-(line 270,col 9)",
        "(line 271,col 9)-(line 272,col 52)",
        "(line 273,col 9)-(line 273,col 56)",
        "(line 274,col 9)-(line 276,col 9)",
        "(line 277,col 9)-(line 277,col 45)",
        "(line 278,col 9)-(line 290,col 9)",
        "(line 291,col 9)-(line 291,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 309,
      "end_line": 377,
      "comment": "\r\n     * Draws the bar for a single (series, category) data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param selected  is the item selected?\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 316,col 9)-(line 316,col 58)",
        "(line 317,col 9)-(line 319,col 9)",
        "(line 322,col 9)-(line 322,col 57)",
        "(line 323,col 9)-(line 325,col 9)",
        "(line 327,col 9)-(line 327,col 47)",
        "(line 329,col 9)-(line 329,col 60)",
        "(line 330,col 9)-(line 331,col 43)",
        "(line 332,col 9)-(line 332,col 53)",
        "(line 333,col 9)-(line 333,col 69)",
        "(line 336,col 9)-(line 336,col 27)",
        "(line 337,col 9)-(line 337,col 23)",
        "(line 338,col 9)-(line 338,col 23)",
        "(line 339,col 9)-(line 350,col 9)",
        "(line 351,col 9)-(line 351,col 65)",
        "(line 352,col 9)-(line 352,col 62)",
        "(line 353,col 9)-(line 353,col 33)",
        "(line 354,col 9)-(line 354,col 31)",
        "(line 355,col 9)-(line 355,col 22)",
        "(line 357,col 9)-(line 358,col 34)",
        "(line 359,col 9)-(line 362,col 9)",
        "(line 365,col 9)-(line 365,col 49)",
        "(line 366,col 9)-(line 368,col 56)",
        "(line 371,col 9)-(line 371,col 64)",
        "(line 372,col 9)-(line 375,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.calculateSeriesWidth(double, org.jfree.chart.axis.CategoryAxis, int, int)",
      "begin_line": 389,
      "end_line": 397,
      "comment": "\r\n     * Calculates the available space for each series.\r\n     *\r\n     * @param space  the space along the entire axis (in Java2D units).\r\n     * @param axis  the category axis.\r\n     * @param categories  the number of categories.\r\n     * @param series  the number of series.\r\n     *\r\n     * @return The width of one series.\r\n     ",
      "child_ranges": [
        "(line 391,col 9)-(line 392,col 48)",
        "(line 393,col 9)-(line 395,col 9)",
        "(line 396,col 9)-(line 396,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.getItemMiddle(java.lang.Comparable, java.lang.Comparable, org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
      "begin_line": 413,
      "end_line": 418,
      "comment": "\r\n     * Returns the Java2D coordinate for the middle of the specified data item.\r\n     *\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     * @param dataset  the dataset.\r\n     * @param axis  the axis.\r\n     * @param area  the drawing area.\r\n     * @param edge  the edge along which the axis lies.\r\n     *\r\n     * @return The Java2D coordinate.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 416,col 9)-(line 417,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.equals(java.lang.Object)",
      "begin_line": 427,
      "end_line": 442,
      "comment": "\r\n     * Tests an object for equality with this instance.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 428,col 9)-(line 430,col 9)",
        "(line 431,col 9)-(line 433,col 9)",
        "(line 434,col 9)-(line 434,col 49)",
        "(line 435,col 9)-(line 437,col 9)",
        "(line 438,col 9)-(line 440,col 9)",
        "(line 441,col 9)-(line 441,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.LevelRenderer.hashCode()",
      "begin_line": 449,
      "end_line": 454,
      "comment": "\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     ",
      "child_ranges": [
        "(line 450,col 9)-(line 450,col 36)",
        "(line 451,col 9)-(line 451,col 61)",
        "(line 452,col 9)-(line 452,col 63)",
        "(line 453,col 9)-(line 453,col 20)"
      ]
    }
  ]
}