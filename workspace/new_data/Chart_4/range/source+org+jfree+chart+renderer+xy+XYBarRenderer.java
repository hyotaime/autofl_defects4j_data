{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/xy/XYBarRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYBarRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
        "org.jfree.chart.renderer.xy.XYItemRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 150,
      "end_line": 1309,
      "comment": "\r\n * A renderer that draws bars on an {@link XYPlot} (requires an\r\n * {@link IntervalXYDataset}).  The example shown here is generated by the\r\n * \u003ccode\u003eXYBarChartDemo1.java\u003c/code\u003e program included in the JFreeChart\r\n * demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYBarRendererSample.png\"\r\n * alt\u003d\"XYBarRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 154,
      "end_line": 154,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "defaultBarPainter"
      ],
      "begin_line": 161,
      "end_line": 161,
      "comment": "\r\n     * The default bar painter assigned to each new instance of this renderer.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter()",
      "begin_line": 170,
      "end_line": 172,
      "comment": "\r\n     * Returns the default bar painter.\r\n     *\r\n     * @return The default bar painter.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 171,col 9)-(line 171,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setDefaultBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)",
      "begin_line": 181,
      "end_line": 186,
      "comment": "\r\n     * Sets the default bar painter.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 182,col 9)-(line 184,col 9)",
        "(line 185,col 9)-(line 185,col 50)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "defaultShadowsVisible"
      ],
      "begin_line": 191,
      "end_line": 191,
      "comment": "\r\n     * The default value for the initialisation of the shadowsVisible flag.\r\n     "
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible()",
      "begin_line": 202,
      "end_line": 204,
      "comment": "\r\n     * Returns the default value for the \u003ccode\u003eshadowsVisible\u003c/code\u003e flag.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDefaultShadowsVisible(boolean)\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 203,col 9)-(line 203,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setDefaultShadowsVisible(boolean)",
      "begin_line": 215,
      "end_line": 217,
      "comment": "\r\n     * Sets the default value for the shadows visible flag.\r\n     *\r\n     * @param visible  the new value for the default.\r\n     *\r\n     * @see #getDefaultShadowsVisible()\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 216,col 9)-(line 216,col 54)"
      ]
    },
    {
      "type": "class_interface",
      "name": "XYBarRendererState",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYItemRendererState"
      ],
      "begin_line": 222,
      "end_line": 253,
      "comment": "\r\n     * The state class used by this renderer.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "g2Base"
      ],
      "begin_line": 225,
      "end_line": 225,
      "comment": " Base for bars against the range axis, in Java 2D space. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRendererState.XYBarRendererState(org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 232,
      "end_line": 234,
      "comment": "\r\n         * Creates a new state object.\r\n         *\r\n         * @param info  the plot rendering info.\r\n         ",
      "child_ranges": [
        "(line 233,col 13)-(line 233,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRendererState.getG2Base()",
      "begin_line": 241,
      "end_line": 243,
      "comment": "\r\n         * Returns the base (range) value in Java 2D space.\r\n         *\r\n         * @return The base value.\r\n         ",
      "child_ranges": [
        "(line 242,col 13)-(line 242,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRendererState.setG2Base(double)",
      "begin_line": 250,
      "end_line": 252,
      "comment": "\r\n         * Sets the range axis base in Java2D space.\r\n         *\r\n         * @param value  the value.\r\n         ",
      "child_ranges": [
        "(line 251,col 13)-(line 251,col 32)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "base"
      ],
      "begin_line": 256,
      "end_line": 256,
      "comment": " The default base value for the bars. "
    },
    {
      "type": "field",
      "varNames": [
        "useYInterval"
      ],
      "begin_line": 262,
      "end_line": 262,
      "comment": "\r\n     * A flag that controls whether the bars use the y-interval supplied by the\r\n     * dataset.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "margin"
      ],
      "begin_line": 265,
      "end_line": 265,
      "comment": " Percentage margin (to reduce the width of bars). "
    },
    {
      "type": "field",
      "varNames": [
        "drawBarOutline"
      ],
      "begin_line": 268,
      "end_line": 268,
      "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "gradientPaintTransformer"
      ],
      "begin_line": 274,
      "end_line": 274,
      "comment": "\r\n     * An optional class used to transform gradient paint objects to fit each\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "legendBar"
      ],
      "begin_line": 280,
      "end_line": 280,
      "comment": "\r\n     * The shape used to represent a bar in each legend item (this should never\r\n     * be \u003ccode\u003enull\u003c/code\u003e).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "positiveItemLabelPositionFallback"
      ],
      "begin_line": 286,
      "end_line": 286,
      "comment": "\r\n     * The fallback position if a positive item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "negativeItemLabelPositionFallback"
      ],
      "begin_line": 292,
      "end_line": 292,
      "comment": "\r\n     * The fallback position if a negative item label doesn\u0027t fit inside the\r\n     * bar.\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "barPainter"
      ],
      "begin_line": 299,
      "end_line": 299,
      "comment": "\r\n     * The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowsVisible"
      ],
      "begin_line": 306,
      "end_line": 306,
      "comment": "\r\n     * The flag that controls whether or not shadows are drawn for the bars.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowXOffset"
      ],
      "begin_line": 313,
      "end_line": 313,
      "comment": "\r\n     * The x-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "shadowYOffset"
      ],
      "begin_line": 320,
      "end_line": 320,
      "comment": "\r\n     * The y-offset for the shadow effect.\r\n     *\r\n     * @since 1.0.11\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "barAlignmentFactor"
      ],
      "begin_line": 327,
      "end_line": 327,
      "comment": "\r\n     * A factor used to align the bars about the x-value.\r\n     *\r\n     * @since 1.0.13\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRenderer()",
      "begin_line": 332,
      "end_line": 334,
      "comment": "\r\n     * The default constructor.\r\n     ",
      "child_ranges": [
        "(line 333,col 9)-(line 333,col 18)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.XYBarRenderer(double)",
      "begin_line": 341,
      "end_line": 354,
      "comment": "\r\n     * Constructs a new renderer.\r\n     *\r\n     * @param margin  the percentage amount to trim from the width of each bar.\r\n     ",
      "child_ranges": [
        "(line 342,col 9)-(line 342,col 16)",
        "(line 343,col 9)-(line 343,col 29)",
        "(line 344,col 9)-(line 344,col 24)",
        "(line 345,col 9)-(line 345,col 34)",
        "(line 346,col 9)-(line 346,col 79)",
        "(line 347,col 9)-(line 347,col 36)",
        "(line 348,col 9)-(line 348,col 71)",
        "(line 349,col 9)-(line 349,col 49)",
        "(line 350,col 9)-(line 350,col 57)",
        "(line 351,col 9)-(line 351,col 33)",
        "(line 352,col 9)-(line 352,col 33)",
        "(line 353,col 9)-(line 353,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getBase()",
      "begin_line": 363,
      "end_line": 365,
      "comment": "\r\n     * Returns the base value for the bars.\r\n     *\r\n     * @return The base value for the bars.\r\n     *\r\n     * @see #setBase(double)\r\n     ",
      "child_ranges": [
        "(line 364,col 9)-(line 364,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setBase(double)",
      "begin_line": 377,
      "end_line": 380,
      "comment": "\r\n     * Sets the base value for the bars and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.  The base value is not used if the dataset\u0027s\r\n     * y-interval is being used to determine the bar length.\r\n     *\r\n     * @param base  the new base value.\r\n     *\r\n     * @see #getBase()\r\n     * @see #getUseYInterval()\r\n     ",
      "child_ranges": [
        "(line 378,col 9)-(line 378,col 25)",
        "(line 379,col 9)-(line 379,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getUseYInterval()",
      "begin_line": 390,
      "end_line": 392,
      "comment": "\r\n     * Returns a flag that determines whether the y-interval from the dataset is\r\n     * used to calculate the length of each bar.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setUseYInterval(boolean)\r\n     ",
      "child_ranges": [
        "(line 391,col 9)-(line 391,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setUseYInterval(boolean)",
      "begin_line": 403,
      "end_line": 408,
      "comment": "\r\n     * Sets the flag that determines whether the y-interval from the dataset is\r\n     * used to calculate the length of each bar, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param use  the flag.\r\n     *\r\n     * @see #getUseYInterval()\r\n     ",
      "child_ranges": [
        "(line 404,col 9)-(line 407,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getMargin()",
      "begin_line": 418,
      "end_line": 420,
      "comment": "\r\n     * Returns the margin which is a percentage amount by which the bars are\r\n     * trimmed.\r\n     *\r\n     * @return The margin.\r\n     *\r\n     * @see #setMargin(double)\r\n     ",
      "child_ranges": [
        "(line 419,col 9)-(line 419,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setMargin(double)",
      "begin_line": 430,
      "end_line": 433,
      "comment": "\r\n     * Sets the percentage amount by which the bars are trimmed and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param margin  the new margin.\r\n     *\r\n     * @see #getMargin()\r\n     ",
      "child_ranges": [
        "(line 431,col 9)-(line 431,col 29)",
        "(line 432,col 9)-(line 432,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.isDrawBarOutline()",
      "begin_line": 442,
      "end_line": 444,
      "comment": "\r\n     * Returns a flag that controls whether or not bar outlines are drawn.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawBarOutline(boolean)\r\n     ",
      "child_ranges": [
        "(line 443,col 9)-(line 443,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline(boolean)",
      "begin_line": 454,
      "end_line": 457,
      "comment": "\r\n     * Sets the flag that controls whether or not bar outlines are drawn and\r\n     * sends a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param draw  the flag.\r\n     *\r\n     * @see #isDrawBarOutline()\r\n     ",
      "child_ranges": [
        "(line 455,col 9)-(line 455,col 35)",
        "(line 456,col 9)-(line 456,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getGradientPaintTransformer()",
      "begin_line": 467,
      "end_line": 469,
      "comment": "\r\n     * Returns the gradient paint transformer (an object used to transform\r\n     * gradient paint objects to fit each bar).\r\n     *\r\n     * @return A transformer (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setGradientPaintTransformer(GradientPaintTransformer)\r\n     ",
      "child_ranges": [
        "(line 468,col 9)-(line 468,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
      "begin_line": 479,
      "end_line": 483,
      "comment": "\r\n     * Sets the gradient paint transformer and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param transformer  the transformer (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getGradientPaintTransformer()\r\n     ",
      "child_ranges": [
        "(line 481,col 9)-(line 481,col 52)",
        "(line 482,col 9)-(line 482,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar()",
      "begin_line": 493,
      "end_line": 495,
      "comment": "\r\n     * Returns the shape used to represent bars in each legend item.\r\n     *\r\n     * @return The shape used to represent bars in each legend item (never\r\n     *         \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setLegendBar(Shape)\r\n     ",
      "child_ranges": [
        "(line 494,col 9)-(line 494,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar(java.awt.Shape)",
      "begin_line": 505,
      "end_line": 511,
      "comment": "\r\n     * Sets the shape used to represent bars in each legend item and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param bar  the bar shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @see #getLegendBar()\r\n     ",
      "child_ranges": [
        "(line 506,col 9)-(line 508,col 9)",
        "(line 509,col 9)-(line 509,col 29)",
        "(line 510,col 9)-(line 510,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getPositiveItemLabelPositionFallback()",
      "begin_line": 522,
      "end_line": 524,
      "comment": "\r\n     * Returns the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 523,col 9)-(line 523,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 536,
      "end_line": 540,
      "comment": "\r\n     * Sets the fallback position for positive item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getPositiveItemLabelPositionFallback()\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 538,col 9)-(line 538,col 58)",
        "(line 539,col 9)-(line 539,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getNegativeItemLabelPositionFallback()",
      "begin_line": 551,
      "end_line": 553,
      "comment": "\r\n     * Returns the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar.\r\n     *\r\n     * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\r\n     *\r\n     * @see #setNegativeItemLabelPositionFallback(ItemLabelPosition)\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 552,col 9)-(line 552,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
      "begin_line": 565,
      "end_line": 569,
      "comment": "\r\n     * Sets the fallback position for negative item labels that don\u0027t fit\r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getNegativeItemLabelPositionFallback()\r\n     * @since 1.0.2\r\n     ",
      "child_ranges": [
        "(line 567,col 9)-(line 567,col 58)",
        "(line 568,col 9)-(line 568,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getBarPainter()",
      "begin_line": 578,
      "end_line": 580,
      "comment": "\r\n     * Returns the bar painter.\r\n     *\r\n     * @return The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 579,col 9)-(line 579,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)",
      "begin_line": 590,
      "end_line": 596,
      "comment": "\r\n     * Sets the bar painter and sends a {@link RendererChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 591,col 9)-(line 593,col 9)",
        "(line 594,col 9)-(line 594,col 34)",
        "(line 595,col 9)-(line 595,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getShadowsVisible()",
      "begin_line": 606,
      "end_line": 608,
      "comment": "\r\n     * Returns the flag that controls whether or not shadows are drawn for\r\n     * the bars.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 607,col 9)-(line 607,col 35)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setShadowVisible(boolean)",
      "begin_line": 619,
      "end_line": 622,
      "comment": "\r\n     * Sets the flag that controls whether or not the renderer\r\n     * draws shadows for the bars, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param visible  the new flag value.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 620,col 9)-(line 620,col 38)",
        "(line 621,col 9)-(line 621,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getShadowXOffset()",
      "begin_line": 631,
      "end_line": 633,
      "comment": "\r\n     * Returns the shadow x-offset.\r\n     *\r\n     * @return The shadow x-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 632,col 9)-(line 632,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setShadowXOffset(double)",
      "begin_line": 643,
      "end_line": 646,
      "comment": "\r\n     * Sets the x-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 644,col 9)-(line 644,col 36)",
        "(line 645,col 9)-(line 645,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getShadowYOffset()",
      "begin_line": 655,
      "end_line": 657,
      "comment": "\r\n     * Returns the shadow y-offset.\r\n     *\r\n     * @return The shadow y-offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 656,col 9)-(line 656,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setShadowYOffset(double)",
      "begin_line": 667,
      "end_line": 670,
      "comment": "\r\n     * Sets the y-offset for the bar shadow and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param offset  the offset.\r\n     *\r\n     * @since 1.0.11\r\n     ",
      "child_ranges": [
        "(line 668,col 9)-(line 668,col 36)",
        "(line 669,col 9)-(line 669,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getBarAlignmentFactor()",
      "begin_line": 679,
      "end_line": 681,
      "comment": "\r\n     * Returns the bar alignment factor.\r\n     *\r\n     * @return The bar alignment factor.\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 680,col 9)-(line 680,col 39)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.setBarAlignmentFactor(double)",
      "begin_line": 692,
      "end_line": 695,
      "comment": "\r\n     * Sets the bar alignment factor and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.  If the alignment factor is outside the\r\n     * range 0.0 to 1.0, no alignment will be performed by the renderer.\r\n     *\r\n     * @param factor  the factor.\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 693,col 9)-(line 693,col 41)",
        "(line 694,col 9)-(line 694,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
      "begin_line": 712,
      "end_line": 722,
      "comment": "\r\n     * Initialises the renderer and returns a state object that should be\r\n     * passed to all subsequent calls to the drawItem() method.  Here we\r\n     * calculate the Java2D y-coordinate for zero, since all the bars have\r\n     * their bases fixed at zero.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param plot  the plot.\r\n     * @param dataset  the data.\r\n     * @param info  an optional info collection object to return data back to\r\n     *              the caller.\r\n     *\r\n     * @return A state object.\r\n     ",
      "child_ranges": [
        "(line 715,col 9)-(line 715,col 64)",
        "(line 716,col 9)-(line 717,col 26)",
        "(line 718,col 9)-(line 719,col 42)",
        "(line 720,col 9)-(line 720,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.getLegendItem(int, int)",
      "begin_line": 733,
      "end_line": 781,
      "comment": "\r\n     * Returns a default legend item for the specified series.  Subclasses\r\n     * should override this method to generate customised items.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A legend item for the series.\r\n     ",
      "child_ranges": [
        "(line 734,col 9)-(line 734,col 33)",
        "(line 735,col 9)-(line 735,col 34)",
        "(line 736,col 9)-(line 779,col 9)",
        "(line 780,col 9)-(line 780,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 798,
      "end_line": 950,
      "comment": "\r\n     * Draws the visual representation of a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the area within which the plot is being drawn.\r\n     * @param plot  the plot (can be used to obtain standard color\r\n     *              information etc).\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 803,col 9)-(line 805,col 9)",
        "(line 806,col 9)-(line 806,col 72)",
        "(line 808,col 9)-(line 808,col 22)",
        "(line 809,col 9)-(line 809,col 22)",
        "(line 810,col 9)-(line 817,col 9)",
        "(line 818,col 9)-(line 820,col 9)",
        "(line 821,col 9)-(line 830,col 9)",
        "(line 832,col 9)-(line 833,col 41)",
        "(line 834,col 9)-(line 835,col 41)",
        "(line 836,col 9)-(line 836,col 69)",
        "(line 837,col 9)-(line 837,col 66)",
        "(line 839,col 9)-(line 839,col 69)",
        "(line 840,col 9)-(line 842,col 9)",
        "(line 843,col 9)-(line 843,col 65)",
        "(line 844,col 9)-(line 846,col 9)",
        "(line 847,col 9)-(line 856,col 9)",
        "(line 859,col 9)-(line 864,col 9)",
        "(line 866,col 9)-(line 866,col 58)",
        "(line 867,col 9)-(line 868,col 26)",
        "(line 869,col 9)-(line 870,col 26)",
        "(line 872,col 9)-(line 873,col 37)",
        "(line 875,col 9)-(line 875,col 65)",
        "(line 876,col 9)-(line 880,col 9)",
        "(line 882,col 9)-(line 882,col 31)",
        "(line 883,col 9)-(line 883,col 60)",
        "(line 884,col 9)-(line 897,col 9)",
        "(line 899,col 9)-(line 899,col 42)",
        "(line 900,col 9)-(line 900,col 50)",
        "(line 901,col 9)-(line 901,col 30)",
        "(line 902,col 9)-(line 917,col 9)",
        "(line 918,col 9)-(line 921,col 9)",
        "(line 922,col 9)-(line 923,col 25)",
        "(line 925,col 9)-(line 930,col 9)",
        "(line 933,col 9)-(line 933,col 42)",
        "(line 934,col 9)-(line 934,col 52)",
        "(line 935,col 9)-(line 935,col 74)",
        "(line 936,col 9)-(line 937,col 41)",
        "(line 938,col 9)-(line 938,col 66)",
        "(line 939,col 9)-(line 939,col 63)",
        "(line 940,col 9)-(line 940,col 68)",
        "(line 941,col 9)-(line 942,col 73)",
        "(line 944,col 9)-(line 944,col 64)",
        "(line 945,col 9)-(line 948,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.drawItemLabelForBar(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, boolean, org.jfree.chart.labels.XYItemLabelGenerator, java.awt.geom.Rectangle2D, boolean)",
      "begin_line": 971,
      "end_line": 1032,
      "comment": "\r\n     * Draws an item label.  This method is provided as an alternative to\r\n     * {@link #drawItemLabel(Graphics2D, PlotOrientation, XYDataset, int, int,\r\n     * double, double, boolean)} so that the bar can be used to calculate the\r\n     * label anchor point.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param selected  is the data item selected?\r\n     * @param plot  the plot.\r\n     * @param generator  the label generator (\u003ccode\u003enull\u003c/code\u003e permitted, in\r\n     *         which case the method does nothing, just returns).\r\n     * @param bar  the bar.\r\n     * @param negative  a flag indicating a negative value.\r\n     *\r\n     * @since 1.2.0\r\n     ",
      "child_ranges": [
        "(line 976,col 9)-(line 978,col 9)",
        "(line 979,col 9)-(line 979,col 70)",
        "(line 980,col 9)-(line 982,col 9)",
        "(line 984,col 9)-(line 984,col 66)",
        "(line 985,col 9)-(line 985,col 30)",
        "(line 986,col 9)-(line 986,col 64)",
        "(line 987,col 9)-(line 987,col 27)",
        "(line 990,col 9)-(line 990,col 42)",
        "(line 991,col 9)-(line 996,col 9)",
        "(line 999,col 9)-(line 1000,col 75)",
        "(line 1002,col 9)-(line 1024,col 9)",
        "(line 1026,col 9)-(line 1031,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
      "begin_line": 1043,
      "end_line": 1142,
      "comment": "\r\n     * Calculates the item label anchor point.\r\n     *\r\n     * @param anchor  the anchor.\r\n     * @param bar  the bar.\r\n     * @param orientation  the plot orientation.\r\n     *\r\n     * @return The anchor point.\r\n     ",
      "child_ranges": [
        "(line 1046,col 9)-(line 1046,col 30)",
        "(line 1047,col 9)-(line 1047,col 51)",
        "(line 1048,col 9)-(line 1048,col 40)",
        "(line 1049,col 9)-(line 1049,col 31)",
        "(line 1050,col 9)-(line 1050,col 40)",
        "(line 1051,col 9)-(line 1051,col 37)",
        "(line 1052,col 9)-(line 1052,col 43)",
        "(line 1053,col 9)-(line 1053,col 34)",
        "(line 1054,col 9)-(line 1054,col 43)",
        "(line 1056,col 9)-(line 1056,col 43)",
        "(line 1057,col 9)-(line 1057,col 34)",
        "(line 1058,col 9)-(line 1058,col 43)",
        "(line 1059,col 9)-(line 1059,col 37)",
        "(line 1060,col 9)-(line 1060,col 43)",
        "(line 1061,col 9)-(line 1061,col 34)",
        "(line 1062,col 9)-(line 1062,col 43)",
        "(line 1064,col 9)-(line 1138,col 9)",
        "(line 1140,col 9)-(line 1140,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)",
      "begin_line": 1151,
      "end_line": 1165,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified anchor point is inside a bar.\r\n     *\r\n     * @param anchor  the anchor point.\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1152,col 9)-(line 1164,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 1177,
      "end_line": 1184,
      "comment": "\r\n     * Returns the lower and upper bounds (range) of the x-values in the\r\n     * specified dataset.  Since this renderer uses the x-interval in the\r\n     * dataset, this is taken into account for the range.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 1178,col 9)-(line 1183,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 1196,
      "end_line": 1204,
      "comment": "\r\n     * Returns the lower and upper bounds (range) of the y-values in the\r\n     * specified dataset.  If the renderer is plotting the y-interval from the\r\n     * dataset, this is taken into account for the range.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *         \u003ccode\u003enull\u003c/code\u003e or empty).\r\n     ",
      "child_ranges": [
        "(line 1197,col 9)-(line 1203,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.clone()",
      "begin_line": 1213,
      "end_line": 1221,
      "comment": "\r\n     * Returns a clone of the renderer.\r\n     *\r\n     * @return A clone.\r\n     *\r\n     * @throws CloneNotSupportedException  if the renderer cannot be cloned.\r\n     ",
      "child_ranges": [
        "(line 1214,col 9)-(line 1214,col 61)",
        "(line 1215,col 9)-(line 1218,col 9)",
        "(line 1219,col 9)-(line 1219,col 64)",
        "(line 1220,col 9)-(line 1220,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.equals(java.lang.Object)",
      "begin_line": 1230,
      "end_line": 1281,
      "comment": "\r\n     * Tests this renderer for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 1231,col 9)-(line 1233,col 9)",
        "(line 1234,col 9)-(line 1236,col 9)",
        "(line 1237,col 9)-(line 1237,col 49)",
        "(line 1238,col 9)-(line 1240,col 9)",
        "(line 1241,col 9)-(line 1243,col 9)",
        "(line 1244,col 9)-(line 1246,col 9)",
        "(line 1247,col 9)-(line 1249,col 9)",
        "(line 1250,col 9)-(line 1253,col 9)",
        "(line 1254,col 9)-(line 1256,col 9)",
        "(line 1257,col 9)-(line 1260,col 9)",
        "(line 1261,col 9)-(line 1264,col 9)",
        "(line 1265,col 9)-(line 1267,col 9)",
        "(line 1268,col 9)-(line 1270,col 9)",
        "(line 1271,col 9)-(line 1273,col 9)",
        "(line 1274,col 9)-(line 1276,col 9)",
        "(line 1277,col 9)-(line 1279,col 9)",
        "(line 1280,col 9)-(line 1280,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 1291,
      "end_line": 1295,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 1293,col 9)-(line 1293,col 35)",
        "(line 1294,col 9)-(line 1294,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYBarRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 1304,
      "end_line": 1307,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 1305,col 9)-(line 1305,col 36)",
        "(line 1306,col 9)-(line 1306,col 59)"
      ]
    }
  ]
}