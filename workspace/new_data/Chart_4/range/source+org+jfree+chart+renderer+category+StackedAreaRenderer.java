{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "StackedAreaRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.category.AreaRenderer",
        "java.lang.Cloneable",
        "org.jfree.chart.util.PublicCloneable",
        "java.io.Serializable"
      ],
      "begin_line": 94,
      "end_line": 503,
      "comment": "\r\n * A renderer that draws stacked area charts for a {@link CategoryPlot}.\r\n * The example shown here is generated by the\r\n * \u003ccode\u003eStackedAreaChartDemo1.java\u003c/code\u003e program included in the\r\n * JFreeChart Demo Collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/StackedAreaRendererSample.png\"\r\n * alt\u003d\"StackedAreaRendererSample.png\" /\u003e\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 98,
      "end_line": 98,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "renderAsPercentages"
      ],
      "begin_line": 101,
      "end_line": 101,
      "comment": " A flag that controls whether the areas display values or percentages. "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.StackedAreaRenderer()",
      "begin_line": 106,
      "end_line": 108,
      "comment": "\r\n     * Creates a new renderer.\r\n     ",
      "child_ranges": [
        "(line 107,col 9)-(line 107,col 20)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.StackedAreaRenderer(boolean)",
      "begin_line": 116,
      "end_line": 119,
      "comment": "\r\n     * Creates a new renderer.\r\n     *\r\n     * @param renderAsPercentages  a flag that controls whether the data values\r\n     *                             are rendered as percentages.\r\n     ",
      "child_ranges": [
        "(line 117,col 9)-(line 117,col 16)",
        "(line 118,col 9)-(line 118,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.getRenderAsPercentages()",
      "begin_line": 130,
      "end_line": 132,
      "comment": "\r\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer displays each item value as\r\n     * a percentage (so that the stacked areas add to 100%), and\r\n     * \u003ccode\u003efalse\u003c/code\u003e otherwise.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 131,col 9)-(line 131,col 40)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.setRenderAsPercentages(boolean)",
      "begin_line": 143,
      "end_line": 146,
      "comment": "\r\n     * Sets the flag that controls whether the renderer displays each item\r\n     * value as a percentage (so that the stacked areas add to 100%), and sends\r\n     * a {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param asPercentages  the flag.\r\n     *\r\n     * @since 1.0.3\r\n     ",
      "child_ranges": [
        "(line 144,col 9)-(line 144,col 49)",
        "(line 145,col 9)-(line 145,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.getPassCount()",
      "begin_line": 155,
      "end_line": 157,
      "comment": "\r\n     * Returns the number of passes (\u003ccode\u003e2\u003c/code\u003e) required by this renderer.\r\n     * The first pass is used to draw the bars, the second pass is used to\r\n     * draw the item labels (if visible).\r\n     *\r\n     * @return The number of passes required by the renderer.\r\n     ",
      "child_ranges": [
        "(line 156,col 9)-(line 156,col 17)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
      "begin_line": 167,
      "end_line": 174,
      "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is empty).\r\n     ",
      "child_ranges": [
        "(line 168,col 9)-(line 173,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
      "begin_line": 190,
      "end_line": 366,
      "comment": "\r\n     * Draw a single data item.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data plot area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the data.\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 196,col 9)-(line 196,col 32)",
        "(line 197,col 9)-(line 197,col 64)",
        "(line 199,col 9)-(line 199,col 24)",
        "(line 200,col 9)-(line 200,col 49)",
        "(line 201,col 9)-(line 203,col 9)",
        "(line 204,col 9)-(line 204,col 63)",
        "(line 210,col 9)-(line 211,col 52)",
        "(line 216,col 9)-(line 216,col 24)",
        "(line 217,col 9)-(line 217,col 59)",
        "(line 218,col 9)-(line 220,col 9)",
        "(line 221,col 9)-(line 221,col 80)",
        "(line 224,col 9)-(line 225,col 52)",
        "(line 227,col 9)-(line 227,col 49)",
        "(line 228,col 9)-(line 228,col 24)",
        "(line 229,col 9)-(line 229,col 71)",
        "(line 230,col 9)-(line 232,col 9)",
        "(line 233,col 9)-(line 234,col 32)",
        "(line 236,col 9)-(line 237,col 52)",
        "(line 240,col 9)-(line 240,col 28)",
        "(line 241,col 9)-(line 241,col 29)",
        "(line 243,col 9)-(line 243,col 64)",
        "(line 244,col 9)-(line 244,col 65)",
        "(line 245,col 9)-(line 245,col 68)",
        "(line 246,col 9)-(line 246,col 69)",
        "(line 248,col 9)-(line 248,col 22)",
        "(line 250,col 9)-(line 250,col 54)",
        "(line 252,col 9)-(line 252,col 45)",
        "(line 253,col 9)-(line 253,col 46)",
        "(line 254,col 9)-(line 345,col 9)",
        "(line 347,col 9)-(line 347,col 57)",
        "(line 348,col 9)-(line 348,col 59)",
        "(line 351,col 9)-(line 351,col 62)",
        "(line 352,col 9)-(line 356,col 9)",
        "(line 359,col 9)-(line 364,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.getPreviousHeight(org.jfree.data.category.CategoryDataset, int, int)",
      "begin_line": 381,
      "end_line": 402,
      "comment": "\r\n     * Calculates the stacked value of the all series up to, but not including\r\n     * \u003ccode\u003eseries\u003c/code\u003e for the specified category, \u003ccode\u003ecategory\u003c/code\u003e.\r\n     * It returns 0.0 if \u003ccode\u003eseries\u003c/code\u003e is the first series, i.e. 0.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param series  the series.\r\n     * @param category  the category.\r\n     *\r\n     * @return double returns a cumulative value for all series\u0027 values up to\r\n     *         but excluding \u003ccode\u003eseries\u003c/code\u003e for Object\r\n     *         \u003ccode\u003ecategory\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 384,col 9)-(line 384,col 28)",
        "(line 385,col 9)-(line 385,col 17)",
        "(line 386,col 9)-(line 386,col 27)",
        "(line 387,col 9)-(line 389,col 9)",
        "(line 390,col 9)-(line 399,col 9)",
        "(line 400,col 9)-(line 400,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues(org.jfree.data.category.CategoryDataset, int, int)",
      "begin_line": 417,
      "end_line": 438,
      "comment": "\r\n     * Calculates the stacked values (one positive and one negative) of all\r\n     * series up to, but not including, \u003ccode\u003eseries\u003c/code\u003e for the specified\r\n     * item. It returns [0.0, 0.0] if \u003ccode\u003eseries\u003c/code\u003e is the first series.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     * @param series  the series index.\r\n     * @param index  the item index.\r\n     *\r\n     * @return An array containing the cumulative negative and positive values\r\n     *     for all series values up to but excluding \u003ccode\u003eseries\u003c/code\u003e\r\n     *     for \u003ccode\u003eindex\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 419,col 9)-(line 419,col 40)",
        "(line 420,col 9)-(line 436,col 9)",
        "(line 437,col 9)-(line 437,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.averageStackValues(double[], double[])",
      "begin_line": 449,
      "end_line": 454,
      "comment": "\r\n     * Returns a pair of \"stack\" values calculated as the mean of the two\r\n     * specified stack value pairs.\r\n     *\r\n     * @param stack1  the first stack pair.\r\n     * @param stack2  the second stack pair.\r\n     *\r\n     * @return A pair of average stack values.\r\n     ",
      "child_ranges": [
        "(line 450,col 9)-(line 450,col 40)",
        "(line 451,col 9)-(line 451,col 50)",
        "(line 452,col 9)-(line 452,col 50)",
        "(line 453,col 9)-(line 453,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.adjustedStackValues(double[], double[])",
      "begin_line": 466,
      "end_line": 481,
      "comment": "\r\n     * Calculates adjusted stack values from the supplied values.  The value is\r\n     * the mean of the supplied values, unless either of the supplied values\r\n     * is zero, in which case the adjusted value is zero also.\r\n     *\r\n     * @param stack1  the first stack pair.\r\n     * @param stack2  the second stack pair.\r\n     *\r\n     * @return A pair of average stack values.\r\n     ",
      "child_ranges": [
        "(line 467,col 9)-(line 467,col 40)",
        "(line 468,col 9)-(line 473,col 9)",
        "(line 474,col 9)-(line 479,col 9)",
        "(line 480,col 9)-(line 480,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.equals(java.lang.Object)",
      "begin_line": 490,
      "end_line": 502,
      "comment": "\r\n     * Checks this instance for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e not permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 491,col 9)-(line 493,col 9)",
        "(line 494,col 9)-(line 496,col 9)",
        "(line 497,col 9)-(line 497,col 61)",
        "(line 498,col 9)-(line 500,col 9)",
        "(line 501,col 9)-(line 501,col 33)"
      ]
    }
  ]
}