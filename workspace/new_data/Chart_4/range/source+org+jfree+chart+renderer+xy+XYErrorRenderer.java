{
  "filepath": "/tmp/Chart-4b/source/org/jfree/chart/renderer/xy/XYErrorRenderer.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "XYErrorRenderer",
      "is_interface": false,
      "parent_types": [
        "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer"
      ],
      "begin_line": 83,
      "end_line": 464,
      "comment": "\r\n * A line and shape renderer that can also display x and/or y-error values.\r\n * This renderer expects an {@link IntervalXYDataset}, otherwise it reverts\r\n * to the behaviour of the super class.  The example shown here is generated by\r\n * the \u003ccode\u003eXYErrorRendererDemo1.java\u003c/code\u003e program included in the\r\n * JFreeChart demo collection:\r\n * \u003cbr\u003e\u003cbr\u003e\r\n * \u003cimg src\u003d\"../../../../../images/XYErrorRendererSample.png\"\r\n * alt\u003d\"XYErrorRendererSample.png\" /\u003e\r\n *\r\n * @since 1.0.3\r\n "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 86,
      "end_line": 86,
      "comment": " For serialization. "
    },
    {
      "type": "field",
      "varNames": [
        "drawXError"
      ],
      "begin_line": 89,
      "end_line": 89,
      "comment": " A flag that controls whether or not the x-error bars are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "drawYError"
      ],
      "begin_line": 92,
      "end_line": 92,
      "comment": " A flag that controls whether or not the y-error bars are drawn. "
    },
    {
      "type": "field",
      "varNames": [
        "capLength"
      ],
      "begin_line": 95,
      "end_line": 95,
      "comment": " The length of the cap at the end of the error bars. "
    },
    {
      "type": "field",
      "varNames": [
        "errorPaint"
      ],
      "begin_line": 101,
      "end_line": 101,
      "comment": "\r\n     * The paint used to draw the error bars (if \u003ccode\u003enull\u003c/code\u003e we use the\r\n     * series paint).\r\n     "
    },
    {
      "type": "field",
      "varNames": [
        "errorStroke"
      ],
      "begin_line": 109,
      "end_line": 109,
      "comment": "\r\n     * The stroke used to draw the error bars (if \u003ccode\u003enull\u003c/code\u003e we use the\r\n     * series outline stroke).\r\n     *\r\n     * @since 1.0.13\r\n     "
    },
    {
      "type": "constructor",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.XYErrorRenderer()",
      "begin_line": 114,
      "end_line": 121,
      "comment": "\r\n     * Creates a new \u003ccode\u003eXYErrorRenderer\u003c/code\u003e instance.\r\n     ",
      "child_ranges": [
        "(line 115,col 9)-(line 115,col 27)",
        "(line 116,col 9)-(line 116,col 31)",
        "(line 117,col 9)-(line 117,col 31)",
        "(line 118,col 9)-(line 118,col 31)",
        "(line 119,col 9)-(line 119,col 32)",
        "(line 120,col 9)-(line 120,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.getDrawXError()",
      "begin_line": 131,
      "end_line": 133,
      "comment": "\r\n     * Returns the flag that controls whether or not the renderer draws error\r\n     * bars for the x-values.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawXError(boolean)\r\n     ",
      "child_ranges": [
        "(line 132,col 9)-(line 132,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.setDrawXError(boolean)",
      "begin_line": 144,
      "end_line": 149,
      "comment": "\r\n     * Sets the flag that controls whether or not the renderer draws error\r\n     * bars for the x-values and, if the flag changes, sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param draw  the flag value.\r\n     *\r\n     * @see #getDrawXError()\r\n     ",
      "child_ranges": [
        "(line 145,col 9)-(line 148,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.getDrawYError()",
      "begin_line": 159,
      "end_line": 161,
      "comment": "\r\n     * Returns the flag that controls whether or not the renderer draws error\r\n     * bars for the y-values.\r\n     *\r\n     * @return A boolean.\r\n     *\r\n     * @see #setDrawYError(boolean)\r\n     ",
      "child_ranges": [
        "(line 160,col 9)-(line 160,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.setDrawYError(boolean)",
      "begin_line": 172,
      "end_line": 177,
      "comment": "\r\n     * Sets the flag that controls whether or not the renderer draws error\r\n     * bars for the y-values and, if the flag changes, sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param draw  the flag value.\r\n     *\r\n     * @see #getDrawYError()\r\n     ",
      "child_ranges": [
        "(line 173,col 9)-(line 176,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.getCapLength()",
      "begin_line": 187,
      "end_line": 189,
      "comment": "\r\n     * Returns the length (in Java2D units) of the cap at the end of the error\r\n     * bars.\r\n     *\r\n     * @return The cap length.\r\n     *\r\n     * @see #setCapLength(double)\r\n     ",
      "child_ranges": [
        "(line 188,col 9)-(line 188,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.setCapLength(double)",
      "begin_line": 199,
      "end_line": 202,
      "comment": "\r\n     * Sets the length of the cap at the end of the error bars, and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param length  the length (in Java2D units).\r\n     *\r\n     * @see #getCapLength()\r\n     ",
      "child_ranges": [
        "(line 200,col 9)-(line 200,col 32)",
        "(line 201,col 9)-(line 201,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.getErrorPaint()",
      "begin_line": 212,
      "end_line": 214,
      "comment": "\r\n     * Returns the paint used to draw the error bars.  If this is\r\n     * \u003ccode\u003enull\u003c/code\u003e (the default), the item paint is used instead.\r\n     *\r\n     * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setErrorPaint(Paint)\r\n     ",
      "child_ranges": [
        "(line 213,col 9)-(line 213,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorPaint(java.awt.Paint)",
      "begin_line": 224,
      "end_line": 227,
      "comment": "\r\n     * Sets the paint used to draw the error bars and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getErrorPaint()\r\n     ",
      "child_ranges": [
        "(line 225,col 9)-(line 225,col 32)",
        "(line 226,col 9)-(line 226,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.getErrorStroke()",
      "begin_line": 240,
      "end_line": 242,
      "comment": "\r\n     * Returns the stroke used to draw the error bars.  If this is\r\n     * \u003ccode\u003enull\u003c/code\u003e (the default), the item outline stroke is used\r\n     * instead.\r\n     *\r\n     * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\r\n     *\r\n     * @see #setErrorStroke(Stroke)\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 241,col 9)-(line 241,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorStroke(java.awt.Stroke)",
      "begin_line": 254,
      "end_line": 257,
      "comment": "\r\n     * Sets the stroke used to draw the error bars and sends a\r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     *\r\n     * @param stroke   the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @see #getErrorStroke()\r\n     *\r\n     * @since 1.0.13\r\n     ",
      "child_ranges": [
        "(line 255,col 9)-(line 255,col 34)",
        "(line 256,col 9)-(line 256,col 26)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 268,
      "end_line": 275,
      "comment": "\r\n     * Returns the range required by this renderer to display all the domain\r\n     * values in the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range, or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 269,col 9)-(line 274,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
      "begin_line": 286,
      "end_line": 293,
      "comment": "\r\n     * Returns the range required by this renderer to display all the range\r\n     * values in the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return The range, or \u003ccode\u003enull\u003c/code\u003e if the dataset is\r\n     *     \u003ccode\u003enull\u003c/code\u003e.\r\n     ",
      "child_ranges": [
        "(line 287,col 9)-(line 292,col 9)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
      "begin_line": 309,
      "end_line": 401,
      "comment": "\r\n     * Draws the visual representation for one data item.\r\n     *\r\n     * @param g2  the graphics output target.\r\n     * @param state  the renderer state.\r\n     * @param dataArea  the data area.\r\n     * @param plot  the plot.\r\n     * @param domainAxis  the domain axis.\r\n     * @param rangeAxis  the range axis.\r\n     * @param dataset  the dataset.\r\n     * @param series  the series index.\r\n     * @param item  the item index.\r\n     * @param pass  the pass index.\r\n     ",
      "child_ranges": [
        "(line 314,col 9)-(line 398,col 9)",
        "(line 399,col 9)-(line 400,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.equals(java.lang.Object)",
      "begin_line": 410,
      "end_line": 434,
      "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
      "child_ranges": [
        "(line 411,col 9)-(line 413,col 9)",
        "(line 414,col 9)-(line 416,col 9)",
        "(line 417,col 9)-(line 417,col 53)",
        "(line 418,col 9)-(line 420,col 9)",
        "(line 421,col 9)-(line 423,col 9)",
        "(line 424,col 9)-(line 426,col 9)",
        "(line 427,col 9)-(line 429,col 9)",
        "(line 430,col 9)-(line 432,col 9)",
        "(line 433,col 9)-(line 433,col 33)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.readObject(java.io.ObjectInputStream)",
      "begin_line": 444,
      "end_line": 449,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
      "child_ranges": [
        "(line 446,col 9)-(line 446,col 35)",
        "(line 447,col 9)-(line 447,col 60)",
        "(line 448,col 9)-(line 448,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jfree.chart.renderer.xy.XYErrorRenderer.writeObject(java.io.ObjectOutputStream)",
      "begin_line": 458,
      "end_line": 462,
      "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
      "child_ranges": [
        "(line 459,col 9)-(line 459,col 36)",
        "(line 460,col 9)-(line 460,col 60)",
        "(line 461,col 9)-(line 461,col 62)"
      ]
    }
  ]
}