[
    {
        "src_path": "src/java/org/apache/commons/cli/Util.java",
        "class_name": "org.apache.commons.cli.Util",
        "signature": "org.apache.commons.cli.Util.stripLeadingHyphens(java.lang.String)",
        "snippet": "    static String stripLeadingHyphens(String str)\n    {\n        if (str.startsWith(\"--\"))\n        {\n            return str.substring(2, str.length());\n        }\n        else if (str.startsWith(\"-\"))\n        {\n            return str.substring(1, str.length());\n        }\n\n        return str;\n    }",
        "begin_line": 34,
        "end_line": 46,
        "comment": "\n     * <p>Remove the hyphens from the begining of <code>str</code> and\n     * return the new String.</p>\n     *\n     * @param str The string from which the hyphens should be removed.\n     *\n     * @return the new String.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Util.java",
        "class_name": "org.apache.commons.cli.Util",
        "signature": "org.apache.commons.cli.Util.stripLeadingAndTrailingQuotes(java.lang.String)",
        "snippet": "    static String stripLeadingAndTrailingQuotes(String str)\n    {\n        if (str.startsWith(\"\\\"\")) {\n            str = str.substring(1, str.length());\n        }\n        if (str.endsWith(\"\\\"\")) {\n            str = str.substring(0, str.length()-1);\n        }\n        return str;\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "\n     * Remove the leading and trailing quotes from <code>str</code>.\n     * E.g. if str is '\"one two\"', then 'one two' is returned.\n     *\n     * @param str The string from which the leading and trailing quotes\n     * should be removed.\n     *\n     * @return The string without the leading and trailing quotes.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.CommandLine()",
        "snippet": "    CommandLine()\n    {\n        // nothing to do\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n     * Creates a command line.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.hasOption(java.lang.String)",
        "snippet": "    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": " \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.hasOption(char)",
        "snippet": "    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }",
        "begin_line": 77,
        "end_line": 80,
        "comment": " \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionObject(java.lang.String)",
        "snippet": "    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionObject(char)",
        "snippet": "    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of opt\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String)",
        "snippet": "    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }",
        "begin_line": 121,
        "end_line": 126,
        "comment": " \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionValue(char)",
        "snippet": "    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }",
        "begin_line": 135,
        "end_line": 138,
        "comment": " \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionValues(java.lang.String)",
        "snippet": "    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }",
        "begin_line": 147,
        "end_line": 157,
        "comment": " \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.resolveOption(java.lang.String)",
        "snippet": "    private Option resolveOption( String opt )\n    {\n        opt = Util.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n            if (opt.equals(option.getOpt()))\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n                return option;\n        }\n\n        }\n        return null;\n    }",
        "begin_line": 164,
        "end_line": 181,
        "comment": "\n     * <p>Retrieves the option object given the long or short option as a String</p>\n     * @param opt short or long name of the option\n     * @return Canonicalized option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionValues(char)",
        "snippet": "    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }",
        "begin_line": 190,
        "end_line": 193,
        "comment": " \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String, java.lang.String)",
        "snippet": "    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": " \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptionValue(char, java.lang.String)",
        "snippet": "    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }",
        "begin_line": 220,
        "end_line": 223,
        "comment": " \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getArgs()",
        "snippet": "    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }",
        "begin_line": 230,
        "end_line": 237,
        "comment": " \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as an array\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getArgList()",
        "snippet": "    public List getArgList()\n    {\n        return args;\n    }",
        "begin_line": 244,
        "end_line": 247,
        "comment": " \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as a <code>List</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.addArg(java.lang.String)",
        "snippet": "    void addArg(String arg)\n    {\n        args.add(arg);\n    }",
        "begin_line": 276,
        "end_line": 279,
        "comment": "\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.addOption(org.apache.commons.cli.Option)",
        "snippet": "    void addOption(Option opt)\n    {\n        options.add(opt);\n    }",
        "begin_line": 287,
        "end_line": 290,
        "comment": "\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.iterator()",
        "snippet": "    public Iterator iterator()\n    {\n        return options.iterator();\n    }",
        "begin_line": 298,
        "end_line": 301,
        "comment": "\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLine.java",
        "class_name": "org.apache.commons.cli.CommandLine",
        "signature": "org.apache.commons.cli.CommandLine.getOptions()",
        "snippet": "    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        // reinitialise array\n        Option[] optionsArray = new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }",
        "begin_line": 308,
        "end_line": 317,
        "comment": "\n     * Returns an array of the processed {@link Option}s.\n     *\n     * @return an array of the processed {@link Option}s.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PatternOptionBuilder.java",
        "class_name": "org.apache.commons.cli.PatternOptionBuilder",
        "signature": "org.apache.commons.cli.PatternOptionBuilder.getValueClass(char)",
        "snippet": "    public static Object getValueClass(char ch)\n    {\n        if (ch == '@')\n        {\n            return PatternOptionBuilder.OBJECT_VALUE;\n        }\n        else if (ch == ':')\n        {\n            return PatternOptionBuilder.STRING_VALUE;\n        }\n        else if (ch == '%')\n        {\n            return PatternOptionBuilder.NUMBER_VALUE;\n        }\n        else if (ch == '+')\n        {\n            return PatternOptionBuilder.CLASS_VALUE;\n        }\n        else if (ch == '#')\n        {\n            return PatternOptionBuilder.DATE_VALUE;\n        }\n        else if (ch == '<')\n        {\n            return PatternOptionBuilder.EXISTING_FILE_VALUE;\n        }\n        else if (ch == '>')\n        {\n            return PatternOptionBuilder.FILE_VALUE;\n        }\n        else if (ch == '*')\n        {\n            return PatternOptionBuilder.FILES_VALUE;\n        }\n        else if (ch == '/')\n        {\n            return PatternOptionBuilder.URL_VALUE;\n        }\n\n        return null;\n    }",
        "begin_line": 89,
        "end_line": 129,
        "comment": "\n     * <p>Retrieve the class that <code>ch</code> represents.</p>\n     *\n     * @param ch the specified character\n     * @return The class that <code>ch</code> represents\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PatternOptionBuilder.java",
        "class_name": "org.apache.commons.cli.PatternOptionBuilder",
        "signature": "org.apache.commons.cli.PatternOptionBuilder.isValueCode(char)",
        "snippet": "    public static boolean isValueCode(char ch)\n    {\n        if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+')\n            && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*')\n            && (ch != '/') && (ch != '!'))\n        {\n            return false;\n        }\n\n        return true;\n    }",
        "begin_line": 138,
        "end_line": 148,
        "comment": "\n     * <p>Returns whether <code>ch</code> is a value code, i.e.\n     * whether it represents a class in a pattern.</p>\n     * \n     * @param ch the specified character\n     * @return true if <code>ch</code> is a value code, otherwise false.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PatternOptionBuilder.java",
        "class_name": "org.apache.commons.cli.PatternOptionBuilder",
        "signature": "org.apache.commons.cli.PatternOptionBuilder.parsePattern(java.lang.String)",
        "snippet": "    public static Options parsePattern(String pattern)\n    {\n        int sz = pattern.length();\n\n        char opt = ' ';\n        char ch = ' ';\n        boolean required = false;\n        Object type = null;\n\n        Options options = new Options();\n\n        for (int i = 0; i < sz; i++)\n        {\n            ch = pattern.charAt(i);\n\n            // a value code comes after an option and specifies \n            // details about it\n            if (!isValueCode(ch))\n            {\n                if (opt != ' ')\n                {\n                    OptionBuilder.hasArg(type != null);\n                    OptionBuilder.isRequired(required);\n                    OptionBuilder.withType(type);\n                    \n                    // we have a previous one to deal with\n                    options.addOption(OptionBuilder.create(opt));\n                    required = false;\n                    type = null;\n                    opt = ' ';\n                }\n\n                opt = ch;\n            }\n            else if (ch == '!')\n            {\n                required = true;\n            }\n            else\n            {\n                type = getValueClass(ch);\n            }\n        }\n\n        if (opt != ' ')\n        {\n            OptionBuilder.hasArg(type != null);\n            OptionBuilder.isRequired(required);\n            OptionBuilder.withType(type);\n            \n            // we have a final one to deal with\n            options.addOption(OptionBuilder.create(opt));\n        }\n\n        return options;\n    }",
        "begin_line": 157,
        "end_line": 212,
        "comment": "\n     * <p>Returns the {@link Options} instance represented by \n     * <code>pattern</code>.</p>\n     *\n     * @param pattern the pattern string\n     * @return The {@link Options} instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.init()",
        "snippet": "    private void init()\n    {\n        eatTheRest = false;\n        tokens.clear();\n        currentOption = null;\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "\n     * <p>Resets the members to their original state i.e. remove\n     * all of <code>tokens</code> entries, set <code>eatTheRest</code>\n     * to false and set <code>currentOption</code> to null.</p>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
        "snippet": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n        String token;\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            token = (String) iter.next();\n\n            // handle SPECIAL TOKEN\n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, \n                                               token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                processSingleHyphen(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                int tokenLength = token.length();\n\n                if (tokenLength == 2)\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token)) {\n                \ttokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    process(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
        "begin_line": 95,
        "end_line": 164,
        "comment": "\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.gobble(java.util.Iterator)",
        "snippet": "    private void gobble(Iterator iter)\n    {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }",
        "begin_line": 171,
        "end_line": 180,
        "comment": "\n     * <p>Adds the remaining tokens to the processed tokens list.</p>\n     *\n     * @param iter An iterator over the remaining tokens\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.process(java.lang.String)",
        "snippet": "    private void process(String value)\n    {\n        if ((currentOption != null) && currentOption.hasArg())\n        {\n            if (currentOption.hasArg())\n            {\n                tokens.add(value);\n                currentOption = null;\n            }\n            else if (currentOption.hasArgs())\n            {\n                tokens.add(value);\n            }\n        }\n        else\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n            tokens.add(value);\n        }\n    }",
        "begin_line": 195,
        "end_line": 215,
        "comment": "\n     * <p>If there is a current option and it can have an argument\n     * value then add the token to the processed tokens list and \n     * set the current option to null.</p>\n     * <p>If there is a current option and it can have argument\n     * values then add the token to the processed tokens list.</p>\n     * <p>If there is not a current option add the special token\n     * \"<b>--</b>\" and the current <code>value</code> to the processed\n     * tokens list.  The add all the remaining <code>argument</code>\n     * values to the processed tokens list.</p>\n     *\n     * @param value The current token\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.processSingleHyphen(java.lang.String)",
        "snippet": "    private void processSingleHyphen(String hyphen)\n    {\n        tokens.add(hyphen);\n    }",
        "begin_line": 223,
        "end_line": 226,
        "comment": "\n     * <p>If it is a hyphen then add the hyphen directly to\n     * the processed tokens list.</p>\n     *\n     * @param hyphen The hyphen token\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.processOptionToken(java.lang.String, boolean)",
        "snippet": "    private void processOptionToken(String token, boolean stopAtNonOption)\n    {\n        if (this.options.hasOption(token))\n        {\n            currentOption = this.options.getOption(token);\n            tokens.add(token);\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n        }\n    }",
        "begin_line": 240,
        "end_line": 251,
        "comment": "\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/PosixParser.java",
        "class_name": "org.apache.commons.cli.PosixParser",
        "signature": "org.apache.commons.cli.PosixParser.burstToken(java.lang.String, boolean)",
        "snippet": "    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        int tokenLength = token.length();\n\n        for (int i = 1; i < tokenLength; i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n            boolean hasOption = options.hasOption(ch);\n\n            if (hasOption)\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                process(token.substring(i));\n            }\n            else\n            {\n                tokens.add(token);\n                break;\n            }\n        }\n    }",
        "begin_line": 279,
        "end_line": 310,
        "comment": "\n     * <p>Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there \n     *  are remaining characters in the token then add the remaining \n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> \n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also \n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     * </p>\n     *\n     * @param token The current token to be <b>burst</b>\n     * @param stopAtNonOption Specifies whether to stop processing\n     * at the first non-Option encountered.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
        "snippet": "    protected abstract String[] flatten(Options opts, String[] arguments, \n                                        boolean stopAtNonOption);",
        "begin_line": 55,
        "end_line": 56,
        "comment": "\n     * <p>Subclasses must implement this method to reduce\n     * the <code>arguments</code> that have been passed to the parse \n     * method.</p>\n     *\n     * @param opts The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[])",
        "snippet": "    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException\n    {\n        return parse(options, arguments, null, false);\n    }",
        "begin_line": 68,
        "end_line": 72,
        "comment": "\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties)",
        "snippet": "    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException\n    {\n        return parse(options, arguments, properties, false);\n    }",
        "begin_line": 86,
        "end_line": 91,
        "comment": "\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], boolean)",
        "snippet": "    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException\n    {\n        return parse(options, arguments, null, stopAtNonOption);\n    }",
        "begin_line": 108,
        "end_line": 113,
        "comment": "\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean)",
        "snippet": "    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException\n    {\n        // initialise members\n        this.options = options;\n\n        // clear out the data in options in case it's been used before (CLI-71)\n        for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\n            Option opt = (Option) it.next();\n            opt.clearValues();\n        }\n\n        requiredOptions = options.getRequiredOptions();\n        cmd = new CommandLine();\n\n        boolean eatTheRest = false;\n\n        if (arguments == null)\n        {\n            arguments = new String[0];\n        }\n\n        List tokenList = Arrays.asList(flatten(this.options, \n                                               arguments, \n                                               stopAtNonOption));\n\n        ListIterator iterator = tokenList.listIterator();\n\n        // process each flattened token\n        while (iterator.hasNext())\n        {\n            String t = (String) iterator.next();\n\n            // the value is the double-dash\n            if (\"--\".equals(t))\n            {\n                eatTheRest = true;\n            }\n\n            // the value is a single dash\n            else if (\"-\".equals(t))\n            {\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n                else\n                {\n                    cmd.addArg(t);\n                }\n            }\n\n            // the value is an option\n            else if (t.startsWith(\"-\"))\n            {\n                if (stopAtNonOption && !options.hasOption(t))\n                {\n                    eatTheRest = true;\n                    cmd.addArg(t);\n                }\n                else\n                {\n                    processOption(t, iterator);\n                }\n            }\n\n            // the value is an argument\n            else\n            {\n                cmd.addArg(t);\n\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n            }\n\n            // eat the remaining tokens\n            if (eatTheRest)\n            {\n                while (iterator.hasNext())\n                {\n                    String str = (String) iterator.next();\n\n                    // ensure only one double-dash is added\n                    if (!\"--\".equals(str))\n                    {\n                        cmd.addArg(str);\n                    }\n                }\n            }\n        }\n\n        processProperties(properties);\n        checkRequiredOptions();\n\n        return cmd;\n    }",
        "begin_line": 130,
        "end_line": 228,
        "comment": "\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.processProperties(java.util.Properties)",
        "snippet": "    private void processProperties(Properties properties)\n    {\n        if (properties == null)\n        {\n            return;\n        }\n\n        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            if (!cmd.hasOption(option))\n            {\n                Option opt = options.getOption(option);\n\n                // get the value from the properties instance\n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))\n                    {\n                        try\n                        {\n                            opt.addValue(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            // if we cannot add the value don't worry about it\n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don't add the\n                    // option to the CommandLine\n                    break;\n                }\n\n                cmd.addOption(opt);\n            }\n        }\n    }",
        "begin_line": 236,
        "end_line": 281,
        "comment": "\n     * <p>Sets the values of Options using the values in \n     * <code>properties</code>.</p>\n     *\n     * @param properties The value properties to be processed.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.checkRequiredOptions()",
        "snippet": "    private void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (requiredOptions.size() > 0)\n        {\n            Iterator iter = requiredOptions.iterator();\n            StringBuffer buff = new StringBuffer(\"Missing required option\");\n            buff.append(requiredOptions.size() == 1 ? \"\" : \"s\");\n            buff.append(\": \");\n\n\n            // loop through the required options\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n            }\n\n            throw new MissingOptionException(buff.toString());\n        }\n    }",
        "begin_line": 290,
        "end_line": 311,
        "comment": "\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.processArgs(org.apache.commons.cli.Option, java.util.ListIterator)",
        "snippet": "    public void processArgs(Option opt, ListIterator iter)\n        throws ParseException\n    {\n        // loop until an option is found\n        while (iter.hasNext())\n        {\n            String str = (String) iter.next();\n\n            // found an Option, not an argument\n            if (options.hasOption(str) && str.startsWith(\"-\"))\n            {\n                iter.previous();\n                break;\n            }\n\n            // found a value\n            try\n            {\n                opt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n            }\n            catch (RuntimeException exp)\n            {\n                iter.previous();\n                break;\n            }\n        }\n\n        if ((opt.getValues() == null) && !opt.hasOptionalArg())\n        {\n            throw new MissingArgumentException(\"Missing argument for option:\"\n                                               + opt.getKey());\n        }\n    }",
        "begin_line": 325,
        "end_line": 357,
        "comment": "\n     * <p>Process the argument values for the specified Option\n     * <code>opt</code> using the values retrieved from the \n     * specified iterator <code>iter</code>.\n     *\n     * @param opt The current Option\n     * @param iter The iterator over the flattened command line\n     * Options.\n     *\n     * @throws ParseException if an argument value is required\n     * and it is has not been found.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Parser.java",
        "class_name": "org.apache.commons.cli.Parser",
        "signature": "org.apache.commons.cli.Parser.processOption(java.lang.String, java.util.ListIterator)",
        "snippet": "    private void processOption(String arg, ListIterator iter)\n        throws ParseException\n    {\n        boolean hasOption = options.hasOption(arg);\n\n        // if there is no option throw an UnrecognisedOptionException\n        if (!hasOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                  + arg);\n        }\n        \n        // get the option represented by arg\n        final Option opt = options.getOption(arg);\n\n        // if the option is a required option remove the option from\n        // the requiredOptions list\n        if (opt.isRequired())\n        {\n            requiredOptions.remove(opt.getKey());\n        }\n\n        // if the option is in an OptionGroup make that option the selected\n        // option of the group\n        if (options.getOptionGroup(opt) != null)\n        {\n            OptionGroup group = options.getOptionGroup(opt);\n\n            if (group.isRequired())\n            {\n                requiredOptions.remove(group);\n            }\n\n            group.setSelected(opt);\n        }\n\n        // if the option takes an argument value\n        if (opt.hasArg())\n        {\n            processArgs(opt, iter);\n        }\n\n\n        // set the option on the command line\n        cmd.addOption(opt);\n    }",
        "begin_line": 371,
        "end_line": 416,
        "comment": "\n     * <p>Process the Option specified by <code>arg</code>\n     * using the values retrieved from the specfied iterator\n     * <code>iter</code>.\n     *\n     * @param arg The String value representing an Option\n     * @param iter The iterator over the flattened command \n     * line arguments.\n     *\n     * @throws ParseException if <code>arg</code> does not\n     * represent an Option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/ParseException.java",
        "class_name": "org.apache.commons.cli.ParseException",
        "signature": "org.apache.commons.cli.ParseException.ParseException(java.lang.String)",
        "snippet": "    public ParseException(String message)\n    {\n        super(message);\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": " \n     * <p>Construct a new <code>ParseException</code> \n     * with the specified detail message.</p>\n     *\n     * @param message the detail message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.Options()",
        "snippet": "    public Options()\n    {\n        // nothing to do\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": " Construct a new Options descriptor\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.addOptionGroup(org.apache.commons.cli.OptionGroup)",
        "snippet": "    public Options addOptionGroup(OptionGroup group)\n    {\n        Iterator options = group.getOptions().iterator();\n\n        if (group.isRequired())\n        {\n            requiredOpts.add(group);\n        }\n\n        while (options.hasNext())\n        {\n            Option option = (Option) options.next();\n\n\n            // an Option cannot be required if it is in an\n            // OptionGroup, either the group is required or\n            // nothing is required\n            option.setRequired(false);\n            addOption(option);\n\n            optionGroups.put(option.getKey(), group);\n        }\n\n        return this;\n    }",
        "begin_line": 70,
        "end_line": 94,
        "comment": "\n     * Add the specified option group.\n     *\n     * @param group the OptionGroup that is to be added\n     * @return the resulting Options instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.getOptionGroups()",
        "snippet": "    Collection getOptionGroups(){\n    \treturn new HashSet(optionGroups.values());\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Lists the OptionGroups that are members of this Options instance.\n     * @return a Collection of OptionGroup instances.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.addOption(java.lang.String, boolean, java.lang.String)",
        "snippet": "    public Options addOption(String opt, boolean hasArg, String description)\n    {\n        addOption(opt, null, hasArg, description);\n\n        return this;\n    }",
        "begin_line": 113,
        "end_line": 118,
        "comment": " \n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.addOption(java.lang.String, java.lang.String, boolean, java.lang.String)",
        "snippet": "    public Options addOption(String opt, String longOpt, boolean hasArg, \n                             String description)\n    {\n        addOption(new Option(opt, longOpt, hasArg, description));\n\n        return this;\n    }",
        "begin_line": 130,
        "end_line": 136,
        "comment": " \n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.addOption(org.apache.commons.cli.Option)",
        "snippet": "    public Options addOption(Option opt)\n    {\n        String key = opt.getKey();\n\n        // add it to the long option list\n        if (opt.hasLongOpt())\n        {\n            longOpts.put(opt.getLongOpt(), opt);\n        }\n\n        // if the option is required add it to the required list\n        if (opt.isRequired() ) \n        {\n            if( requiredOpts.contains(key) ) {\n                requiredOpts.remove( requiredOpts.indexOf(key) );\n            }\n            requiredOpts.add(key);\n        }\n\n        shortOpts.put(key, opt);\n\n        return this;\n    }",
        "begin_line": 144,
        "end_line": 166,
        "comment": "\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added \n     * @return the resulting Options instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.getOptions()",
        "snippet": "    public Collection getOptions()\n    {\n        return Collections.unmodifiableCollection(helpOptions());\n    }",
        "begin_line": 173,
        "end_line": 176,
        "comment": " \n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.helpOptions()",
        "snippet": "    List helpOptions()\n    {\n        List opts = new ArrayList(shortOpts.values());\n\n        // now look through the long opts to see if there are any Long-opt\n        // only options\n        Iterator iter = longOpts.values().iterator();\n\n        while (iter.hasNext())\n        {\n            Object item = iter.next();\n\n            if (!opts.contains(item))\n            {\n                opts.add(item);\n            }\n        }\n\n        return new ArrayList(opts);\n    }",
        "begin_line": 183,
        "end_line": 202,
        "comment": "\n     * Returns the Options for use by the HelpFormatter.\n     *\n     * @return the List of Options\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.getRequiredOptions()",
        "snippet": "    public List getRequiredOptions()\n    {\n        return requiredOpts;\n    }",
        "begin_line": 210,
        "end_line": 213,
        "comment": " \n     * Returns the required options as a\n     * <code>java.util.Collection</code>.\n     *\n     * @return Collection of required options\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.getOption(java.lang.String)",
        "snippet": "    public Option getOption(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        if (shortOpts.containsKey(opt))\n        {\n            return (Option) shortOpts.get(opt);\n        }\n\n        return (Option) longOpts.get(opt);\n    }",
        "begin_line": 221,
        "end_line": 231,
        "comment": " \n     * Retrieve the named {@link Option}\n     *\n     * @param opt short or long name of the {@link Option}\n     * @return the option represented by opt\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.hasOption(java.lang.String)",
        "snippet": "    public boolean hasOption(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        return shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n    }",
        "begin_line": 241,
        "end_line": 246,
        "comment": " \n     * Returns whether the named {@link Option} is a member\n     * of this {@link Options}.\n     *\n     * @param opt short or long name of the {@link Option}\n     * @return true if the named {@link Option} is a member\n     * of this {@link Options}\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.getOptionGroup(org.apache.commons.cli.Option)",
        "snippet": "    public OptionGroup getOptionGroup(Option opt)\n    {\n        return (OptionGroup) optionGroups.get(opt.getKey());\n    }",
        "begin_line": 256,
        "end_line": 259,
        "comment": " \n     * Returns the OptionGroup the <code>opt</code>\n     * belongs to.\n     * @param opt the option whose OptionGroup is being queried.\n     *\n     * @return the OptionGroup if <code>opt</code> is part\n     * of an OptionGroup, otherwise return null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Options.java",
        "class_name": "org.apache.commons.cli.Options",
        "signature": "org.apache.commons.cli.Options.toString()",
        "snippet": "    public String toString()\n    {\n        StringBuffer buf = new StringBuffer();\n\n        buf.append(\"[ Options: [ short \");\n        buf.append(shortOpts.toString());\n        buf.append(\" ] [ long \");\n        buf.append(longOpts);\n        buf.append(\" ]\");\n\n        return buf.toString();\n    }",
        "begin_line": 266,
        "end_line": 277,
        "comment": " \n     * Dump state, suitable for debugging.\n     *\n     * @return Stringified form of this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.addOption(org.apache.commons.cli.Option)",
        "snippet": "    public OptionGroup addOption(Option opt)\n    {\n        // key   - option name\n        // value - the option\n        optionMap.put(opt.getKey(), opt);\n\n        return this;\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": "\n     * add <code>opt</code> to this group\n     *\n     * @param opt the option to add to this group\n     * @return this option group with opt added\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.getNames()",
        "snippet": "    public Collection getNames()\n    {\n        // the key set is the collection of names\n        return optionMap.keySet();\n    }",
        "begin_line": 58,
        "end_line": 62,
        "comment": "\n     * @return the names of the options in this group as a \n     * <code>Collection</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.getOptions()",
        "snippet": "    public Collection getOptions()\n    {\n        // the values are the collection of options\n        return optionMap.values();\n    }",
        "begin_line": 67,
        "end_line": 71,
        "comment": "\n     * @return the options in this group as a <code>Collection</code>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.setSelected(org.apache.commons.cli.Option)",
        "snippet": "    public void setSelected(Option opt)\n                     throws AlreadySelectedException\n    {\n        // if no option has already been selected or the \n        // same option is being reselected then set the\n        // selected member variable\n        if ((this.selected == null) || this.selected.equals(opt.getOpt()))\n        {\n            this.selected = opt.getOpt();\n        }\n        else\n        {\n            throw new AlreadySelectedException(\"an option from this group has \"\n                                               + \"already been selected: '\"\n                                               + selected + \"'\");\n        }\n    }",
        "begin_line": 79,
        "end_line": 95,
        "comment": "\n     * set the selected option of this group to <code>name</code>.\n     * @param opt the option that is selected\n     * @throws AlreadySelectedException if an option from this group has \n     * already been selected.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.getSelected()",
        "snippet": "    public String getSelected()\n    {\n        return selected;\n    }",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * @return the selected option name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.setRequired(boolean)",
        "snippet": "    public void setRequired(boolean required)\n    {\n        this.required = required;\n    }",
        "begin_line": 108,
        "end_line": 111,
        "comment": "\n     * @param required specifies if this group is required\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.isRequired()",
        "snippet": "    public boolean isRequired()\n    {\n        return this.required;\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "\n     * Returns whether this option group is required.\n     *\n     * @return whether this option group is required\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionGroup.java",
        "class_name": "org.apache.commons.cli.OptionGroup",
        "signature": "org.apache.commons.cli.OptionGroup.toString()",
        "snippet": "    public String toString()\n    {\n        StringBuffer buff = new StringBuffer();\n\n        Iterator iter = getOptions().iterator();\n\n        buff.append(\"[\");\n\n        while (iter.hasNext())\n        {\n            Option option = (Option) iter.next();\n\n            if (option.getOpt() != null)\n            {\n                buff.append(\"-\");\n                buff.append(option.getOpt());\n            }\n            else\n            {\n                buff.append(\"--\");\n                buff.append(option.getLongOpt());\n            }\n\n            buff.append(\" \");\n            buff.append(option.getDescription());\n\n            if (iter.hasNext())\n            {\n                buff.append(\", \");\n            }\n        }\n\n        buff.append(\"]\");\n\n        return buff.toString();\n    }",
        "begin_line": 127,
        "end_line": 162,
        "comment": "\n     * <p>Returns the stringified version of this OptionGroup.</p>\n     * @return the stringified representation of this group\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.Option(java.lang.String, java.lang.String)",
        "snippet": "    public Option(String opt, String description)\n           throws IllegalArgumentException\n    {\n        this(opt, null, false, description);\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n     * Creates an Option using the specified parameters.\n     *\n     * @param opt short representation of the option\n     * @param description describes the function of the option\n     *\n     * @throws IllegalArgumentException if there are any non valid\n     * Option characters in <code>opt</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.Option(java.lang.String, boolean, java.lang.String)",
        "snippet": "    public Option(String opt, boolean hasArg, String description)\n           throws IllegalArgumentException\n    {\n        this(opt, null, hasArg, description);\n    }",
        "begin_line": 106,
        "end_line": 110,
        "comment": "\n     * Creates an Option using the specified parameters.\n     *\n     * @param opt short representation of the option\n     * @param hasArg specifies whether the Option takes an argument or not\n     * @param description describes the function of the option\n     *\n     * @throws IllegalArgumentException if there are any non valid\n     * Option characters in <code>opt</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.Option(java.lang.String, java.lang.String, boolean, java.lang.String)",
        "snippet": "    public Option(String opt, String longOpt, boolean hasArg, \n                  String description)\n           throws IllegalArgumentException\n    {\n        // ensure that the option is valid\n        OptionValidator.validateOption(opt);\n\n        this.opt = opt;\n        this.longOpt = longOpt;\n\n        // if hasArg is set then the number of arguments is 1\n        if (hasArg)\n        {\n            this.numberOfArgs = 1;\n        }\n\n        this.hasArg = hasArg;\n        this.description = description;\n    }",
        "begin_line": 123,
        "end_line": 141,
        "comment": "\n     * Creates an Option using the specified parameters.\n     *\n     * @param opt short representation of the option\n     * @param longOpt the long representation of the option\n     * @param hasArg specifies whether the Option takes an argument or not\n     * @param description describes the function of the option\n     *\n     * @throws IllegalArgumentException if there are any non valid\n     * Option characters in <code>opt</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getId()",
        "snippet": "    public int getId()\n    {\n        return getKey().charAt(0);\n    }",
        "begin_line": 150,
        "end_line": 153,
        "comment": "\n     * Returns the id of this Option.  This is only set when the\n     * Option shortOpt is a single character.  This is used for switch\n     * statements.\n     *\n     * @return the id of this Option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getKey()",
        "snippet": "    String getKey()\n    {\n        // if 'opt' is null, then it is a 'long' option\n        if (opt == null)\n        {\n            return this.longOpt;\n        }\n\n        return this.opt;\n    }",
        "begin_line": 160,
        "end_line": 169,
        "comment": "\n     * Returns the 'unique' Option identifier.\n     * \n     * @return the 'unique' Option identifier\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getOpt()",
        "snippet": "    public String getOpt()\n    {\n        return this.opt;\n    }",
        "begin_line": 181,
        "end_line": 184,
        "comment": " \n     * Retrieve the name of this Option.\n     *\n     * It is this String which can be used with\n     * {@link CommandLine#hasOption(String opt)} and\n     * {@link CommandLine#getOptionValue(String opt)} to check\n     * for existence and argument.\n     *\n     * @return The name of this option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getType()",
        "snippet": "    public Object getType()\n    {\n        return this.type;\n    }",
        "begin_line": 191,
        "end_line": 194,
        "comment": "\n     * Retrieve the type of this Option.\n     * \n     * @return The type of this option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setType(java.lang.Object)",
        "snippet": "    public void setType(Object type)\n    {\n        this.type = type;\n    }",
        "begin_line": 201,
        "end_line": 204,
        "comment": "\n     * Sets the type of this Option.\n     *\n     * @param type the type of this Option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getLongOpt()",
        "snippet": "    public String getLongOpt()\n    {\n        return this.longOpt;\n    }",
        "begin_line": 211,
        "end_line": 214,
        "comment": " \n     * Retrieve the long name of this Option.\n     *\n     * @return Long name of this option, or null, if there is no long name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setLongOpt(java.lang.String)",
        "snippet": "    public void setLongOpt(String longOpt)\n    {\n        this.longOpt = longOpt;\n    }",
        "begin_line": 221,
        "end_line": 224,
        "comment": "\n     * Sets the long name of this Option.\n     *\n     * @param longOpt the long name of this Option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setOptionalArg(boolean)",
        "snippet": "    public void setOptionalArg(boolean optionalArg)\n    {\n        this.optionalArg = optionalArg;\n    }",
        "begin_line": 232,
        "end_line": 235,
        "comment": "\n     * Sets whether this Option can have an optional argument.\n     *\n     * @param optionalArg specifies whether the Option can have\n     * an optional argument.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasOptionalArg()",
        "snippet": "    public boolean hasOptionalArg()\n    {\n        return this.optionalArg;\n    }",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n     * @return whether this Option can have an optional argument\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasLongOpt()",
        "snippet": "    public boolean hasLongOpt()\n    {\n        return (this.longOpt != null);\n    }",
        "begin_line": 250,
        "end_line": 253,
        "comment": " \n     * Query to see if this Option has a long name\n     *\n     * @return boolean flag indicating existence of a long name\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasArg()",
        "snippet": "    public boolean hasArg()\n    {\n        return (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n    }",
        "begin_line": 260,
        "end_line": 263,
        "comment": " \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getDescription()",
        "snippet": "    public String getDescription()\n    {\n        return this.description;\n    }",
        "begin_line": 270,
        "end_line": 273,
        "comment": " \n     * Retrieve the self-documenting description of this Option\n     *\n     * @return The string description of this option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setDescription(java.lang.String)",
        "snippet": "    public void setDescription(String description)\n    {\n        this.description = description;\n    }",
        "begin_line": 280,
        "end_line": 283,
        "comment": " \n     * Sets the self-documenting description of this Option\n     *\n     * @param description The description of this option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.isRequired()",
        "snippet": "    public boolean isRequired()\n    {\n        return this.required;\n    }",
        "begin_line": 290,
        "end_line": 293,
        "comment": " \n     * Query to see if this Option requires an argument\n     *\n     * @return boolean flag indicating if an argument is required\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setRequired(boolean)",
        "snippet": "    public void setRequired(boolean required)\n    {\n        this.required = required;\n    }",
        "begin_line": 300,
        "end_line": 303,
        "comment": "\n     * Sets whether this Option is mandatory.\n     *\n     * @param required specifies whether this Option is mandatory\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setArgName(java.lang.String)",
        "snippet": "    public void setArgName(String argName)\n    {\n        this.argName = argName;\n    }",
        "begin_line": 310,
        "end_line": 313,
        "comment": "\n     * Sets the display name for the argument value.\n     *\n     * @param argName the display name for the argument value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getArgName()",
        "snippet": "    public String getArgName()\n    {\n        return this.argName;\n    }",
        "begin_line": 320,
        "end_line": 323,
        "comment": "\n     * Gets the display name for the argument value.\n     *\n     * @return the display name for the argument value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasArgName()",
        "snippet": "    public boolean hasArgName()\n    {\n        return (this.argName != null && this.argName.length() > 0);\n    }",
        "begin_line": 332,
        "end_line": 335,
        "comment": "\n     * Returns whether the display name for the argument value\n     * has been set.\n     *\n     * @return if the display name for the argument value has been\n     * set.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasArgs()",
        "snippet": "    public boolean hasArgs()\n    {\n        return (this.numberOfArgs > 1) \n                || (this.numberOfArgs == UNLIMITED_VALUES);\n    }",
        "begin_line": 342,
        "end_line": 346,
        "comment": " \n     * Query to see if this Option can take many values.\n     *\n     * @return boolean flag indicating if multiple values are allowed\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setArgs(int)",
        "snippet": "    public void setArgs(int num)\n    {\n        this.numberOfArgs = num;\n    }",
        "begin_line": 353,
        "end_line": 356,
        "comment": " \n     * Sets the number of argument values this Option can take.\n     *\n     * @param num the number of argument values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.setValueSeparator(char)",
        "snippet": "    public void setValueSeparator(char sep)\n    {\n        this.valuesep = sep;\n    }",
        "begin_line": 364,
        "end_line": 367,
        "comment": "\n     * Sets the value separator.  For example if the argument value\n     * was a Java property, the value separator would be '='.\n     *\n     * @param sep The value separator.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getValueSeparator()",
        "snippet": "    public char getValueSeparator()\n    {\n        return this.valuesep;\n    }",
        "begin_line": 374,
        "end_line": 377,
        "comment": "\n     * Returns the value separator character.\n     *\n     * @return the value separator character.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasValueSeparator()",
        "snippet": "    public boolean hasValueSeparator()\n    {\n        return (this.valuesep > 0);\n    }",
        "begin_line": 384,
        "end_line": 387,
        "comment": "\n     * Return whether this Option has specified a value separator.\n     * \n     * @return whether this Option has specified a value separator.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getArgs()",
        "snippet": "    public int getArgs()\n    {\n        return this.numberOfArgs;\n    }",
        "begin_line": 394,
        "end_line": 397,
        "comment": " \n     * Returns the number of argument values this Option can take.\n     *\n     * @return num the number of argument values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.addValue(java.lang.String)",
        "snippet": "    void addValue(String value)\n    {\n        switch (numberOfArgs)\n        {\n        case UNINITIALIZED:\n            throw new RuntimeException(\"NO_ARGS_ALLOWED\");\n\n        default:\n            processValue(value);\n        }\n    }",
        "begin_line": 404,
        "end_line": 414,
        "comment": "\n     * Adds the specified value to this Option.\n     * \n     * @param value is a/the value of this Option\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.processValue(java.lang.String)",
        "snippet": "    private void processValue(String value)\n    {\n        // this Option has a separator character\n        if (hasValueSeparator())\n        {\n            // get the separator character\n            char sep = getValueSeparator();\n\n            // store the index for the value separator\n            int index = value.indexOf(sep);\n\n            // while there are more value separators\n            while (index != -1)\n            {\n                // next value to be added \n                if (values.size() == (numberOfArgs - 1))\n                {\n                    break;\n                }\n\n\n                // store\n                add(value.substring(0, index));\n\n\n                // parse\n                value = value.substring(index + 1);\n\n\n                // get new index\n                index = value.indexOf(sep);\n            }\n        }\n\n\n        // store the actual value or the last value that has been parsed\n        add(value);\n    }",
        "begin_line": 427,
        "end_line": 464,
        "comment": "\n     * Processes the value.  If this Option has a value separator\n     * the value will have to be parsed into individual tokens.  When\n     * n-1 tokens have been processed and there are more value separators\n     * in the value, parsing is ceased and the remaining characters are\n     * added as a single token.\n     *\n     * @param value The String to be processed.\n     *\n     * @since 1.0.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.add(java.lang.String)",
        "snippet": "    private void add(String value)\n    {\n        if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\n        {\n            throw new RuntimeException(\"Cannot add value, list full.\");\n        }\n\n\n        // store value\n        this.values.add(value);\n    }",
        "begin_line": 475,
        "end_line": 485,
        "comment": "\n     * Add the value to this Option.  If the number of arguments\n     * is greater than zero and there is enough space in the list then\n     * add the value.  Otherwise, throw a runtime exception.\n     *\n     * @param value The value to be added to this Option\n     *\n     * @since 1.0.1\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getValue()",
        "snippet": "    public String getValue()\n    {\n        return hasNoValues() ? null : (String) this.values.get(0);\n    }",
        "begin_line": 494,
        "end_line": 497,
        "comment": "\n     * Returns the specified value of this Option or \n     * <code>null</code> if there is no value.\n     *\n     * @return the value/first value of this Option or \n     * <code>null</code> if there is no value.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getValue(int)",
        "snippet": "    public String getValue(int index)\n        throws IndexOutOfBoundsException\n    {\n        return hasNoValues() ? null : (String) this.values.get(index);\n    }",
        "begin_line": 511,
        "end_line": 515,
        "comment": "\n     * Returns the specified value of this Option or \n     * <code>null</code> if there is no value.\n     *\n     * @param index The index of the value to be returned.\n     *\n     * @return the specified value of this Option or \n     * <code>null</code> if there is no value.\n     *\n     * @throws IndexOutOfBoundsException if index is less than 1\n     * or greater than the number of the values for this Option.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getValue(java.lang.String)",
        "snippet": "    public String getValue(String defaultValue)\n    {\n        String value = getValue();\n\n        return (value != null) ? value : defaultValue;\n    }",
        "begin_line": 527,
        "end_line": 532,
        "comment": "\n     * Returns the value/first value of this Option or the \n     * <code>defaultValue</code> if there is no value.\n     *\n     * @param defaultValue The value to be returned if ther\n     * is no value.\n     *\n     * @return the value/first value of this Option or the \n     * <code>defaultValue</code> if there are no values.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getValues()",
        "snippet": "    public String[] getValues()\n    {\n        return hasNoValues()\n               ? null : (String[]) this.values.toArray(new String[this.values.size()]);\n    }",
        "begin_line": 541,
        "end_line": 545,
        "comment": "\n     * Return the values of this Option as a String array \n     * or null if there are no values\n     *\n     * @return the values of this Option as a String array \n     * or null if there are no values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.getValuesList()",
        "snippet": "    public java.util.List getValuesList()\n    {\n        return this.values;\n    }",
        "begin_line": 551,
        "end_line": 554,
        "comment": "\n     * @return the values of this Option as a List\n     * or null if there are no values\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.toString()",
        "snippet": "    public String toString()\n    {\n        StringBuffer buf = new StringBuffer().append(\"[ option: \");\n\n        buf.append(this.opt);\n\n        if (this.longOpt != null)\n        {\n            buf.append(\" \").append(this.longOpt);\n        }\n\n        buf.append(\" \");\n\n        if (hasArg)\n        {\n            buf.append(\"+ARG\");\n        }\n\n        buf.append(\" :: \").append(this.description);\n\n        if (this.type != null)\n        {\n            buf.append(\" :: \").append(this.type);\n        }\n\n        buf.append(\" ]\");\n\n        return buf.toString();\n    }",
        "begin_line": 561,
        "end_line": 589,
        "comment": " \n     * Dump state, suitable for debugging.\n     *\n     * @return Stringified form of this object\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hasNoValues()",
        "snippet": "    private boolean hasNoValues()\n    {\n        return this.values.size() == 0;\n    }",
        "begin_line": 596,
        "end_line": 599,
        "comment": "\n     * Returns whether this Option has any values.\n     *\n     * @return whether this Option has any values.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.equals(java.lang.Object)",
        "snippet": "    public boolean equals( Object o )\n    {\n        if ( this == o )\n        {\n            return true;\n        }\n        if ( o == null || getClass() != o.getClass() )\n        {\n            return false;\n        }\n\n        Option option = (Option) o;\n\n\n        if ( opt != null ? !opt.equals( option.opt ) : option.opt != null )\n        {\n            return false;\n        }\n        if ( longOpt != null ? !longOpt.equals( option.longOpt ) : option.longOpt != null )\n        {\n            return false;\n        }\n\n        return true;\n    }",
        "begin_line": 601,
        "end_line": 625,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.hashCode()",
        "snippet": "    public int hashCode()\n    {\n        int result;\n        result = ( opt != null ? opt.hashCode() : 0 );\n        result = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\n        return result;\n    }",
        "begin_line": 627,
        "end_line": 633,
        "comment": "",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/Option.java",
        "class_name": "org.apache.commons.cli.Option",
        "signature": "org.apache.commons.cli.Option.clearValues()",
        "snippet": "    void clearValues() {\n        this.values.clear();\n    }",
        "begin_line": 642,
        "end_line": 644,
        "comment": "\n     * <p>Clear the Option values. After a \n     * parse is complete, these are left with data in them \n     * and they need clearing if another parse is done. </p>\n     *\n     * See: <a href=\"https://issues.apache.org/jira/browse/CLI-71\">CLI-71</a>\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createValue(java.lang.String, java.lang.Object)",
        "snippet": "    public static Object createValue(String str, Object obj)\n    {\n        return createValue(str, (Class) obj);\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createValue(java.lang.String, java.lang.Class)",
        "snippet": "    public static Object createValue(String str, Class clazz)\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }",
        "begin_line": 60,
        "end_line": 102,
        "comment": "\n     * <p>Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createObject(java.lang.String)",
        "snippet": "    public static Object createObject(String str)\n    {\n        Class cl = null;\n\n        try\n        {\n            cl = Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n\n        Object instance = null;\n\n        try\n        {\n            instance = cl.newInstance();\n        }\n        catch (InstantiationException cnfe)\n        {\n            System.err.println(\"InstantiationException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n        catch (IllegalAccessException cnfe)\n        {\n            System.err.println(\"IllegalAccessException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n\n        return instance;\n    }",
        "begin_line": 111,
        "end_line": 148,
        "comment": "\n      * <p>Create an Object from the classname and empty constructor.</p>\n      *\n      * @param str the argument value\n      * @return the initialised object, or null if it couldn't create \n      * the Object.\n      ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createNumber(java.lang.String)",
        "snippet": "    public static Number createNumber(String str)\n    {\n        try\n        {\n            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }",
        "begin_line": 158,
        "end_line": 180,
        "comment": "\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createClass(java.lang.String)",
        "snippet": "    public static Class createClass(String str)\n    {\n        try\n        {\n            return Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n    }",
        "begin_line": 188,
        "end_line": 200,
        "comment": "\n     * <p>Returns the class whose name is <code>str</code>.</p>\n     *\n     * @param str the class name\n     * @return The class if it is found, otherwise return null\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createDate(java.lang.String)",
        "snippet": "    public static Date createDate(String str)\n    {\n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }",
        "begin_line": 209,
        "end_line": 212,
        "comment": "\n     * <p>Returns the date represented by <code>str</code>.</p>\n     *\n     * @param str the date string\n     * @return The date if <code>str</code> is a valid date string,\n     * otherwise return null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createURL(java.lang.String)",
        "snippet": "    public static URL createURL(String str)\n    {\n        try\n        {\n            return new URL(str);\n        }\n        catch (MalformedURLException mue)\n        {\n            System.err.println(\"Unable to parse: \" + str);\n\n            return null;\n        }\n    }",
        "begin_line": 221,
        "end_line": 233,
        "comment": "\n     * <p>Returns the URL represented by <code>str</code>.</p>\n     *\n     * @param str the URL string\n     * @return The URL is <code>str</code> is well-formed, otherwise\n     * return null.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createFile(java.lang.String)",
        "snippet": "    public static File createFile(String str)\n    {\n        return new File(str);\n    }",
        "begin_line": 241,
        "end_line": 244,
        "comment": "\n     * <p>Returns the File represented by <code>str</code>.</p>\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/TypeHandler.java",
        "class_name": "org.apache.commons.cli.TypeHandler",
        "signature": "org.apache.commons.cli.TypeHandler.createFiles(java.lang.String)",
        "snippet": "    public static File[] createFiles(String str)\n    {\n        // to implement/port:\n        //        return FileW.findFiles(str);\n        return null;\n    }",
        "begin_line": 252,
        "end_line": 257,
        "comment": "\n     * <p>Returns the File[] represented by <code>str</code>.</p>\n     *\n     * @param str the paths to the files\n     * @return The File[] represented by <code>str</code>.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setWidth(int)",
        "snippet": "    public void setWidth(int width)\n    {\n        this.defaultWidth = width;\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n     * Sets the 'width'.\n     *\n     * @param width the new value of 'width'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getWidth()",
        "snippet": "    public int getWidth()\n    {\n        return this.defaultWidth;\n    }",
        "begin_line": 99,
        "end_line": 102,
        "comment": "\n     * Returns the 'width'.\n     *\n     * @return the 'width'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setLeftPadding(int)",
        "snippet": "    public void setLeftPadding(int padding)\n    {\n        this.defaultLeftPad = padding;\n    }",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\n     * Sets the 'leftPadding'.\n     *\n     * @param padding the new value of 'leftPadding'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getLeftPadding()",
        "snippet": "    public int getLeftPadding()\n    {\n        return this.defaultLeftPad;\n    }",
        "begin_line": 119,
        "end_line": 122,
        "comment": "\n     * Returns the 'leftPadding'.\n     *\n     * @return the 'leftPadding'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setDescPadding(int)",
        "snippet": "    public void setDescPadding(int padding)\n    {\n        this.defaultDescPad = padding;\n    }",
        "begin_line": 129,
        "end_line": 132,
        "comment": "\n     * Sets the 'descPadding'.\n     *\n     * @param padding the new value of 'descPadding'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getDescPadding()",
        "snippet": "    public int getDescPadding()\n    {\n        return this.defaultDescPad;\n    }",
        "begin_line": 139,
        "end_line": 142,
        "comment": "\n     * Returns the 'descPadding'.\n     *\n     * @return the 'descPadding'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setSyntaxPrefix(java.lang.String)",
        "snippet": "    public void setSyntaxPrefix(String prefix)\n    {\n        this.defaultSyntaxPrefix = prefix;\n    }",
        "begin_line": 149,
        "end_line": 152,
        "comment": "\n     * Sets the 'syntaxPrefix'.\n     *\n     * @param prefix the new value of 'syntaxPrefix'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getSyntaxPrefix()",
        "snippet": "    public String getSyntaxPrefix()\n    {\n        return this.defaultSyntaxPrefix;\n    }",
        "begin_line": 159,
        "end_line": 162,
        "comment": "\n     * Returns the 'syntaxPrefix'.\n     *\n     * @return the 'syntaxPrefix'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setNewLine(java.lang.String)",
        "snippet": "    public void setNewLine(String newline)\n    {\n        this.defaultNewLine = newline;\n    }",
        "begin_line": 169,
        "end_line": 172,
        "comment": "\n     * Sets the 'newLine'.\n     *\n     * @param newline the new value of 'newLine'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getNewLine()",
        "snippet": "    public String getNewLine()\n    {\n        return this.defaultNewLine;\n    }",
        "begin_line": 179,
        "end_line": 182,
        "comment": "\n     * Returns the 'newLine'.\n     *\n     * @return the 'newLine'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setOptPrefix(java.lang.String)",
        "snippet": "    public void setOptPrefix(String prefix)\n    {\n        this.defaultOptPrefix = prefix;\n    }",
        "begin_line": 189,
        "end_line": 192,
        "comment": "\n     * Sets the 'optPrefix'.\n     *\n     * @param prefix the new value of 'optPrefix'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getOptPrefix()",
        "snippet": "    public String getOptPrefix()\n    {\n        return this.defaultOptPrefix;\n    }",
        "begin_line": 199,
        "end_line": 202,
        "comment": "\n     * Returns the 'optPrefix'.\n     *\n     * @return the 'optPrefix'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setLongOptPrefix(java.lang.String)",
        "snippet": "    public void setLongOptPrefix(String prefix)\n    {\n        this.defaultLongOptPrefix = prefix;\n    }",
        "begin_line": 209,
        "end_line": 212,
        "comment": "\n     * Sets the 'longOptPrefix'.\n     *\n     * @param prefix the new value of 'longOptPrefix'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getLongOptPrefix()",
        "snippet": "    public String getLongOptPrefix()\n    {\n        return this.defaultLongOptPrefix;\n    }",
        "begin_line": 219,
        "end_line": 222,
        "comment": "\n     * Returns the 'longOptPrefix'.\n     *\n     * @return the 'longOptPrefix'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.setArgName(java.lang.String)",
        "snippet": "    public void setArgName(String name)\n    {\n        this.defaultArgName = name;\n    }",
        "begin_line": 229,
        "end_line": 232,
        "comment": "\n     * Sets the 'argName'.\n     *\n     * @param name the new value of 'argName'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.getArgName()",
        "snippet": "    public String getArgName()\n    {\n        return this.defaultArgName;\n    }",
        "begin_line": 239,
        "end_line": 242,
        "comment": "\n     * Returns the 'argName'.\n     *\n     * @return the 'argName'\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String, org.apache.commons.cli.Options)",
        "snippet": "    public void printHelp(String cmdLineSyntax, Options options)\n    {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }",
        "begin_line": 255,
        "end_line": 258,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String, org.apache.commons.cli.Options, boolean)",
        "snippet": "    public void printHelp(String cmdLineSyntax, Options options, \n                          boolean autoUsage)\n    {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }",
        "begin_line": 270,
        "end_line": 274,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String)",
        "snippet": "    public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer)\n    {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }",
        "begin_line": 286,
        "end_line": 290,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String, boolean)",
        "snippet": "    public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer, boolean autoUsage)\n    {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, \n                  autoUsage);\n    }",
        "begin_line": 304,
        "end_line": 309,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String)",
        "snippet": "    public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer)\n    {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }",
        "begin_line": 322,
        "end_line": 326,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String, boolean)",
        "snippet": "    public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer, boolean autoUsage)\n    {\n        PrintWriter pw = new PrintWriter(System.out);\n\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, \n                  defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }",
        "begin_line": 341,
        "end_line": 349,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(java.io.PrintWriter, int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, int, int, java.lang.String)",
        "snippet": "    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer)\n    {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, \n                  footer, false);\n    }",
        "begin_line": 366,
        "end_line": 372,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.</p>\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printHelp(java.io.PrintWriter, int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, int, int, java.lang.String, boolean)",
        "snippet": "    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer, boolean autoUsage)\n    {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\n        {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n\n        if (autoUsage)\n        {\n            printUsage(pw, width, cmdLineSyntax, options);\n        }\n        else\n        {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n\n        if ((header != null) && (header.trim().length() > 0))\n        {\n            printWrapped(pw, width, header);\n        }\n\n        printOptions(pw, width, options, leftPad, descPad);\n\n        if ((footer != null) && (footer.trim().length() > 0))\n        {\n            printWrapped(pw, width, footer);\n        }\n    }",
        "begin_line": 392,
        "end_line": 421,
        "comment": "\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.</p>\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printUsage(java.io.PrintWriter, int, java.lang.String, org.apache.commons.cli.Options)",
        "snippet": "    public void printUsage(PrintWriter pw, int width, String app, \n                           Options options)\n    {\n        // initialise the string buffer\n        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\n                                                                 .append(\" \");\n\n        // create a list for processed option groups\n        final Collection processedGroups = new ArrayList();\n\n        // temp variable\n        Option option;\n\n        // iterate over the options\n        for (Iterator i = options.getOptions().iterator(); i.hasNext();)\n        {\n            // get the next Option\n            option = (Option) i.next();\n\n            // check if the option is part of an OptionGroup\n            OptionGroup group = options.getOptionGroup(option);\n\n            // if the option is part of a group \n            if (group != null)\n            {\n                // and if the group has not already been processed\n                if (!processedGroups.contains(group))\n                {\n                    // add the group to the processed list\n                    processedGroups.add(group);\n\n\n                    // add the usage clause\n                    appendOptionGroup(buff, group);\n                }\n\n                // otherwise the option was displayed in the group\n                // previously so ignore it.\n            }\n\n            // if the Option is not part of an OptionGroup\n            else\n            {\n                appendOption(buff, option, option.isRequired());\n            }\n\n            if (i.hasNext())\n            {\n                buff.append(\" \");\n            }\n        }\n\n\n        // call printWrapped\n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, \n                     buff.toString());\n    }",
        "begin_line": 432,
        "end_line": 488,
        "comment": "\n     * <p>Prints the usage statement for the specified application.</p>\n     *\n     * @param pw The PrintWriter to print the usage statement \n     * @param width The number of characters to display per line\n     * @param app The application name\n     * @param options The command line Options\n     *\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.appendOptionGroup(java.lang.StringBuffer, org.apache.commons.cli.OptionGroup)",
        "snippet": "    private static void appendOptionGroup(final StringBuffer buff, \n                                          final OptionGroup group)\n    {\n        if (!group.isRequired())\n        {\n            buff.append(\"[\");\n        }\n\n        // for each option in the OptionGroup\n        for (Iterator i = group.getOptions().iterator(); i.hasNext();)\n        {\n            // whether the option is required or not is handled at group level\n            appendOption(buff, (Option) i.next(), true);\n\n            if (i.hasNext())\n            {\n                buff.append(\" | \");\n            }\n        }\n\n        if (!group.isRequired())\n        {\n            buff.append(\"]\");\n        }\n    }",
        "begin_line": 498,
        "end_line": 522,
        "comment": "\n     * Appends the usage clause for an OptionGroup to a StringBuffer.  \n     * The clause is wrapped in square brackets if the group is required.\n     * The display of the options is handled by appendOption\n     * @param buff the StringBuffer to append to\n     * @param group the group to append\n     * @see #appendOption(StringBuffer,Option,boolean)\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.appendOption(java.lang.StringBuffer, org.apache.commons.cli.Option, boolean)",
        "snippet": "    private static void appendOption(final StringBuffer buff, \n                                     final Option option, \n                                     final boolean required)\n    {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n\n        // if the Option has a value\n        if (option.hasArg() && (option.getArgName() != null))\n        {\n            buff.append(\" <\").append(option.getArgName()).append(\">\");\n        }\n\n        // if the Option is not a required option\n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }",
        "begin_line": 531,
        "end_line": 560,
        "comment": "\n     * Appends the usage clause for an Option to a StringBuffer.  \n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printUsage(java.io.PrintWriter, int, java.lang.String)",
        "snippet": "    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)\n    {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, \n                     defaultSyntaxPrefix + cmdLineSyntax);\n    }",
        "begin_line": 570,
        "end_line": 576,
        "comment": "\n     * <p>Print the cmdLineSyntax to the specified writer, using the\n     * specified width.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters per line for the usage statement.\n     * @param cmdLineSyntax The usage statement.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printOptions(java.io.PrintWriter, int, org.apache.commons.cli.Options, int, int)",
        "snippet": "    public void printOptions(PrintWriter pw, int width, Options options, \n                             int leftPad, int descPad)\n    {\n        StringBuffer sb = new StringBuffer();\n\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }",
        "begin_line": 590,
        "end_line": 597,
        "comment": "\n     * <p>Print the help for the specified Options to the specified writer, \n     * using the specified width, left padding and description padding.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param options The command line Options\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printWrapped(java.io.PrintWriter, int, java.lang.String)",
        "snippet": "    public void printWrapped(PrintWriter pw, int width, String text)\n    {\n        printWrapped(pw, width, 0, text);\n    }",
        "begin_line": 606,
        "end_line": 609,
        "comment": "\n     * <p>Print the specified text to the specified PrintWriter.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param text The text to be written to the PrintWriter\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.printWrapped(java.io.PrintWriter, int, int, java.lang.String)",
        "snippet": "    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, \n                             String text)\n    {\n        StringBuffer sb = new StringBuffer(text.length());\n\n        renderWrappedText(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }",
        "begin_line": 619,
        "end_line": 626,
        "comment": "\n     * <p>Print the specified text to the specified PrintWriter.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be written to the PrintWriter\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.renderOptions(java.lang.StringBuffer, int, org.apache.commons.cli.Options, int, int)",
        "snippet": "    protected StringBuffer renderOptions(StringBuffer sb, int width, \n                                         Options options, int leftPad, \n                                         int descPad)\n    {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n\n        // first create list containing only <lpad>-a,--aaa where \n        // -a is opt and --aaa is long opt; in parallel look for \n        // the longest opt string this list will be then used to \n        // sort options ascending\n        int max = 0;\n        StringBuffer optBuf;\n        List prefixList = new ArrayList();\n        Option option;\n        List optList = options.helpOptions();\n\n        Collections.sort(optList, new OptionComparator());\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(8);\n\n            if (option.getOpt() == null)\n            {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix)\n                      .append(option.getLongOpt());\n            }\n            else\n            {\n                optBuf.append(lpad).append(defaultOptPrefix)\n                      .append(option.getOpt());\n\n                if (option.hasLongOpt())\n                {\n                    optBuf.append(',').append(defaultLongOptPrefix)\n                          .append(option.getLongOpt());\n                }\n            }\n\n            if (option.hasArg())\n            {\n                if (option.hasArgName())\n                {\n                    optBuf.append(\" <\").append(option.getArgName()).append(\">\");\n                }\n                else\n                {\n                    optBuf.append(' ');\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max)       ? optBuf.length() : max;\n        }\n\n        int x = 0;\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(prefixList.get(x++).toString());\n\n            if (optBuf.length() < max)\n            {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n\n            optBuf.append(dpad);\n\n            int nextLineTabStop = max + descPad;\n\n            if (option.getDescription() != null)\n            {\n                optBuf.append(option.getDescription());\n            }\n\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n\n            if (i.hasNext())\n            {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }",
        "begin_line": 644,
        "end_line": 731,
        "comment": "\n     * <p>Render the specified Options and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered Options into.\n     * @param width The number of characters to display per line\n     * @param options The command line Options\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.renderWrappedText(java.lang.StringBuffer, int, int, java.lang.String)",
        "snippet": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
        "begin_line": 744,
        "end_line": 775,
        "comment": "\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.findWrapPos(java.lang.String, int, int)",
        "snippet": "    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos = -1;\n\n        // the line ends before the max wrap pos or a new line char found\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos+1;\n        }\n        else if ((startPos + width) >= text.length())\n        {\n            return -1;\n        }\n\n\n        // look for the last whitespace character before startPos+width\n        pos = startPos + width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // if we found it - just return\n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        // must look for the first whitespace chearacter after startPos \n        // + width\n        pos = startPos + width;\n\n        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            ++pos;\n        }\n\n        return (pos == text.length())        ? (-1) : pos;\n    }",
        "begin_line": 790,
        "end_line": 834,
        "comment": "\n     * Finds the next text wrap position after <code>startPos</code> for the \n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last postion before startPos+width having a \n     * whitespace character (space, \\n, \\r).\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace \n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap \n     * position is at the end of the text\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.createPadding(int)",
        "snippet": "    protected String createPadding(int len)\n    {\n        StringBuffer sb = new StringBuffer(len);\n\n        for (int i = 0; i < len; ++i)\n        {\n            sb.append(' ');\n        }\n\n        return sb.toString();\n    }",
        "begin_line": 843,
        "end_line": 853,
        "comment": "\n     * <p>Return a String of padding of length <code>len</code>.</p>\n     *\n     * @param len The length of the String of padding to create.\n     *\n     * @return The String of padding\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.rtrim(java.lang.String)",
        "snippet": "    protected String rtrim(String s)\n    {\n        if ((s == null) || (s.length() == 0))\n        {\n            return s;\n        }\n\n        int pos = s.length();\n\n        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n        {\n            --pos;\n        }\n\n        return s.substring(0, pos);\n    }",
        "begin_line": 862,
        "end_line": 877,
        "comment": "\n     * <p>Remove the trailing whitespace from the specified String.</p>\n     *\n     * @param s The String to remove the trailing padding from.\n     *\n     * @return The String of without the trailing padding\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "class_name": "org.apache.commons.cli.HelpFormatter",
        "signature": "org.apache.commons.cli.HelpFormatter.OptionComparator.compare(java.lang.Object, java.lang.Object)",
        "snippet": "        public int compare(Object o1, Object o2)\n        {\n            Option opt1 = (Option)o1;\n            Option opt2 = (Option)o2;\n\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }",
        "begin_line": 901,
        "end_line": 907,
        "comment": "\n         * <p>Compares its two arguments for order. Returns a negative \n         * integer, zero, or a positive integer as the first argument \n         * is less than, equal to, or greater than the second.</p>\n         *\n         * @param o1 The first Option to be compared.\n         * @param o2 The second Option to be compared.\n         *\n         * @return a negative integer, zero, or a positive integer as \n         * the first argument is less than, equal to, or greater than the \n         * second.\n         ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionValidator.java",
        "class_name": "org.apache.commons.cli.OptionValidator",
        "signature": "org.apache.commons.cli.OptionValidator.validateOption(java.lang.String)",
        "snippet": "    static void validateOption(String opt)\n                        throws IllegalArgumentException\n    {\n        // check that opt is not NULL\n        if (opt == null)\n        {\n            return;\n        }\n\n        // handle the single character opt\n        else if (opt.length() == 1)\n        {\n            char ch = opt.charAt(0);\n\n            if (!isValidOpt(ch))\n            {\n                throw new IllegalArgumentException(\"illegal option value '\" + ch\n                                                   + \"'\");\n            }\n        }\n\n        // handle the multi character opt\n        else\n        {\n            char[] chars = opt.toCharArray();\n\n            for (int i = 0; i < chars.length; i++)\n            {\n                if (!isValidChar(chars[i]))\n                {\n                    throw new IllegalArgumentException(\n                            \"opt contains illegal character value '\" + chars[i]\n                            + \"'\");\n                }\n            }\n        }\n    }",
        "begin_line": 41,
        "end_line": 77,
        "comment": "\n     * <p>Validates whether <code>opt</code> is a permissable Option\n     * shortOpt.  The rules that specify if the <code>opt</code>\n     * is valid are:</p>\n     * <ul>\n     *  <li><code>opt</code> is not NULL</li>\n     *  <li>a single character <code>opt</code> that is either\n     *  ' '(special case), '?', '@' or a letter</li>\n     *  <li>a multi character <code>opt</code> that only contains\n     *  letters.</li>\n     * </ul>\n     *\n     * @param opt The option string to validate\n     * @throws IllegalArgumentException if the Option is not valid.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionValidator.java",
        "class_name": "org.apache.commons.cli.OptionValidator",
        "signature": "org.apache.commons.cli.OptionValidator.isValidOpt(char)",
        "snippet": "    private static boolean isValidOpt(char c)\n    {\n        return (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n    }",
        "begin_line": 86,
        "end_line": 89,
        "comment": "\n     * <p>Returns whether the specified character is a valid Option.</p>\n     *\n     * @param c the option to validate\n     * @return true if <code>c</code> is a letter, ' ', '?' or '@', \n     * otherwise false.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionValidator.java",
        "class_name": "org.apache.commons.cli.OptionValidator",
        "signature": "org.apache.commons.cli.OptionValidator.isValidChar(char)",
        "snippet": "    private static boolean isValidChar(char c)\n    {\n        return Character.isJavaIdentifierPart(c);\n    }",
        "begin_line": 97,
        "end_line": 100,
        "comment": "\n     * <p>Returns whether the specified character is a valid character.</p>\n     *\n     * @param c the character to validate\n     * @return true if <code>c</code> is a letter.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/MissingOptionException.java",
        "class_name": "org.apache.commons.cli.MissingOptionException",
        "signature": "org.apache.commons.cli.MissingOptionException.MissingOptionException(java.lang.String)",
        "snippet": "    public MissingOptionException(String message)\n    {\n        super(message);\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": " \n     * <p>Construct a new <code>MissingSelectedException</code> \n     * with the specified detail message.</p>\n     *\n     * @param message the detail message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLineParser.java",
        "class_name": "org.apache.commons.cli.CommandLineParser",
        "signature": "org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options, java.lang.String[])",
        "snippet": "    CommandLine parse(Options options, String[] arguments)\n               throws ParseException;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "\n     * Parse the arguments according to the specified options.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLineParser.java",
        "class_name": "org.apache.commons.cli.CommandLineParser",
        "signature": "org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties)",
        "snippet": "    CommandLine parse(Options options, String[] arguments, \n                      Properties properties)\n               throws ParseException;",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLineParser.java",
        "class_name": "org.apache.commons.cli.CommandLineParser",
        "signature": "org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options, java.lang.String[], boolean)",
        "snippet": "    CommandLine parse(Options options, String[] arguments, \n                      boolean stopAtNonOption)\n               throws ParseException;",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Parse the arguments according to the specified options.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param stopAtNonOption specifies whether to continue parsing the\n     * arguments if a non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/CommandLineParser.java",
        "class_name": "org.apache.commons.cli.CommandLineParser",
        "signature": "org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean)",
        "snippet": "    CommandLine parse(Options options, String[] arguments, \n                      Properties properties, boolean stopAtNonOption)\n               throws ParseException;",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption specifies whether to continue parsing the\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/MissingArgumentException.java",
        "class_name": "org.apache.commons.cli.MissingArgumentException",
        "signature": "org.apache.commons.cli.MissingArgumentException.MissingArgumentException(java.lang.String)",
        "snippet": "    public MissingArgumentException(String message)\n    {\n        super(message);\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": " \n     * <p>Construct a new <code>MissingArgumentException</code> \n     * with the specified detail message.</p>\n     *\n     * @param message the detail message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/BasicParser.java",
        "class_name": "org.apache.commons.cli.BasicParser",
        "signature": "org.apache.commons.cli.BasicParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
        "snippet": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        // just echo the arguments\n        return arguments;\n    }",
        "begin_line": 41,
        "end_line": 46,
        "comment": "\n     * <p>A simple implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p><b>Note:</b> <code>options</code> and <code>stopAtNonOption</code>\n     * are not used in this <code>flatten</code> method.</p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The <code>arguments</code> String array.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.OptionBuilder()",
        "snippet": "    private OptionBuilder()\n    {\n        // hide the constructor\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n     * private constructor to prevent instances being created\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.reset()",
        "snippet": "    private static void reset()\n    {\n        description = null;\n        argName = \"arg\";\n        longopt = null;\n        type = null;\n        required = false;\n        numberOfArgs = Option.UNINITIALIZED;\n\n\n        // PMM 9/6/02 - these were missing\n        optionalArg = false;\n        valuesep = (char) 0;\n    }",
        "begin_line": 69,
        "end_line": 82,
        "comment": "\n     * Resets the member variables to their default values.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.withLongOpt(java.lang.String)",
        "snippet": "    public static OptionBuilder withLongOpt(String newLongopt)\n    {\n        OptionBuilder.longopt = newLongopt;\n\n        return instance;\n    }",
        "begin_line": 90,
        "end_line": 95,
        "comment": "\n     * The next Option created will have the following long option value.\n     *\n     * @param newLongopt the long option value\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasArg()",
        "snippet": "    public static OptionBuilder hasArg()\n    {\n        OptionBuilder.numberOfArgs = 1;\n\n        return instance;\n    }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "\n     * The next Option created will require an argument value.\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasArg(boolean)",
        "snippet": "    public static OptionBuilder hasArg(boolean hasArg)\n    {\n        OptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\n\n        return instance;\n    }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "\n     * The next Option created will require an argument value if\n     * <code>hasArg</code> is true.\n     *\n     * @param hasArg if true then the Option has an argument value\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.withArgName(java.lang.String)",
        "snippet": "    public static OptionBuilder withArgName(String name)\n    {\n        OptionBuilder.argName = name;\n\n        return instance;\n    }",
        "begin_line": 130,
        "end_line": 135,
        "comment": "\n     * The next Option created will have the specified argument value \n     * name.\n     *\n     * @param name the name for the argument value\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.isRequired()",
        "snippet": "    public static OptionBuilder isRequired()\n    {\n        OptionBuilder.required = true;\n\n        return instance;\n    }",
        "begin_line": 142,
        "end_line": 147,
        "comment": "\n     * The next Option created will be required.\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.withValueSeparator(char)",
        "snippet": "    public static OptionBuilder withValueSeparator(char sep)\n    {\n        OptionBuilder.valuesep = sep;\n\n        return instance;\n    }",
        "begin_line": 167,
        "end_line": 172,
        "comment": "\n     * The next Option created uses <code>sep</code> as a means to\n     * separate argument values.\n     *\n     * <b>Example:</b>\n     * <pre>\n     * Option opt = OptionBuilder.withValueSeparator(':')\n     *                           .create('D');\n     *\n     * CommandLine line = parser.parse(args);\n     * String propertyName = opt.getValue(0);\n     * String propertyValue = opt.getValue(1);\n     * </pre>\n     *\n     * @param sep The value separator to be used for the argument values.\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.withValueSeparator()",
        "snippet": "    public static OptionBuilder withValueSeparator()\n    {\n        OptionBuilder.valuesep = '=';\n\n        return instance;\n    }",
        "begin_line": 190,
        "end_line": 195,
        "comment": "\n     * The next Option created uses '<code>=</code>' as a means to\n     * separate argument values.\n     *\n     * <b>Example:</b>\n     * <pre>\n     * Option opt = OptionBuilder.withValueSeparator()\n     *                           .create('D');\n     *\n     * CommandLine line = parser.parse(args);\n     * String propertyName = opt.getValue(0);\n     * String propertyValue = opt.getValue(1);\n     * </pre>\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.isRequired(boolean)",
        "snippet": "    public static OptionBuilder isRequired(boolean newRequired)\n    {\n        OptionBuilder.required = newRequired;\n\n        return instance;\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "\n     * The next Option created will be required if <code>required</code>\n     * is true.\n     *\n     * @param newRequired if true then the Option is required\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasArgs()",
        "snippet": "    public static OptionBuilder hasArgs()\n    {\n        OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\n\n        return instance;\n    }",
        "begin_line": 216,
        "end_line": 221,
        "comment": "\n     * The next Option created can have unlimited argument values.\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasArgs(int)",
        "snippet": "    public static OptionBuilder hasArgs(int num)\n    {\n        OptionBuilder.numberOfArgs = num;\n\n        return instance;\n    }",
        "begin_line": 230,
        "end_line": 235,
        "comment": "\n     * The next Option created can have <code>num</code> \n     * argument values.\n     *\n     * @param num the number of args that the option can have\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasOptionalArg()",
        "snippet": "    public static OptionBuilder hasOptionalArg()\n    {\n        OptionBuilder.numberOfArgs = 1;\n        OptionBuilder.optionalArg = true;\n\n        return instance;\n    }",
        "begin_line": 242,
        "end_line": 248,
        "comment": "\n     * The next Option can have an optional argument.\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasOptionalArgs()",
        "snippet": "    public static OptionBuilder hasOptionalArgs()\n    {\n        OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\n        OptionBuilder.optionalArg = true;\n\n        return instance;\n    }",
        "begin_line": 256,
        "end_line": 262,
        "comment": "\n     * The next Option can have an unlimited number of\n     * optional arguments.\n     *\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.hasOptionalArgs(int)",
        "snippet": "    public static OptionBuilder hasOptionalArgs(int numArgs)\n    {\n        OptionBuilder.numberOfArgs = numArgs;\n        OptionBuilder.optionalArg = true;\n\n        return instance;\n    }",
        "begin_line": 272,
        "end_line": 278,
        "comment": "\n     * The next Option can have the specified number of \n     * optional arguments.\n     *\n     * @param numArgs - the maximum number of optional arguments\n     * the next Option created can have.\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.withType(java.lang.Object)",
        "snippet": "    public static OptionBuilder withType(Object newType)\n    {\n        OptionBuilder.type = newType;\n\n        return instance;\n    }",
        "begin_line": 287,
        "end_line": 292,
        "comment": "\n     * The next Option created will have a value that will be an instance \n     * of <code>type</code>.\n     *\n     * @param newType the type of the Options argument value\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.withDescription(java.lang.String)",
        "snippet": "    public static OptionBuilder withDescription(String newDescription)\n    {\n        OptionBuilder.description = newDescription;\n\n        return instance;\n    }",
        "begin_line": 300,
        "end_line": 305,
        "comment": "\n     * The next Option created will have the specified description\n     *\n     * @param newDescription a description of the Option's purpose\n     * @return the OptionBuilder instance\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.create(char)",
        "snippet": "    public static Option create(char opt)\n                         throws IllegalArgumentException\n    {\n        return create(String.valueOf(opt));\n    }",
        "begin_line": 316,
        "end_line": 320,
        "comment": "\n     * Create an Option using the current settings and with \n     * the specified Option <code>char</code>.\n     *\n     * @param opt the character representation of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.create()",
        "snippet": "    public static Option create()\n                         throws IllegalArgumentException\n    {\n        if (longopt == null)\n        {\n            throw new IllegalArgumentException(\"must specify longopt\");\n        }\n\n        return create(null);\n    }",
        "begin_line": 329,
        "end_line": 338,
        "comment": "\n     * Create an Option using the current settings\n     *\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>longOpt</code> has\n     * not been set.  \n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
        "class_name": "org.apache.commons.cli.OptionBuilder",
        "signature": "org.apache.commons.cli.OptionBuilder.create(java.lang.String)",
        "snippet": "    public static Option create(String opt)\n                         throws IllegalArgumentException\n    {\n        // create the option\n        Option option = new Option(opt, description);\n\n\n        // set the option properties\n        option.setLongOpt(longopt);\n        option.setRequired(required);\n        option.setOptionalArg(optionalArg);\n        option.setArgs(numberOfArgs);\n        option.setType(type);\n        option.setValueSeparator(valuesep);\n        option.setArgName(argName);\n\n\n        // reset the OptionBuilder properties\n        OptionBuilder.reset();\n\n        // return the Option instance\n        return option;\n    }",
        "begin_line": 350,
        "end_line": 372,
        "comment": "\n     * Create an Option using the current settings and with \n     * the specified Option <code>char</code>.\n     *\n     * @param opt the <code>java.lang.String</code> representation \n     * of the Option\n     * @return the Option instance\n     * @throws IllegalArgumentException if <code>opt</code> is not\n     * a valid character.  See Option.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/GnuParser.java",
        "class_name": "org.apache.commons.cli.GnuParser",
        "signature": "org.apache.commons.cli.GnuParser.init()",
        "snippet": "    private void init()\n    {\n        tokens.clear();\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "\n     * <p>Resets the members to their original state i.e. remove\n     * all of <code>tokens</code> entries.\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/GnuParser.java",
        "class_name": "org.apache.commons.cli.GnuParser",
        "signature": "org.apache.commons.cli.GnuParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
        "snippet": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    // WARNING: Findbugs reports major problems with the following code. \n                    //          As option cannot be null, currentOption cannot and \n                    //          much of the code below is never going to be run.\n\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
        "begin_line": 62,
        "end_line": 177,
        "comment": "\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/UnrecognizedOptionException.java",
        "class_name": "org.apache.commons.cli.UnrecognizedOptionException",
        "signature": "org.apache.commons.cli.UnrecognizedOptionException.UnrecognizedOptionException(java.lang.String)",
        "snippet": "    public UnrecognizedOptionException(String message)\n    {\n        super(message);\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": " \n     * <p>Construct a new <code>UnrecognizedArgumentException</code> \n     * with the specified detail message.</p>\n     *\n     * @param message the detail message\n     ",
        "resolved_comments": {}
    },
    {
        "src_path": "src/java/org/apache/commons/cli/AlreadySelectedException.java",
        "class_name": "org.apache.commons.cli.AlreadySelectedException",
        "signature": "org.apache.commons.cli.AlreadySelectedException.AlreadySelectedException(java.lang.String)",
        "snippet": "    public AlreadySelectedException(String message)\n    {\n        super(message);\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": " \n     * <p>Construct a new <code>AlreadySelectedException</code> \n     * with the specified detail message.</p>\n     *\n     * @param message the detail message\n     ",
        "resolved_comments": {}
    }
]