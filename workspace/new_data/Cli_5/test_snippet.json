[
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite(ParseRequiredTest.class); \n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.ParseRequiredTest(java.lang.String)",
        "snippet": "    public ParseRequiredTest(String name)\n    {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        _options = new Options()\n            .addOption(\"a\",\n                       \"enable-a\",\n                       false,\n                       \"turn [a] on or off\")\n            .addOption( OptionBuilder.withLongOpt( \"bfile\" )\n                                     .hasArg()\n                                     .isRequired()\n                                     .withDescription( \"set the value of [b]\" )\n                                     .create( 'b' ) );\n    }",
        "begin_line": 42,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 53,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.testWithRequiredOption()",
        "snippet": "    public void testWithRequiredOption()\n    {\n        String[] args = new String[] {  \"-b\", \"file\" };\n\n        try\n        {\n            CommandLine cl = parser.parse(_options,args);\n            \n            assertTrue( \"Confirm -a is NOT set\", !cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n            assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 61,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 55)",
            "(line 65,col 9)-(line 77,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.testOptionAndRequiredOption()",
        "snippet": "    public void testOptionAndRequiredOption()\n    {\n        String[] args = new String[] {  \"-a\", \"-b\", \"file\" };\n\n        try\n        {\n            CommandLine cl = parser.parse(_options,args);\n\n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n            assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 61)",
            "(line 84,col 9)-(line 96,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseRequiredTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "signature": "org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOption()",
        "snippet": "    public void testMissingRequiredOption()\n    {\n        String[] args = new String[] { \"-a\" };\n\n        try\n        {\n            CommandLine cl = parser.parse(_options,args);\n            fail( \"exception should have been thrown\" );\n        }\n        catch (ParseException e)\n        {\n            if( !( e instanceof MissingOptionException ) )\n            {\n                fail( \"expected to catch MissingOptionException\" );\n            }\n        }\n    }",
        "begin_line": 99,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 46)",
            "(line 103,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite( BugsTest.class );\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.BugsTest(java.lang.String)",
        "snippet": "    public BugsTest( String name )\n    {\n        super( name );\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.setUp()",
        "snippet": "    public void setUp()\n    {\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11457()",
        "snippet": "    public void test11457() {\n        Options options = new Options();\n        options.addOption( OptionBuilder.withLongOpt( \"verbose\" )\n                           .create() );\n        String[] args = new String[] { \"--verbose\" };\n\n        CommandLineParser parser = new PosixParser();\n\n        try {\n            CommandLine cmd = parser.parse( options, args );\n            assertTrue( cmd.hasOption( \"verbose\" ) );\n        }        \n        catch( ParseException exp ) {\n            exp.printStackTrace();\n            fail( \"Unexpected Exception: \" + exp.getMessage() );\n        }\n    }",
        "begin_line": 52,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 40)",
            "(line 54,col 9)-(line 55,col 39)",
            "(line 56,col 9)-(line 56,col 53)",
            "(line 58,col 9)-(line 58,col 53)",
            "(line 60,col 9)-(line 67,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11458()",
        "snippet": "    public void test11458()\n    {\n        Options options = new Options();\n        options.addOption( OptionBuilder.withValueSeparator( '=' )\n                           .hasArgs()\n                           .create( 'D' ) );\n        options.addOption( OptionBuilder.withValueSeparator( ':' )\n                           .hasArgs()\n                           .create( 'p' ) );\n        String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" ,\n        \"-pfile1:file2:file3\" };\n\n        CommandLineParser parser = new PosixParser();\n\n        try {\n            CommandLine cmd = parser.parse( options, args );\n\n            String[] values = cmd.getOptionValues( 'D' );\n\n            assertEquals( values[0], \"JAVA_HOME\" );\n            assertEquals( values[1], \"/opt/java\" );\n\n            values = cmd.getOptionValues( 'p' );\n\n            assertEquals( values[0], \"file1\" );\n            assertEquals( values[1], \"file2\" );\n            assertEquals( values[2], \"file3\" );\n\n            java.util.Iterator iter = cmd.iterator();\n            while( iter.hasNext() ) {\n                Option opt = (Option)iter.next();\n                switch( opt.getId() ) {\n                    case 'D':\n                        assertEquals( opt.getValue( 0 ), \"JAVA_HOME\" );\n                        assertEquals( opt.getValue( 1 ), \"/opt/java\" );\n                        break;\n                    case 'p':\n                        assertEquals( opt.getValue( 0 ), \"file1\" );\n                        assertEquals( opt.getValue( 1 ), \"file2\" );\n                        assertEquals( opt.getValue( 2 ), \"file3\" );\n                        break;\n                    default:\n                        fail( \"-D option not found\" );\n                }\n            }\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected Exception:\\nMessage:\" + exp.getMessage() \n                  + \"Type: \" + exp.getClass().getName() );\n        }\n    }",
        "begin_line": 70,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 40)",
            "(line 73,col 9)-(line 75,col 44)",
            "(line 76,col 9)-(line 78,col 44)",
            "(line 79,col 9)-(line 80,col 32)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 84,col 9)-(line 119,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11680()",
        "snippet": "    public void test11680()\n    {\n        Options options = new Options();\n        options.addOption(\"f\", true, \"foobar\");\n\toptions.addOption(\"m\", true, \"missing\");\n        String[] args = new String[] { \"-f\" , \"foo\" };\n\n        CommandLineParser parser = new PosixParser();\n\n        try {\n            CommandLine cmd = parser.parse( options, args );\n\n            try {\n                cmd.getOptionValue( \"f\", \"default f\");\n                cmd.getOptionValue( \"m\", \"default m\");\n            }\n            catch( NullPointerException exp ) {\n                fail( \"NullPointer caught: \" + exp.getMessage() );\n            }\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected Exception: \" + exp.getMessage() );\n        }\n    }",
        "begin_line": 122,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 40)",
            "(line 125,col 9)-(line 125,col 47)",
            "(line 126,col 2)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 54)",
            "(line 129,col 9)-(line 129,col 53)",
            "(line 131,col 9)-(line 144,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11456()",
        "snippet": "    public void test11456()\n    {\n        // Posix \n        Options options = new Options();\n        options.addOption( OptionBuilder.hasOptionalArg()\n                           .create( 'a' ) );\n        options.addOption( OptionBuilder.hasArg()\n                           .create( 'b' ) );\n        String[] args = new String[] { \"-a\", \"-bvalue\" };\n\n        CommandLineParser parser = new PosixParser();\n\n        try {\n            CommandLine cmd = parser.parse( options, args );\n            assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected Exception: \" + exp.getMessage() );\n        }\n\n        // GNU\n        options = new Options();\n        options.addOption( OptionBuilder.hasOptionalArg()\n                           .create( 'a' ) );\n        options.addOption( OptionBuilder.hasArg()\n                           .create( 'b' ) );\n        args = new String[] { \"-a\", \"-b\", \"value\" };\n\n        parser = new GnuParser();\n\n        try {\n            CommandLine cmd = parser.parse( options, args );\n            assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected Exception: \" + exp.getMessage() );\n        }\n\n    }",
        "begin_line": 147,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 40)",
            "(line 151,col 9)-(line 152,col 44)",
            "(line 153,col 9)-(line 154,col 44)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 157,col 9)-(line 157,col 53)",
            "(line 159,col 9)-(line 165,col 9)",
            "(line 168,col 9)-(line 168,col 32)",
            "(line 169,col 9)-(line 170,col 44)",
            "(line 171,col 9)-(line 172,col 44)",
            "(line 173,col 9)-(line 173,col 52)",
            "(line 175,col 9)-(line 175,col 33)",
            "(line 177,col 9)-(line 183,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test12210()",
        "snippet": "    public void test12210() {\n        // create the main options object which will handle the first parameter\n        Options mainOptions = new Options();\n        // There can be 2 main exclusive options:  -exec|-rep\n\n        // Therefore, place them in an option group\n\n        String[] argv = new String[] { \"-exec\", \"-exec_opt1\", \"-exec_opt2\" };\n        OptionGroup grp = new OptionGroup();\n\n        grp.addOption(new Option(\"exec\",false,\"description for this option\"));\n\n        grp.addOption(new Option(\"rep\",false,\"description for this option\"));\n\n        mainOptions.addOptionGroup(grp);\n\n        // for the exec option, there are 2 options...\n        Options execOptions = new Options();\n        execOptions.addOption(\"exec_opt1\",false,\" desc\");\n        execOptions.addOption(\"exec_opt2\",false,\" desc\");\n\n        // similarly, for rep there are 2 options...\n        Options repOptions = new Options();\n        repOptions.addOption(\"repopto\",false,\"desc\");\n        repOptions.addOption(\"repoptt\",false,\"desc\");\n\n        // create the parser\n        GnuParser parser = new GnuParser();\n\n        // finally, parse the arguments:\n\n        // first parse the main options to see what the user has specified\n        // We set stopAtNonOption to true so it does not touch the remaining\n        // options\n        try {\n            CommandLine cmd = parser.parse(mainOptions,argv,true);\n            // get the remaining options...\n            argv = cmd.getArgs();\n\n            if(cmd.hasOption(\"exec\")){\n                cmd = parser.parse(execOptions,argv,false);\n                // process the exec_op1 and exec_opt2...\n                assertTrue( cmd.hasOption(\"exec_opt1\") );\n                assertTrue( cmd.hasOption(\"exec_opt2\") );\n            }\n            else if(cmd.hasOption(\"rep\")){\n                cmd = parser.parse(repOptions,argv,false);\n                // process the rep_op1 and rep_opt2...\n            }\n            else {\n                fail( \"exec option not found\" );\n            }\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected exception: \" + exp.getMessage() );\n        }\n    }",
        "begin_line": 187,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 44)",
            "(line 194,col 9)-(line 194,col 77)",
            "(line 195,col 9)-(line 195,col 44)",
            "(line 197,col 9)-(line 197,col 78)",
            "(line 199,col 9)-(line 199,col 77)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 204,col 9)-(line 204,col 44)",
            "(line 205,col 9)-(line 205,col 57)",
            "(line 206,col 9)-(line 206,col 57)",
            "(line 209,col 9)-(line 209,col 43)",
            "(line 210,col 9)-(line 210,col 53)",
            "(line 211,col 9)-(line 211,col 53)",
            "(line 214,col 9)-(line 214,col 43)",
            "(line 221,col 9)-(line 242,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test13425()",
        "snippet": "    public void test13425() {\n        Options options = new Options();\n        Option oldpass = OptionBuilder.withLongOpt( \"old-password\" )\n            .withDescription( \"Use this option to specify the old password\" )\n            .hasArg()\n            .create( 'o' );\n        Option newpass = OptionBuilder.withLongOpt( \"new-password\" )\n            .withDescription( \"Use this option to specify the new password\" )\n            .hasArg()\n            .create( 'n' );\n\n        String[] args = { \n            \"-o\", \n            \"-n\", \n            \"newpassword\" \n        };\n\n        options.addOption( oldpass );\n        options.addOption( newpass );\n\n        Parser parser = new PosixParser();\n\n        try {\n            CommandLine line = parser.parse( options, args );\n        }\n        // catch the exception and leave the method\n        catch( Exception exp ) {\n            assertTrue( exp != null );\n            return;\n        }\n        fail( \"MissingArgumentException not caught.\" );\n    }",
        "begin_line": 245,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 40)",
            "(line 247,col 9)-(line 250,col 27)",
            "(line 251,col 9)-(line 254,col 27)",
            "(line 256,col 9)-(line 260,col 10)",
            "(line 262,col 9)-(line 262,col 37)",
            "(line 263,col 9)-(line 263,col 37)",
            "(line 265,col 9)-(line 265,col 42)",
            "(line 267,col 9)-(line 274,col 9)",
            "(line 275,col 9)-(line 275,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test13666()",
        "snippet": "    public void test13666() {\n        Options options = new Options();\n        Option dir = OptionBuilder.withDescription( \"dir\" )\n                                       .hasArg()\n                                       .create( 'd' );\n        options.addOption( dir );\n        \n        \n        final PrintStream oldSystemOut = System.out;\n        try{\n            final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n            final PrintStream print = new PrintStream(bytes);\n            \n            // capture this platform's eol symbol\n            print.println();\n            final String eol = bytes.toString();\n            bytes.reset();\n            \n            System.setOut(new PrintStream(bytes));\n            try {\n                HelpFormatter formatter = new HelpFormatter();\n                formatter.printHelp( \"dir\", options );\n            }\n            catch( Exception exp ) {\n                fail( \"Unexpected Exception: \" + exp.getMessage() );\n            }\n            assertEquals(\"usage: dir\"+eol+\" -d <arg>   dir\"+eol,bytes.toString());\n        }\n        finally {\n            System.setOut(oldSystemOut);\n        }\n    }",
        "begin_line": 278,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 40)",
            "(line 280,col 9)-(line 282,col 54)",
            "(line 283,col 9)-(line 283,col 33)",
            "(line 286,col 9)-(line 286,col 52)",
            "(line 287,col 9)-(line 308,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test13935()",
        "snippet": "    public void test13935() {\n        OptionGroup directions = new OptionGroup();\n\n        Option left = new Option( \"l\", \"left\", false, \"go left\" );\n        Option right = new Option( \"r\", \"right\", false, \"go right\" );\n        Option straight = new Option( \"s\", \"straight\", false, \"go straight\" );\n        Option forward = new Option( \"f\", \"forward\", false, \"go forward\" );\n        forward.setRequired( true );\n\n        directions.addOption( left );\n        directions.addOption( right );\n        directions.setRequired( true );\n\n        Options opts = new Options();\n        opts.addOptionGroup( directions );\n        opts.addOption( straight );\n\n        CommandLineParser parser = new PosixParser();\n        boolean exception = false;\n\n        String[] args = new String[] {  };\n        try {\n            CommandLine line = parser.parse( opts, args );\n        }\n        catch( ParseException exp ) {\n            exception = true;\n        }\n\n        if( !exception ) {\n            fail( \"Expected exception not caught.\");\n        }\n\n        exception = false;\n\n        args = new String[] { \"-s\" };\n        try {\n            CommandLine line = parser.parse( opts, args );\n        }\n        catch( ParseException exp ) {\n            exception = true;\n        }\n\n        if( !exception ) {\n            fail( \"Expected exception not caught.\");\n        }\n\n        exception = false;\n\n        args = new String[] { \"-s\", \"-l\" };\n        try {\n            CommandLine line = parser.parse( opts, args );\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n        }\n\n        opts.addOption( forward );\n        args = new String[] { \"-s\", \"-l\", \"-f\" };\n        try {\n            CommandLine line = parser.parse( opts, args );\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n        }\n    }",
        "begin_line": 311,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 51)",
            "(line 314,col 9)-(line 314,col 66)",
            "(line 315,col 9)-(line 315,col 69)",
            "(line 316,col 9)-(line 316,col 78)",
            "(line 317,col 9)-(line 317,col 75)",
            "(line 318,col 9)-(line 318,col 36)",
            "(line 320,col 9)-(line 320,col 37)",
            "(line 321,col 9)-(line 321,col 38)",
            "(line 322,col 9)-(line 322,col 39)",
            "(line 324,col 9)-(line 324,col 37)",
            "(line 325,col 9)-(line 325,col 42)",
            "(line 326,col 9)-(line 326,col 35)",
            "(line 328,col 9)-(line 328,col 53)",
            "(line 329,col 9)-(line 329,col 34)",
            "(line 331,col 9)-(line 331,col 42)",
            "(line 332,col 9)-(line 337,col 9)",
            "(line 339,col 9)-(line 341,col 9)",
            "(line 343,col 9)-(line 343,col 26)",
            "(line 345,col 9)-(line 345,col 37)",
            "(line 346,col 9)-(line 351,col 9)",
            "(line 353,col 9)-(line 355,col 9)",
            "(line 357,col 9)-(line 357,col 26)",
            "(line 359,col 9)-(line 359,col 43)",
            "(line 360,col 9)-(line 365,col 9)",
            "(line 367,col 9)-(line 367,col 34)",
            "(line 368,col 9)-(line 368,col 49)",
            "(line 369,col 9)-(line 374,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test14786()",
        "snippet": "    public void test14786() throws Exception {\n        Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n        Options opts = new Options();\n        opts.addOption(o);\n        opts.addOption(o);\n\n        CommandLineParser parser = new GnuParser();\n\n        String[] args = new String[] { \"-test\" };\n\n        CommandLine line = parser.parse( opts, args );\n        assertTrue( line.hasOption( \"test\" ) );\n    }",
        "begin_line": 377,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 85)",
            "(line 379,col 9)-(line 379,col 37)",
            "(line 380,col 9)-(line 380,col 26)",
            "(line 381,col 9)-(line 381,col 26)",
            "(line 383,col 9)-(line 383,col 51)",
            "(line 385,col 9)-(line 385,col 49)",
            "(line 387,col 9)-(line 387,col 54)",
            "(line 388,col 9)-(line 388,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test15046()",
        "snippet": "    public void test15046() throws Exception {\n        CommandLineParser parser = new PosixParser();\n        final String[] CLI_ARGS = new String[] {\"-z\", \"c\"};\n        Option option = new Option(\"z\", \"timezone\", true, \n                                   \"affected option\");\n        Options cliOptions = new Options();\n        cliOptions.addOption(option);\n        parser.parse(cliOptions, CLI_ARGS);\n\t\t\n        //now add conflicting option\n        cliOptions.addOption(\"c\", \"conflict\", true, \"conflict option\");\n        CommandLine line = parser.parse(cliOptions, CLI_ARGS);\n        assertEquals( option.getValue(), \"c\" );\n        assertTrue( !line.hasOption(\"c\") );\n    }",
        "begin_line": 391,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 53)",
            "(line 393,col 9)-(line 393,col 59)",
            "(line 394,col 9)-(line 395,col 54)",
            "(line 396,col 9)-(line 396,col 43)",
            "(line 397,col 9)-(line 397,col 37)",
            "(line 398,col 9)-(line 398,col 43)",
            "(line 401,col 9)-(line 401,col 71)",
            "(line 402,col 9)-(line 402,col 62)",
            "(line 403,col 9)-(line 403,col 47)",
            "(line 404,col 9)-(line 404,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test15648()",
        "snippet": "    public void test15648() throws Exception {\n        CommandLineParser parser = new PosixParser();\n        final String[] args = new String[] { \"-m\", \"\\\"Two Words\\\"\" };\n        Option m = OptionBuilder.hasArgs().create(\"m\");\n        Options options = new Options();\n        options.addOption( m );\n        CommandLine line = parser.parse( options, args );\n        assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n    }",
        "begin_line": 407,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 53)",
            "(line 409,col 9)-(line 409,col 69)",
            "(line 410,col 9)-(line 410,col 55)",
            "(line 411,col 9)-(line 411,col 40)",
            "(line 412,col 9)-(line 412,col 31)",
            "(line 413,col 9)-(line 413,col 57)",
            "(line 414,col 9)-(line 414,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test27635()",
        "snippet": "    public void test27635() {}",
        "begin_line": 417,
        "end_line": 417,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test31148()",
        "snippet": "    public void test31148() throws ParseException {\n        Option multiArgOption = new Option(\"o\",\"option with multiple args\");\n        multiArgOption.setArgs(1);\n        \n        Options options = new Options();\n        options.addOption(multiArgOption);\n        \n        Parser parser = new PosixParser();\n        String[] args = new String[]{};\n        Properties props = new Properties();\n        props.setProperty(\"o\",\"ovalue\");\n        CommandLine cl = parser.parse(options,args,props);\n        \n        assertTrue(cl.hasOption('o'));\n        assertEquals(\"ovalue\",cl.getOptionValue('o'));\n    }",
        "begin_line": 489,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 490,col 9)-(line 490,col 76)",
            "(line 491,col 9)-(line 491,col 34)",
            "(line 493,col 9)-(line 493,col 40)",
            "(line 494,col 9)-(line 494,col 42)",
            "(line 496,col 9)-(line 496,col 42)",
            "(line 497,col 9)-(line 497,col 39)",
            "(line 498,col 9)-(line 498,col 44)",
            "(line 499,col 9)-(line 499,col 40)",
            "(line 500,col 9)-(line 500,col 58)",
            "(line 502,col 9)-(line 502,col 38)",
            "(line 503,col 9)-(line 503,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test21215()",
        "snippet": "    public void test21215() {\n        Options options = new Options();\n        HelpFormatter formatter = new HelpFormatter();\n        String SEP = System.getProperty(\"line.separator\");\n        String header = SEP+\"Header\";\n        String footer = \"Footer\";\n        StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out),80, \"foobar\", header, options, 2, 2, footer, true);\n        assertEquals(\n                \"usage: foobar\"+SEP+\n                \"\"+SEP+\n                \"Header\"+SEP+\n                \"\"+SEP+\n                \"Footer\"+SEP\n                ,out.toString());\n    }",
        "begin_line": 506,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 507,col 9)-(line 507,col 40)",
            "(line 508,col 9)-(line 508,col 54)",
            "(line 509,col 9)-(line 509,col 58)",
            "(line 510,col 9)-(line 510,col 37)",
            "(line 511,col 9)-(line 511,col 33)",
            "(line 512,col 9)-(line 512,col 46)",
            "(line 513,col 9)-(line 513,col 100)",
            "(line 514,col 9)-(line 520,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test19383()",
        "snippet": "    public void test19383() {}",
        "begin_line": 523,
        "end_line": 523,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite( ValuesTest.class );\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.ValuesTest(java.lang.String)",
        "snippet": "    public ValuesTest( String name )\n    {\n        super( name );\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        Options opts = new Options();\n\n        opts.addOption(\"a\",\n                       false,\n                       \"toggle -a\");\n\n        opts.addOption(\"b\",\n                       true,\n                       \"set -b\");\n\n        opts.addOption(\"c\",\n                       \"c\",\n                       false,\n                       \"toggle -c\");\n\n        opts.addOption(\"d\",\n                       \"d\",\n                       true,\n                       \"set -d\");\n        \n        opts.addOption( OptionBuilder.withLongOpt( \"e\" )\n                                     .hasArgs()\n                                     .withDescription( \"set -e \")\n                                     .create( 'e' ) );\n\n        opts.addOption(\"f\",\n                       \"f\",\n                       false,\n                       \"jk\");\n        \n        opts.addOption( OptionBuilder.withLongOpt( \"g\" )\n                        .hasArgs( 2 )\n                        .withDescription( \"set -g\")\n                        .create( 'g' ) );\n\n        opts.addOption( OptionBuilder.withLongOpt( \"h\" )\n                        .hasArgs( 2 )\n                        .withDescription( \"set -h\")\n                        .create( 'h' ) );\n\n        opts.addOption( OptionBuilder.withLongOpt( \"i\" )\n                        .withDescription( \"set -i\")\n                        .create( 'i' ) );\n\n        opts.addOption( OptionBuilder.withLongOpt( \"j\" )\n                        .hasArgs( )\n                        .withDescription( \"set -j\")\n                        .withValueSeparator( '=' )\n                        .create( 'j' ) );\n\n        opts.addOption( OptionBuilder.withLongOpt( \"k\" )\n                        .hasArgs( )\n                        .withDescription( \"set -k\")\n                        .withValueSeparator( '=' )\n                        .create( 'k' ) );\n\n        _option = OptionBuilder.withLongOpt( \"m\" )\n                        .hasArgs( )\n                        .withDescription( \"set -m\")\n                        .withValueSeparator( )\n                        .create( 'm' );\n\n        opts.addOption( _option );\n        \n        String[] args = new String[] { \"-a\",\n                                       \"-b\", \"foo\",\n                                       \"--c\",\n                                       \"--d\", \"bar\",\n                                       \"-e\", \"one\", \"two\",\n                                       \"-f\",\n                                       \"arg1\", \"arg2\",\n                                       \"-g\", \"val1\", \"val2\" , \"arg3\",\n                                       \"-h\", \"val1\", \"-i\",\n                                       \"-h\", \"val2\",\n                                       \"-jkey=value\",\n                                       \"-j\", \"key=value\",\n                                       \"-kkey1=value1\", \n                                       \"-kkey2=value2\",\n                                       \"-mkey=value\"};\n\n        CommandLineParser parser = new PosixParser();\n\n        try\n        {\n            _cmdline = parser.parse(opts,args);\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 40,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 37)",
            "(line 44,col 9)-(line 46,col 36)",
            "(line 48,col 9)-(line 50,col 33)",
            "(line 52,col 9)-(line 55,col 36)",
            "(line 57,col 9)-(line 60,col 33)",
            "(line 62,col 9)-(line 65,col 54)",
            "(line 67,col 9)-(line 70,col 29)",
            "(line 72,col 9)-(line 75,col 41)",
            "(line 77,col 9)-(line 80,col 41)",
            "(line 82,col 9)-(line 84,col 41)",
            "(line 86,col 9)-(line 90,col 41)",
            "(line 92,col 9)-(line 96,col 41)",
            "(line 98,col 9)-(line 102,col 39)",
            "(line 104,col 9)-(line 104,col 34)",
            "(line 106,col 9)-(line 120,col 54)",
            "(line 122,col 9)-(line 122,col 53)",
            "(line 124,col 9)-(line 131,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n\n    }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testShortArgs()",
        "snippet": "    public void testShortArgs()\n    {\n        assertTrue( _cmdline.hasOption(\"a\") );\n        assertTrue( _cmdline.hasOption(\"c\") );\n\n        assertNull( _cmdline.getOptionValues(\"a\") );\n        assertNull( _cmdline.getOptionValues(\"c\") );\n    }",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 46)",
            "(line 144,col 9)-(line 144,col 52)",
            "(line 145,col 9)-(line 145,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testShortArgsWithValue()",
        "snippet": "    public void testShortArgsWithValue()\n    {\n        assertTrue( _cmdline.hasOption(\"b\") );\n        assertTrue( _cmdline.getOptionValue(\"b\").equals(\"foo\"));\n        assertTrue( _cmdline.getOptionValues(\"b\").length == 1);\n\n        assertTrue( _cmdline.hasOption(\"d\") );\n        assertTrue( _cmdline.getOptionValue(\"d\").equals(\"bar\"));\n        assertTrue( _cmdline.getOptionValues(\"d\").length == 1);\n    }",
        "begin_line": 148,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 46)",
            "(line 151,col 9)-(line 151,col 64)",
            "(line 152,col 9)-(line 152,col 63)",
            "(line 154,col 9)-(line 154,col 46)",
            "(line 155,col 9)-(line 155,col 64)",
            "(line 156,col 9)-(line 156,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testMultipleArgValues()",
        "snippet": "    public void testMultipleArgValues()\n    {\n        String[] result = _cmdline.getOptionValues(\"e\");\n        String[] values = new String[] { \"one\", \"two\" };\n        assertTrue( _cmdline.hasOption(\"e\") );\n        assertTrue( _cmdline.getOptionValues(\"e\").length == 2);\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"e\") ) );\n    }",
        "begin_line": 159,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 56)",
            "(line 162,col 9)-(line 162,col 56)",
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 63)",
            "(line 165,col 9)-(line 165,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testTwoArgValues()",
        "snippet": "    public void testTwoArgValues()\n    {\n        String[] result = _cmdline.getOptionValues(\"g\");\n        String[] values = new String[] { \"val1\", \"val2\" };\n        assertTrue( _cmdline.hasOption(\"g\") );\n        assertTrue( _cmdline.getOptionValues(\"g\").length == 2);\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"g\") ) );\n    }",
        "begin_line": 168,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 56)",
            "(line 171,col 9)-(line 171,col 58)",
            "(line 172,col 9)-(line 172,col 46)",
            "(line 173,col 9)-(line 173,col 63)",
            "(line 174,col 9)-(line 174,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testComplexValues()",
        "snippet": "    public void testComplexValues()\n    {\n        String[] result = _cmdline.getOptionValues(\"h\");\n        String[] values = new String[] { \"val1\", \"val2\" };\n        assertTrue( _cmdline.hasOption(\"i\") );\n        assertTrue( _cmdline.hasOption(\"h\") );\n        assertTrue( _cmdline.getOptionValues(\"h\").length == 2);\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"h\") ) );\n    }",
        "begin_line": 177,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 56)",
            "(line 180,col 9)-(line 180,col 58)",
            "(line 181,col 9)-(line 181,col 46)",
            "(line 182,col 9)-(line 182,col 46)",
            "(line 183,col 9)-(line 183,col 63)",
            "(line 184,col 9)-(line 184,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testExtraArgs()",
        "snippet": "    public void testExtraArgs()\n    {\n        String[] args = new String[] { \"arg1\", \"arg2\", \"arg3\" };\n        assertTrue( _cmdline.getArgs().length == 3 );         \n        assertTrue( Arrays.equals( args, _cmdline.getArgs() ) );\n    }",
        "begin_line": 187,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 64)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testCharSeparator()",
        "snippet": "    public void testCharSeparator()\n    {\n        // tests the char methods of CommandLine that delegate to\n        // the String methods\n        String[] values = new String[] { \"key\", \"value\", \"key\", \"value\" };\n        assertTrue( _cmdline.hasOption( \"j\" ) );\n        assertTrue( _cmdline.hasOption( 'j' ) );\n        assertEquals( 4, _cmdline.getOptionValues( \"j\" ).length );\n        assertEquals( 4, _cmdline.getOptionValues( 'j' ).length );\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"j\" ) ) );\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'j' ) ) );\n\n        values = new String[] { \"key1\", \"value1\", \"key2\", \"value2\" };\n        assertTrue( _cmdline.hasOption( \"k\" ) );\n        assertTrue( _cmdline.hasOption( 'k' ) );\n        assertTrue( _cmdline.getOptionValues( \"k\" ).length == 4 );\n        assertTrue( _cmdline.getOptionValues( 'k' ).length == 4 );\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"k\" ) ) );\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'k' ) ) );\n\n        values = new String[] { \"key\", \"value\" };\n        assertTrue( _cmdline.hasOption( \"m\" ) );\n        assertTrue( _cmdline.hasOption( 'm' ) );\n        assertTrue( _cmdline.getOptionValues( \"m\" ).length == 2);\n        assertTrue( _cmdline.getOptionValues( 'm' ).length == 2);\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"m\" ) ) );\n        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'm' ) ) );\n    }",
        "begin_line": 194,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 74)",
            "(line 199,col 9)-(line 199,col 48)",
            "(line 200,col 9)-(line 200,col 48)",
            "(line 201,col 9)-(line 201,col 66)",
            "(line 202,col 9)-(line 202,col 66)",
            "(line 203,col 9)-(line 203,col 79)",
            "(line 204,col 9)-(line 204,col 79)",
            "(line 206,col 9)-(line 206,col 69)",
            "(line 207,col 9)-(line 207,col 48)",
            "(line 208,col 9)-(line 208,col 48)",
            "(line 209,col 9)-(line 209,col 66)",
            "(line 210,col 9)-(line 210,col 66)",
            "(line 211,col 9)-(line 211,col 79)",
            "(line 212,col 9)-(line 212,col 79)",
            "(line 214,col 9)-(line 214,col 49)",
            "(line 215,col 9)-(line 215,col 48)",
            "(line 216,col 9)-(line 216,col 48)",
            "(line 217,col 9)-(line 217,col 65)",
            "(line 218,col 9)-(line 218,col 65)",
            "(line 219,col 9)-(line 219,col 79)",
            "(line 220,col 9)-(line 220,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite(ParseTest.class); \n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.ParseTest(java.lang.String)",
        "snippet": "    public ParseTest(String name)\n    {\n        super(name);\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        _options = new Options()\n            .addOption(\"a\",\n                       \"enable-a\",\n                       false,\n                       \"turn [a] on or off\")\n            .addOption(\"b\",\n                       \"bfile\",\n                       true,\n                       \"set the value of [b]\")\n            .addOption(\"c\",\n                       \"copt\",\n                       false,\n                       \"turn [c] on or off\");\n\n        _parser = new PosixParser();\n    }",
        "begin_line": 38,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 52,col 45)",
            "(line 54,col 9)-(line 54,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testSimpleShort()",
        "snippet": "    public void testSimpleShort()\n    {\n        String[] args = new String[] { \"-a\",\n                                       \"-b\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 62,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 66,col 54)",
            "(line 68,col 9)-(line 80,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testSimpleLong()",
        "snippet": "    public void testSimpleLong()\n    {\n        String[] args = new String[] { \"--enable-a\",\n                                       \"--bfile\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n        } \n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 83,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 87,col 54)",
            "(line 89,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testComplexShort()",
        "snippet": "    public void testComplexShort()\n    {\n        String[] args = new String[] { \"-acbtoast\",\n                                       \"foo\", \"bar\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 105,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 108,col 54)",
            "(line 110,col 9)-(line 123,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testExtraOption()",
        "snippet": "    public void testExtraOption()\n    {\n        String[] args = new String[] { \"-adbtoast\",\n                                       \"foo\", \"bar\" };\n\n        boolean caught = false;\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 3);\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            caught = true;\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n        assertTrue( \"Confirm UnrecognizedOptionException caught\", caught );\n    }",
        "begin_line": 126,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 129,col 54)",
            "(line 131,col 9)-(line 131,col 31)",
            "(line 133,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 150,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testMissingArg()",
        "snippet": "    public void testMissingArg()\n    {\n\n        String[] args = new String[] { \"-acb\" };\n\n        boolean caught = false;\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n        }\n        catch (MissingArgumentException e)\n        {\n            caught = true;\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n\n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 153,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 48)",
            "(line 158,col 9)-(line 158,col 31)",
            "(line 160,col 9)-(line 171,col 9)",
            "(line 173,col 9)-(line 173,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testStop()",
        "snippet": "    public void testStop()\n    {\n        String[] args = new String[] { \"-c\",\n                                       \"foober\",\n                                       \"-btoast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args, true);\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 176,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 180,col 51)",
            "(line 182,col 9)-(line 191,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testMultiple()",
        "snippet": "    public void testMultiple()\n    {\n        String[] args = new String[] { \"-c\",\n                                       \"foobar\",\n                                       \"-btoast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args, true);\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n\n            cl = _parser.parse(_options, cl.getArgs() );\n\n            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 194,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 198,col 51)",
            "(line 200,col 9)-(line 217,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testMultipleWithLong()",
        "snippet": "    public void testMultipleWithLong()\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"foobar\",\n                                       \"--bfile\", \"toast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options,args,\n                                            true);\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n\n            cl = _parser.parse(_options, cl.getArgs() );\n\n            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 220,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 224,col 60)",
            "(line 226,col 9)-(line 244,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testDoubleDash()",
        "snippet": "    public void testDoubleDash()\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"--\",\n                                       \"-b\", \"toast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n            assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 247,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 251,col 55)",
            "(line 253,col 9)-(line 265,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ParseTest.java",
        "signature": "org.apache.commons.cli.ParseTest.testSingleDash()",
        "snippet": "    public void testSingleDash()\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"-b\", \"-\",\n                                       \"-a\",\n                                       \"-\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n\n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n            assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n            assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n        \n    }",
        "begin_line": 268,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 273,col 45)",
            "(line 275,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite(BuildTest.class); \n    }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.BuildTest(java.lang.String)",
        "snippet": "    public BuildTest(String name)\n    {\n        super(name);\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.setUp()",
        "snippet": "    public void setUp()\n    {\n\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.testSimple()",
        "snippet": "    public void testSimple()\n    {\n        Options opts = new Options();\n        \n        opts.addOption(\"a\",\n                       false,\n                       \"toggle -a\");\n\n        opts.addOption(\"b\",\n                       true,\n                       \"toggle -b\");\n    }",
        "begin_line": 45,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 37)",
            "(line 49,col 9)-(line 51,col 36)",
            "(line 53,col 9)-(line 55,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.testDuplicateSimple()",
        "snippet": "    public void testDuplicateSimple()\n    {\n        Options opts = new Options();\n        opts.addOption(\"a\",\n                       false,\n                       \"toggle -a\");\n\n        opts.addOption(\"a\",\n                       true,\n                       \"toggle -a*\");\n        \n        assertEquals( \"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription() );\n    }",
        "begin_line": 58,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 37)",
            "(line 61,col 9)-(line 63,col 36)",
            "(line 65,col 9)-(line 67,col 37)",
            "(line 69,col 9)-(line 69,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.testLong()",
        "snippet": "    public void testLong()\n    {\n        Options opts = new Options();\n        \n        opts.addOption(\"a\",\n                       \"--a\",\n                       false,\n                       \"toggle -a\");\n\n        opts.addOption(\"b\",\n                       \"--b\",\n                       true,\n                       \"set -b\");\n\n    }",
        "begin_line": 72,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 37)",
            "(line 76,col 9)-(line 79,col 36)",
            "(line 81,col 9)-(line 84,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BuildTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/BuildTest.java",
        "signature": "org.apache.commons.cli.BuildTest.testDuplicateLong()",
        "snippet": "    public void testDuplicateLong()\n    {\n        Options opts = new Options();\n        opts.addOption(\"a\",\n                       \"--a\",\n                       false,\n                       \"toggle -a\");\n\n        opts.addOption(\"a\",\n                       \"--a\",\n                       false,\n                       \"toggle -a*\");\n        assertEquals( \"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription() );\n    }",
        "begin_line": 88,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 37)",
            "(line 91,col 9)-(line 94,col 36)",
            "(line 96,col 9)-(line 99,col 37)",
            "(line 100,col 9)-(line 100,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.ArgumentIsOptionTest(java.lang.String)",
        "snippet": "    public ArgumentIsOptionTest(String name) {\n        super(name);\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(ArgumentIsOptionTest.class);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.setUp()",
        "snippet": "    public void setUp() {\n        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\",\n                true, \"Option accepts argument\");\n\n        parser = new PosixParser();\n    }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 38,col 49)",
            "(line 40,col 9)-(line 40,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.tearDown()",
        "snippet": "    public void tearDown() {\n    }",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.testOptionAndOptionWithArgument()",
        "snippet": "    public void testOptionAndOptionWithArgument() {\n        String[] args = new String[] {\n                \"-p\",\n                \"-attr\",\n                \"p\"\n            };\n\n        try {\n            CommandLine cl = parser.parse(options, args);\n            assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n            assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n            assertTrue(\"Confirm arg of -attr\",\n                cl.getOptionValue(\"attr\").equals(\"p\"));\n            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n        }\n        catch (ParseException e) {\n            fail(e.toString());\n        }\n    }",
        "begin_line": 46,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 51,col 14)",
            "(line 53,col 9)-(line 63,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.testOptionWithArgument()",
        "snippet": "    public void testOptionWithArgument() {\n        String[] args = new String[] {\n                \"-attr\",\n                \"p\"\n            };\n\n        try {\n            CommandLine cl = parser.parse(options, args);\n            assertFalse(\"Confirm -p is set\", cl.hasOption(\"p\"));\n            assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n            assertTrue(\"Confirm arg of -attr\",\n                cl.getOptionValue(\"attr\").equals(\"p\"));\n            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n        }\n        catch (ParseException e) {\n            fail(e.toString());\n        }\n    }",
        "begin_line": 66,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 70,col 14)",
            "(line 72,col 9)-(line 82,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.testOption()",
        "snippet": "    public void testOption() {\n        String[] args = new String[] {\n                \"-p\"\n            };\n\n        try {\n            CommandLine cl = parser.parse(options, args);\n            assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n            assertFalse(\"Confirm -attr is not set\", cl.hasOption(\"attr\"));\n            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n        }\n        catch (ParseException e) {\n            fail(e.toString());\n        }\n    }",
        "begin_line": 85,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 88,col 14)",
            "(line 90,col 9)-(line 98,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite( GnuParseTest.class ); \n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.GnuParseTest(java.lang.String)",
        "snippet": "    public GnuParseTest( String name )\n    {\n        super( name );\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        _options = new Options()\n            .addOption(\"a\",\n                       \"enable-a\",\n                       false,\n                       \"turn [a] on or off\")\n            .addOption(\"b\",\n                       \"bfile\",\n                       true,\n                       \"set the value of [b]\")\n            .addOption(\"c\",\n                       \"copt\",\n                       false,\n                       \"turn [c] on or off\");\n\n        _parser = new GnuParser( );\n    }",
        "begin_line": 37,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 51,col 45)",
            "(line 53,col 9)-(line 53,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testSimpleShort()",
        "snippet": "    public void testSimpleShort()\n    {\n        String[] args = new String[] { \"-a\",\n                                       \"-b\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 61,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 65,col 54)",
            "(line 67,col 9)-(line 79,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testSimpleLong()",
        "snippet": "    public void testSimpleLong()\n    {\n        String[] args = new String[] { \"--enable-a\",\n                                       \"--bfile\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n        } \n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 82,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 54)",
            "(line 88,col 9)-(line 100,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testExtraOption()",
        "snippet": "    public void testExtraOption()\n    {\n        String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        boolean caught = false;\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n            \n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 3);\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            caught = true;\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n        assertTrue( \"Confirm UnrecognizedOptionException caught\", caught );\n    }",
        "begin_line": 103,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 106,col 54)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 110,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testMissingArg()",
        "snippet": "    public void testMissingArg()\n    {\n\n        String[] args = new String[] { \"-b\" };\n\n        boolean caught = false;\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n        }\n        catch (MissingArgumentException e)\n        {\n            caught = true;\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n\n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 130,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 46)",
            "(line 135,col 9)-(line 135,col 31)",
            "(line 137,col 9)-(line 148,col 9)",
            "(line 150,col 9)-(line 150,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testStop()",
        "snippet": "    public void testStop()\n    {\n        String[] args = new String[] { \"-c\",\n                                       \"foober\",\n                                       \"-b\",\n                                       \"toast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args, true);\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 153,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 158,col 49)",
            "(line 160,col 9)-(line 169,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testMultiple()",
        "snippet": "    public void testMultiple()\n    {\n        String[] args = new String[] { \"-c\",\n                                       \"foobar\",\n                                       \"-b\",\n                                       \"toast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args, true);\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n\n            cl = _parser.parse(_options, cl.getArgs() );\n\n            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 172,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 177,col 49)",
            "(line 179,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testMultipleWithLong()",
        "snippet": "    public void testMultipleWithLong()\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"foobar\",\n                                       \"--bfile\", \"toast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options,args,\n                                            true);\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n\n            cl = _parser.parse(_options, cl.getArgs() );\n\n            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 199,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 203,col 60)",
            "(line 205,col 9)-(line 223,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testDoubleDash()",
        "snippet": "    public void testDoubleDash()\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"--\",\n                                       \"-b\", \"toast\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n\n            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n            assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n            assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 226,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 230,col 55)",
            "(line 232,col 9)-(line 244,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParseTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/GnuParseTest.java",
        "signature": "org.apache.commons.cli.GnuParseTest.testSingleDash()",
        "snippet": "    public void testSingleDash()\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"-b\", \"-\",\n                                       \"-a\",\n                                       \"-\" };\n\n        try\n        {\n            CommandLine cl = _parser.parse(_options, args);\n\n            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n            assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n            assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n        \n    }",
        "begin_line": 247,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 252,col 45)",
            "(line 254,col 9)-(line 267,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.main(java.lang.String[])",
        "snippet": "   public static void main( String[] args )\n   {\n      String[] testName = { TestHelpFormatter.class.getName() };\n      junit.textui.TestRunner.main(testName);\n   }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 7)-(line 35,col 64)",
            "(line 36,col 7)-(line 36,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.suite()",
        "snippet": "   public static TestSuite suite()\n   {\n      return new TestSuite(TestHelpFormatter.class);\n   }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 7)-(line 41,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.TestHelpFormatter(java.lang.String)",
        "snippet": "   public TestHelpFormatter( String s )\n   {\n      super( s );\n   }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 7)-(line 46,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.testFindWrapPos()",
        "snippet": "   public void testFindWrapPos()\n      throws Exception\n   {\n      HelpFormatter hf = new HelpFormatter();\n\n      String text = \"This is a test.\";\n      //text width should be max 8; the wrap postition is 7\n      assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n      //starting from 8 must give -1 - the wrap pos is after end\n      assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n      //if there is no a good position before width to make a wrapping look for the next one\n      text = \"aaaa aa\";\n      assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n   }",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 52,col 7)-(line 52,col 45)",
            "(line 54,col 7)-(line 54,col 38)",
            "(line 56,col 7)-(line 56,col 67)",
            "(line 58,col 7)-(line 58,col 70)",
            "(line 60,col 7)-(line 60,col 23)",
            "(line 61,col 7)-(line 61,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.testPrintWrapped()",
        "snippet": "   public void testPrintWrapped()\n      throws Exception\n   {\n      StringBuffer sb = new StringBuffer();\n      HelpFormatter hf = new HelpFormatter();\n\n      String text = \"This is a test.\";\n      String expected;\n\n      expected = \"This is a\" + hf.getNewLine() + \"test.\";\n      hf.renderWrappedText(sb, 12, 0, text);\n      assertEquals(\"single line text\", expected, sb.toString());\n\n      sb.setLength(0);\n      expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n      hf.renderWrappedText(sb, 12, 4, text);\n      assertEquals(\"single line padded text\", expected, sb.toString());\n\n      text =\n         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n         \"aaaaaa\" + hf.getNewLine() +\n         \"aaaaa\";\n\n      expected = text;\n      sb.setLength(0);\n      hf.renderWrappedText(sb, 16, 0, text);\n      assertEquals(\"multi line text\", expected, sb.toString());\n\n      expected =\n         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n         \"    aaaaaa\" + hf.getNewLine() +\n         \"    aaaaa\";\n      sb.setLength(0);\n      hf.renderWrappedText(sb, 16, 4, text);\n      assertEquals(\"multi-line padded text\", expected, sb.toString());\n   }",
        "begin_line": 64,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 67,col 7)-(line 67,col 43)",
            "(line 68,col 7)-(line 68,col 45)",
            "(line 70,col 7)-(line 70,col 38)",
            "(line 71,col 7)-(line 71,col 22)",
            "(line 73,col 7)-(line 73,col 57)",
            "(line 74,col 7)-(line 74,col 44)",
            "(line 75,col 7)-(line 75,col 64)",
            "(line 77,col 7)-(line 77,col 22)",
            "(line 78,col 7)-(line 78,col 61)",
            "(line 79,col 7)-(line 79,col 44)",
            "(line 80,col 7)-(line 80,col 71)",
            "(line 82,col 7)-(line 85,col 17)",
            "(line 87,col 7)-(line 87,col 22)",
            "(line 88,col 7)-(line 88,col 22)",
            "(line 89,col 7)-(line 89,col 44)",
            "(line 90,col 7)-(line 90,col 63)",
            "(line 92,col 7)-(line 95,col 21)",
            "(line 96,col 7)-(line 96,col 22)",
            "(line 97,col 7)-(line 97,col 44)",
            "(line 98,col 7)-(line 98,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.testPrintOptions()",
        "snippet": "   public void testPrintOptions()\n   throws Exception\n   {\n       StringBuffer sb = new StringBuffer();\n       HelpFormatter hf = new HelpFormatter();\n       final int leftPad = 1;\n       final int descPad = 3;\n       final String lpad = hf.createPadding(leftPad);\n       final String dpad = hf.createPadding(descPad);\n       Options options = null;\n       String expected = null;\n\n       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n       expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n       hf.renderOptions(sb, 60, options, leftPad, descPad);\n       assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n\n       int nextLineTabStop = leftPad+descPad+\"-a\".length();\n       expected =\n           lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n           hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n       sb.setLength(0);\n       hf.renderOptions(sb, nextLineTabStop+17, options, leftPad, descPad);\n       assertEquals(\"simple wrapped option\", expected, sb.toString());\n\n\n       options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n       expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n       sb.setLength(0);\n       hf.renderOptions(sb, 60, options, leftPad, descPad);\n       assertEquals(\"long non-wrapped option\", expected, sb.toString());\n\n       nextLineTabStop = leftPad+descPad+\"-a,--aaa\".length();\n       expected =\n           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n           hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n       sb.setLength(0);\n       hf.renderOptions(sb, 25, options, leftPad, descPad);\n       assertEquals(\"long wrapped option\", expected, sb.toString());\n\n       options = new Options().\n           addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n           addOption(\"b\", false, \"feeee eeee eeee eeee\");\n       expected =\n           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n           hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n           lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n           hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n       sb.setLength(0);\n       hf.renderOptions(sb, 25, options, leftPad, descPad);\n       assertEquals(\"multiple wrapped options\", expected, sb.toString());\n   }",
        "begin_line": 101,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 104,col 8)-(line 104,col 44)",
            "(line 105,col 8)-(line 105,col 46)",
            "(line 106,col 8)-(line 106,col 29)",
            "(line 107,col 8)-(line 107,col 29)",
            "(line 108,col 8)-(line 108,col 53)",
            "(line 109,col 8)-(line 109,col 53)",
            "(line 110,col 8)-(line 110,col 30)",
            "(line 111,col 8)-(line 111,col 30)",
            "(line 113,col 8)-(line 113,col 81)",
            "(line 114,col 8)-(line 114,col 66)",
            "(line 115,col 8)-(line 115,col 59)",
            "(line 116,col 8)-(line 116,col 74)",
            "(line 118,col 8)-(line 118,col 59)",
            "(line 119,col 8)-(line 121,col 59)",
            "(line 122,col 8)-(line 122,col 23)",
            "(line 123,col 8)-(line 123,col 75)",
            "(line 124,col 8)-(line 124,col 70)",
            "(line 127,col 8)-(line 127,col 83)",
            "(line 128,col 8)-(line 128,col 67)",
            "(line 129,col 8)-(line 129,col 23)",
            "(line 130,col 8)-(line 130,col 59)",
            "(line 131,col 8)-(line 131,col 72)",
            "(line 133,col 8)-(line 133,col 61)",
            "(line 134,col 8)-(line 136,col 59)",
            "(line 137,col 8)-(line 137,col 23)",
            "(line 138,col 8)-(line 138,col 59)",
            "(line 139,col 8)-(line 139,col 68)",
            "(line 141,col 8)-(line 143,col 57)",
            "(line 144,col 8)-(line 148,col 59)",
            "(line 149,col 8)-(line 149,col 23)",
            "(line 150,col 8)-(line 150,col 59)",
            "(line 151,col 8)-(line 151,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.TestHelpFormatter",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/TestHelpFormatter.java",
        "signature": "org.apache.commons.cli.TestHelpFormatter.testAutomaticUsage()",
        "snippet": "   public void testAutomaticUsage() {}",
        "begin_line": 154,
        "end_line": 154,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite(ApplicationTest.class); \n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.ApplicationTest(java.lang.String)",
        "snippet": "    public ApplicationTest(String name)\n    {\n        super(name);\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testLs()",
        "snippet": "    public void testLs() {\n        // create the command line parser\n        CommandLineParser parser = new PosixParser();\n        Options options = new Options();\n        options.addOption( \"a\", \"all\", false, \"do not hide entries starting with .\" );\n        options.addOption( \"A\", \"almost-all\", false, \"do not list implied . and ..\" );\n        options.addOption( \"b\", \"escape\", false, \"print octal escapes for nongraphic characters\" );\n        options.addOption( OptionBuilder.withLongOpt( \"block-size\" )\n                                        .withDescription( \"use SIZE-byte blocks\" )\n                                        .withValueSeparator( '=' )\n                                        .hasArg()\n                                        .create() );\n        options.addOption( \"B\", \"ignore-backups\", false, \"do not list implied entried ending with ~\");\n        options.addOption( \"c\", false, \"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\" );\n        options.addOption( \"C\", false, \"list entries by columns\" );\n\n        String[] args = new String[]{ \"--block-size=10\" };\n\n        try {\n            CommandLine line = parser.parse( options, args );\n            assertTrue( line.hasOption( \"block-size\" ) );\n            assertEquals( line.getOptionValue( \"block-size\" ), \"10\" );\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected exception:\" + exp.getMessage() );\n        }\n    }",
        "begin_line": 52,
        "end_line": 78,
        "comment": "\n     *\t\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 40)",
            "(line 56,col 9)-(line 56,col 86)",
            "(line 57,col 9)-(line 57,col 86)",
            "(line 58,col 9)-(line 58,col 99)",
            "(line 59,col 9)-(line 63,col 52)",
            "(line 64,col 9)-(line 64,col 102)",
            "(line 65,col 9)-(line 65,col 194)",
            "(line 66,col 9)-(line 66,col 67)",
            "(line 68,col 9)-(line 68,col 58)",
            "(line 70,col 9)-(line 77,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testAnt()",
        "snippet": "    public void testAnt() {\n        // use the GNU parser\n        CommandLineParser parser = new GnuParser( );\n        Options options = new Options();\n        options.addOption( \"help\", false, \"print this message\" );\n        options.addOption( \"projecthelp\", false, \"print project help information\" );\n        options.addOption( \"version\", false, \"print the version information and exit\" );\n        options.addOption( \"quiet\", false, \"be extra quiet\" );\n        options.addOption( \"verbose\", false, \"be extra verbose\" );\n        options.addOption( \"debug\", false, \"print debug information\" );\n        options.addOption( \"version\", false, \"produce logging information without adornments\" );\n        options.addOption( \"logfile\", true, \"use given file for log\" );\n        options.addOption( \"logger\", true, \"the class which is to perform the logging\" );\n        options.addOption( \"listener\", true, \"add an instance of a class as a project listener\" );\n        options.addOption( \"buildfile\", true, \"use given buildfile\" );\n        options.addOption( OptionBuilder.withDescription( \"use value for given property\" )\n                                        .hasArgs()\n                                        .withValueSeparator()\n                                        .create( 'D' ) );\n                           //, null, true, , false, true );\n        options.addOption( \"find\", true, \"search for buildfile towards the root of the filesystem and use it\" );\n\n        String[] args = new String[]{ \"-buildfile\", \"mybuild.xml\",\n            \"-Dproperty=value\", \"-Dproperty1=value1\",\n            \"-projecthelp\" };\n\n        try {\n            CommandLine line = parser.parse( options, args );\n\n            // check multiple values\n            String[] opts = line.getOptionValues( \"D\" );\n            assertEquals( \"property\", opts[0] );\n            assertEquals( \"value\", opts[1] );\n            assertEquals( \"property1\", opts[2] );\n            assertEquals( \"value1\", opts[3] );\n\n            // check single value\n            assertEquals( line.getOptionValue( \"buildfile\"), \"mybuild.xml\" );\n\n            // check option\n            assertTrue( line.hasOption( \"projecthelp\") );\n        }\n        catch( ParseException exp ) {\n            fail( \"Unexpected exception:\" + exp.getMessage() );\n        }\n\n    }",
        "begin_line": 83,
        "end_line": 129,
        "comment": "\n     * Ant test\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 52)",
            "(line 86,col 9)-(line 86,col 40)",
            "(line 87,col 9)-(line 87,col 65)",
            "(line 88,col 9)-(line 88,col 84)",
            "(line 89,col 9)-(line 89,col 88)",
            "(line 90,col 9)-(line 90,col 62)",
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 71)",
            "(line 93,col 9)-(line 93,col 96)",
            "(line 94,col 9)-(line 94,col 71)",
            "(line 95,col 9)-(line 95,col 89)",
            "(line 96,col 9)-(line 96,col 98)",
            "(line 97,col 9)-(line 97,col 70)",
            "(line 98,col 9)-(line 101,col 57)",
            "(line 103,col 9)-(line 103,col 112)",
            "(line 105,col 9)-(line 107,col 29)",
            "(line 109,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.UtilTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/UtilTest.java",
        "signature": "org.apache.commons.cli.UtilTest.testStripLeadingHyphens()",
        "snippet": "    public void testStripLeadingHyphens() {\n        assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n        assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\n        assertNull(Util.stripLeadingHyphens(null));\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 58)",
            "(line 27,col 9)-(line 27,col 63)",
            "(line 28,col 9)-(line 28,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.suite()",
        "snippet": "    public static Test suite() \n    { \n        return new TestSuite ( OptionsTest.class ); \n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.OptionsTest(java.lang.String)",
        "snippet": "    public OptionsTest( String name )\n    {\n        super( name );\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.setUp()",
        "snippet": "    public void setUp()\n    {\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testHelpOptions()",
        "snippet": "    public void testHelpOptions(){\n        \n        Option longOnly1 = OptionBuilder\n            .withLongOpt(\"long-only1\")\n            .create();\n        \n        Option longOnly2 = OptionBuilder\n            .withLongOpt(\"long-only2\")\n            .create();\n                \n        Option shortOnly1 = OptionBuilder\n            .create(\"1\");\n                \n        Option shortOnly2 = OptionBuilder\n            .create(\"2\");\n                \n        Option bothA = OptionBuilder\n            .withLongOpt(\"bothA\")\n            .create(\"a\");\n                \n        Option bothB = OptionBuilder\n            .withLongOpt(\"bothB\")\n            .create(\"b\");\n        \n        Options options = new Options();\n        options.addOption(longOnly1);\n        options.addOption(longOnly2);\n        options.addOption(shortOnly1);\n        options.addOption(shortOnly2);\n        options.addOption(bothA);\n        options.addOption(bothB);\n        \n        Collection allOptions = new ArrayList();\n        allOptions.add(longOnly1);\n        allOptions.add(longOnly2);\n        allOptions.add(shortOnly1);\n        allOptions.add(shortOnly2);\n        allOptions.add(bothA);\n        allOptions.add(bothB);\n        \n        Collection helpOptions = options.helpOptions();\n        \n        assertTrue(\"Everything in all should be in help\",helpOptions.containsAll(allOptions));\n        assertTrue(\"Everything in help should be in all\",allOptions.containsAll(helpOptions));        \n    }",
        "begin_line": 51,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 55,col 22)",
            "(line 57,col 9)-(line 59,col 22)",
            "(line 61,col 9)-(line 62,col 25)",
            "(line 64,col 9)-(line 65,col 25)",
            "(line 67,col 9)-(line 69,col 25)",
            "(line 71,col 9)-(line 73,col 25)",
            "(line 75,col 9)-(line 75,col 40)",
            "(line 76,col 9)-(line 76,col 37)",
            "(line 77,col 9)-(line 77,col 37)",
            "(line 78,col 9)-(line 78,col 38)",
            "(line 79,col 9)-(line 79,col 38)",
            "(line 80,col 9)-(line 80,col 33)",
            "(line 81,col 9)-(line 81,col 33)",
            "(line 83,col 9)-(line 83,col 48)",
            "(line 84,col 9)-(line 84,col 34)",
            "(line 85,col 9)-(line 85,col 34)",
            "(line 86,col 9)-(line 86,col 35)",
            "(line 87,col 9)-(line 87,col 35)",
            "(line 88,col 9)-(line 88,col 30)",
            "(line 89,col 9)-(line 89,col 30)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 93,col 9)-(line 93,col 94)",
            "(line 94,col 9)-(line 94,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testMissingOptionException()",
        "snippet": "    public void testMissingOptionException() throws ParseException {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        } catch (MissingOptionException e) {\n            assertEquals(\"Missing required option: f\", e.getMessage());\n        }\n    }",
        "begin_line": 97,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 66)",
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testMissingOptionsException()",
        "snippet": "    public void testMissingOptionsException() throws ParseException {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        } catch (MissingOptionException e) {\n            assertEquals(\"Missing required options: fx\", e.getMessage());\n        }\n    }",
        "begin_line": 108,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 40)",
            "(line 110,col 9)-(line 110,col 66)",
            "(line 111,col 9)-(line 111,col 66)",
            "(line 112,col 9)-(line 117,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.OptionBuilderTest(java.lang.String)",
        "snippet": "    public OptionBuilderTest( String name ) {\n        super( name );\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite( OptionBuilderTest.class ); \n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.main(java.lang.String[])",
        "snippet": "    public static void main( String args[] ) { \n        TestRunner.run( suite() );\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testCompleteOption()",
        "snippet": "    public void testCompleteOption( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( new Float( 10 ) )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        assertEquals( \"s\", simple.getOpt() );\n        assertEquals( \"simple option\", simple.getLongOpt() );\n        assertEquals( \"this is a simple option\", simple.getDescription() );\n        assertEquals( simple.getType().getClass(), Float.class );\n        assertTrue( simple.hasArg() );\n        assertTrue( simple.isRequired() );\n        assertTrue( simple.hasArgs() );\n    }",
        "begin_line": 39,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 46,col 52)",
            "(line 48,col 9)-(line 48,col 45)",
            "(line 49,col 9)-(line 49,col 61)",
            "(line 50,col 9)-(line 50,col 75)",
            "(line 51,col 9)-(line 51,col 65)",
            "(line 52,col 9)-(line 52,col 38)",
            "(line 53,col 9)-(line 53,col 42)",
            "(line 54,col 9)-(line 54,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions()",
        "snippet": "    public void testTwoCompleteOptions( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( new Float( 10 ) )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        assertEquals( \"s\", simple.getOpt() );\n        assertEquals( \"simple option\", simple.getLongOpt() );\n        assertEquals( \"this is a simple option\", simple.getDescription() );\n        assertEquals( simple.getType().getClass(), Float.class );\n        assertTrue( simple.hasArg() );\n        assertTrue( simple.isRequired() );\n        assertTrue( simple.hasArgs() );\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        assertEquals( \"d\", simple.getOpt() );\n        assertEquals( \"dimple option\", simple.getLongOpt() );\n        assertEquals( \"this is a dimple option\", simple.getDescription() );\n        assertNull( simple.getType() );\n        assertTrue( simple.hasArg() );\n        assertTrue( !simple.isRequired() );\n        assertTrue( !simple.hasArgs() );\n    }",
        "begin_line": 57,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 64,col 52)",
            "(line 66,col 9)-(line 66,col 45)",
            "(line 67,col 9)-(line 67,col 61)",
            "(line 68,col 9)-(line 68,col 75)",
            "(line 69,col 9)-(line 69,col 65)",
            "(line 70,col 9)-(line 70,col 38)",
            "(line 71,col 9)-(line 71,col 42)",
            "(line 72,col 9)-(line 72,col 39)",
            "(line 74,col 9)-(line 77,col 45)",
            "(line 79,col 9)-(line 79,col 45)",
            "(line 80,col 9)-(line 80,col 61)",
            "(line 81,col 9)-(line 81,col 75)",
            "(line 82,col 9)-(line 82,col 39)",
            "(line 83,col 9)-(line 83,col 38)",
            "(line 84,col 9)-(line 84,col 43)",
            "(line 85,col 9)-(line 85,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testBaseOptionCharOpt()",
        "snippet": "    public void testBaseOptionCharOpt() {\n        Option base = OptionBuilder.withDescription( \"option description\")\n                                   .create( 'o' );\n\n        assertEquals( \"o\", base.getOpt() );\n        assertEquals( \"option description\", base.getDescription() );\n        assertTrue( !base.hasArg() );\n    }",
        "begin_line": 88,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 90,col 50)",
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 68)",
            "(line 94,col 9)-(line 94,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testBaseOptionStringOpt()",
        "snippet": "    public void testBaseOptionStringOpt() {\n        Option base = OptionBuilder.withDescription( \"option description\")\n                                   .create( \"o\" );\n\n        assertEquals( \"o\", base.getOpt() );\n        assertEquals( \"option description\", base.getDescription() );\n        assertTrue( !base.hasArg() );\n    }",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 99,col 50)",
            "(line 101,col 9)-(line 101,col 43)",
            "(line 102,col 9)-(line 102,col 68)",
            "(line 103,col 9)-(line 103,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testSpecialOptChars()",
        "snippet": "    public void testSpecialOptChars() {\n\n        // '?'\n        try {\n            Option opt = OptionBuilder.withDescription( \"help options\" )\n                                      .create( '?' );\n            assertEquals( \"?\", opt.getOpt() );\n        }\n        catch( IllegalArgumentException arg ) {\n            fail( \"IllegalArgumentException caught\" );\n        }\n\n        // '@'\n        try {\n            Option opt = OptionBuilder.withDescription( \"read from stdin\" )\n                                      .create( '@' );\n            assertEquals( \"@\", opt.getOpt() );\n        }\n        catch( IllegalArgumentException arg ) {\n            fail( \"IllegalArgumentException caught\" );\n        }\n    }",
        "begin_line": 106,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 116,col 9)",
            "(line 119,col 9)-(line 126,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testOptionArgNumbers()",
        "snippet": "    public void testOptionArgNumbers() {\n        Option opt = OptionBuilder.withDescription( \"option description\" )\n                                  .hasArgs( 2 )\n                                  .create( 'o' );\n        assertEquals( 2, opt.getArgs() );\n    }",
        "begin_line": 129,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 132,col 49)",
            "(line 133,col 9)-(line 133,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testIllegalOptions()",
        "snippet": "    public void testIllegalOptions() {\n        // bad single character option\n        try {\n            Option opt = OptionBuilder.withDescription( \"option description\" )\n                                      .create( '\"' );\n            fail( \"IllegalArgumentException not caught\" );\n        }\n        catch( IllegalArgumentException exp ) {\n            // success\n        }\n\n        // bad character in option string\n        try {\n            Option opt = OptionBuilder.create( \"opt`\" );\n            fail( \"IllegalArgumentException not caught\" );\n        }\n        catch( IllegalArgumentException exp ) {\n            // success\n        }\n\n        // valid option \n        try {\n            Option opt = OptionBuilder.create( \"opt\" );\n            // success\n        }\n        catch( IllegalArgumentException exp ) {\n            fail( \"IllegalArgumentException caught\" );\n        }\n    }",
        "begin_line": 136,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 145,col 9)",
            "(line 148,col 9)-(line 154,col 9)",
            "(line 157,col 9)-(line 163,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testClear()",
        "snippet": "   public void testClear() {\n       Option option = new Option(\"x\", true, \"\");\n       assertEquals(0, option.getValuesList().size());\n       option.addValue(\"a\");\n       assertEquals(1, option.getValuesList().size());\n       option.clearValues();\n       assertEquals(0, option.getValuesList().size());\n   }",
        "begin_line": 26,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 27,col 8)-(line 27,col 49)",
            "(line 28,col 8)-(line 28,col 54)",
            "(line 29,col 8)-(line 29,col 28)",
            "(line 30,col 8)-(line 30,col 54)",
            "(line 31,col 8)-(line 31,col 28)",
            "(line 32,col 8)-(line 32,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterExamples",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/HelpFormatterExamples.java",
        "signature": "org.apache.commons.cli.HelpFormatterExamples.main(java.lang.String[])",
        "snippet": "   public static void main( String[] args )\n   {\n      System.out.println(\"\\n#\\n# 'man' example\\n#\");\n      manExample();\n/*\n      System.out.println(\"\\n#\\n# 'bzip2' example\\n#\");\n      bzip2Example();\n      System.out.println(\"\\n#\\n# 'ls' example\\n#\");\n      lsExample();\n*/\n   }",
        "begin_line": 30,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 32,col 7)-(line 32,col 52)",
            "(line 33,col 7)-(line 33,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterExamples",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/HelpFormatterExamples.java",
        "signature": "org.apache.commons.cli.HelpFormatterExamples.manExample()",
        "snippet": "   static void manExample()\n   {\n      String cmdLine =\n         \"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \" +\n         \"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\";\n      Options opts =\n         new Options().\n         addOption(\"a\", \"all\",            false, \"find all matching manual pages.\").\n         addOption(\"d\", \"debug\",          false, \"emit debugging messages.\").\n         addOption(\"e\", \"extension\",      false, \"limit search to extension type 'extension'.\").\n         addOption(\"f\", \"whatis\",         false, \"equivalent to whatis.\").\n         addOption(\"k\", \"apropos\",        false, \"equivalent to apropos.\").\n         addOption(\"w\", \"location\",       false, \"print physical location of man page(s).\").\n         addOption(\"l\", \"local-file\",     false, \"interpret 'page' argument(s) as local filename(s)\").\n         addOption(\"u\", \"update\",         false, \"force a cache consistency check.\").\n         //FIXME - should generate -r,--prompt string\n         addOption(\"r\", \"prompt\",         true,  \"provide 'less' pager with prompt.\").\n         addOption(\"c\", \"catman\",         false, \"used by catman to reformat out of date cat pages.\").\n         addOption(\"7\", \"ascii\",          false, \"display ASCII translation or certain latin1 chars.\").\n         addOption(\"t\", \"troff\",          false, \"use troff format pages.\").\n         //FIXME - should generate -T,--troff-device device\n         addOption(\"T\", \"troff-device\",   true,  \"use groff with selected device.\").\n         addOption(\"Z\", \"ditroff\",        false, \"use groff with selected device.\").\n         addOption(\"D\", \"default\",        false, \"reset all options to their default values.\").\n         //FIXME - should generate -M,--manpath path\n         addOption(\"M\", \"manpath\",        true,  \"set search path for manual pages to 'path'.\").\n         //FIXME - should generate -P,--pager pager\n         addOption(\"P\", \"pager\",          true,  \"use program 'pager' to display output.\").\n         //FIXME - should generate -S,--sections list\n         addOption(\"S\", \"sections\",       true,  \"use colon separated section list.\").\n         //FIXME - should generate -m,--systems system\n         addOption(\"m\", \"systems\",        true,  \"search for man pages from other unix system(s).\").\n         //FIXME - should generate -L,--locale locale\n         addOption(\"L\", \"locale\",         true,  \"defaine the locale for this particular man search.\").\n         //FIXME - should generate -p,--preprocessor string\n         addOption(\"p\", \"preprocessor\",   true,  \"string indicates which preprocessor to run.\\n\" +\n                                                 \" e - [n]eqn  p - pic     t - tbl\\n\" +\n                                                 \" g - grap    r - refer   v - vgrind\").\n         addOption(\"V\", \"version\",        false, \"show version.\").\n         addOption(\"h\", \"help\",           false, \"show this usage message.\");\n\n      HelpFormatter hf = new HelpFormatter();\n      //hf.printHelp(cmdLine, opts);\n      hf.printHelp(60, cmdLine, null, opts, null);\n   }",
        "begin_line": 42,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 44,col 7)-(line 46,col 77)",
            "(line 47,col 7)-(line 81,col 77)",
            "(line 83,col 7)-(line 83,col 45)",
            "(line 85,col 7)-(line 85,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterExamples",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/HelpFormatterExamples.java",
        "signature": "org.apache.commons.cli.HelpFormatterExamples.bzip2Example()",
        "snippet": "   static void bzip2Example()\n   {\n      System.out.println( \"Coming soon\" );\n   }",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 7)-(line 90,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterExamples",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/HelpFormatterExamples.java",
        "signature": "org.apache.commons.cli.HelpFormatterExamples.lsExample()",
        "snippet": "   static void lsExample()\n   {\n      System.out.println( \"Coming soon\" );\n   }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 7)-(line 95,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.suite()",
        "snippet": "   public static TestSuite suite()\n   {\n      return new TestSuite(PatternOptionBuilderTest.class);\n   }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 7)-(line 33,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern()",
        "snippet": "   public void testSimplePattern()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n           assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n           assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n           assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n\n           // tests the char methods of CommandLine that delegate to the String methods\n           assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n           assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n           assertTrue(\"boolean true flag c\", line.hasOption('c'));\n           assertFalse(\"boolean false flag d\", line.hasOption('d'));\n           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           fail( exp.getMessage() );\n       }\n       catch( java.net.MalformedURLException exp ) {\n           fail( exp.getMessage() );\n       }\n   }",
        "begin_line": 36,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 38,col 8)-(line 75,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.suite()",
        "snippet": "    public static Test suite() \n    { \n        return new TestSuite ( OptionGroupTest.class ); \n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.OptionGroupTest(java.lang.String)",
        "snippet": "    public OptionGroupTest( String name )\n    {\n        super( name );\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        Option file = new Option( \"f\", \"file\", false, \"file to process\" );\n        Option dir = new Option( \"d\", \"directory\", false, \"directory to process\" );\n        OptionGroup group = new OptionGroup();\n        group.addOption( file );\n        group.addOption( dir );\n        _options = new Options().addOptionGroup( group );\n\n        Option section = new Option( \"s\", \"section\", false, \"section to process\" );\n        Option chapter = new Option( \"c\", \"chapter\", false, \"chapter to process\" );\n        OptionGroup group2 = new OptionGroup();\n        group2.addOption( section );\n        group2.addOption( chapter );\n\n        _options.addOptionGroup( group2 );\n\n        Option importOpt = new Option( null, \"import\", false, \"section to process\" );\n        Option exportOpt = new Option( null, \"export\", false, \"chapter to process\" );\n        OptionGroup group3 = new OptionGroup();\n        group3.addOption( importOpt );\n        group3.addOption( exportOpt );\n        _options.addOptionGroup( group3 );\n\n        _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n    }",
        "begin_line": 44,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 74)",
            "(line 47,col 9)-(line 47,col 83)",
            "(line 48,col 9)-(line 48,col 46)",
            "(line 49,col 9)-(line 49,col 32)",
            "(line 50,col 9)-(line 50,col 31)",
            "(line 51,col 9)-(line 51,col 57)",
            "(line 53,col 9)-(line 53,col 83)",
            "(line 54,col 9)-(line 54,col 83)",
            "(line 55,col 9)-(line 55,col 47)",
            "(line 56,col 9)-(line 56,col 36)",
            "(line 57,col 9)-(line 57,col 36)",
            "(line 59,col 9)-(line 59,col 42)",
            "(line 61,col 9)-(line 61,col 85)",
            "(line 62,col 9)-(line 62,col 85)",
            "(line 63,col 9)-(line 63,col 47)",
            "(line 64,col 9)-(line 64,col 38)",
            "(line 65,col 9)-(line 65,col 38)",
            "(line 66,col 9)-(line 66,col 42)",
            "(line 68,col 9)-(line 68,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testSingleOptionFromGroup()",
        "snippet": "    public void testSingleOptionFromGroup()\n    {\n        String[] args = new String[] { \"-f\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n\n            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 75,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 46)",
            "(line 79,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testSingleOption()",
        "snippet": "    public void testSingleOption()\n    {\n        String[] args = new String[] { \"-r\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n\n            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 96,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 46)",
            "(line 100,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoValidOptions()",
        "snippet": "    public void testTwoValidOptions()\n    {\n        String[] args = new String[] { \"-r\", \"-f\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n\n            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 117,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 52)",
            "(line 121,col 9)-(line 135,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testSingleLongOption()",
        "snippet": "    public void testSingleLongOption()\n    {\n        String[] args = new String[] { \"--file\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n\n            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 138,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 50)",
            "(line 142,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoValidLongOptions()",
        "snippet": "    public void testTwoValidLongOptions()\n    {\n        String[] args = new String[] { \"--revision\", \"--file\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n\n            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 159,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 64)",
            "(line 163,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testNoOptionsExtraArgs()",
        "snippet": "    public void testNoOptionsExtraArgs()\n    {\n        String[] args = new String[] { \"arg1\", \"arg2\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n\n            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 180,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 56)",
            "(line 184,col 9)-(line 198,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroup()",
        "snippet": "    public void testTwoOptionsFromGroup()\n    {\n        String[] args = new String[] { \"-f\", \"-d\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n            fail( \"two arguments from group not allowed\" );\n        }\n        catch (ParseException e)\n        {\n            if( !( e instanceof AlreadySelectedException ) )\n            {\n                fail( \"incorrect exception caught:\" + e.getMessage() );\n            }\n        }\n    }",
        "begin_line": 201,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 52)",
            "(line 205,col 9)-(line 216,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoLongOptionsFromGroup()",
        "snippet": "    public void testTwoLongOptionsFromGroup()\n    {\n        String[] args = new String[] { \"--file\", \"--directory\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n            fail( \"two arguments from group not allowed\" );\n        }\n        catch (ParseException e)\n        {\n            if( !( e instanceof AlreadySelectedException ) )\n            {\n                fail( \"incorrect exception caught:\" + e.getMessage() );\n            }\n        }\n    }",
        "begin_line": 219,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 65)",
            "(line 223,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromDifferentGroup()",
        "snippet": "    public void testTwoOptionsFromDifferentGroup()\n    {\n        String[] args = new String[] { \"-f\", \"-s\" };\n\n        try\n        {\n            CommandLine cl = parser.parse( _options, args);\n            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n            assertTrue( \"Confirm -s is set\", cl.hasOption(\"s\") );\n            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n            assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 237,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 52)",
            "(line 241,col 9)-(line 254,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testValidLongOnlyOptions()",
        "snippet": "    public void testValidLongOnlyOptions()\n    {\n        try\n        {\n            CommandLine cl = parser.parse( _options, new String[]{\"--export\"});\n            assertTrue( \"Confirm --export is set\", cl.hasOption(\"export\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n                            \n        try\n        {\n            CommandLine cl = parser.parse( _options, new String[]{\"--import\"});\n            assertTrue( \"Confirm --import is set\", cl.hasOption(\"import\") );\n        }\n        catch (ParseException e)\n        {\n            fail( e.toString() );\n        }\n    }",
        "begin_line": 257,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 267,col 9)",
            "(line 269,col 9)-(line 277,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.LongOptionWithShort",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/LongOptionWithShort.java",
        "signature": "org.apache.commons.cli.LongOptionWithShort.LongOptionWithShort(java.lang.String)",
        "snippet": "    public LongOptionWithShort(String name) {\n        super(name);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.LongOptionWithShort",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/LongOptionWithShort.java",
        "signature": "org.apache.commons.cli.LongOptionWithShort.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LongOptionWithShort.class);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.LongOptionWithShort",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/LongOptionWithShort.java",
        "signature": "org.apache.commons.cli.LongOptionWithShort.testLongOptionWithShort()",
        "snippet": "    public void testLongOptionWithShort() {\n        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n        Option version = new Option(\"v\", \"version\", false,\n                \"print version information\");\n        Option newRun = new Option(\"n\", \"new\", false,\n                \"Create NLT cache entries only for new items\");\n        Option trackerRun = new Option(\"t\", \"tracker\", false,\n                \"Create NLT cache entries only for tracker items\");\n\n        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Set time limit for execution, in mintues\")\n                                        .create(\"l\");\n\n        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n                                  .withValueSeparator()\n                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n                                  .create(\"a\");\n\n        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n                                     .withValueSeparator()\n                                     .withDescription(\"The NLT server address\")\n                                     .create(\"s\");\n\n        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n                                         .withValueSeparator()\n                                         .withDescription(\"Number of results per item\")\n                                         .create(\"r\");\n\n        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n                                         .withValueSeparator()\n                                         .withDescription(\"Use the specified configuration file\")\n                                         .create();\n\n        Options options = new Options();\n        options.addOption(help);\n        options.addOption(version);\n        options.addOption(newRun);\n        options.addOption(trackerRun);\n        options.addOption(timeLimit);\n        options.addOption(age);\n        options.addOption(server);\n        options.addOption(numResults);\n        options.addOption(configFile);\n\n        // create the command line parser\n        CommandLineParser parser = new PosixParser();\n\n        String[] args = new String[] {\n                \"-v\",\n                \"-l\",\n                \"10\",\n                \"-age\",\n                \"5\",\n                \"-file\",\n                \"filename\"\n            };\n\n        try {\n            CommandLine line = parser.parse(options, args);\n            assertTrue(line.hasOption(\"v\"));\n            assertEquals(line.getOptionValue(\"l\"), \"10\");\n            assertEquals(line.getOptionValue(\"limit\"), \"10\");\n            assertEquals(line.getOptionValue(\"a\"), \"5\");\n            assertEquals(line.getOptionValue(\"age\"), \"5\");\n            assertEquals(line.getOptionValue(\"file\"), \"filename\");\n        }\n        catch (ParseException exp) {\n            fail(\"Unexpected exception:\" + exp.getMessage());\n        }\n    }",
        "begin_line": 43,
        "end_line": 113,
        "comment": "\n     *\n     ",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 75)",
            "(line 45,col 9)-(line 46,col 45)",
            "(line 47,col 9)-(line 48,col 63)",
            "(line 49,col 9)-(line 50,col 67)",
            "(line 52,col 9)-(line 55,col 53)",
            "(line 57,col 9)-(line 60,col 47)",
            "(line 62,col 9)-(line 65,col 50)",
            "(line 67,col 9)-(line 70,col 54)",
            "(line 72,col 9)-(line 75,col 51)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 78,col 9)-(line 78,col 32)",
            "(line 79,col 9)-(line 79,col 35)",
            "(line 80,col 9)-(line 80,col 34)",
            "(line 81,col 9)-(line 81,col 38)",
            "(line 82,col 9)-(line 82,col 37)",
            "(line 83,col 9)-(line 83,col 31)",
            "(line 84,col 9)-(line 84,col 34)",
            "(line 85,col 9)-(line 85,col 38)",
            "(line 86,col 9)-(line 86,col 38)",
            "(line 89,col 9)-(line 89,col 53)",
            "(line 91,col 9)-(line 99,col 14)",
            "(line 101,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.suite()",
        "snippet": "    public static Test suite() { \n        return new TestSuite(ValueTest.class); \n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.ValueTest(java.lang.String)",
        "snippet": "    public ValueTest(String name)\n    {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        opts.addOption(\"a\",\n                       false,\n                       \"toggle -a\");\n\n        opts.addOption(\"b\",\n                       true,\n                       \"set -b\");\n\n        opts.addOption(\"c\",\n                       \"c\",\n                       false,\n                       \"toggle -c\");\n\n        opts.addOption(\"d\",\n                       \"d\",\n                       true,\n                       \"set -d\");\n\n        opts.addOption( OptionBuilder.hasOptionalArg()\n                        .create( 'e') );\n\n        opts.addOption( OptionBuilder.hasOptionalArg()\n                        .withLongOpt( \"fish\" )\n                        .create( ) );\n\n        opts.addOption( OptionBuilder.hasOptionalArgs()\n                        .withLongOpt( \"gravy\" )\n                        .create( ) );\n\n        opts.addOption( OptionBuilder.hasOptionalArgs( 2 )\n                        .withLongOpt( \"hide\" )\n                        .create( ) );\n\n        opts.addOption( OptionBuilder.hasOptionalArgs( 2 )\n                        .create( 'i' ) );\n\n        opts.addOption( OptionBuilder.hasOptionalArgs( )\n                        .create( 'j' ) );\n\n        opts.addOption( OptionBuilder.hasArgs( ).withValueSeparator( ',' )\n                        .create( 'k' ) );\n\n        String[] args = new String[] { \"-a\",\n            \"-b\", \"foo\",\n            \"--c\",\n            \"--d\", \"bar\" \n        };\n\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            _cl = parser.parse(opts,args);\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 42,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 46,col 36)",
            "(line 48,col 9)-(line 50,col 33)",
            "(line 52,col 9)-(line 55,col 36)",
            "(line 57,col 9)-(line 60,col 33)",
            "(line 62,col 9)-(line 63,col 40)",
            "(line 65,col 9)-(line 67,col 37)",
            "(line 69,col 9)-(line 71,col 37)",
            "(line 73,col 9)-(line 75,col 37)",
            "(line 77,col 9)-(line 78,col 41)",
            "(line 80,col 9)-(line 81,col 41)",
            "(line 83,col 9)-(line 84,col 41)",
            "(line 86,col 9)-(line 90,col 10)",
            "(line 92,col 9)-(line 100,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.tearDown()",
        "snippet": "    public void tearDown()\n    {\n\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortNoArg()",
        "snippet": "    public void testShortNoArg()\n    {\n        assertTrue( _cl.hasOption(\"a\") );\n        assertNull( _cl.getOptionValue(\"a\") );\n    }",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 41)",
            "(line 111,col 9)-(line 111,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortWithArg()",
        "snippet": "    public void testShortWithArg()\n    {\n        assertTrue( _cl.hasOption(\"b\") );\n        assertNotNull( _cl.getOptionValue(\"b\") );\n        assertEquals( _cl.getOptionValue(\"b\"), \"foo\");\n    }",
        "begin_line": 114,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 118,col 9)-(line 118,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongNoArg()",
        "snippet": "    public void testLongNoArg()\n    {\n        assertTrue( _cl.hasOption(\"c\") );\n        assertNull( _cl.getOptionValue(\"c\") );\n    }",
        "begin_line": 121,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongWithArg()",
        "snippet": "    public void testLongWithArg()\n    {\n        assertTrue( _cl.hasOption(\"d\") );\n        assertNotNull( _cl.getOptionValue(\"d\") );\n        assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n    }",
        "begin_line": 127,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 41)",
            "(line 130,col 9)-(line 130,col 49)",
            "(line 131,col 9)-(line 131,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalArgNoValue()",
        "snippet": "    public void testShortOptionalArgNoValue()\n    {\n        String[] args = new String[] { \"-e\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"e\") );\n            assertNull( cmd.getOptionValue(\"e\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 134,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 137,col 10)",
            "(line 138,col 9)-(line 148,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalArgValue()",
        "snippet": "    public void testShortOptionalArgValue()\n    {\n        String[] args = new String[] { \"-e\", \"everything\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"e\") );\n            assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 151,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 154,col 10)",
            "(line 155,col 9)-(line 165,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalNoValue()",
        "snippet": "    public void testLongOptionalNoValue()\n    {\n        String[] args = new String[] { \"--fish\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"fish\") );\n            assertNull( cmd.getOptionValue(\"fish\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 168,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 171,col 10)",
            "(line 172,col 9)-(line 182,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalArgValue()",
        "snippet": "    public void testLongOptionalArgValue()\n    {\n        String[] args = new String[] { \"--fish\", \"face\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"fish\") );\n            assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 185,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 188,col 10)",
            "(line 189,col 9)-(line 199,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalArgValues()",
        "snippet": "    public void testShortOptionalArgValues()\n    {\n        String[] args = new String[] { \"-j\", \"ink\", \"idea\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"j\") );\n            assertEquals( \"ink\", cmd.getOptionValue(\"j\") );\n            assertEquals( \"ink\", cmd.getOptionValues(\"j\")[0] );\n            assertEquals( \"idea\", cmd.getOptionValues(\"j\")[1] );\n            assertEquals( cmd.getArgs().length, 0 );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 202,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 205,col 10)",
            "(line 206,col 9)-(line 219,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalArgValues()",
        "snippet": "    public void testLongOptionalArgValues()\n    {\n        String[] args = new String[] { \"--gravy\", \"gold\", \"garden\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"gravy\") );\n            assertEquals( \"gold\", cmd.getOptionValue(\"gravy\") );\n            assertEquals( \"gold\", cmd.getOptionValues(\"gravy\")[0] );\n            assertEquals( \"garden\", cmd.getOptionValues(\"gravy\")[1] );\n            assertEquals( cmd.getArgs().length, 0 );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 222,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 225,col 10)",
            "(line 226,col 9)-(line 239,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalNArgValues()",
        "snippet": "    public void testShortOptionalNArgValues()\n    {\n        String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\"\n        };\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"i\") );\n            assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n            assertEquals( \"ink\", cmd.getOptionValues(\"i\")[0] );\n            assertEquals( \"idea\", cmd.getOptionValues(\"i\")[1] );\n            assertEquals( cmd.getArgs().length, 2 );\n            assertEquals( \"isotope\", cmd.getArgs()[0] );\n            assertEquals( \"ice\", cmd.getArgs()[1] );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 242,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 245,col 10)",
            "(line 246,col 9)-(line 261,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalNArgValues()",
        "snippet": "    public void testLongOptionalNArgValues()\n    {\n        String[] args = new String[] { \n            \"--hide\", \"house\", \"hair\", \"head\"\n        };\n\n        CommandLineParser parser = new PosixParser();\n\n        try\n        {\n            CommandLine cmd = parser.parse(opts,args);\n            assertTrue( cmd.hasOption(\"hide\") );\n            assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n            assertEquals( \"house\", cmd.getOptionValues(\"hide\")[0] );\n            assertEquals( \"hair\", cmd.getOptionValues(\"hide\")[1] );\n            assertEquals( cmd.getArgs().length, 1 );\n            assertEquals( \"head\", cmd.getArgs()[0] );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 264,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 268,col 10)",
            "(line 270,col 9)-(line 270,col 53)",
            "(line 272,col 9)-(line 285,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testPropertyOptionSingularValue()",
        "snippet": "    public void testPropertyOptionSingularValue()\n    {\n        Properties properties = new Properties();\n        properties.setProperty( \"hide\", \"seek\" );\n\n        CommandLineParser parser = new PosixParser();\n        \n        try\n        {\n            CommandLine cmd = parser.parse(opts, null, properties);\n            assertTrue( cmd.hasOption(\"hide\") );\n            assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n            assertTrue( !cmd.hasOption(\"fake\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 288,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 49)",
            "(line 291,col 9)-(line 291,col 49)",
            "(line 293,col 9)-(line 293,col 53)",
            "(line 295,col 9)-(line 305,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testPropertyOptionFlags()",
        "snippet": "    public void testPropertyOptionFlags()\n    {\n        Properties properties = new Properties();\n        properties.setProperty( \"a\", \"true\" );\n        properties.setProperty( \"c\", \"yes\" );\n        properties.setProperty( \"e\", \"1\" );\n\n        CommandLineParser parser = new PosixParser();\n        \n        try\n        {\n            CommandLine cmd = parser.parse(opts, null, properties);\n            assertTrue( cmd.hasOption(\"a\") );\n            assertTrue( cmd.hasOption(\"c\") );\n            assertTrue( cmd.hasOption(\"e\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n\n        properties = new Properties();\n        properties.setProperty( \"a\", \"false\" );\n        properties.setProperty( \"c\", \"no\" );\n        properties.setProperty( \"e\", \"0\" );\n        try\n        {\n            CommandLine cmd = parser.parse(opts, null, properties);\n            assertTrue( !cmd.hasOption(\"a\") );\n            assertTrue( !cmd.hasOption(\"c\") );\n            assertTrue( !cmd.hasOption(\"e\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n\n        properties = new Properties();\n        properties.setProperty( \"a\", \"TRUE\" );\n        properties.setProperty( \"c\", \"nO\" );\n        properties.setProperty( \"e\", \"TrUe\" );\n        try\n        {\n            CommandLine cmd = parser.parse(opts, null, properties);\n            assertTrue( cmd.hasOption(\"a\") );\n            assertTrue( !cmd.hasOption(\"c\") );\n            assertTrue( cmd.hasOption(\"e\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n\n        properties = new Properties();\n        properties.setProperty( \"a\", \"just a string\" );\n        properties.setProperty( \"e\", \"\" );\n        try\n        {\n            CommandLine cmd = parser.parse(opts, null, properties);\n            assertTrue( !cmd.hasOption(\"a\") );\n            assertTrue( !cmd.hasOption(\"c\") );\n            assertTrue( !cmd.hasOption(\"e\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n\n    } ",
        "begin_line": 308,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 49)",
            "(line 311,col 9)-(line 311,col 46)",
            "(line 312,col 9)-(line 312,col 45)",
            "(line 313,col 9)-(line 313,col 43)",
            "(line 315,col 9)-(line 315,col 53)",
            "(line 317,col 9)-(line 327,col 9)",
            "(line 329,col 9)-(line 329,col 38)",
            "(line 330,col 9)-(line 330,col 47)",
            "(line 331,col 9)-(line 331,col 44)",
            "(line 332,col 9)-(line 332,col 43)",
            "(line 333,col 9)-(line 343,col 9)",
            "(line 345,col 9)-(line 345,col 38)",
            "(line 346,col 9)-(line 346,col 46)",
            "(line 347,col 9)-(line 347,col 44)",
            "(line 348,col 9)-(line 348,col 46)",
            "(line 349,col 9)-(line 359,col 9)",
            "(line 361,col 9)-(line 361,col 38)",
            "(line 362,col 9)-(line 362,col 55)",
            "(line 363,col 9)-(line 363,col 42)",
            "(line 364,col 9)-(line 374,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testPropertyOptionMultipleValues()",
        "snippet": "    public void testPropertyOptionMultipleValues()\n    {\n        Properties properties = new Properties();\n        properties.setProperty( \"k\", \"one,two\" );\n\n        CommandLineParser parser = new PosixParser();\n        \n        String[] values = new String[] {\n            \"one\", \"two\"\n        };\n        try\n        {\n            CommandLine cmd = parser.parse(opts, null, properties);\n            assertTrue( cmd.hasOption(\"k\") );\n            assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 378,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 49)",
            "(line 381,col 9)-(line 381,col 49)",
            "(line 383,col 9)-(line 383,col 53)",
            "(line 385,col 9)-(line 387,col 10)",
            "(line 388,col 9)-(line 397,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testPropertyOverrideValues()",
        "snippet": "    public void testPropertyOverrideValues()\n    {\n        String[] args = new String[] { \n            \"-j\",\n            \"found\",\n            \"-i\",\n            \"ink\"\n        };\n\n        Properties properties = new Properties();\n        properties.setProperty( \"j\", \"seek\" );\n        try\n        {\n            CommandLineParser parser = new PosixParser();\n            CommandLine cmd = parser.parse(opts, args, properties);\n            assertTrue( cmd.hasOption(\"j\") );\n            assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n            assertTrue( cmd.hasOption(\"i\") );\n            assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n            assertTrue( !cmd.hasOption(\"fake\") );\n        }\n        catch (ParseException e)\n        {\n            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n        }\n    }",
        "begin_line": 400,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 407,col 10)",
            "(line 409,col 9)-(line 409,col 49)",
            "(line 410,col 9)-(line 410,col 46)",
            "(line 411,col 9)-(line 424,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI13Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI13Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI13Test.testCLI13()",
        "snippet": "    public void testCLI13()\n        throws ParseException\n    {\n        final String debugOpt = \"debug\";\n        Option debug = OptionBuilder\n            .withArgName( debugOpt )\n            .withDescription( \"turn on debugging\" )\n            .withLongOpt( debugOpt )\n            .hasArg()\n            .create( 'd' );\n        Options options = new Options();\n        options.addOption( debug );\n        CommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n\n        assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\n        assertEquals(\"true\", commandLine.getOptionValue( 'd' ));\n        assertTrue(commandLine.hasOption( 'd'));\n        assertTrue(commandLine.hasOption( debugOpt));\n    }",
        "begin_line": 33,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 40)",
            "(line 37,col 9)-(line 42,col 27)",
            "(line 43,col 9)-(line 43,col 40)",
            "(line 44,col 9)-(line 44,col 35)",
            "(line 45,col 9)-(line 45,col 97)",
            "(line 47,col 9)-(line 47,col 69)",
            "(line 48,col 9)-(line 48,col 64)",
            "(line 49,col 9)-(line 49,col 48)",
            "(line 50,col 9)-(line 50,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.setUp()",
        "snippet": "    public void setUp() {\n        options = new Options();\n\n        Option algorithm = new Option(\"a\" , \"algo\", true, \"the algorithm which it to perform executing\");\n        algorithm.setArgName(\"algorithm name\");\n        options.addOption(algorithm);\n\n        Option key = new Option(\"k\" , \"key\", true, \"the key the setted algorithm uses to process\");\n        algorithm.setArgName(\"value\");\n        options.addOption(key);\n\n        parser = new PosixParser();\n    }",
        "begin_line": 28,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 32)",
            "(line 31,col 9)-(line 31,col 105)",
            "(line 32,col 9)-(line 32,col 47)",
            "(line 33,col 9)-(line 33,col 37)",
            "(line 35,col 9)-(line 35,col 99)",
            "(line 36,col 9)-(line 36,col 38)",
            "(line 37,col 9)-(line 37,col 31)",
            "(line 39,col 9)-(line 39,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testBasic()",
        "snippet": "    public void testBasic() throws Exception {\n        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n        CommandLine line = parser.parse( options, args);\n        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n        assertEquals( \"A\", line.getOptionValue(\"k\") );\n    }",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 67)",
            "(line 44,col 9)-(line 44,col 56)",
            "(line 45,col 9)-(line 45,col 59)",
            "(line 46,col 9)-(line 46,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testMistakenArgument()",
        "snippet": "    public void testMistakenArgument() throws Exception {\n        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n        CommandLine line = parser.parse( options, args);\n        args = new String[] { \"-a\", \"Caesar\", \"-k\", \"a\" };\n        line = parser.parse( options, args);\n        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n        assertEquals( \"a\", line.getOptionValue(\"k\") );\n    }",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 67)",
            "(line 51,col 9)-(line 51,col 56)",
            "(line 52,col 9)-(line 52,col 58)",
            "(line 53,col 9)-(line 53,col 44)",
            "(line 54,col 9)-(line 54,col 59)",
            "(line 55,col 9)-(line 55,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testLackOfError()",
        "snippet": "    public void testLackOfError() throws Exception {\n        String[] args = new String[] { \"-k\", \"-a\",  \"Caesar\" };\n        try {\n            CommandLine line = parser.parse( options, args);\n            fail(\"MissingArgumentException expected\");\n        } catch(MissingArgumentException mae) {\n            // expected\n        }\n    }",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 63)",
            "(line 60,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testGetsDefaultIfOptional()",
        "snippet": "    public void testGetsDefaultIfOptional() throws Exception {\n        String[] args = new String[] { \"-k\", \"-a\", \"Caesar\" };\n        options.getOption(\"k\").setOptionalArg(true);\n        CommandLine line = parser.parse( options, args);\n        \n        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n        assertEquals( \"a\", line.getOptionValue(\"k\", \"a\") );\n    }",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 62)",
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 56)",
            "(line 73,col 9)-(line 73,col 59)",
            "(line 74,col 9)-(line 74,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI133Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI133Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI133Test.testOrder()",
        "snippet": "    public void testOrder() throws ParseException {\n        Option optionA = new Option(\"a\", \"first\");\n        Options opts = new Options();\n        opts.addOption(optionA);\n        PosixParser posixParser = new PosixParser();\n        CommandLine line = posixParser.parse(opts, null);\n        assertFalse(line.hasOption(null));\n    }",
        "begin_line": 26,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 50)",
            "(line 28,col 9)-(line 28,col 37)",
            "(line 29,col 9)-(line 29,col 32)",
            "(line 30,col 9)-(line 30,col 52)",
            "(line 31,col 9)-(line 31,col 57)",
            "(line 32,col 9)-(line 32,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI51Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI51Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI51Test.test()",
        "snippet": "    public void test() throws Exception\n    {\n        Options options = buildCommandLineOptions();\n        CommandLineParser parser = new PosixParser();\n        String[] args = new String[] {\"-t\", \"-something\" };\n        CommandLine commandLine;\n        commandLine = parser.parse( options, args );\n        assertEquals(\"-something\", commandLine.getOptionValue( 't'));\n    }",
        "begin_line": 34,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 52)",
            "(line 37,col 9)-(line 37,col 53)",
            "(line 38,col 9)-(line 38,col 59)",
            "(line 39,col 9)-(line 39,col 32)",
            "(line 40,col 9)-(line 40,col 52)",
            "(line 41,col 9)-(line 41,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI51Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI51Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI51Test.buildCommandLineOptions()",
        "snippet": "    private Options buildCommandLineOptions()\n    {\n        Option opt = OptionBuilder.withArgName( \"t\").hasArg().create('t');\n        Options options = new Options();\n        options.addOption( opt);\n        return options;\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 74)",
            "(line 47,col 9)-(line 47,col 40)",
            "(line 48,col 9)-(line 48,col 32)",
            "(line 49,col 9)-(line 49,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI18Test",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/cli/bug/BugCLI18Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI18Test.testCLI18()",
        "snippet": "  public void testCLI18() {\n    Options options = new Options();\n    options.addOption(new Option(\"a\",\"aaa\",false,\"aaaaaaa\"));\n    options.addOption(new Option(null,\"bbb\",false,\"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\n    options.addOption(new Option(\"c\",null,false,\"ccccccc\"));\n\n    HelpFormatter formatter = new HelpFormatter();\n    StringWriter out = new StringWriter();\n\n    formatter.printHelp(new PrintWriter(out),80, \"foobar\", \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2, \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\n  }",
        "begin_line": 31,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 32,col 36)",
            "(line 33,col 5)-(line 33,col 61)",
            "(line 34,col 5)-(line 34,col 151)",
            "(line 35,col 5)-(line 35,col 60)",
            "(line 37,col 5)-(line 37,col 50)",
            "(line 38,col 5)-(line 38,col 42)",
            "(line 40,col 5)-(line 40,col 322)"
        ]
    }
]