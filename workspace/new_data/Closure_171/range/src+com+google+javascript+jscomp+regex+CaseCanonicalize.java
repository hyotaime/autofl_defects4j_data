{
  "filepath": "/tmp/Closure-171b/src/com/google/javascript/jscomp/regex/CaseCanonicalize.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "CaseCanonicalize",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 45,
      "end_line": 631,
      "comment": "\n * Implements the ECMAScript 5\n * \u003ca href\u003d\"http://es5.github.com/#Canonicalize\"\u003eCanonicalize\u003c/a\u003e operation\n * used to specify how case-insensitive regular expressions match.\n *\n * \u003cp\u003e\n * From section \u003ca href\u003d\"http://es5.github.com/#x15.10.2.9\"\u003e15.10.2.9\u003c/a\u003e,\n * \u003cblockquote\u003e\n * The abstract operation Canonicalize takes a character parameter ch and\n * performs the following steps:\n * \u003cul\u003e\n *   \u003cli\u003eIf IgnoreCase is false, return ch.\n *   \u003cli\u003eLet u be ch converted to upper case as if by calling the standard\n *   built-in method {@code String.prototype.toUpperCase} on the one-character\n *   String ch.\n *   \u003cli\u003eIf u does not consist of a single character, return ch.\n *   \u003cli\u003eLet cu be u\u0027s character.\n *   \u003cli\u003eIf ch\u0027s code unit value is greater than or equal to decimal 128 and\n *   cu\u0027s code unit value is less than decimal 128, then return ch.\n *   \u003cli\u003eReturn cu.\n * \u003c/ul\u003e\n *\n * @author Mike Samuel \u003cmikesamuel@gmail.com\u003e\n "
    },
    {
      "type": "constructor",
      "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.CaseCanonicalize()",
      "begin_line": 47,
      "end_line": 49,
      "comment": "",
      "child_ranges": []
    },
    {
      "type": "field",
      "varNames": [
        "CASE_SENSITIVE"
      ],
      "begin_line": 88,
      "end_line": 184,
      "comment": "\n   * Set of code units that are case-insensitively equivalent to some other\n   * code unit according to the EcmaScript\n   * \u003ca href\u003d\"http://es5.github.com/#Canonicalize\"\u003eCanonicalize\u003c/a\u003e operation\n   * described in section 15.10.2.8.\n   * The case sensitive characters are the ones that canonicalize to a character\n   * other than themselves or have a character that canonicalizes to them.\n   * Canonicalize is based on the definition of\n   * {@code String.prototype.toUpperCase} which is itself based on Unicode 3.0.0\n   * as specified at\n   * \u003ca href\u003d\"ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\"\u003e\n   * UnicodeData-3.0.0\n   * \u003c/a\u003e\n   * and \u003ca href\u003d\"ftp://ftp.unicode.org/Public/3.0-Update/SpecialCasing-2.txt\"\u003e\n   * SpecialCasings-2.txt\n   * \u003c/a\u003e.\n   *\n   * \u003cp\u003e\n   * This table was generated by running the below on Chrome:\n   * \u003c/p\u003e\n   * \u003cpre\u003e\n   * for (var cc \u003d 0; cc \u003c 0x10000; ++cc) {\n   *   var ch \u003d String.fromCharCode(cc);\n   *   var u \u003d ch.toUpperCase();\n   *   if (ch !\u003d u \u0026\u0026 u.length \u003d\u003d\u003d 1) {\n   *     var cu \u003d u.charCodeAt(0);\n   *     if (cc \u003c\u003d 128 || u.charCodeAt(0) \u003e 128) {\n   *       print(\u00270x\u0027 + cc.toString(16) + \u0027, 0x\u0027 + cu.toString(16) + \u0027,\u0027);\n   *     }\n   *   }\n   * }\n   * \u003c/pre\u003e\n   "
    },
    {
      "type": "method",
      "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.caseCanonicalize(java.lang.String)",
      "begin_line": 190,
      "end_line": 204,
      "comment": "\n   * Returns the case canonical version of the given string.\n   ",
      "child_ranges": [
        "(line 191,col 5)-(line 202,col 5)",
        "(line 203,col 5)-(line 203,col 13)"
      ]
    },
    {
      "type": "method",
      "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.caseCanonicalize(char)",
      "begin_line": 211,
      "end_line": 224,
      "comment": "\n   * Returns the case canonical version of the given code-unit.  ECMAScript 5\n   * explicitly says that code-units are to be treated as their code-point\n   * equivalent, even surrogates.\n   ",
      "child_ranges": [
        "(line 212,col 5)-(line 214,col 5)",
        "(line 216,col 5)-(line 222,col 5)",
        "(line 223,col 5)-(line 223,col 14)"
      ]
    },
    {
      "type": "method",
      "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.expandToAllMatched(com.google.javascript.jscomp.regex.CharRanges)",
      "begin_line": 232,
      "end_line": 241,
      "comment": "\n   * Given a character range that may include case sensitive code-units,\n   * such as {@code [0-9B-M]}, returns the character range that includes all\n   * the code-units in the input and those that are case-insensitively\n   * equivalent to a code-unit in the input.\n   ",
      "child_ranges": [
        "(line 233,col 5)-(line 233,col 67)",
        "(line 234,col 5)-(line 234,col 51)",
        "(line 235,col 5)-(line 235,col 43)",
        "(line 236,col 5)-(line 239,col 5)",
        "(line 240,col 5)-(line 240,col 34)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "UCASE_ASCII_LETTERS"
      ],
      "begin_line": 244,
      "end_line": 245,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.reduceToMinimum(com.google.javascript.jscomp.regex.CharRanges)",
      "begin_line": 254,
      "end_line": 269,
      "comment": "\n   * Given a character range that may include case sensitive code-units,\n   * such as {@code [0-9B-M]}, returns the character range that includes\n   * the minimal set of code units such that for every code unit in the\n   * input there is a case-sensitively equivalent canonical code unit in the\n   * output.\n   ",
      "child_ranges": [
        "(line 255,col 5)-(line 255,col 67)",
        "(line 256,col 5)-(line 256,col 51)",
        "(line 257,col 5)-(line 257,col 43)",
        "(line 258,col 5)-(line 261,col 5)",
        "(line 266,col 5)-(line 267,col 62)",
        "(line 268,col 5)-(line 268,col 60)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "DELTA_SETS"
      ],
      "begin_line": 275,
      "end_line": 498,
      "comment": "\n   * Sets of code units broken down by delta that are case-insensitively\n   * equivalent to another code unit that differs from the first by that delta.\n   "
    },
    {
      "type": "field",
      "varNames": [
        "CANON_DELTA_SETS"
      ],
      "begin_line": 500,
      "end_line": 614,
      "comment": ""
    },
    {
      "type": "class_interface",
      "name": "DeltaSet",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 621,
      "end_line": 629,
      "comment": "\n   * A group of code units such that for all cu in codeUnits, cu is equivalent,\n   * case-insensitively, to cu + delta.\n   "
    },
    {
      "type": "field",
      "varNames": [
        "delta"
      ],
      "begin_line": 622,
      "end_line": 622,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "codeUnits"
      ],
      "begin_line": 623,
      "end_line": 623,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "com.google.javascript.jscomp.regex.CaseCanonicalize.DeltaSet.DeltaSet(int, com.google.javascript.jscomp.regex.CharRanges)",
      "begin_line": 625,
      "end_line": 628,
      "comment": "",
      "child_ranges": [
        "(line 626,col 7)-(line 626,col 25)",
        "(line 627,col 7)-(line 627,col 33)"
      ]
    }
  ]
}