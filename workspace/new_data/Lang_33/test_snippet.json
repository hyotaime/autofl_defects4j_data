[
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.setUp()",
        "snippet": "    @SuppressWarnings(\"cast\") // intRange\n    @Override\n    public void setUp() {\n        byteRange   = Range.between((byte) 0, (byte) 5);\n        byteRange2  = Range.between((byte) 0, (byte) 5);\n        byteRange3  = Range.between((byte) 0, (byte) 10);\n\n        intRange    = Range.between((int) 10, (int) 20);\n        longRange   = Range.between((long) 10, (long) 20);\n        floatRange  = Range.between((float) 10, (float) 20);\n        doubleRange = Range.between((double) 10, (double) 20);\n    }",
        "begin_line": 43,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 56)",
            "(line 47,col 9)-(line 47,col 56)",
            "(line 48,col 9)-(line 48,col 57)",
            "(line 50,col 9)-(line 50,col 56)",
            "(line 51,col 9)-(line 51,col 58)",
            "(line 52,col 9)-(line 52,col 60)",
            "(line 53,col 9)-(line 53,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testComparableConstructors()",
        "snippet": "    public void testComparableConstructors() {\n        Comparable c = \n            new Comparable() { \n                public int compareTo(Object other) {\n                    return 1;\n                }\n            };\n        Range.is(c);\n        Range.between(c, c);\n    }",
        "begin_line": 58,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 64,col 14)",
            "(line 65,col 9)-(line 65,col 20)",
            "(line 66,col 9)-(line 66,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.Anonymous-f3b38915-83e0-4bf7-8505-7873848f1fbc.compareTo(java.lang.Object)",
        "snippet": "                public int compareTo(Object other) {\n                    return 1;\n                }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 21)-(line 62,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testIsWithCompare()",
        "snippet": "    public void testIsWithCompare(){\n        Comparator<Integer> c = new Comparator<Integer>(){\n            public int compare(Integer o1, Integer o2) {\n                return 0; // all integers are equal\n            }\n        };\n        Range<Integer> ri = Range.is(10);\n        assertFalse(\"should not contain null\",ri.contains(null));\n        assertTrue(\"should contain 10\",ri.contains(10));\n        assertFalse(\"should not contain 11\",ri.contains(11));\n        ri = Range.is(10,c);\n        assertFalse(\"should not contain null\",ri.contains(null));\n        assertTrue(\"should contain 10\",ri.contains(10));\n        assertTrue(\"should contain 11\",ri.contains(11));\n    }",
        "begin_line": 69,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 74,col 10)",
            "(line 75,col 9)-(line 75,col 41)",
            "(line 76,col 9)-(line 76,col 65)",
            "(line 77,col 9)-(line 77,col 56)",
            "(line 78,col 9)-(line 78,col 61)",
            "(line 79,col 9)-(line 79,col 28)",
            "(line 80,col 9)-(line 80,col 65)",
            "(line 81,col 9)-(line 81,col 56)",
            "(line 82,col 9)-(line 82,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.Anonymous-8c898c32-4de5-44e2-899b-8c7102a4b272.compare(java.lang.Integer, java.lang.Integer)",
        "snippet": "            public int compare(Integer o1, Integer o2) {\n                return 0; // all integers are equal\n            }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 17)-(line 72,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testBetweenWithCompare()",
        "snippet": "    public void testBetweenWithCompare(){\n        // TODO add tests with a better comparator\n        Comparator<Integer> c = new Comparator<Integer>(){\n            public int compare(Integer o1, Integer o2) {\n                return 0; // all integers are equal\n            }\n        };\n        Range<Integer> rb = Range.between(-10,20);\n        assertFalse(\"should not contain null\",rb.contains(null));\n        assertTrue(\"should contain 10\",rb.contains(10));\n        assertTrue(\"should contain -10\",rb.contains(-10));\n        assertFalse(\"should not contain 21\",rb.contains(21));\n        assertFalse(\"should not contain -11\",rb.contains(-11));\n        rb = Range.between(-10,20,c);\n        assertFalse(\"should not contain null\",rb.contains(null));\n        assertTrue(\"should contain 10\",rb.contains(10));\n        assertTrue(\"should contain -10\",rb.contains(-10));\n        assertTrue(\"should contain 21\",rb.contains(21));\n        assertTrue(\"should contain -11\",rb.contains(-11));\n    }",
        "begin_line": 85,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 91,col 10)",
            "(line 92,col 9)-(line 92,col 50)",
            "(line 93,col 9)-(line 93,col 65)",
            "(line 94,col 9)-(line 94,col 56)",
            "(line 95,col 9)-(line 95,col 58)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 97,col 9)-(line 97,col 63)",
            "(line 98,col 9)-(line 98,col 37)",
            "(line 99,col 9)-(line 99,col 65)",
            "(line 100,col 9)-(line 100,col 56)",
            "(line 101,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 102,col 56)",
            "(line 103,col 9)-(line 103,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.Anonymous-da12fa18-fc33-4460-b742-3d49bcf54203.compare(java.lang.Integer, java.lang.Integer)",
        "snippet": "            public int compare(Integer o1, Integer o2) {\n                return 0; // all integers are equal\n            }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 17)-(line 89,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testRangeOfChars()",
        "snippet": "    public void testRangeOfChars() {\n        Range<Character> chars = Range.between('a', 'z');\n        assertTrue(chars.contains('b'));\n        assertFalse(chars.contains('B'));\n    }",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 40)",
            "(line 111,col 9)-(line 111,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testEqualsObject()",
        "snippet": "    public void testEqualsObject() {\n        assertEquals(byteRange, byteRange);\n        assertEquals(byteRange, byteRange2);\n        assertEquals(byteRange2, byteRange2);\n        assertTrue(byteRange.equals(byteRange));\n        assertTrue(byteRange2.equals(byteRange2));\n        assertTrue(byteRange3.equals(byteRange3));\n        assertFalse(byteRange2.equals(byteRange3));\n        assertFalse(byteRange2.equals(null));\n        assertFalse(byteRange2.equals(\"Ni!\"));\n    }",
        "begin_line": 116,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 43)",
            "(line 118,col 9)-(line 118,col 44)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 48)",
            "(line 121,col 9)-(line 121,col 50)",
            "(line 122,col 9)-(line 122,col 50)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 45)",
            "(line 125,col 9)-(line 125,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        assertEquals(byteRange.hashCode(), byteRange2.hashCode());\n        assertFalse(byteRange.hashCode() == byteRange3.hashCode());\n\n        assertEquals(intRange.hashCode(), intRange.hashCode());\n        assertTrue(intRange.hashCode() != 0);\n    }",
        "begin_line": 128,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 66)",
            "(line 130,col 9)-(line 130,col 67)",
            "(line 132,col 9)-(line 132,col 63)",
            "(line 133,col 9)-(line 133,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testToString()",
        "snippet": "    public void testToString() {\n        assertNotNull(byteRange.toString());\n\n        String str = intRange.toString();\n        assertEquals(\"Range[10,20]\", str);\n//        assertSame(str, intRange.toString());  // no longer passes - does it matter?\n        assertEquals(\"Range[-20,-10]\", Range.between(-20, -10).toString());\n    }",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 44)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 140,col 9)-(line 140,col 42)",
            "(line 142,col 9)-(line 142,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testGetMinimum()",
        "snippet": "    public void testGetMinimum() {\n        assertEquals(10, (int) intRange.getMinimum());\n        assertEquals(10L, (long) longRange.getMinimum());\n        assertEquals(10f, floatRange.getMinimum(), 0.00001f);\n        assertEquals(10d, doubleRange.getMinimum(), 0.00001d);\n    }",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 54)",
            "(line 149,col 9)-(line 149,col 57)",
            "(line 150,col 9)-(line 150,col 61)",
            "(line 151,col 9)-(line 151,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testGetMaximum()",
        "snippet": "    public void testGetMaximum() {\n        assertEquals(20, (int) intRange.getMaximum());\n        assertEquals(20L, (long) longRange.getMaximum());\n        assertEquals(20f, floatRange.getMaximum(), 0.00001f);\n        assertEquals(20d, doubleRange.getMaximum(), 0.00001d);\n    }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 54)",
            "(line 156,col 9)-(line 156,col 57)",
            "(line 157,col 9)-(line 157,col 61)",
            "(line 158,col 9)-(line 158,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testContains()",
        "snippet": "    public void testContains() {\n        assertFalse(intRange.contains(null));\n        \n        assertFalse(intRange.contains(5));\n        assertTrue(intRange.contains(10));\n        assertTrue(intRange.contains(15));\n        assertTrue(intRange.contains(20));\n        assertFalse(intRange.contains(25));\n    }",
        "begin_line": 161,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 45)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testElementBefore()",
        "snippet": "    public void testElementBefore() {\n        assertFalse(intRange.elementBefore(null));\n        \n        assertTrue(intRange.elementBefore(5));\n        assertFalse(intRange.elementBefore(10));\n        assertFalse(intRange.elementBefore(15));\n        assertFalse(intRange.elementBefore(20));\n        assertFalse(intRange.elementBefore(25));\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 50)",
            "(line 174,col 9)-(line 174,col 46)",
            "(line 175,col 9)-(line 175,col 48)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 178,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testElementAfter()",
        "snippet": "    public void testElementAfter() {\n        assertFalse(intRange.elementAfter(null));\n        \n        assertFalse(intRange.elementAfter(5));\n        assertFalse(intRange.elementAfter(10));\n        assertFalse(intRange.elementAfter(15));\n        assertFalse(intRange.elementAfter(20));\n        assertTrue(intRange.elementAfter(25));\n    }",
        "begin_line": 181,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 49)",
            "(line 184,col 9)-(line 184,col 46)",
            "(line 185,col 9)-(line 185,col 47)",
            "(line 186,col 9)-(line 186,col 47)",
            "(line 187,col 9)-(line 187,col 47)",
            "(line 188,col 9)-(line 188,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testElementCompareTo()",
        "snippet": "    public void testElementCompareTo() {\n        try {\n            intRange.elementCompareTo(null);\n            fail(\"NullPointerException should have been thrown\");\n        } catch(NullPointerException npe) {\n            // expected\n        }\n        \n        assertEquals(-1, intRange.elementCompareTo(5));\n        assertEquals(0, intRange.elementCompareTo(10));\n        assertEquals(0, intRange.elementCompareTo(15));\n        assertEquals(0, intRange.elementCompareTo(20));\n        assertEquals(1, intRange.elementCompareTo(25));\n    }",
        "begin_line": 191,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 197,col 9)",
            "(line 199,col 9)-(line 199,col 55)",
            "(line 200,col 9)-(line 200,col 55)",
            "(line 201,col 9)-(line 201,col 55)",
            "(line 202,col 9)-(line 202,col 55)",
            "(line 203,col 9)-(line 203,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testContainsRange()",
        "snippet": "    public void testContainsRange() {\n\n        // null handling\n        assertFalse(intRange.containsRange(null));\n\n        // easy inside range\n        assertTrue(intRange.containsRange(Range.between(12, 18)));\n\n        // outside range on each side\n        assertFalse(intRange.containsRange(Range.between(32, 45)));\n        assertFalse(intRange.containsRange(Range.between(2, 8)));\n\n        // equals range\n        assertTrue(intRange.containsRange(Range.between(10, 20)));\n\n        // overlaps\n        assertFalse(intRange.containsRange(Range.between(9, 14)));\n        assertFalse(intRange.containsRange(Range.between(16, 21)));\n\n        // touches lower boundary\n        assertTrue(intRange.containsRange(Range.between(10, 19)));\n        assertFalse(intRange.containsRange(Range.between(10, 21)));\n\n        // touches upper boundary\n        assertTrue(intRange.containsRange(Range.between(11, 20)));\n        assertFalse(intRange.containsRange(Range.between(9, 20)));\n        \n        // negative\n        assertFalse(intRange.containsRange(Range.between(-11, -18)));\n\n    }",
        "begin_line": 208,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 50)",
            "(line 214,col 9)-(line 214,col 66)",
            "(line 217,col 9)-(line 217,col 67)",
            "(line 218,col 9)-(line 218,col 65)",
            "(line 221,col 9)-(line 221,col 66)",
            "(line 224,col 9)-(line 224,col 66)",
            "(line 225,col 9)-(line 225,col 67)",
            "(line 228,col 9)-(line 228,col 66)",
            "(line 229,col 9)-(line 229,col 67)",
            "(line 232,col 9)-(line 232,col 66)",
            "(line 233,col 9)-(line 233,col 66)",
            "(line 236,col 9)-(line 236,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testOverlapsRange()",
        "snippet": "    public void testOverlapsRange() {\n\n        // null handling\n        assertFalse(intRange.overlapsRange(null));\n\n        // easy inside range\n        assertTrue(intRange.overlapsRange(Range.between(12, 18)));\n\n        // outside range on each side\n        assertFalse(intRange.overlapsRange(Range.between(32, 45)));\n        assertFalse(intRange.overlapsRange(Range.between(2, 8)));\n\n        // equals range\n        assertTrue(intRange.overlapsRange(Range.between(10, 20)));\n\n        // overlaps\n        assertTrue(intRange.overlapsRange(Range.between(9, 14)));\n        assertTrue(intRange.overlapsRange(Range.between(16, 21)));\n\n        // touches lower boundary\n        assertTrue(intRange.overlapsRange(Range.between(10, 19)));\n        assertTrue(intRange.overlapsRange(Range.between(10, 21)));\n\n        // touches upper boundary\n        assertTrue(intRange.overlapsRange(Range.between(11, 20)));\n        assertTrue(intRange.overlapsRange(Range.between(9, 20)));\n        \n        // negative\n        assertFalse(intRange.overlapsRange(Range.between(-11, -18)));\n\n    }",
        "begin_line": 240,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 50)",
            "(line 246,col 9)-(line 246,col 66)",
            "(line 249,col 9)-(line 249,col 67)",
            "(line 250,col 9)-(line 250,col 65)",
            "(line 253,col 9)-(line 253,col 66)",
            "(line 256,col 9)-(line 256,col 65)",
            "(line 257,col 9)-(line 257,col 66)",
            "(line 260,col 9)-(line 260,col 66)",
            "(line 261,col 9)-(line 261,col 66)",
            "(line 264,col 9)-(line 264,col 66)",
            "(line 265,col 9)-(line 265,col 65)",
            "(line 268,col 9)-(line 268,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RangeTest.java",
        "signature": "org.apache.commons.lang3.RangeTest.testSerializing()",
        "snippet": "    public void testSerializing() {\n        SerializationUtils.clone(intRange);\n    }",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.StringUtilsSubstringTest(java.lang.String)",
        "snippet": "    public StringUtilsSubstringTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringInt()",
        "snippet": "    public void testSubstring_StringInt() {\n        assertEquals(null, StringUtils.substring(null, 0));\n        assertEquals(\"\", StringUtils.substring(\"\", 0));\n        assertEquals(\"\", StringUtils.substring(\"\", 2));\n        \n        assertEquals(\"\", StringUtils.substring(SENTENCE, 80));\n        assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));\n        assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));\n        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));\n        assertEquals(\"abc\", StringUtils.substring(\"abc\", -4));\n        assertEquals(\"abc\", StringUtils.substring(\"abc\", -3));\n        assertEquals(\"bc\", StringUtils.substring(\"abc\", -2));\n        assertEquals(\"c\", StringUtils.substring(\"abc\", -1));\n        assertEquals(\"abc\", StringUtils.substring(\"abc\", 0));\n        assertEquals(\"bc\", StringUtils.substring(\"abc\", 1));\n        assertEquals(\"c\", StringUtils.substring(\"abc\", 2));\n        assertEquals(\"\", StringUtils.substring(\"abc\", 3));\n        assertEquals(\"\", StringUtils.substring(\"abc\", 4));\n    }",
        "begin_line": 43,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 59)",
            "(line 45,col 9)-(line 45,col 55)",
            "(line 46,col 9)-(line 46,col 55)",
            "(line 48,col 9)-(line 48,col 62)",
            "(line 49,col 9)-(line 49,col 62)",
            "(line 50,col 9)-(line 50,col 63)",
            "(line 51,col 9)-(line 51,col 67)",
            "(line 52,col 9)-(line 52,col 62)",
            "(line 53,col 9)-(line 53,col 62)",
            "(line 54,col 9)-(line 54,col 61)",
            "(line 55,col 9)-(line 55,col 60)",
            "(line 56,col 9)-(line 56,col 61)",
            "(line 57,col 9)-(line 57,col 60)",
            "(line 58,col 9)-(line 58,col 59)",
            "(line 59,col 9)-(line 59,col 58)",
            "(line 60,col 9)-(line 60,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringIntInt()",
        "snippet": "    public void testSubstring_StringIntInt() {\n        assertEquals(null, StringUtils.substring(null, 0, 0));\n        assertEquals(null, StringUtils.substring(null, 1, 2));\n        assertEquals(\"\", StringUtils.substring(\"\", 0, 0));\n        assertEquals(\"\", StringUtils.substring(\"\", 1, 2));\n        assertEquals(\"\", StringUtils.substring(\"\", -2, -1));\n        \n        assertEquals(\"\", StringUtils.substring(SENTENCE, 8, 6));\n        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));\n        assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, 3));\n        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));\n        assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, -8));\n        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));\n        assertEquals(\"\", StringUtils.substring(SENTENCE, 2, 2));\n        assertEquals(\"b\",StringUtils.substring(\"abc\", -2, -1));\n    }",
        "begin_line": 63,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 62)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 66,col 9)-(line 66,col 58)",
            "(line 67,col 9)-(line 67,col 58)",
            "(line 68,col 9)-(line 68,col 60)",
            "(line 70,col 9)-(line 70,col 64)",
            "(line 71,col 9)-(line 71,col 65)",
            "(line 72,col 9)-(line 72,col 66)",
            "(line 73,col 9)-(line 73,col 66)",
            "(line 74,col 9)-(line 74,col 67)",
            "(line 75,col 9)-(line 75,col 71)",
            "(line 76,col 9)-(line 76,col 64)",
            "(line 77,col 9)-(line 77,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testLeft_String()",
        "snippet": "    public void testLeft_String() {\n        assertSame(null, StringUtils.left(null, -1));\n        assertSame(null, StringUtils.left(null, 0));\n        assertSame(null, StringUtils.left(null, 2));\n        \n        assertEquals(\"\", StringUtils.left(\"\", -1));\n        assertEquals(\"\", StringUtils.left(\"\", 0));\n        assertEquals(\"\", StringUtils.left(\"\", 2));\n        \n        assertEquals(\"\", StringUtils.left(FOOBAR, -1));\n        assertEquals(\"\", StringUtils.left(FOOBAR, 0));\n        assertEquals(FOO, StringUtils.left(FOOBAR, 3));\n        assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\n    }",
        "begin_line": 80,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 82,col 52)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 85,col 9)-(line 85,col 51)",
            "(line 86,col 9)-(line 86,col 50)",
            "(line 87,col 9)-(line 87,col 50)",
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 54)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testRight_String()",
        "snippet": "    public void testRight_String() {\n        assertSame(null, StringUtils.right(null, -1));\n        assertSame(null, StringUtils.right(null, 0));\n        assertSame(null, StringUtils.right(null, 2));\n        \n        assertEquals(\"\", StringUtils.right(\"\", -1));\n        assertEquals(\"\", StringUtils.right(\"\", 0));\n        assertEquals(\"\", StringUtils.right(\"\", 2));\n        \n        assertEquals(\"\", StringUtils.right(FOOBAR, -1));\n        assertEquals(\"\", StringUtils.right(FOOBAR, 0));\n        assertEquals(BAR, StringUtils.right(FOOBAR, 3));\n        assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\n    }",
        "begin_line": 95,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 54)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 53)",
            "(line 100,col 9)-(line 100,col 52)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 51)",
            "(line 104,col 9)-(line 104,col 56)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 56)",
            "(line 107,col 9)-(line 107,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testMid_String()",
        "snippet": "    public void testMid_String() {\n        assertSame(null, StringUtils.mid(null, -1, 0));\n        assertSame(null, StringUtils.mid(null, 0, -1));\n        assertSame(null, StringUtils.mid(null, 3, 0));\n        assertSame(null, StringUtils.mid(null, 3, 2));\n        \n        assertEquals(\"\", StringUtils.mid(\"\", 0, -1));\n        assertEquals(\"\", StringUtils.mid(\"\", 0, 0));\n        assertEquals(\"\", StringUtils.mid(\"\", 0, 2));\n        \n        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, -1));\n        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, 0));\n        assertEquals(\"b\", StringUtils.mid(FOOBAR, 3, 1));\n        assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));\n        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));\n        assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));\n        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));\n        assertEquals(\"\", StringUtils.mid(FOOBAR, 9, 3));\n        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));\n    }",
        "begin_line": 110,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 55)",
            "(line 112,col 9)-(line 112,col 55)",
            "(line 113,col 9)-(line 113,col 54)",
            "(line 114,col 9)-(line 114,col 54)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 52)",
            "(line 118,col 9)-(line 118,col 52)",
            "(line 120,col 9)-(line 120,col 57)",
            "(line 121,col 9)-(line 121,col 56)",
            "(line 122,col 9)-(line 122,col 57)",
            "(line 123,col 9)-(line 123,col 57)",
            "(line 124,col 9)-(line 124,col 57)",
            "(line 125,col 9)-(line 125,col 61)",
            "(line 126,col 9)-(line 126,col 58)",
            "(line 127,col 9)-(line 127,col 56)",
            "(line 128,col 9)-(line 128,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBefore_StringString()",
        "snippet": "    public void testSubstringBefore_StringString() {\n        assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", \"XX\"));\n\n        assertEquals(null, StringUtils.substringBefore(null, null));\n        assertEquals(null, StringUtils.substringBefore(null, \"\"));\n        assertEquals(null, StringUtils.substringBefore(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"\", null));\n        assertEquals(\"\", StringUtils.substringBefore(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"\", \"XX\"));\n        \n        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", null));\n        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", \"b\"));\n        assertEquals(\"f\", StringUtils.substringBefore(\"foot\", \"o\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"a\"));\n        assertEquals(\"a\", StringUtils.substringBefore(\"abcba\", \"b\"));\n        assertEquals(\"ab\", StringUtils.substringBefore(\"abc\", \"c\"));\n        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"\"));\n    }",
        "begin_line": 132,
        "end_line": 149,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 80)",
            "(line 135,col 9)-(line 135,col 68)",
            "(line 136,col 9)-(line 136,col 66)",
            "(line 137,col 9)-(line 137,col 68)",
            "(line 138,col 9)-(line 138,col 64)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 142,col 9)-(line 142,col 70)",
            "(line 143,col 9)-(line 143,col 69)",
            "(line 144,col 9)-(line 144,col 68)",
            "(line 145,col 9)-(line 145,col 66)",
            "(line 146,col 9)-(line 146,col 69)",
            "(line 147,col 9)-(line 147,col 68)",
            "(line 148,col 9)-(line 148,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfter_StringString()",
        "snippet": "    public void testSubstringAfter_StringString() {\n        assertEquals(\"barXXbaz\", StringUtils.substringAfter(\"fooXXbarXXbaz\", \"XX\"));\n        \n        assertEquals(null, StringUtils.substringAfter(null, null));\n        assertEquals(null, StringUtils.substringAfter(null, \"\"));\n        assertEquals(null, StringUtils.substringAfter(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"\", null));\n        assertEquals(\"\", StringUtils.substringAfter(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"\", \"XX\"));\n        \n        assertEquals(\"\", StringUtils.substringAfter(\"foo\", null));\n        assertEquals(\"ot\", StringUtils.substringAfter(\"foot\", \"o\"));\n        assertEquals(\"bc\", StringUtils.substringAfter(\"abc\", \"a\"));\n        assertEquals(\"cba\", StringUtils.substringAfter(\"abcba\", \"b\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"c\"));\n        assertEquals(\"abc\", StringUtils.substringAfter(\"abc\", \"\"));\n        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"d\"));\n    }",
        "begin_line": 151,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 84)",
            "(line 154,col 9)-(line 154,col 67)",
            "(line 155,col 9)-(line 155,col 65)",
            "(line 156,col 9)-(line 156,col 67)",
            "(line 157,col 9)-(line 157,col 63)",
            "(line 158,col 9)-(line 158,col 61)",
            "(line 159,col 9)-(line 159,col 63)",
            "(line 161,col 9)-(line 161,col 66)",
            "(line 162,col 9)-(line 162,col 68)",
            "(line 163,col 9)-(line 163,col 67)",
            "(line 164,col 9)-(line 164,col 70)",
            "(line 165,col 9)-(line 165,col 65)",
            "(line 166,col 9)-(line 166,col 67)",
            "(line 167,col 9)-(line 167,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBeforeLast_StringString()",
        "snippet": "    public void testSubstringBeforeLast_StringString() {\n        assertEquals(\"fooXXbar\", StringUtils.substringBeforeLast(\"fooXXbarXXbaz\", \"XX\"));\n\n        assertEquals(null, StringUtils.substringBeforeLast(null, null));\n        assertEquals(null, StringUtils.substringBeforeLast(null, \"\"));\n        assertEquals(null, StringUtils.substringBeforeLast(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", null));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"XX\"));\n\n        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", null));\n        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", \"b\"));\n        assertEquals(\"fo\", StringUtils.substringBeforeLast(\"foo\", \"o\"));\n        assertEquals(\"abc\\r\\n\", StringUtils.substringBeforeLast(\"abc\\r\\n\", \"d\"));\n        assertEquals(\"abc\", StringUtils.substringBeforeLast(\"abcdabc\", \"d\"));\n        assertEquals(\"abcdabc\", StringUtils.substringBeforeLast(\"abcdabcd\", \"d\"));\n        assertEquals(\"a\", StringUtils.substringBeforeLast(\"abc\", \"b\"));\n        assertEquals(\"abc \", StringUtils.substringBeforeLast(\"abc \\n\", \"\\n\"));\n        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", null));\n        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", \"\"));\n        assertEquals(\"\", StringUtils.substringBeforeLast(\"a\", \"a\"));\n    }",
        "begin_line": 170,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 89)",
            "(line 173,col 9)-(line 173,col 72)",
            "(line 174,col 9)-(line 174,col 70)",
            "(line 175,col 9)-(line 175,col 72)",
            "(line 176,col 9)-(line 176,col 68)",
            "(line 177,col 9)-(line 177,col 66)",
            "(line 178,col 9)-(line 178,col 68)",
            "(line 180,col 9)-(line 180,col 74)",
            "(line 181,col 9)-(line 181,col 73)",
            "(line 182,col 9)-(line 182,col 72)",
            "(line 183,col 9)-(line 183,col 81)",
            "(line 184,col 9)-(line 184,col 77)",
            "(line 185,col 9)-(line 185,col 82)",
            "(line 186,col 9)-(line 186,col 71)",
            "(line 187,col 9)-(line 187,col 78)",
            "(line 188,col 9)-(line 188,col 70)",
            "(line 189,col 9)-(line 189,col 68)",
            "(line 190,col 9)-(line 190,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfterLast_StringString()",
        "snippet": "    public void testSubstringAfterLast_StringString() {\n        assertEquals(\"baz\", StringUtils.substringAfterLast(\"fooXXbarXXbaz\", \"XX\"));\n\n        assertEquals(null, StringUtils.substringAfterLast(null, null));\n        assertEquals(null, StringUtils.substringAfterLast(null, \"\"));\n        assertEquals(null, StringUtils.substringAfterLast(null, \"XX\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", null));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"a\"));\n\n        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", null));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", \"b\"));\n        assertEquals(\"t\", StringUtils.substringAfterLast(\"foot\", \"o\"));\n        assertEquals(\"bc\", StringUtils.substringAfterLast(\"abc\", \"a\"));\n        assertEquals(\"a\", StringUtils.substringAfterLast(\"abcba\", \"b\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"c\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"d\"));\n        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"\"));\n    }        ",
        "begin_line": 193,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 83)",
            "(line 196,col 9)-(line 196,col 71)",
            "(line 197,col 9)-(line 197,col 69)",
            "(line 198,col 9)-(line 198,col 71)",
            "(line 199,col 9)-(line 199,col 67)",
            "(line 200,col 9)-(line 200,col 65)",
            "(line 201,col 9)-(line 201,col 66)",
            "(line 203,col 9)-(line 203,col 70)",
            "(line 204,col 9)-(line 204,col 69)",
            "(line 205,col 9)-(line 205,col 71)",
            "(line 206,col 9)-(line 206,col 71)",
            "(line 207,col 9)-(line 207,col 72)",
            "(line 208,col 9)-(line 208,col 69)",
            "(line 209,col 9)-(line 209,col 66)",
            "(line 210,col 9)-(line 210,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringString()",
        "snippet": "    public void testSubstringBetween_StringString() {\n        assertEquals(null, StringUtils.substringBetween(null, \"tag\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \"));\n        assertEquals(null, StringUtils.substringBetween(\"abc\", null));\n        assertEquals(\"\", StringUtils.substringBetween(\"abc\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"abc\", \"a\"));\n        assertEquals(\"bc\", StringUtils.substringBetween(\"abca\", \"a\"));\n        assertEquals(\"bc\", StringUtils.substringBetween(\"abcabca\", \"a\"));\n        assertEquals(\"bar\", StringUtils.substringBetween(\"\\nbar\\n\", \"\\n\"));\n    }",
        "begin_line": 214,
        "end_line": 225,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 70)",
            "(line 216,col 9)-(line 216,col 63)",
            "(line 217,col 9)-(line 217,col 68)",
            "(line 218,col 9)-(line 218,col 68)",
            "(line 219,col 9)-(line 219,col 70)",
            "(line 220,col 9)-(line 220,col 66)",
            "(line 221,col 9)-(line 221,col 69)",
            "(line 222,col 9)-(line 222,col 70)",
            "(line 223,col 9)-(line 223,col 73)",
            "(line 224,col 9)-(line 224,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringStringString()",
        "snippet": "    public void testSubstringBetween_StringStringString() {\n        assertEquals(null, StringUtils.substringBetween(null, \"\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"\", null, \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\", \"\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"foo\", \"\", \"\"));\n        assertEquals(null, StringUtils.substringBetween(\"foo\", \"\", \"]\"));\n        assertEquals(null, StringUtils.substringBetween(\"foo\", \"[\", \"]\"));\n        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \", \"  \"));\n        assertEquals(\"bar\", StringUtils.substringBetween(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );\n    }",
        "begin_line": 227,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 71)",
            "(line 229,col 9)-(line 229,col 71)",
            "(line 230,col 9)-(line 230,col 71)",
            "(line 231,col 9)-(line 231,col 67)",
            "(line 232,col 9)-(line 232,col 70)",
            "(line 233,col 9)-(line 233,col 73)",
            "(line 234,col 9)-(line 234,col 74)",
            "(line 235,col 9)-(line 235,col 74)",
            "(line 236,col 9)-(line 236,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringsBetween_StringStringString()",
        "snippet": "    public void testSubstringsBetween_StringStringString() {\n\n        String[] results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", \"]\");\n        assertEquals(3, results.length);\n        assertEquals(\"one\", results[0]);\n        assertEquals(\"two\", results[1]);\n        assertEquals(\"three\", results[2]);\n\n        results = StringUtils.substringsBetween(\"[one], [two], three\", \"[\", \"]\");\n        assertEquals(2, results.length);\n        assertEquals(\"one\", results[0]);\n        assertEquals(\"two\", results[1]);\n\n        results = StringUtils.substringsBetween(\"[one], [two], three]\", \"[\", \"]\");\n        assertEquals(2, results.length);\n        assertEquals(\"one\", results[0]);\n        assertEquals(\"two\", results[1]);\n\n        results = StringUtils.substringsBetween(\"[one], two], three]\", \"[\", \"]\");\n        assertEquals(1, results.length);\n        assertEquals(\"one\", results[0]);\n\n        results = StringUtils.substringsBetween(\"one], two], [three]\", \"[\", \"]\");\n        assertEquals(1, results.length);\n        assertEquals(\"three\", results[0]);\n\n        // 'ab hello ba' will match, but 'ab non ba' won't\n        // this is because the 'a' is shared between the two and can't be matched twice\n        results = StringUtils.substringsBetween(\"aabhellobabnonba\", \"ab\", \"ba\");\n        assertEquals(1, results.length);\n        assertEquals(\"hello\", results[0]);\n\n        results = StringUtils.substringsBetween(\"one, two, three\", \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one, two, three\", \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"one, two, three]\", \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", null);\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one], [two], [three]\", null, \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"\", \"\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(null, \"[\", \"]\");\n        assertNull(results);\n\n        results = StringUtils.substringsBetween(\"\", \"[\", \"]\");\n        assertEquals(0, results.length);\n    }",
        "begin_line": 242,
        "end_line": 297,
        "comment": "\n     * Tests the substringsBetween method that returns an String Array of substrings.\n     ",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 92)",
            "(line 245,col 9)-(line 245,col 40)",
            "(line 246,col 9)-(line 246,col 40)",
            "(line 247,col 9)-(line 247,col 40)",
            "(line 248,col 9)-(line 248,col 42)",
            "(line 250,col 9)-(line 250,col 81)",
            "(line 251,col 9)-(line 251,col 40)",
            "(line 252,col 9)-(line 252,col 40)",
            "(line 253,col 9)-(line 253,col 40)",
            "(line 255,col 9)-(line 255,col 82)",
            "(line 256,col 9)-(line 256,col 40)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 258,col 9)-(line 258,col 40)",
            "(line 260,col 9)-(line 260,col 81)",
            "(line 261,col 9)-(line 261,col 40)",
            "(line 262,col 9)-(line 262,col 40)",
            "(line 264,col 9)-(line 264,col 81)",
            "(line 265,col 9)-(line 265,col 40)",
            "(line 266,col 9)-(line 266,col 42)",
            "(line 270,col 9)-(line 270,col 80)",
            "(line 271,col 9)-(line 271,col 40)",
            "(line 272,col 9)-(line 272,col 42)",
            "(line 274,col 9)-(line 274,col 77)",
            "(line 275,col 9)-(line 275,col 28)",
            "(line 277,col 9)-(line 277,col 78)",
            "(line 278,col 9)-(line 278,col 28)",
            "(line 280,col 9)-(line 280,col 78)",
            "(line 281,col 9)-(line 281,col 28)",
            "(line 283,col 9)-(line 283,col 84)",
            "(line 284,col 9)-(line 284,col 28)",
            "(line 286,col 9)-(line 286,col 84)",
            "(line 287,col 9)-(line 287,col 28)",
            "(line 289,col 9)-(line 289,col 81)",
            "(line 290,col 9)-(line 290,col 28)",
            "(line 292,col 9)-(line 292,col 64)",
            "(line 293,col 9)-(line 293,col 28)",
            "(line 295,col 9)-(line 295,col 62)",
            "(line 296,col 9)-(line 296,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsSubstringTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsSubstringTest.testCountMatches_String()",
        "snippet": "    public void testCountMatches_String() {\n        assertEquals(0, StringUtils.countMatches(null, null));\n        assertEquals(0, StringUtils.countMatches(\"blah\", null));\n        assertEquals(0, StringUtils.countMatches(null, \"DD\"));\n\n        assertEquals(0, StringUtils.countMatches(\"x\", \"\"));\n        assertEquals(0, StringUtils.countMatches(\"\", \"\"));\n\n        assertEquals(3, \n             StringUtils.countMatches(\"one long someone sentence of one\", \"one\"));\n        assertEquals(0, \n             StringUtils.countMatches(\"one long someone sentence of one\", \"two\"));\n        assertEquals(4, \n             StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n    }",
        "begin_line": 300,
        "end_line": 314,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 62)",
            "(line 302,col 9)-(line 302,col 64)",
            "(line 303,col 9)-(line 303,col 62)",
            "(line 305,col 9)-(line 305,col 59)",
            "(line 306,col 9)-(line 306,col 58)",
            "(line 308,col 9)-(line 309,col 82)",
            "(line 310,col 9)-(line 311,col 82)",
            "(line 312,col 9)-(line 313,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.ObjectUtilsTest(java.lang.String)",
        "snippet": "    public ObjectUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ObjectUtils());\n        Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 41)",
            "(line 46,col 9)-(line 46,col 76)",
            "(line 47,col 9)-(line 47,col 37)",
            "(line 48,col 9)-(line 48,col 70)",
            "(line 49,col 9)-(line 49,col 80)",
            "(line 50,col 9)-(line 50,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIsNull()",
        "snippet": "    public void testIsNull() {\n        Object o = FOO;\n        Object dflt = BAR;\n        assertSame(\"dflt was not returned when o was null\", dflt, ObjectUtils.defaultIfNull(null, dflt));\n        assertSame(\"dflt was returned when o was not null\", o, ObjectUtils.defaultIfNull(o, dflt));\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 23)",
            "(line 56,col 9)-(line 56,col 26)",
            "(line 57,col 9)-(line 57,col 105)",
            "(line 58,col 9)-(line 58,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testFirstNonNull()",
        "snippet": "    public void testFirstNonNull() {\n        assertEquals(null, ObjectUtils.firstNonNull(null, null));\n        assertEquals(\"\", ObjectUtils.firstNonNull(null, \"\"));\n        String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, \"123\", \"456\");\n        assertEquals(\"123\", firstNonNullGenerics);\n        assertEquals(\"123\", ObjectUtils.firstNonNull(\"123\", null, \"456\", null));\n        assertEquals(null, ObjectUtils.firstNonNull());\n        assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));\n        assertNull(ObjectUtils.firstNonNull());\n        assertNull(ObjectUtils.firstNonNull(null, null));\n//        assertSame(\"123\", ObjectUtils.firstNonNull(null, ObjectUtils.NULL, \"123\", \"456\"));\n//        assertSame(\"456\", ObjectUtils.firstNonNull(ObjectUtils.NULL, \"456\", \"123\", null));\n//        assertNull(ObjectUtils.firstNonNull(null, null, ObjectUtils.NULL));\n        assertNull(ObjectUtils.firstNonNull((Object) null));\n        assertNull(ObjectUtils.firstNonNull((Object[]) null));\n    }",
        "begin_line": 61,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 65)",
            "(line 63,col 9)-(line 63,col 61)",
            "(line 64,col 9)-(line 64,col 89)",
            "(line 65,col 9)-(line 65,col 50)",
            "(line 66,col 9)-(line 66,col 80)",
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 73)",
            "(line 69,col 9)-(line 69,col 47)",
            "(line 70,col 9)-(line 70,col 57)",
            "(line 74,col 9)-(line 74,col 60)",
            "(line 75,col 9)-(line 75,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertTrue(\"ObjectUtils.equals(null, null) returned false\", ObjectUtils.equals(null, null));\n        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", null) returned true\", !ObjectUtils.equals(FOO, null));\n        assertTrue(\"ObjectUtils.equals(null, \\\"bar\\\") returned true\", !ObjectUtils.equals(null, BAR));\n        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"bar\\\") returned true\", !ObjectUtils.equals(FOO, BAR));\n        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"foo\\\") returned false\", ObjectUtils.equals(FOO, FOO));\n    }",
        "begin_line": 79,
        "end_line": 85,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 100)",
            "(line 81,col 9)-(line 81,col 102)",
            "(line 82,col 9)-(line 82,col 102)",
            "(line 83,col 9)-(line 83,col 104)",
            "(line 84,col 9)-(line 84,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        assertEquals(0, ObjectUtils.hashCode(null));\n        assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\n    }",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 52)",
            "(line 89,col 9)-(line 89,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIdentityToString()",
        "snippet": "    public void testIdentityToString() {\n        assertEquals(null, ObjectUtils.identityToString(null));\n        assertEquals(\n            \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n            ObjectUtils.identityToString(FOO));\n        Integer i = new Integer(90);\n        String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\n        assertEquals(expected, ObjectUtils.identityToString(i));\n        StringBuffer buffer = new StringBuffer();\n        ObjectUtils.identityToString(buffer, i);\n        assertEquals(expected, buffer.toString());\n\n        try {\n            ObjectUtils.identityToString(null, \"tmp\");\n            fail(\"NullPointerException expected\");\n        } catch(NullPointerException npe) {\n        }\n        try {\n            ObjectUtils.identityToString(new StringBuffer(), null);\n            fail(\"NullPointerException expected\");\n        } catch(NullPointerException npe) {\n        }\n    }",
        "begin_line": 133,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 63)",
            "(line 135,col 9)-(line 137,col 47)",
            "(line 138,col 9)-(line 138,col 36)",
            "(line 139,col 9)-(line 139,col 97)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 141,col 49)",
            "(line 142,col 9)-(line 142,col 48)",
            "(line 143,col 9)-(line 143,col 50)",
            "(line 145,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 154,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testToString_Object()",
        "snippet": "    public void testToString_Object() {\n        assertEquals(\"\", ObjectUtils.toString((Object) null) );\n        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );\n    }",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 63)",
            "(line 159,col 9)-(line 159,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testToString_ObjectString()",
        "snippet": "    public void testToString_ObjectString() {\n        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );\n        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );\n    }",
        "begin_line": 162,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 69)",
            "(line 164,col 9)-(line 164,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testNull()",
        "snippet": "    public void testNull() {\n        assertNotNull(ObjectUtils.NULL);\n        assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);\n        assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));\n    }",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 40)",
            "(line 169,col 9)-(line 169,col 65)",
            "(line 170,col 9)-(line 170,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMax()",
        "snippet": "    public void testMax() {\n        Calendar calendar = Calendar.getInstance();\n        Date nonNullComparable1 = calendar.getTime();\n        Date nonNullComparable2 = calendar.getTime();\n        \n        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n        Date minComparable = calendar.getTime();\n        \n        assertNotSame( nonNullComparable1, nonNullComparable2 );\n        \n        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );\n        assertSame( nonNullComparable2, ObjectUtils.max( nonNullComparable2, nonNullComparable1 ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );\n        assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );\n\n        assertNull( ObjectUtils.max((String)null, (String)null) );\n    }",
        "begin_line": 175,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 51)",
            "(line 177,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 53)",
            "(line 180,col 9)-(line 180,col 72)",
            "(line 181,col 9)-(line 181,col 48)",
            "(line 183,col 9)-(line 183,col 64)",
            "(line 185,col 9)-(line 185,col 86)",
            "(line 186,col 9)-(line 186,col 86)",
            "(line 187,col 9)-(line 187,col 100)",
            "(line 188,col 9)-(line 188,col 100)",
            "(line 189,col 9)-(line 189,col 95)",
            "(line 190,col 9)-(line 190,col 95)",
            "(line 192,col 9)-(line 192,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ObjectUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
        "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMin()",
        "snippet": "    public void testMin() {\n        Calendar calendar = Calendar.getInstance();\n        Date nonNullComparable1 = calendar.getTime();\n        Date nonNullComparable2 = calendar.getTime();\n        \n        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n        Date minComparable = calendar.getTime();\n        \n        assertNotSame( nonNullComparable1, nonNullComparable2 );\n        \n        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );\n        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );\n        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );\n        assertSame( nonNullComparable2, ObjectUtils.min( nonNullComparable2, nonNullComparable1 ) );\n        assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );\n        assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );\n\n        assertNull( ObjectUtils.min((String)null, (String)null) );\n    }",
        "begin_line": 195,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 51)",
            "(line 197,col 9)-(line 197,col 53)",
            "(line 198,col 9)-(line 198,col 53)",
            "(line 200,col 9)-(line 200,col 72)",
            "(line 201,col 9)-(line 201,col 48)",
            "(line 203,col 9)-(line 203,col 64)",
            "(line 205,col 9)-(line 205,col 86)",
            "(line 206,col 9)-(line 206,col 86)",
            "(line 207,col 9)-(line 207,col 100)",
            "(line 208,col 9)-(line 208,col 100)",
            "(line 209,col 9)-(line 209,col 90)",
            "(line 210,col 9)-(line 210,col 90)",
            "(line 212,col 9)-(line 212,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveObjectArray()",
        "snippet": "    public void testRemoveObjectArray() {\n        Object[] array;\n        array = ArrayUtils.remove(new Object[] {\"a\"}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 0);\n        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 1);\n        assertTrue(Arrays.equals(new Object[] {\"a\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new Object[] {\"a\", \"b\", \"c\"}, 1);\n        assertTrue(Arrays.equals(new Object[] {\"a\", \"c\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((Object[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 32,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 23)",
            "(line 34,col 9)-(line 34,col 57)",
            "(line 35,col 9)-(line 35,col 72)",
            "(line 36,col 9)-(line 36,col 72)",
            "(line 37,col 9)-(line 37,col 62)",
            "(line 38,col 9)-(line 38,col 61)",
            "(line 39,col 9)-(line 39,col 72)",
            "(line 40,col 9)-(line 40,col 62)",
            "(line 41,col 9)-(line 41,col 61)",
            "(line 42,col 9)-(line 42,col 72)",
            "(line 43,col 9)-(line 43,col 67)",
            "(line 44,col 9)-(line 44,col 66)",
            "(line 45,col 9)-(line 45,col 72)",
            "(line 46,col 9)-(line 49,col 48)",
            "(line 50,col 9)-(line 53,col 48)",
            "(line 54,col 9)-(line 57,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveNumberArray()",
        "snippet": "    public void testRemoveNumberArray(){\n        Number[] inarray = {Integer.valueOf(1),Long.valueOf(2),Byte.valueOf((byte) 3)};\n        assertEquals(3, inarray.length);\n        Number[] outarray;\n        outarray = ArrayUtils.remove(inarray, 1);\n        assertEquals(2, outarray.length);\n        assertEquals(Number.class, outarray.getClass().getComponentType());\n        outarray = ArrayUtils.remove(outarray, 1);\n        assertEquals(1, outarray.length);\n        assertEquals(Number.class, outarray.getClass().getComponentType());\n        outarray = ArrayUtils.remove(outarray, 0);\n        assertEquals(0, outarray.length);\n        assertEquals(Number.class, outarray.getClass().getComponentType());\n    }",
        "begin_line": 60,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 87)",
            "(line 62,col 9)-(line 62,col 40)",
            "(line 63,col 9)-(line 63,col 26)",
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 41)",
            "(line 66,col 9)-(line 66,col 75)",
            "(line 67,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 41)",
            "(line 69,col 9)-(line 69,col 75)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 41)",
            "(line 72,col 9)-(line 72,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveBooleanArray()",
        "snippet": "    public void testRemoveBooleanArray() {\n        boolean[] array;\n        array = ArrayUtils.remove(new boolean[] {true}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new boolean[] {true, false}, 0);\n        assertTrue(Arrays.equals(new boolean[] {false}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new boolean[] {true, false}, 1);\n        assertTrue(Arrays.equals(new boolean[] {true}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);\n        assertTrue(Arrays.equals(new boolean[] {true, true}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new boolean[] {true, false}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new boolean[] {true, false}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((boolean[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 75,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 24)",
            "(line 77,col 9)-(line 77,col 59)",
            "(line 78,col 9)-(line 78,col 73)",
            "(line 79,col 9)-(line 79,col 72)",
            "(line 80,col 9)-(line 80,col 66)",
            "(line 81,col 9)-(line 81,col 64)",
            "(line 82,col 9)-(line 82,col 72)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 63)",
            "(line 85,col 9)-(line 85,col 72)",
            "(line 86,col 9)-(line 86,col 72)",
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 72)",
            "(line 89,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 96,col 48)",
            "(line 97,col 9)-(line 100,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveByteArray()",
        "snippet": "    public void testRemoveByteArray() {\n        byte[] array;\n        array = ArrayUtils.remove(new byte[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new byte[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new byte[] {2}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new byte[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new byte[] {1}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new byte[] {1, 1}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new byte[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new byte[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((byte[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 103,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 21)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 70)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 108,col 56)",
            "(line 109,col 9)-(line 109,col 57)",
            "(line 110,col 9)-(line 110,col 69)",
            "(line 111,col 9)-(line 111,col 56)",
            "(line 112,col 9)-(line 112,col 57)",
            "(line 113,col 9)-(line 113,col 69)",
            "(line 114,col 9)-(line 114,col 59)",
            "(line 115,col 9)-(line 115,col 60)",
            "(line 116,col 9)-(line 116,col 69)",
            "(line 117,col 9)-(line 120,col 48)",
            "(line 121,col 9)-(line 124,col 48)",
            "(line 125,col 9)-(line 128,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveCharArray()",
        "snippet": "    public void testRemoveCharArray() {\n        char[] array;\n        array = ArrayUtils.remove(new char[] {'a'}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);\n        assertTrue(Arrays.equals(new char[] {'b'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);\n        assertTrue(Arrays.equals(new char[] {'a'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);\n        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new char[] {'a', 'b'}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new char[] {'a', 'b'}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((char[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 131,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 21)",
            "(line 133,col 9)-(line 133,col 55)",
            "(line 134,col 9)-(line 134,col 70)",
            "(line 135,col 9)-(line 135,col 74)",
            "(line 136,col 9)-(line 136,col 60)",
            "(line 137,col 9)-(line 137,col 59)",
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 60)",
            "(line 140,col 9)-(line 140,col 59)",
            "(line 141,col 9)-(line 141,col 74)",
            "(line 142,col 9)-(line 142,col 65)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 74)",
            "(line 145,col 9)-(line 148,col 48)",
            "(line 149,col 9)-(line 152,col 48)",
            "(line 153,col 9)-(line 156,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveDoubleArray()",
        "snippet": "    public void testRemoveDoubleArray() {\n        double[] array;\n        array = ArrayUtils.remove(new double[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new double[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new double[] {2}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new double[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new double[] {1}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new double[] {1, 1}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new double[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new double[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((double[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 159,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 23)",
            "(line 161,col 9)-(line 161,col 55)",
            "(line 162,col 9)-(line 162,col 72)",
            "(line 163,col 9)-(line 163,col 71)",
            "(line 164,col 9)-(line 164,col 58)",
            "(line 165,col 9)-(line 165,col 59)",
            "(line 166,col 9)-(line 166,col 71)",
            "(line 167,col 9)-(line 167,col 58)",
            "(line 168,col 9)-(line 168,col 59)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 61)",
            "(line 171,col 9)-(line 171,col 62)",
            "(line 172,col 9)-(line 172,col 71)",
            "(line 173,col 9)-(line 176,col 48)",
            "(line 177,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 184,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveFloatArray()",
        "snippet": "    public void testRemoveFloatArray() {\n        float[] array;\n        array = ArrayUtils.remove(new float[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new float[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new float[] {2}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new float[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new float[] {1}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new float[] {1, 1}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new float[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new float[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((float[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 187,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 22)",
            "(line 189,col 9)-(line 189,col 54)",
            "(line 190,col 9)-(line 190,col 71)",
            "(line 191,col 9)-(line 191,col 70)",
            "(line 192,col 9)-(line 192,col 57)",
            "(line 193,col 9)-(line 193,col 58)",
            "(line 194,col 9)-(line 194,col 70)",
            "(line 195,col 9)-(line 195,col 57)",
            "(line 196,col 9)-(line 196,col 58)",
            "(line 197,col 9)-(line 197,col 70)",
            "(line 198,col 9)-(line 198,col 60)",
            "(line 199,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 70)",
            "(line 201,col 9)-(line 204,col 48)",
            "(line 205,col 9)-(line 208,col 48)",
            "(line 209,col 9)-(line 212,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveIntArray()",
        "snippet": "    public void testRemoveIntArray() {\n        int[] array;\n        array = ArrayUtils.remove(new int[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new int[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new int[] {2}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new int[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new int[] {1}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new int[] {1, 1}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new int[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new int[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((int[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 215,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 20)",
            "(line 217,col 9)-(line 217,col 52)",
            "(line 218,col 9)-(line 218,col 69)",
            "(line 219,col 9)-(line 219,col 72)",
            "(line 220,col 9)-(line 220,col 55)",
            "(line 221,col 9)-(line 221,col 56)",
            "(line 222,col 9)-(line 222,col 72)",
            "(line 223,col 9)-(line 223,col 55)",
            "(line 224,col 9)-(line 224,col 56)",
            "(line 225,col 9)-(line 225,col 72)",
            "(line 226,col 9)-(line 226,col 58)",
            "(line 227,col 9)-(line 227,col 59)",
            "(line 228,col 9)-(line 228,col 72)",
            "(line 229,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 236,col 48)",
            "(line 237,col 9)-(line 240,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveLongArray()",
        "snippet": "    public void testRemoveLongArray() {\n        long[] array;\n        array = ArrayUtils.remove(new long[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new long[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new long[] {2}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new long[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new long[] {1}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new long[] {1, 1}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new long[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new long[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((long[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 243,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 21)",
            "(line 245,col 9)-(line 245,col 53)",
            "(line 246,col 9)-(line 246,col 70)",
            "(line 247,col 9)-(line 247,col 69)",
            "(line 248,col 9)-(line 248,col 56)",
            "(line 249,col 9)-(line 249,col 57)",
            "(line 250,col 9)-(line 250,col 69)",
            "(line 251,col 9)-(line 251,col 56)",
            "(line 252,col 9)-(line 252,col 57)",
            "(line 253,col 9)-(line 253,col 69)",
            "(line 254,col 9)-(line 254,col 59)",
            "(line 255,col 9)-(line 255,col 60)",
            "(line 256,col 9)-(line 256,col 69)",
            "(line 257,col 9)-(line 260,col 48)",
            "(line 261,col 9)-(line 264,col 48)",
            "(line 265,col 9)-(line 268,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveShortArray()",
        "snippet": "    public void testRemoveShortArray() {\n        short[] array;\n        array = ArrayUtils.remove(new short[] {1}, 0);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new short[] {1, 2}, 0);\n        assertTrue(Arrays.equals(new short[] {2}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new short[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new short[] {1}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new short[] {1, 1}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        try {\n            ArrayUtils.remove(new short[] {1, 2}, -1);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove(new short[] {1, 2}, 2);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            ArrayUtils.remove((short[]) null, 0);\n            fail(\"IndexOutOfBoundsException expected\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 271,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 22)",
            "(line 273,col 9)-(line 273,col 54)",
            "(line 274,col 9)-(line 274,col 71)",
            "(line 275,col 9)-(line 275,col 70)",
            "(line 276,col 9)-(line 276,col 57)",
            "(line 277,col 9)-(line 277,col 58)",
            "(line 278,col 9)-(line 278,col 70)",
            "(line 279,col 9)-(line 279,col 57)",
            "(line 280,col 9)-(line 280,col 58)",
            "(line 281,col 9)-(line 281,col 70)",
            "(line 282,col 9)-(line 282,col 60)",
            "(line 283,col 9)-(line 283,col 61)",
            "(line 284,col 9)-(line 284,col 70)",
            "(line 285,col 9)-(line 288,col 48)",
            "(line 289,col 9)-(line 292,col 48)",
            "(line 293,col 9)-(line 296,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementObjectArray()",
        "snippet": "    public void testRemoveElementObjectArray() {\n        Object[] array;\n        array = ArrayUtils.removeElement((Object[]) null, \"a\");\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new Object[] {\"a\"}, \"a\");\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\"}, \"a\");\n        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\", \"a\"}, \"a\");\n        assertTrue(Arrays.equals(new Object[] {\"b\", \"a\"}, array));\n        assertEquals(Object.class, array.getClass().getComponentType());\n    }",
        "begin_line": 299,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 23)",
            "(line 301,col 9)-(line 301,col 63)",
            "(line 302,col 9)-(line 302,col 26)",
            "(line 303,col 9)-(line 303,col 77)",
            "(line 304,col 9)-(line 304,col 72)",
            "(line 305,col 9)-(line 305,col 72)",
            "(line 306,col 9)-(line 306,col 66)",
            "(line 307,col 9)-(line 307,col 72)",
            "(line 308,col 9)-(line 308,col 72)",
            "(line 309,col 9)-(line 309,col 71)",
            "(line 310,col 9)-(line 310,col 61)",
            "(line 311,col 9)-(line 311,col 72)",
            "(line 312,col 9)-(line 312,col 76)",
            "(line 313,col 9)-(line 313,col 66)",
            "(line 314,col 9)-(line 314,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray()",
        "snippet": "    public void testRemoveElementBooleanArray() {\n        boolean[] array;\n        array = ArrayUtils.removeElement((boolean[]) null, true);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new boolean[] {true}, true);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);\n        assertTrue(Arrays.equals(new boolean[] {false}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);\n        assertTrue(Arrays.equals(new boolean[] {false, true}, array));\n        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 317,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 24)",
            "(line 319,col 9)-(line 319,col 65)",
            "(line 320,col 9)-(line 320,col 26)",
            "(line 321,col 9)-(line 321,col 79)",
            "(line 322,col 9)-(line 322,col 73)",
            "(line 323,col 9)-(line 323,col 72)",
            "(line 324,col 9)-(line 324,col 69)",
            "(line 325,col 9)-(line 325,col 73)",
            "(line 326,col 9)-(line 326,col 72)",
            "(line 327,col 9)-(line 327,col 76)",
            "(line 328,col 9)-(line 328,col 64)",
            "(line 329,col 9)-(line 329,col 72)",
            "(line 330,col 9)-(line 330,col 82)",
            "(line 331,col 9)-(line 331,col 70)",
            "(line 332,col 9)-(line 332,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray()",
        "snippet": "    public void testRemoveElementByteArray() {\n        byte[] array;\n        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);\n        assertTrue(Arrays.equals(new byte[] {2}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);\n        assertTrue(Arrays.equals(new byte[] {2, 1}, array));\n        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 335,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 21)",
            "(line 337,col 9)-(line 337,col 66)",
            "(line 338,col 9)-(line 338,col 26)",
            "(line 339,col 9)-(line 339,col 80)",
            "(line 340,col 9)-(line 340,col 70)",
            "(line 341,col 9)-(line 341,col 69)",
            "(line 342,col 9)-(line 342,col 67)",
            "(line 343,col 9)-(line 343,col 70)",
            "(line 344,col 9)-(line 344,col 69)",
            "(line 345,col 9)-(line 345,col 70)",
            "(line 346,col 9)-(line 346,col 57)",
            "(line 347,col 9)-(line 347,col 69)",
            "(line 348,col 9)-(line 348,col 73)",
            "(line 349,col 9)-(line 349,col 60)",
            "(line 350,col 9)-(line 350,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray()",
        "snippet": "    public void testRemoveElementCharArray() {\n        char[] array;\n        array = ArrayUtils.removeElement((char[]) null, 'a');\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');\n        assertTrue(Arrays.equals(new char[] {'b'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');\n        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));\n        assertEquals(Character.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 353,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 21)",
            "(line 355,col 9)-(line 355,col 61)",
            "(line 356,col 9)-(line 356,col 26)",
            "(line 357,col 9)-(line 357,col 75)",
            "(line 358,col 9)-(line 358,col 70)",
            "(line 359,col 9)-(line 359,col 74)",
            "(line 360,col 9)-(line 360,col 64)",
            "(line 361,col 9)-(line 361,col 70)",
            "(line 362,col 9)-(line 362,col 74)",
            "(line 363,col 9)-(line 363,col 69)",
            "(line 364,col 9)-(line 364,col 59)",
            "(line 365,col 9)-(line 365,col 74)",
            "(line 366,col 9)-(line 366,col 74)",
            "(line 367,col 9)-(line 367,col 64)",
            "(line 368,col 9)-(line 368,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testRemoveElementDoubleArray() {\n        double[] array;\n        array = ArrayUtils.removeElement((double[]) null, (double) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);\n        assertTrue(Arrays.equals(new double[] {2}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);\n        assertTrue(Arrays.equals(new double[] {2, 1}, array));\n        assertEquals(Double.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 371,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 23)",
            "(line 374,col 9)-(line 374,col 70)",
            "(line 375,col 9)-(line 375,col 26)",
            "(line 376,col 9)-(line 376,col 84)",
            "(line 377,col 9)-(line 377,col 72)",
            "(line 378,col 9)-(line 378,col 71)",
            "(line 379,col 9)-(line 379,col 71)",
            "(line 380,col 9)-(line 380,col 72)",
            "(line 381,col 9)-(line 381,col 71)",
            "(line 382,col 9)-(line 382,col 74)",
            "(line 383,col 9)-(line 383,col 59)",
            "(line 384,col 9)-(line 384,col 71)",
            "(line 385,col 9)-(line 385,col 77)",
            "(line 386,col 9)-(line 386,col 62)",
            "(line 387,col 9)-(line 387,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testRemoveElementFloatArray() {\n        float[] array;\n        array = ArrayUtils.removeElement((float[]) null, (float) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);\n        assertTrue(Arrays.equals(new float[] {2}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);\n        assertTrue(Arrays.equals(new float[] {2, 1}, array));\n        assertEquals(Float.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 390,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 22)",
            "(line 393,col 9)-(line 393,col 68)",
            "(line 394,col 9)-(line 394,col 26)",
            "(line 395,col 9)-(line 395,col 82)",
            "(line 396,col 9)-(line 396,col 71)",
            "(line 397,col 9)-(line 397,col 70)",
            "(line 398,col 9)-(line 398,col 69)",
            "(line 399,col 9)-(line 399,col 71)",
            "(line 400,col 9)-(line 400,col 70)",
            "(line 401,col 9)-(line 401,col 72)",
            "(line 402,col 9)-(line 402,col 58)",
            "(line 403,col 9)-(line 403,col 70)",
            "(line 404,col 9)-(line 404,col 75)",
            "(line 405,col 9)-(line 405,col 61)",
            "(line 406,col 9)-(line 406,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementIntArray()",
        "snippet": "    public void testRemoveElementIntArray() {\n        int[] array;\n        array = ArrayUtils.removeElement((int[]) null, 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new int[] {1}, 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);\n        assertTrue(Arrays.equals(new int[] {2}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);\n        assertTrue(Arrays.equals(new int[] {2, 1}, array));\n        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 409,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 20)",
            "(line 411,col 9)-(line 411,col 58)",
            "(line 412,col 9)-(line 412,col 26)",
            "(line 413,col 9)-(line 413,col 72)",
            "(line 414,col 9)-(line 414,col 69)",
            "(line 415,col 9)-(line 415,col 72)",
            "(line 416,col 9)-(line 416,col 59)",
            "(line 417,col 9)-(line 417,col 69)",
            "(line 418,col 9)-(line 418,col 72)",
            "(line 419,col 9)-(line 419,col 62)",
            "(line 420,col 9)-(line 420,col 56)",
            "(line 421,col 9)-(line 421,col 72)",
            "(line 422,col 9)-(line 422,col 65)",
            "(line 423,col 9)-(line 423,col 59)",
            "(line 424,col 9)-(line 424,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testRemoveElementLongArray() {\n        long[] array;\n        array = ArrayUtils.removeElement((long[]) null, (long) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);\n        assertTrue(Arrays.equals(new long[] {2}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);\n        assertTrue(Arrays.equals(new long[] {2, 1}, array));\n        assertEquals(Long.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 427,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 21)",
            "(line 430,col 9)-(line 430,col 66)",
            "(line 431,col 9)-(line 431,col 26)",
            "(line 432,col 9)-(line 432,col 80)",
            "(line 433,col 9)-(line 433,col 70)",
            "(line 434,col 9)-(line 434,col 69)",
            "(line 435,col 9)-(line 435,col 67)",
            "(line 436,col 9)-(line 436,col 70)",
            "(line 437,col 9)-(line 437,col 69)",
            "(line 438,col 9)-(line 438,col 70)",
            "(line 439,col 9)-(line 439,col 57)",
            "(line 440,col 9)-(line 440,col 69)",
            "(line 441,col 9)-(line 441,col 73)",
            "(line 442,col 9)-(line 442,col 60)",
            "(line 443,col 9)-(line 443,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsRemoveTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray()",
        "snippet": "    public void testRemoveElementShortArray() {\n        short[] array;\n        array = ArrayUtils.removeElement((short[]) null, (short) 1);\n        assertNull(array);\n        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);\n        assertTrue(Arrays.equals(new short[] {2}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);\n        assertTrue(Arrays.equals(new short[] {2, 1}, array));\n        assertEquals(Short.TYPE, array.getClass().getComponentType());\n    }",
        "begin_line": 446,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 447,col 9)-(line 447,col 22)",
            "(line 448,col 9)-(line 448,col 68)",
            "(line 449,col 9)-(line 449,col 26)",
            "(line 450,col 9)-(line 450,col 82)",
            "(line 451,col 9)-(line 451,col 71)",
            "(line 452,col 9)-(line 452,col 70)",
            "(line 453,col 9)-(line 453,col 69)",
            "(line 454,col 9)-(line 454,col 71)",
            "(line 455,col 9)-(line 455,col 70)",
            "(line 456,col 9)-(line 456,col 72)",
            "(line 457,col 9)-(line 457,col 58)",
            "(line 458,col 9)-(line 458,col 70)",
            "(line 459,col 9)-(line 459,col 75)",
            "(line 460,col 9)-(line 460,col 61)",
            "(line 461,col 9)-(line 461,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.ClassUtilsTest(java.lang.String)",
        "snippet": "    public ClassUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ClassUtils());\n        Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n    }",
        "begin_line": 50,
        "end_line": 57,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 40)",
            "(line 52,col 9)-(line 52,col 75)",
            "(line 53,col 9)-(line 53,col 37)",
            "(line 54,col 9)-(line 54,col 70)",
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object()",
        "snippet": "    public void test_getShortClassName_Object() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n        assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\n        assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\n    }",
        "begin_line": 60,
        "end_line": 65,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 93)",
            "(line 62,col 9)-(line 62,col 98)",
            "(line 63,col 9)-(line 63,col 80)",
            "(line 64,col 9)-(line 64,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Class()",
        "snippet": "    public void test_getShortClassName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getShortClassName((Class<?>) null));\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n    }",
        "begin_line": 67,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 83)",
            "(line 69,col 9)-(line 69,col 81)",
            "(line 70,col 9)-(line 70,col 72)",
            "(line 73,col 9)-(line 73,col 79)",
            "(line 74,col 9)-(line 74,col 85)",
            "(line 77,col 9)-(line 77,col 77)",
            "(line 78,col 9)-(line 78,col 71)",
            "(line 79,col 9)-(line 79,col 71)",
            "(line 80,col 9)-(line 80,col 73)",
            "(line 81,col 9)-(line 81,col 69)",
            "(line 82,col 9)-(line 82,col 71)",
            "(line 83,col 9)-(line 83,col 73)",
            "(line 84,col 9)-(line 84,col 75)",
            "(line 87,col 9)-(line 87,col 81)",
            "(line 88,col 9)-(line 88,col 75)",
            "(line 89,col 9)-(line 89,col 75)",
            "(line 90,col 9)-(line 90,col 77)",
            "(line 91,col 9)-(line 91,col 73)",
            "(line 92,col 9)-(line 92,col 75)",
            "(line 93,col 9)-(line 93,col 77)",
            "(line 94,col 9)-(line 94,col 79)",
            "(line 97,col 9)-(line 97,col 83)",
            "(line 98,col 9)-(line 98,col 87)",
            "(line 99,col 9)-(line 99,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_String()",
        "snippet": "    public void test_getShortClassName_String() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n        assertEquals(\"\", ClassUtils.getShortClassName((String) null));\n        assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n    }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 93)",
            "(line 104,col 9)-(line 104,col 91)",
            "(line 105,col 9)-(line 105,col 70)",
            "(line 106,col 9)-(line 106,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object()",
        "snippet": "    public void test_getPackageName_Object() {\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\n        assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\n    }",
        "begin_line": 110,
        "end_line": 114,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 104)",
            "(line 112,col 9)-(line 112,col 99)",
            "(line 113,col 9)-(line 113,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Class()",
        "snippet": "    public void test_getPackageName_Class() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getPackageName((Class<?>)null));\n\n        // LANG-535\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n\n        // Primitive Arrays\n        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(char[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(short[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(long[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(float[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n    }",
        "begin_line": 116,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 75)",
            "(line 118,col 9)-(line 118,col 78)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 122,col 9)-(line 122,col 77)",
            "(line 125,col 9)-(line 125,col 69)",
            "(line 126,col 9)-(line 126,col 66)",
            "(line 127,col 9)-(line 127,col 66)",
            "(line 128,col 9)-(line 128,col 67)",
            "(line 129,col 9)-(line 129,col 65)",
            "(line 130,col 9)-(line 130,col 66)",
            "(line 131,col 9)-(line 131,col 67)",
            "(line 132,col 9)-(line 132,col 68)",
            "(line 135,col 9)-(line 135,col 79)",
            "(line 136,col 9)-(line 136,col 81)",
            "(line 137,col 9)-(line 137,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_String()",
        "snippet": "    public void test_getPackageName_String() {\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n        assertEquals(\"\", ClassUtils.getPackageName((String)null));\n        assertEquals(\"\", ClassUtils.getPackageName(\"\"));\n    }",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 104)",
            "(line 142,col 9)-(line 142,col 88)",
            "(line 143,col 9)-(line 143,col 66)",
            "(line 144,col 9)-(line 144,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getAllSuperclasses_Class()",
        "snippet": "    public void test_getAllSuperclasses_Class() {\n        List<?> list = ClassUtils.getAllSuperclasses(CY.class);\n        assertEquals(2, list.size());\n        assertEquals(CX.class, list.get(0));\n        assertEquals(Object.class, list.get(1));\n\n        assertEquals(null, ClassUtils.getAllSuperclasses(null));\n    }",
        "begin_line": 148,
        "end_line": 155,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 150,col 37)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 48)",
            "(line 154,col 9)-(line 154,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getAllInterfaces_Class()",
        "snippet": "    public void test_getAllInterfaces_Class() {\n        List<?> list = ClassUtils.getAllInterfaces(CY.class);\n        assertEquals(6, list.size());\n        assertEquals(IB.class, list.get(0));\n        assertEquals(IC.class, list.get(1));\n        assertEquals(ID.class, list.get(2));\n        assertEquals(IE.class, list.get(3));\n        assertEquals(IF.class, list.get(4));\n        assertEquals(IA.class, list.get(5));\n\n        assertEquals(null, ClassUtils.getAllInterfaces(null));\n    }",
        "begin_line": 157,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 61)",
            "(line 159,col 9)-(line 159,col 37)",
            "(line 160,col 9)-(line 160,col 44)",
            "(line 161,col 9)-(line 161,col 44)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 163,col 9)-(line 163,col 44)",
            "(line 164,col 9)-(line 164,col 44)",
            "(line 165,col 9)-(line 165,col 44)",
            "(line 167,col 9)-(line 167,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_convertClassNamesToClasses_List()",
        "snippet": "    public void test_convertClassNamesToClasses_List() {\n        List<String> list = new ArrayList<String>();\n        List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);\n        assertEquals(0, result.size());\n\n        list.add(\"java.lang.String\");\n        list.add(\"java.lang.xxx\");\n        list.add(\"java.lang.Object\");\n        result = ClassUtils.convertClassNamesToClasses(list);\n        assertEquals(3, result.size());\n        assertEquals(String.class, result.get(0));\n        assertEquals(null, result.get(1));\n        assertEquals(Object.class, result.get(2));\n\n        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n        List<Object> olist = (List<Object>)(List<?>)list;\n        olist.add(new Object());\n        try {\n            ClassUtils.convertClassNamesToClasses(list);\n            fail(\"Should not have been able to convert list\");\n        } catch (ClassCastException expected) {}\n        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n    }",
        "begin_line": 188,
        "end_line": 210,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 52)",
            "(line 190,col 9)-(line 190,col 76)",
            "(line 191,col 9)-(line 191,col 39)",
            "(line 193,col 9)-(line 193,col 37)",
            "(line 194,col 9)-(line 194,col 34)",
            "(line 195,col 9)-(line 195,col 37)",
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 39)",
            "(line 198,col 9)-(line 198,col 50)",
            "(line 199,col 9)-(line 199,col 42)",
            "(line 200,col 9)-(line 200,col 50)",
            "(line 202,col 9)-(line 203,col 57)",
            "(line 204,col 9)-(line 204,col 32)",
            "(line 205,col 9)-(line 208,col 48)",
            "(line 209,col 9)-(line 209,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_convertClassesToClassNames_List()",
        "snippet": "    public void test_convertClassesToClassNames_List() {\n        List<Class<?>> list = new ArrayList<Class<?>>();\n        List<String> result = ClassUtils.convertClassesToClassNames(list);\n        assertEquals(0, result.size());\n\n        list.add(String.class);\n        list.add(null);\n        list.add(Object.class);\n        result = ClassUtils.convertClassesToClassNames(list);\n        assertEquals(3, result.size());\n        assertEquals(\"java.lang.String\", result.get(0));\n        assertEquals(null, result.get(1));\n        assertEquals(\"java.lang.Object\", result.get(2));\n\n        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n        List<Object> olist = (List<Object>)(List<?>)list;\n        olist.add(new Object());\n        try {\n            ClassUtils.convertClassesToClassNames(list);\n            fail(\"Should not have been able to convert list\");\n        } catch (ClassCastException expected) {}\n        assertEquals(null, ClassUtils.convertClassesToClassNames(null));\n    }",
        "begin_line": 212,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 56)",
            "(line 214,col 9)-(line 214,col 74)",
            "(line 215,col 9)-(line 215,col 39)",
            "(line 217,col 9)-(line 217,col 31)",
            "(line 218,col 9)-(line 218,col 23)",
            "(line 219,col 9)-(line 219,col 31)",
            "(line 220,col 9)-(line 220,col 61)",
            "(line 221,col 9)-(line 221,col 39)",
            "(line 222,col 9)-(line 222,col 56)",
            "(line 223,col 9)-(line 223,col 42)",
            "(line 224,col 9)-(line 224,col 56)",
            "(line 226,col 9)-(line 227,col 57)",
            "(line 228,col 9)-(line 228,col 32)",
            "(line 229,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 233,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class()",
        "snippet": "    public void test_isInnerClass_Class() {\n        assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {\n        }.getClass()));\n        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n        assertEquals(false, ClassUtils.isInnerClass(String.class));\n        assertEquals(false, ClassUtils.isInnerClass(null));\n    }",
        "begin_line": 237,
        "end_line": 245,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 65)",
            "(line 239,col 9)-(line 239,col 69)",
            "(line 240,col 9)-(line 241,col 23)",
            "(line 242,col 9)-(line 242,col 70)",
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n        Class<?>[] array1 = new Class[] {Object.class};\n        Class<?>[] array1s = new Class[] {String.class};\n        Class<?>[] array0 = new Class[] {};\n        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n\n        assertFalse(ClassUtils.isAssignable(array1, array2));\n        assertFalse(ClassUtils.isAssignable(null, array2));\n        assertTrue(ClassUtils.isAssignable(null, array0));\n        assertTrue(ClassUtils.isAssignable(array0, array0));\n        assertTrue(ClassUtils.isAssignable(array0, null));\n        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n\n        assertFalse(ClassUtils.isAssignable(array1, array1s));\n        assertTrue(ClassUtils.isAssignable(array1s, array1s));\n        assertTrue(ClassUtils.isAssignable(array1s, array1));\n\n        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n\n        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));\n        assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));\n        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));\n    }",
        "begin_line": 248,
        "end_line": 275,
        "comment": " -------------------------------------------------------------------------",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 69)",
            "(line 250,col 9)-(line 250,col 55)",
            "(line 251,col 9)-(line 251,col 56)",
            "(line 252,col 9)-(line 252,col 43)",
            "(line 253,col 9)-(line 253,col 68)",
            "(line 254,col 9)-(line 254,col 68)",
            "(line 256,col 9)-(line 256,col 61)",
            "(line 257,col 9)-(line 257,col 59)",
            "(line 258,col 9)-(line 258,col 58)",
            "(line 259,col 9)-(line 259,col 60)",
            "(line 260,col 9)-(line 260,col 58)",
            "(line 261,col 9)-(line 261,col 76)",
            "(line 263,col 9)-(line 263,col 62)",
            "(line 264,col 9)-(line 264,col 62)",
            "(line 265,col 9)-(line 265,col 61)",
            "(line 267,col 9)-(line 267,col 68)",
            "(line 269,col 9)-(line 269,col 90)",
            "(line 270,col 9)-(line 270,col 90)",
            "(line 271,col 9)-(line 271,col 70)",
            "(line 272,col 9)-(line 272,col 68)",
            "(line 273,col 9)-(line 273,col 83)",
            "(line 274,col 9)-(line 274,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_Autoboxing()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws Exception {\n        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n        Class<?>[] array1 = new Class[] {Object.class};\n        Class<?>[] array1s = new Class[] {String.class};\n        Class<?>[] array0 = new Class[] {};\n        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n\n        assertFalse(ClassUtils.isAssignable(array1, array2, true));\n        assertFalse(ClassUtils.isAssignable(null, array2, true));\n        assertTrue(ClassUtils.isAssignable(null, array0, true));\n        assertTrue(ClassUtils.isAssignable(array0, array0, true));\n        assertTrue(ClassUtils.isAssignable(array0, null, true));\n        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, true));\n\n        assertFalse(ClassUtils.isAssignable(array1, array1s, true));\n        assertTrue(ClassUtils.isAssignable(array1s, array1s, true));\n        assertTrue(ClassUtils.isAssignable(array1s, array1, true));\n\n        assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));\n        assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));\n    }",
        "begin_line": 277,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 69)",
            "(line 279,col 9)-(line 279,col 55)",
            "(line 280,col 9)-(line 280,col 56)",
            "(line 281,col 9)-(line 281,col 43)",
            "(line 282,col 9)-(line 282,col 68)",
            "(line 283,col 9)-(line 283,col 68)",
            "(line 285,col 9)-(line 285,col 67)",
            "(line 286,col 9)-(line 286,col 65)",
            "(line 287,col 9)-(line 287,col 64)",
            "(line 288,col 9)-(line 288,col 66)",
            "(line 289,col 9)-(line 289,col 64)",
            "(line 290,col 9)-(line 290,col 82)",
            "(line 292,col 9)-(line 292,col 68)",
            "(line 293,col 9)-(line 293,col 68)",
            "(line 294,col 9)-(line 294,col 67)",
            "(line 296,col 9)-(line 296,col 82)",
            "(line 297,col 9)-(line 297,col 82)",
            "(line 298,col 9)-(line 298,col 76)",
            "(line 299,col 9)-(line 299,col 74)",
            "(line 300,col 9)-(line 300,col 75)",
            "(line 301,col 9)-(line 301,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_NoAutoboxing()",
        "snippet": "    public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception {\n        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n        Class<?>[] array1 = new Class[] {Object.class};\n        Class<?>[] array1s = new Class[] {String.class};\n        Class<?>[] array0 = new Class[] {};\n        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n\n        assertFalse(ClassUtils.isAssignable(array1, array2, false));\n        assertFalse(ClassUtils.isAssignable(null, array2, false));\n        assertTrue(ClassUtils.isAssignable(null, array0, false));\n        assertTrue(ClassUtils.isAssignable(array0, array0, false));\n        assertTrue(ClassUtils.isAssignable(array0, null, false));\n        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false));\n\n        assertFalse(ClassUtils.isAssignable(array1, array1s, false));\n        assertTrue(ClassUtils.isAssignable(array1s, array1s, false));\n        assertTrue(ClassUtils.isAssignable(array1s, array1, false));\n\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));\n        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));\n        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));\n        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));\n    }",
        "begin_line": 304,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 69)",
            "(line 306,col 9)-(line 306,col 55)",
            "(line 307,col 9)-(line 307,col 56)",
            "(line 308,col 9)-(line 308,col 43)",
            "(line 309,col 9)-(line 309,col 68)",
            "(line 310,col 9)-(line 310,col 68)",
            "(line 312,col 9)-(line 312,col 68)",
            "(line 313,col 9)-(line 313,col 66)",
            "(line 314,col 9)-(line 314,col 65)",
            "(line 315,col 9)-(line 315,col 67)",
            "(line 316,col 9)-(line 316,col 65)",
            "(line 317,col 9)-(line 317,col 83)",
            "(line 319,col 9)-(line 319,col 69)",
            "(line 320,col 9)-(line 320,col 69)",
            "(line 321,col 9)-(line 321,col 68)",
            "(line 323,col 9)-(line 323,col 84)",
            "(line 324,col 9)-(line 324,col 84)",
            "(line 325,col 9)-(line 325,col 77)",
            "(line 326,col 9)-(line 326,col 75)",
            "(line 327,col 9)-(line 327,col 74)",
            "(line 328,col 9)-(line 328,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable()",
        "snippet": "    public void test_isAssignable() throws Exception {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n        assertFalse(ClassUtils.isAssignable(String.class, null));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n\n        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n    }",
        "begin_line": 331,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 68)",
            "(line 333,col 9)-(line 333,col 65)",
            "(line 335,col 9)-(line 335,col 64)",
            "(line 336,col 9)-(line 336,col 65)",
            "(line 337,col 9)-(line 337,col 65)",
            "(line 338,col 9)-(line 338,col 72)",
            "(line 339,col 9)-(line 339,col 72)",
            "(line 340,col 9)-(line 340,col 73)",
            "(line 342,col 9)-(line 342,col 68)",
            "(line 344,col 9)-(line 344,col 87)",
            "(line 345,col 9)-(line 345,col 86)",
            "(line 346,col 9)-(line 346,col 87)",
            "(line 347,col 9)-(line 347,col 87)",
            "(line 348,col 9)-(line 348,col 72)",
            "(line 349,col 9)-(line 349,col 74)",
            "(line 350,col 9)-(line 350,col 87)",
            "(line 351,col 9)-(line 351,col 86)",
            "(line 352,col 9)-(line 352,col 87)",
            "(line 353,col 9)-(line 353,col 87)",
            "(line 354,col 9)-(line 354,col 72)",
            "(line 355,col 9)-(line 355,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Autoboxing()",
        "snippet": "    public void test_isAssignable_Autoboxing() throws Exception {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\n        assertFalse(ClassUtils.isAssignable(String.class, null, true));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class, true));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class, true));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\n    }",
        "begin_line": 358,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 74)",
            "(line 360,col 9)-(line 360,col 71)",
            "(line 362,col 9)-(line 362,col 70)",
            "(line 363,col 9)-(line 363,col 71)",
            "(line 364,col 9)-(line 364,col 71)",
            "(line 365,col 9)-(line 365,col 78)",
            "(line 366,col 9)-(line 366,col 78)",
            "(line 367,col 9)-(line 367,col 79)",
            "(line 368,col 9)-(line 368,col 79)",
            "(line 369,col 9)-(line 369,col 78)",
            "(line 370,col 9)-(line 370,col 79)",
            "(line 371,col 9)-(line 371,col 79)",
            "(line 372,col 9)-(line 372,col 78)",
            "(line 373,col 9)-(line 373,col 80)",
            "(line 374,col 9)-(line 374,col 79)",
            "(line 375,col 9)-(line 375,col 79)",
            "(line 376,col 9)-(line 376,col 79)",
            "(line 377,col 9)-(line 377,col 78)",
            "(line 378,col 9)-(line 378,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_NoAutoboxing()",
        "snippet": "    public void test_isAssignable_NoAutoboxing() throws Exception {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));\n        assertFalse(ClassUtils.isAssignable(String.class, null, false));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class, false));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class, false));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class, false));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));\n        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));\n        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));\n        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));\n        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));\n        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));\n        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));\n    }",
        "begin_line": 381,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 75)",
            "(line 383,col 9)-(line 383,col 72)",
            "(line 385,col 9)-(line 385,col 71)",
            "(line 386,col 9)-(line 386,col 72)",
            "(line 387,col 9)-(line 387,col 72)",
            "(line 388,col 9)-(line 388,col 79)",
            "(line 389,col 9)-(line 389,col 79)",
            "(line 390,col 9)-(line 390,col 80)",
            "(line 391,col 9)-(line 391,col 81)",
            "(line 392,col 9)-(line 392,col 80)",
            "(line 393,col 9)-(line 393,col 81)",
            "(line 394,col 9)-(line 394,col 79)",
            "(line 395,col 9)-(line 395,col 81)",
            "(line 396,col 9)-(line 396,col 81)",
            "(line 397,col 9)-(line 397,col 80)",
            "(line 398,col 9)-(line 398,col 81)",
            "(line 399,col 9)-(line 399,col 80)",
            "(line 400,col 9)-(line 400,col 79)",
            "(line 401,col 9)-(line 401,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Widening()",
        "snippet": "    public void test_isAssignable_Widening() throws Exception {\n        // test byte conversions\n        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));\n        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));\n        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));\n        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));\n        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n\n        // test short conversions\n        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.TYPE, Short.TYPE));\n        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));\n        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.TYPE, Long.TYPE));\n        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n\n        // test char conversions\n        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.TYPE, Short.TYPE));\n        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));\n        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.TYPE, Long.TYPE));\n        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n\n        // test int conversions\n        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));\n        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));\n        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n\n        // test long conversions\n        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.TYPE, Short.TYPE));\n        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));\n        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.TYPE, Long.TYPE));\n        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n\n        // test float conversions\n        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.TYPE, Short.TYPE));\n        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));\n        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.TYPE, Long.TYPE));\n        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n\n        // test double conversions\n        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.TYPE, Short.TYPE));\n        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));\n        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.TYPE, Long.TYPE));\n        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n\n        // test boolean conversions\n        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));\n        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));\n        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));\n        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n    }",
        "begin_line": 404,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 88)",
            "(line 407,col 9)-(line 407,col 82)",
            "(line 408,col 9)-(line 408,col 84)",
            "(line 409,col 9)-(line 409,col 84)",
            "(line 410,col 9)-(line 410,col 82)",
            "(line 411,col 9)-(line 411,col 84)",
            "(line 412,col 9)-(line 412,col 86)",
            "(line 413,col 9)-(line 413,col 89)",
            "(line 416,col 9)-(line 416,col 90)",
            "(line 417,col 9)-(line 417,col 85)",
            "(line 418,col 9)-(line 418,col 86)",
            "(line 419,col 9)-(line 419,col 86)",
            "(line 420,col 9)-(line 420,col 84)",
            "(line 421,col 9)-(line 421,col 86)",
            "(line 422,col 9)-(line 422,col 88)",
            "(line 423,col 9)-(line 423,col 91)",
            "(line 426,col 9)-(line 426,col 92)",
            "(line 427,col 9)-(line 427,col 88)",
            "(line 428,col 9)-(line 428,col 90)",
            "(line 429,col 9)-(line 429,col 89)",
            "(line 430,col 9)-(line 430,col 87)",
            "(line 431,col 9)-(line 431,col 89)",
            "(line 432,col 9)-(line 432,col 91)",
            "(line 433,col 9)-(line 433,col 94)",
            "(line 436,col 9)-(line 436,col 90)",
            "(line 437,col 9)-(line 437,col 85)",
            "(line 438,col 9)-(line 438,col 87)",
            "(line 439,col 9)-(line 439,col 86)",
            "(line 440,col 9)-(line 440,col 84)",
            "(line 441,col 9)-(line 441,col 86)",
            "(line 442,col 9)-(line 442,col 88)",
            "(line 443,col 9)-(line 443,col 91)",
            "(line 446,col 9)-(line 446,col 88)",
            "(line 447,col 9)-(line 447,col 83)",
            "(line 448,col 9)-(line 448,col 85)",
            "(line 449,col 9)-(line 449,col 85)",
            "(line 450,col 9)-(line 450,col 82)",
            "(line 451,col 9)-(line 451,col 84)",
            "(line 452,col 9)-(line 452,col 86)",
            "(line 453,col 9)-(line 453,col 89)",
            "(line 456,col 9)-(line 456,col 90)",
            "(line 457,col 9)-(line 457,col 85)",
            "(line 458,col 9)-(line 458,col 87)",
            "(line 459,col 9)-(line 459,col 87)",
            "(line 460,col 9)-(line 460,col 85)",
            "(line 461,col 9)-(line 461,col 86)",
            "(line 462,col 9)-(line 462,col 88)",
            "(line 463,col 9)-(line 463,col 91)",
            "(line 466,col 9)-(line 466,col 92)",
            "(line 467,col 9)-(line 467,col 87)",
            "(line 468,col 9)-(line 468,col 89)",
            "(line 469,col 9)-(line 469,col 89)",
            "(line 470,col 9)-(line 470,col 87)",
            "(line 471,col 9)-(line 471,col 89)",
            "(line 472,col 9)-(line 472,col 90)",
            "(line 473,col 9)-(line 473,col 93)",
            "(line 476,col 9)-(line 476,col 94)",
            "(line 477,col 9)-(line 477,col 89)",
            "(line 478,col 9)-(line 478,col 91)",
            "(line 479,col 9)-(line 479,col 91)",
            "(line 480,col 9)-(line 480,col 89)",
            "(line 481,col 9)-(line 481,col 91)",
            "(line 482,col 9)-(line 482,col 93)",
            "(line 483,col 9)-(line 483,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening()",
        "snippet": "    public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {\n        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n\n        // test byte conversions\n        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE));\n        assertEquals(\"byte -> byte\", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));\n        assertEquals(\"byte -> short\", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));\n        assertEquals(\"byte -> int\", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));\n        assertEquals(\"byte -> long\", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));\n        assertEquals(\"byte -> float\", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));\n        assertEquals(\"byte -> double\", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));\n        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));\n\n        // test short conversions\n        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE));\n        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE));\n        assertEquals(\"short -> short\", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));\n        assertEquals(\"short -> int\", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));\n        assertEquals(\"short -> long\", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));\n        assertEquals(\"short -> float\", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));\n        assertEquals(\"short -> double\", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));\n        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE));\n\n        // test char conversions\n        assertEquals(\"char -> char\", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE));\n        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE));\n        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE));\n        assertEquals(\"char -> int\", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE));\n        assertEquals(\"char -> long\", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));\n        assertEquals(\"char -> float\", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE));\n        assertEquals(\"char -> double\", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE));\n        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE));\n\n        // test int conversions\n        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE));\n        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE));\n        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE));\n        assertEquals(\"int -> int\", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n        assertEquals(\"int -> long\", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));\n        assertEquals(\"int -> float\", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));\n        assertEquals(\"int -> double\", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));\n        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));\n\n        // test long conversions\n        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE));\n        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE));\n        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE));\n        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE));\n        assertEquals(\"long -> long\", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));\n        assertEquals(\"long -> float\", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));\n        assertEquals(\"long -> double\", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));\n        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE));\n\n        // test float conversions\n        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE));\n        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE));\n        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE));\n        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE));\n        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE));\n        assertEquals(\"float -> float\", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));\n        assertEquals(\"float -> double\", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));\n        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE));\n\n        // test double conversions\n        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE));\n        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE));\n        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE));\n        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE));\n        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE));\n        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE));\n        assertEquals(\"double -> double\", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));\n        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE));\n\n        // test boolean conversions\n        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE));\n        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));\n        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE));\n        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));\n        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE));\n        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE));\n        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE));\n        assertEquals(\"boolean -> boolean\", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n    }",
        "begin_line": 486,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 68)",
            "(line 490,col 9)-(line 490,col 89)",
            "(line 491,col 9)-(line 491,col 97)",
            "(line 492,col 9)-(line 492,col 99)",
            "(line 493,col 9)-(line 493,col 99)",
            "(line 494,col 9)-(line 494,col 97)",
            "(line 495,col 9)-(line 495,col 99)",
            "(line 496,col 9)-(line 496,col 101)",
            "(line 497,col 9)-(line 497,col 90)",
            "(line 500,col 9)-(line 500,col 91)",
            "(line 501,col 9)-(line 501,col 86)",
            "(line 502,col 9)-(line 502,col 101)",
            "(line 503,col 9)-(line 503,col 101)",
            "(line 504,col 9)-(line 504,col 99)",
            "(line 505,col 9)-(line 505,col 101)",
            "(line 506,col 9)-(line 506,col 103)",
            "(line 507,col 9)-(line 507,col 92)",
            "(line 510,col 9)-(line 510,col 107)",
            "(line 511,col 9)-(line 511,col 89)",
            "(line 512,col 9)-(line 512,col 91)",
            "(line 513,col 9)-(line 513,col 104)",
            "(line 514,col 9)-(line 514,col 102)",
            "(line 515,col 9)-(line 515,col 104)",
            "(line 516,col 9)-(line 516,col 106)",
            "(line 517,col 9)-(line 517,col 95)",
            "(line 520,col 9)-(line 520,col 91)",
            "(line 521,col 9)-(line 521,col 86)",
            "(line 522,col 9)-(line 522,col 88)",
            "(line 523,col 9)-(line 523,col 101)",
            "(line 524,col 9)-(line 524,col 99)",
            "(line 525,col 9)-(line 525,col 101)",
            "(line 526,col 9)-(line 526,col 103)",
            "(line 527,col 9)-(line 527,col 92)",
            "(line 530,col 9)-(line 530,col 89)",
            "(line 531,col 9)-(line 531,col 84)",
            "(line 532,col 9)-(line 532,col 86)",
            "(line 533,col 9)-(line 533,col 86)",
            "(line 534,col 9)-(line 534,col 97)",
            "(line 535,col 9)-(line 535,col 99)",
            "(line 536,col 9)-(line 536,col 101)",
            "(line 537,col 9)-(line 537,col 90)",
            "(line 540,col 9)-(line 540,col 91)",
            "(line 541,col 9)-(line 541,col 86)",
            "(line 542,col 9)-(line 542,col 88)",
            "(line 543,col 9)-(line 543,col 88)",
            "(line 544,col 9)-(line 544,col 86)",
            "(line 545,col 9)-(line 545,col 101)",
            "(line 546,col 9)-(line 546,col 103)",
            "(line 547,col 9)-(line 547,col 92)",
            "(line 550,col 9)-(line 550,col 93)",
            "(line 551,col 9)-(line 551,col 88)",
            "(line 552,col 9)-(line 552,col 90)",
            "(line 553,col 9)-(line 553,col 90)",
            "(line 554,col 9)-(line 554,col 88)",
            "(line 555,col 9)-(line 555,col 90)",
            "(line 556,col 9)-(line 556,col 105)",
            "(line 557,col 9)-(line 557,col 94)",
            "(line 560,col 9)-(line 560,col 95)",
            "(line 561,col 9)-(line 561,col 90)",
            "(line 562,col 9)-(line 562,col 92)",
            "(line 563,col 9)-(line 563,col 92)",
            "(line 564,col 9)-(line 564,col 90)",
            "(line 565,col 9)-(line 565,col 92)",
            "(line 566,col 9)-(line 566,col 94)",
            "(line 567,col 9)-(line 567,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Unboxing_Widening()",
        "snippet": "    public void test_isAssignable_Unboxing_Widening() throws Exception {\n        // test byte conversions\n        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));\n        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true));\n        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.class, Short.TYPE, true));\n        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true));\n        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.class, Long.TYPE, true));\n        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));\n        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));\n        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));\n\n        // test short conversions\n        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE, true));\n        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));\n        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.class, Short.TYPE, true));\n        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.class, Integer.TYPE, true));\n        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.class, Long.TYPE, true));\n        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.class, Float.TYPE, true));\n        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.class, Double.TYPE, true));\n        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));\n\n        // test char conversions\n        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.class, Character.TYPE, true));\n        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));\n        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE, true));\n        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.class, Integer.TYPE, true));\n        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.class, Long.TYPE, true));\n        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.class, Float.TYPE, true));\n        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.class, Double.TYPE, true));\n        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));\n\n        // test int conversions\n        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));\n        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));\n        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE, true));\n        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.class, Long.TYPE, true));\n        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));\n        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));\n        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));\n\n        // test long conversions\n        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE, true));\n        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));\n        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE, true));\n        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE, true));\n        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.class, Long.TYPE, true));\n        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.class, Float.TYPE, true));\n        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.class, Double.TYPE, true));\n        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));\n\n        // test float conversions\n        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE, true));\n        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));\n        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE, true));\n        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE, true));\n        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE, true));\n        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.class, Float.TYPE, true));\n        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.class, Double.TYPE, true));\n        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));\n\n        // test double conversions\n        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE, true));\n        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));\n        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE, true));\n        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE, true));\n        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE, true));\n        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE, true));\n        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.class, Double.TYPE, true));\n        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));\n\n        // test boolean conversions\n        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));\n        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));\n        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true));\n        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true));\n        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true));\n        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true));\n        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));\n        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n    }",
        "begin_line": 570,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 572,col 9)-(line 572,col 95)",
            "(line 573,col 9)-(line 573,col 89)",
            "(line 574,col 9)-(line 574,col 91)",
            "(line 575,col 9)-(line 575,col 91)",
            "(line 576,col 9)-(line 576,col 89)",
            "(line 577,col 9)-(line 577,col 91)",
            "(line 578,col 9)-(line 578,col 93)",
            "(line 579,col 9)-(line 579,col 96)",
            "(line 582,col 9)-(line 582,col 97)",
            "(line 583,col 9)-(line 583,col 92)",
            "(line 584,col 9)-(line 584,col 93)",
            "(line 585,col 9)-(line 585,col 93)",
            "(line 586,col 9)-(line 586,col 91)",
            "(line 587,col 9)-(line 587,col 93)",
            "(line 588,col 9)-(line 588,col 95)",
            "(line 589,col 9)-(line 589,col 98)",
            "(line 592,col 9)-(line 592,col 99)",
            "(line 593,col 9)-(line 593,col 95)",
            "(line 594,col 9)-(line 594,col 97)",
            "(line 595,col 9)-(line 595,col 96)",
            "(line 596,col 9)-(line 596,col 94)",
            "(line 597,col 9)-(line 597,col 96)",
            "(line 598,col 9)-(line 598,col 98)",
            "(line 599,col 9)-(line 599,col 101)",
            "(line 602,col 9)-(line 602,col 97)",
            "(line 603,col 9)-(line 603,col 92)",
            "(line 604,col 9)-(line 604,col 94)",
            "(line 605,col 9)-(line 605,col 93)",
            "(line 606,col 9)-(line 606,col 91)",
            "(line 607,col 9)-(line 607,col 93)",
            "(line 608,col 9)-(line 608,col 95)",
            "(line 609,col 9)-(line 609,col 98)",
            "(line 612,col 9)-(line 612,col 95)",
            "(line 613,col 9)-(line 613,col 90)",
            "(line 614,col 9)-(line 614,col 92)",
            "(line 615,col 9)-(line 615,col 92)",
            "(line 616,col 9)-(line 616,col 89)",
            "(line 617,col 9)-(line 617,col 91)",
            "(line 618,col 9)-(line 618,col 93)",
            "(line 619,col 9)-(line 619,col 96)",
            "(line 622,col 9)-(line 622,col 97)",
            "(line 623,col 9)-(line 623,col 92)",
            "(line 624,col 9)-(line 624,col 94)",
            "(line 625,col 9)-(line 625,col 94)",
            "(line 626,col 9)-(line 626,col 92)",
            "(line 627,col 9)-(line 627,col 93)",
            "(line 628,col 9)-(line 628,col 95)",
            "(line 629,col 9)-(line 629,col 98)",
            "(line 632,col 9)-(line 632,col 99)",
            "(line 633,col 9)-(line 633,col 94)",
            "(line 634,col 9)-(line 634,col 96)",
            "(line 635,col 9)-(line 635,col 96)",
            "(line 636,col 9)-(line 636,col 94)",
            "(line 637,col 9)-(line 637,col 96)",
            "(line 638,col 9)-(line 638,col 97)",
            "(line 639,col 9)-(line 639,col 100)",
            "(line 642,col 9)-(line 642,col 101)",
            "(line 643,col 9)-(line 643,col 96)",
            "(line 644,col 9)-(line 644,col 98)",
            "(line 645,col 9)-(line 645,col 98)",
            "(line 646,col 9)-(line 646,col 96)",
            "(line 647,col 9)-(line 647,col 98)",
            "(line 648,col 9)-(line 648,col 100)",
            "(line 649,col 9)-(line 649,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testPrimitiveToWrapper()",
        "snippet": "    public void testPrimitiveToWrapper() {\n\n        // test primitive classes\n        assertEquals(\"boolean -> Boolean.class\",\n            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));\n        assertEquals(\"byte -> Byte.class\",\n            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));\n        assertEquals(\"char -> Character.class\",\n            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));\n        assertEquals(\"short -> Short.class\",\n            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));\n        assertEquals(\"int -> Integer.class\",\n            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));\n        assertEquals(\"long -> Long.class\",\n            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));\n        assertEquals(\"double -> Double.class\",\n            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));\n        assertEquals(\"float -> Float.class\",\n            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));\n\n        // test a few other classes\n        assertEquals(\"String.class -> String.class\",\n            String.class, ClassUtils.primitiveToWrapper(String.class));\n        assertEquals(\"ClassUtils.class -> ClassUtils.class\",\n            org.apache.commons.lang3.ClassUtils.class,\n            ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class));\n        assertEquals(\"Void.TYPE -> Void.TYPE\",\n            Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));\n\n        // test null\n        assertNull(\"null -> null\",\n            ClassUtils.primitiveToWrapper(null));\n    }",
        "begin_line": 652,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 655,col 9)-(line 656,col 72)",
            "(line 657,col 9)-(line 658,col 66)",
            "(line 659,col 9)-(line 660,col 76)",
            "(line 661,col 9)-(line 662,col 68)",
            "(line 663,col 9)-(line 664,col 72)",
            "(line 665,col 9)-(line 666,col 66)",
            "(line 667,col 9)-(line 668,col 70)",
            "(line 669,col 9)-(line 670,col 68)",
            "(line 673,col 9)-(line 674,col 71)",
            "(line 675,col 9)-(line 677,col 86)",
            "(line 678,col 9)-(line 679,col 65)",
            "(line 682,col 9)-(line 683,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testPrimitivesToWrappers()",
        "snippet": "    public void testPrimitivesToWrappers() {\n        // test null\n        assertNull(\"null -> null\",\n            ClassUtils.primitivesToWrappers(null));\n        // test empty array\n        assertEquals(\"empty -> empty\",\n                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n\n        // test an array of various classes\n        final Class<?>[] primitives = new Class[] {\n                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n                String.class, ClassUtils.class\n        };\n        Class<?>[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n\n        for (int i=0; i < primitives.length; i++) {\n            // test each returned wrapper\n            Class<?> primitive = primitives[i];\n            Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n\n            assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n        }\n\n        // test an array of no primitive classes\n        final Class<?>[] noPrimitives = new Class[] {\n                String.class, ClassUtils.class, Void.TYPE\n        };\n        // This used to return the exact same array, but no longer does.\n        assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n    }",
        "begin_line": 686,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 688,col 9)-(line 689,col 51)",
            "(line 691,col 9)-(line 692,col 109)",
            "(line 695,col 9)-(line 699,col 10)",
            "(line 700,col 9)-(line 700,col 73)",
            "(line 702,col 9)-(line 708,col 9)",
            "(line 711,col 9)-(line 713,col 10)",
            "(line 715,col 9)-(line 715,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitive()",
        "snippet": "    public void testWrapperToPrimitive() {\n        // an array with classes to convert\n        final Class<?>[] primitives = {\n                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE\n        };\n        for (int i = 0; i < primitives.length; i++) {\n            Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n            assertFalse(\"Still primitive\", wrapperCls.isPrimitive());\n            assertEquals(wrapperCls + \" -> \" + primitives[i], primitives[i],\n                    ClassUtils.wrapperToPrimitive(wrapperCls));\n        }\n    }",
        "begin_line": 718,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 720,col 9)-(line 723,col 10)",
            "(line 724,col 9)-(line 729,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNoWrapper()",
        "snippet": "    public void testWrapperToPrimitiveNoWrapper() {\n        assertNull(\"Wrong result for non wrapper class\", ClassUtils.wrapperToPrimitive(String.class));\n    }",
        "begin_line": 732,
        "end_line": 734,
        "comment": "",
        "child_ranges": [
            "(line 733,col 9)-(line 733,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull()",
        "snippet": "    public void testWrapperToPrimitiveNull() {\n        assertNull(\"Wrong result for null class\", ClassUtils.wrapperToPrimitive(null));\n    }",
        "begin_line": 736,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 737,col 9)-(line 737,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives()",
        "snippet": "    public void testWrappersToPrimitives() {\n        // an array with classes to test\n        final Class<?>[] classes = {\n                Boolean.class, Byte.class, Character.class, Short.class,\n                Integer.class, Long.class, Float.class, Double.class,\n                String.class, ClassUtils.class, null\n        };\n\n        Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes);\n        // now test the result\n        assertEquals(\"Wrong length of result array\", classes.length, primitives.length);\n        for (int i = 0; i < classes.length; i++) {\n            Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n            assertEquals(classes[i] + \" -> \" + expectedPrimitive, expectedPrimitive,\n                    primitives[i]);\n        }\n    }",
        "begin_line": 740,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 746,col 10)",
            "(line 748,col 9)-(line 748,col 73)",
            "(line 750,col 9)-(line 750,col 88)",
            "(line 751,col 9)-(line 755,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull()",
        "snippet": "    public void testWrappersToPrimitivesNull() {\n        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n    }",
        "begin_line": 758,
        "end_line": 760,
        "comment": "",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesEmpty()",
        "snippet": "    public void testWrappersToPrimitivesEmpty() {\n        Class<?>[] empty = new Class[0];\n        assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n    }",
        "begin_line": 762,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 763,col 9)-(line 763,col 40)",
            "(line 764,col 9)-(line 764,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassClassNotFound()",
        "snippet": "    public void testGetClassClassNotFound() throws Exception {\n        assertGetClassThrowsClassNotFound( \"bool\" );\n        assertGetClassThrowsClassNotFound( \"bool[]\" );\n        assertGetClassThrowsClassNotFound( \"integer[]\" );\n    }",
        "begin_line": 767,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 768,col 9)-(line 768,col 52)",
            "(line 769,col 9)-(line 769,col 54)",
            "(line 770,col 9)-(line 770,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassInvalidArguments()",
        "snippet": "    public void testGetClassInvalidArguments() throws Exception {\n        assertGetClassThrowsNullPointerException( null );\n        assertGetClassThrowsClassNotFound( \"[][][]\" );\n        assertGetClassThrowsClassNotFound( \"[[]\" );\n        assertGetClassThrowsClassNotFound( \"[\" );\n        assertGetClassThrowsClassNotFound( \"java.lang.String][\" );\n        assertGetClassThrowsClassNotFound( \".hello.world\" );\n        assertGetClassThrowsClassNotFound( \"hello..world\" );\n    }",
        "begin_line": 773,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 774,col 9)-(line 774,col 57)",
            "(line 775,col 9)-(line 775,col 54)",
            "(line 776,col 9)-(line 776,col 51)",
            "(line 777,col 9)-(line 777,col 49)",
            "(line 778,col 9)-(line 778,col 66)",
            "(line 779,col 9)-(line 779,col 60)",
            "(line 780,col 9)-(line 780,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace()",
        "snippet": "    public void testWithInterleavingWhitespace() throws ClassNotFoundException {\n        assertEquals( int[].class, ClassUtils.getClass( \" int [ ] \" ) );\n        assertEquals( long[].class, ClassUtils.getClass( \"\\rlong\\t[\\n]\\r\" ) );\n        assertEquals( short[].class, ClassUtils.getClass( \"\\tshort                \\t\\t[]\" ) );\n        assertEquals( byte[].class, ClassUtils.getClass( \"byte[\\t\\t\\n\\r]   \" ) );\n    }",
        "begin_line": 783,
        "end_line": 788,
        "comment": "",
        "child_ranges": [
            "(line 784,col 9)-(line 784,col 72)",
            "(line 785,col 9)-(line 785,col 78)",
            "(line 786,col 9)-(line 786,col 94)",
            "(line 787,col 9)-(line 787,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays()",
        "snippet": "    public void testGetClassByNormalNameArrays() throws ClassNotFoundException {\n        assertEquals( int[].class, ClassUtils.getClass( \"int[]\" ) );\n        assertEquals( long[].class, ClassUtils.getClass( \"long[]\" ) );\n        assertEquals( short[].class, ClassUtils.getClass( \"short[]\" ) );\n        assertEquals( byte[].class, ClassUtils.getClass( \"byte[]\" ) );\n        assertEquals( char[].class, ClassUtils.getClass( \"char[]\" ) );\n        assertEquals( float[].class, ClassUtils.getClass( \"float[]\" ) );\n        assertEquals( double[].class, ClassUtils.getClass( \"double[]\" ) );\n        assertEquals( boolean[].class, ClassUtils.getClass( \"boolean[]\" ) );\n        assertEquals( String[].class, ClassUtils.getClass( \"java.lang.String[]\" ) );\n    }",
        "begin_line": 790,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 791,col 9)-(line 791,col 68)",
            "(line 792,col 9)-(line 792,col 70)",
            "(line 793,col 9)-(line 793,col 72)",
            "(line 794,col 9)-(line 794,col 70)",
            "(line 795,col 9)-(line 795,col 70)",
            "(line 796,col 9)-(line 796,col 72)",
            "(line 797,col 9)-(line 797,col 74)",
            "(line 798,col 9)-(line 798,col 76)",
            "(line 799,col 9)-(line 799,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D()",
        "snippet": "    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {\n        assertEquals( int[][].class, ClassUtils.getClass( \"int[][]\" ) );\n        assertEquals( long[][].class, ClassUtils.getClass( \"long[][]\" ) );\n        assertEquals( short[][].class, ClassUtils.getClass( \"short[][]\" ) );\n        assertEquals( byte[][].class, ClassUtils.getClass( \"byte[][]\" ) );\n        assertEquals( char[][].class, ClassUtils.getClass( \"char[][]\" ) );\n        assertEquals( float[][].class, ClassUtils.getClass( \"float[][]\" ) );\n        assertEquals( double[][].class, ClassUtils.getClass( \"double[][]\" ) );\n        assertEquals( boolean[][].class, ClassUtils.getClass( \"boolean[][]\" ) );\n        assertEquals( String[][].class, ClassUtils.getClass( \"java.lang.String[][]\" ) );\n    }",
        "begin_line": 802,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 803,col 9)-(line 803,col 72)",
            "(line 804,col 9)-(line 804,col 74)",
            "(line 805,col 9)-(line 805,col 76)",
            "(line 806,col 9)-(line 806,col 74)",
            "(line 807,col 9)-(line 807,col 74)",
            "(line 808,col 9)-(line 808,col 76)",
            "(line 809,col 9)-(line 809,col 78)",
            "(line 810,col 9)-(line 810,col 80)",
            "(line 811,col 9)-(line 811,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D()",
        "snippet": "    public void testGetClassWithArrayClasses2D() throws Exception {\n        assertGetClassReturnsClass( String[][].class );\n        assertGetClassReturnsClass( int[][].class );\n        assertGetClassReturnsClass( long[][].class );\n        assertGetClassReturnsClass( short[][].class );\n        assertGetClassReturnsClass( byte[][].class );\n        assertGetClassReturnsClass( char[][].class );\n        assertGetClassReturnsClass( float[][].class );\n        assertGetClassReturnsClass( double[][].class );\n        assertGetClassReturnsClass( boolean[][].class );\n    }",
        "begin_line": 814,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 815,col 9)-(line 815,col 55)",
            "(line 816,col 9)-(line 816,col 52)",
            "(line 817,col 9)-(line 817,col 53)",
            "(line 818,col 9)-(line 818,col 54)",
            "(line 819,col 9)-(line 819,col 53)",
            "(line 820,col 9)-(line 820,col 53)",
            "(line 821,col 9)-(line 821,col 54)",
            "(line 822,col 9)-(line 822,col 55)",
            "(line 823,col 9)-(line 823,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses()",
        "snippet": "    public void testGetClassWithArrayClasses() throws Exception {\n        assertGetClassReturnsClass( String[].class );\n        assertGetClassReturnsClass( int[].class );\n        assertGetClassReturnsClass( long[].class );\n        assertGetClassReturnsClass( short[].class );\n        assertGetClassReturnsClass( byte[].class );\n        assertGetClassReturnsClass( char[].class );\n        assertGetClassReturnsClass( float[].class );\n        assertGetClassReturnsClass( double[].class );\n        assertGetClassReturnsClass( boolean[].class );\n    }",
        "begin_line": 826,
        "end_line": 836,
        "comment": "",
        "child_ranges": [
            "(line 827,col 9)-(line 827,col 53)",
            "(line 828,col 9)-(line 828,col 50)",
            "(line 829,col 9)-(line 829,col 51)",
            "(line 830,col 9)-(line 830,col 52)",
            "(line 831,col 9)-(line 831,col 51)",
            "(line 832,col 9)-(line 832,col 51)",
            "(line 833,col 9)-(line 833,col 52)",
            "(line 834,col 9)-(line 834,col 53)",
            "(line 835,col 9)-(line 835,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetClassRawPrimitives()",
        "snippet": "    public void testGetClassRawPrimitives() throws ClassNotFoundException {\n        assertEquals( int.class, ClassUtils.getClass( \"int\" ) );\n        assertEquals( long.class, ClassUtils.getClass( \"long\" ) );\n        assertEquals( short.class, ClassUtils.getClass( \"short\" ) );\n        assertEquals( byte.class, ClassUtils.getClass( \"byte\" ) );\n        assertEquals( char.class, ClassUtils.getClass( \"char\" ) );\n        assertEquals( float.class, ClassUtils.getClass( \"float\" ) );\n        assertEquals( double.class, ClassUtils.getClass( \"double\" ) );\n        assertEquals( boolean.class, ClassUtils.getClass( \"boolean\" ) );\n    }",
        "begin_line": 838,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 64)",
            "(line 840,col 9)-(line 840,col 66)",
            "(line 841,col 9)-(line 841,col 68)",
            "(line 842,col 9)-(line 842,col 66)",
            "(line 843,col 9)-(line 843,col 66)",
            "(line 844,col 9)-(line 844,col 68)",
            "(line 845,col 9)-(line 845,col 70)",
            "(line 846,col 9)-(line 846,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassReturnsClass(java.lang.Class<?>)",
        "snippet": "    private void assertGetClassReturnsClass( Class<?> c ) throws Exception {\n        assertEquals( c, ClassUtils.getClass( c.getName() ) );\n    }",
        "begin_line": 849,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 850,col 9)-(line 850,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsException(java.lang.String, java.lang.Class<?>)",
        "snippet": "    private void assertGetClassThrowsException( String className, Class<?> exceptionType ) throws Exception {\n        try {\n            ClassUtils.getClass( className );\n            fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n        }\n        catch( Exception e ) {\n            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );\n        }\n    }",
        "begin_line": 853,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 854,col 9)-(line 860,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsNullPointerException(java.lang.String)",
        "snippet": "    private void assertGetClassThrowsNullPointerException( String className ) throws Exception {\n        assertGetClassThrowsException( className, NullPointerException.class );\n    }",
        "begin_line": 863,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 864,col 9)-(line 864,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsClassNotFound(java.lang.String)",
        "snippet": "    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {\n        assertGetClassThrowsException( className, ClassNotFoundException.class );\n    }",
        "begin_line": 867,
        "end_line": 869,
        "comment": "",
        "child_ranges": [
            "(line 868,col 9)-(line 868,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testShowJavaBug()",
        "snippet": "    public void testShowJavaBug() throws Exception {\n        // Tests with Collections$UnmodifiableSet\n        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n        Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\",  new Class[0]);\n        try {\n            isEmptyMethod.invoke(set, new Object[0]);\n            fail(\"Failed to throw IllegalAccessException as expected\");\n        } catch(IllegalAccessException iae) {\n            // expected\n        }\n    }",
        "begin_line": 873,
        "end_line": 883,
        "comment": " We may have to delete this if a JDK fixes the bug.",
        "child_ranges": [
            "(line 875,col 9)-(line 875,col 72)",
            "(line 876,col 9)-(line 876,col 82)",
            "(line 877,col 9)-(line 882,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testGetPublicMethod()",
        "snippet": "    public void testGetPublicMethod() throws Exception {\n        // Tests with Collections$UnmodifiableSet\n        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n        Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n\n        try {\n            isEmptyMethod.invoke(set, new Object[0]);\n        } catch(java.lang.IllegalAccessException iae) {\n            fail(\"Should not have thrown IllegalAccessException\");\n        }\n\n        // Tests with a public Class\n        Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\",  new Class[0]);\n            assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n    }",
        "begin_line": 885,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 887,col 9)-(line 887,col 72)",
            "(line 888,col 9)-(line 888,col 100)",
            "(line 889,col 13)-(line 889,col 92)",
            "(line 891,col 9)-(line 895,col 9)",
            "(line 898,col 9)-(line 898,col 100)",
            "(line 899,col 13)-(line 899,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.testToClass_object()",
        "snippet": "    public void testToClass_object() {\n        assertNull(ClassUtils.toClass(null));\n\n        assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\n\n        assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class },\n                ClassUtils.toClass(new Object[] { \"Test\", 1, 99d })));\n\n        assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class },\n                ClassUtils.toClass(new Object[] { \"Test\", null, 99d })));\n    }",
        "begin_line": 902,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 903,col 9)-(line 903,col 45)",
            "(line 905,col 9)-(line 905,col 100)",
            "(line 907,col 9)-(line 908,col 70)",
            "(line 910,col 9)-(line 911,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Object()",
        "snippet": "    public void test_getShortCanonicalName_Object() {\n        assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(new ClassUtils[0], \"<null>\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\n    }",
        "begin_line": 914,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 915,col 9)-(line 915,col 81)",
            "(line 916,col 9)-(line 916,col 97)",
            "(line 917,col 9)-(line 917,col 100)",
            "(line 918,col 9)-(line 918,col 105)",
            "(line 919,col 9)-(line 919,col 86)",
            "(line 920,col 9)-(line 920,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Class()",
        "snippet": "    public void test_getShortCanonicalName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\n    }",
        "begin_line": 923,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 924,col 9)-(line 924,col 87)",
            "(line 925,col 9)-(line 925,col 91)",
            "(line 926,col 9)-(line 926,col 95)",
            "(line 927,col 9)-(line 927,col 77)",
            "(line 928,col 9)-(line 928,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_String()",
        "snippet": "    public void test_getShortCanonicalName_String() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"[I\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\n        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\n        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\n    }",
        "begin_line": 931,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 932,col 9)-(line 932,col 108)",
            "(line 933,col 9)-(line 933,col 113)",
            "(line 934,col 9)-(line 934,col 116)",
            "(line 935,col 9)-(line 935,col 112)",
            "(line 936,col 9)-(line 936,col 116)",
            "(line 937,col 9)-(line 937,col 70)",
            "(line 938,col 9)-(line 938,col 73)",
            "(line 939,col 9)-(line 939,col 73)",
            "(line 940,col 9)-(line 940,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object()",
        "snippet": "    public void test_getPackageCanonicalName_Object() {\n        assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0], \"<null>\"));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\n    }",
        "begin_line": 943,
        "end_line": 950,
        "comment": "",
        "child_ranges": [
            "(line 944,col 9)-(line 944,col 83)",
            "(line 945,col 9)-(line 945,col 113)",
            "(line 946,col 9)-(line 946,col 114)",
            "(line 947,col 9)-(line 947,col 117)",
            "(line 948,col 9)-(line 948,col 83)",
            "(line 949,col 9)-(line 949,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Class()",
        "snippet": "    public void test_getPackageCanonicalName_Class() {\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\n        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\n    }",
        "begin_line": 952,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 953,col 9)-(line 953,col 103)",
            "(line 954,col 9)-(line 954,col 105)",
            "(line 955,col 9)-(line 955,col 107)",
            "(line 956,col 9)-(line 956,col 74)",
            "(line 957,col 9)-(line 957,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ClassUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_String()",
        "snippet": "    public void test_getPackageCanonicalName_String() {\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n        assertEquals(\"org.apache.commons.lang3\",\n            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\n        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\n    }",
        "begin_line": 960,
        "end_line": 975,
        "comment": "",
        "child_ranges": [
            "(line 961,col 9)-(line 962,col 87)",
            "(line 963,col 9)-(line 964,col 90)",
            "(line 965,col 9)-(line 966,col 91)",
            "(line 967,col 9)-(line 968,col 89)",
            "(line 969,col 9)-(line 970,col 91)",
            "(line 971,col 9)-(line 971,col 67)",
            "(line 972,col 9)-(line 972,col 68)",
            "(line 973,col 9)-(line 973,col 70)",
            "(line 974,col 9)-(line 974,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testJira567()",
        "snippet": "    public void testJira567(){\n        Number[] n;\n        // Valid array construction\n        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n        assertEquals(2,n.length);\n        assertEquals(Number.class,n.getClass().getComponentType());\n        try {\n            // Invalid - can't store Long in Integer array\n               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n               fail(\"Should have generated IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 19)",
            "(line 35,col 9)-(line 35,col 93)",
            "(line 36,col 9)-(line 36,col 33)",
            "(line 37,col 9)-(line 37,col 67)",
            "(line 38,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean()",
        "snippet": "    public void testAddObjectArrayBoolean() {\n        boolean[] newArray;\n        newArray = ArrayUtils.add((boolean[])null, false);\n        assertTrue(Arrays.equals(new boolean[]{false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((boolean[])null, true);\n        assertTrue(Arrays.equals(new boolean[]{true}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        boolean[] array1 = new boolean[]{true, false, true};\n        newArray = ArrayUtils.add(array1, false);\n        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 46,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 27)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 66)",
            "(line 50,col 9)-(line 50,col 75)",
            "(line 51,col 9)-(line 51,col 57)",
            "(line 52,col 9)-(line 52,col 65)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 54,col 9)-(line 54,col 60)",
            "(line 55,col 9)-(line 55,col 49)",
            "(line 56,col 9)-(line 56,col 85)",
            "(line 57,col 9)-(line 57,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte()",
        "snippet": "    public void testAddObjectArrayByte() {\n        byte[] newArray;\n        newArray = ArrayUtils.add((byte[])null, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((byte[])null, (byte)1);\n        assertTrue(Arrays.equals(new byte[]{1}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        byte[] array1 = new byte[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (byte)4);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 24)",
            "(line 62,col 9)-(line 62,col 57)",
            "(line 63,col 9)-(line 63,col 59)",
            "(line 64,col 9)-(line 64,col 72)",
            "(line 65,col 9)-(line 65,col 57)",
            "(line 66,col 9)-(line 66,col 59)",
            "(line 67,col 9)-(line 67,col 72)",
            "(line 68,col 9)-(line 68,col 44)",
            "(line 69,col 9)-(line 69,col 51)",
            "(line 70,col 9)-(line 70,col 68)",
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 68)",
            "(line 74,col 9)-(line 74,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayChar()",
        "snippet": "    public void testAddObjectArrayChar() {\n        char[] newArray;\n        newArray = ArrayUtils.add((char[])null, (char)0);\n        assertTrue(Arrays.equals(new char[]{0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((char[])null, (char)1);\n        assertTrue(Arrays.equals(new char[]{1}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        char[] array1 = new char[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (char)0);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (char)4);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 77,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 24)",
            "(line 79,col 9)-(line 79,col 57)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 77)",
            "(line 82,col 9)-(line 82,col 57)",
            "(line 83,col 9)-(line 83,col 59)",
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 68)",
            "(line 88,col 9)-(line 88,col 77)",
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 68)",
            "(line 91,col 9)-(line 91,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble()",
        "snippet": "    public void testAddObjectArrayDouble() {\n        double[] newArray;\n        newArray = ArrayUtils.add((double[])null, 0);\n        assertTrue(Arrays.equals(new double[]{0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((double[])null, 1);\n        assertTrue(Arrays.equals(new double[]{1}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        double[] array1 = new double[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 94,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 26)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 74)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 100,col 9)-(line 100,col 61)",
            "(line 101,col 9)-(line 101,col 74)",
            "(line 102,col 9)-(line 102,col 48)",
            "(line 103,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 104,col 70)",
            "(line 105,col 9)-(line 105,col 74)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayFloat()",
        "snippet": "    public void testAddObjectArrayFloat() {\n        float[] newArray;\n        newArray = ArrayUtils.add((float[])null, 0);\n        assertTrue(Arrays.equals(new float[]{0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((float[])null, 1);\n        assertTrue(Arrays.equals(new float[]{1}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        float[] array1 = new float[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 111,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 73)",
            "(line 116,col 9)-(line 116,col 52)",
            "(line 117,col 9)-(line 117,col 60)",
            "(line 118,col 9)-(line 118,col 73)",
            "(line 119,col 9)-(line 119,col 46)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 69)",
            "(line 122,col 9)-(line 122,col 73)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 69)",
            "(line 125,col 9)-(line 125,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayInt()",
        "snippet": "    public void testAddObjectArrayInt() {\n        int[] newArray;\n        newArray = ArrayUtils.add((int[])null, 0);\n        assertTrue(Arrays.equals(new int[]{0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((int[])null, 1);\n        assertTrue(Arrays.equals(new int[]{1}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        int[] array1 = new int[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 128,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 23)",
            "(line 130,col 9)-(line 130,col 50)",
            "(line 131,col 9)-(line 131,col 58)",
            "(line 132,col 9)-(line 132,col 75)",
            "(line 133,col 9)-(line 133,col 50)",
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 75)",
            "(line 136,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 137,col 45)",
            "(line 138,col 9)-(line 138,col 67)",
            "(line 139,col 9)-(line 139,col 75)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong()",
        "snippet": "    public void testAddObjectArrayLong() {\n        long[] newArray;\n        newArray = ArrayUtils.add((long[])null, 0);\n        assertTrue(Arrays.equals(new long[]{0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((long[])null, 1);\n        assertTrue(Arrays.equals(new long[]{1}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        long[] array1 = new long[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 145,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 24)",
            "(line 147,col 9)-(line 147,col 51)",
            "(line 148,col 9)-(line 148,col 59)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 45)",
            "(line 155,col 9)-(line 155,col 68)",
            "(line 156,col 9)-(line 156,col 72)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort()",
        "snippet": "    public void testAddObjectArrayShort() {\n        short[] newArray;\n        newArray = ArrayUtils.add((short[])null, (short)0);\n        assertTrue(Arrays.equals(new short[]{0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((short[])null, (short)1);\n        assertTrue(Arrays.equals(new short[]{1}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        short[] array1 = new short[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (short)0);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (short)4);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n    }",
        "begin_line": 162,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 25)",
            "(line 164,col 9)-(line 164,col 59)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 59)",
            "(line 168,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 73)",
            "(line 170,col 9)-(line 170,col 46)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 173,col 73)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayObject()",
        "snippet": "    public void testAddObjectArrayObject() {\n        Object[] newArray;\n\n        //show that not casting is okay\n        newArray = ArrayUtils.add((Object[])null, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        //show that not casting to Object[] is okay and will assume String based on \"a\"\n        String[] newStringArray = ArrayUtils.add(null, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newStringArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newStringArray));\n        assertEquals(String.class, newStringArray.getClass().getComponentType());\n\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        newArray = ArrayUtils.add(stringArray1, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        newArray = ArrayUtils.add(stringArray1, \"d\");\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n        newArray = ArrayUtils.add(numberArray1, new Float(3));\n        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n        assertEquals(Number.class, newArray.getClass().getComponentType());\n\n        numberArray1 = null;\n        newArray = ArrayUtils.add(numberArray1, new Float(3));\n        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n        assertEquals(Float.class, newArray.getClass().getComponentType());\n    }",
        "begin_line": 179,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 26)",
            "(line 183,col 9)-(line 183,col 55)",
            "(line 184,col 9)-(line 184,col 65)",
            "(line 185,col 9)-(line 185,col 65)",
            "(line 186,col 9)-(line 186,col 75)",
            "(line 189,col 9)-(line 189,col 60)",
            "(line 190,col 9)-(line 190,col 71)",
            "(line 191,col 9)-(line 191,col 71)",
            "(line 192,col 9)-(line 192,col 81)",
            "(line 194,col 9)-(line 194,col 60)",
            "(line 195,col 9)-(line 195,col 54)",
            "(line 196,col 9)-(line 196,col 81)",
            "(line 197,col 9)-(line 197,col 75)",
            "(line 199,col 9)-(line 199,col 53)",
            "(line 200,col 9)-(line 200,col 80)",
            "(line 201,col 9)-(line 201,col 75)",
            "(line 203,col 9)-(line 203,col 76)",
            "(line 204,col 9)-(line 204,col 62)",
            "(line 205,col 9)-(line 205,col 105)",
            "(line 206,col 9)-(line 206,col 75)",
            "(line 208,col 9)-(line 208,col 28)",
            "(line 209,col 9)-(line 209,col 62)",
            "(line 210,col 9)-(line 210,col 73)",
            "(line 211,col 9)-(line 211,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testLANG571()",
        "snippet": "    public void testLANG571(){\n        String[] stringArray=null;\n        String aString=null;\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, 0, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n    }",
        "begin_line": 214,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 34)",
            "(line 216,col 9)-(line 216,col 28)",
            "(line 217,col 9)-(line 223,col 9)",
            "(line 224,col 9)-(line 230,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray()",
        "snippet": "    public void testAddObjectArrayToObjectArray() {\n        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n        Object[] newArray;\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n        newArray = ArrayUtils.addAll(stringArray1, (String[]) null);\n        assertNotSame(stringArray1, newArray);\n        assertTrue(Arrays.equals(stringArray1, newArray));\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, stringArray2);\n        assertNotSame(stringArray2, newArray);\n        assertTrue(Arrays.equals(stringArray2, newArray));\n        assertTrue(Arrays.equals((new String[]{\"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(stringArray1, stringArray2);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArrayNull = new String []{null};\n        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);\n        assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        // boolean\n        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },\n            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { false, true },\n            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { true, false },\n            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n\n        // char\n        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },\n            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'c', 'd' },\n            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'a', 'b' },\n            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n\n        // byte\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },\n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },\n            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },\n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n\n        // short\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },\n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },\n            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },\n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n\n        // int\n        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },\n            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { -1000, -1 },\n            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { 1, 1000 },\n            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n\n        // long\n        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },\n            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },\n            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1L, -1L },\n            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n\n        // float\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },\n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },\n            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },\n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n\n        // double\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },\n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { 0, 9.99 },\n            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },\n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n\n    }",
        "begin_line": 233,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 72)",
            "(line 235,col 9)-(line 235,col 26)",
            "(line 236,col 9)-(line 236,col 60)",
            "(line 237,col 9)-(line 237,col 60)",
            "(line 238,col 9)-(line 238,col 68)",
            "(line 239,col 9)-(line 239,col 46)",
            "(line 240,col 9)-(line 240,col 58)",
            "(line 241,col 9)-(line 241,col 75)",
            "(line 242,col 9)-(line 242,col 75)",
            "(line 243,col 9)-(line 243,col 57)",
            "(line 244,col 9)-(line 244,col 46)",
            "(line 245,col 9)-(line 245,col 58)",
            "(line 246,col 9)-(line 246,col 75)",
            "(line 247,col 9)-(line 247,col 75)",
            "(line 248,col 9)-(line 248,col 65)",
            "(line 249,col 9)-(line 249,col 90)",
            "(line 250,col 9)-(line 250,col 75)",
            "(line 251,col 9)-(line 251,col 85)",
            "(line 252,col 9)-(line 252,col 75)",
            "(line 253,col 9)-(line 253,col 62)",
            "(line 254,col 9)-(line 254,col 75)",
            "(line 255,col 9)-(line 255,col 74)",
            "(line 256,col 9)-(line 256,col 75)",
            "(line 257,col 9)-(line 257,col 62)",
            "(line 258,col 9)-(line 258,col 75)",
            "(line 259,col 9)-(line 259,col 99)",
            "(line 260,col 9)-(line 260,col 75)",
            "(line 261,col 9)-(line 261,col 62)",
            "(line 262,col 9)-(line 262,col 75)",
            "(line 263,col 9)-(line 263,col 55)",
            "(line 264,col 9)-(line 264,col 71)",
            "(line 265,col 9)-(line 265,col 72)",
            "(line 266,col 9)-(line 266,col 75)",
            "(line 269,col 9)-(line 270,col 98)",
            "(line 272,col 9)-(line 273,col 73)",
            "(line 275,col 9)-(line 276,col 73)",
            "(line 279,col 9)-(line 280,col 86)",
            "(line 282,col 9)-(line 283,col 67)",
            "(line 285,col 9)-(line 286,col 67)",
            "(line 289,col 9)-(line 290,col 106)",
            "(line 292,col 9)-(line 293,col 77)",
            "(line 295,col 9)-(line 296,col 77)",
            "(line 299,col 9)-(line 300,col 116)",
            "(line 302,col 9)-(line 303,col 82)",
            "(line 305,col 9)-(line 306,col 82)",
            "(line 309,col 9)-(line 310,col 84)",
            "(line 312,col 9)-(line 313,col 67)",
            "(line 315,col 9)-(line 316,col 65)",
            "(line 319,col 9)-(line 320,col 90)",
            "(line 322,col 9)-(line 323,col 72)",
            "(line 325,col 9)-(line 326,col 66)",
            "(line 329,col 9)-(line 330,col 95)",
            "(line 332,col 9)-(line 333,col 71)",
            "(line 335,col 9)-(line 336,col 72)",
            "(line 339,col 9)-(line 340,col 98)",
            "(line 342,col 9)-(line 343,col 68)",
            "(line 345,col 9)-(line 346,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex()",
        "snippet": "    public void testAddObjectAtIndex() {\n        Object[] newArray;\n        newArray = ArrayUtils.add((Object[])null, 0, \"a\");\n        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        newArray = ArrayUtils.add(stringArray1, 0, null);\n        assertTrue(Arrays.equals((new String[]{null, \"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 1, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", null, \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 3, null);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(stringArray1, 3, \"d\");\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n        Object[] result = ArrayUtils.add(o, 2, \"3\");\n        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n\n        assertNotNull(result);\n        assertEquals(4, result.length);\n        assertEquals(\"1\", result[0]);\n        assertEquals(\"2\", result[1]);\n        assertEquals(\"3\", result[2]);\n        assertEquals(\"4\", result[3]);\n        assertNotNull(result2);\n        assertEquals(4, result2.length);\n        assertEquals(\"1\", result2[0]);\n        assertEquals(\"2\", result2[1]);\n        assertEquals(\"4\", result2[2]);\n        assertEquals(\"5\", result2[3]);\n\n        // boolean tests\n        boolean[] booleanArray = ArrayUtils.add( null, 0, true );\n        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );\n        try {\n            booleanArray = ArrayUtils.add( null, -1, true );\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);\n        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);\n        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);\n        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );\n        try {\n            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // char tests\n        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );\n        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );\n        try {\n            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');\n        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');\n        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');\n        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );\n        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');\n        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );\n        try {\n            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // short tests\n        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);\n        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );\n        try {\n            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);\n        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );\n        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);\n        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );\n        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);\n        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );\n        try {\n            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // byte tests\n        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);\n        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );\n        try {\n            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);\n        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );\n        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);\n        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );\n        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);\n        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );\n        try {\n            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // int tests\n        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);\n        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );\n        try {\n            intArray = ArrayUtils.add( (int[]) null, -1, 2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);\n        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );\n        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);\n        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );\n        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);\n        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );\n        try {\n            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // long tests\n        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);\n        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );\n        try {\n            longArray = ArrayUtils.add( (long[]) null, -1, 2L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);\n        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );\n        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);\n        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );\n        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);\n        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );\n        try {\n            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // float tests\n        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);\n        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );\n        try {\n            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);\n        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );\n        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);\n        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );\n        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\n        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );\n        try {\n            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n\n        // double tests\n        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);\n        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );\n        try {\n          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n        }\n        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);\n        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );\n        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);\n        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );\n        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\n        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );\n        try {\n            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n        }\n        try {\n            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);\n        } catch(IndexOutOfBoundsException e) {\n            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n        }\n    }",
        "begin_line": 350,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 26)",
            "(line 352,col 9)-(line 352,col 58)",
            "(line 353,col 9)-(line 353,col 65)",
            "(line 354,col 9)-(line 354,col 65)",
            "(line 355,col 9)-(line 355,col 75)",
            "(line 356,col 9)-(line 356,col 60)",
            "(line 357,col 9)-(line 357,col 57)",
            "(line 358,col 9)-(line 358,col 81)",
            "(line 359,col 9)-(line 359,col 75)",
            "(line 360,col 9)-(line 360,col 57)",
            "(line 361,col 9)-(line 361,col 81)",
            "(line 362,col 9)-(line 362,col 75)",
            "(line 363,col 9)-(line 363,col 57)",
            "(line 364,col 9)-(line 364,col 81)",
            "(line 365,col 9)-(line 365,col 75)",
            "(line 366,col 9)-(line 366,col 56)",
            "(line 367,col 9)-(line 367,col 80)",
            "(line 368,col 9)-(line 368,col 75)",
            "(line 369,col 9)-(line 369,col 75)",
            "(line 371,col 9)-(line 371,col 50)",
            "(line 372,col 9)-(line 372,col 52)",
            "(line 373,col 9)-(line 373,col 53)",
            "(line 375,col 9)-(line 375,col 30)",
            "(line 376,col 9)-(line 376,col 39)",
            "(line 377,col 9)-(line 377,col 37)",
            "(line 378,col 9)-(line 378,col 37)",
            "(line 379,col 9)-(line 379,col 37)",
            "(line 380,col 9)-(line 380,col 37)",
            "(line 381,col 9)-(line 381,col 31)",
            "(line 382,col 9)-(line 382,col 40)",
            "(line 383,col 9)-(line 383,col 38)",
            "(line 384,col 9)-(line 384,col 38)",
            "(line 385,col 9)-(line 385,col 38)",
            "(line 386,col 9)-(line 386,col 38)",
            "(line 389,col 9)-(line 389,col 65)",
            "(line 390,col 9)-(line 390,col 76)",
            "(line 391,col 9)-(line 395,col 9)",
            "(line 396,col 9)-(line 396,col 73)",
            "(line 397,col 9)-(line 397,col 83)",
            "(line 398,col 9)-(line 398,col 73)",
            "(line 399,col 9)-(line 399,col 83)",
            "(line 400,col 9)-(line 400,col 79)",
            "(line 401,col 9)-(line 401,col 89)",
            "(line 402,col 9)-(line 406,col 9)",
            "(line 407,col 9)-(line 411,col 9)",
            "(line 414,col 9)-(line 414,col 67)",
            "(line 415,col 9)-(line 415,col 69)",
            "(line 416,col 9)-(line 420,col 9)",
            "(line 421,col 9)-(line 421,col 64)",
            "(line 422,col 9)-(line 422,col 74)",
            "(line 423,col 9)-(line 423,col 69)",
            "(line 424,col 9)-(line 424,col 79)",
            "(line 425,col 9)-(line 425,col 69)",
            "(line 426,col 9)-(line 426,col 79)",
            "(line 427,col 9)-(line 427,col 74)",
            "(line 428,col 9)-(line 428,col 84)",
            "(line 429,col 9)-(line 433,col 9)",
            "(line 434,col 9)-(line 438,col 9)",
            "(line 441,col 9)-(line 441,col 78)",
            "(line 442,col 9)-(line 442,col 72)",
            "(line 443,col 9)-(line 447,col 9)",
            "(line 448,col 9)-(line 448,col 74)",
            "(line 449,col 9)-(line 449,col 76)",
            "(line 450,col 9)-(line 450,col 74)",
            "(line 451,col 9)-(line 451,col 76)",
            "(line 452,col 9)-(line 452,col 76)",
            "(line 453,col 9)-(line 453,col 78)",
            "(line 454,col 9)-(line 458,col 9)",
            "(line 459,col 9)-(line 463,col 9)",
            "(line 466,col 9)-(line 466,col 74)",
            "(line 467,col 9)-(line 467,col 70)",
            "(line 468,col 9)-(line 472,col 9)",
            "(line 473,col 9)-(line 473,col 70)",
            "(line 474,col 9)-(line 474,col 73)",
            "(line 475,col 9)-(line 475,col 70)",
            "(line 476,col 9)-(line 476,col 73)",
            "(line 477,col 9)-(line 477,col 73)",
            "(line 478,col 9)-(line 478,col 76)",
            "(line 479,col 9)-(line 483,col 9)",
            "(line 484,col 9)-(line 488,col 9)",
            "(line 491,col 9)-(line 491,col 64)",
            "(line 492,col 9)-(line 492,col 68)",
            "(line 493,col 9)-(line 497,col 9)",
            "(line 498,col 9)-(line 498,col 62)",
            "(line 499,col 9)-(line 499,col 72)",
            "(line 500,col 9)-(line 500,col 62)",
            "(line 501,col 9)-(line 501,col 72)",
            "(line 502,col 9)-(line 502,col 64)",
            "(line 503,col 9)-(line 503,col 74)",
            "(line 504,col 9)-(line 508,col 9)",
            "(line 509,col 9)-(line 513,col 9)",
            "(line 516,col 9)-(line 516,col 69)",
            "(line 517,col 9)-(line 517,col 72)",
            "(line 518,col 9)-(line 522,col 9)",
            "(line 523,col 9)-(line 523,col 67)",
            "(line 524,col 9)-(line 524,col 77)",
            "(line 525,col 9)-(line 525,col 67)",
            "(line 526,col 9)-(line 526,col 77)",
            "(line 527,col 9)-(line 527,col 70)",
            "(line 528,col 9)-(line 528,col 80)",
            "(line 529,col 9)-(line 533,col 9)",
            "(line 534,col 9)-(line 538,col 9)",
            "(line 541,col 9)-(line 541,col 76)",
            "(line 542,col 9)-(line 542,col 78)",
            "(line 543,col 9)-(line 547,col 9)",
            "(line 548,col 9)-(line 548,col 75)",
            "(line 549,col 9)-(line 549,col 85)",
            "(line 550,col 9)-(line 550,col 75)",
            "(line 551,col 9)-(line 551,col 85)",
            "(line 552,col 9)-(line 552,col 80)",
            "(line 553,col 9)-(line 553,col 90)",
            "(line 554,col 9)-(line 558,col 9)",
            "(line 559,col 9)-(line 563,col 9)",
            "(line 566,col 9)-(line 566,col 77)",
            "(line 567,col 9)-(line 567,col 78)",
            "(line 568,col 9)-(line 572,col 9)",
            "(line 573,col 9)-(line 573,col 74)",
            "(line 574,col 9)-(line 574,col 84)",
            "(line 575,col 9)-(line 575,col 74)",
            "(line 576,col 9)-(line 576,col 84)",
            "(line 577,col 9)-(line 577,col 78)",
            "(line 578,col 9)-(line 578,col 88)",
            "(line 579,col 9)-(line 583,col 9)",
            "(line 584,col 9)-(line 588,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.SystemUtilsTest(java.lang.String)",
        "snippet": "    public SystemUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.getJavaVersionAsFloat()",
        "snippet": "    private float getJavaVersionAsFloat() {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return 0f;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        }\n        try {\n            return Float.parseFloat(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }",
        "begin_line": 71,
        "end_line": 84,
        "comment": "\n     * <p>Gets the Java version number as a <code>float</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>1.2f</code> for JDK 1.2\n     *  <li><code>1.31f</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 1.31f for JDK 1.3.1\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 74,col 9)",
            "(line 75,col 9)-(line 75,col 58)",
            "(line 76,col 9)-(line 78,col 9)",
            "(line 79,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.getJavaVersionAsInt()",
        "snippet": "    private int getJavaVersionAsInt() {\n        if (JAVA_VERSION == null) {\n            return 0;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        } else {\n            str = str + \"0\";\n        }\n        try {\n            return Integer.parseInt(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }",
        "begin_line": 100,
        "end_line": 116,
        "comment": "\n     * <p>Gets the Java version number as an <code>int</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>120</code> for JDK 1.2\n     *  <li><code>131</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 131 for JDK 1.3.1\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 103,col 9)",
            "(line 104,col 9)-(line 104,col 58)",
            "(line 105,col 9)-(line 105,col 57)",
            "(line 106,col 9)-(line 110,col 9)",
            "(line 111,col 9)-(line 115,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.getJavaVersionTrimmed()",
        "snippet": "    private String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }",
        "begin_line": 123,
        "end_line": 133,
        "comment": "\n     * Trims the text of the java version to start with numbers.\n     * \n     * @return the trimmed java version\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private boolean getJavaVersionMatches(String versionPrefix) {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return false;\n        }\n        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n    }",
        "begin_line": 142,
        "end_line": 147,
        "comment": "\n     * Decides if the java version matches.\n     * \n     * @param versionPrefix\n     *                  the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "child_ranges": [
            "(line 143,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.getOSMatches(java.lang.String)",
        "snippet": "    private boolean getOSMatches(String osNamePrefix) {\n        if (OS_NAME == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix);\n    }",
        "begin_line": 156,
        "end_line": 161,
        "comment": "\n     * Decides if the operating system matches.\n     * \n     * @param osNamePrefix\n     *                  the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        if (OS_NAME == null || OS_VERSION == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n    }",
        "begin_line": 172,
        "end_line": 177,
        "comment": "\n     * Decides if the operating system matches.\n     * \n     * @param osNamePrefix\n     *                  the prefix for the os name\n     * @param osVersionPrefix\n     *                  the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 176,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new SystemUtils());\n        Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n    }",
        "begin_line": 180,
        "end_line": 187,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 41)",
            "(line 182,col 9)-(line 182,col 76)",
            "(line 183,col 9)-(line 183,col 37)",
            "(line 184,col 9)-(line 184,col 70)",
            "(line 185,col 9)-(line 185,col 80)",
            "(line 186,col 9)-(line 186,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetJavaHome()",
        "snippet": "    public void testGetJavaHome() {\n        File dir = SystemUtils.getJavaHome();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 192,
        "end_line": 196,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 45)",
            "(line 194,col 9)-(line 194,col 34)",
            "(line 195,col 9)-(line 195,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetJavaIoTmpDir()",
        "snippet": "    public void testGetJavaIoTmpDir() {\n        File dir = SystemUtils.getJavaIoTmpDir();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 201,
        "end_line": 205,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 49)",
            "(line 203,col 9)-(line 203,col 34)",
            "(line 204,col 9)-(line 204,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetUserDir()",
        "snippet": "    public void testGetUserDir() {\n        File dir = SystemUtils.getUserDir();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 210,
        "end_line": 214,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 44)",
            "(line 212,col 9)-(line 212,col 34)",
            "(line 213,col 9)-(line 213,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetUserHome()",
        "snippet": "    public void testGetUserHome() {\n        File dir = SystemUtils.getUserHome();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }",
        "begin_line": 219,
        "end_line": 223,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 45)",
            "(line 221,col 9)-(line 221,col 34)",
            "(line 222,col 9)-(line 222,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testIS_JAVA()",
        "snippet": "    public void testIS_JAVA() {\n        String javaVersion = System.getProperty(\"java.version\");\n        if (javaVersion == null) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.1\")) {\n            assertEquals(true, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.2\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(true, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.3\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(true, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.4\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(true, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.5\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(true, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n        } else if (javaVersion.startsWith(\"1.6\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(true, SystemUtils.IS_JAVA_1_6);\n        } else {\n            System.out.println(\"Can't test IS_JAVA value\");\n        }\n    }",
        "begin_line": 225,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 64)",
            "(line 227,col 9)-(line 278,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testIS_OS()",
        "snippet": "    public void testIS_OS() {\n        String osName = System.getProperty(\"os.name\");\n        if (osName == null) {\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n            assertEquals(false, SystemUtils.IS_OS_LINUX);\n            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n        } else if (osName.startsWith(\"Windows\")) {\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"Solaris\")) {\n            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.toLowerCase(Locale.ENGLISH).startsWith(\"linux\")) {\n            assertEquals(true, SystemUtils.IS_OS_LINUX);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"Mac OS X\")) {\n            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"OS/2\")) {\n            assertEquals(true, SystemUtils.IS_OS_OS2);\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"SunOS\")) {\n            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else {\n            System.out.println(\"Can't test IS_OS value\");\n        }\n    }",
        "begin_line": 281,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 54)",
            "(line 283,col 9)-(line 314,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAsFloat()",
        "snippet": "    public void testJavaVersionAsFloat() {\n        JAVA_VERSION = null;\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.2\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.3.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.3.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.4.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.4.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.5.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"1.6.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n        JAVA_VERSION = \"XXX-1.3.x\";  //error\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0.0f, getJavaVersionAsFloat(), 0.000001f);\n    }",
        "begin_line": 318,
        "end_line": 352,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 28)",
            "(line 320,col 9)-(line 320,col 55)",
            "(line 321,col 9)-(line 321,col 61)",
            "(line 322,col 9)-(line 322,col 29)",
            "(line 323,col 9)-(line 323,col 55)",
            "(line 324,col 9)-(line 324,col 63)",
            "(line 325,col 9)-(line 325,col 29)",
            "(line 326,col 9)-(line 326,col 55)",
            "(line 327,col 9)-(line 327,col 63)",
            "(line 328,col 9)-(line 328,col 31)",
            "(line 329,col 9)-(line 329,col 55)",
            "(line 330,col 9)-(line 330,col 63)",
            "(line 331,col 9)-(line 331,col 31)",
            "(line 332,col 9)-(line 332,col 55)",
            "(line 333,col 9)-(line 333,col 64)",
            "(line 334,col 9)-(line 334,col 31)",
            "(line 335,col 9)-(line 335,col 55)",
            "(line 336,col 9)-(line 336,col 63)",
            "(line 337,col 9)-(line 337,col 31)",
            "(line 338,col 9)-(line 338,col 55)",
            "(line 339,col 9)-(line 339,col 64)",
            "(line 340,col 9)-(line 340,col 31)",
            "(line 341,col 9)-(line 341,col 55)",
            "(line 342,col 9)-(line 342,col 63)",
            "(line 343,col 9)-(line 343,col 31)",
            "(line 344,col 9)-(line 344,col 55)",
            "(line 345,col 9)-(line 345,col 63)",
            "(line 346,col 9)-(line 346,col 38)",
            "(line 347,col 9)-(line 347,col 55)",
            "(line 348,col 9)-(line 348,col 64)",
            "(line 349,col 9)-(line 349,col 35)",
            "(line 350,col 9)-(line 350,col 55)",
            "(line 351,col 9)-(line 351,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAsInt()",
        "snippet": "    public void testJavaVersionAsInt() {\n        JAVA_VERSION = null;\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(110, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.2\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(120, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.3.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(130, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.3.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(131, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.4.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(140, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.4.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(141, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.5.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(150, getJavaVersionAsInt());\n        JAVA_VERSION = \"1.6.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(160, getJavaVersionAsInt());\n        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(131, getJavaVersionAsInt());\n        JAVA_VERSION = \"XXX-1.3.x\";  //error\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(0, getJavaVersionAsInt());\n    }",
        "begin_line": 354,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 28)",
            "(line 356,col 9)-(line 356,col 55)",
            "(line 357,col 9)-(line 357,col 47)",
            "(line 358,col 9)-(line 358,col 29)",
            "(line 359,col 9)-(line 359,col 55)",
            "(line 360,col 9)-(line 360,col 49)",
            "(line 361,col 9)-(line 361,col 29)",
            "(line 362,col 9)-(line 362,col 55)",
            "(line 363,col 9)-(line 363,col 49)",
            "(line 364,col 9)-(line 364,col 31)",
            "(line 365,col 9)-(line 365,col 55)",
            "(line 366,col 9)-(line 366,col 49)",
            "(line 367,col 9)-(line 367,col 31)",
            "(line 368,col 9)-(line 368,col 55)",
            "(line 369,col 9)-(line 369,col 49)",
            "(line 370,col 9)-(line 370,col 31)",
            "(line 371,col 9)-(line 371,col 55)",
            "(line 372,col 9)-(line 372,col 49)",
            "(line 373,col 9)-(line 373,col 31)",
            "(line 374,col 9)-(line 374,col 55)",
            "(line 375,col 9)-(line 375,col 49)",
            "(line 376,col 9)-(line 376,col 31)",
            "(line 377,col 9)-(line 377,col 55)",
            "(line 378,col 9)-(line 378,col 49)",
            "(line 379,col 9)-(line 379,col 31)",
            "(line 380,col 9)-(line 380,col 55)",
            "(line 381,col 9)-(line 381,col 49)",
            "(line 382,col 9)-(line 382,col 38)",
            "(line 383,col 9)-(line 383,col 55)",
            "(line 384,col 9)-(line 384,col 49)",
            "(line 385,col 9)-(line 385,col 35)",
            "(line 386,col 9)-(line 386,col 55)",
            "(line 387,col 9)-(line 387,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAtLeastFloat()",
        "snippet": "    public void testJavaVersionAtLeastFloat() {\n        float version = SystemUtils.JAVA_VERSION_FLOAT;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version -= 0.1f;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version += 0.2f;\n        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n    }",
        "begin_line": 390,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 55)",
            "(line 392,col 9)-(line 392,col 70)",
            "(line 393,col 9)-(line 393,col 24)",
            "(line 394,col 9)-(line 394,col 70)",
            "(line 395,col 9)-(line 395,col 24)",
            "(line 396,col 9)-(line 396,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAtLeastInt()",
        "snippet": "    public void testJavaVersionAtLeastInt() {\n        int version = SystemUtils.JAVA_VERSION_INT;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version -= 10;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version += 20;\n        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n    }",
        "begin_line": 399,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 400,col 9)-(line 400,col 51)",
            "(line 401,col 9)-(line 401,col 70)",
            "(line 402,col 9)-(line 402,col 22)",
            "(line 403,col 9)-(line 403,col 70)",
            "(line 404,col 9)-(line 404,col 22)",
            "(line 405,col 9)-(line 405,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionMatches()",
        "snippet": "    public void testJavaVersionMatches() {\n        JAVA_VERSION = null;\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.2\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.3.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.3.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.4.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.4.1\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.5.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n        JAVA_VERSION = \"1.6.0\";\n        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n    }",
        "begin_line": 409,
        "end_line": 473,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 28)",
            "(line 411,col 9)-(line 411,col 55)",
            "(line 412,col 9)-(line 412,col 58)",
            "(line 413,col 9)-(line 413,col 58)",
            "(line 414,col 9)-(line 414,col 58)",
            "(line 415,col 9)-(line 415,col 58)",
            "(line 416,col 9)-(line 416,col 58)",
            "(line 417,col 9)-(line 417,col 29)",
            "(line 418,col 9)-(line 418,col 55)",
            "(line 419,col 9)-(line 419,col 57)",
            "(line 420,col 9)-(line 420,col 58)",
            "(line 421,col 9)-(line 421,col 58)",
            "(line 422,col 9)-(line 422,col 58)",
            "(line 423,col 9)-(line 423,col 58)",
            "(line 424,col 9)-(line 424,col 29)",
            "(line 425,col 9)-(line 425,col 55)",
            "(line 426,col 9)-(line 426,col 58)",
            "(line 427,col 9)-(line 427,col 57)",
            "(line 428,col 9)-(line 428,col 58)",
            "(line 429,col 9)-(line 429,col 58)",
            "(line 430,col 9)-(line 430,col 58)",
            "(line 431,col 9)-(line 431,col 31)",
            "(line 432,col 9)-(line 432,col 55)",
            "(line 433,col 9)-(line 433,col 58)",
            "(line 434,col 9)-(line 434,col 58)",
            "(line 435,col 9)-(line 435,col 57)",
            "(line 436,col 9)-(line 436,col 58)",
            "(line 437,col 9)-(line 437,col 58)",
            "(line 438,col 9)-(line 438,col 31)",
            "(line 439,col 9)-(line 439,col 55)",
            "(line 440,col 9)-(line 440,col 58)",
            "(line 441,col 9)-(line 441,col 58)",
            "(line 442,col 9)-(line 442,col 57)",
            "(line 443,col 9)-(line 443,col 58)",
            "(line 444,col 9)-(line 444,col 58)",
            "(line 445,col 9)-(line 445,col 31)",
            "(line 446,col 9)-(line 446,col 55)",
            "(line 447,col 9)-(line 447,col 58)",
            "(line 448,col 9)-(line 448,col 58)",
            "(line 449,col 9)-(line 449,col 58)",
            "(line 450,col 9)-(line 450,col 57)",
            "(line 451,col 9)-(line 451,col 58)",
            "(line 452,col 9)-(line 452,col 31)",
            "(line 453,col 9)-(line 453,col 55)",
            "(line 454,col 9)-(line 454,col 58)",
            "(line 455,col 9)-(line 455,col 58)",
            "(line 456,col 9)-(line 456,col 58)",
            "(line 457,col 9)-(line 457,col 57)",
            "(line 458,col 9)-(line 458,col 58)",
            "(line 459,col 9)-(line 459,col 31)",
            "(line 460,col 9)-(line 460,col 55)",
            "(line 461,col 9)-(line 461,col 58)",
            "(line 462,col 9)-(line 462,col 58)",
            "(line 463,col 9)-(line 463,col 58)",
            "(line 464,col 9)-(line 464,col 58)",
            "(line 465,col 9)-(line 465,col 57)",
            "(line 466,col 9)-(line 466,col 31)",
            "(line 467,col 9)-(line 467,col 55)",
            "(line 468,col 9)-(line 468,col 58)",
            "(line 469,col 9)-(line 469,col 58)",
            "(line 470,col 9)-(line 470,col 58)",
            "(line 471,col 9)-(line 471,col 58)",
            "(line 472,col 9)-(line 472,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testOSMatches()",
        "snippet": "    public void testOSMatches() {\n        OS_NAME = null;\n        assertEquals(false, getOSMatches(\"Windows\"));\n        OS_NAME = \"Windows 95\";\n        assertEquals(true, getOSMatches(\"Windows\"));\n        OS_NAME = \"Windows NT\";\n        assertEquals(true, getOSMatches(\"Windows\"));\n        OS_NAME = \"OS/2\";\n        assertEquals(false, getOSMatches(\"Windows\"));\n    }",
        "begin_line": 475,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 23)",
            "(line 477,col 9)-(line 477,col 53)",
            "(line 478,col 9)-(line 478,col 31)",
            "(line 479,col 9)-(line 479,col 52)",
            "(line 480,col 9)-(line 480,col 31)",
            "(line 481,col 9)-(line 481,col 52)",
            "(line 482,col 9)-(line 482,col 25)",
            "(line 483,col 9)-(line 483,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testOSMatches2()",
        "snippet": "    public void testOSMatches2() {\n        OS_NAME = null;\n        OS_VERSION = null;\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows 95\";\n        OS_VERSION = \"4.0\";\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows 95\";\n        OS_VERSION = \"4.1\";\n        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows 98\";\n        OS_VERSION = \"4.1\";\n        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"Windows NT\";\n        OS_VERSION = \"4.0\";\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n        OS_NAME = \"OS/2\";\n        OS_VERSION = \"4.0\";\n        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n    }",
        "begin_line": 486,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 23)",
            "(line 488,col 9)-(line 488,col 26)",
            "(line 489,col 9)-(line 489,col 62)",
            "(line 490,col 9)-(line 490,col 31)",
            "(line 491,col 9)-(line 491,col 27)",
            "(line 492,col 9)-(line 492,col 62)",
            "(line 493,col 9)-(line 493,col 31)",
            "(line 494,col 9)-(line 494,col 27)",
            "(line 495,col 9)-(line 495,col 61)",
            "(line 496,col 9)-(line 496,col 31)",
            "(line 497,col 9)-(line 497,col 27)",
            "(line 498,col 9)-(line 498,col 61)",
            "(line 499,col 9)-(line 499,col 31)",
            "(line 500,col 9)-(line 500,col 27)",
            "(line 501,col 9)-(line 501,col 62)",
            "(line 502,col 9)-(line 502,col 25)",
            "(line 503,col 9)-(line 503,col 27)",
            "(line 504,col 9)-(line 504,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaAwtHeadless()",
        "snippet": "    public void testJavaAwtHeadless() {\n        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);\n        String expectedStringValue = System.getProperty(\"java.awt.headless\");\n        String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\n        assertNotNull(expectedStringValueWithDefault);\n        if (atLeastJava14) {\n            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();\n            if (expectedStringValue != null) {\n                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);\n            }\n            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());\n        } else {\n            assertNull(expectedStringValue);\n            assertNull(SystemUtils.JAVA_AWT_HEADLESS);\n            assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n        }\n        assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n    }",
        "begin_line": 507,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 70)",
            "(line 509,col 9)-(line 509,col 77)",
            "(line 510,col 9)-(line 510,col 97)",
            "(line 511,col 9)-(line 511,col 54)",
            "(line 512,col 9)-(line 522,col 9)",
            "(line 523,col 9)-(line 523,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.assertSupportedEncoding(java.lang.String)",
        "snippet": "    private void assertSupportedEncoding(String name) {\n        assertTrue(\"Encoding should be supported: \" + name, CharEncoding.isSupported(name));\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        new CharEncoding();\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n     * The class can be instantiated.\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.testMustBeSupportedJava1_3_1()",
        "snippet": "    public void testMustBeSupportedJava1_3_1() {\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n            this.assertSupportedEncoding(CharEncoding.UTF_16);\n            this.assertSupportedEncoding(CharEncoding.UTF_16BE);\n            this.assertSupportedEncoding(CharEncoding.UTF_16LE);\n            this.assertSupportedEncoding(CharEncoding.UTF_8);\n        } else {\n            this.warn(\"Java 1.3 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n    }",
        "begin_line": 42,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 52,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.testNotSupported()",
        "snippet": "    public void testNotSupported() {\n        assertFalse(CharEncoding.isSupported(null));\n        assertFalse(CharEncoding.isSupported(\"\"));\n        assertFalse(CharEncoding.isSupported(\" \"));\n        assertFalse(CharEncoding.isSupported(\"\\t\\r\\n\"));\n        assertFalse(CharEncoding.isSupported(\"DOESNOTEXIST\"));\n        assertFalse(CharEncoding.isSupported(\"this is not a valid encoding name\"));\n    }",
        "begin_line": 55,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 52)",
            "(line 57,col 9)-(line 57,col 50)",
            "(line 58,col 9)-(line 58,col 51)",
            "(line 59,col 9)-(line 59,col 56)",
            "(line 60,col 9)-(line 60,col 62)",
            "(line 61,col 9)-(line 61,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_1_8()",
        "snippet": "    public void testWorksOnJava1_1_8() {\n        //\n        // In this test, I simply deleted the encodings from the 1.3.1 list.\n        // The Javadoc do not specify which encodings are required.\n        //\n        if (SystemUtils.isJavaVersionAtLeast(1.1f)) {\n            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n            this.assertSupportedEncoding(CharEncoding.UTF_8);\n        } else {\n            this.warn(\"Java 1.1 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n    }",
        "begin_line": 64,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 75,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_2_2()",
        "snippet": "    public void testWorksOnJava1_2_2() {\n        //\n        // In this test, I simply deleted the encodings from the 1.3.1 list.\n        // The Javadoc do not specify which encodings are required.\n        //\n        if (SystemUtils.isJavaVersionAtLeast(1.2f)) {\n            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n            this.assertSupportedEncoding(CharEncoding.UTF_8);\n        } else {\n            this.warn(\"Java 1.2 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n    }",
        "begin_line": 78,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 89,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharEncodingTest.java",
        "signature": "org.apache.commons.lang3.CharEncodingTest.warn(java.lang.String)",
        "snippet": "    void warn(String msg) {\n        System.err.println(msg);\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.SerializationUtilsTest(java.lang.String)",
        "snippet": "    public SerializationUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        iString = \"foo\";\n        iInteger = new Integer(7);\n        iMap = new HashMap<Object, Object>();\n        iMap.put(\"FOO\", iString);\n        iMap.put(\"BAR\", iInteger);\n    }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 22)",
            "(line 57,col 9)-(line 57,col 24)",
            "(line 58,col 9)-(line 58,col 34)",
            "(line 59,col 9)-(line 59,col 45)",
            "(line 60,col 9)-(line 60,col 33)",
            "(line 61,col 9)-(line 61,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new SerializationUtils());\n        Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n    }",
        "begin_line": 65,
        "end_line": 72,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 48)",
            "(line 67,col 9)-(line 67,col 83)",
            "(line 68,col 9)-(line 68,col 37)",
            "(line 69,col 9)-(line 69,col 70)",
            "(line 70,col 9)-(line 70,col 87)",
            "(line 71,col 9)-(line 71,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testException()",
        "snippet": "    public void testException() {\n        SerializationException serEx;\n        Exception ex = new Exception();\n        \n        serEx = new SerializationException();\n        assertSame(null, serEx.getMessage());\n        assertSame(null, serEx.getCause());\n        \n        serEx = new SerializationException(\"Message\");\n        assertSame(\"Message\", serEx.getMessage());\n        assertSame(null, serEx.getCause());\n        \n        serEx = new SerializationException(ex);\n        assertEquals(\"java.lang.Exception\", serEx.getMessage());\n        assertSame(ex, serEx.getCause());\n        \n        serEx = new SerializationException(\"Message\", ex);\n        assertSame(\"Message\", serEx.getMessage());\n        assertSame(ex, serEx.getCause());\n    }",
        "begin_line": 74,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 37)",
            "(line 76,col 9)-(line 76,col 39)",
            "(line 78,col 9)-(line 78,col 45)",
            "(line 79,col 9)-(line 79,col 45)",
            "(line 80,col 9)-(line 80,col 43)",
            "(line 82,col 9)-(line 82,col 54)",
            "(line 83,col 9)-(line 83,col 50)",
            "(line 84,col 9)-(line 84,col 43)",
            "(line 86,col 9)-(line 86,col 47)",
            "(line 87,col 9)-(line 87,col 64)",
            "(line 88,col 9)-(line 88,col 41)",
            "(line 90,col 9)-(line 90,col 58)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStream()",
        "snippet": "    public void testSerializeStream() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        SerializationUtils.serialize(iMap, streamTest);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        byte[] testBytes = streamTest.toByteArray();\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 96,
        "end_line": 112,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 71)",
            "(line 98,col 9)-(line 98,col 55)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 101,col 9)-(line 101,col 68)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 103,col 9)-(line 103,col 20)",
            "(line 104,col 9)-(line 104,col 20)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 57)",
            "(line 109,col 9)-(line 111,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamUnserializable()",
        "snippet": "    public void testSerializeStreamUnserializable() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.serialize(iMap, streamTest);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 114,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 71)",
            "(line 116,col 9)-(line 121,col 9)",
            "(line 122,col 9)-(line 122,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullObj()",
        "snippet": "    public void testSerializeStreamNullObj() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        SerializationUtils.serialize(null, streamTest);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        byte[] testBytes = streamTest.toByteArray();\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 125,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 71)",
            "(line 127,col 9)-(line 127,col 55)",
            "(line 129,col 9)-(line 129,col 71)",
            "(line 130,col 9)-(line 130,col 68)",
            "(line 131,col 9)-(line 131,col 30)",
            "(line 132,col 9)-(line 132,col 20)",
            "(line 133,col 9)-(line 133,col 20)",
            "(line 135,col 9)-(line 135,col 52)",
            "(line 136,col 9)-(line 136,col 52)",
            "(line 137,col 9)-(line 137,col 57)",
            "(line 138,col 9)-(line 140,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull()",
        "snippet": "    public void testSerializeStreamObjNull() throws Exception {\n        try {\n            SerializationUtils.serialize(iMap, null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull()",
        "snippet": "    public void testSerializeStreamNullNull() throws Exception {\n        try {\n            SerializationUtils.serialize(null, null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 152,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeIOException()",
        "snippet": "    public void testSerializeIOException() throws Exception {\n        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n        // in the finally block\n        OutputStream streamTest = new OutputStream() {\n            @Override\n            public void write(int arg0) throws IOException {\n                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n            }\n        };\n        try {\n            SerializationUtils.serialize(iMap, streamTest);\n        }\n        catch(SerializationException e) {\n            assertEquals(\"java.io.IOException: \" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());\n        }\n    }",
        "begin_line": 161,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 169,col 10)",
            "(line 170,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.Anonymous-7d4965d0-a4f1-4a53-8cb8-9a7b5ceead5d.write(int)",
        "snippet": "            @Override\n            public void write(int arg0) throws IOException {\n                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n            }",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 17)-(line 167,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStream()",
        "snippet": "    public void testDeserializeStream() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        Object test = SerializationUtils.deserialize(inTest);\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap<?, ?>);\n        assertTrue(test != iMap);\n        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }",
        "begin_line": 180,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 71)",
            "(line 182,col 9)-(line 182,col 68)",
            "(line 183,col 9)-(line 183,col 30)",
            "(line 184,col 9)-(line 184,col 20)",
            "(line 185,col 9)-(line 185,col 20)",
            "(line 187,col 9)-(line 187,col 89)",
            "(line 188,col 9)-(line 188,col 61)",
            "(line 189,col 9)-(line 189,col 28)",
            "(line 190,col 9)-(line 190,col 50)",
            "(line 191,col 9)-(line 191,col 33)",
            "(line 192,col 9)-(line 192,col 53)",
            "(line 193,col 9)-(line 193,col 50)",
            "(line 194,col 9)-(line 194,col 50)",
            "(line 195,col 9)-(line 195,col 51)",
            "(line 196,col 9)-(line 196,col 51)",
            "(line 197,col 9)-(line 197,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamOfNull()",
        "snippet": "    public void testDeserializeStreamOfNull() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        Object test = SerializationUtils.deserialize(inTest);\n        assertNull(test);\n    }",
        "begin_line": 200,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 71)",
            "(line 202,col 9)-(line 202,col 68)",
            "(line 203,col 9)-(line 203,col 30)",
            "(line 204,col 9)-(line 204,col 20)",
            "(line 205,col 9)-(line 205,col 20)",
            "(line 207,col 9)-(line 207,col 89)",
            "(line 208,col 9)-(line 208,col 61)",
            "(line 209,col 9)-(line 209,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamNull()",
        "snippet": "    public void testDeserializeStreamNull() throws Exception {\n        try {\n            SerializationUtils.deserialize((InputStream) null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 212,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 217,col 9)",
            "(line 218,col 9)-(line 218,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamBadStream()",
        "snippet": "    public void testDeserializeStreamBadStream() throws Exception {\n        try {\n            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 221,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 226,col 9)",
            "(line 227,col 9)-(line 227,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamClassNotFound()",
        "snippet": "    public void testDeserializeStreamClassNotFound() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(new ClassNotFoundSerialization());\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        try {\n            @SuppressWarnings(\"unused\")\n            Object test = SerializationUtils.deserialize(inTest);\n        } catch(SerializationException se) {\n            assertEquals(\"java.lang.ClassNotFoundException: \" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());\n        }\n    }",
        "begin_line": 230,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 71)",
            "(line 232,col 9)-(line 232,col 68)",
            "(line 233,col 9)-(line 233,col 58)",
            "(line 234,col 9)-(line 234,col 20)",
            "(line 235,col 9)-(line 235,col 20)",
            "(line 237,col 9)-(line 237,col 89)",
            "(line 238,col 9)-(line 243,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytes()",
        "snippet": "    public void testSerializeBytes() throws Exception {\n        byte[] testBytes = SerializationUtils.serialize(iMap);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 248,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 62)",
            "(line 251,col 9)-(line 251,col 71)",
            "(line 252,col 9)-(line 252,col 68)",
            "(line 253,col 9)-(line 253,col 30)",
            "(line 254,col 9)-(line 254,col 20)",
            "(line 255,col 9)-(line 255,col 20)",
            "(line 257,col 9)-(line 257,col 52)",
            "(line 258,col 9)-(line 258,col 57)",
            "(line 259,col 9)-(line 261,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesUnserializable()",
        "snippet": "    public void testSerializeBytesUnserializable() throws Exception {\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.serialize(iMap);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 264,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 270,col 9)",
            "(line 271,col 9)-(line 271,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesNull()",
        "snippet": "    public void testSerializeBytesNull() throws Exception {\n        byte[] testBytes = SerializationUtils.serialize(null);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }",
        "begin_line": 274,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 62)",
            "(line 277,col 9)-(line 277,col 71)",
            "(line 278,col 9)-(line 278,col 68)",
            "(line 279,col 9)-(line 279,col 30)",
            "(line 280,col 9)-(line 280,col 20)",
            "(line 281,col 9)-(line 281,col 20)",
            "(line 283,col 9)-(line 283,col 52)",
            "(line 284,col 9)-(line 284,col 57)",
            "(line 285,col 9)-(line 287,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytes()",
        "snippet": "    public void testDeserializeBytes() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap<?, ?>);\n        assertTrue(test != iMap);\n        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }",
        "begin_line": 292,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 71)",
            "(line 294,col 9)-(line 294,col 68)",
            "(line 295,col 9)-(line 295,col 30)",
            "(line 296,col 9)-(line 296,col 20)",
            "(line 297,col 9)-(line 297,col 20)",
            "(line 299,col 9)-(line 299,col 79)",
            "(line 300,col 9)-(line 300,col 28)",
            "(line 301,col 9)-(line 301,col 50)",
            "(line 302,col 9)-(line 302,col 33)",
            "(line 303,col 9)-(line 303,col 53)",
            "(line 304,col 9)-(line 304,col 50)",
            "(line 305,col 9)-(line 305,col 50)",
            "(line 306,col 9)-(line 306,col 51)",
            "(line 307,col 9)-(line 307,col 51)",
            "(line 308,col 9)-(line 308,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesOfNull()",
        "snippet": "    public void testDeserializeBytesOfNull() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n        assertNull(test);\n    }",
        "begin_line": 311,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 71)",
            "(line 313,col 9)-(line 313,col 68)",
            "(line 314,col 9)-(line 314,col 30)",
            "(line 315,col 9)-(line 315,col 20)",
            "(line 316,col 9)-(line 316,col 20)",
            "(line 318,col 9)-(line 318,col 79)",
            "(line 319,col 9)-(line 319,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesNull()",
        "snippet": "    public void testDeserializeBytesNull() throws Exception {\n        try {\n            SerializationUtils.deserialize((byte[]) null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 322,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 327,col 9)",
            "(line 328,col 9)-(line 328,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream()",
        "snippet": "    public void testDeserializeBytesBadStream() throws Exception {\n        try {\n            SerializationUtils.deserialize(new byte[0]);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 331,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 336,col 9)",
            "(line 337,col 9)-(line 337,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testClone()",
        "snippet": "    public void testClone() throws Exception {\n        Object test = SerializationUtils.clone(iMap);\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap<?,?>);\n        assertTrue(test != iMap);\n        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }",
        "begin_line": 342,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 53)",
            "(line 344,col 9)-(line 344,col 28)",
            "(line 345,col 9)-(line 345,col 49)",
            "(line 346,col 9)-(line 346,col 33)",
            "(line 347,col 9)-(line 347,col 53)",
            "(line 348,col 9)-(line 348,col 50)",
            "(line 349,col 9)-(line 349,col 50)",
            "(line 350,col 9)-(line 350,col 51)",
            "(line 351,col 9)-(line 351,col 51)",
            "(line 352,col 9)-(line 352,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testCloneNull()",
        "snippet": "    public void testCloneNull() throws Exception {\n        Object test = SerializationUtils.clone(null);\n        assertNull(test);\n    }",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 53)",
            "(line 357,col 9)-(line 357,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testCloneUnserializable()",
        "snippet": "    public void testCloneUnserializable() throws Exception {\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.clone(iMap);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 360,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 366,col 9)",
            "(line 367,col 9)-(line 367,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassNotFoundSerialization.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream in) throws ClassNotFoundException    {\n        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);\n    }",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.CharRangeTest(java.lang.String)",
        "snippet": "    public CharRangeTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testClass()",
        "snippet": "    public void testClass() {\n        assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));\n        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 78)",
            "(line 42,col 9)-(line 42,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_is()",
        "snippet": "    public void testConstructorAccessors_is() {\n        CharRange rangea = CharRange.is('a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a\", rangea.toString());\n    }",
        "begin_line": 46,
        "end_line": 52,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 45)",
            "(line 48,col 9)-(line 48,col 45)",
            "(line 49,col 9)-(line 49,col 43)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNot()",
        "snippet": "    public void testConstructorAccessors_isNot() {\n        CharRange rangea = CharRange.isNot('a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a\", rangea.toString());\n    }",
        "begin_line": 54,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 48)",
            "(line 56,col 9)-(line 56,col 45)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 58,col 9)-(line 58,col 47)",
            "(line 59,col 9)-(line 59,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Same()",
        "snippet": "    public void testConstructorAccessors_isIn_Same() {\n        CharRange rangea = CharRange.isIn('a', 'a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a\", rangea.toString());\n    }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 52)",
            "(line 64,col 9)-(line 64,col 45)",
            "(line 65,col 9)-(line 65,col 43)",
            "(line 66,col 9)-(line 66,col 48)",
            "(line 67,col 9)-(line 67,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Normal()",
        "snippet": "    public void testConstructorAccessors_isIn_Normal() {\n        CharRange rangea = CharRange.isIn('a', 'e');\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a-e\", rangea.toString());\n    }",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 52)",
            "(line 72,col 9)-(line 72,col 45)",
            "(line 73,col 9)-(line 73,col 43)",
            "(line 74,col 9)-(line 74,col 48)",
            "(line 75,col 9)-(line 75,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Reversed()",
        "snippet": "    public void testConstructorAccessors_isIn_Reversed() {\n        CharRange rangea = CharRange.isIn('e', 'a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(false, rangea.isNegated());\n        assertEquals(\"a-e\", rangea.toString());\n    }",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 45)",
            "(line 81,col 9)-(line 81,col 43)",
            "(line 82,col 9)-(line 82,col 48)",
            "(line 83,col 9)-(line 83,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Same()",
        "snippet": "    public void testConstructorAccessors_isNotIn_Same() {\n        CharRange rangea = CharRange.isNotIn('a', 'a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('a', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a\", rangea.toString());\n    }",
        "begin_line": 86,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 45)",
            "(line 89,col 9)-(line 89,col 43)",
            "(line 90,col 9)-(line 90,col 47)",
            "(line 91,col 9)-(line 91,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Normal()",
        "snippet": "    public void testConstructorAccessors_isNotIn_Normal() {\n        CharRange rangea = CharRange.isNotIn('a', 'e');\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a-e\", rangea.toString());\n    }",
        "begin_line": 94,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 55)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 43)",
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Reversed()",
        "snippet": "    public void testConstructorAccessors_isNotIn_Reversed() {\n        CharRange rangea = CharRange.isNotIn('e', 'a');\n        assertEquals('a', rangea.getStart());\n        assertEquals('e', rangea.getEnd());\n        assertEquals(true, rangea.isNegated());\n        assertEquals(\"^a-e\", rangea.toString());\n    }",
        "begin_line": 102,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 55)",
            "(line 104,col 9)-(line 104,col 45)",
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 107,col 9)-(line 107,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testEquals_Object()",
        "snippet": "    public void testEquals_Object() {\n        CharRange rangea = CharRange.is('a');\n        CharRange rangeae = CharRange.isIn('a', 'e');\n        CharRange rangenotbf = CharRange.isIn('b', 'f');\n        \n        assertEquals(false, rangea.equals(null));\n        \n        assertEquals(true, rangea.equals(rangea));\n        assertEquals(true, rangea.equals(CharRange.is('a')));\n        assertEquals(true, rangeae.equals(rangeae));\n        assertEquals(true, rangeae.equals(CharRange.isIn('a', 'e')));\n        assertEquals(true, rangenotbf.equals(rangenotbf));\n        assertEquals(true, rangenotbf.equals(CharRange.isIn('b', 'f')));\n        \n        assertEquals(false, rangea.equals(rangeae));\n        assertEquals(false, rangea.equals(rangenotbf));\n        assertEquals(false, rangeae.equals(rangea));\n        assertEquals(false, rangeae.equals(rangenotbf));\n        assertEquals(false, rangenotbf.equals(rangea));\n        assertEquals(false, rangenotbf.equals(rangeae));\n    }",
        "begin_line": 111,
        "end_line": 131,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 45)",
            "(line 113,col 9)-(line 113,col 53)",
            "(line 114,col 9)-(line 114,col 56)",
            "(line 116,col 9)-(line 116,col 49)",
            "(line 118,col 9)-(line 118,col 50)",
            "(line 119,col 9)-(line 119,col 61)",
            "(line 120,col 9)-(line 120,col 52)",
            "(line 121,col 9)-(line 121,col 69)",
            "(line 122,col 9)-(line 122,col 58)",
            "(line 123,col 9)-(line 123,col 72)",
            "(line 125,col 9)-(line 125,col 52)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 52)",
            "(line 128,col 9)-(line 128,col 56)",
            "(line 129,col 9)-(line 129,col 55)",
            "(line 130,col 9)-(line 130,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CharRange rangea = CharRange.is('a');\n        CharRange rangeae = CharRange.isIn('a', 'e');\n        CharRange rangenotbf = CharRange.isIn('b', 'f');\n        \n        assertEquals(true, rangea.hashCode() == rangea.hashCode());\n        assertEquals(true, rangea.hashCode() == CharRange.is('a').hashCode());\n        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n        assertEquals(true, rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());\n        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n        assertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n        \n        assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n        assertEquals(false, rangeae.hashCode() == rangea.hashCode());\n        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());\n        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());\n        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());\n    }",
        "begin_line": 133,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 45)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 56)",
            "(line 138,col 9)-(line 138,col 67)",
            "(line 139,col 9)-(line 139,col 78)",
            "(line 140,col 9)-(line 140,col 69)",
            "(line 141,col 9)-(line 141,col 86)",
            "(line 142,col 9)-(line 142,col 75)",
            "(line 143,col 9)-(line 143,col 89)",
            "(line 145,col 9)-(line 145,col 69)",
            "(line 146,col 9)-(line 146,col 72)",
            "(line 147,col 9)-(line 147,col 69)",
            "(line 148,col 9)-(line 148,col 73)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testContains_Char()",
        "snippet": "    public void testContains_Char() {\n        CharRange range = CharRange.is('c');\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(false, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = CharRange.isIn('c', 'd');\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(true, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = CharRange.isIn('d', 'c');\n        assertEquals(false, range.contains('b'));\n        assertEquals(true, range.contains('c'));\n        assertEquals(true, range.contains('d'));\n        assertEquals(false, range.contains('e'));\n        \n        range = CharRange.isNotIn('c', 'd');\n        assertEquals(true, range.contains('b'));\n        assertEquals(false, range.contains('c'));\n        assertEquals(false, range.contains('d'));\n        assertEquals(true, range.contains('e'));\n        assertEquals(true, range.contains((char) 0));\n        assertEquals(true, range.contains(Character.MAX_VALUE));\n    }",
        "begin_line": 154,
        "end_line": 180,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 44)",
            "(line 156,col 9)-(line 156,col 49)",
            "(line 157,col 9)-(line 157,col 48)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 49)",
            "(line 161,col 9)-(line 161,col 41)",
            "(line 162,col 9)-(line 162,col 49)",
            "(line 163,col 9)-(line 163,col 48)",
            "(line 164,col 9)-(line 164,col 48)",
            "(line 165,col 9)-(line 165,col 49)",
            "(line 167,col 9)-(line 167,col 41)",
            "(line 168,col 9)-(line 168,col 49)",
            "(line 169,col 9)-(line 169,col 48)",
            "(line 170,col 9)-(line 170,col 48)",
            "(line 171,col 9)-(line 171,col 49)",
            "(line 173,col 9)-(line 173,col 44)",
            "(line 174,col 9)-(line 174,col 48)",
            "(line 175,col 9)-(line 175,col 49)",
            "(line 176,col 9)-(line 176,col 49)",
            "(line 177,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 178,col 53)",
            "(line 179,col 9)-(line 179,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testContains_Charrange()",
        "snippet": "    public void testContains_Charrange() {\n        CharRange a = CharRange.is('a');\n        CharRange b = CharRange.is('b');\n        CharRange c = CharRange.is('c');\n        CharRange c2 = CharRange.is('c');\n        CharRange d = CharRange.is('d');\n        CharRange e = CharRange.is('e');\n        CharRange cd = CharRange.isIn('c', 'd');\n        CharRange bd = CharRange.isIn('b', 'd');\n        CharRange bc = CharRange.isIn('b', 'c');\n        CharRange ab = CharRange.isIn('a', 'b');\n        CharRange de = CharRange.isIn('d', 'e');\n        CharRange ef = CharRange.isIn('e', 'f');\n        CharRange ae = CharRange.isIn('a', 'e');\n        \n        // normal/normal\n        assertEquals(false, c.contains(b));\n        assertEquals(true, c.contains(c));\n        assertEquals(true, c.contains(c2));\n        assertEquals(false, c.contains(d));\n        \n        assertEquals(false, c.contains(cd));\n        assertEquals(false, c.contains(bd));\n        assertEquals(false, c.contains(bc));\n        assertEquals(false, c.contains(ab));\n        assertEquals(false, c.contains(de));\n        \n        assertEquals(true, cd.contains(c));\n        assertEquals(true, bd.contains(c));\n        assertEquals(true, bc.contains(c));\n        assertEquals(false, ab.contains(c));\n        assertEquals(false, de.contains(c));\n\n        assertEquals(true, ae.contains(b));\n        assertEquals(true, ae.contains(ab));\n        assertEquals(true, ae.contains(bc));\n        assertEquals(true, ae.contains(cd));\n        assertEquals(true, ae.contains(de));\n        \n        CharRange notb = CharRange.isNot('b');\n        CharRange notc = CharRange.isNot('c');\n        CharRange notd = CharRange.isNot('d');\n        CharRange notab = CharRange.isNotIn('a', 'b');\n        CharRange notbc = CharRange.isNotIn('b', 'c');\n        CharRange notbd = CharRange.isNotIn('b', 'd');\n        CharRange notcd = CharRange.isNotIn('c', 'd');\n        CharRange notde = CharRange.isNotIn('d', 'e');\n        CharRange notae = CharRange.isNotIn('a', 'e');\n        CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE);\n        CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);\n        \n        // normal/negated\n        assertEquals(false, c.contains(notc));\n        assertEquals(false, c.contains(notbd));\n        assertEquals(true, all.contains(notc));\n        assertEquals(true, all.contains(notbd));\n        assertEquals(false, allbutfirst.contains(notc));\n        assertEquals(false, allbutfirst.contains(notbd));\n        \n        // negated/normal\n        assertEquals(true, notc.contains(a));\n        assertEquals(true, notc.contains(b));\n        assertEquals(false, notc.contains(c));\n        assertEquals(true, notc.contains(d));\n        assertEquals(true, notc.contains(e));\n        \n        assertEquals(true, notc.contains(ab));\n        assertEquals(false, notc.contains(bc));\n        assertEquals(false, notc.contains(bd));\n        assertEquals(false, notc.contains(cd));\n        assertEquals(true, notc.contains(de));\n        assertEquals(false, notc.contains(ae));\n        assertEquals(false, notc.contains(all));\n        assertEquals(false, notc.contains(allbutfirst));\n        \n        assertEquals(true, notbd.contains(a));\n        assertEquals(false, notbd.contains(b));\n        assertEquals(false, notbd.contains(c));\n        assertEquals(false, notbd.contains(d));\n        assertEquals(true, notbd.contains(e));\n        \n        assertEquals(true, notcd.contains(ab));\n        assertEquals(false, notcd.contains(bc));\n        assertEquals(false, notcd.contains(bd));\n        assertEquals(false, notcd.contains(cd));\n        assertEquals(false, notcd.contains(de));\n        assertEquals(false, notcd.contains(ae));\n        assertEquals(true, notcd.contains(ef));\n        assertEquals(false, notcd.contains(all));\n        assertEquals(false, notcd.contains(allbutfirst));\n        \n        // negated/negated\n        assertEquals(false, notc.contains(notb));\n        assertEquals(true, notc.contains(notc));\n        assertEquals(false, notc.contains(notd));\n        \n        assertEquals(false, notc.contains(notab));\n        assertEquals(true, notc.contains(notbc));\n        assertEquals(true, notc.contains(notbd));\n        assertEquals(true, notc.contains(notcd));\n        assertEquals(false, notc.contains(notde));\n        \n        assertEquals(false, notbd.contains(notb));\n        assertEquals(false, notbd.contains(notc));\n        assertEquals(false, notbd.contains(notd));\n        \n        assertEquals(false, notbd.contains(notab));\n        assertEquals(false, notbd.contains(notbc));\n        assertEquals(true, notbd.contains(notbd));\n        assertEquals(false, notbd.contains(notcd));\n        assertEquals(false, notbd.contains(notde));\n        assertEquals(true, notbd.contains(notae));\n    }",
        "begin_line": 183,
        "end_line": 295,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 40)",
            "(line 185,col 9)-(line 185,col 40)",
            "(line 186,col 9)-(line 186,col 40)",
            "(line 187,col 9)-(line 187,col 41)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 189,col 9)-(line 189,col 40)",
            "(line 190,col 9)-(line 190,col 48)",
            "(line 191,col 9)-(line 191,col 48)",
            "(line 192,col 9)-(line 192,col 48)",
            "(line 193,col 9)-(line 193,col 48)",
            "(line 194,col 9)-(line 194,col 48)",
            "(line 195,col 9)-(line 195,col 48)",
            "(line 196,col 9)-(line 196,col 48)",
            "(line 199,col 9)-(line 199,col 43)",
            "(line 200,col 9)-(line 200,col 42)",
            "(line 201,col 9)-(line 201,col 43)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 204,col 9)-(line 204,col 44)",
            "(line 205,col 9)-(line 205,col 44)",
            "(line 206,col 9)-(line 206,col 44)",
            "(line 207,col 9)-(line 207,col 44)",
            "(line 208,col 9)-(line 208,col 44)",
            "(line 210,col 9)-(line 210,col 43)",
            "(line 211,col 9)-(line 211,col 43)",
            "(line 212,col 9)-(line 212,col 43)",
            "(line 213,col 9)-(line 213,col 44)",
            "(line 214,col 9)-(line 214,col 44)",
            "(line 216,col 9)-(line 216,col 43)",
            "(line 217,col 9)-(line 217,col 44)",
            "(line 218,col 9)-(line 218,col 44)",
            "(line 219,col 9)-(line 219,col 44)",
            "(line 220,col 9)-(line 220,col 44)",
            "(line 222,col 9)-(line 222,col 46)",
            "(line 223,col 9)-(line 223,col 46)",
            "(line 224,col 9)-(line 224,col 46)",
            "(line 225,col 9)-(line 225,col 54)",
            "(line 226,col 9)-(line 226,col 54)",
            "(line 227,col 9)-(line 227,col 54)",
            "(line 228,col 9)-(line 228,col 54)",
            "(line 229,col 9)-(line 229,col 54)",
            "(line 230,col 9)-(line 230,col 54)",
            "(line 231,col 9)-(line 231,col 70)",
            "(line 232,col 9)-(line 232,col 78)",
            "(line 235,col 9)-(line 235,col 46)",
            "(line 236,col 9)-(line 236,col 47)",
            "(line 237,col 9)-(line 237,col 47)",
            "(line 238,col 9)-(line 238,col 48)",
            "(line 239,col 9)-(line 239,col 56)",
            "(line 240,col 9)-(line 240,col 57)",
            "(line 243,col 9)-(line 243,col 45)",
            "(line 244,col 9)-(line 244,col 45)",
            "(line 245,col 9)-(line 245,col 46)",
            "(line 246,col 9)-(line 246,col 45)",
            "(line 247,col 9)-(line 247,col 45)",
            "(line 249,col 9)-(line 249,col 46)",
            "(line 250,col 9)-(line 250,col 47)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 252,col 9)-(line 252,col 47)",
            "(line 253,col 9)-(line 253,col 46)",
            "(line 254,col 9)-(line 254,col 47)",
            "(line 255,col 9)-(line 255,col 48)",
            "(line 256,col 9)-(line 256,col 56)",
            "(line 258,col 9)-(line 258,col 46)",
            "(line 259,col 9)-(line 259,col 47)",
            "(line 260,col 9)-(line 260,col 47)",
            "(line 261,col 9)-(line 261,col 47)",
            "(line 262,col 9)-(line 262,col 46)",
            "(line 264,col 9)-(line 264,col 47)",
            "(line 265,col 9)-(line 265,col 48)",
            "(line 266,col 9)-(line 266,col 48)",
            "(line 267,col 9)-(line 267,col 48)",
            "(line 268,col 9)-(line 268,col 48)",
            "(line 269,col 9)-(line 269,col 48)",
            "(line 270,col 9)-(line 270,col 47)",
            "(line 271,col 9)-(line 271,col 49)",
            "(line 272,col 9)-(line 272,col 57)",
            "(line 275,col 9)-(line 275,col 49)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 49)",
            "(line 279,col 9)-(line 279,col 50)",
            "(line 280,col 9)-(line 280,col 49)",
            "(line 281,col 9)-(line 281,col 49)",
            "(line 282,col 9)-(line 282,col 49)",
            "(line 283,col 9)-(line 283,col 50)",
            "(line 285,col 9)-(line 285,col 50)",
            "(line 286,col 9)-(line 286,col 50)",
            "(line 287,col 9)-(line 287,col 50)",
            "(line 289,col 9)-(line 289,col 51)",
            "(line 290,col 9)-(line 290,col 51)",
            "(line 291,col 9)-(line 291,col 50)",
            "(line 292,col 9)-(line 292,col 51)",
            "(line 293,col 9)-(line 293,col 51)",
            "(line 294,col 9)-(line 294,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testContainsNullArg()",
        "snippet": "    public void testContainsNullArg() {\n        CharRange range = CharRange.is('a');\n        try {\n            @SuppressWarnings(\"unused\")\n            boolean contains = range.contains(null);\n        } catch(IllegalArgumentException e) {\n            assertEquals(\"The Range must not be null\", e.getMessage());\n        }\n    }",
        "begin_line": 297,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 44)",
            "(line 299,col 9)-(line 304,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testIterator()",
        "snippet": "    public void testIterator() {\n        CharRange a = CharRange.is('a');\n        CharRange ad = CharRange.isIn('a', 'd');\n        CharRange nota = CharRange.isNot('a');\n        CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE);\n        CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE);\n        CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1));\n\n        Iterator aIt = a.iterator();\n        assertNotNull(aIt);\n        assertTrue(aIt.hasNext());\n        assertEquals(Character.valueOf('a'), aIt.next());\n        assertFalse(aIt.hasNext());\n\n        Iterator adIt = ad.iterator();\n        assertNotNull(adIt);\n        assertTrue(adIt.hasNext());\n        assertEquals(Character.valueOf('a'), adIt.next());\n        assertEquals(Character.valueOf('b'), adIt.next());\n        assertEquals(Character.valueOf('c'), adIt.next());\n        assertEquals(Character.valueOf('d'), adIt.next());\n        assertFalse(adIt.hasNext());\n\n        Iterator notaIt = nota.iterator();\n        assertNotNull(notaIt);\n        assertTrue(notaIt.hasNext());\n        while (notaIt.hasNext()) {\n            Character c = (Character) notaIt.next();\n            assertFalse('a' == c.charValue());\n        }\n\n        Iterator emptySetIt = emptySet.iterator();\n        assertNotNull(emptySetIt);\n        assertFalse(emptySetIt.hasNext());\n        try {\n            emptySetIt.next();\n            fail(\"Should throw NoSuchElementException\");\n        } catch (NoSuchElementException e) {\n            assertTrue(true);\n        }\n\n        Iterator notFirstIt = notFirst.iterator();\n        assertNotNull(notFirstIt);\n        assertTrue(notFirstIt.hasNext());\n        assertEquals(Character.valueOf((char) 0), notFirstIt.next());\n        assertFalse(notFirstIt.hasNext());\n        try {\n        \tnotFirstIt.next();\n            fail(\"Should throw NoSuchElementException\");\n        } catch (NoSuchElementException e) {\n            assertTrue(true);\n        }\n\n        Iterator notLastIt = notLast.iterator();\n        assertNotNull(notLastIt);\n        assertTrue(notLastIt.hasNext());\n        assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());\n        assertFalse(notLastIt.hasNext());\n        try {\n        \tnotLastIt.next();\n            fail(\"Should throw NoSuchElementException\");\n        } catch (NoSuchElementException e) {\n            assertTrue(true);\n        }\n    }",
        "begin_line": 307,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 40)",
            "(line 309,col 9)-(line 309,col 48)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 78)",
            "(line 312,col 9)-(line 312,col 78)",
            "(line 313,col 9)-(line 313,col 90)",
            "(line 315,col 9)-(line 315,col 36)",
            "(line 316,col 9)-(line 316,col 27)",
            "(line 317,col 9)-(line 317,col 34)",
            "(line 318,col 9)-(line 318,col 57)",
            "(line 319,col 9)-(line 319,col 35)",
            "(line 321,col 9)-(line 321,col 38)",
            "(line 322,col 9)-(line 322,col 28)",
            "(line 323,col 9)-(line 323,col 35)",
            "(line 324,col 9)-(line 324,col 58)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 326,col 9)-(line 326,col 58)",
            "(line 327,col 9)-(line 327,col 58)",
            "(line 328,col 9)-(line 328,col 36)",
            "(line 330,col 9)-(line 330,col 42)",
            "(line 331,col 9)-(line 331,col 30)",
            "(line 332,col 9)-(line 332,col 37)",
            "(line 333,col 9)-(line 336,col 9)",
            "(line 338,col 9)-(line 338,col 50)",
            "(line 339,col 9)-(line 339,col 34)",
            "(line 340,col 9)-(line 340,col 42)",
            "(line 341,col 9)-(line 346,col 9)",
            "(line 348,col 9)-(line 348,col 50)",
            "(line 349,col 9)-(line 349,col 34)",
            "(line 350,col 9)-(line 350,col 41)",
            "(line 351,col 9)-(line 351,col 69)",
            "(line 352,col 9)-(line 352,col 42)",
            "(line 353,col 9)-(line 358,col 9)",
            "(line 360,col 9)-(line 360,col 48)",
            "(line 361,col 9)-(line 361,col 33)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 363,col 9)-(line 363,col 79)",
            "(line 364,col 9)-(line 364,col 41)",
            "(line 365,col 9)-(line 370,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharRangeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharRangeTest.java",
        "signature": "org.apache.commons.lang3.CharRangeTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CharRange range = CharRange.is('a');\n        assertEquals(range, SerializationUtils.clone(range)); \n        range = CharRange.isIn('a', 'e');\n        assertEquals(range, SerializationUtils.clone(range)); \n        range = CharRange.isNotIn('a', 'e');\n        assertEquals(range, SerializationUtils.clone(range)); \n    }",
        "begin_line": 374,
        "end_line": 381,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 44)",
            "(line 376,col 9)-(line 376,col 61)",
            "(line 377,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 378,col 61)",
            "(line 379,col 9)-(line 379,col 44)",
            "(line 380,col 9)-(line 380,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.CharUtilsTest(java.lang.String)",
        "snippet": "    public CharUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new CharUtils());\n        Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n    }",
        "begin_line": 41,
        "end_line": 48,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 39)",
            "(line 43,col 9)-(line 43,col 74)",
            "(line 44,col 9)-(line 44,col 37)",
            "(line 45,col 9)-(line 45,col 70)",
            "(line 46,col 9)-(line 46,col 81)",
            "(line 47,col 9)-(line 47,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_char()",
        "snippet": "    public void testToCharacterObject_char() {\n        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));\n        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));\n       \n        for (int i = 0; i < 128; i++) {\n            Character ch = CharUtils.toCharacterObject((char) i);\n            Character ch2 = CharUtils.toCharacterObject((char) i);\n            assertSame(ch, ch2);\n            assertEquals(i, ch.charValue());\n        }\n        for (int i = 128; i < 196; i++) {\n            Character ch = CharUtils.toCharacterObject((char) i);\n            Character ch2 = CharUtils.toCharacterObject((char) i);\n            assertEquals(ch, ch2);\n            assertTrue(ch != ch2);\n            assertEquals(i, ch.charValue());\n            assertEquals(i, ch2.charValue());\n        }\n    }",
        "begin_line": 51,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 75)",
            "(line 53,col 9)-(line 53,col 87)",
            "(line 55,col 9)-(line 60,col 9)",
            "(line 61,col 9)-(line 68,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_String()",
        "snippet": "    public void testToCharacterObject_String() {\n        assertEquals(null, CharUtils.toCharacterObject(null));\n        assertEquals(null, CharUtils.toCharacterObject(\"\"));\n        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"a\"));\n        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"abc\"));\n        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject(\"a\"));\n        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject('a'));\n    }",
        "begin_line": 71,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 75)",
            "(line 75,col 9)-(line 75,col 77)",
            "(line 76,col 9)-(line 76,col 87)",
            "(line 77,col 9)-(line 77,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToChar_Character()",
        "snippet": "    public void testToChar_Character() {\n        assertEquals('A', CharUtils.toChar(CHARACTER_A));\n        assertEquals('B', CharUtils.toChar(CHARACTER_B));\n        try {\n            CharUtils.toChar((Character) null);\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 57)",
            "(line 83,col 9)-(line 83,col 57)",
            "(line 84,col 9)-(line 86,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToChar_Character_char()",
        "snippet": "    public void testToChar_Character_char() {\n        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));\n        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));\n        assertEquals('X', CharUtils.toChar((Character) null, 'X'));\n    }",
        "begin_line": 89,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 62)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToChar_String()",
        "snippet": "    public void testToChar_String() {\n        assertEquals('A', CharUtils.toChar(\"A\"));\n        assertEquals('B', CharUtils.toChar(\"BA\"));\n        try {\n            CharUtils.toChar((String) null);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            CharUtils.toChar(\"\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 96,
        "end_line": 105,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 49)",
            "(line 98,col 9)-(line 98,col 50)",
            "(line 99,col 9)-(line 101,col 48)",
            "(line 102,col 9)-(line 104,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToChar_String_char()",
        "snippet": "    public void testToChar_String_char() {\n        assertEquals('A', CharUtils.toChar(\"A\", 'X'));\n        assertEquals('B', CharUtils.toChar(\"BA\", 'X'));\n        assertEquals('X', CharUtils.toChar(\"\", 'X'));\n        assertEquals('X', CharUtils.toChar((String) null, 'X'));\n    }",
        "begin_line": 107,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 54)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 110,col 9)-(line 110,col 53)",
            "(line 111,col 9)-(line 111,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToIntValue_char()",
        "snippet": "    public void testToIntValue_char() {\n        assertEquals(0, CharUtils.toIntValue('0'));\n        assertEquals(1, CharUtils.toIntValue('1'));\n        assertEquals(2, CharUtils.toIntValue('2'));\n        assertEquals(3, CharUtils.toIntValue('3'));\n        assertEquals(4, CharUtils.toIntValue('4'));\n        assertEquals(5, CharUtils.toIntValue('5'));\n        assertEquals(6, CharUtils.toIntValue('6'));\n        assertEquals(7, CharUtils.toIntValue('7'));\n        assertEquals(8, CharUtils.toIntValue('8'));\n        assertEquals(9, CharUtils.toIntValue('9'));\n        try {\n            CharUtils.toIntValue('a');\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 115,
        "end_line": 129,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 51)",
            "(line 117,col 9)-(line 117,col 51)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 122,col 9)-(line 122,col 51)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 51)",
            "(line 125,col 9)-(line 125,col 51)",
            "(line 126,col 9)-(line 128,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToIntValue_char_int()",
        "snippet": "    public void testToIntValue_char_int() {\n        assertEquals(0, CharUtils.toIntValue('0', -1));\n        assertEquals(3, CharUtils.toIntValue('3', -1));\n        assertEquals(-1, CharUtils.toIntValue('a', -1));\n    }",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 55)",
            "(line 133,col 9)-(line 133,col 55)",
            "(line 134,col 9)-(line 134,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character()",
        "snippet": "    public void testToIntValue_Character() {\n        assertEquals(0, CharUtils.toIntValue(new Character('0')));\n        assertEquals(3, CharUtils.toIntValue(new Character('3')));\n        try {\n            CharUtils.toIntValue(null);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            CharUtils.toIntValue(CHARACTER_A);\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 138,
        "end_line": 147,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 66)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 143,col 48)",
            "(line 144,col 9)-(line 146,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character_int()",
        "snippet": "    public void testToIntValue_Character_int() {\n        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));\n        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));\n        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));\n        assertEquals(-1, CharUtils.toIntValue(null, -1));\n    }",
        "begin_line": 149,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 70)",
            "(line 151,col 9)-(line 151,col 70)",
            "(line 152,col 9)-(line 152,col 71)",
            "(line 153,col 9)-(line 153,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToString_char()",
        "snippet": "    public void testToString_char() {\n        assertEquals(\"a\", CharUtils.toString('a'));\n        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));\n       \n        for (int i = 0; i < 128; i++) {\n            String str = CharUtils.toString((char) i);\n            String str2 = CharUtils.toString((char) i);\n            assertSame(str, str2);\n            assertEquals(1, str.length());\n            assertEquals(i, str.charAt(0));\n        }\n        for (int i = 128; i < 196; i++) {\n            String str = CharUtils.toString((char) i);\n            String str2 = CharUtils.toString((char) i);\n            assertEquals(str, str2);\n            assertTrue(str != str2);\n            assertEquals(1, str.length());\n            assertEquals(i, str.charAt(0));\n            assertEquals(1, str2.length());\n            assertEquals(i, str2.charAt(0));\n        }\n    }",
        "begin_line": 157,
        "end_line": 178,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 51)",
            "(line 159,col 9)-(line 159,col 69)",
            "(line 161,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToString_Character()",
        "snippet": "    public void testToString_Character() {\n        assertEquals(null, CharUtils.toString(null));\n        assertEquals(\"A\", CharUtils.toString(CHARACTER_A));\n        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));\n    }",
        "begin_line": 180,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 53)",
            "(line 182,col 9)-(line 182,col 59)",
            "(line 183,col 9)-(line 183,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_char()",
        "snippet": "    public void testToUnicodeEscaped_char() {\n        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped('A'));\n       \n        for (int i = 0; i < 196; i++) {\n            String str = CharUtils.unicodeEscaped((char) i);\n            assertEquals(6, str.length());\n            int val = Integer.parseInt(str.substring(2), 16);\n            assertEquals(i, val);\n        }\n        assertEquals(\"\\\\u0999\", CharUtils.unicodeEscaped((char) 0x999));\n        assertEquals(\"\\\\u1001\", CharUtils.unicodeEscaped((char) 0x1001));\n    }",
        "begin_line": 187,
        "end_line": 198,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 63)",
            "(line 190,col 9)-(line 195,col 9)",
            "(line 196,col 9)-(line 196,col 72)",
            "(line 197,col 9)-(line 197,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_Character()",
        "snippet": "    public void testToUnicodeEscaped_Character() {\n        assertEquals(null, CharUtils.unicodeEscaped(null));\n        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped(CHARACTER_A));\n    }",
        "begin_line": 200,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 59)",
            "(line 202,col 9)-(line 202,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAscii_char()",
        "snippet": "    public void testIsAscii_char() {\n        assertEquals(true, CharUtils.isAscii('a'));\n        assertEquals(true, CharUtils.isAscii('A'));\n        assertEquals(true, CharUtils.isAscii('3'));\n        assertEquals(true, CharUtils.isAscii('-'));\n        assertEquals(true, CharUtils.isAscii('\\n'));\n        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n       \n        for (int i = 0; i < 128; i++) {\n            if (i < 128) {\n                assertEquals(true, CharUtils.isAscii((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAscii((char) i));\n            }\n        }\n    }",
        "begin_line": 206,
        "end_line": 221,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 51)",
            "(line 208,col 9)-(line 208,col 51)",
            "(line 209,col 9)-(line 209,col 51)",
            "(line 210,col 9)-(line 210,col 51)",
            "(line 211,col 9)-(line 211,col 52)",
            "(line 212,col 9)-(line 212,col 58)",
            "(line 214,col 9)-(line 220,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiPrintable_char()",
        "snippet": "    public void testIsAsciiPrintable_char() {\n        assertEquals(true, CharUtils.isAsciiPrintable('a'));\n        assertEquals(true, CharUtils.isAsciiPrintable('A'));\n        assertEquals(true, CharUtils.isAsciiPrintable('3'));\n        assertEquals(true, CharUtils.isAsciiPrintable('-'));\n        assertEquals(false, CharUtils.isAsciiPrintable('\\n'));\n        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= 32 && i <= 126) {\n                assertEquals(true, CharUtils.isAsciiPrintable((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiPrintable((char) i));\n            }\n        }\n    }",
        "begin_line": 224,
        "end_line": 239,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 60)",
            "(line 226,col 9)-(line 226,col 60)",
            "(line 227,col 9)-(line 227,col 60)",
            "(line 228,col 9)-(line 228,col 60)",
            "(line 229,col 9)-(line 229,col 62)",
            "(line 230,col 9)-(line 230,col 58)",
            "(line 232,col 9)-(line 238,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiControl_char()",
        "snippet": "    public void testIsAsciiControl_char() {\n        assertEquals(false, CharUtils.isAsciiControl('a'));\n        assertEquals(false, CharUtils.isAsciiControl('A'));\n        assertEquals(false, CharUtils.isAsciiControl('3'));\n        assertEquals(false, CharUtils.isAsciiControl('-'));\n        assertEquals(true, CharUtils.isAsciiControl('\\n'));\n        assertEquals(false, CharUtils.isAsciiControl(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i < 32 || i == 127) {\n                assertEquals(true, CharUtils.isAsciiControl((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiControl((char) i));\n            }\n        }\n    }",
        "begin_line": 242,
        "end_line": 257,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 59)",
            "(line 244,col 9)-(line 244,col 59)",
            "(line 245,col 9)-(line 245,col 59)",
            "(line 246,col 9)-(line 246,col 59)",
            "(line 247,col 9)-(line 247,col 59)",
            "(line 248,col 9)-(line 248,col 65)",
            "(line 250,col 9)-(line 256,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char()",
        "snippet": "    public void testIsAsciiAlpha_char() {\n        assertEquals(true, CharUtils.isAsciiAlpha('a'));\n        assertEquals(true, CharUtils.isAsciiAlpha('A'));\n        assertEquals(false, CharUtils.isAsciiAlpha('3'));\n        assertEquals(false, CharUtils.isAsciiAlpha('-'));\n        assertEquals(false, CharUtils.isAsciiAlpha('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlpha(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {\n                assertEquals(true, CharUtils.isAsciiAlpha((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlpha((char) i));\n            }\n        }\n    }",
        "begin_line": 260,
        "end_line": 275,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 56)",
            "(line 262,col 9)-(line 262,col 56)",
            "(line 263,col 9)-(line 263,col 57)",
            "(line 264,col 9)-(line 264,col 57)",
            "(line 265,col 9)-(line 265,col 58)",
            "(line 266,col 9)-(line 266,col 63)",
            "(line 268,col 9)-(line 274,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaUpper_char()",
        "snippet": "    public void testIsAsciiAlphaUpper_char() {\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));\n        assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('3'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('-'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlphaUpper(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= 'A' && i <= 'Z') {\n                assertEquals(true, CharUtils.isAsciiAlphaUpper((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlphaUpper((char) i));\n            }\n        }\n    }",
        "begin_line": 278,
        "end_line": 293,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 62)",
            "(line 280,col 9)-(line 280,col 61)",
            "(line 281,col 9)-(line 281,col 62)",
            "(line 282,col 9)-(line 282,col 62)",
            "(line 283,col 9)-(line 283,col 63)",
            "(line 284,col 9)-(line 284,col 68)",
            "(line 286,col 9)-(line 292,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaLower_char()",
        "snippet": "    public void testIsAsciiAlphaLower_char() {\n        assertEquals(true, CharUtils.isAsciiAlphaLower('a'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('A'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('3'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('-'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlphaLower(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= 'a' && i <= 'z') {\n                assertEquals(true, CharUtils.isAsciiAlphaLower((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlphaLower((char) i));\n            }\n        }\n    }",
        "begin_line": 296,
        "end_line": 311,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 61)",
            "(line 298,col 9)-(line 298,col 62)",
            "(line 299,col 9)-(line 299,col 62)",
            "(line 300,col 9)-(line 300,col 62)",
            "(line 301,col 9)-(line 301,col 63)",
            "(line 302,col 9)-(line 302,col 68)",
            "(line 304,col 9)-(line 310,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiNumeric_char()",
        "snippet": "    public void testIsAsciiNumeric_char() {\n        assertEquals(false, CharUtils.isAsciiNumeric('a'));\n        assertEquals(false, CharUtils.isAsciiNumeric('A'));\n        assertEquals(true, CharUtils.isAsciiNumeric('3'));\n        assertEquals(false, CharUtils.isAsciiNumeric('-'));\n        assertEquals(false, CharUtils.isAsciiNumeric('\\n'));\n        assertEquals(false, CharUtils.isAsciiNumeric(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if (i >= '0' && i <= '9') {\n                assertEquals(true, CharUtils.isAsciiNumeric((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiNumeric((char) i));\n            }\n        }\n    }",
        "begin_line": 314,
        "end_line": 329,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 59)",
            "(line 316,col 9)-(line 316,col 59)",
            "(line 317,col 9)-(line 317,col 58)",
            "(line 318,col 9)-(line 318,col 59)",
            "(line 319,col 9)-(line 319,col 60)",
            "(line 320,col 9)-(line 320,col 65)",
            "(line 322,col 9)-(line 328,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char()",
        "snippet": "    public void testIsAsciiAlphanumeric_char() {\n        assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));\n        assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));\n        assertEquals(true, CharUtils.isAsciiAlphanumeric('3'));\n        assertEquals(false, CharUtils.isAsciiAlphanumeric('-'));\n        assertEquals(false, CharUtils.isAsciiAlphanumeric('\\n'));\n        assertEquals(false, CharUtils.isAsciiAlphanumeric(CHAR_COPY));\n       \n        for (int i = 0; i < 196; i++) {\n            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {\n                assertEquals(true, CharUtils.isAsciiAlphanumeric((char) i));\n            } else {\n                assertEquals(false, CharUtils.isAsciiAlphanumeric((char) i));\n            }\n        }\n    }",
        "begin_line": 332,
        "end_line": 347,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 63)",
            "(line 334,col 9)-(line 334,col 63)",
            "(line 335,col 9)-(line 335,col 63)",
            "(line 336,col 9)-(line 336,col 64)",
            "(line 337,col 9)-(line 337,col 65)",
            "(line 338,col 9)-(line 338,col 70)",
            "(line 340,col 9)-(line 346,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.CharSetTest(java.lang.String)",
        "snippet": "    public CharSetTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testClass()",
        "snippet": "    public void testClass() {\n        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 76)",
            "(line 41,col 9)-(line 41,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testGetInstance()",
        "snippet": "    public void testGetInstance() {\n        assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));\n        assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\n        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"a-zA-Z\"));\n        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"A-Za-z\"));\n        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance(\"a-z\"));\n        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(\"A-Z\"));\n        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(\"0-9\"));\n    }",
        "begin_line": 45,
        "end_line": 53,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 71)",
            "(line 47,col 9)-(line 47,col 59)",
            "(line 48,col 9)-(line 48,col 71)",
            "(line 49,col 9)-(line 49,col 71)",
            "(line 50,col 9)-(line 50,col 74)",
            "(line 51,col 9)-(line 51,col 74)",
            "(line 52,col 9)-(line 52,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray()",
        "snippet": "    public void testGetInstance_Stringarray() {\n        assertEquals(null, CharSet.getInstance((String[]) null));\n        assertEquals(\"[]\", CharSet.getInstance(new String[0]).toString());\n        assertEquals(\"[]\", CharSet.getInstance(new String[] {null}).toString());\n        assertEquals(\"[a-e]\", CharSet.getInstance(new String[] {\"a-e\"}).toString());\n    }",
        "begin_line": 56,
        "end_line": 61,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 65)",
            "(line 58,col 9)-(line 58,col 74)",
            "(line 59,col 9)-(line 59,col 80)",
            "(line 60,col 9)-(line 60,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testConstructor_String_simple()",
        "snippet": "    public void testConstructor_String_simple() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance((String) null);\n        array = set.getCharRanges();\n        assertEquals(\"[]\", set.toString());\n        assertEquals(0, array.length);\n        \n        set = CharSet.getInstance(\"\");\n        array = set.getCharRanges();\n        assertEquals(\"[]\", set.toString());\n        assertEquals(0, array.length);\n        \n        set = CharSet.getInstance(\"a\");\n        array = set.getCharRanges();\n        assertEquals(\"[a]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"a\", array[0].toString());\n        \n        set = CharSet.getInstance(\"^a\");\n        array = set.getCharRanges();\n        assertEquals(\"[^a]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"^a\", array[0].toString());\n        \n        set = CharSet.getInstance(\"a-e\");\n        array = set.getCharRanges();\n        assertEquals(\"[a-e]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"a-e\", array[0].toString());\n        \n        set = CharSet.getInstance(\"^a-e\");\n        array = set.getCharRanges();\n        assertEquals(\"[^a-e]\", set.toString());\n        assertEquals(1, array.length);\n        assertEquals(\"^a-e\", array[0].toString());\n    }",
        "begin_line": 64,
        "end_line": 101,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 20)",
            "(line 66,col 9)-(line 66,col 26)",
            "(line 68,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 69,col 36)",
            "(line 70,col 9)-(line 70,col 43)",
            "(line 71,col 9)-(line 71,col 38)",
            "(line 73,col 9)-(line 73,col 38)",
            "(line 74,col 9)-(line 74,col 36)",
            "(line 75,col 9)-(line 75,col 43)",
            "(line 76,col 9)-(line 76,col 38)",
            "(line 78,col 9)-(line 78,col 39)",
            "(line 79,col 9)-(line 79,col 36)",
            "(line 80,col 9)-(line 80,col 44)",
            "(line 81,col 9)-(line 81,col 38)",
            "(line 82,col 9)-(line 82,col 47)",
            "(line 84,col 9)-(line 84,col 40)",
            "(line 85,col 9)-(line 85,col 36)",
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 38)",
            "(line 88,col 9)-(line 88,col 48)",
            "(line 90,col 9)-(line 90,col 41)",
            "(line 91,col 9)-(line 91,col 36)",
            "(line 92,col 9)-(line 92,col 46)",
            "(line 93,col 9)-(line 93,col 38)",
            "(line 94,col 9)-(line 94,col 49)",
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 36)",
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 38)",
            "(line 100,col 9)-(line 100,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testConstructor_String_combo()",
        "snippet": "    public void testConstructor_String_combo() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance(\"abc\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n        \n        set = CharSet.getInstance(\"a-ce-f\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'c')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n        \n        set = CharSet.getInstance(\"ae-f\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n        \n        set = CharSet.getInstance(\"e-fa\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n        \n        set = CharSet.getInstance(\"ae-fm-pz\");\n        array = set.getCharRanges();\n        assertEquals(4, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('m', 'p')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('z')));\n    }",
        "begin_line": 103,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 20)",
            "(line 105,col 9)-(line 105,col 26)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 36)",
            "(line 109,col 9)-(line 109,col 38)",
            "(line 110,col 9)-(line 110,col 74)",
            "(line 111,col 9)-(line 111,col 74)",
            "(line 112,col 9)-(line 112,col 74)",
            "(line 114,col 9)-(line 114,col 44)",
            "(line 115,col 9)-(line 115,col 36)",
            "(line 116,col 9)-(line 116,col 38)",
            "(line 117,col 9)-(line 117,col 81)",
            "(line 118,col 9)-(line 118,col 81)",
            "(line 120,col 9)-(line 120,col 42)",
            "(line 121,col 9)-(line 121,col 36)",
            "(line 122,col 9)-(line 122,col 38)",
            "(line 123,col 9)-(line 123,col 74)",
            "(line 124,col 9)-(line 124,col 81)",
            "(line 126,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 36)",
            "(line 128,col 9)-(line 128,col 38)",
            "(line 129,col 9)-(line 129,col 74)",
            "(line 130,col 9)-(line 130,col 81)",
            "(line 132,col 9)-(line 132,col 46)",
            "(line 133,col 9)-(line 133,col 36)",
            "(line 134,col 9)-(line 134,col 38)",
            "(line 135,col 9)-(line 135,col 74)",
            "(line 136,col 9)-(line 136,col 81)",
            "(line 137,col 9)-(line 137,col 81)",
            "(line 138,col 9)-(line 138,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated()",
        "snippet": "    public void testConstructor_String_comboNegated() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance(\"^abc\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n        \n        set = CharSet.getInstance(\"b^ac\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n        \n        set = CharSet.getInstance(\"db^ac\");\n        array = set.getCharRanges();\n        assertEquals(4, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n        \n        set = CharSet.getInstance(\"^b^a\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('b')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n        \n        set = CharSet.getInstance(\"b^a-c^z\");\n        array = set.getCharRanges();\n        assertEquals(3, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('z')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n    }",
        "begin_line": 141,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 20)",
            "(line 143,col 9)-(line 143,col 26)",
            "(line 145,col 9)-(line 145,col 42)",
            "(line 146,col 9)-(line 146,col 36)",
            "(line 147,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 148,col 77)",
            "(line 149,col 9)-(line 149,col 74)",
            "(line 150,col 9)-(line 150,col 74)",
            "(line 152,col 9)-(line 152,col 42)",
            "(line 153,col 9)-(line 153,col 36)",
            "(line 154,col 9)-(line 154,col 38)",
            "(line 155,col 9)-(line 155,col 74)",
            "(line 156,col 9)-(line 156,col 77)",
            "(line 157,col 9)-(line 157,col 74)",
            "(line 159,col 9)-(line 159,col 43)",
            "(line 160,col 9)-(line 160,col 36)",
            "(line 161,col 9)-(line 161,col 38)",
            "(line 162,col 9)-(line 162,col 74)",
            "(line 163,col 9)-(line 163,col 74)",
            "(line 164,col 9)-(line 164,col 77)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 167,col 9)-(line 167,col 42)",
            "(line 168,col 9)-(line 168,col 36)",
            "(line 169,col 9)-(line 169,col 38)",
            "(line 170,col 9)-(line 170,col 77)",
            "(line 171,col 9)-(line 171,col 77)",
            "(line 173,col 9)-(line 173,col 45)",
            "(line 174,col 9)-(line 174,col 36)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 176,col 9)-(line 176,col 84)",
            "(line 177,col 9)-(line 177,col 77)",
            "(line 178,col 9)-(line 178,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash()",
        "snippet": "    public void testConstructor_String_oddDash() {\n        CharSet set;\n        CharRange[] array;\n        \n        set = CharSet.getInstance(\"-\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n        \n        set = CharSet.getInstance(\"--\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n        \n        set = CharSet.getInstance(\"---\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n        \n        set = CharSet.getInstance(\"----\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n        \n        set = CharSet.getInstance(\"-a\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n        \n        set = CharSet.getInstance(\"a-\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n        \n        set = CharSet.getInstance(\"a--\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '-')));\n        \n        set = CharSet.getInstance(\"--a\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\n    }",
        "begin_line": 181,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 20)",
            "(line 183,col 9)-(line 183,col 26)",
            "(line 185,col 9)-(line 185,col 39)",
            "(line 186,col 9)-(line 186,col 36)",
            "(line 187,col 9)-(line 187,col 38)",
            "(line 188,col 9)-(line 188,col 74)",
            "(line 190,col 9)-(line 190,col 40)",
            "(line 191,col 9)-(line 191,col 36)",
            "(line 192,col 9)-(line 192,col 38)",
            "(line 193,col 9)-(line 193,col 74)",
            "(line 195,col 9)-(line 195,col 41)",
            "(line 196,col 9)-(line 196,col 36)",
            "(line 197,col 9)-(line 197,col 38)",
            "(line 198,col 9)-(line 198,col 74)",
            "(line 200,col 9)-(line 200,col 42)",
            "(line 201,col 9)-(line 201,col 36)",
            "(line 202,col 9)-(line 202,col 38)",
            "(line 203,col 9)-(line 203,col 74)",
            "(line 205,col 9)-(line 205,col 40)",
            "(line 206,col 9)-(line 206,col 36)",
            "(line 207,col 9)-(line 207,col 38)",
            "(line 208,col 9)-(line 208,col 74)",
            "(line 209,col 9)-(line 209,col 74)",
            "(line 211,col 9)-(line 211,col 40)",
            "(line 212,col 9)-(line 212,col 36)",
            "(line 213,col 9)-(line 213,col 38)",
            "(line 214,col 9)-(line 214,col 74)",
            "(line 215,col 9)-(line 215,col 74)",
            "(line 217,col 9)-(line 217,col 41)",
            "(line 218,col 9)-(line 218,col 36)",
            "(line 219,col 9)-(line 219,col 38)",
            "(line 220,col 9)-(line 220,col 81)",
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 36)",
            "(line 224,col 9)-(line 224,col 38)",
            "(line 225,col 9)-(line 225,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate()",
        "snippet": "    public void testConstructor_String_oddNegate() {\n        CharSet set;\n        CharRange[] array;\n        set = CharSet.getInstance(\"^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n        \n        set = CharSet.getInstance(\"^^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n        \n        set = CharSet.getInstance(\"^^^\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n        \n        set = CharSet.getInstance(\"^^^^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\" x2\n        \n        set = CharSet.getInstance(\"a^\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a'))); // \"a\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n        \n        set = CharSet.getInstance(\"^a-\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a'))); // \"^a\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n        \n        set = CharSet.getInstance(\"^^-c\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // \"^^-c\"\n        \n        set = CharSet.getInstance(\"^c-^\");\n        array = set.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n        \n        set = CharSet.getInstance(\"^c-^d\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d'))); // \"d\"\n        \n        set = CharSet.getInstance(\"^^-\");\n        array = set.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n    }",
        "begin_line": 228,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 20)",
            "(line 230,col 9)-(line 230,col 26)",
            "(line 231,col 9)-(line 231,col 39)",
            "(line 232,col 9)-(line 232,col 36)",
            "(line 233,col 9)-(line 233,col 38)",
            "(line 234,col 9)-(line 234,col 74)",
            "(line 236,col 9)-(line 236,col 40)",
            "(line 237,col 9)-(line 237,col 36)",
            "(line 238,col 9)-(line 238,col 38)",
            "(line 239,col 9)-(line 239,col 77)",
            "(line 241,col 9)-(line 241,col 41)",
            "(line 242,col 9)-(line 242,col 36)",
            "(line 243,col 9)-(line 243,col 38)",
            "(line 244,col 9)-(line 244,col 77)",
            "(line 245,col 9)-(line 245,col 74)",
            "(line 247,col 9)-(line 247,col 42)",
            "(line 248,col 9)-(line 248,col 36)",
            "(line 249,col 9)-(line 249,col 38)",
            "(line 250,col 9)-(line 250,col 77)",
            "(line 252,col 9)-(line 252,col 40)",
            "(line 253,col 9)-(line 253,col 36)",
            "(line 254,col 9)-(line 254,col 38)",
            "(line 255,col 9)-(line 255,col 74)",
            "(line 256,col 9)-(line 256,col 74)",
            "(line 258,col 9)-(line 258,col 41)",
            "(line 259,col 9)-(line 259,col 36)",
            "(line 260,col 9)-(line 260,col 38)",
            "(line 261,col 9)-(line 261,col 77)",
            "(line 262,col 9)-(line 262,col 74)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 265,col 9)-(line 265,col 36)",
            "(line 266,col 9)-(line 266,col 38)",
            "(line 267,col 9)-(line 267,col 84)",
            "(line 269,col 9)-(line 269,col 42)",
            "(line 270,col 9)-(line 270,col 36)",
            "(line 271,col 9)-(line 271,col 38)",
            "(line 272,col 9)-(line 272,col 84)",
            "(line 274,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 36)",
            "(line 276,col 9)-(line 276,col 38)",
            "(line 277,col 9)-(line 277,col 84)",
            "(line 278,col 9)-(line 278,col 74)",
            "(line 280,col 9)-(line 280,col 41)",
            "(line 281,col 9)-(line 281,col 36)",
            "(line 282,col 9)-(line 282,col 38)",
            "(line 283,col 9)-(line 283,col 77)",
            "(line 284,col 9)-(line 284,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations()",
        "snippet": "    public void testConstructor_String_oddCombinations() {\n        CharSet set;\n        CharRange[] array = null;\n        \n        set = CharSet.getInstance(\"a-^c\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // \"a-^\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n        assertEquals(false, set.contains('b'));\n        assertEquals(true, set.contains('^'));  \n        assertEquals(true, set.contains('_')); // between ^ and a\n        assertEquals(true, set.contains('c'));  \n        \n        set = CharSet.getInstance(\"^a-^c\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // \"^a-^\"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n        assertEquals(true, set.contains('b'));\n        assertEquals(false, set.contains('^'));  \n        assertEquals(false, set.contains('_')); // between ^ and a\n        \n        set = CharSet.getInstance(\"a- ^-- \"); //contains everything\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // \"a- \"\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // \"^-- \"\n        assertEquals(true, set.contains('#'));\n        assertEquals(true, set.contains('^'));\n        assertEquals(true, set.contains('a'));\n        assertEquals(true, set.contains('*'));\n        assertEquals(true, set.contains('A'));\n        \n        set = CharSet.getInstance(\"^-b\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"^-b\"\n        assertEquals(true, set.contains('b'));\n        assertEquals(true, set.contains('_')); // between ^ and a\n        assertEquals(false, set.contains('A'));\n        assertEquals(true, set.contains('^')); \n        \n        set = CharSet.getInstance(\"b-^\");\n        array = set.getCharRanges();\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"b-^\"\n        assertEquals(true, set.contains('b'));\n        assertEquals(true, set.contains('^'));\n        assertEquals(true, set.contains('a')); // between ^ and b\n        assertEquals(false, set.contains('c')); \n    }",
        "begin_line": 287,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 20)",
            "(line 289,col 9)-(line 289,col 33)",
            "(line 291,col 9)-(line 291,col 42)",
            "(line 292,col 9)-(line 292,col 36)",
            "(line 293,col 9)-(line 293,col 81)",
            "(line 294,col 9)-(line 294,col 74)",
            "(line 295,col 9)-(line 295,col 47)",
            "(line 296,col 9)-(line 296,col 46)",
            "(line 297,col 9)-(line 297,col 46)",
            "(line 298,col 9)-(line 298,col 46)",
            "(line 300,col 9)-(line 300,col 43)",
            "(line 301,col 9)-(line 301,col 36)",
            "(line 302,col 9)-(line 302,col 84)",
            "(line 303,col 9)-(line 303,col 74)",
            "(line 304,col 9)-(line 304,col 46)",
            "(line 305,col 9)-(line 305,col 47)",
            "(line 306,col 9)-(line 306,col 47)",
            "(line 308,col 9)-(line 308,col 45)",
            "(line 309,col 9)-(line 309,col 36)",
            "(line 310,col 9)-(line 310,col 81)",
            "(line 311,col 9)-(line 311,col 84)",
            "(line 312,col 9)-(line 312,col 46)",
            "(line 313,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 46)",
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 316,col 46)",
            "(line 318,col 9)-(line 318,col 41)",
            "(line 319,col 9)-(line 319,col 36)",
            "(line 320,col 9)-(line 320,col 80)",
            "(line 321,col 9)-(line 321,col 46)",
            "(line 322,col 9)-(line 322,col 46)",
            "(line 323,col 9)-(line 323,col 47)",
            "(line 324,col 9)-(line 324,col 46)",
            "(line 326,col 9)-(line 326,col 41)",
            "(line 327,col 9)-(line 327,col 36)",
            "(line 328,col 9)-(line 328,col 80)",
            "(line 329,col 9)-(line 329,col 46)",
            "(line 330,col 9)-(line 330,col 46)",
            "(line 331,col 9)-(line 331,col 46)",
            "(line 332,col 9)-(line 332,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testEquals_Object()",
        "snippet": "    public void testEquals_Object() {\n        CharSet abc = CharSet.getInstance(\"abc\");\n        CharSet abc2 = CharSet.getInstance(\"abc\");\n        CharSet atoc = CharSet.getInstance(\"a-c\");\n        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n        \n        assertEquals(false, abc.equals(null));\n        \n        assertEquals(true, abc.equals(abc));\n        assertEquals(true, abc.equals(abc2));\n        assertEquals(false, abc.equals(atoc));\n        assertEquals(false, abc.equals(notatoc));\n        \n        assertEquals(false, atoc.equals(abc));\n        assertEquals(true, atoc.equals(atoc));\n        assertEquals(true, atoc.equals(atoc2));\n        assertEquals(false, atoc.equals(notatoc));\n        \n        assertEquals(false, notatoc.equals(abc));\n        assertEquals(false, notatoc.equals(atoc));\n        assertEquals(true, notatoc.equals(notatoc));\n        assertEquals(true, notatoc.equals(notatoc2));\n    }",
        "begin_line": 336,
        "end_line": 360,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 49)",
            "(line 338,col 9)-(line 338,col 50)",
            "(line 339,col 9)-(line 339,col 50)",
            "(line 340,col 9)-(line 340,col 51)",
            "(line 341,col 9)-(line 341,col 54)",
            "(line 342,col 9)-(line 342,col 55)",
            "(line 344,col 9)-(line 344,col 46)",
            "(line 346,col 9)-(line 346,col 44)",
            "(line 347,col 9)-(line 347,col 45)",
            "(line 348,col 9)-(line 348,col 46)",
            "(line 349,col 9)-(line 349,col 49)",
            "(line 351,col 9)-(line 351,col 46)",
            "(line 352,col 9)-(line 352,col 46)",
            "(line 353,col 9)-(line 353,col 47)",
            "(line 354,col 9)-(line 354,col 50)",
            "(line 356,col 9)-(line 356,col 49)",
            "(line 357,col 9)-(line 357,col 50)",
            "(line 358,col 9)-(line 358,col 52)",
            "(line 359,col 9)-(line 359,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        CharSet abc = CharSet.getInstance(\"abc\");\n        CharSet abc2 = CharSet.getInstance(\"abc\");\n        CharSet atoc = CharSet.getInstance(\"a-c\");\n        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n        \n        assertEquals(abc.hashCode(), abc.hashCode());\n        assertEquals(abc.hashCode(), abc2.hashCode());\n        assertEquals(atoc.hashCode(), atoc.hashCode());\n        assertEquals(atoc.hashCode(), atoc2.hashCode());\n        assertEquals(notatoc.hashCode(), notatoc.hashCode());\n        assertEquals(notatoc.hashCode(), notatoc2.hashCode());\n    }",
        "begin_line": 362,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 49)",
            "(line 364,col 9)-(line 364,col 50)",
            "(line 365,col 9)-(line 365,col 50)",
            "(line 366,col 9)-(line 366,col 51)",
            "(line 367,col 9)-(line 367,col 54)",
            "(line 368,col 9)-(line 368,col 55)",
            "(line 370,col 9)-(line 370,col 53)",
            "(line 371,col 9)-(line 371,col 54)",
            "(line 372,col 9)-(line 372,col 55)",
            "(line 373,col 9)-(line 373,col 56)",
            "(line 374,col 9)-(line 374,col 61)",
            "(line 375,col 9)-(line 375,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testContains_Char()",
        "snippet": "    public void testContains_Char() {\n        CharSet btod = CharSet.getInstance(\"b-d\");\n        CharSet dtob = CharSet.getInstance(\"d-b\");\n        CharSet bcd = CharSet.getInstance(\"bcd\");\n        CharSet bd = CharSet.getInstance(\"bd\");\n        CharSet notbtod = CharSet.getInstance(\"^b-d\");\n        \n        assertEquals(false, btod.contains('a'));\n        assertEquals(true, btod.contains('b'));\n        assertEquals(true, btod.contains('c'));\n        assertEquals(true, btod.contains('d'));\n        assertEquals(false, btod.contains('e'));\n        \n        assertEquals(false, bcd.contains('a'));\n        assertEquals(true, bcd.contains('b'));\n        assertEquals(true, bcd.contains('c'));\n        assertEquals(true, bcd.contains('d'));\n        assertEquals(false, bcd.contains('e'));\n        \n        assertEquals(false, bd.contains('a'));\n        assertEquals(true, bd.contains('b'));\n        assertEquals(false, bd.contains('c'));\n        assertEquals(true, bd.contains('d'));\n        assertEquals(false, bd.contains('e'));\n        \n        assertEquals(true, notbtod.contains('a'));\n        assertEquals(false, notbtod.contains('b'));\n        assertEquals(false, notbtod.contains('c'));\n        assertEquals(false, notbtod.contains('d'));\n        assertEquals(true, notbtod.contains('e'));\n        \n        assertEquals(false, dtob.contains('a'));\n        assertEquals(true, dtob.contains('b'));\n        assertEquals(true, dtob.contains('c'));\n        assertEquals(true, dtob.contains('d'));\n        assertEquals(false, dtob.contains('e'));\n      \n        CharRange[] array = dtob.getCharRanges();\n        assertEquals(\"[b-d]\", dtob.toString());\n        assertEquals(1, array.length);\n    }",
        "begin_line": 379,
        "end_line": 419,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 50)",
            "(line 381,col 9)-(line 381,col 50)",
            "(line 382,col 9)-(line 382,col 49)",
            "(line 383,col 9)-(line 383,col 47)",
            "(line 384,col 9)-(line 384,col 54)",
            "(line 386,col 9)-(line 386,col 48)",
            "(line 387,col 9)-(line 387,col 47)",
            "(line 388,col 9)-(line 388,col 47)",
            "(line 389,col 9)-(line 389,col 47)",
            "(line 390,col 9)-(line 390,col 48)",
            "(line 392,col 9)-(line 392,col 47)",
            "(line 393,col 9)-(line 393,col 46)",
            "(line 394,col 9)-(line 394,col 46)",
            "(line 395,col 9)-(line 395,col 46)",
            "(line 396,col 9)-(line 396,col 47)",
            "(line 398,col 9)-(line 398,col 46)",
            "(line 399,col 9)-(line 399,col 45)",
            "(line 400,col 9)-(line 400,col 46)",
            "(line 401,col 9)-(line 401,col 45)",
            "(line 402,col 9)-(line 402,col 46)",
            "(line 404,col 9)-(line 404,col 50)",
            "(line 405,col 9)-(line 405,col 51)",
            "(line 406,col 9)-(line 406,col 51)",
            "(line 407,col 9)-(line 407,col 51)",
            "(line 408,col 9)-(line 408,col 50)",
            "(line 410,col 9)-(line 410,col 48)",
            "(line 411,col 9)-(line 411,col 47)",
            "(line 412,col 9)-(line 412,col 47)",
            "(line 413,col 9)-(line 413,col 47)",
            "(line 414,col 9)-(line 414,col 48)",
            "(line 416,col 9)-(line 416,col 49)",
            "(line 417,col 9)-(line 417,col 47)",
            "(line 418,col 9)-(line 418,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testSerialization()",
        "snippet": "    public void testSerialization() {\n        CharSet set = CharSet.getInstance(\"a\");\n        assertEquals(set, SerializationUtils.clone(set)); \n        set = CharSet.getInstance(\"a-e\");\n        assertEquals(set, SerializationUtils.clone(set)); \n        set = CharSet.getInstance(\"be-f^a-z\");\n        assertEquals(set, SerializationUtils.clone(set)); \n    }",
        "begin_line": 422,
        "end_line": 429,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 47)",
            "(line 424,col 9)-(line 424,col 57)",
            "(line 425,col 9)-(line 425,col 41)",
            "(line 426,col 9)-(line 426,col 57)",
            "(line 427,col 9)-(line 427,col 46)",
            "(line 428,col 9)-(line 428,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetTest.java",
        "signature": "org.apache.commons.lang3.CharSetTest.testStatics()",
        "snippet": "    public void testStatics() {\n        CharRange[] array;\n        \n        array = CharSet.EMPTY.getCharRanges();\n        assertEquals(0, array.length);\n        \n        array = CharSet.ASCII_ALPHA.getCharRanges();\n        assertEquals(2, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n        \n        array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n        \n        array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n        \n        array = CharSet.ASCII_NUMERIC.getCharRanges();\n        assertEquals(1, array.length);\n        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('0', '9')));\n    }",
        "begin_line": 432,
        "end_line": 454,
        "comment": "-----------------------------------------------------------------------    ",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 26)",
            "(line 435,col 9)-(line 435,col 46)",
            "(line 436,col 9)-(line 436,col 38)",
            "(line 438,col 9)-(line 438,col 52)",
            "(line 439,col 9)-(line 439,col 38)",
            "(line 440,col 9)-(line 440,col 81)",
            "(line 441,col 9)-(line 441,col 81)",
            "(line 443,col 9)-(line 443,col 58)",
            "(line 444,col 9)-(line 444,col 38)",
            "(line 445,col 9)-(line 445,col 81)",
            "(line 447,col 9)-(line 447,col 58)",
            "(line 448,col 9)-(line 448,col 38)",
            "(line 449,col 9)-(line 449,col 81)",
            "(line 451,col 9)-(line 451,col 54)",
            "(line 452,col 9)-(line 452,col 38)",
            "(line 453,col 9)-(line 453,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.ArrayUtilsTest(java.lang.String)",
        "snippet": "    public ArrayUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ArrayUtils());\n        Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n    }",
        "begin_line": 49,
        "end_line": 56,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 40)",
            "(line 51,col 9)-(line 51,col 75)",
            "(line 52,col 9)-(line 52,col 37)",
            "(line 53,col 9)-(line 53,col 70)",
            "(line 54,col 9)-(line 54,col 79)",
            "(line 55,col 9)-(line 55,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"{}\", ArrayUtils.toString(null));\n        assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\n        assertEquals(\"{}\", ArrayUtils.toString(new String[0]));\n        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}));\n        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}));\n        \n        assertEquals(\"<empty>\", ArrayUtils.toString(null, \"<empty>\"));\n        assertEquals(\"{}\", ArrayUtils.toString(new Object[0], \"<empty>\"));\n        assertEquals(\"{}\", ArrayUtils.toString(new String[0], \"<empty>\"));\n        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}, \"<empty>\"));\n        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}, \"<empty>\"));\n    }",
        "begin_line": 59,
        "end_line": 71,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 54)",
            "(line 61,col 9)-(line 61,col 63)",
            "(line 62,col 9)-(line 62,col 63)",
            "(line 63,col 9)-(line 63,col 75)",
            "(line 64,col 9)-(line 64,col 87)",
            "(line 66,col 9)-(line 66,col 70)",
            "(line 67,col 9)-(line 67,col 74)",
            "(line 68,col 9)-(line 68,col 74)",
            "(line 69,col 9)-(line 69,col 86)",
            "(line 70,col 9)-(line 70,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.assertIsEquals(java.lang.Object, java.lang.Object, java.lang.Object)",
        "snippet": "    private void assertIsEquals(Object array1, Object array2, Object array3) {\n        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n        assertEquals(true, ArrayUtils.isEquals(array2, array2));\n        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n        assertEquals(false, ArrayUtils.isEquals(array1, array3));\n        assertEquals(false, ArrayUtils.isEquals(array3, array1));\n        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n    }",
        "begin_line": 74,
        "end_line": 84,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 64)",
            "(line 76,col 9)-(line 76,col 64)",
            "(line 77,col 9)-(line 77,col 64)",
            "(line 78,col 9)-(line 78,col 65)",
            "(line 79,col 9)-(line 79,col 65)",
            "(line 80,col 9)-(line 80,col 65)",
            "(line 81,col 9)-(line 81,col 65)",
            "(line 82,col 9)-(line 82,col 65)",
            "(line 83,col 9)-(line 83,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsEquals()",
        "snippet": "    public void testIsEquals() {\n        long[][] larray1 = new long[][]{{2, 5}, {4, 5}};\n        long[][] larray2 = new long[][]{{2, 5}, {4, 6}};\n        long[] larray3 = new long[]{2, 5};\n        this.assertIsEquals(larray1, larray2, larray3);\n\n        int[][] iarray1 = new int[][]{{2, 5}, {4, 5}};\n        int[][] iarray2 = new int[][]{{2, 5}, {4, 6}};\n        int[] iarray3 = new int[]{2, 5};\n        this.assertIsEquals(iarray1, iarray2, iarray3);\n\n        short[][] sarray1 = new short[][]{{2, 5}, {4, 5}};\n        short[][] sarray2 = new short[][]{{2, 5}, {4, 6}};\n        short[] sarray3 = new short[]{2, 5};\n        this.assertIsEquals(sarray1, sarray2, sarray3);\n\n        float[][] farray1 = new float[][]{{2, 5}, {4, 5}};\n        float[][] farray2 = new float[][]{{2, 5}, {4, 6}};\n        float[] farray3 = new float[]{2, 5};\n        this.assertIsEquals(farray1, farray2, farray3);\n\n        double[][] darray1 = new double[][]{{2, 5}, {4, 5}};\n        double[][] darray2 = new double[][]{{2, 5}, {4, 6}};\n        double[] darray3 = new double[]{2, 5};\n        this.assertIsEquals(darray1, darray2, darray3);\n\n        byte[][] byteArray1 = new byte[][]{{2, 5}, {4, 5}};\n        byte[][] byteArray2 = new byte[][]{{2, 5}, {4, 6}};\n        byte[] byteArray3 = new byte[]{2, 5};\n        this.assertIsEquals(byteArray1, byteArray2, byteArray3);\n\n        char[][] charArray1 = new char[][]{{2, 5}, {4, 5}};\n        char[][] charArray2 = new char[][]{{2, 5}, {4, 6}};\n        char[] charArray3 = new char[]{2, 5};\n        this.assertIsEquals(charArray1, charArray2, charArray3);\n\n        boolean[][] barray1 = new boolean[][]{{true, false}, {true, true}};\n        boolean[][] barray2 = new boolean[][]{{true, false}, {true, false}};\n        boolean[] barray3 = new boolean[]{false, true};\n        this.assertIsEquals(barray1, barray2, barray3);\n\n        Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};\n        Object[] array4 = new Object[]{\"AB\"};\n        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n        assertEquals(true, ArrayUtils.isEquals(array3, array4));\n\n        assertEquals(true, ArrayUtils.isEquals(null, null));\n        assertEquals(false, ArrayUtils.isEquals(null, array4));\n    }",
        "begin_line": 86,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 56)",
            "(line 88,col 9)-(line 88,col 56)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 55)",
            "(line 92,col 9)-(line 92,col 54)",
            "(line 93,col 9)-(line 93,col 54)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 97,col 9)-(line 97,col 58)",
            "(line 98,col 9)-(line 98,col 58)",
            "(line 99,col 9)-(line 99,col 44)",
            "(line 100,col 9)-(line 100,col 55)",
            "(line 102,col 9)-(line 102,col 58)",
            "(line 103,col 9)-(line 103,col 58)",
            "(line 104,col 9)-(line 104,col 44)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 107,col 9)-(line 107,col 60)",
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 109,col 46)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 112,col 9)-(line 112,col 59)",
            "(line 113,col 9)-(line 113,col 59)",
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 64)",
            "(line 117,col 9)-(line 117,col 59)",
            "(line 118,col 9)-(line 118,col 59)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 64)",
            "(line 122,col 9)-(line 122,col 75)",
            "(line 123,col 9)-(line 123,col 76)",
            "(line 124,col 9)-(line 124,col 55)",
            "(line 125,col 9)-(line 125,col 55)",
            "(line 127,col 9)-(line 127,col 73)",
            "(line 128,col 9)-(line 128,col 45)",
            "(line 129,col 9)-(line 129,col 64)",
            "(line 130,col 9)-(line 130,col 64)",
            "(line 132,col 9)-(line 132,col 60)",
            "(line 133,col 9)-(line 133,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testArrayCreation()",
        "snippet": "    public void testArrayCreation()\n    {\n        final String[] array = ArrayUtils.toArray(\"foo\", \"bar\");\n        assertEquals(2, array.length);\n        assertEquals(\"foo\", array[0]);\n        assertEquals(\"bar\", array[1]);\n    }",
        "begin_line": 140,
        "end_line": 146,
        "comment": "\n     * Tests generic array creation with parameters of same type.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 38)",
            "(line 144,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 145,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testArrayCreationWithGeneralReturnType()",
        "snippet": "    public void testArrayCreationWithGeneralReturnType()\n    {\n        final Object obj = ArrayUtils.toArray(\"foo\", \"bar\");\n        assertTrue(obj instanceof String[]);\n    }",
        "begin_line": 151,
        "end_line": 155,
        "comment": "\n     * Tests generic array creation with general return type.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 60)",
            "(line 154,col 9)-(line 154,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testArrayCreationWithDifferentTypes()",
        "snippet": "    public void testArrayCreationWithDifferentTypes()\n    {\n        final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));\n        assertEquals(2, array.length);\n        assertEquals(Integer.valueOf(42), array[0]);\n        assertEquals(Double.valueOf(Math.PI), array[1]);\n    }",
        "begin_line": 160,
        "end_line": 166,
        "comment": "\n     * Tests generic array creation with parameters of common base type.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 104)",
            "(line 163,col 9)-(line 163,col 38)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 165,col 9)-(line 165,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndirectArrayCreation()",
        "snippet": "    public void testIndirectArrayCreation()\n    {\n        final String[] array = toArrayPropagatingType(\"foo\", \"bar\");\n        assertEquals(2, array.length);\n        assertEquals(\"foo\", array[0]);\n        assertEquals(\"bar\", array[1]);\n    }",
        "begin_line": 171,
        "end_line": 177,
        "comment": "\n     * Tests generic array creation with generic type.\n     ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 68)",
            "(line 174,col 9)-(line 174,col 38)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 176,col 9)-(line 176,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testEmptyArrayCreation()",
        "snippet": "    public void testEmptyArrayCreation()\n    {\n        final String[] array = ArrayUtils.<String>toArray();\n        assertEquals(0, array.length);\n    }",
        "begin_line": 182,
        "end_line": 186,
        "comment": "\n     * Tests generic empty array creation with generic type.\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 60)",
            "(line 185,col 9)-(line 185,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndirectEmptyArrayCreation()",
        "snippet": "    public void testIndirectEmptyArrayCreation()\n    {\n        final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();\n        assertEquals(0, array.length);\n    }",
        "begin_line": 191,
        "end_line": 195,
        "comment": "\n     * Tests indirect generic empty array creation with generic type.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 79)",
            "(line 194,col 9)-(line 194,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.toArrayPropagatingType(T...)",
        "snippet": "    private static <T> T[] toArrayPropagatingType(final T... items)\n    {\n        return ArrayUtils.toArray(items);\n    }",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToMap()",
        "snippet": "    public void testToMap() {\n        Map<?, ?> map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n        \n        assertEquals(\"bar\", map.get(\"foo\"));\n        assertEquals(\"world\", map.get(\"hello\"));\n        \n        assertEquals(null, ArrayUtils.toMap(null));\n        try {\n            ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"short\"}});\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, \"illegal type\"});\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, null});\n            fail(\"exception expected\");\n        } catch (IllegalArgumentException ex) {}\n        \n        map = ArrayUtils.toMap(new Object[] {new Map.Entry<Object, Object>() {\n            public Object getKey() {\n                return \"foo\";\n            }\n            public Object getValue() {\n                return \"bar\";\n            }\n            public Object setValue(Object value) {\n                throw new UnsupportedOperationException();\n            }\n            @Override\n            public boolean equals(Object o) {\n                throw new UnsupportedOperationException();\n            }\n            @Override\n            public int hashCode() {\n                throw new UnsupportedOperationException();\n            }\n        }});\n        assertEquals(\"bar\", map.get(\"foo\"));\n    }",
        "begin_line": 203,
        "end_line": 243,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 94)",
            "(line 206,col 9)-(line 206,col 44)",
            "(line 207,col 9)-(line 207,col 48)",
            "(line 209,col 9)-(line 209,col 51)",
            "(line 210,col 9)-(line 213,col 48)",
            "(line 214,col 9)-(line 217,col 48)",
            "(line 218,col 9)-(line 221,col 48)",
            "(line 223,col 9)-(line 241,col 12)",
            "(line 242,col 9)-(line 242,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.Anonymous-4dac2863-a2d2-4978-a1a9-dc72a761c3e6.getKey()",
        "snippet": "            public Object getKey() {\n                return \"foo\";\n            }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 17)-(line 225,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.Anonymous-57a9a917-1a3b-4982-a8dc-368c85c7bf7d.getValue()",
        "snippet": "            public Object getValue() {\n                return \"bar\";\n            }",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 228,col 17)-(line 228,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.Anonymous-37968ea0-0c3a-492f-9995-636ff4c00b23.setValue(java.lang.Object)",
        "snippet": "            public Object setValue(Object value) {\n                throw new UnsupportedOperationException();\n            }",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 231,col 17)-(line 231,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.Anonymous-15c085ce-8184-4efd-82e7-fbe07e58a912.equals(java.lang.Object)",
        "snippet": "            @Override\n            public boolean equals(Object o) {\n                throw new UnsupportedOperationException();\n            }",
        "begin_line": 233,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 17)-(line 235,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.Anonymous-68387a20-b3b4-4b4e-bd07-792816e52111.hashCode()",
        "snippet": "            @Override\n            public int hashCode() {\n                throw new UnsupportedOperationException();\n            }",
        "begin_line": 237,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 239,col 17)-(line 239,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testClone()",
        "snippet": "    public void testClone() {\n        assertEquals(null, ArrayUtils.clone((Object[]) null));\n        Object[] original1 = new Object[0];\n        Object[] cloned1 = ArrayUtils.clone(original1);\n        assertTrue(Arrays.equals(original1, cloned1));\n        assertTrue(original1 != cloned1);\n        \n        StringBuffer buf = new StringBuffer(\"pick\");\n        original1 = new Object[] {buf, \"a\", new String[] {\"stick\"}};\n        cloned1 = ArrayUtils.clone(original1);\n        assertTrue(Arrays.equals(original1, cloned1));\n        assertTrue(original1 != cloned1);\n        assertSame(original1[0], cloned1[0]);\n        assertSame(original1[1], cloned1[1]);\n        assertSame(original1[2], cloned1[2]);\n    }",
        "begin_line": 246,
        "end_line": 261,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 62)",
            "(line 248,col 9)-(line 248,col 43)",
            "(line 249,col 9)-(line 249,col 55)",
            "(line 250,col 9)-(line 250,col 54)",
            "(line 251,col 9)-(line 251,col 41)",
            "(line 253,col 9)-(line 253,col 52)",
            "(line 254,col 9)-(line 254,col 68)",
            "(line 255,col 9)-(line 255,col 46)",
            "(line 256,col 9)-(line 256,col 54)",
            "(line 257,col 9)-(line 257,col 41)",
            "(line 258,col 9)-(line 258,col 45)",
            "(line 259,col 9)-(line 259,col 45)",
            "(line 260,col 9)-(line 260,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneBoolean()",
        "snippet": "    public void testCloneBoolean() {\n        assertEquals(null, ArrayUtils.clone((boolean[]) null));\n        boolean[] original = new boolean[] {true, false};\n        boolean[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 63)",
            "(line 265,col 9)-(line 265,col 57)",
            "(line 266,col 9)-(line 266,col 54)",
            "(line 267,col 9)-(line 267,col 52)",
            "(line 268,col 9)-(line 268,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneLong()",
        "snippet": "    public void testCloneLong() {\n        assertEquals(null, ArrayUtils.clone((long[]) null));\n        long[] original = new long[] {0L, 1L};\n        long[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 60)",
            "(line 273,col 9)-(line 273,col 46)",
            "(line 274,col 9)-(line 274,col 51)",
            "(line 275,col 9)-(line 275,col 52)",
            "(line 276,col 9)-(line 276,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneInt()",
        "snippet": "    public void testCloneInt() {\n        assertEquals(null, ArrayUtils.clone((int[]) null));\n        int[] original = new int[] {5, 8};\n        int[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 279,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 59)",
            "(line 281,col 9)-(line 281,col 42)",
            "(line 282,col 9)-(line 282,col 50)",
            "(line 283,col 9)-(line 283,col 52)",
            "(line 284,col 9)-(line 284,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneShort()",
        "snippet": "    public void testCloneShort() {\n        assertEquals(null, ArrayUtils.clone((short[]) null));\n        short[] original = new short[] {1, 4};\n        short[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 287,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 61)",
            "(line 289,col 9)-(line 289,col 46)",
            "(line 290,col 9)-(line 290,col 52)",
            "(line 291,col 9)-(line 291,col 52)",
            "(line 292,col 9)-(line 292,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneChar()",
        "snippet": "    public void testCloneChar() {\n        assertEquals(null, ArrayUtils.clone((char[]) null));\n        char[] original = new char[] {'a', '4'};\n        char[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 60)",
            "(line 297,col 9)-(line 297,col 48)",
            "(line 298,col 9)-(line 298,col 51)",
            "(line 299,col 9)-(line 299,col 52)",
            "(line 300,col 9)-(line 300,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneByte()",
        "snippet": "    public void testCloneByte() {\n        assertEquals(null, ArrayUtils.clone((byte[]) null));\n        byte[] original = new byte[] {1, 6};\n        byte[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 303,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 60)",
            "(line 305,col 9)-(line 305,col 44)",
            "(line 306,col 9)-(line 306,col 51)",
            "(line 307,col 9)-(line 307,col 52)",
            "(line 308,col 9)-(line 308,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneDouble()",
        "snippet": "    public void testCloneDouble() {\n        assertEquals(null, ArrayUtils.clone((double[]) null));\n        double[] original = new double[] {2.4d, 5.7d};\n        double[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 311,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 62)",
            "(line 313,col 9)-(line 313,col 54)",
            "(line 314,col 9)-(line 314,col 53)",
            "(line 315,col 9)-(line 315,col 52)",
            "(line 316,col 9)-(line 316,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testCloneFloat()",
        "snippet": "    public void testCloneFloat() {\n        assertEquals(null, ArrayUtils.clone((float[]) null));\n        float[] original = new float[] {2.6f, 6.4f};\n        float[] cloned = ArrayUtils.clone(original);\n        assertTrue(Arrays.equals(original, cloned));\n        assertTrue(original != cloned);\n    }",
        "begin_line": 319,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 61)",
            "(line 321,col 9)-(line 321,col 52)",
            "(line 322,col 9)-(line 322,col 52)",
            "(line 323,col 9)-(line 323,col 52)",
            "(line 324,col 9)-(line 324,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBoolean()",
        "snippet": "    public void testNullToEmptyBoolean() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));\n        // Test valid array handling\n        boolean[] original = new boolean[] {true, false};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        boolean[] empty = new boolean[]{};\n        boolean[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 329,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 95)",
            "(line 333,col 9)-(line 333,col 57)",
            "(line 334,col 9)-(line 334,col 65)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 337,col 9)-(line 337,col 57)",
            "(line 338,col 9)-(line 338,col 61)",
            "(line 339,col 9)-(line 339,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLong()",
        "snippet": "    public void testNullToEmptyLong() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));\n        // Test valid array handling\n        long[] original = new long[] {1L, 2L};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        long[] empty = new long[]{};\n        long[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 342,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 89)",
            "(line 346,col 9)-(line 346,col 46)",
            "(line 347,col 9)-(line 347,col 65)",
            "(line 349,col 9)-(line 349,col 36)",
            "(line 350,col 9)-(line 350,col 54)",
            "(line 351,col 9)-(line 351,col 58)",
            "(line 352,col 9)-(line 352,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyInt()",
        "snippet": "    public void testNullToEmptyInt() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));\n        // Test valid array handling\n        int[] original = new int[] {1, 2};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        int[] empty = new int[]{};\n        int[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 355,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 357,col 9)-(line 357,col 87)",
            "(line 359,col 9)-(line 359,col 42)",
            "(line 360,col 9)-(line 360,col 65)",
            "(line 362,col 9)-(line 362,col 34)",
            "(line 363,col 9)-(line 363,col 53)",
            "(line 364,col 9)-(line 364,col 57)",
            "(line 365,col 9)-(line 365,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShort()",
        "snippet": "    public void testNullToEmptyShort() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));\n        // Test valid array handling\n        short[] original = new short[] {1, 2};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        short[] empty = new short[]{};\n        short[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 368,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 91)",
            "(line 372,col 9)-(line 372,col 46)",
            "(line 373,col 9)-(line 373,col 65)",
            "(line 375,col 9)-(line 375,col 38)",
            "(line 376,col 9)-(line 376,col 55)",
            "(line 377,col 9)-(line 377,col 59)",
            "(line 378,col 9)-(line 378,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyChar()",
        "snippet": "    public void testNullToEmptyChar() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));\n        // Test valid array handling\n        char[] original = new char[] {'a', 'b'};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        char[] empty = new char[]{};\n        char[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 381,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 89)",
            "(line 385,col 9)-(line 385,col 48)",
            "(line 386,col 9)-(line 386,col 65)",
            "(line 388,col 9)-(line 388,col 36)",
            "(line 389,col 9)-(line 389,col 54)",
            "(line 390,col 9)-(line 390,col 58)",
            "(line 391,col 9)-(line 391,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByte()",
        "snippet": "    public void testNullToEmptyByte() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));\n        // Test valid array handling\n        byte[] original = new byte[] {0x0F, 0x0E};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        byte[] empty = new byte[]{};\n        byte[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 394,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 89)",
            "(line 398,col 9)-(line 398,col 50)",
            "(line 399,col 9)-(line 399,col 65)",
            "(line 401,col 9)-(line 401,col 36)",
            "(line 402,col 9)-(line 402,col 54)",
            "(line 403,col 9)-(line 403,col 58)",
            "(line 404,col 9)-(line 404,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDouble()",
        "snippet": "    public void testNullToEmptyDouble() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));\n        // Test valid array handling\n        double[] original = new double[] {1L, 2L};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        double[] empty = new double[]{};\n        double[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 407,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 93)",
            "(line 411,col 9)-(line 411,col 50)",
            "(line 412,col 9)-(line 412,col 65)",
            "(line 414,col 9)-(line 414,col 40)",
            "(line 415,col 9)-(line 415,col 56)",
            "(line 416,col 9)-(line 416,col 60)",
            "(line 417,col 9)-(line 417,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloat()",
        "snippet": "    public void testNullToEmptyFloat() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));\n        // Test valid array handling\n        float[] original = new float[] {2.6f, 3.8f};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        float[] empty = new float[]{};\n        float[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 420,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 91)",
            "(line 424,col 9)-(line 424,col 52)",
            "(line 425,col 9)-(line 425,col 65)",
            "(line 427,col 9)-(line 427,col 38)",
            "(line 428,col 9)-(line 428,col 55)",
            "(line 429,col 9)-(line 429,col 59)",
            "(line 430,col 9)-(line 430,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyObject()",
        "snippet": "    public void testNullToEmptyObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\n        // Test valid array handling\n        Object[] original = new Object[] {true, false};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Object[] empty = new Object[]{};\n        Object[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 433,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 93)",
            "(line 437,col 9)-(line 437,col 55)",
            "(line 438,col 9)-(line 438,col 65)",
            "(line 440,col 9)-(line 440,col 40)",
            "(line 441,col 9)-(line 441,col 56)",
            "(line 442,col 9)-(line 442,col 60)",
            "(line 443,col 9)-(line 443,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyString()",
        "snippet": "    public void testNullToEmptyString() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));\n        // Test valid array handling\n        String[] original = new String[] {\"abc\", \"def\"};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        String[] empty = new String[]{};\n        String[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 446,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 93)",
            "(line 450,col 9)-(line 450,col 56)",
            "(line 451,col 9)-(line 451,col 65)",
            "(line 453,col 9)-(line 453,col 40)",
            "(line 454,col 9)-(line 454,col 56)",
            "(line 455,col 9)-(line 455,col 60)",
            "(line 456,col 9)-(line 456,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanObject()",
        "snippet": "    public void testNullToEmptyBooleanObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));\n        // Test valid array handling\n        Boolean[] original = new Boolean[] {Boolean.TRUE, Boolean.FALSE};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Boolean[] empty = new Boolean[]{};\n        Boolean[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 459,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 461,col 9)-(line 461,col 102)",
            "(line 463,col 9)-(line 463,col 73)",
            "(line 464,col 9)-(line 464,col 65)",
            "(line 466,col 9)-(line 466,col 42)",
            "(line 467,col 9)-(line 467,col 57)",
            "(line 468,col 9)-(line 468,col 68)",
            "(line 469,col 9)-(line 469,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongObject()",
        "snippet": "    public void testNullToEmptyLongObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\n        // Test valid array handling\n        Long[] original = new Long[] {1L, 2L};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Long[] empty = new Long[]{};\n        Long[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 472,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 96)",
            "(line 476,col 9)-(line 476,col 46)",
            "(line 477,col 9)-(line 477,col 65)",
            "(line 479,col 9)-(line 479,col 36)",
            "(line 480,col 9)-(line 480,col 54)",
            "(line 481,col 9)-(line 481,col 65)",
            "(line 482,col 9)-(line 482,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntObject()",
        "snippet": "    public void testNullToEmptyIntObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));\n        // Test valid array handling\n        Integer[] original = new Integer[] {1, 2};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Integer[] empty = new Integer[]{};\n        Integer[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 485,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 102)",
            "(line 489,col 9)-(line 489,col 50)",
            "(line 490,col 9)-(line 490,col 65)",
            "(line 492,col 9)-(line 492,col 42)",
            "(line 493,col 9)-(line 493,col 57)",
            "(line 494,col 9)-(line 494,col 68)",
            "(line 495,col 9)-(line 495,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObject()",
        "snippet": "    public void testNullToEmptyShortObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\n        // Test valid array handling\n        Short[] original = new Short[] {1, 2};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Short[] empty = new Short[]{};\n        Short[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 498,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 500,col 9)-(line 500,col 98)",
            "(line 502,col 9)-(line 502,col 46)",
            "(line 503,col 9)-(line 503,col 65)",
            "(line 505,col 9)-(line 505,col 38)",
            "(line 506,col 9)-(line 506,col 55)",
            "(line 507,col 9)-(line 507,col 66)",
            "(line 508,col 9)-(line 508,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharObject()",
        "snippet": "    public void testNullToEmptyCharObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));\n        // Test valid array handling\n        Character[] original = new Character[] {'a', 'b'};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Character[] empty = new Character[]{};\n        Character[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 511,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 513,col 9)-(line 513,col 106)",
            "(line 515,col 9)-(line 515,col 58)",
            "(line 516,col 9)-(line 516,col 65)",
            "(line 518,col 9)-(line 518,col 46)",
            "(line 519,col 9)-(line 519,col 59)",
            "(line 520,col 9)-(line 520,col 70)",
            "(line 521,col 9)-(line 521,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObject()",
        "snippet": "    public void testNullToEmptyByteObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));\n        // Test valid array handling\n        Byte[] original = new Byte[] {0x0F, 0x0E};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Byte[] empty = new Byte[]{};\n        Byte[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 524,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 96)",
            "(line 528,col 9)-(line 528,col 50)",
            "(line 529,col 9)-(line 529,col 65)",
            "(line 531,col 9)-(line 531,col 36)",
            "(line 532,col 9)-(line 532,col 54)",
            "(line 533,col 9)-(line 533,col 65)",
            "(line 534,col 9)-(line 534,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObject()",
        "snippet": "    public void testNullToEmptyDoubleObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));\n        // Test valid array handling\n        Double[] original = new Double[] {1D, 2D};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Double[] empty = new Double[]{};\n        Double[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 537,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 539,col 9)-(line 539,col 100)",
            "(line 541,col 9)-(line 541,col 50)",
            "(line 542,col 9)-(line 542,col 65)",
            "(line 544,col 9)-(line 544,col 40)",
            "(line 545,col 9)-(line 545,col 56)",
            "(line 546,col 9)-(line 546,col 67)",
            "(line 547,col 9)-(line 547,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatObject()",
        "snippet": "    public void testNullToEmptyFloatObject() {\n        // Test null handling\n        assertEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));\n        // Test valid array handling\n        Float[] original = new Float[] {2.6f, 3.8f};\n        assertEquals(original, ArrayUtils.nullToEmpty(original));\n        // Test empty array handling\n        Float[] empty = new Float[]{};\n        Float[] result = ArrayUtils.nullToEmpty(empty);\n        assertEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);\n        assertTrue(empty != result);\n    }",
        "begin_line": 550,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 98)",
            "(line 554,col 9)-(line 554,col 52)",
            "(line 555,col 9)-(line 555,col 65)",
            "(line 557,col 9)-(line 557,col 38)",
            "(line 558,col 9)-(line 558,col 55)",
            "(line 559,col 9)-(line 559,col 66)",
            "(line 560,col 9)-(line 560,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayObject()",
        "snippet": "    public void testSubarrayObject() {\n        Object[] nullArray = null;\n        Object[] objectArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n\n        assertEquals(\"0 start, mid end\", \"abcd\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));\n        assertEquals(\"0 start, length end\", \"abcdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));\n        assertEquals(\"mid start, mid end\", \"bcd\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));\n        assertEquals(\"mid start, length end\", \"bcdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n        assertEquals(\"empty array\", \"\",\n            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));\n        assertEquals(\"start > end\", \"\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));\n        assertEquals(\"start == end\", \"\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));\n        assertEquals(\"start undershoot, normal end\", \"abcd\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));\n        assertEquals(\"start overshoot, any end\", \"\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));\n        assertEquals(\"normal start, end overshoot\", \"cdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));\n        assertEquals(\"start undershoot, end overshoot\", \"abcdef\",\n            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));\n            \n        // array type tests\n        Date[] dateArray = { new java.sql.Date(new Date().getTime()),\n            new Date(), new Date(), new Date(), new Date() };\n\n        assertSame(\"Object type\", Object.class,\n            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());\n        assertSame(\"java.util.Date type\", java.util.Date.class,\n            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n        assertNotSame(\"java.sql.Date type\", java.sql.Date.class,\n            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n        try {\n            @SuppressWarnings(\"unused\")\n            java.sql.Date[] dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);\n            fail(\"Invalid downcast\");\n        } catch (ClassCastException e) {}\n    }",
        "begin_line": 565,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 566,col 9)-(line 566,col 34)",
            "(line 567,col 9)-(line 567,col 63)",
            "(line 569,col 9)-(line 570,col 70)",
            "(line 571,col 9)-(line 572,col 87)",
            "(line 573,col 9)-(line 574,col 70)",
            "(line 575,col 9)-(line 576,col 87)",
            "(line 578,col 9)-(line 578,col 71)",
            "(line 579,col 9)-(line 580,col 88)",
            "(line 581,col 9)-(line 582,col 70)",
            "(line 583,col 9)-(line 584,col 70)",
            "(line 585,col 9)-(line 586,col 71)",
            "(line 587,col 9)-(line 588,col 71)",
            "(line 589,col 9)-(line 590,col 71)",
            "(line 591,col 9)-(line 592,col 72)",
            "(line 595,col 9)-(line 596,col 61)",
            "(line 598,col 9)-(line 599,col 82)",
            "(line 600,col 9)-(line 601,col 80)",
            "(line 602,col 9)-(line 603,col 80)",
            "(line 604,col 9)-(line 608,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayLong()",
        "snippet": "    public void testSubarrayLong() {\n        long[] nullArray = null;\n        long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };\n        long[] leftSubarray     = { 999910, 999911, 999912, 999913 };\n        long[] midSubarray      = { 999911, 999912, 999913, 999914 };\n        long[] rightSubarray    = { 999912, 999913, 999914, 999915 };\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_LONG_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_LONG_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_LONG_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_LONG_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"long type\", long.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 611,
        "end_line": 685,
        "comment": "",
        "child_ranges": [
            "(line 612,col 9)-(line 612,col 32)",
            "(line 613,col 9)-(line 613,col 74)",
            "(line 614,col 9)-(line 614,col 69)",
            "(line 615,col 9)-(line 615,col 69)",
            "(line 616,col 9)-(line 616,col 69)",
            "(line 618,col 9)-(line 620,col 51)",
            "(line 622,col 9)-(line 624,col 62)",
            "(line 626,col 9)-(line 628,col 51)",
            "(line 630,col 9)-(line 632,col 62)",
            "(line 635,col 9)-(line 635,col 71)",
            "(line 637,col 9)-(line 638,col 68)",
            "(line 640,col 9)-(line 641,col 46)",
            "(line 643,col 9)-(line 644,col 46)",
            "(line 646,col 9)-(line 648,col 52)",
            "(line 650,col 9)-(line 652,col 51)",
            "(line 654,col 9)-(line 656,col 52)",
            "(line 658,col 9)-(line 660,col 53)",
            "(line 664,col 9)-(line 666,col 72)",
            "(line 668,col 9)-(line 670,col 50)",
            "(line 672,col 9)-(line 674,col 50)",
            "(line 676,col 9)-(line 678,col 53)",
            "(line 682,col 9)-(line 683,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayInt()",
        "snippet": "    public void testSubarrayInt() {\n        int[] nullArray = null;\n        int[] array = { 10, 11, 12, 13, 14, 15 };\n        int[] leftSubarray  = { 10, 11, 12, 13 };\n        int[] midSubarray   = { 11, 12, 13, 14 };\n        int[] rightSubarray = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_INT_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_INT_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_INT_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_INT_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"int type\", int.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 687,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 688,col 9)-(line 688,col 31)",
            "(line 689,col 9)-(line 689,col 49)",
            "(line 690,col 9)-(line 690,col 49)",
            "(line 691,col 9)-(line 691,col 49)",
            "(line 692,col 9)-(line 692,col 49)",
            "(line 695,col 9)-(line 697,col 51)",
            "(line 699,col 9)-(line 701,col 62)",
            "(line 703,col 9)-(line 705,col 51)",
            "(line 707,col 9)-(line 709,col 62)",
            "(line 712,col 9)-(line 712,col 71)",
            "(line 714,col 9)-(line 715,col 67)",
            "(line 717,col 9)-(line 718,col 46)",
            "(line 720,col 9)-(line 721,col 46)",
            "(line 723,col 9)-(line 725,col 52)",
            "(line 727,col 9)-(line 729,col 51)",
            "(line 731,col 9)-(line 733,col 52)",
            "(line 735,col 9)-(line 737,col 53)",
            "(line 741,col 9)-(line 743,col 71)",
            "(line 745,col 9)-(line 747,col 50)",
            "(line 749,col 9)-(line 751,col 50)",
            "(line 753,col 9)-(line 755,col 53)",
            "(line 759,col 9)-(line 760,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort()",
        "snippet": "    public void testSubarrayShort() {\n        short[] nullArray = null;\n        short[] array = { 10, 11, 12, 13, 14, 15 };\n        short[] leftSubarray    = { 10, 11, 12, 13 };\n        short[] midSubarray     = { 11, 12, 13, 14 };\n        short[] rightSubarray   = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_SHORT_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_SHORT_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"short type\", short.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 764,
        "end_line": 839,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 33)",
            "(line 766,col 9)-(line 766,col 51)",
            "(line 767,col 9)-(line 767,col 53)",
            "(line 768,col 9)-(line 768,col 53)",
            "(line 769,col 9)-(line 769,col 53)",
            "(line 772,col 9)-(line 774,col 51)",
            "(line 776,col 9)-(line 778,col 62)",
            "(line 780,col 9)-(line 782,col 51)",
            "(line 784,col 9)-(line 786,col 62)",
            "(line 789,col 9)-(line 789,col 71)",
            "(line 791,col 9)-(line 792,col 69)",
            "(line 794,col 9)-(line 795,col 46)",
            "(line 797,col 9)-(line 798,col 46)",
            "(line 800,col 9)-(line 802,col 52)",
            "(line 804,col 9)-(line 806,col 51)",
            "(line 808,col 9)-(line 810,col 52)",
            "(line 812,col 9)-(line 814,col 53)",
            "(line 818,col 9)-(line 820,col 73)",
            "(line 822,col 9)-(line 824,col 50)",
            "(line 826,col 9)-(line 828,col 50)",
            "(line 830,col 9)-(line 832,col 53)",
            "(line 836,col 9)-(line 837,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar()",
        "snippet": "    public void testSubarrChar() {\n        char[] nullArray = null;\n        char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };\n        char[] leftSubarray     = { 'a', 'b', 'c', 'd', };\n        char[] midSubarray      = { 'b', 'c', 'd', 'e', };\n        char[] rightSubarray    = { 'c', 'd', 'e', 'f', };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_CHAR_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_CHAR_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"char type\", char.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 841,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 842,col 9)-(line 842,col 32)",
            "(line 843,col 9)-(line 843,col 56)",
            "(line 844,col 9)-(line 844,col 58)",
            "(line 845,col 9)-(line 845,col 58)",
            "(line 846,col 9)-(line 846,col 58)",
            "(line 849,col 9)-(line 851,col 51)",
            "(line 853,col 9)-(line 855,col 62)",
            "(line 857,col 9)-(line 859,col 51)",
            "(line 861,col 9)-(line 863,col 62)",
            "(line 866,col 9)-(line 866,col 71)",
            "(line 868,col 9)-(line 869,col 68)",
            "(line 871,col 9)-(line 872,col 46)",
            "(line 874,col 9)-(line 875,col 46)",
            "(line 877,col 9)-(line 879,col 52)",
            "(line 881,col 9)-(line 883,col 51)",
            "(line 885,col 9)-(line 887,col 52)",
            "(line 889,col 9)-(line 891,col 53)",
            "(line 895,col 9)-(line 897,col 72)",
            "(line 899,col 9)-(line 901,col 50)",
            "(line 903,col 9)-(line 905,col 50)",
            "(line 907,col 9)-(line 909,col 53)",
            "(line 913,col 9)-(line 914,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayByte()",
        "snippet": "    public void testSubarrayByte() {\n        byte[] nullArray = null;\n        byte[] array = { 10, 11, 12, 13, 14, 15 };\n        byte[] leftSubarray     = { 10, 11, 12, 13 };\n        byte[] midSubarray      = { 11, 12, 13, 14 };\n        byte[] rightSubarray = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_BYTE_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_BYTE_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"byte type\", byte.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 918,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 919,col 9)-(line 919,col 32)",
            "(line 920,col 9)-(line 920,col 50)",
            "(line 921,col 9)-(line 921,col 53)",
            "(line 922,col 9)-(line 922,col 53)",
            "(line 923,col 9)-(line 923,col 50)",
            "(line 926,col 9)-(line 928,col 51)",
            "(line 930,col 9)-(line 932,col 62)",
            "(line 934,col 9)-(line 936,col 51)",
            "(line 938,col 9)-(line 940,col 62)",
            "(line 943,col 9)-(line 943,col 71)",
            "(line 945,col 9)-(line 946,col 68)",
            "(line 948,col 9)-(line 949,col 46)",
            "(line 951,col 9)-(line 952,col 46)",
            "(line 954,col 9)-(line 956,col 52)",
            "(line 958,col 9)-(line 960,col 51)",
            "(line 962,col 9)-(line 964,col 52)",
            "(line 966,col 9)-(line 968,col 53)",
            "(line 972,col 9)-(line 974,col 72)",
            "(line 976,col 9)-(line 978,col 50)",
            "(line 980,col 9)-(line 982,col 50)",
            "(line 984,col 9)-(line 986,col 53)",
            "(line 990,col 9)-(line 991,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayDouble()",
        "snippet": "    public void testSubarrayDouble() {\n        double[] nullArray = null;\n        double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };\n        double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };\n        double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };\n        double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"double type\", double.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 995,
        "end_line": 1070,
        "comment": "",
        "child_ranges": [
            "(line 996,col 9)-(line 996,col 34)",
            "(line 997,col 9)-(line 997,col 76)",
            "(line 998,col 9)-(line 998,col 70)",
            "(line 999,col 9)-(line 999,col 70)",
            "(line 1000,col 9)-(line 1000,col 69)",
            "(line 1003,col 9)-(line 1005,col 51)",
            "(line 1007,col 9)-(line 1009,col 62)",
            "(line 1011,col 9)-(line 1013,col 51)",
            "(line 1015,col 9)-(line 1017,col 62)",
            "(line 1020,col 9)-(line 1020,col 71)",
            "(line 1022,col 9)-(line 1023,col 70)",
            "(line 1025,col 9)-(line 1026,col 46)",
            "(line 1028,col 9)-(line 1029,col 46)",
            "(line 1031,col 9)-(line 1033,col 52)",
            "(line 1035,col 9)-(line 1037,col 51)",
            "(line 1039,col 9)-(line 1041,col 52)",
            "(line 1043,col 9)-(line 1045,col 53)",
            "(line 1049,col 9)-(line 1051,col 74)",
            "(line 1053,col 9)-(line 1055,col 50)",
            "(line 1057,col 9)-(line 1059,col 50)",
            "(line 1061,col 9)-(line 1063,col 53)",
            "(line 1067,col 9)-(line 1068,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayFloat()",
        "snippet": "    public void testSubarrayFloat() {\n        float[] nullArray = null;\n        float[] array = { 10, 11, 12, 13, 14, 15 };\n        float[] leftSubarray    = { 10, 11, 12, 13 };\n        float[] midSubarray     = { 11, 12, 13, 14 };\n        float[] rightSubarray   = { 12, 13, 14, 15 };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_FLOAT_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"float type\", float.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 1072,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1073,col 9)-(line 1073,col 33)",
            "(line 1074,col 9)-(line 1074,col 51)",
            "(line 1075,col 9)-(line 1075,col 53)",
            "(line 1076,col 9)-(line 1076,col 53)",
            "(line 1077,col 9)-(line 1077,col 53)",
            "(line 1080,col 9)-(line 1082,col 51)",
            "(line 1084,col 9)-(line 1086,col 62)",
            "(line 1088,col 9)-(line 1090,col 51)",
            "(line 1092,col 9)-(line 1094,col 62)",
            "(line 1097,col 9)-(line 1097,col 71)",
            "(line 1099,col 9)-(line 1100,col 69)",
            "(line 1102,col 9)-(line 1103,col 46)",
            "(line 1105,col 9)-(line 1106,col 46)",
            "(line 1108,col 9)-(line 1110,col 52)",
            "(line 1112,col 9)-(line 1114,col 51)",
            "(line 1116,col 9)-(line 1118,col 52)",
            "(line 1120,col 9)-(line 1122,col 53)",
            "(line 1126,col 9)-(line 1128,col 73)",
            "(line 1130,col 9)-(line 1132,col 50)",
            "(line 1134,col 9)-(line 1136,col 50)",
            "(line 1138,col 9)-(line 1140,col 53)",
            "(line 1144,col 9)-(line 1145,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSubarrayBoolean()",
        "snippet": "    public void testSubarrayBoolean() {\n        boolean[] nullArray = null;\n        boolean[] array = { true, true, false, true, false, true };\n        boolean[] leftSubarray  = { true, true, false, true  };\n        boolean[] midSubarray   = { true, false, true, false };\n        boolean[] rightSubarray = { false, true, false, true };\n\n\n        assertTrue(\"0 start, mid end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, 0, 4)));\n\n        assertTrue(\"0 start, length end\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, 0, array.length)));\n\n        assertTrue(\"mid start, mid end\",\n            ArrayUtils.isEquals(midSubarray,\n                ArrayUtils.subarray(array, 1, 5)));\n\n        assertTrue(\"mid start, length end\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, array.length)));\n\n\n        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n\n        assertEquals(\"empty array\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n\n        assertEquals(\"start > end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n            ArrayUtils.subarray(array, 4, 2));\n\n        assertEquals(\"start == end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n            ArrayUtils.subarray(array, 3, 3));\n\n        assertTrue(\"start undershoot, normal end\",\n            ArrayUtils.isEquals(leftSubarray,\n                ArrayUtils.subarray(array, -2, 4)));\n\n        assertEquals(\"start overshoot, any end\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 33, 4));\n\n        assertTrue(\"normal start, end overshoot\",\n            ArrayUtils.isEquals(rightSubarray,\n                ArrayUtils.subarray(array, 2, 33)));\n\n        assertTrue(\"start undershoot, end overshoot\",\n            ArrayUtils.isEquals(array,\n                ArrayUtils.subarray(array, -2, 12)));\n\n        // empty-return tests\n\n        assertSame(\"empty array, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n\n        assertSame(\"start > end, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 4, 1));\n\n        assertSame(\"start == end, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 3, 3));\n\n        assertSame(\"start overshoot, any end, object test\",\n            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n                ArrayUtils.subarray(array, 8733, 4));\n\n        // array type tests\n\n        assertSame(\"boolean type\", boolean.class,\n            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n\n    }",
        "begin_line": 1149,
        "end_line": 1224,
        "comment": "",
        "child_ranges": [
            "(line 1150,col 9)-(line 1150,col 35)",
            "(line 1151,col 9)-(line 1151,col 67)",
            "(line 1152,col 9)-(line 1152,col 63)",
            "(line 1153,col 9)-(line 1153,col 63)",
            "(line 1154,col 9)-(line 1154,col 63)",
            "(line 1157,col 9)-(line 1159,col 51)",
            "(line 1161,col 9)-(line 1163,col 62)",
            "(line 1165,col 9)-(line 1167,col 51)",
            "(line 1169,col 9)-(line 1171,col 62)",
            "(line 1174,col 9)-(line 1174,col 71)",
            "(line 1176,col 9)-(line 1177,col 71)",
            "(line 1179,col 9)-(line 1180,col 46)",
            "(line 1182,col 9)-(line 1183,col 46)",
            "(line 1185,col 9)-(line 1187,col 52)",
            "(line 1189,col 9)-(line 1191,col 51)",
            "(line 1193,col 9)-(line 1195,col 52)",
            "(line 1197,col 9)-(line 1199,col 53)",
            "(line 1203,col 9)-(line 1205,col 75)",
            "(line 1207,col 9)-(line 1209,col 50)",
            "(line 1211,col 9)-(line 1213,col 50)",
            "(line 1215,col 9)-(line 1217,col 53)",
            "(line 1221,col 9)-(line 1222,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLength()",
        "snippet": "    public void testSameLength() {\n        Object[] nullArray = null;\n        Object[] emptyArray = new Object[0];\n        Object[] oneArray = new Object[] {\"pick\"};\n        Object[] twoArray = new Object[] {\"pick\", \"stick\"};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1227,
        "end_line": 1252,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1228,col 9)-(line 1228,col 34)",
            "(line 1229,col 9)-(line 1229,col 44)",
            "(line 1230,col 9)-(line 1230,col 50)",
            "(line 1231,col 9)-(line 1231,col 59)",
            "(line 1233,col 9)-(line 1233,col 74)",
            "(line 1234,col 9)-(line 1234,col 75)",
            "(line 1235,col 9)-(line 1235,col 74)",
            "(line 1236,col 9)-(line 1236,col 74)",
            "(line 1238,col 9)-(line 1238,col 75)",
            "(line 1239,col 9)-(line 1239,col 76)",
            "(line 1240,col 9)-(line 1240,col 75)",
            "(line 1241,col 9)-(line 1241,col 75)",
            "(line 1243,col 9)-(line 1243,col 74)",
            "(line 1244,col 9)-(line 1244,col 75)",
            "(line 1245,col 9)-(line 1245,col 72)",
            "(line 1246,col 9)-(line 1246,col 73)",
            "(line 1248,col 9)-(line 1248,col 74)",
            "(line 1249,col 9)-(line 1249,col 75)",
            "(line 1250,col 9)-(line 1250,col 73)",
            "(line 1251,col 9)-(line 1251,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthBoolean()",
        "snippet": "    public void testSameLengthBoolean() {\n        boolean[] nullArray = null;\n        boolean[] emptyArray = new boolean[0];\n        boolean[] oneArray = new boolean[] {true};\n        boolean[] twoArray = new boolean[] {true, false};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1254,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1255,col 9)-(line 1255,col 35)",
            "(line 1256,col 9)-(line 1256,col 46)",
            "(line 1257,col 9)-(line 1257,col 50)",
            "(line 1258,col 9)-(line 1258,col 57)",
            "(line 1260,col 9)-(line 1260,col 74)",
            "(line 1261,col 9)-(line 1261,col 75)",
            "(line 1262,col 9)-(line 1262,col 74)",
            "(line 1263,col 9)-(line 1263,col 74)",
            "(line 1265,col 9)-(line 1265,col 75)",
            "(line 1266,col 9)-(line 1266,col 76)",
            "(line 1267,col 9)-(line 1267,col 75)",
            "(line 1268,col 9)-(line 1268,col 75)",
            "(line 1270,col 9)-(line 1270,col 74)",
            "(line 1271,col 9)-(line 1271,col 75)",
            "(line 1272,col 9)-(line 1272,col 72)",
            "(line 1273,col 9)-(line 1273,col 73)",
            "(line 1275,col 9)-(line 1275,col 74)",
            "(line 1276,col 9)-(line 1276,col 75)",
            "(line 1277,col 9)-(line 1277,col 73)",
            "(line 1278,col 9)-(line 1278,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthLong()",
        "snippet": "    public void testSameLengthLong() {\n        long[] nullArray = null;\n        long[] emptyArray = new long[0];\n        long[] oneArray = new long[] {0L};\n        long[] twoArray = new long[] {0L, 76L};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1281,
        "end_line": 1306,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 9)-(line 1282,col 32)",
            "(line 1283,col 9)-(line 1283,col 40)",
            "(line 1284,col 9)-(line 1284,col 42)",
            "(line 1285,col 9)-(line 1285,col 47)",
            "(line 1287,col 9)-(line 1287,col 74)",
            "(line 1288,col 9)-(line 1288,col 75)",
            "(line 1289,col 9)-(line 1289,col 74)",
            "(line 1290,col 9)-(line 1290,col 74)",
            "(line 1292,col 9)-(line 1292,col 75)",
            "(line 1293,col 9)-(line 1293,col 76)",
            "(line 1294,col 9)-(line 1294,col 75)",
            "(line 1295,col 9)-(line 1295,col 75)",
            "(line 1297,col 9)-(line 1297,col 74)",
            "(line 1298,col 9)-(line 1298,col 75)",
            "(line 1299,col 9)-(line 1299,col 72)",
            "(line 1300,col 9)-(line 1300,col 73)",
            "(line 1302,col 9)-(line 1302,col 74)",
            "(line 1303,col 9)-(line 1303,col 75)",
            "(line 1304,col 9)-(line 1304,col 73)",
            "(line 1305,col 9)-(line 1305,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthInt()",
        "snippet": "    public void testSameLengthInt() {\n        int[] nullArray = null;\n        int[] emptyArray = new int[0];\n        int[] oneArray = new int[] {4};\n        int[] twoArray = new int[] {5, 7};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1308,
        "end_line": 1333,
        "comment": "",
        "child_ranges": [
            "(line 1309,col 9)-(line 1309,col 31)",
            "(line 1310,col 9)-(line 1310,col 38)",
            "(line 1311,col 9)-(line 1311,col 39)",
            "(line 1312,col 9)-(line 1312,col 42)",
            "(line 1314,col 9)-(line 1314,col 74)",
            "(line 1315,col 9)-(line 1315,col 75)",
            "(line 1316,col 9)-(line 1316,col 74)",
            "(line 1317,col 9)-(line 1317,col 74)",
            "(line 1319,col 9)-(line 1319,col 75)",
            "(line 1320,col 9)-(line 1320,col 76)",
            "(line 1321,col 9)-(line 1321,col 75)",
            "(line 1322,col 9)-(line 1322,col 75)",
            "(line 1324,col 9)-(line 1324,col 74)",
            "(line 1325,col 9)-(line 1325,col 75)",
            "(line 1326,col 9)-(line 1326,col 72)",
            "(line 1327,col 9)-(line 1327,col 73)",
            "(line 1329,col 9)-(line 1329,col 74)",
            "(line 1330,col 9)-(line 1330,col 75)",
            "(line 1331,col 9)-(line 1331,col 73)",
            "(line 1332,col 9)-(line 1332,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthShort()",
        "snippet": "    public void testSameLengthShort() {\n        short[] nullArray = null;\n        short[] emptyArray = new short[0];\n        short[] oneArray = new short[] {4};\n        short[] twoArray = new short[] {6, 8};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1335,
        "end_line": 1360,
        "comment": "",
        "child_ranges": [
            "(line 1336,col 9)-(line 1336,col 33)",
            "(line 1337,col 9)-(line 1337,col 42)",
            "(line 1338,col 9)-(line 1338,col 43)",
            "(line 1339,col 9)-(line 1339,col 46)",
            "(line 1341,col 9)-(line 1341,col 74)",
            "(line 1342,col 9)-(line 1342,col 75)",
            "(line 1343,col 9)-(line 1343,col 74)",
            "(line 1344,col 9)-(line 1344,col 74)",
            "(line 1346,col 9)-(line 1346,col 75)",
            "(line 1347,col 9)-(line 1347,col 76)",
            "(line 1348,col 9)-(line 1348,col 75)",
            "(line 1349,col 9)-(line 1349,col 75)",
            "(line 1351,col 9)-(line 1351,col 74)",
            "(line 1352,col 9)-(line 1352,col 75)",
            "(line 1353,col 9)-(line 1353,col 72)",
            "(line 1354,col 9)-(line 1354,col 73)",
            "(line 1356,col 9)-(line 1356,col 74)",
            "(line 1357,col 9)-(line 1357,col 75)",
            "(line 1358,col 9)-(line 1358,col 73)",
            "(line 1359,col 9)-(line 1359,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthChar()",
        "snippet": "    public void testSameLengthChar() {\n        char[] nullArray = null;\n        char[] emptyArray = new char[0];\n        char[] oneArray = new char[] {'f'};\n        char[] twoArray = new char[] {'d', 't'};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1362,
        "end_line": 1387,
        "comment": "",
        "child_ranges": [
            "(line 1363,col 9)-(line 1363,col 32)",
            "(line 1364,col 9)-(line 1364,col 40)",
            "(line 1365,col 9)-(line 1365,col 43)",
            "(line 1366,col 9)-(line 1366,col 48)",
            "(line 1368,col 9)-(line 1368,col 74)",
            "(line 1369,col 9)-(line 1369,col 75)",
            "(line 1370,col 9)-(line 1370,col 74)",
            "(line 1371,col 9)-(line 1371,col 74)",
            "(line 1373,col 9)-(line 1373,col 75)",
            "(line 1374,col 9)-(line 1374,col 76)",
            "(line 1375,col 9)-(line 1375,col 75)",
            "(line 1376,col 9)-(line 1376,col 75)",
            "(line 1378,col 9)-(line 1378,col 74)",
            "(line 1379,col 9)-(line 1379,col 75)",
            "(line 1380,col 9)-(line 1380,col 72)",
            "(line 1381,col 9)-(line 1381,col 73)",
            "(line 1383,col 9)-(line 1383,col 74)",
            "(line 1384,col 9)-(line 1384,col 75)",
            "(line 1385,col 9)-(line 1385,col 73)",
            "(line 1386,col 9)-(line 1386,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthByte()",
        "snippet": "    public void testSameLengthByte() {\n        byte[] nullArray = null;\n        byte[] emptyArray = new byte[0];\n        byte[] oneArray = new byte[] {3};\n        byte[] twoArray = new byte[] {4, 6};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1389,
        "end_line": 1414,
        "comment": "",
        "child_ranges": [
            "(line 1390,col 9)-(line 1390,col 32)",
            "(line 1391,col 9)-(line 1391,col 40)",
            "(line 1392,col 9)-(line 1392,col 41)",
            "(line 1393,col 9)-(line 1393,col 44)",
            "(line 1395,col 9)-(line 1395,col 74)",
            "(line 1396,col 9)-(line 1396,col 75)",
            "(line 1397,col 9)-(line 1397,col 74)",
            "(line 1398,col 9)-(line 1398,col 74)",
            "(line 1400,col 9)-(line 1400,col 75)",
            "(line 1401,col 9)-(line 1401,col 76)",
            "(line 1402,col 9)-(line 1402,col 75)",
            "(line 1403,col 9)-(line 1403,col 75)",
            "(line 1405,col 9)-(line 1405,col 74)",
            "(line 1406,col 9)-(line 1406,col 75)",
            "(line 1407,col 9)-(line 1407,col 72)",
            "(line 1408,col 9)-(line 1408,col 73)",
            "(line 1410,col 9)-(line 1410,col 74)",
            "(line 1411,col 9)-(line 1411,col 75)",
            "(line 1412,col 9)-(line 1412,col 73)",
            "(line 1413,col 9)-(line 1413,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthDouble()",
        "snippet": "    public void testSameLengthDouble() {\n        double[] nullArray = null;\n        double[] emptyArray = new double[0];\n        double[] oneArray = new double[] {1.3d};\n        double[] twoArray = new double[] {4.5d, 6.3d};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1416,
        "end_line": 1441,
        "comment": "",
        "child_ranges": [
            "(line 1417,col 9)-(line 1417,col 34)",
            "(line 1418,col 9)-(line 1418,col 44)",
            "(line 1419,col 9)-(line 1419,col 48)",
            "(line 1420,col 9)-(line 1420,col 54)",
            "(line 1422,col 9)-(line 1422,col 74)",
            "(line 1423,col 9)-(line 1423,col 75)",
            "(line 1424,col 9)-(line 1424,col 74)",
            "(line 1425,col 9)-(line 1425,col 74)",
            "(line 1427,col 9)-(line 1427,col 75)",
            "(line 1428,col 9)-(line 1428,col 76)",
            "(line 1429,col 9)-(line 1429,col 75)",
            "(line 1430,col 9)-(line 1430,col 75)",
            "(line 1432,col 9)-(line 1432,col 74)",
            "(line 1433,col 9)-(line 1433,col 75)",
            "(line 1434,col 9)-(line 1434,col 72)",
            "(line 1435,col 9)-(line 1435,col 73)",
            "(line 1437,col 9)-(line 1437,col 74)",
            "(line 1438,col 9)-(line 1438,col 75)",
            "(line 1439,col 9)-(line 1439,col 73)",
            "(line 1440,col 9)-(line 1440,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameLengthFloat()",
        "snippet": "    public void testSameLengthFloat() {\n        float[] nullArray = null;\n        float[] emptyArray = new float[0];\n        float[] oneArray = new float[] {2.5f};\n        float[] twoArray = new float[] {6.4f, 5.8f};\n        \n        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n        \n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n        \n        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n    }",
        "begin_line": 1443,
        "end_line": 1468,
        "comment": "",
        "child_ranges": [
            "(line 1444,col 9)-(line 1444,col 33)",
            "(line 1445,col 9)-(line 1445,col 42)",
            "(line 1446,col 9)-(line 1446,col 46)",
            "(line 1447,col 9)-(line 1447,col 52)",
            "(line 1449,col 9)-(line 1449,col 74)",
            "(line 1450,col 9)-(line 1450,col 75)",
            "(line 1451,col 9)-(line 1451,col 74)",
            "(line 1452,col 9)-(line 1452,col 74)",
            "(line 1454,col 9)-(line 1454,col 75)",
            "(line 1455,col 9)-(line 1455,col 76)",
            "(line 1456,col 9)-(line 1456,col 75)",
            "(line 1457,col 9)-(line 1457,col 75)",
            "(line 1459,col 9)-(line 1459,col 74)",
            "(line 1460,col 9)-(line 1460,col 75)",
            "(line 1461,col 9)-(line 1461,col 72)",
            "(line 1462,col 9)-(line 1462,col 73)",
            "(line 1464,col 9)-(line 1464,col 74)",
            "(line 1465,col 9)-(line 1465,col 75)",
            "(line 1466,col 9)-(line 1466,col 73)",
            "(line 1467,col 9)-(line 1467,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testSameType()",
        "snippet": "    public void testSameType() {\n        try {\n            ArrayUtils.isSameType(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.isSameType(null, new Object[0]);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            ArrayUtils.isSameType(new Object[0], null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));\n        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));\n        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));\n        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));\n    }",
        "begin_line": 1471,
        "end_line": 1490,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1472,col 9)-(line 1475,col 48)",
            "(line 1476,col 9)-(line 1479,col 48)",
            "(line 1480,col 9)-(line 1483,col 48)",
            "(line 1485,col 9)-(line 1485,col 80)",
            "(line 1486,col 9)-(line 1486,col 81)",
            "(line 1487,col 9)-(line 1487,col 86)",
            "(line 1488,col 9)-(line 1488,col 84)",
            "(line 1489,col 9)-(line 1489,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverse()",
        "snippet": "    public void testReverse() {\n        StringBuffer str1 = new StringBuffer(\"pick\");\n        String str2 = \"a\";\n        String[] str3 = new String[] {\"stick\"};\n        String str4 = \"up\";\n        \n        Object[] array = new Object[] {str1, str2, str3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], str3);\n        assertEquals(array[1], str2);\n        assertEquals(array[2], str1);\n        \n        array = new Object[] {str1, str2, str3, str4};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], str4);\n        assertEquals(array[1], str3);\n        assertEquals(array[2], str2);\n        assertEquals(array[3], str1);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1493,
        "end_line": 1515,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1494,col 9)-(line 1494,col 53)",
            "(line 1495,col 9)-(line 1495,col 26)",
            "(line 1496,col 9)-(line 1496,col 47)",
            "(line 1497,col 9)-(line 1497,col 27)",
            "(line 1499,col 9)-(line 1499,col 57)",
            "(line 1500,col 9)-(line 1500,col 34)",
            "(line 1501,col 9)-(line 1501,col 37)",
            "(line 1502,col 9)-(line 1502,col 37)",
            "(line 1503,col 9)-(line 1503,col 37)",
            "(line 1505,col 9)-(line 1505,col 54)",
            "(line 1506,col 9)-(line 1506,col 34)",
            "(line 1507,col 9)-(line 1507,col 37)",
            "(line 1508,col 9)-(line 1508,col 37)",
            "(line 1509,col 9)-(line 1509,col 37)",
            "(line 1510,col 9)-(line 1510,col 37)",
            "(line 1512,col 9)-(line 1512,col 21)",
            "(line 1513,col 9)-(line 1513,col 34)",
            "(line 1514,col 9)-(line 1514,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseLong()",
        "snippet": "    public void testReverseLong() {\n        long[] array = new long[] {1L, 2L, 3L};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3L);\n        assertEquals(array[1], 2L);\n        assertEquals(array[2], 1L);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1517,
        "end_line": 1527,
        "comment": "",
        "child_ranges": [
            "(line 1518,col 9)-(line 1518,col 47)",
            "(line 1519,col 9)-(line 1519,col 34)",
            "(line 1520,col 9)-(line 1520,col 35)",
            "(line 1521,col 9)-(line 1521,col 35)",
            "(line 1522,col 9)-(line 1522,col 35)",
            "(line 1524,col 9)-(line 1524,col 21)",
            "(line 1525,col 9)-(line 1525,col 34)",
            "(line 1526,col 9)-(line 1526,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseInt()",
        "snippet": "    public void testReverseInt() {\n        int[] array = new int[] {1, 2, 3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3);\n        assertEquals(array[1], 2);\n        assertEquals(array[2], 1);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1529,
        "end_line": 1539,
        "comment": "",
        "child_ranges": [
            "(line 1530,col 9)-(line 1530,col 42)",
            "(line 1531,col 9)-(line 1531,col 34)",
            "(line 1532,col 9)-(line 1532,col 34)",
            "(line 1533,col 9)-(line 1533,col 34)",
            "(line 1534,col 9)-(line 1534,col 34)",
            "(line 1536,col 9)-(line 1536,col 21)",
            "(line 1537,col 9)-(line 1537,col 34)",
            "(line 1538,col 9)-(line 1538,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseShort()",
        "snippet": "    public void testReverseShort() {\n        short[] array = new short[] {1, 2, 3};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 3);\n        assertEquals(array[1], 2);\n        assertEquals(array[2], 1);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1541,
        "end_line": 1551,
        "comment": "",
        "child_ranges": [
            "(line 1542,col 9)-(line 1542,col 46)",
            "(line 1543,col 9)-(line 1543,col 34)",
            "(line 1544,col 9)-(line 1544,col 34)",
            "(line 1545,col 9)-(line 1545,col 34)",
            "(line 1546,col 9)-(line 1546,col 34)",
            "(line 1548,col 9)-(line 1548,col 21)",
            "(line 1549,col 9)-(line 1549,col 34)",
            "(line 1550,col 9)-(line 1550,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseChar()",
        "snippet": "    public void testReverseChar() {\n        char[] array = new char[] {'a', 'f', 'C'};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 'C');\n        assertEquals(array[1], 'f');\n        assertEquals(array[2], 'a');\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1553,
        "end_line": 1563,
        "comment": "",
        "child_ranges": [
            "(line 1554,col 9)-(line 1554,col 50)",
            "(line 1555,col 9)-(line 1555,col 34)",
            "(line 1556,col 9)-(line 1556,col 36)",
            "(line 1557,col 9)-(line 1557,col 36)",
            "(line 1558,col 9)-(line 1558,col 36)",
            "(line 1560,col 9)-(line 1560,col 21)",
            "(line 1561,col 9)-(line 1561,col 34)",
            "(line 1562,col 9)-(line 1562,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseByte()",
        "snippet": "    public void testReverseByte() {\n        byte[] array = new byte[] {2, 3, 4};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 4);\n        assertEquals(array[1], 3);\n        assertEquals(array[2], 2);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1565,
        "end_line": 1575,
        "comment": "",
        "child_ranges": [
            "(line 1566,col 9)-(line 1566,col 44)",
            "(line 1567,col 9)-(line 1567,col 34)",
            "(line 1568,col 9)-(line 1568,col 34)",
            "(line 1569,col 9)-(line 1569,col 34)",
            "(line 1570,col 9)-(line 1570,col 34)",
            "(line 1572,col 9)-(line 1572,col 21)",
            "(line 1573,col 9)-(line 1573,col 34)",
            "(line 1574,col 9)-(line 1574,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseDouble()",
        "snippet": "    public void testReverseDouble() {\n        double[] array = new double[] {0.3d, 0.4d, 0.5d};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 0.5d, 0.0d);\n        assertEquals(array[1], 0.4d, 0.0d);\n        assertEquals(array[2], 0.3d, 0.0d);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1577,
        "end_line": 1587,
        "comment": "",
        "child_ranges": [
            "(line 1578,col 9)-(line 1578,col 57)",
            "(line 1579,col 9)-(line 1579,col 34)",
            "(line 1580,col 9)-(line 1580,col 43)",
            "(line 1581,col 9)-(line 1581,col 43)",
            "(line 1582,col 9)-(line 1582,col 43)",
            "(line 1584,col 9)-(line 1584,col 21)",
            "(line 1585,col 9)-(line 1585,col 34)",
            "(line 1586,col 9)-(line 1586,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseFloat()",
        "snippet": "    public void testReverseFloat() {\n        float[] array = new float[] {0.3f, 0.4f, 0.5f};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], 0.5f, 0.0f);\n        assertEquals(array[1], 0.4f, 0.0f);\n        assertEquals(array[2], 0.3f, 0.0f);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1589,
        "end_line": 1599,
        "comment": "",
        "child_ranges": [
            "(line 1590,col 9)-(line 1590,col 55)",
            "(line 1591,col 9)-(line 1591,col 34)",
            "(line 1592,col 9)-(line 1592,col 43)",
            "(line 1593,col 9)-(line 1593,col 43)",
            "(line 1594,col 9)-(line 1594,col 43)",
            "(line 1596,col 9)-(line 1596,col 21)",
            "(line 1597,col 9)-(line 1597,col 34)",
            "(line 1598,col 9)-(line 1598,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testReverseBoolean()",
        "snippet": "    public void testReverseBoolean() {\n        boolean[] array = new boolean[] {false, false, true};\n        ArrayUtils.reverse(array);\n        assertEquals(array[0], true);\n        assertEquals(array[1], false);\n        assertEquals(array[2], false);\n\n        array = null;\n        ArrayUtils.reverse(array);\n        assertEquals(null, array);\n    }",
        "begin_line": 1601,
        "end_line": 1611,
        "comment": "",
        "child_ranges": [
            "(line 1602,col 9)-(line 1602,col 61)",
            "(line 1603,col 9)-(line 1603,col 34)",
            "(line 1604,col 9)-(line 1604,col 37)",
            "(line 1605,col 9)-(line 1605,col 38)",
            "(line 1606,col 9)-(line 1606,col 38)",
            "(line 1608,col 9)-(line 1608,col 21)",
            "(line 1609,col 9)-(line 1609,col 34)",
            "(line 1610,col 9)-(line 1610,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOf()",
        "snippet": "    public void testIndexOf() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.indexOf(null, null));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\n        assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.indexOf(array, null));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n    }",
        "begin_line": 1614,
        "end_line": 1625,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1615,col 9)-(line 1615,col 72)",
            "(line 1616,col 9)-(line 1616,col 57)",
            "(line 1617,col 9)-(line 1617,col 56)",
            "(line 1618,col 9)-(line 1618,col 65)",
            "(line 1619,col 9)-(line 1619,col 56)",
            "(line 1620,col 9)-(line 1620,col 56)",
            "(line 1621,col 9)-(line 1621,col 56)",
            "(line 1622,col 9)-(line 1622,col 56)",
            "(line 1623,col 9)-(line 1623,col 57)",
            "(line 1624,col 9)-(line 1624,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfWithStartIndex()",
        "snippet": "    public void testIndexOfWithStartIndex() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\", 0));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\n        assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\n        assertEquals(4, ArrayUtils.indexOf(array, null, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\", 2));\n        \n        assertEquals(4, ArrayUtils.indexOf(array, null, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 8));\n    }",
        "begin_line": 1627,
        "end_line": 1642,
        "comment": "",
        "child_ranges": [
            "(line 1628,col 9)-(line 1628,col 72)",
            "(line 1629,col 9)-(line 1629,col 60)",
            "(line 1630,col 9)-(line 1630,col 68)",
            "(line 1631,col 9)-(line 1631,col 59)",
            "(line 1632,col 9)-(line 1632,col 59)",
            "(line 1633,col 9)-(line 1633,col 60)",
            "(line 1634,col 9)-(line 1634,col 59)",
            "(line 1635,col 9)-(line 1635,col 59)",
            "(line 1636,col 9)-(line 1636,col 60)",
            "(line 1637,col 9)-(line 1637,col 69)",
            "(line 1639,col 9)-(line 1639,col 61)",
            "(line 1640,col 9)-(line 1640,col 61)",
            "(line 1641,col 9)-(line 1641,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOf()",
        "snippet": "    public void testLastIndexOf() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\"));\n        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, null));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n    }",
        "begin_line": 1644,
        "end_line": 1654,
        "comment": "",
        "child_ranges": [
            "(line 1645,col 9)-(line 1645,col 72)",
            "(line 1646,col 9)-(line 1646,col 61)",
            "(line 1647,col 9)-(line 1647,col 60)",
            "(line 1648,col 9)-(line 1648,col 60)",
            "(line 1649,col 9)-(line 1649,col 60)",
            "(line 1650,col 9)-(line 1650,col 60)",
            "(line 1651,col 9)-(line 1651,col 60)",
            "(line 1652,col 9)-(line 1652,col 61)",
            "(line 1653,col 9)-(line 1653,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfWithStartIndex()",
        "snippet": "    public void testLastIndexOfWithStartIndex() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\", 2));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, \"0\", 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", -1));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\n        \n        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\n        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n    }",
        "begin_line": 1656,
        "end_line": 1671,
        "comment": "",
        "child_ranges": [
            "(line 1657,col 9)-(line 1657,col 72)",
            "(line 1658,col 9)-(line 1658,col 64)",
            "(line 1659,col 9)-(line 1659,col 63)",
            "(line 1660,col 9)-(line 1660,col 63)",
            "(line 1661,col 9)-(line 1661,col 63)",
            "(line 1662,col 9)-(line 1662,col 63)",
            "(line 1663,col 9)-(line 1663,col 64)",
            "(line 1664,col 9)-(line 1664,col 65)",
            "(line 1665,col 9)-(line 1665,col 64)",
            "(line 1666,col 9)-(line 1666,col 65)",
            "(line 1667,col 9)-(line 1667,col 73)",
            "(line 1669,col 9)-(line 1669,col 66)",
            "(line 1670,col 9)-(line 1670,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContains()",
        "snippet": "    public void testContains() {\n        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(false, ArrayUtils.contains(null, null));\n        assertEquals(false, ArrayUtils.contains(null, \"1\"));\n        assertEquals(true, ArrayUtils.contains(array, \"0\"));\n        assertEquals(true, ArrayUtils.contains(array, \"1\"));\n        assertEquals(true, ArrayUtils.contains(array, \"2\"));\n        assertEquals(true, ArrayUtils.contains(array, \"3\"));\n        assertEquals(true, ArrayUtils.contains(array, null));\n        assertEquals(false, ArrayUtils.contains(array, \"notInArray\"));\n    }",
        "begin_line": 1673,
        "end_line": 1683,
        "comment": "",
        "child_ranges": [
            "(line 1674,col 9)-(line 1674,col 72)",
            "(line 1675,col 9)-(line 1675,col 61)",
            "(line 1676,col 9)-(line 1676,col 60)",
            "(line 1677,col 9)-(line 1677,col 60)",
            "(line 1678,col 9)-(line 1678,col 60)",
            "(line 1679,col 9)-(line 1679,col 60)",
            "(line 1680,col 9)-(line 1680,col 60)",
            "(line 1681,col 9)-(line 1681,col 61)",
            "(line 1682,col 9)-(line 1682,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLong()",
        "snippet": "    public void testIndexOfLong() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1));\n        assertEquals(2, ArrayUtils.indexOf(array, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n    }",
        "begin_line": 1686,
        "end_line": 1695,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1687,col 9)-(line 1687,col 28)",
            "(line 1688,col 9)-(line 1688,col 55)",
            "(line 1689,col 9)-(line 1689,col 45)",
            "(line 1690,col 9)-(line 1690,col 54)",
            "(line 1691,col 9)-(line 1691,col 54)",
            "(line 1692,col 9)-(line 1692,col 54)",
            "(line 1693,col 9)-(line 1693,col 54)",
            "(line 1694,col 9)-(line 1694,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLongWithStartIndex()",
        "snippet": "    public void testIndexOfLongWithStartIndex() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n    }",
        "begin_line": 1697,
        "end_line": 1708,
        "comment": "",
        "child_ranges": [
            "(line 1698,col 9)-(line 1698,col 28)",
            "(line 1699,col 9)-(line 1699,col 58)",
            "(line 1700,col 9)-(line 1700,col 45)",
            "(line 1701,col 9)-(line 1701,col 57)",
            "(line 1702,col 9)-(line 1702,col 58)",
            "(line 1703,col 9)-(line 1703,col 57)",
            "(line 1704,col 9)-(line 1704,col 57)",
            "(line 1705,col 9)-(line 1705,col 58)",
            "(line 1706,col 9)-(line 1706,col 59)",
            "(line 1707,col 9)-(line 1707,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLong()",
        "snippet": "    public void testLastIndexOfLong() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n    }",
        "begin_line": 1710,
        "end_line": 1719,
        "comment": "",
        "child_ranges": [
            "(line 1711,col 9)-(line 1711,col 28)",
            "(line 1712,col 9)-(line 1712,col 59)",
            "(line 1713,col 9)-(line 1713,col 45)",
            "(line 1714,col 9)-(line 1714,col 58)",
            "(line 1715,col 9)-(line 1715,col 58)",
            "(line 1716,col 9)-(line 1716,col 58)",
            "(line 1717,col 9)-(line 1717,col 58)",
            "(line 1718,col 9)-(line 1718,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLongWithStartIndex()",
        "snippet": "    public void testLastIndexOfLongWithStartIndex() {\n        long[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n    }",
        "begin_line": 1721,
        "end_line": 1732,
        "comment": "",
        "child_ranges": [
            "(line 1722,col 9)-(line 1722,col 28)",
            "(line 1723,col 9)-(line 1723,col 62)",
            "(line 1724,col 9)-(line 1724,col 45)",
            "(line 1725,col 9)-(line 1725,col 61)",
            "(line 1726,col 9)-(line 1726,col 61)",
            "(line 1727,col 9)-(line 1727,col 61)",
            "(line 1728,col 9)-(line 1728,col 62)",
            "(line 1729,col 9)-(line 1729,col 63)",
            "(line 1730,col 9)-(line 1730,col 63)",
            "(line 1731,col 9)-(line 1731,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsLong()",
        "snippet": "    public void testContainsLong() {\n        long[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, 1));\n        array = new long[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, 0));\n        assertEquals(true, ArrayUtils.contains(array, 1));\n        assertEquals(true, ArrayUtils.contains(array, 2));\n        assertEquals(true, ArrayUtils.contains(array, 3));\n        assertEquals(false, ArrayUtils.contains(array, 99));\n    }",
        "begin_line": 1734,
        "end_line": 1743,
        "comment": "",
        "child_ranges": [
            "(line 1735,col 9)-(line 1735,col 28)",
            "(line 1736,col 9)-(line 1736,col 59)",
            "(line 1737,col 9)-(line 1737,col 45)",
            "(line 1738,col 9)-(line 1738,col 58)",
            "(line 1739,col 9)-(line 1739,col 58)",
            "(line 1740,col 9)-(line 1740,col 58)",
            "(line 1741,col 9)-(line 1741,col 58)",
            "(line 1742,col 9)-(line 1742,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfInt()",
        "snippet": "    public void testIndexOfInt() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, 1));\n        assertEquals(2, ArrayUtils.indexOf(array, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n    }",
        "begin_line": 1746,
        "end_line": 1755,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1747,col 9)-(line 1747,col 27)",
            "(line 1748,col 9)-(line 1748,col 55)",
            "(line 1749,col 9)-(line 1749,col 44)",
            "(line 1750,col 9)-(line 1750,col 54)",
            "(line 1751,col 9)-(line 1751,col 54)",
            "(line 1752,col 9)-(line 1752,col 54)",
            "(line 1753,col 9)-(line 1753,col 54)",
            "(line 1754,col 9)-(line 1754,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfIntWithStartIndex()",
        "snippet": "    public void testIndexOfIntWithStartIndex() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n    }",
        "begin_line": 1757,
        "end_line": 1768,
        "comment": "",
        "child_ranges": [
            "(line 1758,col 9)-(line 1758,col 27)",
            "(line 1759,col 9)-(line 1759,col 58)",
            "(line 1760,col 9)-(line 1760,col 44)",
            "(line 1761,col 9)-(line 1761,col 57)",
            "(line 1762,col 9)-(line 1762,col 58)",
            "(line 1763,col 9)-(line 1763,col 57)",
            "(line 1764,col 9)-(line 1764,col 57)",
            "(line 1765,col 9)-(line 1765,col 58)",
            "(line 1766,col 9)-(line 1766,col 59)",
            "(line 1767,col 9)-(line 1767,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfInt()",
        "snippet": "    public void testLastIndexOfInt() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n    }",
        "begin_line": 1770,
        "end_line": 1779,
        "comment": "",
        "child_ranges": [
            "(line 1771,col 9)-(line 1771,col 27)",
            "(line 1772,col 9)-(line 1772,col 59)",
            "(line 1773,col 9)-(line 1773,col 44)",
            "(line 1774,col 9)-(line 1774,col 58)",
            "(line 1775,col 9)-(line 1775,col 58)",
            "(line 1776,col 9)-(line 1776,col 58)",
            "(line 1777,col 9)-(line 1777,col 58)",
            "(line 1778,col 9)-(line 1778,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfIntWithStartIndex()",
        "snippet": "    public void testLastIndexOfIntWithStartIndex() {\n        int[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n    }",
        "begin_line": 1781,
        "end_line": 1792,
        "comment": "",
        "child_ranges": [
            "(line 1782,col 9)-(line 1782,col 27)",
            "(line 1783,col 9)-(line 1783,col 62)",
            "(line 1784,col 9)-(line 1784,col 44)",
            "(line 1785,col 9)-(line 1785,col 61)",
            "(line 1786,col 9)-(line 1786,col 61)",
            "(line 1787,col 9)-(line 1787,col 61)",
            "(line 1788,col 9)-(line 1788,col 62)",
            "(line 1789,col 9)-(line 1789,col 63)",
            "(line 1790,col 9)-(line 1790,col 60)",
            "(line 1791,col 9)-(line 1791,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsInt()",
        "snippet": "    public void testContainsInt() {\n        int[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, 1));\n        array = new int[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, 0));\n        assertEquals(true, ArrayUtils.contains(array, 1));\n        assertEquals(true, ArrayUtils.contains(array, 2));\n        assertEquals(true, ArrayUtils.contains(array, 3));\n        assertEquals(false, ArrayUtils.contains(array, 99));\n    }",
        "begin_line": 1794,
        "end_line": 1803,
        "comment": "",
        "child_ranges": [
            "(line 1795,col 9)-(line 1795,col 27)",
            "(line 1796,col 9)-(line 1796,col 59)",
            "(line 1797,col 9)-(line 1797,col 44)",
            "(line 1798,col 9)-(line 1798,col 58)",
            "(line 1799,col 9)-(line 1799,col 58)",
            "(line 1800,col 9)-(line 1800,col 58)",
            "(line 1801,col 9)-(line 1801,col 58)",
            "(line 1802,col 9)-(line 1802,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShort()",
        "snippet": "    public void testIndexOfShort() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\n    }",
        "begin_line": 1806,
        "end_line": 1815,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1807,col 9)-(line 1807,col 29)",
            "(line 1808,col 9)-(line 1808,col 63)",
            "(line 1809,col 9)-(line 1809,col 46)",
            "(line 1810,col 9)-(line 1810,col 62)",
            "(line 1811,col 9)-(line 1811,col 62)",
            "(line 1812,col 9)-(line 1812,col 62)",
            "(line 1813,col 9)-(line 1813,col 62)",
            "(line 1814,col 9)-(line 1814,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShortWithStartIndex()",
        "snippet": "    public void testIndexOfShortWithStartIndex() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n    }",
        "begin_line": 1817,
        "end_line": 1828,
        "comment": "",
        "child_ranges": [
            "(line 1818,col 9)-(line 1818,col 29)",
            "(line 1819,col 9)-(line 1819,col 66)",
            "(line 1820,col 9)-(line 1820,col 46)",
            "(line 1821,col 9)-(line 1821,col 65)",
            "(line 1822,col 9)-(line 1822,col 66)",
            "(line 1823,col 9)-(line 1823,col 65)",
            "(line 1824,col 9)-(line 1824,col 65)",
            "(line 1825,col 9)-(line 1825,col 66)",
            "(line 1826,col 9)-(line 1826,col 67)",
            "(line 1827,col 9)-(line 1827,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShort()",
        "snippet": "    public void testLastIndexOfShort() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n    }",
        "begin_line": 1830,
        "end_line": 1839,
        "comment": "",
        "child_ranges": [
            "(line 1831,col 9)-(line 1831,col 29)",
            "(line 1832,col 9)-(line 1832,col 67)",
            "(line 1833,col 9)-(line 1833,col 46)",
            "(line 1834,col 9)-(line 1834,col 66)",
            "(line 1835,col 9)-(line 1835,col 66)",
            "(line 1836,col 9)-(line 1836,col 66)",
            "(line 1837,col 9)-(line 1837,col 66)",
            "(line 1838,col 9)-(line 1838,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShortWithStartIndex()",
        "snippet": "    public void testLastIndexOfShortWithStartIndex() {\n        short[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n    }",
        "begin_line": 1841,
        "end_line": 1852,
        "comment": "",
        "child_ranges": [
            "(line 1842,col 9)-(line 1842,col 29)",
            "(line 1843,col 9)-(line 1843,col 70)",
            "(line 1844,col 9)-(line 1844,col 46)",
            "(line 1845,col 9)-(line 1845,col 69)",
            "(line 1846,col 9)-(line 1846,col 69)",
            "(line 1847,col 9)-(line 1847,col 69)",
            "(line 1848,col 9)-(line 1848,col 70)",
            "(line 1849,col 9)-(line 1849,col 71)",
            "(line 1850,col 9)-(line 1850,col 68)",
            "(line 1851,col 9)-(line 1851,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsShort()",
        "snippet": "    public void testContainsShort() {\n        short[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (short) 1));\n        array = new short[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (short) 0));\n        assertEquals(true, ArrayUtils.contains(array, (short) 1));\n        assertEquals(true, ArrayUtils.contains(array, (short) 2));\n        assertEquals(true, ArrayUtils.contains(array, (short) 3));\n        assertEquals(false, ArrayUtils.contains(array, (short) 99));\n    }",
        "begin_line": 1854,
        "end_line": 1863,
        "comment": "",
        "child_ranges": [
            "(line 1855,col 9)-(line 1855,col 29)",
            "(line 1856,col 9)-(line 1856,col 67)",
            "(line 1857,col 9)-(line 1857,col 46)",
            "(line 1858,col 9)-(line 1858,col 66)",
            "(line 1859,col 9)-(line 1859,col 66)",
            "(line 1860,col 9)-(line 1860,col 66)",
            "(line 1861,col 9)-(line 1861,col 66)",
            "(line 1862,col 9)-(line 1862,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfChar()",
        "snippet": "    public void testIndexOfChar() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 'a'));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(0, ArrayUtils.indexOf(array, 'a'));\n        assertEquals(1, ArrayUtils.indexOf(array, 'b'));\n        assertEquals(2, ArrayUtils.indexOf(array, 'c'));\n        assertEquals(3, ArrayUtils.indexOf(array, 'd'));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'e'));\n    }",
        "begin_line": 1866,
        "end_line": 1875,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1867,col 9)-(line 1867,col 28)",
            "(line 1868,col 9)-(line 1868,col 57)",
            "(line 1869,col 9)-(line 1869,col 55)",
            "(line 1870,col 9)-(line 1870,col 56)",
            "(line 1871,col 9)-(line 1871,col 56)",
            "(line 1872,col 9)-(line 1872,col 56)",
            "(line 1873,col 9)-(line 1873,col 56)",
            "(line 1874,col 9)-(line 1874,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfCharWithStartIndex()",
        "snippet": "    public void testIndexOfCharWithStartIndex() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));\n        assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));\n        assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));\n    }",
        "begin_line": 1877,
        "end_line": 1888,
        "comment": "",
        "child_ranges": [
            "(line 1878,col 9)-(line 1878,col 28)",
            "(line 1879,col 9)-(line 1879,col 60)",
            "(line 1880,col 9)-(line 1880,col 55)",
            "(line 1881,col 9)-(line 1881,col 59)",
            "(line 1882,col 9)-(line 1882,col 60)",
            "(line 1883,col 9)-(line 1883,col 59)",
            "(line 1884,col 9)-(line 1884,col 59)",
            "(line 1885,col 9)-(line 1885,col 60)",
            "(line 1886,col 9)-(line 1886,col 60)",
            "(line 1887,col 9)-(line 1887,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfChar()",
        "snippet": "    public void testLastIndexOfChar() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n    }",
        "begin_line": 1890,
        "end_line": 1899,
        "comment": "",
        "child_ranges": [
            "(line 1891,col 9)-(line 1891,col 28)",
            "(line 1892,col 9)-(line 1892,col 61)",
            "(line 1893,col 9)-(line 1893,col 55)",
            "(line 1894,col 9)-(line 1894,col 60)",
            "(line 1895,col 9)-(line 1895,col 60)",
            "(line 1896,col 9)-(line 1896,col 60)",
            "(line 1897,col 9)-(line 1897,col 60)",
            "(line 1898,col 9)-(line 1898,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfCharWithStartIndex()",
        "snippet": "    public void testLastIndexOfCharWithStartIndex() {\n        char[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));\n    }",
        "begin_line": 1901,
        "end_line": 1912,
        "comment": "",
        "child_ranges": [
            "(line 1902,col 9)-(line 1902,col 28)",
            "(line 1903,col 9)-(line 1903,col 64)",
            "(line 1904,col 9)-(line 1904,col 55)",
            "(line 1905,col 9)-(line 1905,col 63)",
            "(line 1906,col 9)-(line 1906,col 63)",
            "(line 1907,col 9)-(line 1907,col 63)",
            "(line 1908,col 9)-(line 1908,col 64)",
            "(line 1909,col 9)-(line 1909,col 65)",
            "(line 1910,col 9)-(line 1910,col 61)",
            "(line 1911,col 9)-(line 1911,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsChar()",
        "snippet": "    public void testContainsChar() {\n        char[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, 'b'));\n        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n        assertEquals(true, ArrayUtils.contains(array, 'a'));\n        assertEquals(true, ArrayUtils.contains(array, 'b'));\n        assertEquals(true, ArrayUtils.contains(array, 'c'));\n        assertEquals(true, ArrayUtils.contains(array, 'd'));\n        assertEquals(false, ArrayUtils.contains(array, 'e'));\n    }",
        "begin_line": 1914,
        "end_line": 1923,
        "comment": "",
        "child_ranges": [
            "(line 1915,col 9)-(line 1915,col 28)",
            "(line 1916,col 9)-(line 1916,col 61)",
            "(line 1917,col 9)-(line 1917,col 55)",
            "(line 1918,col 9)-(line 1918,col 60)",
            "(line 1919,col 9)-(line 1919,col 60)",
            "(line 1920,col 9)-(line 1920,col 60)",
            "(line 1921,col 9)-(line 1921,col 60)",
            "(line 1922,col 9)-(line 1922,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByte()",
        "snippet": "    public void testIndexOfByte() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\n    }",
        "begin_line": 1926,
        "end_line": 1935,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1927,col 9)-(line 1927,col 28)",
            "(line 1928,col 9)-(line 1928,col 62)",
            "(line 1929,col 9)-(line 1929,col 45)",
            "(line 1930,col 9)-(line 1930,col 61)",
            "(line 1931,col 9)-(line 1931,col 61)",
            "(line 1932,col 9)-(line 1932,col 61)",
            "(line 1933,col 9)-(line 1933,col 61)",
            "(line 1934,col 9)-(line 1934,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByteWithStartIndex()",
        "snippet": "    public void testIndexOfByteWithStartIndex() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n    }",
        "begin_line": 1937,
        "end_line": 1948,
        "comment": "",
        "child_ranges": [
            "(line 1938,col 9)-(line 1938,col 28)",
            "(line 1939,col 9)-(line 1939,col 65)",
            "(line 1940,col 9)-(line 1940,col 45)",
            "(line 1941,col 9)-(line 1941,col 64)",
            "(line 1942,col 9)-(line 1942,col 65)",
            "(line 1943,col 9)-(line 1943,col 64)",
            "(line 1944,col 9)-(line 1944,col 64)",
            "(line 1945,col 9)-(line 1945,col 65)",
            "(line 1946,col 9)-(line 1946,col 66)",
            "(line 1947,col 9)-(line 1947,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByte()",
        "snippet": "    public void testLastIndexOfByte() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n    }",
        "begin_line": 1950,
        "end_line": 1959,
        "comment": "",
        "child_ranges": [
            "(line 1951,col 9)-(line 1951,col 28)",
            "(line 1952,col 9)-(line 1952,col 66)",
            "(line 1953,col 9)-(line 1953,col 45)",
            "(line 1954,col 9)-(line 1954,col 65)",
            "(line 1955,col 9)-(line 1955,col 65)",
            "(line 1956,col 9)-(line 1956,col 65)",
            "(line 1957,col 9)-(line 1957,col 65)",
            "(line 1958,col 9)-(line 1958,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex()",
        "snippet": "    public void testLastIndexOfByteWithStartIndex() {\n        byte[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n    }",
        "begin_line": 1961,
        "end_line": 1972,
        "comment": "",
        "child_ranges": [
            "(line 1962,col 9)-(line 1962,col 28)",
            "(line 1963,col 9)-(line 1963,col 69)",
            "(line 1964,col 9)-(line 1964,col 45)",
            "(line 1965,col 9)-(line 1965,col 68)",
            "(line 1966,col 9)-(line 1966,col 68)",
            "(line 1967,col 9)-(line 1967,col 68)",
            "(line 1968,col 9)-(line 1968,col 69)",
            "(line 1969,col 9)-(line 1969,col 70)",
            "(line 1970,col 9)-(line 1970,col 67)",
            "(line 1971,col 9)-(line 1971,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsByte()",
        "snippet": "    public void testContainsByte() {\n        byte[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (byte) 1));\n        array = new byte[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (byte) 0));\n        assertEquals(true, ArrayUtils.contains(array, (byte) 1));\n        assertEquals(true, ArrayUtils.contains(array, (byte) 2));\n        assertEquals(true, ArrayUtils.contains(array, (byte) 3));\n        assertEquals(false, ArrayUtils.contains(array, (byte) 99));\n    }",
        "begin_line": 1974,
        "end_line": 1983,
        "comment": "",
        "child_ranges": [
            "(line 1975,col 9)-(line 1975,col 28)",
            "(line 1976,col 9)-(line 1976,col 66)",
            "(line 1977,col 9)-(line 1977,col 45)",
            "(line 1978,col 9)-(line 1978,col 65)",
            "(line 1979,col 9)-(line 1979,col 65)",
            "(line 1980,col 9)-(line 1980,col 65)",
            "(line 1981,col 9)-(line 1981,col 65)",
            "(line 1982,col 9)-(line 1982,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDouble()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testIndexOfDouble() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n    }",
        "begin_line": 1986,
        "end_line": 1999,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1988,col 9)-(line 1988,col 30)",
            "(line 1989,col 9)-(line 1989,col 64)",
            "(line 1990,col 9)-(line 1990,col 30)",
            "(line 1991,col 9)-(line 1991,col 64)",
            "(line 1992,col 9)-(line 1992,col 47)",
            "(line 1993,col 9)-(line 1993,col 63)",
            "(line 1994,col 9)-(line 1994,col 63)",
            "(line 1995,col 9)-(line 1995,col 63)",
            "(line 1996,col 9)-(line 1996,col 63)",
            "(line 1997,col 9)-(line 1997,col 67)",
            "(line 1998,col 9)-(line 1998,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleTolerance()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testIndexOfDoubleTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));\n    }",
        "begin_line": 2001,
        "end_line": 2012,
        "comment": "",
        "child_ranges": [
            "(line 2003,col 9)-(line 2003,col 30)",
            "(line 2004,col 9)-(line 2004,col 76)",
            "(line 2005,col 9)-(line 2005,col 30)",
            "(line 2006,col 9)-(line 2006,col 76)",
            "(line 2007,col 9)-(line 2007,col 47)",
            "(line 2008,col 9)-(line 2008,col 77)",
            "(line 2009,col 9)-(line 2009,col 80)",
            "(line 2010,col 9)-(line 2010,col 80)",
            "(line 2011,col 9)-(line 2011,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndex()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testIndexOfDoubleWithStartIndex() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n    }",
        "begin_line": 2014,
        "end_line": 2027,
        "comment": "",
        "child_ranges": [
            "(line 2016,col 9)-(line 2016,col 30)",
            "(line 2017,col 9)-(line 2017,col 67)",
            "(line 2018,col 9)-(line 2018,col 30)",
            "(line 2019,col 9)-(line 2019,col 67)",
            "(line 2020,col 9)-(line 2020,col 47)",
            "(line 2021,col 9)-(line 2021,col 66)",
            "(line 2022,col 9)-(line 2022,col 67)",
            "(line 2023,col 9)-(line 2023,col 66)",
            "(line 2024,col 9)-(line 2024,col 66)",
            "(line 2025,col 9)-(line 2025,col 68)",
            "(line 2026,col 9)-(line 2026,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testIndexOfDoubleWithStartIndexTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));\n        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));\n        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));\n        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));\n        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));\n        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));\n    }",
        "begin_line": 2029,
        "end_line": 2044,
        "comment": "",
        "child_ranges": [
            "(line 2031,col 9)-(line 2031,col 30)",
            "(line 2032,col 9)-(line 2032,col 79)",
            "(line 2033,col 9)-(line 2033,col 30)",
            "(line 2034,col 9)-(line 2034,col 79)",
            "(line 2035,col 9)-(line 2035,col 47)",
            "(line 2036,col 9)-(line 2036,col 82)",
            "(line 2037,col 9)-(line 2037,col 80)",
            "(line 2038,col 9)-(line 2038,col 80)",
            "(line 2039,col 9)-(line 2039,col 83)",
            "(line 2040,col 9)-(line 2040,col 83)",
            "(line 2041,col 9)-(line 2041,col 92)",
            "(line 2042,col 9)-(line 2042,col 84)",
            "(line 2043,col 9)-(line 2043,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDouble()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testLastIndexOfDouble() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n    }",
        "begin_line": 2046,
        "end_line": 2058,
        "comment": "",
        "child_ranges": [
            "(line 2048,col 9)-(line 2048,col 30)",
            "(line 2049,col 9)-(line 2049,col 68)",
            "(line 2050,col 9)-(line 2050,col 30)",
            "(line 2051,col 9)-(line 2051,col 68)",
            "(line 2052,col 9)-(line 2052,col 47)",
            "(line 2053,col 9)-(line 2053,col 67)",
            "(line 2054,col 9)-(line 2054,col 67)",
            "(line 2055,col 9)-(line 2055,col 67)",
            "(line 2056,col 9)-(line 2056,col 67)",
            "(line 2057,col 9)-(line 2057,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleTolerance()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testLastIndexOfDoubleTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));\n    }",
        "begin_line": 2060,
        "end_line": 2071,
        "comment": "",
        "child_ranges": [
            "(line 2062,col 9)-(line 2062,col 30)",
            "(line 2063,col 9)-(line 2063,col 80)",
            "(line 2064,col 9)-(line 2064,col 30)",
            "(line 2065,col 9)-(line 2065,col 80)",
            "(line 2066,col 9)-(line 2066,col 47)",
            "(line 2067,col 9)-(line 2067,col 81)",
            "(line 2068,col 9)-(line 2068,col 84)",
            "(line 2069,col 9)-(line 2069,col 84)",
            "(line 2070,col 9)-(line 2070,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testLastIndexOfDoubleWithStartIndex() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n    }",
        "begin_line": 2073,
        "end_line": 2087,
        "comment": "",
        "child_ranges": [
            "(line 2075,col 9)-(line 2075,col 30)",
            "(line 2076,col 9)-(line 2076,col 71)",
            "(line 2077,col 9)-(line 2077,col 30)",
            "(line 2078,col 9)-(line 2078,col 71)",
            "(line 2079,col 9)-(line 2079,col 47)",
            "(line 2080,col 9)-(line 2080,col 70)",
            "(line 2081,col 9)-(line 2081,col 70)",
            "(line 2082,col 9)-(line 2082,col 70)",
            "(line 2083,col 9)-(line 2083,col 71)",
            "(line 2084,col 9)-(line 2084,col 72)",
            "(line 2085,col 9)-(line 2085,col 69)",
            "(line 2086,col 9)-(line 2086,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testLastIndexOfDoubleWithStartIndexTolerance() {\n        double[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n        array = new double[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n        array = new double[] { (double) 3 };\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));\n    }",
        "begin_line": 2089,
        "end_line": 2104,
        "comment": "",
        "child_ranges": [
            "(line 2091,col 9)-(line 2091,col 30)",
            "(line 2092,col 9)-(line 2092,col 83)",
            "(line 2093,col 9)-(line 2093,col 30)",
            "(line 2094,col 9)-(line 2094,col 83)",
            "(line 2095,col 9)-(line 2095,col 44)",
            "(line 2096,col 9)-(line 2096,col 83)",
            "(line 2097,col 9)-(line 2097,col 47)",
            "(line 2098,col 9)-(line 2098,col 85)",
            "(line 2099,col 9)-(line 2099,col 84)",
            "(line 2100,col 9)-(line 2100,col 87)",
            "(line 2101,col 9)-(line 2101,col 98)",
            "(line 2102,col 9)-(line 2102,col 107)",
            "(line 2103,col 9)-(line 2103,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsDouble()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testContainsDouble() {\n        double[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (double) 1));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (double) 0));\n        assertEquals(true, ArrayUtils.contains(array, (double) 1));\n        assertEquals(true, ArrayUtils.contains(array, (double) 2));\n        assertEquals(true, ArrayUtils.contains(array, (double) 3));\n        assertEquals(false, ArrayUtils.contains(array, (double) 99));\n    }",
        "begin_line": 2106,
        "end_line": 2116,
        "comment": "",
        "child_ranges": [
            "(line 2108,col 9)-(line 2108,col 30)",
            "(line 2109,col 9)-(line 2109,col 68)",
            "(line 2110,col 9)-(line 2110,col 47)",
            "(line 2111,col 9)-(line 2111,col 67)",
            "(line 2112,col 9)-(line 2112,col 67)",
            "(line 2113,col 9)-(line 2113,col 67)",
            "(line 2114,col 9)-(line 2114,col 67)",
            "(line 2115,col 9)-(line 2115,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleTolerance()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testContainsDoubleTolerance() {\n        double[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n        array = new double[] { 0, 1, 2, 3, 0 };\n        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n    }",
        "begin_line": 2118,
        "end_line": 2127,
        "comment": "",
        "child_ranges": [
            "(line 2120,col 9)-(line 2120,col 30)",
            "(line 2121,col 9)-(line 2121,col 80)",
            "(line 2122,col 9)-(line 2122,col 47)",
            "(line 2123,col 9)-(line 2123,col 85)",
            "(line 2124,col 9)-(line 2124,col 85)",
            "(line 2125,col 9)-(line 2125,col 84)",
            "(line 2126,col 9)-(line 2126,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloat()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testIndexOfFloat() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));\n        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));\n        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));\n    }",
        "begin_line": 2130,
        "end_line": 2142,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2132,col 9)-(line 2132,col 29)",
            "(line 2133,col 9)-(line 2133,col 63)",
            "(line 2134,col 9)-(line 2134,col 29)",
            "(line 2135,col 9)-(line 2135,col 63)",
            "(line 2136,col 9)-(line 2136,col 46)",
            "(line 2137,col 9)-(line 2137,col 62)",
            "(line 2138,col 9)-(line 2138,col 62)",
            "(line 2139,col 9)-(line 2139,col 62)",
            "(line 2140,col 9)-(line 2140,col 62)",
            "(line 2141,col 9)-(line 2141,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloatWithStartIndex()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testIndexOfFloatWithStartIndex() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));\n        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));\n        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n    }",
        "begin_line": 2144,
        "end_line": 2158,
        "comment": "",
        "child_ranges": [
            "(line 2146,col 9)-(line 2146,col 29)",
            "(line 2147,col 9)-(line 2147,col 66)",
            "(line 2148,col 9)-(line 2148,col 29)",
            "(line 2149,col 9)-(line 2149,col 66)",
            "(line 2150,col 9)-(line 2150,col 46)",
            "(line 2151,col 9)-(line 2151,col 65)",
            "(line 2152,col 9)-(line 2152,col 66)",
            "(line 2153,col 9)-(line 2153,col 65)",
            "(line 2154,col 9)-(line 2154,col 65)",
            "(line 2155,col 9)-(line 2155,col 66)",
            "(line 2156,col 9)-(line 2156,col 67)",
            "(line 2157,col 9)-(line 2157,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfFloat()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testLastIndexOfFloat() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));\n        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n    }",
        "begin_line": 2160,
        "end_line": 2172,
        "comment": "",
        "child_ranges": [
            "(line 2162,col 9)-(line 2162,col 29)",
            "(line 2163,col 9)-(line 2163,col 67)",
            "(line 2164,col 9)-(line 2164,col 29)",
            "(line 2165,col 9)-(line 2165,col 67)",
            "(line 2166,col 9)-(line 2166,col 46)",
            "(line 2167,col 9)-(line 2167,col 66)",
            "(line 2168,col 9)-(line 2168,col 66)",
            "(line 2169,col 9)-(line 2169,col 66)",
            "(line 2170,col 9)-(line 2170,col 66)",
            "(line 2171,col 9)-(line 2171,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfFloatWithStartIndex()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testLastIndexOfFloatWithStartIndex() {\n        float[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        array = new float[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));\n        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n    }",
        "begin_line": 2174,
        "end_line": 2188,
        "comment": "",
        "child_ranges": [
            "(line 2176,col 9)-(line 2176,col 29)",
            "(line 2177,col 9)-(line 2177,col 70)",
            "(line 2178,col 9)-(line 2178,col 29)",
            "(line 2179,col 9)-(line 2179,col 70)",
            "(line 2180,col 9)-(line 2180,col 46)",
            "(line 2181,col 9)-(line 2181,col 69)",
            "(line 2182,col 9)-(line 2182,col 69)",
            "(line 2183,col 9)-(line 2183,col 69)",
            "(line 2184,col 9)-(line 2184,col 70)",
            "(line 2185,col 9)-(line 2185,col 71)",
            "(line 2186,col 9)-(line 2186,col 68)",
            "(line 2187,col 9)-(line 2187,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsFloat()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testContainsFloat() {\n        float[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, (float) 1));\n        array = new float[] { 0, 1, 2, 3, 0 };\n        assertEquals(true, ArrayUtils.contains(array, (float) 0));\n        assertEquals(true, ArrayUtils.contains(array, (float) 1));\n        assertEquals(true, ArrayUtils.contains(array, (float) 2));\n        assertEquals(true, ArrayUtils.contains(array, (float) 3));\n        assertEquals(false, ArrayUtils.contains(array, (float) 99));\n    }",
        "begin_line": 2190,
        "end_line": 2200,
        "comment": "",
        "child_ranges": [
            "(line 2192,col 9)-(line 2192,col 29)",
            "(line 2193,col 9)-(line 2193,col 67)",
            "(line 2194,col 9)-(line 2194,col 46)",
            "(line 2195,col 9)-(line 2195,col 66)",
            "(line 2196,col 9)-(line 2196,col 66)",
            "(line 2197,col 9)-(line 2197,col 66)",
            "(line 2198,col 9)-(line 2198,col 66)",
            "(line 2199,col 9)-(line 2199,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean()",
        "snippet": "    public void testIndexOfBoolean() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, true));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, true));\n        array = new boolean[] { true, false, true };\n        assertEquals(0, ArrayUtils.indexOf(array, true));\n        assertEquals(1, ArrayUtils.indexOf(array, false));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.indexOf(array, false));\n    }",
        "begin_line": 2203,
        "end_line": 2213,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2204,col 9)-(line 2204,col 31)",
            "(line 2205,col 9)-(line 2205,col 58)",
            "(line 2206,col 9)-(line 2206,col 31)",
            "(line 2207,col 9)-(line 2207,col 58)",
            "(line 2208,col 9)-(line 2208,col 52)",
            "(line 2209,col 9)-(line 2209,col 57)",
            "(line 2210,col 9)-(line 2210,col 58)",
            "(line 2211,col 9)-(line 2211,col 45)",
            "(line 2212,col 9)-(line 2212,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex()",
        "snippet": "    public void testIndexOfBooleanWithStartIndex() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n        array = new boolean[] { true, false, true };\n        assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\n        assertEquals(1, ArrayUtils.indexOf(array, false, 0));\n        assertEquals(1, ArrayUtils.indexOf(array, false, -1));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\n        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\n    }",
        "begin_line": 2215,
        "end_line": 2228,
        "comment": "",
        "child_ranges": [
            "(line 2216,col 9)-(line 2216,col 31)",
            "(line 2217,col 9)-(line 2217,col 61)",
            "(line 2218,col 9)-(line 2218,col 31)",
            "(line 2219,col 9)-(line 2219,col 61)",
            "(line 2220,col 9)-(line 2220,col 52)",
            "(line 2221,col 9)-(line 2221,col 60)",
            "(line 2222,col 9)-(line 2222,col 62)",
            "(line 2223,col 9)-(line 2223,col 61)",
            "(line 2224,col 9)-(line 2224,col 62)",
            "(line 2225,col 9)-(line 2225,col 45)",
            "(line 2226,col 9)-(line 2226,col 62)",
            "(line 2227,col 9)-(line 2227,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean()",
        "snippet": "    public void testLastIndexOfBoolean() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n        array = new boolean[] { true, false, true };\n        assertEquals(2, ArrayUtils.lastIndexOf(array, true));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, false));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\n    }",
        "begin_line": 2230,
        "end_line": 2240,
        "comment": "",
        "child_ranges": [
            "(line 2231,col 9)-(line 2231,col 31)",
            "(line 2232,col 9)-(line 2232,col 62)",
            "(line 2233,col 9)-(line 2233,col 31)",
            "(line 2234,col 9)-(line 2234,col 62)",
            "(line 2235,col 9)-(line 2235,col 52)",
            "(line 2236,col 9)-(line 2236,col 61)",
            "(line 2237,col 9)-(line 2237,col 62)",
            "(line 2238,col 9)-(line 2238,col 45)",
            "(line 2239,col 9)-(line 2239,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex()",
        "snippet": "    public void testLastIndexOfBooleanWithStartIndex() {\n        boolean[] array = null;\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n        array = new boolean[0];\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n        array = new boolean[] { true, false, true };\n        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\n        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\n        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n        array = new boolean[] { true, true };\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\n        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n    }",
        "begin_line": 2242,
        "end_line": 2255,
        "comment": "",
        "child_ranges": [
            "(line 2243,col 9)-(line 2243,col 31)",
            "(line 2244,col 9)-(line 2244,col 65)",
            "(line 2245,col 9)-(line 2245,col 31)",
            "(line 2246,col 9)-(line 2246,col 65)",
            "(line 2247,col 9)-(line 2247,col 52)",
            "(line 2248,col 9)-(line 2248,col 64)",
            "(line 2249,col 9)-(line 2249,col 64)",
            "(line 2250,col 9)-(line 2250,col 65)",
            "(line 2251,col 9)-(line 2251,col 66)",
            "(line 2252,col 9)-(line 2252,col 45)",
            "(line 2253,col 9)-(line 2253,col 66)",
            "(line 2254,col 9)-(line 2254,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean()",
        "snippet": "    public void testContainsBoolean() {\n        boolean[] array = null;\n        assertEquals(false, ArrayUtils.contains(array, true));\n        array = new boolean[] { true, false, true };\n        assertEquals(true, ArrayUtils.contains(array, true));\n        assertEquals(true, ArrayUtils.contains(array, false));\n        array = new boolean[] { true, true };\n        assertEquals(true, ArrayUtils.contains(array, true));\n        assertEquals(false, ArrayUtils.contains(array, false));\n    }",
        "begin_line": 2257,
        "end_line": 2266,
        "comment": "",
        "child_ranges": [
            "(line 2258,col 9)-(line 2258,col 31)",
            "(line 2259,col 9)-(line 2259,col 62)",
            "(line 2260,col 9)-(line 2260,col 52)",
            "(line 2261,col 9)-(line 2261,col 61)",
            "(line 2262,col 9)-(line 2262,col 62)",
            "(line 2263,col 9)-(line 2263,col 45)",
            "(line 2264,col 9)-(line 2264,col 61)",
            "(line 2265,col 9)-(line 2265,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean()",
        "snippet": "    public void testToPrimitive_boolean() {\n        final Boolean[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));\n        assertTrue(Arrays.equals(\n            new boolean[] {true, false, true},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2270,
        "end_line": 2283,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2271,col 9)-(line 2271,col 33)",
            "(line 2272,col 9)-(line 2272,col 54)",
            "(line 2273,col 9)-(line 2273,col 91)",
            "(line 2274,col 9)-(line 2277,col 10)",
            "(line 2279,col 9)-(line 2282,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean_boolean()",
        "snippet": "    public void testToPrimitive_boolean_boolean() {\n        assertEquals(null, ArrayUtils.toPrimitive(null, false));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));\n        assertTrue(Arrays.equals(\n            new boolean[] {true, false, true},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false))\n        );\n        assertTrue(Arrays.equals(\n            new boolean[] {true, false, false},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false))\n        );\n        assertTrue(Arrays.equals(\n            new boolean[] {true, true, false},\n            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true))\n        );\n    }",
        "begin_line": 2285,
        "end_line": 2300,
        "comment": "",
        "child_ranges": [
            "(line 2286,col 9)-(line 2286,col 64)",
            "(line 2287,col 9)-(line 2287,col 98)",
            "(line 2288,col 9)-(line 2291,col 10)",
            "(line 2292,col 9)-(line 2295,col 10)",
            "(line 2296,col 9)-(line 2299,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_boolean()",
        "snippet": "    public void testToObject_boolean() {\n        final boolean[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\n        assertTrue(Arrays.equals(\n            new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},\n            ArrayUtils.toObject(new boolean[] {true, false, true}))\n        );\n    }",
        "begin_line": 2302,
        "end_line": 2310,
        "comment": "",
        "child_ranges": [
            "(line 2303,col 9)-(line 2303,col 33)",
            "(line 2304,col 9)-(line 2304,col 51)",
            "(line 2305,col 9)-(line 2305,col 95)",
            "(line 2306,col 9)-(line 2309,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char()",
        "snippet": "    public void testToPrimitive_char() {\n        final Character[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        \n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));\n        \n        assertTrue(Arrays.equals(\n            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n                new Character(Character.MAX_VALUE), new Character('0')}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2314,
        "end_line": 2330,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2315,col 9)-(line 2315,col 35)",
            "(line 2316,col 9)-(line 2316,col 54)",
            "(line 2318,col 9)-(line 2318,col 90)",
            "(line 2320,col 9)-(line 2324,col 10)",
            "(line 2326,col 9)-(line 2329,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char_char()",
        "snippet": "    public void testToPrimitive_char_char() {\n        final Character[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE));\n        \n        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, \n            ArrayUtils.toPrimitive(new Character[0], (char)0));\n        \n        assertTrue(Arrays.equals(\n            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n                new Character(Character.MAX_VALUE), new Character('0')}, \n                Character.MIN_VALUE))\n        );\n        \n        assertTrue(Arrays.equals(\n            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n                new Character('0')}, Character.MAX_VALUE))\n        );\n    }",
        "begin_line": 2332,
        "end_line": 2351,
        "comment": "",
        "child_ranges": [
            "(line 2333,col 9)-(line 2333,col 35)",
            "(line 2334,col 9)-(line 2334,col 75)",
            "(line 2336,col 9)-(line 2337,col 63)",
            "(line 2339,col 9)-(line 2344,col 10)",
            "(line 2346,col 9)-(line 2350,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_char()",
        "snippet": "    public void testToObject_char() {\n        final char[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        \n        assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \n            ArrayUtils.toObject(new char[0]));\n        \n        assertTrue(Arrays.equals(\n            new Character[] {new Character(Character.MIN_VALUE), \n                new Character(Character.MAX_VALUE), new Character('0')},\n                ArrayUtils.toObject(new char[] {Character.MIN_VALUE, Character.MAX_VALUE, \n                '0'} ))\n        );\n    }",
        "begin_line": 2353,
        "end_line": 2366,
        "comment": "",
        "child_ranges": [
            "(line 2354,col 9)-(line 2354,col 30)",
            "(line 2355,col 9)-(line 2355,col 51)",
            "(line 2357,col 9)-(line 2358,col 46)",
            "(line 2360,col 9)-(line 2365,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte()",
        "snippet": "    public void testToPrimitive_byte() {\n        final Byte[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        \n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));\n        \n        assertTrue(Arrays.equals(\n            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2370,
        "end_line": 2386,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2371,col 9)-(line 2371,col 30)",
            "(line 2372,col 9)-(line 2372,col 54)",
            "(line 2374,col 9)-(line 2374,col 85)",
            "(line 2376,col 9)-(line 2380,col 10)",
            "(line 2382,col 9)-(line 2385,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte_byte()",
        "snippet": "    public void testToPrimitive_byte_byte() {\n        final Byte[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\n        \n        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, \n            ArrayUtils.toPrimitive(new Byte[0], (byte)1));\n        \n        assertTrue(Arrays.equals(\n            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, \n                Byte.MIN_VALUE))\n        );\n        \n        assertTrue(Arrays.equals(\n            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null, \n                Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE))\n        );\n    }",
        "begin_line": 2388,
        "end_line": 2407,
        "comment": "",
        "child_ranges": [
            "(line 2389,col 9)-(line 2389,col 30)",
            "(line 2390,col 9)-(line 2390,col 70)",
            "(line 2392,col 9)-(line 2393,col 58)",
            "(line 2395,col 9)-(line 2400,col 10)",
            "(line 2402,col 9)-(line 2406,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_byte()",
        "snippet": "    public void testToObject_byte() {\n        final byte[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        \n        assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, \n            ArrayUtils.toObject(new byte[0]));\n        \n        assertTrue(Arrays.equals(\n            new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},\n                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, \n                (byte)9999999}))\n        );\n    }",
        "begin_line": 2409,
        "end_line": 2422,
        "comment": "",
        "child_ranges": [
            "(line 2410,col 9)-(line 2410,col 30)",
            "(line 2411,col 9)-(line 2411,col 51)",
            "(line 2413,col 9)-(line 2414,col 46)",
            "(line 2416,col 9)-(line 2421,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short()",
        "snippet": "    public void testToPrimitive_short() {\n        final Short[] b = null;\n        assertEquals(null, ArrayUtils.toPrimitive(b));\n        \n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));\n        \n        assertTrue(Arrays.equals(\n            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n                new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n        );\n\n        try {\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 2426,
        "end_line": 2442,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2427,col 9)-(line 2427,col 31)",
            "(line 2428,col 9)-(line 2428,col 54)",
            "(line 2430,col 9)-(line 2430,col 87)",
            "(line 2432,col 9)-(line 2436,col 10)",
            "(line 2438,col 9)-(line 2441,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short_short()",
        "snippet": "    public void testToPrimitive_short_short() {\n        final Short[] s = null;\n        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\n        \n        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], \n        Short.MIN_VALUE));\n        \n        assertTrue(Arrays.equals(\n            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n                new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n        );\n        \n        assertTrue(Arrays.equals(\n            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n                new Short((short)9999999)}, Short.MAX_VALUE))\n        );\n    }",
        "begin_line": 2444,
        "end_line": 2462,
        "comment": "",
        "child_ranges": [
            "(line 2445,col 9)-(line 2445,col 31)",
            "(line 2446,col 9)-(line 2446,col 71)",
            "(line 2448,col 9)-(line 2449,col 26)",
            "(line 2451,col 9)-(line 2455,col 10)",
            "(line 2457,col 9)-(line 2461,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_short()",
        "snippet": "    public void testToObject_short() {\n        final short[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n        \n        assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, \n        ArrayUtils.toObject(new short[0]));\n        \n        assertTrue(Arrays.equals(\n            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n                new Short((short)9999999)},\n            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, \n                (short)9999999}))\n        );\n    }",
        "begin_line": 2464,
        "end_line": 2477,
        "comment": "",
        "child_ranges": [
            "(line 2465,col 9)-(line 2465,col 31)",
            "(line 2466,col 9)-(line 2466,col 51)",
            "(line 2468,col 9)-(line 2469,col 43)",
            "(line 2471,col 9)-(line 2476,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int()",
        "snippet": "     public void testToPrimitive_int() {\n         final Integer[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n         assertTrue(Arrays.equals(\n             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n                 new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2481,
        "end_line": 2495,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2482,col 10)-(line 2482,col 34)",
            "(line 2483,col 10)-(line 2483,col 55)",
            "(line 2484,col 10)-(line 2484,col 88)",
            "(line 2485,col 10)-(line 2489,col 11)",
            "(line 2491,col 10)-(line 2494,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int_int()",
        "snippet": "     public void testToPrimitive_int_int() {\n         final Long[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\n         assertSame(ArrayUtils.EMPTY_INT_ARRAY, \n         ArrayUtils.toPrimitive(new Integer[0], 1));\n         assertTrue(Arrays.equals(\n             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n                 new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n         assertTrue(Arrays.equals(\n             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n                 null, new Integer(9999999)}, Integer.MAX_VALUE))\n         );\n     }",
        "begin_line": 2497,
        "end_line": 2511,
        "comment": "",
        "child_ranges": [
            "(line 2498,col 10)-(line 2498,col 31)",
            "(line 2499,col 10)-(line 2499,col 74)",
            "(line 2500,col 10)-(line 2501,col 52)",
            "(line 2502,col 10)-(line 2505,col 76)",
            "(line 2506,col 10)-(line 2510,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_intNull()",
        "snippet": "    public void testToPrimitive_intNull() {\n        Integer[] iArray = null;\n        assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));\n    }",
        "begin_line": 2513,
        "end_line": 2516,
        "comment": "",
        "child_ranges": [
            "(line 2514,col 9)-(line 2514,col 32)",
            "(line 2515,col 9)-(line 2515,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_int()",
        "snippet": "    public void testToObject_int() {\n        final int[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,\n            ArrayUtils.toObject(new int[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Integer[] {\n                    new Integer(Integer.MIN_VALUE),\n                    new Integer(Integer.MAX_VALUE),\n                    new Integer(9999999)},\n            ArrayUtils.toObject(\n                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2518,
        "end_line": 2534,
        "comment": "",
        "child_ranges": [
            "(line 2519,col 9)-(line 2519,col 29)",
            "(line 2520,col 9)-(line 2520,col 51)",
            "(line 2522,col 9)-(line 2524,col 45)",
            "(line 2526,col 9)-(line 2533,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long()",
        "snippet": "     public void testToPrimitive_long() {\n         final Long[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         \n         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n            ArrayUtils.toPrimitive(new Long[0]));\n         \n         assertTrue(Arrays.equals(\n             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n                 new Long(Long.MAX_VALUE), new Long(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2538,
        "end_line": 2555,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2539,col 10)-(line 2539,col 31)",
            "(line 2540,col 10)-(line 2540,col 55)",
            "(line 2542,col 10)-(line 2543,col 49)",
            "(line 2545,col 10)-(line 2549,col 11)",
            "(line 2551,col 10)-(line 2554,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long_long()",
        "snippet": "     public void testToPrimitive_long_long() {\n         final Long[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\n         \n         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n         ArrayUtils.toPrimitive(new Long[0], 1));\n         \n         assertTrue(Arrays.equals(\n             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n                 new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n         \n         assertTrue(Arrays.equals(\n             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n                 null, new Long(9999999)}, Long.MAX_VALUE))\n         );\n     }",
        "begin_line": 2557,
        "end_line": 2574,
        "comment": "",
        "child_ranges": [
            "(line 2558,col 10)-(line 2558,col 31)",
            "(line 2559,col 10)-(line 2559,col 71)",
            "(line 2561,col 10)-(line 2562,col 49)",
            "(line 2564,col 10)-(line 2567,col 67)",
            "(line 2569,col 10)-(line 2573,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_long()",
        "snippet": "    public void testToObject_long() {\n        final long[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,\n            ArrayUtils.toObject(new long[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Long[] {\n                    new Long(Long.MIN_VALUE),\n                    new Long(Long.MAX_VALUE),\n                    new Long(9999999)},\n            ArrayUtils.toObject(\n                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2576,
        "end_line": 2592,
        "comment": "",
        "child_ranges": [
            "(line 2577,col 9)-(line 2577,col 30)",
            "(line 2578,col 9)-(line 2578,col 51)",
            "(line 2580,col 9)-(line 2582,col 46)",
            "(line 2584,col 9)-(line 2591,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float()",
        "snippet": "     public void testToPrimitive_float() {\n         final Float[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         \n         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n            ArrayUtils.toPrimitive(new Float[0]));\n         \n         assertTrue(Arrays.equals(\n             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n                 new Float(Float.MAX_VALUE), new Float(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2596,
        "end_line": 2613,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2597,col 10)-(line 2597,col 32)",
            "(line 2598,col 10)-(line 2598,col 55)",
            "(line 2600,col 10)-(line 2601,col 50)",
            "(line 2603,col 10)-(line 2607,col 11)",
            "(line 2609,col 10)-(line 2612,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float_float()",
        "snippet": "     public void testToPrimitive_float_float() {\n         final Float[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\n         \n         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n         ArrayUtils.toPrimitive(new Float[0], 1));\n         \n         assertTrue(Arrays.equals(\n             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n                 new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n         \n         assertTrue(Arrays.equals(\n             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n                 null, new Float(9999999)}, Float.MAX_VALUE))\n         );\n     }",
        "begin_line": 2615,
        "end_line": 2632,
        "comment": "",
        "child_ranges": [
            "(line 2616,col 10)-(line 2616,col 32)",
            "(line 2617,col 10)-(line 2617,col 72)",
            "(line 2619,col 10)-(line 2620,col 50)",
            "(line 2622,col 10)-(line 2625,col 70)",
            "(line 2627,col 10)-(line 2631,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_float()",
        "snippet": "    public void testToObject_float() {\n        final float[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,\n            ArrayUtils.toObject(new float[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Float[] {\n                    new Float(Float.MIN_VALUE),\n                    new Float(Float.MAX_VALUE),\n                    new Float(9999999)},\n            ArrayUtils.toObject(\n                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2634,
        "end_line": 2650,
        "comment": "",
        "child_ranges": [
            "(line 2635,col 9)-(line 2635,col 31)",
            "(line 2636,col 9)-(line 2636,col 51)",
            "(line 2638,col 9)-(line 2640,col 47)",
            "(line 2642,col 9)-(line 2649,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double()",
        "snippet": "     public void testToPrimitive_double() {\n         final Double[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         \n         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n            ArrayUtils.toPrimitive(new Double[0]));\n         \n         assertTrue(Arrays.equals(\n             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n                 new Double(Double.MAX_VALUE), new Double(9999999)}))\n         );\n\n         try {\n             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }",
        "begin_line": 2654,
        "end_line": 2671,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 2655,col 10)-(line 2655,col 33)",
            "(line 2656,col 10)-(line 2656,col 55)",
            "(line 2658,col 10)-(line 2659,col 51)",
            "(line 2661,col 10)-(line 2665,col 11)",
            "(line 2667,col 10)-(line 2670,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double_double()",
        "snippet": "     public void testToPrimitive_double_double() {\n         final Double[] l = null;\n         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\n         \n         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n         ArrayUtils.toPrimitive(new Double[0], 1));\n         \n         assertTrue(Arrays.equals(\n             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n                 new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n         \n         assertTrue(Arrays.equals(\n             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n                 null, new Double(9999999)}, Double.MAX_VALUE))\n         );\n     }",
        "begin_line": 2673,
        "end_line": 2690,
        "comment": "",
        "child_ranges": [
            "(line 2674,col 10)-(line 2674,col 33)",
            "(line 2675,col 10)-(line 2675,col 73)",
            "(line 2677,col 10)-(line 2678,col 51)",
            "(line 2680,col 10)-(line 2683,col 73)",
            "(line 2685,col 10)-(line 2689,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testToObject_double()",
        "snippet": "    public void testToObject_double() {\n        final double[] b = null;\n        assertEquals(null, ArrayUtils.toObject(b));\n    \n        assertSame(\n            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,\n            ArrayUtils.toObject(new double[0]));\n    \n        assertTrue(\n            Arrays.equals(\n                new Double[] {\n                    new Double(Double.MIN_VALUE),\n                    new Double(Double.MAX_VALUE),\n                    new Double(9999999)},\n            ArrayUtils.toObject(\n                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n    }",
        "begin_line": 2692,
        "end_line": 2708,
        "comment": "",
        "child_ranges": [
            "(line 2693,col 9)-(line 2693,col 32)",
            "(line 2694,col 9)-(line 2694,col 51)",
            "(line 2696,col 9)-(line 2698,col 48)",
            "(line 2700,col 9)-(line 2707,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyObject()",
        "snippet": "    public void testIsEmptyObject() {\n        Object[] emptyArray = new Object[] {};\n        Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n        assertEquals(true, ArrayUtils.isEmpty((Object[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));\n    }",
        "begin_line": 2714,
        "end_line": 2720,
        "comment": "\n     * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.\n     ",
        "child_ranges": [
            "(line 2715,col 9)-(line 2715,col 46)",
            "(line 2716,col 9)-(line 2716,col 70)",
            "(line 2717,col 9)-(line 2717,col 63)",
            "(line 2718,col 9)-(line 2718,col 59)",
            "(line 2719,col 9)-(line 2719,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives()",
        "snippet": "    public void testIsEmptyPrimitives() {\n        long[] emptyLongArray = new long[] {};\n        long[] notEmptyLongArray = new long[] { 1L };\n        assertEquals(true, ArrayUtils.isEmpty((long[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));\n\n        int[] emptyIntArray = new int[] {};\n        int[] notEmptyIntArray = new int[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((int[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));\n\n        short[] emptyShortArray = new short[] {};\n        short[] notEmptyShortArray = new short[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((short[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));\n\n        char[] emptyCharArray = new char[] {};\n        char[] notEmptyCharArray = new char[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((char[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));\n\n        byte[] emptyByteArray = new byte[] {};\n        byte[] notEmptyByteArray = new byte[] { 1 };\n        assertEquals(true, ArrayUtils.isEmpty((byte[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));\n\n        double[] emptyDoubleArray = new double[] {};\n        double[] notEmptyDoubleArray = new double[] { 1.0 };\n        assertEquals(true, ArrayUtils.isEmpty((double[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));\n\n        float[] emptyFloatArray = new float[] {};\n        float[] notEmptyFloatArray = new float[] { 1.0F };\n        assertEquals(true, ArrayUtils.isEmpty((float[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));\n\n        boolean[] emptyBooleanArray = new boolean[] {};\n        boolean[] notEmptyBooleanArray = new boolean[] { true };\n        assertEquals(true, ArrayUtils.isEmpty((boolean[])null));\n        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));\n        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n    }",
        "begin_line": 2732,
        "end_line": 2780,
        "comment": "\n     * Tests for {@link ArrayUtils#isEmpty(long[])},\n     * {@link ArrayUtils#isEmpty(int[])},\n     * {@link ArrayUtils#isEmpty(short[])},\n     * {@link ArrayUtils#isEmpty(char[])},\n     * {@link ArrayUtils#isEmpty(byte[])},\n     * {@link ArrayUtils#isEmpty(double[])},\n     * {@link ArrayUtils#isEmpty(float[])} and\n     * {@link ArrayUtils#isEmpty(boolean[])}.\n     ",
        "child_ranges": [
            "(line 2733,col 9)-(line 2733,col 46)",
            "(line 2734,col 9)-(line 2734,col 53)",
            "(line 2735,col 9)-(line 2735,col 61)",
            "(line 2736,col 9)-(line 2736,col 63)",
            "(line 2737,col 9)-(line 2737,col 67)",
            "(line 2739,col 9)-(line 2739,col 43)",
            "(line 2740,col 9)-(line 2740,col 49)",
            "(line 2741,col 9)-(line 2741,col 60)",
            "(line 2742,col 9)-(line 2742,col 62)",
            "(line 2743,col 9)-(line 2743,col 66)",
            "(line 2745,col 9)-(line 2745,col 49)",
            "(line 2746,col 9)-(line 2746,col 55)",
            "(line 2747,col 9)-(line 2747,col 62)",
            "(line 2748,col 9)-(line 2748,col 64)",
            "(line 2749,col 9)-(line 2749,col 68)",
            "(line 2751,col 9)-(line 2751,col 46)",
            "(line 2752,col 9)-(line 2752,col 52)",
            "(line 2753,col 9)-(line 2753,col 61)",
            "(line 2754,col 9)-(line 2754,col 63)",
            "(line 2755,col 9)-(line 2755,col 67)",
            "(line 2757,col 9)-(line 2757,col 46)",
            "(line 2758,col 9)-(line 2758,col 52)",
            "(line 2759,col 9)-(line 2759,col 61)",
            "(line 2760,col 9)-(line 2760,col 63)",
            "(line 2761,col 9)-(line 2761,col 67)",
            "(line 2763,col 9)-(line 2763,col 52)",
            "(line 2764,col 9)-(line 2764,col 60)",
            "(line 2765,col 9)-(line 2765,col 63)",
            "(line 2766,col 9)-(line 2766,col 65)",
            "(line 2767,col 9)-(line 2767,col 69)",
            "(line 2769,col 9)-(line 2769,col 49)",
            "(line 2770,col 9)-(line 2770,col 58)",
            "(line 2771,col 9)-(line 2771,col 62)",
            "(line 2772,col 9)-(line 2772,col 64)",
            "(line 2773,col 9)-(line 2773,col 68)",
            "(line 2775,col 9)-(line 2775,col 55)",
            "(line 2776,col 9)-(line 2776,col 64)",
            "(line 2777,col 9)-(line 2777,col 64)",
            "(line 2778,col 9)-(line 2778,col 66)",
            "(line 2779,col 9)-(line 2779,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyObject()",
        "snippet": "    public void testIsNotEmptyObject() {\n        Object[] emptyArray = new Object[] {};\n        Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n        assertFalse(ArrayUtils.isNotEmpty((Object[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));\n    }",
        "begin_line": 2785,
        "end_line": 2791,
        "comment": "\n     * Test for {@link ArrayUtils#isNotEmpty(java.lang.Object[])}.\n     ",
        "child_ranges": [
            "(line 2786,col 9)-(line 2786,col 46)",
            "(line 2787,col 9)-(line 2787,col 70)",
            "(line 2788,col 9)-(line 2788,col 59)",
            "(line 2789,col 9)-(line 2789,col 55)",
            "(line 2790,col 9)-(line 2790,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives()",
        "snippet": "    public void testIsNotEmptyPrimitives() {\n        long[] emptyLongArray = new long[] {};\n        long[] notEmptyLongArray = new long[] { 1L };\n        assertFalse(ArrayUtils.isNotEmpty((long[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));\n\n        int[] emptyIntArray = new int[] {};\n        int[] notEmptyIntArray = new int[] { 1 };\n        assertFalse(ArrayUtils.isNotEmpty((int[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));\n\n        short[] emptyShortArray = new short[] {};\n        short[] notEmptyShortArray = new short[] { 1 };\n        assertFalse(ArrayUtils.isNotEmpty((short[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));\n\n        char[] emptyCharArray = new char[] {};\n        char[] notEmptyCharArray = new char[] { 1 };\n        assertFalse(ArrayUtils.isNotEmpty((char[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));\n\n        byte[] emptyByteArray = new byte[] {};\n        byte[] notEmptyByteArray = new byte[] { 1 };\n        assertFalse(ArrayUtils.isNotEmpty((byte[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));\n\n        double[] emptyDoubleArray = new double[] {};\n        double[] notEmptyDoubleArray = new double[] { 1.0 };\n        assertFalse(ArrayUtils.isNotEmpty((double[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));\n\n        float[] emptyFloatArray = new float[] {};\n        float[] notEmptyFloatArray = new float[] { 1.0F };\n        assertFalse(ArrayUtils.isNotEmpty((float[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));\n\n        boolean[] emptyBooleanArray = new boolean[] {};\n        boolean[] notEmptyBooleanArray = new boolean[] { true };\n        assertFalse(ArrayUtils.isNotEmpty((boolean[])null));\n        assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));\n        assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));\n    }",
        "begin_line": 2803,
        "end_line": 2851,
        "comment": "\n     * Tests for {@link ArrayUtils#isNotEmpty(long[])},\n     * {@link ArrayUtils#isNotEmpty(int[])},\n     * {@link ArrayUtils#isNotEmpty(short[])},\n     * {@link ArrayUtils#isNotEmpty(char[])},\n     * {@link ArrayUtils#isNotEmpty(byte[])},\n     * {@link ArrayUtils#isNotEmpty(double[])},\n     * {@link ArrayUtils#isNotEmpty(float[])} and\n     * {@link ArrayUtils#isNotEmpty(boolean[])}.\n     ",
        "child_ranges": [
            "(line 2804,col 9)-(line 2804,col 46)",
            "(line 2805,col 9)-(line 2805,col 53)",
            "(line 2806,col 9)-(line 2806,col 57)",
            "(line 2807,col 9)-(line 2807,col 59)",
            "(line 2808,col 9)-(line 2808,col 61)",
            "(line 2810,col 9)-(line 2810,col 43)",
            "(line 2811,col 9)-(line 2811,col 49)",
            "(line 2812,col 9)-(line 2812,col 56)",
            "(line 2813,col 9)-(line 2813,col 58)",
            "(line 2814,col 9)-(line 2814,col 60)",
            "(line 2816,col 9)-(line 2816,col 49)",
            "(line 2817,col 9)-(line 2817,col 55)",
            "(line 2818,col 9)-(line 2818,col 58)",
            "(line 2819,col 9)-(line 2819,col 60)",
            "(line 2820,col 9)-(line 2820,col 62)",
            "(line 2822,col 9)-(line 2822,col 46)",
            "(line 2823,col 9)-(line 2823,col 52)",
            "(line 2824,col 9)-(line 2824,col 57)",
            "(line 2825,col 9)-(line 2825,col 59)",
            "(line 2826,col 9)-(line 2826,col 61)",
            "(line 2828,col 9)-(line 2828,col 46)",
            "(line 2829,col 9)-(line 2829,col 52)",
            "(line 2830,col 9)-(line 2830,col 57)",
            "(line 2831,col 9)-(line 2831,col 59)",
            "(line 2832,col 9)-(line 2832,col 61)",
            "(line 2834,col 9)-(line 2834,col 52)",
            "(line 2835,col 9)-(line 2835,col 60)",
            "(line 2836,col 9)-(line 2836,col 59)",
            "(line 2837,col 9)-(line 2837,col 61)",
            "(line 2838,col 9)-(line 2838,col 63)",
            "(line 2840,col 9)-(line 2840,col 49)",
            "(line 2841,col 9)-(line 2841,col 58)",
            "(line 2842,col 9)-(line 2842,col 58)",
            "(line 2843,col 9)-(line 2843,col 60)",
            "(line 2844,col 9)-(line 2844,col 62)",
            "(line 2846,col 9)-(line 2846,col 55)",
            "(line 2847,col 9)-(line 2847,col 64)",
            "(line 2848,col 9)-(line 2848,col 60)",
            "(line 2849,col 9)-(line 2849,col 62)",
            "(line 2850,col 9)-(line 2850,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsTest.testGetLength()",
        "snippet": "    public void testGetLength() {\n        assertEquals(0, ArrayUtils.getLength(null));\n        \n        Object[] emptyObjectArray = new Object[0];\n        Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n        assertEquals(0, ArrayUtils.getLength((Object[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\n \n        int[] emptyIntArray = new int[] {};\n        int[] notEmptyIntArray = new int[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((int[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyIntArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\n\n        short[] emptyShortArray = new short[] {};\n        short[] notEmptyShortArray = new short[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((short[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyShortArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\n\n        char[] emptyCharArray = new char[] {};\n        char[] notEmptyCharArray = new char[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((char[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyCharArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\n\n        byte[] emptyByteArray = new byte[] {};\n        byte[] notEmptyByteArray = new byte[] { 1 };\n        assertEquals(0, ArrayUtils.getLength((byte[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyByteArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\n\n        double[] emptyDoubleArray = new double[] {};\n        double[] notEmptyDoubleArray = new double[] { 1.0 };\n        assertEquals(0, ArrayUtils.getLength((double[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\n\n        float[] emptyFloatArray = new float[] {};\n        float[] notEmptyFloatArray = new float[] { 1.0F };\n        assertEquals(0, ArrayUtils.getLength((float[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\n\n        boolean[] emptyBooleanArray = new boolean[] {};\n        boolean[] notEmptyBooleanArray = new boolean[] { true };\n        assertEquals(0, ArrayUtils.getLength((boolean[]) null));\n        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\n        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\n        \n        try {\n            ArrayUtils.getLength(\"notAnArray\");\n            fail(\"IllegalArgumentException should have been thrown\");\n        } catch (IllegalArgumentException e) {}\n    }",
        "begin_line": 2853,
        "end_line": 2908,
        "comment": " ------------------------------------------------------------------------",
        "child_ranges": [
            "(line 2854,col 9)-(line 2854,col 52)",
            "(line 2856,col 9)-(line 2856,col 50)",
            "(line 2857,col 9)-(line 2857,col 63)",
            "(line 2858,col 9)-(line 2858,col 63)",
            "(line 2859,col 9)-(line 2859,col 64)",
            "(line 2860,col 9)-(line 2860,col 67)",
            "(line 2862,col 9)-(line 2862,col 43)",
            "(line 2863,col 9)-(line 2863,col 49)",
            "(line 2864,col 9)-(line 2864,col 60)",
            "(line 2865,col 9)-(line 2865,col 61)",
            "(line 2866,col 9)-(line 2866,col 64)",
            "(line 2868,col 9)-(line 2868,col 49)",
            "(line 2869,col 9)-(line 2869,col 55)",
            "(line 2870,col 9)-(line 2870,col 62)",
            "(line 2871,col 9)-(line 2871,col 63)",
            "(line 2872,col 9)-(line 2872,col 66)",
            "(line 2874,col 9)-(line 2874,col 46)",
            "(line 2875,col 9)-(line 2875,col 52)",
            "(line 2876,col 9)-(line 2876,col 61)",
            "(line 2877,col 9)-(line 2877,col 62)",
            "(line 2878,col 9)-(line 2878,col 65)",
            "(line 2880,col 9)-(line 2880,col 46)",
            "(line 2881,col 9)-(line 2881,col 52)",
            "(line 2882,col 9)-(line 2882,col 61)",
            "(line 2883,col 9)-(line 2883,col 62)",
            "(line 2884,col 9)-(line 2884,col 65)",
            "(line 2886,col 9)-(line 2886,col 52)",
            "(line 2887,col 9)-(line 2887,col 60)",
            "(line 2888,col 9)-(line 2888,col 63)",
            "(line 2889,col 9)-(line 2889,col 64)",
            "(line 2890,col 9)-(line 2890,col 67)",
            "(line 2892,col 9)-(line 2892,col 49)",
            "(line 2893,col 9)-(line 2893,col 58)",
            "(line 2894,col 9)-(line 2894,col 62)",
            "(line 2895,col 9)-(line 2895,col 63)",
            "(line 2896,col 9)-(line 2896,col 66)",
            "(line 2898,col 9)-(line 2898,col 55)",
            "(line 2899,col 9)-(line 2899,col 64)",
            "(line 2900,col 9)-(line 2900,col 64)",
            "(line 2901,col 9)-(line 2901,col 65)",
            "(line 2902,col 9)-(line 2902,col 68)",
            "(line 2904,col 9)-(line 2907,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.CharSetUtilsTest(java.lang.String)",
        "snippet": "    public CharSetUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new CharSetUtils());\n        Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));\n    }",
        "begin_line": 39,
        "end_line": 46,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 42)",
            "(line 41,col 9)-(line 41,col 77)",
            "(line 42,col 9)-(line 42,col 37)",
            "(line 43,col 9)-(line 43,col 70)",
            "(line 44,col 9)-(line 44,col 81)",
            "(line 45,col 9)-(line 45,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString()",
        "snippet": "    public void testSqueeze_StringString() {\n        assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n        assertEquals(null, CharSetUtils.squeeze(null, \"\"));\n        \n        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"\"));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\n        \n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\n        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"l-p\"));\n        assertEquals(\"heloo\", CharSetUtils.squeeze(\"helloo\", \"l\"));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"helloo\", \"^l\"));\n    }",
        "begin_line": 49,
        "end_line": 63,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 70)",
            "(line 51,col 9)-(line 51,col 59)",
            "(line 53,col 9)-(line 53,col 66)",
            "(line 54,col 9)-(line 54,col 55)",
            "(line 55,col 9)-(line 55,col 58)",
            "(line 57,col 9)-(line 57,col 76)",
            "(line 58,col 9)-(line 58,col 65)",
            "(line 59,col 9)-(line 59,col 68)",
            "(line 60,col 9)-(line 60,col 67)",
            "(line 61,col 9)-(line 61,col 67)",
            "(line 62,col 9)-(line 62,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray()",
        "snippet": "    public void testSqueeze_StringStringarray() {\n        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));\n        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));\n        assertEquals(null, CharSetUtils.squeeze(null, new String[] {\"el\"}));\n        \n        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[0]));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {null}));\n        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String[]) null));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[0]));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {null}));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] { \"e\" }));\n        assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", new String[] { \"of\" }));\n        assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", new String[] { \"fo\" }));\n    }",
        "begin_line": 65,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 72)",
            "(line 67,col 9)-(line 67,col 70)",
            "(line 68,col 9)-(line 68,col 76)",
            "(line 69,col 9)-(line 69,col 76)",
            "(line 71,col 9)-(line 71,col 68)",
            "(line 72,col 9)-(line 72,col 66)",
            "(line 73,col 9)-(line 73,col 72)",
            "(line 74,col 9)-(line 74,col 73)",
            "(line 76,col 9)-(line 76,col 78)",
            "(line 77,col 9)-(line 77,col 76)",
            "(line 78,col 9)-(line 78,col 82)",
            "(line 79,col 9)-(line 79,col 83)",
            "(line 81,col 9)-(line 81,col 83)",
            "(line 82,col 9)-(line 82,col 83)",
            "(line 83,col 9)-(line 83,col 88)",
            "(line 84,col 9)-(line 84,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString()",
        "snippet": "    public void testCount_StringString() {\n        assertEquals(0, CharSetUtils.count(null, (String) null));\n        assertEquals(0, CharSetUtils.count(null, \"\"));\n        \n        assertEquals(0, CharSetUtils.count(\"\", (String) null));\n        assertEquals(0, CharSetUtils.count(\"\", \"\"));\n        assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\n        \n        assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\n        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n        assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\n        assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\n    }",
        "begin_line": 88,
        "end_line": 100,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 54)",
            "(line 92,col 9)-(line 92,col 63)",
            "(line 93,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 55)",
            "(line 96,col 9)-(line 96,col 68)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 60)",
            "(line 99,col 9)-(line 99,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray()",
        "snippet": "    public void testCount_StringStringarray() {\n        assertEquals(0, CharSetUtils.count(null, (String[]) null));\n        assertEquals(0, CharSetUtils.count(null, new String[0]));\n        assertEquals(0, CharSetUtils.count(null, new String[] {null}));\n        assertEquals(0, CharSetUtils.count(null, new String[] {\"a-e\"}));\n        \n        assertEquals(0, CharSetUtils.count(\"\", (String[]) null));\n        assertEquals(0, CharSetUtils.count(\"\", new String[0]));\n        assertEquals(0, CharSetUtils.count(\"\", new String[] {null}));\n        assertEquals(0, CharSetUtils.count(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(0, CharSetUtils.count(\"hello\", (String[]) null));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[0]));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[] {null}));\n        assertEquals(1, CharSetUtils.count(\"hello\", new String[] {\"a-e\"}));\n        \n        assertEquals(3, CharSetUtils.count(\"hello\", new String[] { \"el\" }));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"x\" }));\n        assertEquals(2, CharSetUtils.count(\"hello\", new String[] { \"e-i\" }));\n        assertEquals(5, CharSetUtils.count(\"hello\", new String[] { \"a-z\" }));\n        assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"\" }));\n    }",
        "begin_line": 102,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 67)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 71)",
            "(line 106,col 9)-(line 106,col 72)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 63)",
            "(line 110,col 9)-(line 110,col 69)",
            "(line 111,col 9)-(line 111,col 70)",
            "(line 113,col 9)-(line 113,col 70)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 74)",
            "(line 116,col 9)-(line 116,col 75)",
            "(line 118,col 9)-(line 118,col 76)",
            "(line 119,col 9)-(line 119,col 75)",
            "(line 120,col 9)-(line 120,col 77)",
            "(line 121,col 9)-(line 121,col 77)",
            "(line 122,col 9)-(line 122,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString()",
        "snippet": "    public void testKeep_StringString() {\n        assertEquals(null, CharSetUtils.keep(null, (String) null));\n        assertEquals(null, CharSetUtils.keep(null, \"\"));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\n        assertEquals(\"\", CharSetUtils.keep(\"\", \"\"));\n        assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"xyz\"));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"oleh\"));\n        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\n    }",
        "begin_line": 126,
        "end_line": 140,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 67)",
            "(line 128,col 9)-(line 128,col 56)",
            "(line 130,col 9)-(line 130,col 63)",
            "(line 131,col 9)-(line 131,col 52)",
            "(line 132,col 9)-(line 132,col 55)",
            "(line 134,col 9)-(line 134,col 68)",
            "(line 135,col 9)-(line 135,col 57)",
            "(line 136,col 9)-(line 136,col 60)",
            "(line 137,col 9)-(line 137,col 65)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray()",
        "snippet": "    public void testKeep_StringStringarray() {\n        assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n        assertEquals(null, CharSetUtils.keep(null, new String[0]));\n        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));\n        assertEquals(null, CharSetUtils.keep(null, new String[] {\"a-e\"}));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.keep(\"\", new String[0]));\n        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {null}));\n        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[0]));\n        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] {null}));\n        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] { \"a-e\" }));\n        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", new String[] { \"el\" }));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"elho\" }));\n        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"a-z\" }));\n        assertEquals(\"----\", CharSetUtils.keep(\"----\", new String[] { \"-\" }));\n        assertEquals(\"ll\", CharSetUtils.keep(\"hello\", new String[] { \"l\" }));\n    }",
        "begin_line": 142,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 69)",
            "(line 144,col 9)-(line 144,col 67)",
            "(line 145,col 9)-(line 145,col 73)",
            "(line 146,col 9)-(line 146,col 74)",
            "(line 148,col 9)-(line 148,col 65)",
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 150,col 69)",
            "(line 151,col 9)-(line 151,col 70)",
            "(line 153,col 9)-(line 153,col 70)",
            "(line 154,col 9)-(line 154,col 68)",
            "(line 155,col 9)-(line 155,col 74)",
            "(line 156,col 9)-(line 156,col 76)",
            "(line 158,col 9)-(line 158,col 78)",
            "(line 159,col 9)-(line 159,col 79)",
            "(line 160,col 9)-(line 160,col 83)",
            "(line 161,col 9)-(line 161,col 82)",
            "(line 162,col 9)-(line 162,col 78)",
            "(line 163,col 9)-(line 163,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString()",
        "snippet": "    public void testDelete_StringString() {\n        assertEquals(null, CharSetUtils.delete(null, (String) null));\n        assertEquals(null, CharSetUtils.delete(null, \"\"));\n        \n        assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\n        assertEquals(\"\", CharSetUtils.delete(\"\", \"\"));\n        assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\n        \n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n        assertEquals(\"hllo\", CharSetUtils.delete(\"hello\", \"a-e\"));\n        assertEquals(\"he\", CharSetUtils.delete(\"hello\", \"l-p\"));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\n    }",
        "begin_line": 167,
        "end_line": 180,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 69)",
            "(line 169,col 9)-(line 169,col 58)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 54)",
            "(line 173,col 9)-(line 173,col 57)",
            "(line 175,col 9)-(line 175,col 75)",
            "(line 176,col 9)-(line 176,col 64)",
            "(line 177,col 9)-(line 177,col 66)",
            "(line 178,col 9)-(line 178,col 64)",
            "(line 179,col 9)-(line 179,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharSetUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java",
        "signature": "org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray()",
        "snippet": "    public void testDelete_StringStringarray() {\n        assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n        assertEquals(null, CharSetUtils.delete(null, new String[0]));\n        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));\n        assertEquals(null, CharSetUtils.delete(null, new String[] {\"el\"}));\n        \n        assertEquals(\"\", CharSetUtils.delete(\"\", (String[]) null));\n        assertEquals(\"\", CharSetUtils.delete(\"\", new String[0]));\n        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {null}));\n        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {\"a-e\"}));\n        \n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String[]) null));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[0]));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {null}));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {\"xyz\"}));\n\n        assertEquals(\"ho\", CharSetUtils.delete(\"hello\", new String[] { \"el\" }));\n        assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"elho\" }));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] { \"\" }));\n        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n        assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"a-z\" }));\n        assertEquals(\"\", CharSetUtils.delete(\"----\", new String[] { \"-\" }));\n        assertEquals(\"heo\", CharSetUtils.delete(\"hello\", new String[] { \"l\" }));\n    }",
        "begin_line": 182,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 71)",
            "(line 184,col 9)-(line 184,col 69)",
            "(line 185,col 9)-(line 185,col 75)",
            "(line 186,col 9)-(line 186,col 75)",
            "(line 188,col 9)-(line 188,col 67)",
            "(line 189,col 9)-(line 189,col 65)",
            "(line 190,col 9)-(line 190,col 71)",
            "(line 191,col 9)-(line 191,col 72)",
            "(line 193,col 9)-(line 193,col 77)",
            "(line 194,col 9)-(line 194,col 75)",
            "(line 195,col 9)-(line 195,col 81)",
            "(line 196,col 9)-(line 196,col 82)",
            "(line 198,col 9)-(line 198,col 80)",
            "(line 199,col 9)-(line 199,col 80)",
            "(line 200,col 9)-(line 200,col 81)",
            "(line 201,col 9)-(line 201,col 64)",
            "(line 202,col 9)-(line 202,col 79)",
            "(line 203,col 9)-(line 203,col 76)",
            "(line 204,col 9)-(line 204,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.StringUtilsTrimEmptyTest(java.lang.String)",
        "snippet": "    public StringUtilsTrimEmptyTest(String name) {\n        super(name);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsEmpty()",
        "snippet": "    public void testIsEmpty() {\n        assertEquals(true, StringUtils.isEmpty(null));\n        assertEquals(true, StringUtils.isEmpty(\"\"));\n        assertEquals(false, StringUtils.isEmpty(\" \"));\n        assertEquals(false, StringUtils.isEmpty(\"foo\"));\n        assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n    }",
        "begin_line": 36,
        "end_line": 42,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 54)",
            "(line 38,col 9)-(line 38,col 52)",
            "(line 39,col 9)-(line 39,col 54)",
            "(line 40,col 9)-(line 40,col 56)",
            "(line 41,col 9)-(line 41,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsNotEmpty()",
        "snippet": "    public void testIsNotEmpty() {\n        assertEquals(false, StringUtils.isNotEmpty(null));\n        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n        assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n        assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 58)",
            "(line 46,col 9)-(line 46,col 56)",
            "(line 47,col 9)-(line 47,col 56)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsBlank()",
        "snippet": "    public void testIsBlank() {\n        assertEquals(true, StringUtils.isBlank(null));\n        assertEquals(true, StringUtils.isBlank(\"\"));\n        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n        assertEquals(false, StringUtils.isBlank(\"foo\"));\n        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n    }",
        "begin_line": 52,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 54)",
            "(line 54,col 9)-(line 54,col 52)",
            "(line 55,col 9)-(line 55,col 76)",
            "(line 56,col 9)-(line 56,col 56)",
            "(line 57,col 9)-(line 57,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsNotBlank()",
        "snippet": "    public void testIsNotBlank() {\n        assertEquals(false, StringUtils.isNotBlank(null));\n        assertEquals(false, StringUtils.isNotBlank(\"\"));\n        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n    }",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 58)",
            "(line 62,col 9)-(line 62,col 56)",
            "(line 63,col 9)-(line 63,col 80)",
            "(line 64,col 9)-(line 64,col 58)",
            "(line 65,col 9)-(line 65,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrim()",
        "snippet": "    public void testTrim() {\n        assertEquals(FOO, StringUtils.trim(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trim(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trim(\" \" + FOO));\n        assertEquals(FOO, StringUtils.trim(FOO + \"\"));\n        assertEquals(\"\", StringUtils.trim(\" \\t\\r\\n\\b \"));\n        assertEquals(\"\", StringUtils.trim(StringUtilsTest.TRIMMABLE));\n        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));\n        assertEquals(\"\", StringUtils.trim(\"\"));\n        assertEquals(null, StringUtils.trim(null));\n    }",
        "begin_line": 69,
        "end_line": 79,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 56)",
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 55)",
            "(line 73,col 9)-(line 73,col 54)",
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 70)",
            "(line 76,col 9)-(line 76,col 101)",
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 78,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToNull()",
        "snippet": "    public void testTrimToNull() {\n        assertEquals(FOO, StringUtils.trimToNull(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO));\n        assertEquals(FOO, StringUtils.trimToNull(FOO + \"\"));\n        assertEquals(null, StringUtils.trimToNull(\" \\t\\r\\n\\b \"));\n        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));\n        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));\n        assertEquals(null, StringUtils.trimToNull(\"\"));\n        assertEquals(null, StringUtils.trimToNull(null));\n    }",
        "begin_line": 81,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 62)",
            "(line 83,col 9)-(line 83,col 68)",
            "(line 84,col 9)-(line 84,col 61)",
            "(line 85,col 9)-(line 85,col 60)",
            "(line 86,col 9)-(line 86,col 65)",
            "(line 87,col 9)-(line 87,col 78)",
            "(line 88,col 9)-(line 88,col 107)",
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToEmpty()",
        "snippet": "    public void testTrimToEmpty() {\n        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO + \"  \"));\n        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO));\n        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"\"));\n        assertEquals(\"\", StringUtils.trimToEmpty(\" \\t\\r\\n\\b \"));\n        assertEquals(\"\", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));\n        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));\n        assertEquals(\"\", StringUtils.trimToEmpty(\"\"));\n        assertEquals(\"\", StringUtils.trimToEmpty(null));\n    }",
        "begin_line": 93,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 63)",
            "(line 95,col 9)-(line 95,col 69)",
            "(line 96,col 9)-(line 96,col 62)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 64)",
            "(line 99,col 9)-(line 99,col 77)",
            "(line 100,col 9)-(line 100,col 108)",
            "(line 101,col 9)-(line 101,col 54)",
            "(line 102,col 9)-(line 102,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_String()",
        "snippet": "    public void testStrip_String() {\n        assertEquals(null, StringUtils.strip(null));\n        assertEquals(\"\", StringUtils.strip(\"\"));\n        assertEquals(\"\", StringUtils.strip(\"        \"));\n        assertEquals(\"abc\", StringUtils.strip(\"  abc  \"));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n    }",
        "begin_line": 106,
        "end_line": 113,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 48)",
            "(line 109,col 9)-(line 109,col 56)",
            "(line 110,col 9)-(line 110,col 58)",
            "(line 111,col 9)-(line 112,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToNull_String()",
        "snippet": "    public void testStripToNull_String() {\n        assertEquals(null, StringUtils.stripToNull(null));\n        assertEquals(null, StringUtils.stripToNull(\"\"));\n        assertEquals(null, StringUtils.stripToNull(\"        \"));\n        assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE));\n        assertEquals(\"ab c\", StringUtils.stripToNull(\"  ab c  \"));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n    }",
        "begin_line": 115,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 58)",
            "(line 117,col 9)-(line 117,col 56)",
            "(line 118,col 9)-(line 118,col 64)",
            "(line 119,col 9)-(line 119,col 80)",
            "(line 120,col 9)-(line 120,col 66)",
            "(line 121,col 9)-(line 122,col 127)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToEmpty_String()",
        "snippet": "    public void testStripToEmpty_String() {\n        assertEquals(\"\", StringUtils.stripToEmpty(null));\n        assertEquals(\"\", StringUtils.stripToEmpty(\"\"));\n        assertEquals(\"\", StringUtils.stripToEmpty(\"        \"));\n        assertEquals(\"\", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));\n        assertEquals(\"ab c\", StringUtils.stripToEmpty(\"  ab c  \"));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n    }",
        "begin_line": 125,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 127,col 55)",
            "(line 128,col 9)-(line 128,col 63)",
            "(line 129,col 9)-(line 129,col 79)",
            "(line 130,col 9)-(line 130,col 67)",
            "(line 131,col 9)-(line 132,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_StringString()",
        "snippet": "    public void testStrip_StringString() {\n        // null strip\n        assertEquals(null, StringUtils.strip(null, null));\n        assertEquals(\"\", StringUtils.strip(\"\", null));\n        assertEquals(\"\", StringUtils.strip(\"        \", null));\n        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", null));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, \n            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n\n        // \"\" strip\n        assertEquals(null, StringUtils.strip(null, \"\"));\n        assertEquals(\"\", StringUtils.strip(\"\", \"\"));\n        assertEquals(\"        \", StringUtils.strip(\"        \", \"\"));\n        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n        \n        // \" \" strip\n        assertEquals(null, StringUtils.strip(null, \" \"));\n        assertEquals(\"\", StringUtils.strip(\"\", \" \"));\n        assertEquals(\"\", StringUtils.strip(\"        \", \" \"));\n        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", \" \"));\n        \n        // \"ab\" strip\n        assertEquals(null, StringUtils.strip(null, \"ab\"));\n        assertEquals(\"\", StringUtils.strip(\"\", \"ab\"));\n        assertEquals(\"        \", StringUtils.strip(\"        \", \"ab\"));\n        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"ab\"));\n        assertEquals(\"c\", StringUtils.strip(\"abcabab\", \"ab\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n    }",
        "begin_line": 135,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 58)",
            "(line 138,col 9)-(line 138,col 54)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 142,col 127)",
            "(line 145,col 9)-(line 145,col 56)",
            "(line 146,col 9)-(line 146,col 52)",
            "(line 147,col 9)-(line 147,col 68)",
            "(line 148,col 9)-(line 148,col 66)",
            "(line 149,col 9)-(line 149,col 100)",
            "(line 152,col 9)-(line 152,col 57)",
            "(line 153,col 9)-(line 153,col 53)",
            "(line 154,col 9)-(line 154,col 61)",
            "(line 155,col 9)-(line 155,col 63)",
            "(line 158,col 9)-(line 158,col 58)",
            "(line 159,col 9)-(line 159,col 54)",
            "(line 160,col 9)-(line 160,col 70)",
            "(line 161,col 9)-(line 161,col 68)",
            "(line 162,col 9)-(line 162,col 62)",
            "(line 163,col 9)-(line 163,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripStart_StringString()",
        "snippet": "    public void testStripStart_StringString() {\n        // null stripStart\n        assertEquals(null, StringUtils.stripStart(null, null));\n        assertEquals(\"\", StringUtils.stripStart(\"\", null));\n        assertEquals(\"\", StringUtils.stripStart(\"        \", null));\n        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", null));\n        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, \n            StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n\n        // \"\" stripStart\n        assertEquals(null, StringUtils.stripStart(null, \"\"));\n        assertEquals(\"\", StringUtils.stripStart(\"\", \"\"));\n        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"\"));\n        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n        \n        // \" \" stripStart\n        assertEquals(null, StringUtils.stripStart(null, \" \"));\n        assertEquals(\"\", StringUtils.stripStart(\"\", \" \"));\n        assertEquals(\"\", StringUtils.stripStart(\"        \", \" \"));\n        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", \" \"));\n        \n        // \"ab\" stripStart\n        assertEquals(null, StringUtils.stripStart(null, \"ab\"));\n        assertEquals(\"\", StringUtils.stripStart(\"\", \"ab\"));\n        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"ab\"));\n        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"ab\"));\n        assertEquals(\"cabab\", StringUtils.stripStart(\"abcabab\", \"ab\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n    }",
        "begin_line": 166,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 63)",
            "(line 169,col 9)-(line 169,col 59)",
            "(line 170,col 9)-(line 170,col 67)",
            "(line 171,col 9)-(line 171,col 71)",
            "(line 172,col 9)-(line 173,col 132)",
            "(line 176,col 9)-(line 176,col 61)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 178,col 73)",
            "(line 179,col 9)-(line 179,col 71)",
            "(line 180,col 9)-(line 180,col 105)",
            "(line 183,col 9)-(line 183,col 62)",
            "(line 184,col 9)-(line 184,col 58)",
            "(line 185,col 9)-(line 185,col 66)",
            "(line 186,col 9)-(line 186,col 70)",
            "(line 189,col 9)-(line 189,col 63)",
            "(line 190,col 9)-(line 190,col 59)",
            "(line 191,col 9)-(line 191,col 75)",
            "(line 192,col 9)-(line 192,col 73)",
            "(line 193,col 9)-(line 193,col 71)",
            "(line 194,col 9)-(line 194,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripEnd_StringString()",
        "snippet": "    public void testStripEnd_StringString() {\n        // null stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, null));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", null));\n        assertEquals(\"\", StringUtils.stripEnd(\"        \", null));\n        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", null));\n        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, \n            StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n\n        // \"\" stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, \"\"));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", \"\"));\n        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"\"));\n        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n        \n        // \" \" stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, \" \"));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", \" \"));\n        assertEquals(\"\", StringUtils.stripEnd(\"        \", \" \"));\n        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", \" \"));\n        \n        // \"ab\" stripEnd\n        assertEquals(null, StringUtils.stripEnd(null, \"ab\"));\n        assertEquals(\"\", StringUtils.stripEnd(\"\", \"ab\"));\n        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"ab\"));\n        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"ab\"));\n        assertEquals(\"abc\", StringUtils.stripEnd(\"abcabab\", \"ab\"));\n        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n    }",
        "begin_line": 197,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 57)",
            "(line 201,col 9)-(line 201,col 65)",
            "(line 202,col 9)-(line 202,col 69)",
            "(line 203,col 9)-(line 204,col 130)",
            "(line 207,col 9)-(line 207,col 59)",
            "(line 208,col 9)-(line 208,col 55)",
            "(line 209,col 9)-(line 209,col 71)",
            "(line 210,col 9)-(line 210,col 69)",
            "(line 211,col 9)-(line 211,col 103)",
            "(line 214,col 9)-(line 214,col 60)",
            "(line 215,col 9)-(line 215,col 56)",
            "(line 216,col 9)-(line 216,col 64)",
            "(line 217,col 9)-(line 217,col 68)",
            "(line 220,col 9)-(line 220,col 61)",
            "(line 221,col 9)-(line 221,col 57)",
            "(line 222,col 9)-(line 222,col 73)",
            "(line 223,col 9)-(line 223,col 71)",
            "(line 224,col 9)-(line 224,col 67)",
            "(line 225,col 9)-(line 225,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAll()",
        "snippet": "    public void testStripAll() {\n        // test stripAll method, merely an array version of the above strip\n        String[] empty = new String[0];\n        String[] fooSpace = new String[] { \"  \"+FOO+\"  \", \"  \"+FOO, FOO+\"  \" };\n        String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n        String[] foo = new String[] { FOO, FOO, FOO };\n\n        assertEquals(null, StringUtils.stripAll(null));\n        assertArrayEquals(empty, StringUtils.stripAll(empty));\n        assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n        \n        assertEquals(null, StringUtils.stripAll(null, null));\n        assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));\n        assertArrayEquals(foo, StringUtils.stripAll(fooDots, \".\"));\n    }",
        "begin_line": 228,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 39)",
            "(line 231,col 9)-(line 231,col 79)",
            "(line 232,col 9)-(line 232,col 78)",
            "(line 233,col 9)-(line 233,col 54)",
            "(line 235,col 9)-(line 235,col 55)",
            "(line 236,col 9)-(line 236,col 62)",
            "(line 237,col 9)-(line 237,col 63)",
            "(line 239,col 9)-(line 239,col 61)",
            "(line 240,col 9)-(line 240,col 69)",
            "(line 241,col 9)-(line 241,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAccents()",
        "snippet": "    public void testStripAccents() {\n        if(SystemUtils.isJavaVersionAtLeast(1.6f)) {\n            String cue = \"\\u00C7\\u00FA\\u00EA\";\n            assertEquals( \"Failed to strip accents from \" + cue, \"Cue\", StringUtils.stripAccents(cue));\n\n            String lots = \"\\u00C0\\u00C1\\u00C2\\u00C3\\u00C4\\u00C5\\u00C7\\u00C8\\u00C9\" + \n                          \"\\u00CA\\u00CB\\u00CC\\u00CD\\u00CE\\u00CF\\u00D1\\u00D2\\u00D3\" + \n                          \"\\u00D4\\u00D5\\u00D6\\u00D9\\u00DA\\u00DB\\u00DC\\u00DD\";\n            assertEquals( \"Failed to strip accents from \" + lots, \n                          \"AAAAAACEEEEIIIINOOOOOUUUUY\", \n                          StringUtils.stripAccents(lots));\n\n            assertNull( \"Failed null safety\", StringUtils.stripAccents(null) );\n            assertEquals( \"Failed empty String\", \"\", StringUtils.stripAccents(\"\") );\n            assertEquals( \"Failed to handle non-accented text\", \"control\", StringUtils.stripAccents(\"control\") );\n            assertEquals( \"Failed to handle easy example\", \"eclair\", StringUtils.stripAccents(\"\\u00E9clair\") );\n        } else {\n            try {\n                StringUtils.stripAccents(\"string\");\n                fail(\"Before JDK 1.6, stripAccents is not expected to work\");\n            } catch(UnsupportedOperationException uoe) {\n                assertEquals(\"The stripAccents(String) method is not supported until Java 1.6\", uoe.getMessage());\n            }\n        }\n    }",
        "begin_line": 244,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 267,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTrimEmptyTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTrimEmptyTest.assertArrayEquals(java.lang.Object[], java.lang.Object[])",
        "snippet": "    private void assertArrayEquals(Object[] o1, Object[] o2) {\n        if(o1 == null) {\n            assertEquals(o1,o2);\n            return;\n        }\n        assertEquals(\"Length not equal. \", o1.length, o2.length);\n        int sz = o1.length;\n        for(int i=0; i<sz; i++) {\n            if(o1[i] instanceof Object[]) {\n                // do an assert equals on type....\n                assertArrayEquals( (Object[]) o1[i], (Object[]) o2[i] );\n            } else {\n                assertEquals(o1[i], o2[i]);\n            }\n        }\n    }",
        "begin_line": 272,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 277,col 65)",
            "(line 278,col 9)-(line 278,col 27)",
            "(line 279,col 9)-(line 286,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang3.EnumUtilsTest.testConstructable()",
        "snippet": "    public void testConstructable() {\n        // enforce public constructor\n        new EnumUtils();\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang3.EnumUtilsTest.test_getEnumMap()",
        "snippet": "    public void test_getEnumMap() {\n        Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);\n        assertEquals( \"getEnumMap not created correctly\", \"{RED=RED, AMBER=AMBER, GREEN=GREEN}\", test.toString());\n        assertEquals(3, test.size());\n        assertEquals(true, test.containsKey(\"RED\"));\n        assertEquals(Traffic.RED, test.get(\"RED\"));\n        assertEquals(true, test.containsKey(\"AMBER\"));\n        assertEquals(Traffic.AMBER, test.get(\"AMBER\"));\n        assertEquals(true, test.containsKey(\"GREEN\"));\n        assertEquals(Traffic.GREEN, test.get(\"GREEN\"));\n        assertEquals(false, test.containsKey(\"PURPLE\"));\n    }",
        "begin_line": 33,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 72)",
            "(line 35,col 9)-(line 35,col 114)",
            "(line 36,col 9)-(line 36,col 37)",
            "(line 37,col 9)-(line 37,col 52)",
            "(line 38,col 9)-(line 38,col 51)",
            "(line 39,col 9)-(line 39,col 54)",
            "(line 40,col 9)-(line 40,col 55)",
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 55)",
            "(line 43,col 9)-(line 43,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang3.EnumUtilsTest.test_getEnumList()",
        "snippet": "    public void test_getEnumList() {\n        List<Traffic> test = EnumUtils.getEnumList(Traffic.class);\n        assertEquals(3, test.size());\n        assertEquals(Traffic.RED, test.get(0));\n        assertEquals(Traffic.AMBER, test.get(1));\n        assertEquals(Traffic.GREEN, test.get(2));\n    }",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 66)",
            "(line 48,col 9)-(line 48,col 37)",
            "(line 49,col 9)-(line 49,col 47)",
            "(line 50,col 9)-(line 50,col 49)",
            "(line 51,col 9)-(line 51,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang3.EnumUtilsTest.test_isEnum()",
        "snippet": "    public void test_isEnum() {\n        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"RED\"));\n        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\n        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"GREEN\"));\n        assertEquals(false, EnumUtils.isValidEnum(Traffic.class, \"PURPLE\"));\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 72)",
            "(line 56,col 9)-(line 56,col 74)",
            "(line 57,col 9)-(line 57,col 74)",
            "(line 58,col 9)-(line 58,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.EnumUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
        "signature": "org.apache.commons.lang3.EnumUtilsTest.test_getEnum()",
        "snippet": "    public void test_getEnum() {\n        assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"RED\"));\n        assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\"));\n        assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"GREEN\"));\n        assertEquals(null, EnumUtils.getEnum(Traffic.class, \"PURPLE\"));\n    }",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 75)",
            "(line 63,col 9)-(line 63,col 79)",
            "(line 64,col 9)-(line 64,col 79)",
            "(line 65,col 9)-(line 65,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        new CharUtilsPerfRun().run();\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.printSysInfo()",
        "snippet": "    private void printSysInfo() {\n        System.out.println(VERSION);\n        System.out.println(\"Now: \" + Calendar.getInstance().getTime());\n        System.out.println(System.getProperty(\"java.vendor\")\n                + \" \"\n                + System.getProperty(\"java.runtime.name\")\n                + \" \"\n                + System.getProperty(\"java.runtime.version\"));\n        System.out.println(System.getProperty(\"java.vm.vendor\")\n                + \" \"\n                + System.getProperty(\"java.vm.name\")\n                + \" \"\n                + System.getProperty(\"java.vm.version\"));\n        System.out.println(System.getProperty(\"os.name\")\n            + \" \"\n            + System.getProperty(\"os.version\")\n            + \" \"\n            + System.getProperty(\"os.arch\")\n            + \" \"\n            + System.getProperty(\"sun.cpu.isalist\"));\n    }",
        "begin_line": 78,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 36)",
            "(line 80,col 9)-(line 80,col 71)",
            "(line 81,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 97,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.run()",
        "snippet": "    private void run() {\n        this.printSysInfo();\n        long start;\n        start = System.currentTimeMillis();\n        this.printlnTotal(\"Do nohting\", start);\n        //System.out.println(\"Warming up...\");\n        run_CharUtils_isAsciiNumeric(WARM_UP);\n        //System.out.println(\"Measuring...\");\n        start = System.currentTimeMillis();\n        run_CharUtils_isAsciiNumeric(COUNT);\n        this.printlnTotal(\"run_CharUtils_isAsciiNumeric\", start);\n        //System.out.println(\"Warming up...\");\n        run_inlined_CharUtils_isAsciiNumeric(WARM_UP);\n        //System.out.println(\"Measuring...\");\n        start = System.currentTimeMillis();\n        run_inlined_CharUtils_isAsciiNumeric(COUNT);\n        this.printlnTotal(\"run_inlined_CharUtils_isAsciiNumeric\", start);\n        //System.out.println(\"Warming up...\");\n        run_CharSet(WARM_UP);\n        //System.out.println(\"Measuring...\");\n        start = System.currentTimeMillis();\n        run_CharSet(COUNT);\n        this.printlnTotal(\"run_CharSet\", start);\n    }",
        "begin_line": 100,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 28)",
            "(line 102,col 9)-(line 102,col 19)",
            "(line 103,col 9)-(line 103,col 43)",
            "(line 104,col 9)-(line 104,col 47)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 108,col 9)-(line 108,col 43)",
            "(line 109,col 9)-(line 109,col 44)",
            "(line 110,col 9)-(line 110,col 65)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 114,col 9)-(line 114,col 43)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 73)",
            "(line 118,col 9)-(line 118,col 29)",
            "(line 120,col 9)-(line 120,col 43)",
            "(line 121,col 9)-(line 121,col 27)",
            "(line 122,col 9)-(line 122,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.run_CharSet(int)",
        "snippet": "    private int run_CharSet(int loopCount) {\n        int t = 0;\n        for (int i = 0; i < loopCount; i++) {\n            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n                char ch = CHAR_SAMPLES[j];\n                boolean b = CharSet.ASCII_NUMERIC.contains(ch);\n                t += b ? 1 : 0;\n            }\n        }\n        return t;\n    }",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 18)",
            "(line 127,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.run_CharUtils_isAsciiNumeric(int)",
        "snippet": "    private int run_CharUtils_isAsciiNumeric(int loopCount) {\n        int t = 0;\n        for (int i = 0; i < loopCount; i++) {\n            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n                char ch = CHAR_SAMPLES[j];\n                boolean b = CharUtils.isAsciiNumeric(ch);\n                t += b ? 1 : 0;\n            }\n        }\n        return t;\n    }",
        "begin_line": 137,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 18)",
            "(line 139,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.run_inlined_CharUtils_isAsciiNumeric(int)",
        "snippet": "    private int run_inlined_CharUtils_isAsciiNumeric(int loopCount) {\n        int t = 0;\n        for (int i = 0; i < loopCount; i++) {\n            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n                char ch = CHAR_SAMPLES[j];\n                boolean b = (ch >= '0' && ch <= '9');\n                t += b ? 1 : 0;\n            }\n        }\n        return t;\n    }",
        "begin_line": 149,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 18)",
            "(line 151,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 158,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.CharUtilsPerfRun",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java",
        "signature": "org.apache.commons.lang3.CharUtilsPerfRun.printlnTotal(java.lang.String, long)",
        "snippet": "    private void printlnTotal(String prefix, long start) {\n        long total = System.currentTimeMillis() - start;\n        System.out.println(prefix + \": \" + NumberFormat.getInstance().format(total) + \" milliseconds.\");\n    }",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 56)",
            "(line 163,col 9)-(line 163,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.StringUtilsEqualsIndexOfTest(java.lang.String)",
        "snippet": "    public StringUtilsEqualsIndexOfTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEquals()",
        "snippet": "    public void testEquals() {\n        assertEquals(true, StringUtils.equals(null, null));\n        assertEquals(true, StringUtils.equals(FOO, FOO));\n        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\n        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\n        assertEquals(false, StringUtils.equals(FOO, BAR));\n        assertEquals(false, StringUtils.equals(FOO, null));\n        assertEquals(false, StringUtils.equals(null, FOO));\n    }",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 59)",
            "(line 45,col 9)-(line 45,col 57)",
            "(line 46,col 9)-(line 46,col 94)",
            "(line 47,col 9)-(line 47,col 95)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 59)",
            "(line 50,col 9)-(line 50,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase()",
        "snippet": "    public void testEqualsIgnoreCase() {\n        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n    }",
        "begin_line": 53,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 69)",
            "(line 55,col 9)-(line 55,col 67)",
            "(line 56,col 9)-(line 56,col 104)",
            "(line 57,col 9)-(line 57,col 104)",
            "(line 58,col 9)-(line 58,col 68)",
            "(line 59,col 9)-(line 59,col 69)",
            "(line 60,col 9)-(line 60,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_char()",
        "snippet": "    public void testIndexOf_char() {\n        assertEquals(-1, StringUtils.indexOf(null, ' '));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n    }",
        "begin_line": 64,
        "end_line": 69,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 57)",
            "(line 66,col 9)-(line 66,col 55)",
            "(line 67,col 9)-(line 67,col 62)",
            "(line 68,col 9)-(line 68,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_charInt()",
        "snippet": "    public void testIndexOf_charInt() {\n        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 60)",
            "(line 73,col 9)-(line 73,col 61)",
            "(line 74,col 9)-(line 74,col 58)",
            "(line 75,col 9)-(line 75,col 59)",
            "(line 76,col 9)-(line 76,col 65)",
            "(line 77,col 9)-(line 77,col 65)",
            "(line 78,col 9)-(line 78,col 65)",
            "(line 79,col 9)-(line 79,col 66)",
            "(line 80,col 9)-(line 80,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_String()",
        "snippet": "    public void testIndexOf_String() {\n        assertEquals(-1, StringUtils.indexOf(null, null));\n        assertEquals(-1, StringUtils.indexOf(\"\", null));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n    }",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 58)",
            "(line 85,col 9)-(line 85,col 56)",
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 62)",
            "(line 88,col 9)-(line 88,col 62)",
            "(line 89,col 9)-(line 89,col 63)",
            "(line 90,col 9)-(line 90,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_String()",
        "snippet": "    public void testIndexOfIgnoreCase_String() {\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"\", null));\n        assertEquals(0, StringUtils.indexOfIgnoreCase(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\"));\n        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\"));\n        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\"));\n        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\"));\n        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\n    }",
        "begin_line": 93,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 68)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 63)",
            "(line 98,col 9)-(line 98,col 72)",
            "(line 99,col 9)-(line 99,col 72)",
            "(line 100,col 9)-(line 100,col 72)",
            "(line 101,col 9)-(line 101,col 72)",
            "(line 102,col 9)-(line 102,col 73)",
            "(line 103,col 9)-(line 103,col 73)",
            "(line 104,col 9)-(line 104,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_StringInt()",
        "snippet": "    public void testIndexOfIgnoreCase_StringInt() {\n        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\n        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\n        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 1));\n        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 2));\n        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 3));\n        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 4));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 5));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 6));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 7));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aab\", \"AB\", 1));\n        assertEquals(5, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 5));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"ab\", \"AAB\", 0));\n        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\n    }",
        "begin_line": 107,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 77)",
            "(line 109,col 9)-(line 109,col 76)",
            "(line 110,col 9)-(line 110,col 76)",
            "(line 111,col 9)-(line 111,col 76)",
            "(line 112,col 9)-(line 112,col 76)",
            "(line 113,col 9)-(line 113,col 76)",
            "(line 114,col 9)-(line 114,col 77)",
            "(line 115,col 9)-(line 115,col 77)",
            "(line 116,col 9)-(line 116,col 77)",
            "(line 117,col 9)-(line 117,col 77)",
            "(line 118,col 9)-(line 118,col 71)",
            "(line 119,col 9)-(line 119,col 74)",
            "(line 120,col 9)-(line 120,col 72)",
            "(line 121,col 9)-(line 121,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf()",
        "snippet": "    public void testOrdinalIndexOf() {\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\n        assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\n\n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\n        assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\n        assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\n        \n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\n        assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\n        assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\n        assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\n        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\n        assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\n        assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\n        assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\n        assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\n        assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\n    }",
        "begin_line": 124,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 84)",
            "(line 126,col 9)-(line 126,col 82)",
            "(line 127,col 9)-(line 127,col 80)",
            "(line 128,col 9)-(line 128,col 89)",
            "(line 129,col 9)-(line 129,col 89)",
            "(line 130,col 9)-(line 130,col 90)",
            "(line 131,col 9)-(line 131,col 88)",
            "(line 133,col 9)-(line 133,col 69)",
            "(line 134,col 9)-(line 134,col 67)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 74)",
            "(line 137,col 9)-(line 137,col 74)",
            "(line 138,col 9)-(line 138,col 75)",
            "(line 139,col 9)-(line 139,col 73)",
            "(line 141,col 9)-(line 141,col 68)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 73)",
            "(line 145,col 9)-(line 145,col 73)",
            "(line 146,col 9)-(line 146,col 74)",
            "(line 147,col 9)-(line 147,col 72)",
            "(line 149,col 9)-(line 149,col 68)",
            "(line 150,col 9)-(line 150,col 66)",
            "(line 151,col 9)-(line 151,col 63)",
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 72)",
            "(line 154,col 9)-(line 154,col 73)",
            "(line 155,col 9)-(line 155,col 71)",
            "(line 157,col 9)-(line 157,col 68)",
            "(line 158,col 9)-(line 158,col 66)",
            "(line 159,col 9)-(line 159,col 63)",
            "(line 160,col 9)-(line 160,col 72)",
            "(line 161,col 9)-(line 161,col 72)",
            "(line 162,col 9)-(line 162,col 73)",
            "(line 163,col 9)-(line 163,col 71)",
            "(line 165,col 9)-(line 165,col 84)",
            "(line 166,col 9)-(line 166,col 82)",
            "(line 167,col 9)-(line 167,col 79)",
            "(line 168,col 9)-(line 168,col 89)",
            "(line 169,col 9)-(line 169,col 89)",
            "(line 170,col 9)-(line 170,col 90)",
            "(line 171,col 9)-(line 171,col 87)",
            "(line 173,col 9)-(line 173,col 74)",
            "(line 174,col 9)-(line 174,col 73)",
            "(line 175,col 9)-(line 175,col 73)",
            "(line 176,col 9)-(line 176,col 73)",
            "(line 177,col 9)-(line 177,col 73)",
            "(line 178,col 9)-(line 178,col 73)",
            "(line 179,col 9)-(line 179,col 73)",
            "(line 180,col 9)-(line 180,col 73)",
            "(line 181,col 9)-(line 181,col 73)",
            "(line 182,col 9)-(line 182,col 73)",
            "(line 183,col 9)-(line 183,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt()",
        "snippet": "    public void testIndexOf_StringInt() {\n        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\n        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n    }",
        "begin_line": 186,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 61)",
            "(line 188,col 9)-(line 188,col 62)",
            "(line 189,col 9)-(line 189,col 59)",
            "(line 190,col 9)-(line 190,col 60)",
            "(line 191,col 9)-(line 191,col 59)",
            "(line 192,col 9)-(line 192,col 60)",
            "(line 193,col 9)-(line 193,col 56)",
            "(line 194,col 9)-(line 194,col 57)",
            "(line 195,col 9)-(line 195,col 56)",
            "(line 196,col 9)-(line 196,col 59)",
            "(line 197,col 9)-(line 197,col 60)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 199,col 9)-(line 199,col 59)",
            "(line 200,col 9)-(line 200,col 65)",
            "(line 201,col 9)-(line 201,col 65)",
            "(line 202,col 9)-(line 202,col 66)",
            "(line 203,col 9)-(line 203,col 65)",
            "(line 204,col 9)-(line 204,col 66)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_char()",
        "snippet": "    public void testLastIndexOf_char() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n    }",
        "begin_line": 210,
        "end_line": 215,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 61)",
            "(line 212,col 9)-(line 212,col 59)",
            "(line 213,col 9)-(line 213,col 66)",
            "(line 214,col 9)-(line 214,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt()",
        "snippet": "    public void testLastIndexOf_charInt() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n    }",
        "begin_line": 217,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 64)",
            "(line 219,col 9)-(line 219,col 65)",
            "(line 220,col 9)-(line 220,col 62)",
            "(line 221,col 9)-(line 221,col 63)",
            "(line 222,col 9)-(line 222,col 69)",
            "(line 223,col 9)-(line 223,col 69)",
            "(line 224,col 9)-(line 224,col 69)",
            "(line 225,col 9)-(line 225,col 69)",
            "(line 226,col 9)-(line 226,col 71)",
            "(line 227,col 9)-(line 227,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_String()",
        "snippet": "    public void testLastIndexOf_String() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n    }",
        "begin_line": 230,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 62)",
            "(line 232,col 9)-(line 232,col 60)",
            "(line 233,col 9)-(line 233,col 59)",
            "(line 234,col 9)-(line 234,col 57)",
            "(line 235,col 9)-(line 235,col 65)",
            "(line 236,col 9)-(line 236,col 66)",
            "(line 237,col 9)-(line 237,col 66)",
            "(line 238,col 9)-(line 238,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf()",
        "snippet": "    public void testLastOrdinalIndexOf() {\n        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42) );\n        assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42) );\n        assertEquals(0, StringUtils.lastOrdinalIndexOf(\"\", \"\", 42) );\n        assertEquals(7, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1) );\n        assertEquals(6, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2) );\n        assertEquals(5, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1) );\n        assertEquals(2, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2) );\n        assertEquals(4, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) );\n        assertEquals(1, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) );\n        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1) );\n        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2) );\n    }",
        "begin_line": 241,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 73)",
            "(line 243,col 9)-(line 243,col 73)",
            "(line 244,col 9)-(line 244,col 69)",
            "(line 245,col 9)-(line 245,col 77)",
            "(line 246,col 9)-(line 246,col 77)",
            "(line 247,col 9)-(line 247,col 77)",
            "(line 248,col 9)-(line 248,col 77)",
            "(line 249,col 9)-(line 249,col 78)",
            "(line 250,col 9)-(line 250,col 78)",
            "(line 251,col 9)-(line 251,col 76)",
            "(line 252,col 9)-(line 252,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt()",
        "snippet": "    public void testLastIndexOf_StringInt() {\n        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n    }",
        "begin_line": 255,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 65)",
            "(line 257,col 9)-(line 257,col 66)",
            "(line 258,col 9)-(line 258,col 63)",
            "(line 259,col 9)-(line 259,col 64)",
            "(line 260,col 9)-(line 260,col 63)",
            "(line 261,col 9)-(line 261,col 64)",
            "(line 262,col 9)-(line 262,col 60)",
            "(line 263,col 9)-(line 263,col 62)",
            "(line 264,col 9)-(line 264,col 60)",
            "(line 265,col 9)-(line 265,col 63)",
            "(line 266,col 9)-(line 266,col 65)",
            "(line 267,col 9)-(line 267,col 63)",
            "(line 268,col 9)-(line 268,col 69)",
            "(line 269,col 9)-(line 269,col 69)",
            "(line 270,col 9)-(line 270,col 70)",
            "(line 271,col 9)-(line 271,col 69)",
            "(line 272,col 9)-(line 272,col 69)",
            "(line 273,col 9)-(line 273,col 71)",
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_String()",
        "snippet": "    public void testLastIndexOfIgnoreCase_String() {\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\"));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"a\"));\n        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\"));\n        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"\"));\n        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"a\"));\n        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\"));\n        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"b\"));\n        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\"));\n        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"ab\", \"AAB\"));\n        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\n    }",
        "begin_line": 278,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 72)",
            "(line 280,col 9)-(line 280,col 70)",
            "(line 281,col 9)-(line 281,col 70)",
            "(line 282,col 9)-(line 282,col 69)",
            "(line 283,col 9)-(line 283,col 67)",
            "(line 284,col 9)-(line 284,col 75)",
            "(line 285,col 9)-(line 285,col 76)",
            "(line 286,col 9)-(line 286,col 76)",
            "(line 287,col 9)-(line 287,col 76)",
            "(line 288,col 9)-(line 288,col 76)",
            "(line 289,col 9)-(line 289,col 77)",
            "(line 290,col 9)-(line 290,col 77)",
            "(line 291,col 9)-(line 291,col 73)",
            "(line 292,col 9)-(line 292,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_StringInt()",
        "snippet": "    public void testLastIndexOfIgnoreCase_StringInt() {\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", -1));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, 0));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, -1));\n        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", -1));\n        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 9));\n        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 0));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", -1));\n        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 9));\n        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8));\n        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8));\n        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 3));\n        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1));\n        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0));\n        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0));\n        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\n    }",
        "begin_line": 295,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 75)",
            "(line 297,col 9)-(line 297,col 76)",
            "(line 298,col 9)-(line 298,col 73)",
            "(line 299,col 9)-(line 299,col 74)",
            "(line 300,col 9)-(line 300,col 73)",
            "(line 301,col 9)-(line 301,col 74)",
            "(line 302,col 9)-(line 302,col 70)",
            "(line 303,col 9)-(line 303,col 72)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 73)",
            "(line 306,col 9)-(line 306,col 75)",
            "(line 307,col 9)-(line 307,col 73)",
            "(line 308,col 9)-(line 308,col 79)",
            "(line 309,col 9)-(line 309,col 79)",
            "(line 310,col 9)-(line 310,col 80)",
            "(line 311,col 9)-(line 311,col 79)",
            "(line 312,col 9)-(line 312,col 79)",
            "(line 313,col 9)-(line 313,col 81)",
            "(line 314,col 9)-(line 314,col 80)",
            "(line 315,col 9)-(line 315,col 79)",
            "(line 316,col 9)-(line 316,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsChar()",
        "snippet": "    public void testContainsChar() {\n        assertEquals(false, StringUtils.contains(null, ' '));\n        assertEquals(false, StringUtils.contains(\"\", ' '));\n        assertEquals(false, StringUtils.contains(\"\",null));\n        assertEquals(false, StringUtils.contains(null,null));\n        assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n        assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n        assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n        assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n    }",
        "begin_line": 320,
        "end_line": 329,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 61)",
            "(line 322,col 9)-(line 322,col 59)",
            "(line 323,col 9)-(line 323,col 59)",
            "(line 324,col 9)-(line 324,col 61)",
            "(line 325,col 9)-(line 325,col 61)",
            "(line 326,col 9)-(line 326,col 61)",
            "(line 327,col 9)-(line 327,col 61)",
            "(line 328,col 9)-(line 328,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsString()",
        "snippet": "    public void testContainsString() {\n        assertEquals(false, StringUtils.contains(null, null));\n        assertEquals(false, StringUtils.contains(null, \"\"));\n        assertEquals(false, StringUtils.contains(null, \"a\"));\n        assertEquals(false, StringUtils.contains(\"\", null));\n        assertEquals(true, StringUtils.contains(\"\", \"\"));\n        assertEquals(false, StringUtils.contains(\"\", \"a\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"a\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"b\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"c\"));\n        assertEquals(true, StringUtils.contains(\"abc\", \"abc\"));\n        assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n    }",
        "begin_line": 331,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 62)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 61)",
            "(line 335,col 9)-(line 335,col 60)",
            "(line 336,col 9)-(line 336,col 57)",
            "(line 337,col 9)-(line 337,col 59)",
            "(line 338,col 9)-(line 338,col 61)",
            "(line 339,col 9)-(line 339,col 61)",
            "(line 340,col 9)-(line 340,col 61)",
            "(line 341,col 9)-(line 341,col 63)",
            "(line 342,col 9)-(line 342,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString()",
        "snippet": "    public void testContainsIgnoreCase_StringString() {\n        assertFalse(StringUtils.containsIgnoreCase(null, null));\n        \n        // Null tests\n        assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\n        assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\n        assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\n        \n        assertFalse(StringUtils.containsIgnoreCase(\"\", null));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\n        assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\n        \n        // Match len = 0\n        assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\n\n        // Match len = 1\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\n        \n        // Match len > 1\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\n        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\n        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n    }",
        "begin_line": 345,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 64)",
            "(line 349,col 9)-(line 349,col 62)",
            "(line 350,col 9)-(line 350,col 63)",
            "(line 351,col 9)-(line 351,col 65)",
            "(line 353,col 9)-(line 353,col 62)",
            "(line 354,col 9)-(line 354,col 63)",
            "(line 355,col 9)-(line 355,col 65)",
            "(line 358,col 9)-(line 358,col 59)",
            "(line 359,col 9)-(line 359,col 60)",
            "(line 360,col 9)-(line 360,col 62)",
            "(line 363,col 9)-(line 363,col 61)",
            "(line 364,col 9)-(line 364,col 61)",
            "(line 365,col 9)-(line 365,col 63)",
            "(line 366,col 9)-(line 366,col 61)",
            "(line 367,col 9)-(line 367,col 61)",
            "(line 368,col 9)-(line 368,col 63)",
            "(line 371,col 9)-(line 371,col 63)",
            "(line 372,col 9)-(line 372,col 64)",
            "(line 373,col 9)-(line 373,col 67)",
            "(line 374,col 9)-(line 374,col 63)",
            "(line 375,col 9)-(line 375,col 64)",
            "(line 376,col 9)-(line 376,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence()",
        "snippet": "    public void testContainsIgnoreCase_LocaleIndependence() {\n        Locale orig = Locale.getDefault();\n\n        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n\n        String[][] tdata = { \n            { \"i\", \"I\" },\n            { \"I\", \"i\" },\n            { \"\\u03C2\", \"\\u03C3\" },\n            { \"\\u03A3\", \"\\u03C2\" },\n            { \"\\u03A3\", \"\\u03C3\" },\n        };\n\n        String[][] fdata = { \n            { \"\\u00DF\", \"SS\" },\n        };\n\n        try {\n            for (int i = 0; i < locales.length; i++) {\n                Locale.setDefault(locales[i]);\n                for (int j = 0; j < tdata.length; j++) {\n                    assertTrue(Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1], StringUtils\n                            .containsIgnoreCase(tdata[j][0], tdata[j][1]));\n                }\n                for (int j = 0; j < fdata.length; j++) {\n                    assertFalse(Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1], StringUtils\n                            .containsIgnoreCase(fdata[j][0], fdata[j][1]));\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }",
        "begin_line": 379,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 42)",
            "(line 382,col 9)-(line 382,col 85)",
            "(line 384,col 9)-(line 390,col 10)",
            "(line 392,col 9)-(line 394,col 10)",
            "(line 396,col 9)-(line 410,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringarray()",
        "snippet": "    public void testIndexOfAny_StringStringarray() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n    }",
        "begin_line": 414,
        "end_line": 429,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 72)",
            "(line 416,col 9)-(line 416,col 73)",
            "(line 417,col 9)-(line 417,col 74)",
            "(line 418,col 9)-(line 418,col 74)",
            "(line 419,col 9)-(line 419,col 72)",
            "(line 420,col 9)-(line 420,col 70)",
            "(line 421,col 9)-(line 421,col 68)",
            "(line 422,col 9)-(line 422,col 80)",
            "(line 423,col 9)-(line 423,col 75)",
            "(line 424,col 9)-(line 424,col 71)",
            "(line 425,col 9)-(line 425,col 73)",
            "(line 426,col 9)-(line 426,col 74)",
            "(line 427,col 9)-(line 427,col 78)",
            "(line 428,col 9)-(line 428,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfAny_StringStringarray()",
        "snippet": "    public void testLastIndexOfAny_StringStringarray() {\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n    }",
        "begin_line": 431,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 65)",
            "(line 433,col 9)-(line 433,col 77)",
            "(line 434,col 9)-(line 434,col 67)",
            "(line 435,col 9)-(line 435,col 78)",
            "(line 436,col 9)-(line 436,col 76)",
            "(line 437,col 9)-(line 437,col 74)",
            "(line 438,col 9)-(line 438,col 72)",
            "(line 439,col 9)-(line 439,col 84)",
            "(line 440,col 9)-(line 440,col 79)",
            "(line 441,col 9)-(line 441,col 75)",
            "(line 442,col 9)-(line 442,col 77)",
            "(line 443,col 9)-(line 443,col 78)",
            "(line 444,col 9)-(line 444,col 82)",
            "(line 445,col 9)-(line 445,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringChararray()",
        "snippet": "    public void testIndexOfAny_StringChararray() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n    }",
        "begin_line": 449,
        "end_line": 463,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 70)",
            "(line 451,col 9)-(line 451,col 68)",
            "(line 452,col 9)-(line 452,col 77)",
            "(line 454,col 9)-(line 454,col 68)",
            "(line 455,col 9)-(line 455,col 66)",
            "(line 456,col 9)-(line 456,col 75)",
            "(line 458,col 9)-(line 458,col 78)",
            "(line 459,col 9)-(line 459,col 76)",
            "(line 460,col 9)-(line 460,col 84)",
            "(line 461,col 9)-(line 461,col 84)",
            "(line 462,col 9)-(line 462,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringString()",
        "snippet": "    public void testIndexOfAny_StringString() {\n        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n    }",
        "begin_line": 465,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 70)",
            "(line 467,col 9)-(line 467,col 59)",
            "(line 468,col 9)-(line 468,col 61)",
            "(line 470,col 9)-(line 470,col 68)",
            "(line 471,col 9)-(line 471,col 57)",
            "(line 472,col 9)-(line 472,col 59)",
            "(line 474,col 9)-(line 474,col 78)",
            "(line 475,col 9)-(line 475,col 67)",
            "(line 476,col 9)-(line 476,col 68)",
            "(line 477,col 9)-(line 477,col 68)",
            "(line 478,col 9)-(line 478,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringChararray()",
        "snippet": "    public void testContainsAny_StringChararray() {\n        assertFalse(StringUtils.containsAny(null, (char[]) null));\n        assertFalse(StringUtils.containsAny(null, new char[0]));\n        assertFalse(StringUtils.containsAny(null, new char[] {'a','b'}));\n        \n        assertFalse(StringUtils.containsAny(\"\", (char[]) null));\n        assertFalse(StringUtils.containsAny(\"\", new char[0]));\n        assertFalse(StringUtils.containsAny(\"\", new char[] {'a','b'}));\n        \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null)); \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0])); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'b','y'}));\n        assertFalse(StringUtils.containsAny(\"ab\", new char[] {'z'}));\n    }",
        "begin_line": 482,
        "end_line": 496,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 66)",
            "(line 484,col 9)-(line 484,col 64)",
            "(line 485,col 9)-(line 485,col 73)",
            "(line 487,col 9)-(line 487,col 64)",
            "(line 488,col 9)-(line 488,col 62)",
            "(line 489,col 9)-(line 489,col 71)",
            "(line 491,col 9)-(line 491,col 74)",
            "(line 492,col 9)-(line 492,col 72)",
            "(line 493,col 9)-(line 493,col 80)",
            "(line 494,col 9)-(line 494,col 80)",
            "(line 495,col 9)-(line 495,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringString()",
        "snippet": "    public void testContainsAny_StringString() {\n        assertFalse(StringUtils.containsAny(null, (String) null));\n        assertFalse(StringUtils.containsAny(null, \"\"));\n        assertFalse(StringUtils.containsAny(null, \"ab\"));\n        \n        assertFalse(StringUtils.containsAny(\"\", (String) null));\n        assertFalse(StringUtils.containsAny(\"\", \"\"));\n        assertFalse(StringUtils.containsAny(\"\", \"ab\"));\n        \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null)); \n        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\")); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\")); \n        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\n        assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\n    }",
        "begin_line": 498,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 499,col 9)-(line 499,col 66)",
            "(line 500,col 9)-(line 500,col 55)",
            "(line 501,col 9)-(line 501,col 57)",
            "(line 503,col 9)-(line 503,col 64)",
            "(line 504,col 9)-(line 504,col 53)",
            "(line 505,col 9)-(line 505,col 55)",
            "(line 507,col 9)-(line 507,col 74)",
            "(line 508,col 9)-(line 508,col 63)",
            "(line 509,col 9)-(line 509,col 64)",
            "(line 510,col 9)-(line 510,col 64)",
            "(line 511,col 9)-(line 511,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringChararray()",
        "snippet": "    public void testIndexOfAnyBut_StringChararray() {\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n    }",
        "begin_line": 515,
        "end_line": 529,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 516,col 9)-(line 516,col 73)",
            "(line 517,col 9)-(line 517,col 71)",
            "(line 518,col 9)-(line 518,col 80)",
            "(line 520,col 9)-(line 520,col 71)",
            "(line 521,col 9)-(line 521,col 69)",
            "(line 522,col 9)-(line 522,col 78)",
            "(line 524,col 9)-(line 524,col 81)",
            "(line 525,col 9)-(line 525,col 79)",
            "(line 526,col 9)-(line 526,col 87)",
            "(line 527,col 9)-(line 527,col 87)",
            "(line 528,col 9)-(line 528,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString()",
        "snippet": "    public void testIndexOfAnyBut_StringString() {\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n        \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n    }",
        "begin_line": 531,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 532,col 9)-(line 532,col 73)",
            "(line 533,col 9)-(line 533,col 62)",
            "(line 534,col 9)-(line 534,col 64)",
            "(line 536,col 9)-(line 536,col 71)",
            "(line 537,col 9)-(line 537,col 60)",
            "(line 538,col 9)-(line 538,col 62)",
            "(line 540,col 9)-(line 540,col 81)",
            "(line 541,col 9)-(line 541,col 70)",
            "(line 542,col 9)-(line 542,col 71)",
            "(line 543,col 9)-(line 543,col 71)",
            "(line 544,col 9)-(line 544,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_String()",
        "snippet": "    public void testContainsOnly_String() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab\";\n        String chars1= \"b\";\n        String chars2= \"a\";\n        String chars3= \"ab\";\n        assertEquals(false, StringUtils.containsOnly(null, (String) null));\n        assertEquals(false, StringUtils.containsOnly(\"\", (String) null));\n        assertEquals(false, StringUtils.containsOnly(null, \"\"));\n        assertEquals(false, StringUtils.containsOnly(str1, \"\"));\n        assertEquals(true, StringUtils.containsOnly(\"\", \"\"));\n        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n    }",
        "begin_line": 548,
        "end_line": 570,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 549,col 9)-(line 549,col 26)",
            "(line 550,col 9)-(line 550,col 26)",
            "(line 551,col 9)-(line 551,col 27)",
            "(line 552,col 9)-(line 552,col 27)",
            "(line 553,col 9)-(line 553,col 27)",
            "(line 554,col 9)-(line 554,col 28)",
            "(line 555,col 9)-(line 555,col 75)",
            "(line 556,col 9)-(line 556,col 73)",
            "(line 557,col 9)-(line 557,col 64)",
            "(line 558,col 9)-(line 558,col 64)",
            "(line 559,col 9)-(line 559,col 61)",
            "(line 560,col 9)-(line 560,col 65)",
            "(line 561,col 9)-(line 561,col 68)",
            "(line 562,col 9)-(line 562,col 67)",
            "(line 563,col 9)-(line 563,col 67)",
            "(line 564,col 9)-(line 564,col 67)",
            "(line 565,col 9)-(line 565,col 68)",
            "(line 566,col 9)-(line 566,col 67)",
            "(line 567,col 9)-(line 567,col 68)",
            "(line 568,col 9)-(line 568,col 68)",
            "(line 569,col 9)-(line 569,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_Chararray()",
        "snippet": "    public void testContainsOnly_Chararray() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab\";\n        char[] chars1= {'b'};\n        char[] chars2= {'a'};\n        char[] chars3= {'a', 'b'};\n        char[] emptyChars = new char[0];\n        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n    }",
        "begin_line": 572,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 573,col 9)-(line 573,col 26)",
            "(line 574,col 9)-(line 574,col 26)",
            "(line 575,col 9)-(line 575,col 27)",
            "(line 576,col 9)-(line 576,col 29)",
            "(line 577,col 9)-(line 577,col 29)",
            "(line 578,col 9)-(line 578,col 34)",
            "(line 579,col 9)-(line 579,col 40)",
            "(line 580,col 9)-(line 580,col 75)",
            "(line 581,col 9)-(line 581,col 73)",
            "(line 582,col 9)-(line 582,col 72)",
            "(line 583,col 9)-(line 583,col 72)",
            "(line 584,col 9)-(line 584,col 69)",
            "(line 585,col 9)-(line 585,col 65)",
            "(line 586,col 9)-(line 586,col 68)",
            "(line 587,col 9)-(line 587,col 67)",
            "(line 588,col 9)-(line 588,col 67)",
            "(line 589,col 9)-(line 589,col 67)",
            "(line 590,col 9)-(line 590,col 68)",
            "(line 591,col 9)-(line 591,col 67)",
            "(line 592,col 9)-(line 592,col 68)",
            "(line 593,col 9)-(line 593,col 68)",
            "(line 594,col 9)-(line 594,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_String()",
        "snippet": "    public void testContainsNone_String() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab.\";\n        String chars1= \"b\";\n        String chars2= \".\";\n        String chars3= \"cd\";\n        assertEquals(true, StringUtils.containsNone(null, (String) null));\n        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n        assertEquals(true, StringUtils.containsNone(null, \"\"));\n        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars2));\n        assertEquals(true, StringUtils.containsNone(str1, chars3));\n        assertEquals(false, StringUtils.containsNone(str2, chars1));\n        assertEquals(true, StringUtils.containsNone(str2, chars2));\n        assertEquals(true, StringUtils.containsNone(str2, chars3));\n        assertEquals(false, StringUtils.containsNone(str3, chars1));\n        assertEquals(false, StringUtils.containsNone(str3, chars2));\n        assertEquals(true, StringUtils.containsNone(str3, chars3));\n    }",
        "begin_line": 597,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 598,col 9)-(line 598,col 26)",
            "(line 599,col 9)-(line 599,col 26)",
            "(line 600,col 9)-(line 600,col 28)",
            "(line 601,col 9)-(line 601,col 27)",
            "(line 602,col 9)-(line 602,col 27)",
            "(line 603,col 9)-(line 603,col 28)",
            "(line 604,col 9)-(line 604,col 74)",
            "(line 605,col 9)-(line 605,col 72)",
            "(line 606,col 9)-(line 606,col 63)",
            "(line 607,col 9)-(line 607,col 63)",
            "(line 608,col 9)-(line 608,col 61)",
            "(line 609,col 9)-(line 609,col 65)",
            "(line 610,col 9)-(line 610,col 67)",
            "(line 611,col 9)-(line 611,col 67)",
            "(line 612,col 9)-(line 612,col 67)",
            "(line 613,col 9)-(line 613,col 68)",
            "(line 614,col 9)-(line 614,col 67)",
            "(line 615,col 9)-(line 615,col 67)",
            "(line 616,col 9)-(line 616,col 68)",
            "(line 617,col 9)-(line 617,col 68)",
            "(line 618,col 9)-(line 618,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_Chararray()",
        "snippet": "    public void testContainsNone_Chararray() {\n        String str1 = \"a\";\n        String str2 = \"b\";\n        String str3 = \"ab.\";\n        char[] chars1= {'b'};\n        char[] chars2= {'.'};\n        char[] chars3= {'c', 'd'};\n        char[] emptyChars = new char[0];\n        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars1));\n        assertEquals(true, StringUtils.containsNone(str1, chars2));\n        assertEquals(true, StringUtils.containsNone(str1, chars3));\n        assertEquals(false, StringUtils.containsNone(str2, chars1));\n        assertEquals(true, StringUtils.containsNone(str2, chars2));\n        assertEquals(true, StringUtils.containsNone(str2, chars3));\n        assertEquals(false, StringUtils.containsNone(str3, chars1));\n        assertEquals(false, StringUtils.containsNone(str3, chars2));\n        assertEquals(true, StringUtils.containsNone(str3, chars3));\n    }",
        "begin_line": 621,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 622,col 9)-(line 622,col 26)",
            "(line 623,col 9)-(line 623,col 26)",
            "(line 624,col 9)-(line 624,col 28)",
            "(line 625,col 9)-(line 625,col 29)",
            "(line 626,col 9)-(line 626,col 29)",
            "(line 627,col 9)-(line 627,col 34)",
            "(line 628,col 9)-(line 628,col 40)",
            "(line 629,col 9)-(line 629,col 74)",
            "(line 630,col 9)-(line 630,col 72)",
            "(line 631,col 9)-(line 631,col 71)",
            "(line 632,col 9)-(line 632,col 71)",
            "(line 633,col 9)-(line 633,col 69)",
            "(line 634,col 9)-(line 634,col 65)",
            "(line 635,col 9)-(line 635,col 67)",
            "(line 636,col 9)-(line 636,col 67)",
            "(line 637,col 9)-(line 637,col 67)",
            "(line 638,col 9)-(line 638,col 68)",
            "(line 639,col 9)-(line 639,col 67)",
            "(line 640,col 9)-(line 640,col 67)",
            "(line 641,col 9)-(line 641,col 68)",
            "(line 642,col 9)-(line 642,col 68)",
            "(line 643,col 9)-(line 643,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.ValidateTest(java.lang.String)",
        "snippet": "    public ValidateTest(String name) {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testIsTrue1()",
        "snippet": "    public void testIsTrue1() {\n        Validate.isTrue(true);\n        try {\n            Validate.isTrue(false);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated expression is false\", ex.getMessage());\n        }\n    }",
        "begin_line": 46,
        "end_line": 54,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 30)",
            "(line 48,col 9)-(line 53,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testIsTrue2()",
        "snippet": "    public void testIsTrue2() {\n        Validate.isTrue(true, \"MSG\");\n        try {\n            Validate.isTrue(false, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 57,
        "end_line": 65,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 37)",
            "(line 59,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testIsTrue3()",
        "snippet": "    public void testIsTrue3() {\n        Validate.isTrue(true, \"MSG\", new Integer(6));\n        try {\n            Validate.isTrue(false, \"MSG\", new Integer(6));\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 68,
        "end_line": 76,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 53)",
            "(line 70,col 9)-(line 75,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testIsTrue4()",
        "snippet": "    public void testIsTrue4() {\n        Validate.isTrue(true, \"MSG\", 7);\n        try {\n            Validate.isTrue(false, \"MSG\", 7);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 79,
        "end_line": 87,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 40)",
            "(line 81,col 9)-(line 86,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testIsTrue5()",
        "snippet": "    public void testIsTrue5() {\n        Validate.isTrue(true, \"MSG\", 7.4d);\n        try {\n            Validate.isTrue(false, \"MSG\", 7.4d);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n    }",
        "begin_line": 90,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 43)",
            "(line 92,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotNull1()",
        "snippet": "    public void testNotNull1() {\n        Validate.notNull(new Object());\n        try {\n            Validate.notNull(null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        \n        String str = \"Hi\";\n        String testStr = Validate.notNull(str);\n        assertSame(str, testStr);\n    }",
        "begin_line": 102,
        "end_line": 114,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 109,col 9)",
            "(line 111,col 9)-(line 111,col 26)",
            "(line 112,col 9)-(line 112,col 47)",
            "(line 113,col 9)-(line 113,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotNull2()",
        "snippet": "    public void testNotNull2() {\n        Validate.notNull(new Object(), \"MSG\");\n        try {\n            Validate.notNull(null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        \n        String str = \"Hi\";\n        String testStr = Validate.notNull(str, \"Message\");\n        assertSame(str, testStr);\n    }",
        "begin_line": 117,
        "end_line": 129,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 46)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 126,col 9)-(line 126,col 26)",
            "(line 127,col 9)-(line 127,col 58)",
            "(line 128,col 9)-(line 128,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyArray1()",
        "snippet": "    public void testNotEmptyArray1() {\n        Validate.notEmpty(new Object[] {null});\n        try {\n            Validate.notEmpty((Object[]) null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated array is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(new Object[0]);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated array is empty\", ex.getMessage());\n        }\n        \n        String[] array = new String[] {\"hi\"};\n        String[] test = Validate.notEmpty(array);\n        assertSame(array, test);\n    }",
        "begin_line": 133,
        "end_line": 151,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 47)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 146,col 9)",
            "(line 148,col 9)-(line 148,col 45)",
            "(line 149,col 9)-(line 149,col 49)",
            "(line 150,col 9)-(line 150,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyArray2()",
        "snippet": "    public void testNotEmptyArray2() {\n        Validate.notEmpty(new Object[] {null}, \"MSG\");\n        try {\n            Validate.notEmpty((Object[]) null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(new Object[0], \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        \n        String[] array = new String[] {\"hi\"};\n        String[] test = Validate.notEmpty(array, \"Message\");\n        assertSame(array, test);\n    }",
        "begin_line": 154,
        "end_line": 172,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 54)",
            "(line 156,col 9)-(line 161,col 9)",
            "(line 162,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 169,col 45)",
            "(line 170,col 9)-(line 170,col 60)",
            "(line 171,col 9)-(line 171,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyCollection1()",
        "snippet": "    public void testNotEmptyCollection1() {\n        Collection<Integer> coll = new ArrayList<Integer>();\n        try {\n            Validate.notEmpty((Collection<?>) null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated collection is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(coll);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated collection is empty\", ex.getMessage());\n        }\n        coll.add(new Integer(8));\n        Validate.notEmpty(coll);\n        \n        Collection<Integer> test = Validate.notEmpty(coll);\n        assertSame(coll, test);\n    }",
        "begin_line": 176,
        "end_line": 195,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 60)",
            "(line 178,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 189,col 9)",
            "(line 190,col 9)-(line 190,col 33)",
            "(line 191,col 9)-(line 191,col 32)",
            "(line 193,col 9)-(line 193,col 59)",
            "(line 194,col 9)-(line 194,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyCollection2()",
        "snippet": "    public void testNotEmptyCollection2() {\n        Collection<Integer> coll = new ArrayList<Integer>();\n        try {\n            Validate.notEmpty((Collection<?>) null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(coll, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        coll.add(new Integer(8));\n        Validate.notEmpty(coll, \"MSG\");\n        \n        Collection<Integer> test = Validate.notEmpty(coll, \"Message\");\n        assertSame(coll, test);\n    }",
        "begin_line": 198,
        "end_line": 217,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 60)",
            "(line 200,col 9)-(line 205,col 9)",
            "(line 206,col 9)-(line 211,col 9)",
            "(line 212,col 9)-(line 212,col 33)",
            "(line 213,col 9)-(line 213,col 39)",
            "(line 215,col 9)-(line 215,col 70)",
            "(line 216,col 9)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyMap1()",
        "snippet": "    public void testNotEmptyMap1() {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        try {\n            Validate.notEmpty((Map<?, ?>) null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated map is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(map);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated map is empty\", ex.getMessage());\n        }\n        map.put(\"ll\", new Integer(8));\n        Validate.notEmpty(map);\n        \n        Map<String, Integer> test = Validate.notEmpty(map);\n        assertSame(map, test);\n    }",
        "begin_line": 221,
        "end_line": 240,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 66)",
            "(line 223,col 9)-(line 228,col 9)",
            "(line 229,col 9)-(line 234,col 9)",
            "(line 235,col 9)-(line 235,col 38)",
            "(line 236,col 9)-(line 236,col 31)",
            "(line 238,col 9)-(line 238,col 59)",
            "(line 239,col 9)-(line 239,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyMap2()",
        "snippet": "    public void testNotEmptyMap2() {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        try {\n            Validate.notEmpty((Map<?, ?>) null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(map, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        map.put(\"ll\", new Integer(8));\n        Validate.notEmpty(map, \"MSG\");\n        \n        Map<String, Integer> test = Validate.notEmpty(map, \"Message\");\n        assertSame(map, test);\n    }",
        "begin_line": 243,
        "end_line": 262,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 66)",
            "(line 245,col 9)-(line 250,col 9)",
            "(line 251,col 9)-(line 256,col 9)",
            "(line 257,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 258,col 38)",
            "(line 260,col 9)-(line 260,col 70)",
            "(line 261,col 9)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyString1()",
        "snippet": "    public void testNotEmptyString1() {\n        Validate.notEmpty(\"hjl\");\n        try {\n            Validate.notEmpty((String) null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated character sequence is empty\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(\"\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated character sequence is empty\", ex.getMessage());\n        }\n        \n        String str = \"Hi\";\n        String testStr = Validate.notEmpty(str);\n        assertSame(str, testStr);\n    }",
        "begin_line": 266,
        "end_line": 284,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 33)",
            "(line 268,col 9)-(line 273,col 9)",
            "(line 274,col 9)-(line 279,col 9)",
            "(line 281,col 9)-(line 281,col 26)",
            "(line 282,col 9)-(line 282,col 48)",
            "(line 283,col 9)-(line 283,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotEmptyString2()",
        "snippet": "    public void testNotEmptyString2() {\n        Validate.notEmpty(\"a\", \"MSG\");\n        try {\n            Validate.notEmpty((String) null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        try {\n            Validate.notEmpty(\"\", \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        \n        String str = \"Hi\";\n        String testStr = Validate.notEmpty(str, \"Message\");\n        assertSame(str, testStr);\n    }",
        "begin_line": 287,
        "end_line": 305,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 38)",
            "(line 289,col 9)-(line 294,col 9)",
            "(line 295,col 9)-(line 300,col 9)",
            "(line 302,col 9)-(line 302,col 26)",
            "(line 303,col 9)-(line 303,col 59)",
            "(line 304,col 9)-(line 304,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankNullStringShouldThrow()",
        "snippet": "    public void testNotBlankNullStringShouldThrow() {\n        //given\n        String string = null;\n\n        try {\n            //when\n            Validate.notBlank(string);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException e) {\n            //then\n            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n        }\n    }",
        "begin_line": 309,
        "end_line": 321,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 29)",
            "(line 313,col 9)-(line 320,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgNullStringShouldThrow()",
        "snippet": "    public void testNotBlankMsgNullStringShouldThrow() {\n        //given\n        String string = null;\n\n        try {\n            //when\n            Validate.notBlank(string, \"Message\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException e) {\n            //then\n            assertEquals(\"Message\", e.getMessage());\n        }\n    }",
        "begin_line": 324,
        "end_line": 336,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 29)",
            "(line 328,col 9)-(line 335,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankEmptyStringShouldThrow()",
        "snippet": "    public void testNotBlankEmptyStringShouldThrow() {\n        //given\n        String string = \"\";\n\n        try {\n            //when\n            Validate.notBlank(string);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            //then\n            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n        }\n    }",
        "begin_line": 339,
        "end_line": 351,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 27)",
            "(line 343,col 9)-(line 350,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankBlankStringWithWhitespacesShouldThrow()",
        "snippet": "    public void testNotBlankBlankStringWithWhitespacesShouldThrow() {\n        //given\n        String string = \"   \";\n\n        try {\n            //when\n            Validate.notBlank(string);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            //then\n            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n        }\n    }",
        "begin_line": 354,
        "end_line": 366,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 30)",
            "(line 358,col 9)-(line 365,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankBlankStringWithNewlinesShouldThrow()",
        "snippet": "    public void testNotBlankBlankStringWithNewlinesShouldThrow() {\n        //given\n        String string = \" \\n \\t \\r \\n \";\n\n        try {\n            //when\n            Validate.notBlank(string);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            //then\n            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n        }\n    }",
        "begin_line": 369,
        "end_line": 381,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 40)",
            "(line 373,col 9)-(line 380,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgBlankStringShouldThrow()",
        "snippet": "    public void testNotBlankMsgBlankStringShouldThrow() {\n        //given\n        String string = \" \\n \\t \\r \\n \";\n\n        try {\n            //when\n            Validate.notBlank(string, \"Message\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            //then\n            assertEquals(\"Message\", e.getMessage());\n        }\n    }",
        "begin_line": 384,
        "end_line": 396,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 40)",
            "(line 388,col 9)-(line 395,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgBlankStringWithWhitespacesShouldThrow()",
        "snippet": "    public void testNotBlankMsgBlankStringWithWhitespacesShouldThrow() {\n        //given\n        String string = \"   \";\n\n        try {\n            //when\n            Validate.notBlank(string, \"Message\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            //then\n            assertEquals(\"Message\", e.getMessage());\n        }\n    }",
        "begin_line": 399,
        "end_line": 411,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 30)",
            "(line 403,col 9)-(line 410,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgEmptyStringShouldThrow()",
        "snippet": "    public void testNotBlankMsgEmptyStringShouldThrow() {\n        //given\n        String string = \"\";\n\n        try {\n            //when\n            Validate.notBlank(string, \"Message\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            //then\n            assertEquals(\"Message\", e.getMessage());\n        }\n    }",
        "begin_line": 414,
        "end_line": 426,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 27)",
            "(line 418,col 9)-(line 425,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringShouldNotThrow()",
        "snippet": "    public void testNotBlankNotBlankStringShouldNotThrow() {\n        //given\n        String string = \"abc\";\n\n        //when\n        Validate.notBlank(string);\n\n        //then should not throw\n    }",
        "begin_line": 429,
        "end_line": 437,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 30)",
            "(line 434,col 9)-(line 434,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringWithWhitespacesShouldNotThrow()",
        "snippet": "    public void testNotBlankNotBlankStringWithWhitespacesShouldNotThrow() {\n        //given\n        String string = \"  abc   \";\n\n        //when\n        Validate.notBlank(string);\n\n        //then should not throw\n    }",
        "begin_line": 440,
        "end_line": 448,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 35)",
            "(line 445,col 9)-(line 445,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringWithNewlinesShouldNotThrow()",
        "snippet": "    public void testNotBlankNotBlankStringWithNewlinesShouldNotThrow() {\n        //given\n        String string = \" \\n \\t abc \\r \\n \";\n\n        //when\n        Validate.notBlank(string);\n\n        //then should not throw\n    }",
        "begin_line": 451,
        "end_line": 459,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 44)",
            "(line 456,col 9)-(line 456,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringShouldNotThrow()",
        "snippet": "    public void testNotBlankMsgNotBlankStringShouldNotThrow() {\n        //given\n        String string = \"abc\";\n\n        //when\n        Validate.notBlank(string, \"Message\");\n\n        //then should not throw\n    }",
        "begin_line": 462,
        "end_line": 470,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 30)",
            "(line 467,col 9)-(line 467,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow()",
        "snippet": "    public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow() {\n        //given\n        String string = \"  abc   \";\n\n        //when\n        Validate.notBlank(string, \"Message\");\n\n        //then should not throw\n    }",
        "begin_line": 473,
        "end_line": 481,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 475,col 9)-(line 475,col 35)",
            "(line 478,col 9)-(line 478,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow()",
        "snippet": "    public void testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow() {\n        //given\n        String string = \" \\n \\t abc \\r \\n \";\n\n        //when\n        Validate.notBlank(string, \"Message\");\n\n        //then should not throw\n    }",
        "begin_line": 484,
        "end_line": 492,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 44)",
            "(line 489,col 9)-(line 489,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankReturnValues1()",
        "snippet": "    public void testNotBlankReturnValues1() {\n        String str = \"Hi\";\n        String test = Validate.notBlank(str);\n        assertSame(str, test);\n    }",
        "begin_line": 495,
        "end_line": 499,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 26)",
            "(line 497,col 9)-(line 497,col 45)",
            "(line 498,col 9)-(line 498,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNotBlankReturnValues2()",
        "snippet": "    public void testNotBlankReturnValues2() {\n        String str = \"Hi\";\n        String test = Validate.notBlank(str, \"Message\");\n        assertSame(str, test);\n    }",
        "begin_line": 501,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 502,col 9)-(line 502,col 26)",
            "(line 503,col 9)-(line 503,col 56)",
            "(line 504,col 9)-(line 504,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNoNullElementsArray1()",
        "snippet": "    public void testNoNullElementsArray1() {\n        String[] array = new String[] {\"a\", \"b\"};\n        Validate.noNullElements(array);\n        try {\n            Validate.noNullElements((Object[]) null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        array[1] = null;\n        try {\n            Validate.noNullElements(array);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n        }\n        \n        array = new String[] {\"a\", \"b\"};\n        String[] test = Validate.noNullElements(array);\n        assertSame(array, test);\n    }",
        "begin_line": 509,
        "end_line": 529,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 49)",
            "(line 511,col 9)-(line 511,col 39)",
            "(line 512,col 9)-(line 517,col 9)",
            "(line 518,col 9)-(line 518,col 24)",
            "(line 519,col 9)-(line 524,col 9)",
            "(line 526,col 9)-(line 526,col 40)",
            "(line 527,col 9)-(line 527,col 55)",
            "(line 528,col 9)-(line 528,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNoNullElementsArray2()",
        "snippet": "    public void testNoNullElementsArray2() {\n        String[] array = new String[] {\"a\", \"b\"};\n        Validate.noNullElements(array, \"MSG\");\n        try {\n            Validate.noNullElements((Object[]) null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        array[1] = null;\n        try {\n            Validate.noNullElements(array, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        \n        array = new String[] {\"a\", \"b\"};\n        String[] test = Validate.noNullElements(array, \"Message\");\n        assertSame(array, test);\n    }",
        "begin_line": 532,
        "end_line": 552,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 49)",
            "(line 534,col 9)-(line 534,col 46)",
            "(line 535,col 9)-(line 540,col 9)",
            "(line 541,col 9)-(line 541,col 24)",
            "(line 542,col 9)-(line 547,col 9)",
            "(line 549,col 9)-(line 549,col 40)",
            "(line 550,col 9)-(line 550,col 66)",
            "(line 551,col 9)-(line 551,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNoNullElementsCollection1()",
        "snippet": "    public void testNoNullElementsCollection1() {\n        List<String> coll = new ArrayList<String>();\n        coll.add(\"a\");\n        coll.add(\"b\");\n        Validate.noNullElements(coll);\n        try {\n            Validate.noNullElements((Collection<?>) null);\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        coll.set(1, null);\n        try {\n            Validate.noNullElements(coll);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n        }\n        \n        coll.set(1, \"b\");\n        List<String> test = Validate.noNullElements(coll);\n        assertSame(coll, test);\n    }",
        "begin_line": 556,
        "end_line": 578,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 557,col 9)-(line 557,col 52)",
            "(line 558,col 9)-(line 558,col 22)",
            "(line 559,col 9)-(line 559,col 22)",
            "(line 560,col 9)-(line 560,col 38)",
            "(line 561,col 9)-(line 566,col 9)",
            "(line 567,col 9)-(line 567,col 26)",
            "(line 568,col 9)-(line 573,col 9)",
            "(line 575,col 9)-(line 575,col 25)",
            "(line 576,col 9)-(line 576,col 58)",
            "(line 577,col 9)-(line 577,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testNoNullElementsCollection2()",
        "snippet": "    public void testNoNullElementsCollection2() {\n        List<String> coll = new ArrayList<String>();\n        coll.add(\"a\");\n        coll.add(\"b\");\n        Validate.noNullElements(coll, \"MSG\");\n        try {\n            Validate.noNullElements((Collection<?>) null, \"MSG\");\n            fail(\"Expecting NullPointerException\");\n        } catch (NullPointerException ex) {\n            assertEquals(\"The validated object is null\", ex.getMessage());\n        }\n        coll.set(1, null);\n        try {\n            Validate.noNullElements(coll, \"MSG\");\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"MSG\", ex.getMessage());\n        }\n        \n        coll.set(1, \"b\");\n        List<String> test = Validate.noNullElements(coll, \"Message\");\n        assertSame(coll, test);\n    }",
        "begin_line": 581,
        "end_line": 603,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 52)",
            "(line 583,col 9)-(line 583,col 22)",
            "(line 584,col 9)-(line 584,col 22)",
            "(line 585,col 9)-(line 585,col 45)",
            "(line 586,col 9)-(line 591,col 9)",
            "(line 592,col 9)-(line 592,col 26)",
            "(line 593,col 9)-(line 598,col 9)",
            "(line 600,col 9)-(line 600,col 25)",
            "(line 601,col 9)-(line 601,col 69)",
            "(line 602,col 9)-(line 602,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new Validate());\n        Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(Validate.class.getModifiers()));\n    }",
        "begin_line": 607,
        "end_line": 614,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 608,col 9)-(line 608,col 38)",
            "(line 609,col 9)-(line 609,col 73)",
            "(line 610,col 9)-(line 610,col 37)",
            "(line 611,col 9)-(line 611,col 70)",
            "(line 612,col 9)-(line 612,col 77)",
            "(line 613,col 9)-(line 613,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_array()",
        "snippet": "    public void testValidIndex_withMessage_array() {\n        Object[] array = new Object[2];\n        Validate.validIndex(array, 0, \"Broken: \");\n        Validate.validIndex(array, 1, \"Broken: \");\n        try {\n            Validate.validIndex(array, -1, \"Broken: \");\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"Broken: \", ex.getMessage());\n        }\n        try {\n            Validate.validIndex(array, 2, \"Broken: \");\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"Broken: \", ex.getMessage());\n        }\n        \n        String[] strArray = new String[] {\"Hi\"};\n        String[] test = Validate.noNullElements(strArray, \"Message\");\n        assertSame(strArray, test);\n    }",
        "begin_line": 618,
        "end_line": 638,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 619,col 9)-(line 619,col 39)",
            "(line 620,col 9)-(line 620,col 50)",
            "(line 621,col 9)-(line 621,col 50)",
            "(line 622,col 9)-(line 627,col 9)",
            "(line 628,col 9)-(line 633,col 9)",
            "(line 635,col 9)-(line 635,col 48)",
            "(line 636,col 9)-(line 636,col 69)",
            "(line 637,col 9)-(line 637,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testValidIndex_array()",
        "snippet": "    public void testValidIndex_array() {\n        Object[] array = new Object[2];\n        Validate.validIndex(array, 0);\n        Validate.validIndex(array, 1);\n        try {\n            Validate.validIndex(array, -1);\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"The validated array index is invalid: -1\", ex.getMessage());\n        }\n        try {\n            Validate.validIndex(array, 2);\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"The validated array index is invalid: 2\", ex.getMessage());\n        }\n        \n        String[] strArray = new String[] {\"Hi\"};\n        String[] test = Validate.noNullElements(strArray);\n        assertSame(strArray, test);\n    }",
        "begin_line": 640,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 641,col 9)-(line 641,col 39)",
            "(line 642,col 9)-(line 642,col 38)",
            "(line 643,col 9)-(line 643,col 38)",
            "(line 644,col 9)-(line 649,col 9)",
            "(line 650,col 9)-(line 655,col 9)",
            "(line 657,col 9)-(line 657,col 48)",
            "(line 658,col 9)-(line 658,col 58)",
            "(line 659,col 9)-(line 659,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_collection()",
        "snippet": "    public void testValidIndex_withMessage_collection() {\n        Collection<String> coll = new ArrayList<String>();\n        coll.add(null);\n        coll.add(null);\n        Validate.validIndex(coll, 0, \"Broken: \");\n        Validate.validIndex(coll, 1, \"Broken: \");\n        try {\n            Validate.validIndex(coll, -1, \"Broken: \");\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"Broken: \", ex.getMessage());\n        }\n        try {\n            Validate.validIndex(coll, 2, \"Broken: \");\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"Broken: \", ex.getMessage());\n        }\n        \n        List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n        List<String> test = Validate.validIndex(strColl, 0, \"Message\");\n        assertSame(strColl, test);\n    }",
        "begin_line": 664,
        "end_line": 686,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 58)",
            "(line 666,col 9)-(line 666,col 23)",
            "(line 667,col 9)-(line 667,col 23)",
            "(line 668,col 9)-(line 668,col 49)",
            "(line 669,col 9)-(line 669,col 49)",
            "(line 670,col 9)-(line 675,col 9)",
            "(line 676,col 9)-(line 681,col 9)",
            "(line 683,col 9)-(line 683,col 66)",
            "(line 684,col 9)-(line 684,col 71)",
            "(line 685,col 9)-(line 685,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testValidIndex_collection()",
        "snippet": "    public void testValidIndex_collection() {\n        Collection<String> coll = new ArrayList<String>();\n        coll.add(null);\n        coll.add(null);\n        Validate.validIndex(coll, 0);\n        Validate.validIndex(coll, 1);\n        try {\n            Validate.validIndex(coll, -1);\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"The validated collection index is invalid: -1\", ex.getMessage());\n        }\n        try {\n            Validate.validIndex(coll, 2);\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"The validated collection index is invalid: 2\", ex.getMessage());\n        }\n        \n        List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n        List<String> test = Validate.validIndex(strColl, 0);\n        assertSame(strColl, test);\n    }",
        "begin_line": 688,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 689,col 9)-(line 689,col 58)",
            "(line 690,col 9)-(line 690,col 23)",
            "(line 691,col 9)-(line 691,col 23)",
            "(line 692,col 9)-(line 692,col 37)",
            "(line 693,col 9)-(line 693,col 37)",
            "(line 694,col 9)-(line 699,col 9)",
            "(line 700,col 9)-(line 705,col 9)",
            "(line 707,col 9)-(line 707,col 66)",
            "(line 708,col 9)-(line 708,col 60)",
            "(line 709,col 9)-(line 709,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_charSequence()",
        "snippet": "    public void testValidIndex_withMessage_charSequence() {\n        CharSequence str = \"Hi\";\n        Validate.validIndex(str, 0, \"Broken: \");\n        Validate.validIndex(str, 1, \"Broken: \");\n        try {\n            Validate.validIndex(str, -1, \"Broken: \");\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"Broken: \", ex.getMessage());\n        }\n        try {\n            Validate.validIndex(str, 2, \"Broken: \");\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"Broken: \", ex.getMessage());\n        }\n        \n        String input = \"Hi\";\n        String test = Validate.validIndex(input, 0, \"Message\");\n        assertSame(input, test);\n    }",
        "begin_line": 714,
        "end_line": 734,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 715,col 9)-(line 715,col 32)",
            "(line 716,col 9)-(line 716,col 48)",
            "(line 717,col 9)-(line 717,col 48)",
            "(line 718,col 9)-(line 723,col 9)",
            "(line 724,col 9)-(line 729,col 9)",
            "(line 731,col 9)-(line 731,col 28)",
            "(line 732,col 9)-(line 732,col 63)",
            "(line 733,col 9)-(line 733,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ValidateTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ValidateTest.java",
        "signature": "org.apache.commons.lang3.ValidateTest.testValidIndex_charSequence()",
        "snippet": "    public void testValidIndex_charSequence() {\n        CharSequence str = \"Hi\";\n        Validate.validIndex(str, 0);\n        Validate.validIndex(str, 1);\n        try {\n            Validate.validIndex(str, -1);\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"The validated character sequence index is invalid: -1\", ex.getMessage());\n        }\n        try {\n            Validate.validIndex(str, 2);\n            fail(\"Expecting IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException ex) {\n            assertEquals(\"The validated character sequence index is invalid: 2\", ex.getMessage());\n        }\n        \n        String input = \"Hi\";\n        String test = Validate.validIndex(input, 0);\n        assertSame(input, test);\n    }",
        "begin_line": 736,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 737,col 9)-(line 737,col 32)",
            "(line 738,col 9)-(line 738,col 36)",
            "(line 739,col 9)-(line 739,col 36)",
            "(line 740,col 9)-(line 745,col 9)",
            "(line 746,col 9)-(line 751,col 9)",
            "(line 753,col 9)-(line 753,col 28)",
            "(line 754,col 9)-(line 754,col 52)",
            "(line 755,col 9)-(line 755,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.StringUtilsIsTest(java.lang.String)",
        "snippet": "    public StringUtilsIsTest(String name) {\n        super(name);\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsAlpha()",
        "snippet": "    public void testIsAlpha() {\n        assertEquals(false, StringUtils.isAlpha(null));\n        assertEquals(true, StringUtils.isAlpha(\"\"));\n        assertEquals(false, StringUtils.isAlpha(\" \"));\n        assertEquals(true, StringUtils.isAlpha(\"a\"));\n        assertEquals(true, StringUtils.isAlpha(\"A\"));\n        assertEquals(true, StringUtils.isAlpha(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isAlpha(\"ham kso\"));\n        assertEquals(false, StringUtils.isAlpha(\"1\"));\n        assertEquals(false, StringUtils.isAlpha(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlpha(\"_\"));\n        assertEquals(false, StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 36,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 55)",
            "(line 38,col 9)-(line 38,col 52)",
            "(line 39,col 9)-(line 39,col 54)",
            "(line 40,col 9)-(line 40,col 53)",
            "(line 41,col 9)-(line 41,col 53)",
            "(line 42,col 9)-(line 42,col 82)",
            "(line 43,col 9)-(line 43,col 60)",
            "(line 44,col 9)-(line 44,col 54)",
            "(line 45,col 9)-(line 45,col 85)",
            "(line 46,col 9)-(line 46,col 54)",
            "(line 47,col 9)-(line 47,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsAlphanumeric()",
        "snippet": "    public void testIsAlphanumeric() {\n        assertEquals(false, StringUtils.isAlphanumeric(null));\n        assertEquals(true, StringUtils.isAlphanumeric(\"\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\" \"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"a\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"A\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\"ham kso\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"1\"));\n        assertEquals(true, StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\"_\"));\n        assertEquals(false, StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 50,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 62)",
            "(line 52,col 9)-(line 52,col 59)",
            "(line 53,col 9)-(line 53,col 61)",
            "(line 54,col 9)-(line 54,col 60)",
            "(line 55,col 9)-(line 55,col 60)",
            "(line 56,col 9)-(line 56,col 89)",
            "(line 57,col 9)-(line 57,col 67)",
            "(line 58,col 9)-(line 58,col 60)",
            "(line 59,col 9)-(line 59,col 91)",
            "(line 60,col 9)-(line 60,col 61)",
            "(line 61,col 9)-(line 61,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsWhitespace()",
        "snippet": "    public void testIsWhitespace() {\n        assertEquals(false, StringUtils.isWhitespace(null));\n        assertEquals(true, StringUtils.isWhitespace(\"\"));\n        assertEquals(true, StringUtils.isWhitespace(\" \"));\n        assertEquals(true, StringUtils.isWhitespace(\"\\t \\n \\t\"));\n        assertEquals(false, StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\n        assertEquals(true, StringUtils.isWhitespace(\" \"));\n        assertEquals(false, StringUtils.isWhitespace(\" a \"));\n        assertEquals(false, StringUtils.isWhitespace(\"a  \"));\n        assertEquals(false, StringUtils.isWhitespace(\"  a\"));\n        assertEquals(false, StringUtils.isWhitespace(\"aba\"));\n        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n    }",
        "begin_line": 64,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 60)",
            "(line 66,col 9)-(line 66,col 57)",
            "(line 67,col 9)-(line 67,col 58)",
            "(line 68,col 9)-(line 68,col 65)",
            "(line 69,col 9)-(line 69,col 68)",
            "(line 70,col 9)-(line 70,col 58)",
            "(line 71,col 9)-(line 71,col 61)",
            "(line 72,col 9)-(line 72,col 61)",
            "(line 73,col 9)-(line 73,col 61)",
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 81)",
            "(line 76,col 9)-(line 76,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsAlphaspace()",
        "snippet": "    public void testIsAlphaspace() {\n        assertEquals(false, StringUtils.isAlphaSpace(null));\n        assertEquals(true, StringUtils.isAlphaSpace(\"\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\" \"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"a\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"A\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(true, StringUtils.isAlphaSpace(\"ham kso\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"1\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"_\"));\n        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 79,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 60)",
            "(line 81,col 9)-(line 81,col 57)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 58)",
            "(line 84,col 9)-(line 84,col 58)",
            "(line 85,col 9)-(line 85,col 87)",
            "(line 86,col 9)-(line 86,col 64)",
            "(line 87,col 9)-(line 87,col 59)",
            "(line 88,col 9)-(line 88,col 90)",
            "(line 89,col 9)-(line 89,col 59)",
            "(line 90,col 9)-(line 90,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsAlphanumericSpace()",
        "snippet": "    public void testIsAlphanumericSpace() {\n        assertEquals(false, StringUtils.isAlphanumericSpace(null));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\" \"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"a\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"A\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"ham kso\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"1\"));\n        assertEquals(true, StringUtils.isAlphanumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isAlphanumericSpace(\"_\"));\n        assertEquals(false, StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 93,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 67)",
            "(line 95,col 9)-(line 95,col 64)",
            "(line 96,col 9)-(line 96,col 65)",
            "(line 97,col 9)-(line 97,col 65)",
            "(line 98,col 9)-(line 98,col 65)",
            "(line 99,col 9)-(line 99,col 94)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 96)",
            "(line 103,col 9)-(line 103,col 66)",
            "(line 104,col 9)-(line 104,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsAsciiPrintable_String()",
        "snippet": "    public void testIsAsciiPrintable_String() {\n        assertEquals(false, StringUtils.isAsciiPrintable(null));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\" \"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"a\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"A\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"1\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"Ceki\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab2c~\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"1000\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"10 00\"));\n        assertEquals(false, StringUtils.isAsciiPrintable(\"10\\t00\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"10.00\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"10,00\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab-c~\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0020\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0021\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u007e\"));\n        assertEquals(false, StringUtils.isAsciiPrintable(\"\\u007f\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"G?lc?\"));\n        assertEquals(true, StringUtils.isAsciiPrintable(\"=?iso-8859-1?Q?G=FClc=FC?=\"));\n        assertEquals(false, StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\n    }",
        "begin_line": 107,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 64)",
            "(line 109,col 9)-(line 109,col 61)",
            "(line 110,col 9)-(line 110,col 62)",
            "(line 111,col 9)-(line 111,col 62)",
            "(line 112,col 9)-(line 112,col 62)",
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 65)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 65)",
            "(line 117,col 9)-(line 117,col 66)",
            "(line 118,col 9)-(line 118,col 68)",
            "(line 119,col 9)-(line 119,col 66)",
            "(line 120,col 9)-(line 120,col 66)",
            "(line 121,col 9)-(line 121,col 67)",
            "(line 122,col 9)-(line 122,col 99)",
            "(line 123,col 9)-(line 123,col 67)",
            "(line 124,col 9)-(line 124,col 67)",
            "(line 125,col 9)-(line 125,col 67)",
            "(line 126,col 9)-(line 126,col 68)",
            "(line 127,col 9)-(line 127,col 66)",
            "(line 128,col 9)-(line 128,col 87)",
            "(line 129,col 9)-(line 129,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsNumeric()",
        "snippet": "    public void testIsNumeric() {\n        assertEquals(false, StringUtils.isNumeric(null));\n        assertEquals(true, StringUtils.isNumeric(\"\"));\n        assertEquals(false, StringUtils.isNumeric(\" \"));\n        assertEquals(false, StringUtils.isNumeric(\"a\"));\n        assertEquals(false, StringUtils.isNumeric(\"A\"));\n        assertEquals(false, StringUtils.isNumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isNumeric(\"ham kso\"));\n        assertEquals(true, StringUtils.isNumeric(\"1\"));\n        assertEquals(true, StringUtils.isNumeric(\"1000\"));\n        assertEquals(false, StringUtils.isNumeric(\"2.3\"));\n        assertEquals(false, StringUtils.isNumeric(\"10 00\"));\n        assertEquals(false, StringUtils.isNumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isNumeric(\"_\"));\n        assertEquals(false, StringUtils.isNumeric(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 132,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 57)",
            "(line 134,col 9)-(line 134,col 54)",
            "(line 135,col 9)-(line 135,col 56)",
            "(line 136,col 9)-(line 136,col 56)",
            "(line 137,col 9)-(line 137,col 56)",
            "(line 138,col 9)-(line 138,col 85)",
            "(line 139,col 9)-(line 139,col 62)",
            "(line 140,col 9)-(line 140,col 55)",
            "(line 141,col 9)-(line 141,col 58)",
            "(line 142,col 9)-(line 142,col 58)",
            "(line 143,col 9)-(line 143,col 60)",
            "(line 144,col 9)-(line 144,col 87)",
            "(line 145,col 9)-(line 145,col 56)",
            "(line 146,col 9)-(line 146,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsIsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsIsTest.testIsNumericSpace()",
        "snippet": "    public void testIsNumericSpace() {\n        assertEquals(false, StringUtils.isNumericSpace(null));\n        assertEquals(true, StringUtils.isNumericSpace(\"\"));\n        assertEquals(true, StringUtils.isNumericSpace(\" \"));\n        assertEquals(false, StringUtils.isNumericSpace(\"a\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"A\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"ham kso\"));\n        assertEquals(true, StringUtils.isNumericSpace(\"1\"));\n        assertEquals(true, StringUtils.isNumericSpace(\"1000\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"2.3\"));\n        assertEquals(true, StringUtils.isNumericSpace(\"10 00\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"_\"));\n        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik*khbkuh\"));\n    }",
        "begin_line": 149,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 62)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 152,col 60)",
            "(line 153,col 9)-(line 153,col 61)",
            "(line 154,col 9)-(line 154,col 61)",
            "(line 155,col 9)-(line 155,col 90)",
            "(line 156,col 9)-(line 156,col 67)",
            "(line 157,col 9)-(line 157,col 60)",
            "(line 158,col 9)-(line 158,col 63)",
            "(line 159,col 9)-(line 159,col 63)",
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 92)",
            "(line 162,col 9)-(line 162,col 61)",
            "(line 163,col 9)-(line 163,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.StringUtilsTest(java.lang.String)",
        "snippet": "    public StringUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringUtils());\n        Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n    }",
        "begin_line": 99,
        "end_line": 106,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 76)",
            "(line 102,col 9)-(line 102,col 37)",
            "(line 103,col 9)-(line 103,col 70)",
            "(line 104,col 9)-(line 104,col 80)",
            "(line 105,col 9)-(line 105,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCaseFunctions()",
        "snippet": "    public void testCaseFunctions() {\n        assertEquals(null, StringUtils.upperCase(null));\n        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.lowerCase(null));\n        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.capitalize(null));\n        assertEquals(null, StringUtils.uncapitalize(null));\n\n        assertEquals(\"capitalize(empty-string) failed\",\n                     \"\", StringUtils.capitalize(\"\") );\n        assertEquals(\"capitalize(single-char-string) failed\",\n                     \"X\", StringUtils.capitalize(\"x\") );\n        assertEquals(\"uncapitalize(String) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n        assertEquals(\"uncapitalize(empty-string) failed\",\n                     \"\", StringUtils.uncapitalize(\"\") );\n        assertEquals(\"uncapitalize(single-char-string) failed\",\n                     \"x\", StringUtils.uncapitalize(\"X\") );\n                     \n        // reflection type of tests: Sentences.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n\n        // reflection type of tests: One word.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n\n        assertEquals(\"upperCase(String) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n        assertEquals(\"upperCase(empty-string) failed\",\n                     \"\", StringUtils.upperCase(\"\") );\n        assertEquals(\"lowerCase(String) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n        assertEquals(\"lowerCase(empty-string) failed\",\n                     \"\", StringUtils.lowerCase(\"\") );\n\n        assertEquals(\"upperCase(String, Locale) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"upperCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.upperCase(\"\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(String, Locale) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH) );\n    }",
        "begin_line": 109,
        "end_line": 157,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 56)",
            "(line 111,col 9)-(line 111,col 72)",
            "(line 112,col 9)-(line 112,col 56)",
            "(line 113,col 9)-(line 113,col 72)",
            "(line 114,col 9)-(line 114,col 57)",
            "(line 115,col 9)-(line 115,col 59)",
            "(line 117,col 9)-(line 118,col 54)",
            "(line 119,col 9)-(line 120,col 56)",
            "(line 121,col 9)-(line 122,col 68)",
            "(line 123,col 9)-(line 124,col 56)",
            "(line 125,col 9)-(line 126,col 58)",
            "(line 129,col 9)-(line 130,col 104)",
            "(line 131,col 9)-(line 132,col 100)",
            "(line 135,col 9)-(line 136,col 94)",
            "(line 137,col 9)-(line 138,col 90)",
            "(line 140,col 9)-(line 141,col 81)",
            "(line 142,col 9)-(line 143,col 53)",
            "(line 144,col 9)-(line 145,col 81)",
            "(line 146,col 9)-(line 147,col 53)",
            "(line 149,col 9)-(line 150,col 97)",
            "(line 151,col 9)-(line 152,col 69)",
            "(line 153,col 9)-(line 154,col 97)",
            "(line 155,col 9)-(line 156,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, StringUtils.swapCase(null));\n        assertEquals(\"\", StringUtils.swapCase(\"\"));\n        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n        \n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }",
        "begin_line": 159,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 55)",
            "(line 161,col 9)-(line 161,col 51)",
            "(line 162,col 9)-(line 162,col 55)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 165,col 9)-(line 165,col 52)",
            "(line 166,col 9)-(line 166,col 78)",
            "(line 167,col 9)-(line 167,col 78)",
            "(line 168,col 9)-(line 168,col 78)",
            "(line 169,col 9)-(line 169,col 78)",
            "(line 171,col 9)-(line 171,col 75)",
            "(line 172,col 9)-(line 172,col 77)",
            "(line 173,col 9)-(line 173,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray()",
        "snippet": "    public void testJoin_Objectarray() {\n        assertEquals(null, StringUtils.join(null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }",
        "begin_line": 177,
        "end_line": 185,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 51)",
            "(line 179,col 9)-(line 179,col 61)",
            "(line 180,col 9)-(line 180,col 60)",
            "(line 181,col 9)-(line 181,col 76)",
            "(line 182,col 9)-(line 182,col 74)",
            "(line 183,col 9)-(line 183,col 64)",
            "(line 184,col 9)-(line 184,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayChar()",
        "snippet": "    public void testJoin_ArrayChar() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }",
        "begin_line": 187,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 67)",
            "(line 189,col 9)-(line 189,col 83)",
            "(line 190,col 9)-(line 190,col 77)",
            "(line 191,col 9)-(line 191,col 82)",
            "(line 192,col 9)-(line 192,col 81)",
            "(line 194,col 9)-(line 194,col 97)",
            "(line 195,col 9)-(line 195,col 74)",
            "(line 196,col 9)-(line 196,col 76)",
            "(line 197,col 9)-(line 197,col 72)",
            "(line 198,col 9)-(line 198,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString()",
        "snippet": "    public void testJoin_ArrayString() {\n        assertEquals(null, StringUtils.join((Object[]) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n        \n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n        \n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n    }",
        "begin_line": 201,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 68)",
            "(line 203,col 9)-(line 203,col 74)",
            "(line 204,col 9)-(line 204,col 72)",
            "(line 206,col 9)-(line 206,col 66)",
            "(line 208,col 9)-(line 208,col 67)",
            "(line 209,col 9)-(line 209,col 65)",
            "(line 210,col 9)-(line 210,col 72)",
            "(line 212,col 9)-(line 212,col 73)",
            "(line 213,col 9)-(line 213,col 77)",
            "(line 214,col 9)-(line 214,col 76)",
            "(line 216,col 9)-(line 216,col 97)",
            "(line 217,col 9)-(line 217,col 95)",
            "(line 218,col 9)-(line 218,col 74)",
            "(line 219,col 9)-(line 219,col 76)",
            "(line 220,col 9)-(line 220,col 72)",
            "(line 221,col 9)-(line 221,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar()",
        "snippet": "    public void testJoin_IteratorChar() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n    }",
        "begin_line": 224,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 70)",
            "(line 226,col 9)-(line 226,col 109)",
            "(line 227,col 9)-(line 227,col 102)",
            "(line 228,col 9)-(line 228,col 103)",
            "(line 229,col 9)-(line 229,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString()",
        "snippet": "    public void testJoin_IteratorString() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n        \n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n        \n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n    }",
        "begin_line": 232,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 71)",
            "(line 234,col 9)-(line 234,col 100)",
            "(line 235,col 9)-(line 235,col 98)",
            "(line 236,col 9)-(line 236,col 92)",
            "(line 237,col 9)-(line 237,col 93)",
            "(line 239,col 9)-(line 239,col 92)",
            "(line 241,col 9)-(line 241,col 93)",
            "(line 242,col 9)-(line 242,col 91)",
            "(line 243,col 9)-(line 243,col 98)",
            "(line 245,col 9)-(line 245,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar()",
        "snippet": "    public void testJoin_IterableChar() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n    }",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 70)",
            "(line 250,col 9)-(line 250,col 98)",
            "(line 251,col 9)-(line 251,col 91)",
            "(line 252,col 9)-(line 252,col 92)",
            "(line 253,col 9)-(line 253,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString()",
        "snippet": "    public void testJoin_IterableString() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n    }",
        "begin_line": 256,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 71)",
            "(line 258,col 9)-(line 258,col 89)",
            "(line 259,col 9)-(line 259,col 87)",
            "(line 260,col 9)-(line 260,col 81)",
            "(line 261,col 9)-(line 261,col 82)",
            "(line 263,col 9)-(line 263,col 81)",
            "(line 265,col 9)-(line 265,col 82)",
            "(line 266,col 9)-(line 266,col 80)",
            "(line 267,col 9)-(line 267,col 87)",
            "(line 269,col 9)-(line 269,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_String()",
        "snippet": "    public void testSplit_String() {\n        assertEquals(null, StringUtils.split(null));\n        assertEquals(0, StringUtils.split(\"\").length);\n        \n        String str = \"a b  .c\";\n        String[] res = StringUtils.split(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a \";\n        res = StringUtils.split(str);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.split(str);\n        assertEquals(2, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n    }",
        "begin_line": 272,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 52)",
            "(line 274,col 9)-(line 274,col 54)",
            "(line 276,col 9)-(line 276,col 31)",
            "(line 277,col 9)-(line 277,col 46)",
            "(line 278,col 9)-(line 278,col 36)",
            "(line 279,col 9)-(line 279,col 34)",
            "(line 280,col 9)-(line 280,col 34)",
            "(line 281,col 9)-(line 281,col 35)",
            "(line 283,col 9)-(line 283,col 20)",
            "(line 284,col 9)-(line 284,col 37)",
            "(line 285,col 9)-(line 285,col 36)",
            "(line 286,col 9)-(line 286,col 34)",
            "(line 288,col 9)-(line 288,col 60)",
            "(line 289,col 9)-(line 289,col 37)",
            "(line 290,col 9)-(line 290,col 36)",
            "(line 291,col 9)-(line 291,col 34)",
            "(line 292,col 9)-(line 292,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar()",
        "snippet": "    public void testSplit_StringChar() {\n        assertEquals(null, StringUtils.split(null, '.'));\n        assertEquals(0, StringUtils.split(\"\", '.').length);\n\n        String str = \"a.b.. c\";\n        String[] res = StringUtils.split(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \".a.\";\n        res = StringUtils.split(str, '.');\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a b c\";\n        res = StringUtils.split(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n    }",
        "begin_line": 295,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 57)",
            "(line 297,col 9)-(line 297,col 59)",
            "(line 299,col 9)-(line 299,col 31)",
            "(line 300,col 9)-(line 300,col 51)",
            "(line 301,col 9)-(line 301,col 36)",
            "(line 302,col 9)-(line 302,col 34)",
            "(line 303,col 9)-(line 303,col 34)",
            "(line 304,col 9)-(line 304,col 35)",
            "(line 306,col 9)-(line 306,col 20)",
            "(line 307,col 9)-(line 307,col 42)",
            "(line 308,col 9)-(line 308,col 36)",
            "(line 309,col 9)-(line 309,col 34)",
            "(line 311,col 9)-(line 311,col 22)",
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 36)",
            "(line 314,col 9)-(line 314,col 34)",
            "(line 315,col 9)-(line 315,col 34)",
            "(line 316,col 9)-(line 316,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt()",
        "snippet": "    public void testSplit_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.split(null, \".\"));\n        assertEquals(null, StringUtils.split(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.split(\"\", \".\").length);\n        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n        \n        innerTestSplit('.', \".\", ' ');\n        innerTestSplit('.', \".\", ',');\n        innerTestSplit('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n        \n        String[] results = null;\n        String[] expectedResults = {\"ab\", \"de fg\"};\n        results = StringUtils.split(\"ab   de fg\", null, 2);\n        assertEquals(expectedResults.length, results.length);\n        for (int i = 0; i < expectedResults.length; i++) {\n            assertEquals(expectedResults[i], results[i]);\n        }\n        \n        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n        assertEquals(expectedResults2.length, results.length);\n        for (int i = 0; i < expectedResults2.length; i++) {\n            assertEquals(expectedResults2[i], results[i]);\n        }\n    }",
        "begin_line": 319,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 57)",
            "(line 321,col 9)-(line 321,col 60)",
            "(line 323,col 9)-(line 323,col 59)",
            "(line 324,col 9)-(line 324,col 62)",
            "(line 326,col 9)-(line 326,col 38)",
            "(line 327,col 9)-(line 327,col 38)",
            "(line 328,col 9)-(line 328,col 39)",
            "(line 329,col 9)-(line 334,col 9)",
            "(line 336,col 9)-(line 336,col 32)",
            "(line 337,col 9)-(line 337,col 51)",
            "(line 338,col 9)-(line 338,col 59)",
            "(line 339,col 9)-(line 339,col 61)",
            "(line 340,col 9)-(line 342,col 9)",
            "(line 344,col 9)-(line 344,col 52)",
            "(line 345,col 9)-(line 345,col 55)",
            "(line 346,col 9)-(line 346,col 62)",
            "(line 347,col 9)-(line 349,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }",
        "begin_line": 352,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 354,col 91)",
            "(line 356,col 9)-(line 356,col 89)",
            "(line 357,col 9)-(line 357,col 21)",
            "(line 359,col 9)-(line 359,col 45)",
            "(line 360,col 9)-(line 360,col 41)",
            "(line 361,col 9)-(line 361,col 39)",
            "(line 362,col 9)-(line 362,col 39)",
            "(line 363,col 9)-(line 363,col 49)",
            "(line 365,col 9)-(line 365,col 56)",
            "(line 366,col 9)-(line 366,col 46)",
            "(line 367,col 9)-(line 367,col 41)",
            "(line 368,col 9)-(line 368,col 39)",
            "(line 370,col 9)-(line 370,col 49)",
            "(line 371,col 9)-(line 371,col 41)",
            "(line 372,col 9)-(line 372,col 39)",
            "(line 373,col 9)-(line 373,col 39)",
            "(line 374,col 9)-(line 374,col 49)",
            "(line 376,col 9)-(line 376,col 48)",
            "(line 377,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 378,col 39)",
            "(line 379,col 9)-(line 379,col 39)",
            "(line 380,col 9)-(line 380,col 49)",
            "(line 382,col 9)-(line 382,col 48)",
            "(line 383,col 9)-(line 383,col 41)",
            "(line 384,col 9)-(line 384,col 39)",
            "(line 386,col 9)-(line 386,col 48)",
            "(line 387,col 9)-(line 387,col 41)",
            "(line 388,col 9)-(line 388,col 39)",
            "(line 389,col 9)-(line 389,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
        "snippet": "    public void testSplitByWholeString_StringStringBoolean() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n\n        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n        }\n    }",
        "begin_line": 392,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 78)",
            "(line 395,col 9)-(line 395,col 80)",
            "(line 397,col 9)-(line 397,col 52)",
            "(line 398,col 9)-(line 398,col 68)",
            "(line 400,col 9)-(line 400,col 103)",
            "(line 401,col 9)-(line 401,col 86)",
            "(line 402,col 9)-(line 404,col 9)",
            "(line 406,col 9)-(line 406,col 86)",
            "(line 408,col 9)-(line 408,col 84)",
            "(line 409,col 9)-(line 409,col 123)",
            "(line 410,col 9)-(line 410,col 90)",
            "(line 411,col 9)-(line 413,col 9)",
            "(line 415,col 9)-(line 415,col 80)",
            "(line 416,col 9)-(line 416,col 98)",
            "(line 417,col 9)-(line 417,col 108)",
            "(line 418,col 9)-(line 420,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
        "snippet": "    public void testSplitByWholeString_StringStringBooleanInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n    }",
        "begin_line": 423,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 424,col 9)-(line 424,col 81)",
            "(line 426,col 9)-(line 426,col 83)",
            "(line 428,col 9)-(line 428,col 52)",
            "(line 429,col 9)-(line 429,col 65)",
            "(line 432,col 9)-(line 432,col 106)",
            "(line 433,col 9)-(line 433,col 86)",
            "(line 434,col 9)-(line 436,col 9)",
            "(line 438,col 9)-(line 438,col 104)",
            "(line 440,col 9)-(line 440,col 102)",
            "(line 442,col 9)-(line 442,col 126)",
            "(line 443,col 9)-(line 443,col 90)",
            "(line 444,col 9)-(line 446,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
        "snippet": "    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n\n        // test whitespace\n        String input = \"ab   de fg\" ;\n        String[] expected = new String[] { \"ab\", \"\", \"\", \"de\", \"fg\" } ;\n\n        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter singlechar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter multichar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \"::\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter char with max\n        input = \"1::2::3:4\";\n        expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", 4 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n    }",
        "begin_line": 449,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 99)",
            "(line 452,col 9)-(line 452,col 101)",
            "(line 455,col 9)-(line 455,col 37)",
            "(line 456,col 9)-(line 456,col 71)",
            "(line 458,col 9)-(line 458,col 97)",
            "(line 459,col 9)-(line 459,col 56)",
            "(line 460,col 9)-(line 462,col 9)",
            "(line 465,col 9)-(line 465,col 32)",
            "(line 466,col 9)-(line 466,col 79)",
            "(line 468,col 9)-(line 468,col 87)",
            "(line 469,col 9)-(line 469,col 56)",
            "(line 470,col 9)-(line 472,col 9)",
            "(line 475,col 9)-(line 475,col 32)",
            "(line 476,col 9)-(line 476,col 60)",
            "(line 478,col 9)-(line 478,col 88)",
            "(line 479,col 9)-(line 479,col 56)",
            "(line 480,col 9)-(line 482,col 9)",
            "(line 485,col 9)-(line 485,col 28)",
            "(line 486,col 9)-(line 486,col 57)",
            "(line 488,col 9)-(line 488,col 86)",
            "(line 489,col 9)-(line 489,col 56)",
            "(line 490,col 9)-(line 492,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String()",
        "snippet": "    public void testSplitPreserveAllTokens_String() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n        \n        String str = \"abc def\";\n        String[] res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(2, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"def\", res[1]);\n        \n        str = \"abc  def\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"def\", res[2]);\n        \n        str = \" abc \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"abc\", res[1]);\n        assertEquals(\"\", res[2]);\n        \n        str = \"a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\".c\", res[3]);\n        \n        str = \"a  b  .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\".c\", res[4]);\n        \n        str = \" a  \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \" a  b\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"b\", res[3]);\n\n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(WHITESPACE.length() + 1, res.length);\n        assertEquals(\"a\", res[0]);\n        for(int i = 1; i < WHITESPACE.length()-1; i++)\n        {\n          assertEquals(\"\", res[i]);\n        }\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n    }",
        "begin_line": 495,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 69)",
            "(line 497,col 9)-(line 497,col 71)",
            "(line 499,col 9)-(line 499,col 31)",
            "(line 500,col 9)-(line 500,col 63)",
            "(line 501,col 9)-(line 501,col 36)",
            "(line 502,col 9)-(line 502,col 36)",
            "(line 503,col 9)-(line 503,col 36)",
            "(line 505,col 9)-(line 505,col 25)",
            "(line 506,col 9)-(line 506,col 54)",
            "(line 507,col 9)-(line 507,col 36)",
            "(line 508,col 9)-(line 508,col 36)",
            "(line 509,col 9)-(line 509,col 33)",
            "(line 510,col 9)-(line 510,col 36)",
            "(line 512,col 9)-(line 512,col 22)",
            "(line 513,col 9)-(line 513,col 54)",
            "(line 514,col 9)-(line 514,col 36)",
            "(line 515,col 9)-(line 515,col 33)",
            "(line 516,col 9)-(line 516,col 36)",
            "(line 517,col 9)-(line 517,col 33)",
            "(line 519,col 9)-(line 519,col 23)",
            "(line 520,col 9)-(line 520,col 54)",
            "(line 521,col 9)-(line 521,col 36)",
            "(line 522,col 9)-(line 522,col 34)",
            "(line 523,col 9)-(line 523,col 34)",
            "(line 524,col 9)-(line 524,col 35)",
            "(line 526,col 9)-(line 526,col 24)",
            "(line 527,col 9)-(line 527,col 54)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 33)",
            "(line 530,col 9)-(line 530,col 34)",
            "(line 531,col 9)-(line 531,col 34)",
            "(line 532,col 9)-(line 532,col 35)",
            "(line 534,col 9)-(line 534,col 25)",
            "(line 535,col 9)-(line 535,col 54)",
            "(line 536,col 9)-(line 536,col 36)",
            "(line 537,col 9)-(line 537,col 34)",
            "(line 538,col 9)-(line 538,col 33)",
            "(line 539,col 9)-(line 539,col 34)",
            "(line 540,col 9)-(line 540,col 33)",
            "(line 541,col 9)-(line 541,col 35)",
            "(line 543,col 9)-(line 543,col 21)",
            "(line 544,col 9)-(line 544,col 54)",
            "(line 545,col 9)-(line 545,col 36)",
            "(line 546,col 9)-(line 546,col 33)",
            "(line 547,col 9)-(line 547,col 34)",
            "(line 548,col 9)-(line 548,col 33)",
            "(line 549,col 9)-(line 549,col 33)",
            "(line 551,col 9)-(line 551,col 22)",
            "(line 552,col 9)-(line 552,col 54)",
            "(line 553,col 9)-(line 553,col 36)",
            "(line 554,col 9)-(line 554,col 33)",
            "(line 555,col 9)-(line 555,col 34)",
            "(line 556,col 9)-(line 556,col 33)",
            "(line 557,col 9)-(line 557,col 34)",
            "(line 559,col 9)-(line 559,col 60)",
            "(line 560,col 9)-(line 560,col 54)",
            "(line 561,col 9)-(line 561,col 58)",
            "(line 562,col 9)-(line 562,col 34)",
            "(line 563,col 9)-(line 566,col 9)",
            "(line 567,col 9)-(line 567,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
        "snippet": "    public void testSplitPreserveAllTokens_StringChar() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n\n        String str = \"a.b. c\";\n        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \"a.b.. c\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\" c\", res[3]);\n\n        str = \".a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n       \n        str = \".a..\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        \n        str = \"a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n\n        str = \"a  b  c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"c\", res[4]);\n        \n        str = \" a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"c\", res[3]);\n\n        str = \"  a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"b\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str = \"a b c \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \"a b c  \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"\", res[3]);\n\n        // Match example in javadoc\n        {\n          String[] results = null;\n          String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n          results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n    }",
        "begin_line": 570,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 571,col 9)-(line 571,col 74)",
            "(line 572,col 9)-(line 572,col 76)",
            "(line 574,col 9)-(line 574,col 30)",
            "(line 575,col 9)-(line 575,col 68)",
            "(line 576,col 9)-(line 576,col 36)",
            "(line 577,col 9)-(line 577,col 34)",
            "(line 578,col 9)-(line 578,col 34)",
            "(line 579,col 9)-(line 579,col 35)",
            "(line 581,col 9)-(line 581,col 24)",
            "(line 582,col 9)-(line 582,col 59)",
            "(line 583,col 9)-(line 583,col 36)",
            "(line 584,col 9)-(line 584,col 34)",
            "(line 585,col 9)-(line 585,col 34)",
            "(line 586,col 9)-(line 586,col 33)",
            "(line 587,col 9)-(line 587,col 35)",
            "(line 589,col 9)-(line 589,col 20)",
            "(line 590,col 9)-(line 590,col 59)",
            "(line 591,col 9)-(line 591,col 36)",
            "(line 592,col 9)-(line 592,col 33)",
            "(line 593,col 9)-(line 593,col 34)",
            "(line 594,col 9)-(line 594,col 33)",
            "(line 596,col 9)-(line 596,col 21)",
            "(line 597,col 9)-(line 597,col 59)",
            "(line 598,col 9)-(line 598,col 36)",
            "(line 599,col 9)-(line 599,col 33)",
            "(line 600,col 9)-(line 600,col 34)",
            "(line 601,col 9)-(line 601,col 33)",
            "(line 602,col 9)-(line 602,col 33)",
            "(line 604,col 9)-(line 604,col 21)",
            "(line 605,col 9)-(line 605,col 59)",
            "(line 606,col 9)-(line 606,col 36)",
            "(line 607,col 9)-(line 607,col 33)",
            "(line 608,col 9)-(line 608,col 33)",
            "(line 609,col 9)-(line 609,col 34)",
            "(line 610,col 9)-(line 610,col 33)",
            "(line 612,col 9)-(line 612,col 20)",
            "(line 613,col 9)-(line 613,col 59)",
            "(line 614,col 9)-(line 614,col 36)",
            "(line 615,col 9)-(line 615,col 33)",
            "(line 616,col 9)-(line 616,col 33)",
            "(line 617,col 9)-(line 617,col 34)",
            "(line 619,col 9)-(line 619,col 22)",
            "(line 620,col 9)-(line 620,col 58)",
            "(line 621,col 9)-(line 621,col 36)",
            "(line 622,col 9)-(line 622,col 34)",
            "(line 623,col 9)-(line 623,col 34)",
            "(line 624,col 9)-(line 624,col 34)",
            "(line 626,col 9)-(line 626,col 24)",
            "(line 627,col 9)-(line 627,col 58)",
            "(line 628,col 9)-(line 628,col 36)",
            "(line 629,col 9)-(line 629,col 34)",
            "(line 630,col 9)-(line 630,col 33)",
            "(line 631,col 9)-(line 631,col 34)",
            "(line 632,col 9)-(line 632,col 33)",
            "(line 633,col 9)-(line 633,col 34)",
            "(line 635,col 9)-(line 635,col 23)",
            "(line 636,col 9)-(line 636,col 58)",
            "(line 637,col 9)-(line 637,col 36)",
            "(line 638,col 9)-(line 638,col 33)",
            "(line 639,col 9)-(line 639,col 34)",
            "(line 640,col 9)-(line 640,col 34)",
            "(line 641,col 9)-(line 641,col 34)",
            "(line 643,col 9)-(line 643,col 24)",
            "(line 644,col 9)-(line 644,col 58)",
            "(line 645,col 9)-(line 645,col 36)",
            "(line 646,col 9)-(line 646,col 33)",
            "(line 647,col 9)-(line 647,col 33)",
            "(line 648,col 9)-(line 648,col 34)",
            "(line 649,col 9)-(line 649,col 34)",
            "(line 650,col 9)-(line 650,col 34)",
            "(line 652,col 9)-(line 652,col 23)",
            "(line 653,col 9)-(line 653,col 58)",
            "(line 654,col 9)-(line 654,col 36)",
            "(line 655,col 9)-(line 655,col 34)",
            "(line 656,col 9)-(line 656,col 34)",
            "(line 657,col 9)-(line 657,col 34)",
            "(line 658,col 9)-(line 658,col 33)",
            "(line 660,col 9)-(line 660,col 24)",
            "(line 661,col 9)-(line 661,col 58)",
            "(line 662,col 9)-(line 662,col 36)",
            "(line 663,col 9)-(line 663,col 34)",
            "(line 664,col 9)-(line 664,col 34)",
            "(line 665,col 9)-(line 665,col 34)",
            "(line 666,col 9)-(line 666,col 33)",
            "(line 667,col 9)-(line 667,col 33)",
            "(line 670,col 9)-(line 678,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
        "snippet": "    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n        \n        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n        innerTestSplitPreserveAllTokens('.', \".\", ',');\n        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"  de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"::de:fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] expectedResults = {\"ab\", \"cd:ef\"};\n          String[] results = null;\n          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n    }",
        "begin_line": 681,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 682,col 9)-(line 682,col 74)",
            "(line 683,col 9)-(line 683,col 77)",
            "(line 685,col 9)-(line 685,col 76)",
            "(line 686,col 9)-(line 686,col 79)",
            "(line 688,col 9)-(line 688,col 55)",
            "(line 689,col 9)-(line 689,col 55)",
            "(line 690,col 9)-(line 690,col 56)",
            "(line 691,col 9)-(line 696,col 9)",
            "(line 698,col 9)-(line 706,col 9)",
            "(line 708,col 9)-(line 716,col 9)",
            "(line 718,col 9)-(line 726,col 9)",
            "(line 728,col 9)-(line 736,col 9)",
            "(line 738,col 9)-(line 746,col 9)",
            "(line 748,col 9)-(line 756,col 9)",
            "(line 758,col 9)-(line 766,col 9)",
            "(line 768,col 9)-(line 776,col 9)",
            "(line 778,col 9)-(line 786,col 9)",
            "(line 788,col 9)-(line 796,col 9)",
            "(line 798,col 9)-(line 806,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }",
        "begin_line": 810,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 811,col 9)-(line 812,col 91)",
            "(line 814,col 9)-(line 814,col 89)",
            "(line 815,col 9)-(line 815,col 21)",
            "(line 817,col 9)-(line 817,col 62)",
            "(line 818,col 9)-(line 818,col 41)",
            "(line 819,col 9)-(line 819,col 39)",
            "(line 820,col 9)-(line 820,col 39)",
            "(line 821,col 9)-(line 821,col 38)",
            "(line 822,col 9)-(line 822,col 49)",
            "(line 824,col 9)-(line 824,col 56)",
            "(line 825,col 9)-(line 825,col 63)",
            "(line 826,col 9)-(line 826,col 41)",
            "(line 827,col 9)-(line 827,col 38)",
            "(line 828,col 9)-(line 828,col 39)",
            "(line 829,col 9)-(line 829,col 38)",
            "(line 831,col 9)-(line 831,col 66)",
            "(line 832,col 9)-(line 832,col 41)",
            "(line 833,col 9)-(line 833,col 39)",
            "(line 834,col 9)-(line 834,col 39)",
            "(line 835,col 9)-(line 835,col 38)",
            "(line 836,col 9)-(line 836,col 49)",
            "(line 838,col 9)-(line 838,col 65)",
            "(line 839,col 9)-(line 839,col 41)",
            "(line 840,col 9)-(line 840,col 39)",
            "(line 841,col 9)-(line 841,col 39)",
            "(line 842,col 9)-(line 842,col 38)",
            "(line 843,col 9)-(line 843,col 49)",
            "(line 845,col 9)-(line 845,col 65)",
            "(line 846,col 9)-(line 846,col 41)",
            "(line 847,col 9)-(line 847,col 39)",
            "(line 849,col 9)-(line 849,col 65)",
            "(line 850,col 9)-(line 850,col 41)",
            "(line 851,col 9)-(line 851,col 39)",
            "(line 852,col 9)-(line 852,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType()",
        "snippet": "    public void testSplitByCharacterType() {\n        assertNull(StringUtils.splitByCharacterType(null));\n        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterType(\"number5\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"fooBar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"foo200Bar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n                StringUtils.splitByCharacterType(\"ASFRules\")));\n    }",
        "begin_line": 855,
        "end_line": 879,
        "comment": "",
        "child_ranges": [
            "(line 856,col 9)-(line 856,col 59)",
            "(line 857,col 9)-(line 857,col 69)",
            "(line 859,col 9)-(line 860,col 63)",
            "(line 862,col 9)-(line 863,col 65)",
            "(line 865,col 9)-(line 866,col 63)",
            "(line 868,col 9)-(line 869,col 62)",
            "(line 871,col 9)-(line 872,col 61)",
            "(line 874,col 9)-(line 875,col 64)",
            "(line 877,col 9)-(line 878,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
        "snippet": "    public void testSplitByCharacterTypeCamelCase() {\n        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n    }",
        "begin_line": 881,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 882,col 9)-(line 882,col 68)",
            "(line 883,col 9)-(line 883,col 78)",
            "(line 885,col 9)-(line 886,col 80)",
            "(line 888,col 9)-(line 889,col 82)",
            "(line 891,col 9)-(line 892,col 80)",
            "(line 894,col 9)-(line 895,col 71)",
            "(line 897,col 9)-(line 898,col 70)",
            "(line 900,col 9)-(line 901,col 73)",
            "(line 903,col 9)-(line 904,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String()",
        "snippet": "    public void testDeleteWhitespace_String() {\n        assertEquals(null, StringUtils.deleteWhitespace(null));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n        // Note: u-2007 and u-000A both cause problems in the source code\n        // it should ignore 2007 but delete 000A\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n    }",
        "begin_line": 907,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 908,col 9)-(line 908,col 63)",
            "(line 909,col 9)-(line 909,col 59)",
            "(line 910,col 9)-(line 910,col 92)",
            "(line 911,col 9)-(line 911,col 83)",
            "(line 912,col 9)-(line 912,col 115)",
            "(line 915,col 9)-(line 915,col 98)",
            "(line 916,col 9)-(line 916,col 83)",
            "(line 917,col 9)-(line 917,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString()",
        "snippet": "    public void testReplace_StringStringString() {\n        assertEquals(null, StringUtils.replace(null, null, null));\n        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n        assertEquals(null, StringUtils.replace(null, \"any\", null));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\n        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n       }",
        "begin_line": 920,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 921,col 9)-(line 921,col 66)",
            "(line 922,col 9)-(line 922,col 67)",
            "(line 923,col 9)-(line 923,col 67)",
            "(line 924,col 9)-(line 924,col 68)",
            "(line 926,col 9)-(line 926,col 62)",
            "(line 927,col 9)-(line 927,col 63)",
            "(line 928,col 9)-(line 928,col 63)",
            "(line 929,col 9)-(line 929,col 64)",
            "(line 931,col 9)-(line 931,col 67)",
            "(line 932,col 9)-(line 932,col 69)",
            "(line 933,col 9)-(line 933,col 67)",
            "(line 934,col 9)-(line 934,col 68)",
            "(line 936,col 9)-(line 936,col 70)",
            "(line 937,col 9)-(line 937,col 82)",
            "(line 938,col 9)-(line 938,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt()",
        "snippet": "    public void testReplace_StringStringStringInt() {\n        assertEquals(null, StringUtils.replace(null, null, null, 2));\n        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n        \n        String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\n        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n    }",
        "begin_line": 941,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 69)",
            "(line 943,col 9)-(line 943,col 70)",
            "(line 944,col 9)-(line 944,col 70)",
            "(line 945,col 9)-(line 945,col 71)",
            "(line 947,col 9)-(line 947,col 65)",
            "(line 948,col 9)-(line 948,col 66)",
            "(line 949,col 9)-(line 949,col 66)",
            "(line 950,col 9)-(line 950,col 67)",
            "(line 952,col 9)-(line 952,col 70)",
            "(line 953,col 9)-(line 953,col 63)",
            "(line 955,col 9)-(line 955,col 69)",
            "(line 956,col 9)-(line 956,col 72)",
            "(line 957,col 9)-(line 957,col 71)",
            "(line 958,col 9)-(line 958,col 70)",
            "(line 959,col 9)-(line 959,col 69)",
            "(line 960,col 9)-(line 960,col 68)",
            "(line 962,col 9)-(line 962,col 69)",
            "(line 963,col 9)-(line 963,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString()",
        "snippet": "    public void testReplaceOnce_StringStringString() {\n        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\n        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n    }",
        "begin_line": 966,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 967,col 9)-(line 967,col 70)",
            "(line 968,col 9)-(line 968,col 71)",
            "(line 969,col 9)-(line 969,col 71)",
            "(line 970,col 9)-(line 970,col 72)",
            "(line 972,col 9)-(line 972,col 66)",
            "(line 973,col 9)-(line 973,col 67)",
            "(line 974,col 9)-(line 974,col 67)",
            "(line 975,col 9)-(line 975,col 68)",
            "(line 977,col 9)-(line 977,col 71)",
            "(line 978,col 9)-(line 978,col 73)",
            "(line 979,col 9)-(line 979,col 71)",
            "(line 980,col 9)-(line 980,col 72)",
            "(line 982,col 9)-(line 982,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray()",
        "snippet": "    public void testReplace_StringStringArrayStringArray() {\n\n        \n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n            new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n                \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n                \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n                \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n            new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n                \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n                \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n                \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n\n        // Test null safety inside arrays - LANG-552\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n    }",
        "begin_line": 988,
        "end_line": 1019,
        "comment": "\n     * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 992,col 9)-(line 992,col 88)",
            "(line 993,col 9)-(line 993,col 91)",
            "(line 994,col 9)-(line 994,col 71)",
            "(line 995,col 9)-(line 995,col 80)",
            "(line 996,col 9)-(line 996,col 80)",
            "(line 997,col 9)-(line 997,col 84)",
            "(line 999,col 9)-(line 999,col 94)",
            "(line 1000,col 9)-(line 1000,col 98)",
            "(line 1001,col 9)-(line 1001,col 111)",
            "(line 1002,col 9)-(line 1002,col 111)",
            "(line 1005,col 9)-(line 1005,col 108)",
            "(line 1006,col 9)-(line 1014,col 93)",
            "(line 1017,col 9)-(line 1017,col 98)",
            "(line 1018,col 9)-(line 1018,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
        "snippet": "    public void testReplace_StringStringArrayStringArrayBoolean() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"tcte\");\n\n        try {\n            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n            fail(\"Should be a circular reference\");\n        } catch (IllegalStateException e) {}\n\n        //JAVADOC TESTS END\n\n    }",
        "begin_line": 1024,
        "end_line": 1045,
        "comment": "\n     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1026,col 9)-(line 1026,col 98)",
            "(line 1027,col 9)-(line 1027,col 101)",
            "(line 1028,col 9)-(line 1028,col 81)",
            "(line 1029,col 9)-(line 1029,col 90)",
            "(line 1030,col 9)-(line 1030,col 90)",
            "(line 1031,col 9)-(line 1031,col 90)",
            "(line 1033,col 9)-(line 1033,col 104)",
            "(line 1034,col 9)-(line 1034,col 108)",
            "(line 1035,col 9)-(line 1035,col 121)",
            "(line 1036,col 9)-(line 1036,col 121)",
            "(line 1038,col 9)-(line 1041,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar()",
        "snippet": "    public void testReplaceChars_StringCharChar() {\n        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n    }",
        "begin_line": 1047,
        "end_line": 1052,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 9)-(line 1048,col 69)",
            "(line 1049,col 9)-(line 1049,col 65)",
            "(line 1050,col 9)-(line 1050,col 75)",
            "(line 1051,col 9)-(line 1051,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString()",
        "snippet": "    public void testReplaceChars_StringStringString() {\n        assertEquals(null, StringUtils.replaceChars(null, null, null));\n        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n        \n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n        \n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n        \n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n        \n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        \n        // Javadoc examples:\n        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n            \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }",
        "begin_line": 1054,
        "end_line": 1097,
        "comment": "",
        "child_ranges": [
            "(line 1055,col 9)-(line 1055,col 71)",
            "(line 1056,col 9)-(line 1056,col 69)",
            "(line 1057,col 9)-(line 1057,col 70)",
            "(line 1058,col 9)-(line 1058,col 69)",
            "(line 1059,col 9)-(line 1059,col 70)",
            "(line 1061,col 9)-(line 1061,col 67)",
            "(line 1062,col 9)-(line 1062,col 65)",
            "(line 1063,col 9)-(line 1063,col 66)",
            "(line 1064,col 9)-(line 1064,col 65)",
            "(line 1065,col 9)-(line 1065,col 66)",
            "(line 1067,col 9)-(line 1067,col 73)",
            "(line 1068,col 9)-(line 1068,col 71)",
            "(line 1069,col 9)-(line 1069,col 72)",
            "(line 1071,col 9)-(line 1071,col 71)",
            "(line 1072,col 9)-(line 1072,col 69)",
            "(line 1073,col 9)-(line 1073,col 70)",
            "(line 1075,col 9)-(line 1075,col 71)",
            "(line 1076,col 9)-(line 1076,col 69)",
            "(line 1077,col 9)-(line 1077,col 71)",
            "(line 1079,col 9)-(line 1079,col 77)",
            "(line 1080,col 9)-(line 1080,col 75)",
            "(line 1081,col 9)-(line 1081,col 78)",
            "(line 1083,col 9)-(line 1083,col 75)",
            "(line 1084,col 9)-(line 1084,col 73)",
            "(line 1087,col 9)-(line 1087,col 77)",
            "(line 1088,col 9)-(line 1088,col 77)",
            "(line 1089,col 9)-(line 1089,col 75)",
            "(line 1090,col 9)-(line 1090,col 78)",
            "(line 1093,col 9)-(line 1093,col 73)",
            "(line 1094,col 9)-(line 1096,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt()",
        "snippet": "    public void testOverlay_StringStringIntInt() {\n        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n        \n        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n        \n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n        \n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n    }",
        "begin_line": 1099,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1100,col 9)-(line 1100,col 66)",
            "(line 1101,col 9)-(line 1101,col 68)",
            "(line 1103,col 9)-(line 1103,col 62)",
            "(line 1104,col 9)-(line 1104,col 60)",
            "(line 1105,col 9)-(line 1105,col 68)",
            "(line 1106,col 9)-(line 1106,col 68)",
            "(line 1107,col 9)-(line 1107,col 70)",
            "(line 1109,col 9)-(line 1109,col 72)",
            "(line 1110,col 9)-(line 1110,col 72)",
            "(line 1111,col 9)-(line 1111,col 70)",
            "(line 1112,col 9)-(line 1112,col 70)",
            "(line 1113,col 9)-(line 1113,col 78)",
            "(line 1114,col 9)-(line 1114,col 78)",
            "(line 1116,col 9)-(line 1116,col 77)",
            "(line 1117,col 9)-(line 1117,col 77)",
            "(line 1118,col 9)-(line 1118,col 82)",
            "(line 1119,col 9)-(line 1119,col 82)",
            "(line 1120,col 9)-(line 1120,col 79)",
            "(line 1121,col 9)-(line 1121,col 79)",
            "(line 1122,col 9)-(line 1122,col 81)",
            "(line 1123,col 9)-(line 1123,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt()",
        "snippet": "    public void testRepeat_StringInt() {\n        assertEquals(null, StringUtils.repeat(null, 2));\n        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }",
        "begin_line": 1126,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 9)-(line 1127,col 56)",
            "(line 1128,col 9)-(line 1128,col 54)",
            "(line 1129,col 9)-(line 1129,col 52)",
            "(line 1130,col 9)-(line 1130,col 56)",
            "(line 1131,col 9)-(line 1131,col 60)",
            "(line 1132,col 9)-(line 1132,col 64)",
            "(line 1133,col 9)-(line 1133,col 52)",
            "(line 1134,col 9)-(line 1134,col 42)",
            "(line 1135,col 9)-(line 1135,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt()",
        "snippet": "    public void testRepeat_StringStringInt() {\n        assertEquals(null, StringUtils.repeat(null, null, 2));\n        assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n\n        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n\n        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n\n        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n    }",
        "begin_line": 1138,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 9)-(line 1139,col 62)",
            "(line 1140,col 9)-(line 1140,col 61)",
            "(line 1141,col 9)-(line 1141,col 58)",
            "(line 1143,col 9)-(line 1143,col 58)",
            "(line 1144,col 9)-(line 1144,col 56)",
            "(line 1146,col 9)-(line 1146,col 59)",
            "(line 1148,col 9)-(line 1148,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChop()",
        "snippet": "    public void testChop() {\n\n        String[][] chopCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { \"foo\", \"fo\"},\n            { \"foo\\nfoo\", \"foo\\nfo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"\\r\\n\", \"\" },\n            { null, null },\n            { \"\", \"\" },\n            { \"a\", \"\" },\n        };\n        for (int i = 0; i < chopCases.length; i++) {\n            String original = chopCases[i][0];\n            String expectedResult = chopCases[i][1];\n            assertEquals(\"chop(String) failed\",\n                    expectedResult, StringUtils.chop(original));\n        }\n    }",
        "begin_line": 1151,
        "end_line": 1173,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 9)-(line 1166,col 10)",
            "(line 1167,col 9)-(line 1172,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChomp()",
        "snippet": "    public void testChomp() {\n\n        String[][] chompCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { FOO_UNCAP, FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n            { \"foo\\nfoo\", \"foo\\nfoo\" },\n            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"a\", \"a\" },\n            { \"\\r\\n\", \"\" },\n            { \"\", \"\" },\n            { null, null },\n            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n        };\n        for (int i = 0; i < chompCases.length; i++) {\n            String original = chompCases[i][0];\n            String expectedResult = chompCases[i][1];\n            assertEquals(\"chomp(String) failed\",\n                    expectedResult, StringUtils.chomp(original));\n        }\n\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, null));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n    }",
        "begin_line": 1175,
        "end_line": 1230,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 9)-(line 1194,col 10)",
            "(line 1195,col 9)-(line 1200,col 9)",
            "(line 1202,col 9)-(line 1203,col 59)",
            "(line 1204,col 9)-(line 1205,col 62)",
            "(line 1206,col 9)-(line 1207,col 58)",
            "(line 1208,col 9)-(line 1209,col 59)",
            "(line 1210,col 9)-(line 1211,col 61)",
            "(line 1212,col 9)-(line 1213,col 50)",
            "(line 1214,col 9)-(line 1215,col 49)",
            "(line 1216,col 9)-(line 1217,col 47)",
            "(line 1218,col 9)-(line 1219,col 54)",
            "(line 1220,col 9)-(line 1221,col 53)",
            "(line 1222,col 9)-(line 1223,col 51)",
            "(line 1224,col 9)-(line 1225,col 53)",
            "(line 1226,col 9)-(line 1227,col 55)",
            "(line 1228,col 9)-(line 1229,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt()",
        "snippet": "    public void testRightPad_StringInt() {\n        assertEquals(null, StringUtils.rightPad(null, 5));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n    }",
        "begin_line": 1233,
        "end_line": 1239,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1234,col 9)-(line 1234,col 58)",
            "(line 1235,col 9)-(line 1235,col 59)",
            "(line 1236,col 9)-(line 1236,col 62)",
            "(line 1237,col 9)-(line 1237,col 60)",
            "(line 1238,col 9)-(line 1238,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar()",
        "snippet": "    public void testRightPad_StringIntChar() {\n        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }",
        "begin_line": 1241,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1242,col 9)-(line 1242,col 63)",
            "(line 1243,col 9)-(line 1243,col 64)",
            "(line 1244,col 9)-(line 1244,col 67)",
            "(line 1245,col 9)-(line 1245,col 65)",
            "(line 1246,col 9)-(line 1246,col 66)",
            "(line 1247,col 9)-(line 1247,col 67)",
            "(line 1248,col 9)-(line 1248,col 61)",
            "(line 1249,col 9)-(line 1249,col 42)",
            "(line 1250,col 9)-(line 1250,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString()",
        "snippet": "    public void testRightPad_StringIntString() {\n        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n        assertEquals(null, StringUtils.rightPad(null, 8, null));\n        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n    }",
        "begin_line": 1253,
        "end_line": 1264,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 9)-(line 1254,col 64)",
            "(line 1255,col 9)-(line 1255,col 64)",
            "(line 1256,col 9)-(line 1256,col 64)",
            "(line 1257,col 9)-(line 1257,col 70)",
            "(line 1258,col 9)-(line 1258,col 70)",
            "(line 1259,col 9)-(line 1259,col 69)",
            "(line 1260,col 9)-(line 1260,col 65)",
            "(line 1261,col 9)-(line 1261,col 66)",
            "(line 1262,col 9)-(line 1262,col 68)",
            "(line 1263,col 9)-(line 1263,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt()",
        "snippet": "    public void testLeftPad_StringInt() {\n        assertEquals(null, StringUtils.leftPad(null, 5));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n    }",
        "begin_line": 1267,
        "end_line": 1272,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1268,col 9)-(line 1268,col 57)",
            "(line 1269,col 9)-(line 1269,col 58)",
            "(line 1270,col 9)-(line 1270,col 61)",
            "(line 1271,col 9)-(line 1271,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar()",
        "snippet": "    public void testLeftPad_StringIntChar() {\n        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }",
        "begin_line": 1274,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 9)-(line 1275,col 62)",
            "(line 1276,col 9)-(line 1276,col 63)",
            "(line 1277,col 9)-(line 1277,col 66)",
            "(line 1278,col 9)-(line 1278,col 66)",
            "(line 1279,col 9)-(line 1279,col 81)",
            "(line 1280,col 9)-(line 1280,col 64)",
            "(line 1281,col 9)-(line 1281,col 60)",
            "(line 1282,col 9)-(line 1282,col 42)",
            "(line 1283,col 9)-(line 1283,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString()",
        "snippet": "    public void testLeftPad_StringIntString() {\n        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n        assertEquals(null, StringUtils.leftPad(null, 5, null));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n    }",
        "begin_line": 1286,
        "end_line": 1297,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 9)-(line 1287,col 63)",
            "(line 1288,col 9)-(line 1288,col 63)",
            "(line 1289,col 9)-(line 1289,col 63)",
            "(line 1290,col 9)-(line 1290,col 69)",
            "(line 1291,col 9)-(line 1291,col 69)",
            "(line 1292,col 9)-(line 1292,col 68)",
            "(line 1293,col 9)-(line 1293,col 64)",
            "(line 1294,col 9)-(line 1294,col 65)",
            "(line 1295,col 9)-(line 1295,col 67)",
            "(line 1296,col 9)-(line 1296,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLength()",
        "snippet": "    public void testLength() {\n        assertEquals(0, StringUtils.length(null));\n        assertEquals(0, StringUtils.length(\"\"));\n        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n        assertEquals(1, StringUtils.length(\"A\"));\n        assertEquals(1, StringUtils.length(\" \"));\n        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n    }",
        "begin_line": 1299,
        "end_line": 1306,
        "comment": "",
        "child_ranges": [
            "(line 1300,col 9)-(line 1300,col 50)",
            "(line 1301,col 9)-(line 1301,col 48)",
            "(line 1302,col 9)-(line 1302,col 63)",
            "(line 1303,col 9)-(line 1303,col 49)",
            "(line 1304,col 9)-(line 1304,col 49)",
            "(line 1305,col 9)-(line 1305,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt()",
        "snippet": "    public void testCenter_StringInt() {\n        assertEquals(null, StringUtils.center(null, -1));\n        assertEquals(null, StringUtils.center(null, 4));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n    }",
        "begin_line": 1309,
        "end_line": 1321,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1310,col 9)-(line 1310,col 57)",
            "(line 1311,col 9)-(line 1311,col 56)",
            "(line 1312,col 9)-(line 1312,col 56)",
            "(line 1313,col 9)-(line 1313,col 56)",
            "(line 1314,col 9)-(line 1314,col 57)",
            "(line 1315,col 9)-(line 1315,col 56)",
            "(line 1316,col 9)-(line 1316,col 56)",
            "(line 1317,col 9)-(line 1317,col 58)",
            "(line 1318,col 9)-(line 1318,col 60)",
            "(line 1319,col 9)-(line 1319,col 57)",
            "(line 1320,col 9)-(line 1320,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar()",
        "snippet": "    public void testCenter_StringIntChar() {\n        assertEquals(null, StringUtils.center(null, -1, ' '));\n        assertEquals(null, StringUtils.center(null, 4, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n    }",
        "begin_line": 1323,
        "end_line": 1336,
        "comment": "",
        "child_ranges": [
            "(line 1324,col 9)-(line 1324,col 62)",
            "(line 1325,col 9)-(line 1325,col 61)",
            "(line 1326,col 9)-(line 1326,col 61)",
            "(line 1327,col 9)-(line 1327,col 61)",
            "(line 1328,col 9)-(line 1328,col 62)",
            "(line 1329,col 9)-(line 1329,col 61)",
            "(line 1330,col 9)-(line 1330,col 61)",
            "(line 1331,col 9)-(line 1331,col 63)",
            "(line 1332,col 9)-(line 1332,col 65)",
            "(line 1333,col 9)-(line 1333,col 62)",
            "(line 1334,col 9)-(line 1334,col 63)",
            "(line 1335,col 9)-(line 1335,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString()",
        "snippet": "    public void testCenter_StringIntString() {\n        assertEquals(null, StringUtils.center(null, 4, null));\n        assertEquals(null, StringUtils.center(null, -1, \" \"));\n        assertEquals(null, StringUtils.center(null, 4, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n    }",
        "begin_line": 1338,
        "end_line": 1354,
        "comment": "",
        "child_ranges": [
            "(line 1339,col 9)-(line 1339,col 62)",
            "(line 1340,col 9)-(line 1340,col 62)",
            "(line 1341,col 9)-(line 1341,col 61)",
            "(line 1342,col 9)-(line 1342,col 61)",
            "(line 1343,col 9)-(line 1343,col 61)",
            "(line 1344,col 9)-(line 1344,col 62)",
            "(line 1345,col 9)-(line 1345,col 61)",
            "(line 1346,col 9)-(line 1346,col 61)",
            "(line 1347,col 9)-(line 1347,col 63)",
            "(line 1348,col 9)-(line 1348,col 65)",
            "(line 1349,col 9)-(line 1349,col 62)",
            "(line 1350,col 9)-(line 1350,col 63)",
            "(line 1351,col 9)-(line 1351,col 66)",
            "(line 1352,col 9)-(line 1352,col 68)",
            "(line 1353,col 9)-(line 1353,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverse_String()",
        "snippet": "    public void testReverse_String() {\n        assertEquals(null, StringUtils.reverse(null) );\n        assertEquals(\"\", StringUtils.reverse(\"\") );\n        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n    }",
        "begin_line": 1357,
        "end_line": 1361,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1358,col 9)-(line 1358,col 55)",
            "(line 1359,col 9)-(line 1359,col 51)",
            "(line 1360,col 9)-(line 1360,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar()",
        "snippet": "    public void testReverseDelimited_StringChar() {\n        assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\n        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n    }",
        "begin_line": 1363,
        "end_line": 1369,
        "comment": "",
        "child_ranges": [
            "(line 1364,col 9)-(line 1364,col 69)",
            "(line 1365,col 9)-(line 1365,col 65)",
            "(line 1366,col 9)-(line 1366,col 75)",
            "(line 1367,col 9)-(line 1367,col 75)",
            "(line 1368,col 9)-(line 1368,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_String()",
        "snippet": "    public void testDefault_String() {\n        assertEquals(\"\", StringUtils.defaultString(null));\n        assertEquals(\"\", StringUtils.defaultString(\"\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n    }",
        "begin_line": 1372,
        "end_line": 1376,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1373,col 9)-(line 1373,col 58)",
            "(line 1374,col 9)-(line 1374,col 56)",
            "(line 1375,col 9)-(line 1375,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_StringString()",
        "snippet": "    public void testDefault_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n    }",
        "begin_line": 1378,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1379,col 9)-(line 1379,col 70)",
            "(line 1380,col 9)-(line 1380,col 64)",
            "(line 1381,col 9)-(line 1381,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString()",
        "snippet": "    public void testDefaultIfEmpty_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfEmpty(\"\", null));\n    }",
        "begin_line": 1384,
        "end_line": 1389,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 9)-(line 1385,col 71)",
            "(line 1386,col 9)-(line 1386,col 69)",
            "(line 1387,col 9)-(line 1387,col 71)",
            "(line 1388,col 9)-(line 1388,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt()",
        "snippet": "    public void testAbbreviate_StringInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abc\", 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }              \n    }",
        "begin_line": 1392,
        "end_line": 1415,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1393,col 9)-(line 1393,col 61)",
            "(line 1394,col 9)-(line 1394,col 57)",
            "(line 1395,col 9)-(line 1395,col 67)",
            "(line 1396,col 9)-(line 1396,col 134)",
            "(line 1398,col 9)-(line 1398,col 45)",
            "(line 1399,col 9)-(line 1399,col 78)",
            "(line 1400,col 9)-(line 1400,col 87)",
            "(line 1401,col 9)-(line 1401,col 87)",
            "(line 1402,col 9)-(line 1402,col 69)",
            "(line 1403,col 9)-(line 1403,col 70)",
            "(line 1404,col 9)-(line 1404,col 70)",
            "(line 1405,col 9)-(line 1405,col 67)",
            "(line 1406,col 9)-(line 1406,col 56)",
            "(line 1408,col 9)-(line 1414,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt()",
        "snippet": "    public void testAbbreviate_StringIntInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        \n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n\n        assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n    }",
        "begin_line": 1417,
        "end_line": 1462,
        "comment": "",
        "child_ranges": [
            "(line 1418,col 9)-(line 1418,col 65)",
            "(line 1419,col 9)-(line 1419,col 60)",
            "(line 1420,col 9)-(line 1420,col 60)",
            "(line 1422,col 9)-(line 1428,col 9)",
            "(line 1429,col 9)-(line 1435,col 9)",
            "(line 1438,col 9)-(line 1438,col 45)",
            "(line 1439,col 9)-(line 1439,col 83)",
            "(line 1441,col 9)-(line 1441,col 64)",
            "(line 1442,col 9)-(line 1442,col 57)",
            "(line 1443,col 9)-(line 1443,col 56)",
            "(line 1444,col 9)-(line 1444,col 56)",
            "(line 1445,col 9)-(line 1445,col 56)",
            "(line 1446,col 9)-(line 1446,col 56)",
            "(line 1447,col 9)-(line 1447,col 56)",
            "(line 1448,col 9)-(line 1448,col 56)",
            "(line 1449,col 9)-(line 1449,col 56)",
            "(line 1450,col 9)-(line 1450,col 56)",
            "(line 1451,col 9)-(line 1451,col 56)",
            "(line 1452,col 9)-(line 1452,col 56)",
            "(line 1453,col 9)-(line 1453,col 57)",
            "(line 1454,col 9)-(line 1454,col 57)",
            "(line 1455,col 9)-(line 1455,col 57)",
            "(line 1456,col 9)-(line 1456,col 57)",
            "(line 1457,col 9)-(line 1457,col 57)",
            "(line 1458,col 9)-(line 1458,col 57)",
            "(line 1459,col 9)-(line 1459,col 57)",
            "(line 1460,col 9)-(line 1460,col 57)",
            "(line 1461,col 9)-(line 1461,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)",
        "snippet": "    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }",
        "begin_line": 1464,
        "end_line": 1475,
        "comment": "",
        "child_ranges": [
            "(line 1465,col 9)-(line 1465,col 51)",
            "(line 1466,col 9)-(line 1466,col 61)",
            "(line 1467,col 9)-(line 1467,col 82)",
            "(line 1468,col 9)-(line 1471,col 9)",
            "(line 1472,col 9)-(line 1473,col 45)",
            "(line 1474,col 9)-(line 1474,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle()",
        "snippet": "    public void testAbbreviateMiddle() {\n        // javadoc examples\n        assertNull( StringUtils.abbreviateMiddle(null, null, 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", null, 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 0) );\n        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 3) );\n        assertEquals( \"ab.f\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4) );\n\n        // JIRA issue (LANG-405) example (slightly different than actual expected result)\n        assertEquals( \n            \"A very long text with un...f the text is complete.\",\n            StringUtils.abbreviateMiddle(\n                \"A very long text with unimportant stuff in the middle but interesting start and \" +\n                \"end to see if the text is complete.\", \"...\", 50) );\n\n        // Test a much longer text :)\n        String longText = \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\n        assertEquals( \n            \"Start text->Close text\",\n            StringUtils.abbreviateMiddle( longText, \"->\", 22 ) );\n\n        // Test negative length\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", -1));\n\n        // Test boundaries\n        // Fails to change anything as method ensures first and last char are kept\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 1));\n        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 2));\n\n        // Test length of n=1\n        assertEquals(\"a\", StringUtils.abbreviateMiddle(\"a\", \".\", 1));\n\n        // Test smallest length that can lead to success\n        assertEquals(\"a.d\", StringUtils.abbreviateMiddle(\"abcd\", \".\", 3));\n\n        // More from LANG-405\n        assertEquals(\"a..f\", StringUtils.abbreviateMiddle(\"abcdef\", \"..\", 4));\n        assertEquals(\"ab.ef\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 5));\n    }",
        "begin_line": 1477,
        "end_line": 1515,
        "comment": "",
        "child_ranges": [
            "(line 1479,col 9)-(line 1479,col 66)",
            "(line 1480,col 9)-(line 1480,col 76)",
            "(line 1481,col 9)-(line 1481,col 75)",
            "(line 1482,col 9)-(line 1482,col 75)",
            "(line 1483,col 9)-(line 1483,col 79)",
            "(line 1486,col 9)-(line 1490,col 68)",
            "(line 1493,col 9)-(line 1493,col 87)",
            "(line 1494,col 9)-(line 1496,col 65)",
            "(line 1499,col 9)-(line 1499,col 74)",
            "(line 1503,col 9)-(line 1503,col 73)",
            "(line 1504,col 9)-(line 1504,col 73)",
            "(line 1507,col 9)-(line 1507,col 69)",
            "(line 1510,col 9)-(line 1510,col 74)",
            "(line 1513,col 9)-(line 1513,col 78)",
            "(line 1514,col 9)-(line 1514,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifference_StringString()",
        "snippet": "    public void testDifference_StringString() {\n        assertEquals(null, StringUtils.difference(null, null));\n        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n    }",
        "begin_line": 1518,
        "end_line": 1528,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1519,col 9)-(line 1519,col 63)",
            "(line 1520,col 9)-(line 1520,col 57)",
            "(line 1521,col 9)-(line 1521,col 63)",
            "(line 1522,col 9)-(line 1522,col 60)",
            "(line 1523,col 9)-(line 1523,col 83)",
            "(line 1524,col 9)-(line 1524,col 87)",
            "(line 1525,col 9)-(line 1525,col 88)",
            "(line 1526,col 9)-(line 1526,col 63)",
            "(line 1527,col 9)-(line 1527,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString()",
        "snippet": "    public void testDifferenceAt_StringString() {\n        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n    }",
        "begin_line": 1530,
        "end_line": 1541,
        "comment": "",
        "child_ranges": [
            "(line 1531,col 9)-(line 1531,col 68)",
            "(line 1532,col 9)-(line 1532,col 77)",
            "(line 1533,col 9)-(line 1533,col 64)",
            "(line 1534,col 9)-(line 1534,col 66)",
            "(line 1535,col 9)-(line 1535,col 66)",
            "(line 1536,col 9)-(line 1536,col 79)",
            "(line 1537,col 9)-(line 1537,col 89)",
            "(line 1538,col 9)-(line 1538,col 70)",
            "(line 1539,col 9)-(line 1539,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString()",
        "snippet": "    public void testGetLevenshteinDistance_StringString() {\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }",
        "begin_line": 1544,
        "end_line": 1569,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1545,col 9)-(line 1545,col 69)",
            "(line 1546,col 9)-(line 1546,col 70)",
            "(line 1547,col 9)-(line 1547,col 76)",
            "(line 1548,col 9)-(line 1548,col 76)",
            "(line 1549,col 9)-(line 1549,col 75)",
            "(line 1550,col 9)-(line 1550,col 82)",
            "(line 1551,col 9)-(line 1551,col 82)",
            "(line 1552,col 9)-(line 1552,col 82)",
            "(line 1553,col 9)-(line 1553,col 82)",
            "(line 1554,col 9)-(line 1554,col 79)",
            "(line 1555,col 9)-(line 1561,col 9)",
            "(line 1562,col 9)-(line 1568,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testEMPTY()",
        "snippet": "    public void testEMPTY() {\n        assertNotNull(StringUtils.EMPTY);\n        assertEquals(\"\", StringUtils.EMPTY);\n        assertEquals(0, StringUtils.EMPTY.length());\n    }",
        "begin_line": 1574,
        "end_line": 1578,
        "comment": "\n     * A sanity check for {@link StringUtils#EMPTY}.\n     ",
        "child_ranges": [
            "(line 1575,col 9)-(line 1575,col 41)",
            "(line 1576,col 9)-(line 1576,col 44)",
            "(line 1577,col 9)-(line 1577,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase()",
        "snippet": "    public void testIsAllLowerCase() {\n        assertFalse(StringUtils.isAllLowerCase(null));\n        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllLowerCase(\"abc\"));\n        assertFalse(StringUtils.isAllLowerCase(\"abc \"));\n        assertFalse(StringUtils.isAllLowerCase(\"abC\"));\n    }",
        "begin_line": 1583,
        "end_line": 1589,
        "comment": "\n     * Test for {@link StringUtils#isAllLowerCase(String)}.\n     ",
        "child_ranges": [
            "(line 1584,col 9)-(line 1584,col 54)",
            "(line 1585,col 9)-(line 1585,col 67)",
            "(line 1586,col 9)-(line 1586,col 54)",
            "(line 1587,col 9)-(line 1587,col 56)",
            "(line 1588,col 9)-(line 1588,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase()",
        "snippet": "    public void testIsAllUpperCase() {\n        assertFalse(StringUtils.isAllUpperCase(null));\n        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\n        assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\n        assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n    }",
        "begin_line": 1594,
        "end_line": 1600,
        "comment": "\n     * Test for {@link StringUtils#isAllUpperCase(String)}.\n     ",
        "child_ranges": [
            "(line 1595,col 9)-(line 1595,col 54)",
            "(line 1596,col 9)-(line 1596,col 67)",
            "(line 1597,col 9)-(line 1597,col 54)",
            "(line 1598,col 9)-(line 1598,col 56)",
            "(line 1599,col 9)-(line 1599,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStart()",
        "snippet": "    public void testRemoveStart() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(StringUtils.removeStart(null, null));\n        assertNull(StringUtils.removeStart(null, \"\"));\n        assertNull(StringUtils.removeStart(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n    }",
        "begin_line": 1602,
        "end_line": 1618,
        "comment": "",
        "child_ranges": [
            "(line 1604,col 9)-(line 1604,col 56)",
            "(line 1605,col 9)-(line 1605,col 54)",
            "(line 1606,col 9)-(line 1606,col 55)",
            "(line 1609,col 9)-(line 1609,col 60)",
            "(line 1610,col 9)-(line 1610,col 58)",
            "(line 1611,col 9)-(line 1611,col 59)",
            "(line 1614,col 9)-(line 1614,col 86)",
            "(line 1615,col 9)-(line 1615,col 82)",
            "(line 1616,col 9)-(line 1616,col 78)",
            "(line 1617,col 9)-(line 1617,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase()",
        "snippet": "    public void testRemoveStartIgnoreCase() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n        \n        // Case insensitive:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n    }",
        "begin_line": 1620,
        "end_line": 1639,
        "comment": "",
        "child_ranges": [
            "(line 1622,col 9)-(line 1622,col 103)",
            "(line 1623,col 9)-(line 1623,col 101)",
            "(line 1624,col 9)-(line 1624,col 103)",
            "(line 1627,col 9)-(line 1627,col 107)",
            "(line 1628,col 9)-(line 1628,col 105)",
            "(line 1629,col 9)-(line 1629,col 107)",
            "(line 1632,col 9)-(line 1632,col 151)",
            "(line 1633,col 9)-(line 1633,col 143)",
            "(line 1634,col 9)-(line 1634,col 135)",
            "(line 1635,col 9)-(line 1635,col 137)",
            "(line 1638,col 9)-(line 1638,col 151)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEnd()",
        "snippet": "    public void testRemoveEnd() {\n        // StringUtils.removeEnd(\"\", *)        = \"\"\n        assertNull(StringUtils.removeEnd(null, null));\n        assertNull(StringUtils.removeEnd(null, \"\"));\n        assertNull(StringUtils.removeEnd(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n    }",
        "begin_line": 1641,
        "end_line": 1658,
        "comment": "",
        "child_ranges": [
            "(line 1643,col 9)-(line 1643,col 54)",
            "(line 1644,col 9)-(line 1644,col 52)",
            "(line 1645,col 9)-(line 1645,col 53)",
            "(line 1648,col 9)-(line 1648,col 58)",
            "(line 1649,col 9)-(line 1649,col 56)",
            "(line 1650,col 9)-(line 1650,col 57)",
            "(line 1653,col 9)-(line 1653,col 90)",
            "(line 1654,col 9)-(line 1654,col 84)",
            "(line 1655,col 9)-(line 1655,col 80)",
            "(line 1656,col 9)-(line 1656,col 76)",
            "(line 1657,col 9)-(line 1657,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase()",
        "snippet": "    public void testRemoveEndIgnoreCase() {\n        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n\n        // Case insensitive:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".COM\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.COM\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\"), \"www.domain\");\n    }",
        "begin_line": 1660,
        "end_line": 1681,
        "comment": "",
        "child_ranges": [
            "(line 1662,col 9)-(line 1662,col 99)",
            "(line 1663,col 9)-(line 1663,col 97)",
            "(line 1664,col 9)-(line 1664,col 99)",
            "(line 1667,col 9)-(line 1667,col 103)",
            "(line 1668,col 9)-(line 1668,col 101)",
            "(line 1669,col 9)-(line 1669,col 103)",
            "(line 1672,col 9)-(line 1672,col 154)",
            "(line 1673,col 9)-(line 1673,col 147)",
            "(line 1674,col 9)-(line 1674,col 139)",
            "(line 1675,col 9)-(line 1675,col 131)",
            "(line 1676,col 9)-(line 1676,col 133)",
            "(line 1679,col 9)-(line 1679,col 147)",
            "(line 1680,col 9)-(line 1680,col 147)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_String()",
        "snippet": "    public void testRemove_String() {\n        // StringUtils.remove(null, *)        = null\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(null, StringUtils.remove(null, \"a\"));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n        \n        // StringUtils.remove(*, null)        = *\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n        \n        // StringUtils.remove(*, \"\")          = *\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n        \n        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n        \n        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n    }",
        "begin_line": 1683,
        "end_line": 1709,
        "comment": "",
        "child_ranges": [
            "(line 1685,col 9)-(line 1685,col 59)",
            "(line 1686,col 9)-(line 1686,col 57)",
            "(line 1687,col 9)-(line 1687,col 58)",
            "(line 1690,col 9)-(line 1690,col 55)",
            "(line 1691,col 9)-(line 1691,col 53)",
            "(line 1692,col 9)-(line 1692,col 54)",
            "(line 1695,col 9)-(line 1695,col 59)",
            "(line 1696,col 9)-(line 1696,col 55)",
            "(line 1697,col 9)-(line 1697,col 57)",
            "(line 1700,col 9)-(line 1700,col 57)",
            "(line 1701,col 9)-(line 1701,col 53)",
            "(line 1702,col 9)-(line 1702,col 55)",
            "(line 1705,col 9)-(line 1705,col 63)",
            "(line 1708,col 9)-(line 1708,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_char()",
        "snippet": "    public void testRemove_char() {\n        // StringUtils.remove(null, *)       = null\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        \n        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n        \n        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n    }",
        "begin_line": 1711,
        "end_line": 1727,
        "comment": "",
        "child_ranges": [
            "(line 1713,col 9)-(line 1713,col 58)",
            "(line 1714,col 9)-(line 1714,col 58)",
            "(line 1715,col 9)-(line 1715,col 58)",
            "(line 1718,col 9)-(line 1718,col 54)",
            "(line 1719,col 9)-(line 1719,col 54)",
            "(line 1720,col 9)-(line 1720,col 54)",
            "(line 1723,col 9)-(line 1723,col 64)",
            "(line 1726,col 9)-(line 1726,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray()",
        "snippet": "    public void testDifferenceAt_StringArray(){        \n        assertEquals(-1, StringUtils.indexOfDifference(null));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }",
        "begin_line": 1729,
        "end_line": 1747,
        "comment": "",
        "child_ranges": [
            "(line 1730,col 9)-(line 1730,col 62)",
            "(line 1731,col 9)-(line 1731,col 73)",
            "(line 1732,col 9)-(line 1732,col 78)",
            "(line 1733,col 9)-(line 1733,col 83)",
            "(line 1734,col 9)-(line 1734,col 79)",
            "(line 1735,col 9)-(line 1735,col 80)",
            "(line 1736,col 9)-(line 1736,col 89)",
            "(line 1737,col 9)-(line 1737,col 89)",
            "(line 1738,col 9)-(line 1738,col 81)",
            "(line 1739,col 9)-(line 1739,col 81)",
            "(line 1740,col 9)-(line 1740,col 85)",
            "(line 1741,col 9)-(line 1741,col 82)",
            "(line 1742,col 9)-(line 1742,col 85)",
            "(line 1743,col 9)-(line 1743,col 88)",
            "(line 1744,col 9)-(line 1744,col 86)",
            "(line 1745,col 9)-(line 1745,col 86)",
            "(line 1746,col 9)-(line 1746,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray()",
        "snippet": "    public void testGetCommonPrefix_StringArray(){        \n        assertEquals(\"\", StringUtils.getCommonPrefix(null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\n        assertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }",
        "begin_line": 1749,
        "end_line": 1767,
        "comment": "",
        "child_ranges": [
            "(line 1750,col 9)-(line 1750,col 60)",
            "(line 1751,col 9)-(line 1751,col 71)",
            "(line 1752,col 9)-(line 1752,col 79)",
            "(line 1753,col 9)-(line 1753,col 81)",
            "(line 1754,col 9)-(line 1754,col 77)",
            "(line 1755,col 9)-(line 1755,col 79)",
            "(line 1756,col 9)-(line 1756,col 88)",
            "(line 1757,col 9)-(line 1757,col 88)",
            "(line 1758,col 9)-(line 1758,col 80)",
            "(line 1759,col 9)-(line 1759,col 80)",
            "(line 1760,col 9)-(line 1760,col 86)",
            "(line 1761,col 9)-(line 1761,col 82)",
            "(line 1762,col 9)-(line 1762,col 86)",
            "(line 1763,col 9)-(line 1763,col 89)",
            "(line 1764,col 9)-(line 1764,col 85)",
            "(line 1765,col 9)-(line 1765,col 85)",
            "(line 1766,col 9)-(line 1766,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testStartsWithAny()",
        "snippet": "    public void testStartsWithAny() {\n        assertFalse(StringUtils.startsWithAny(null, null));\n        assertFalse(StringUtils.startsWithAny(null, new String[] {\"abc\"}));\n        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null));\n        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {}));\n        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}));\n        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}));\n        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abcd\"}));\n    }",
        "begin_line": 1769,
        "end_line": 1777,
        "comment": "",
        "child_ranges": [
            "(line 1770,col 9)-(line 1770,col 59)",
            "(line 1771,col 9)-(line 1771,col 75)",
            "(line 1772,col 9)-(line 1772,col 63)",
            "(line 1773,col 9)-(line 1773,col 74)",
            "(line 1774,col 9)-(line 1774,col 78)",
            "(line 1775,col 9)-(line 1775,col 91)",
            "(line 1776,col 9)-(line 1776,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.BooleanUtilsTest(java.lang.String)",
        "snippet": "    public BooleanUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new BooleanUtils());\n        Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n    }",
        "begin_line": 38,
        "end_line": 45,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 42)",
            "(line 40,col 9)-(line 40,col 77)",
            "(line 41,col 9)-(line 41,col 37)",
            "(line 42,col 9)-(line 42,col 70)",
            "(line 43,col 9)-(line 43,col 81)",
            "(line 44,col 9)-(line 44,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_negate_Boolean()",
        "snippet": "    public void test_negate_Boolean() {\n        assertSame(null, BooleanUtils.negate(null));\n        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));\n        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 52)",
            "(line 50,col 9)-(line 50,col 69)",
            "(line 51,col 9)-(line 51,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_isTrue_Boolean()",
        "snippet": "    public void test_isTrue_Boolean() {\n        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.isTrue((Boolean) null));\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 62)",
            "(line 57,col 9)-(line 57,col 64)",
            "(line 58,col 9)-(line 58,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_isNotTrue_Boolean()",
        "snippet": "    public void test_isNotTrue_Boolean() {\n        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));\n        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));\n        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 66)",
            "(line 63,col 9)-(line 63,col 66)",
            "(line 64,col 9)-(line 64,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_isFalse_Boolean()",
        "snippet": "    public void test_isFalse_Boolean() {\n        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));\n        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.isFalse((Boolean) null));\n    }",
        "begin_line": 68,
        "end_line": 72,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)",
            "(line 70,col 9)-(line 70,col 64)",
            "(line 71,col 9)-(line 71,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_isNotFalse_Boolean()",
        "snippet": "    public void test_isNotFalse_Boolean() {\n        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));\n        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 66)",
            "(line 76,col 9)-(line 76,col 68)",
            "(line 77,col 9)-(line 77,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Boolean()",
        "snippet": "    public void test_toBoolean_Boolean() {\n        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 65)",
            "(line 83,col 9)-(line 83,col 67)",
            "(line 84,col 9)-(line 84,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean()",
        "snippet": "    public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n    }",
        "begin_line": 87,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 84)",
            "(line 89,col 9)-(line 89,col 85)",
            "(line 90,col 9)-(line 90,col 86)",
            "(line 91,col 9)-(line 91,col 87)",
            "(line 92,col 9)-(line 92,col 86)",
            "(line 93,col 9)-(line 93,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int()",
        "snippet": "    public void test_toBoolean_int() {\n        assertEquals(true, BooleanUtils.toBoolean(1));\n        assertEquals(true, BooleanUtils.toBoolean(-1));\n        assertEquals(false, BooleanUtils.toBoolean(0));\n    }",
        "begin_line": 98,
        "end_line": 102,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 54)",
            "(line 100,col 9)-(line 100,col 55)",
            "(line 101,col 9)-(line 101,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int()",
        "snippet": "    public void test_toBooleanObject_int() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\n    }",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 68)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer()",
        "snippet": "    public void test_toBooleanObject_Integer() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));\n    }",
        "begin_line": 110,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 81)",
            "(line 112,col 9)-(line 112,col 82)",
            "(line 113,col 9)-(line 113,col 82)",
            "(line 114,col 9)-(line 114,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int_int_int()",
        "snippet": "    public void test_toBoolean_int_int_int() {\n        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n        try {\n            BooleanUtils.toBoolean(8, 6, 7);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 60)",
            "(line 120,col 9)-(line 120,col 61)",
            "(line 121,col 9)-(line 124,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer()",
        "snippet": "    public void test_toBoolean_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n\n        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n        try {\n            BooleanUtils.toBoolean(null, six, seven);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n        try {\n            BooleanUtils.toBoolean(new Integer(8), six, seven);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 127,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 37)",
            "(line 129,col 9)-(line 129,col 39)",
            "(line 131,col 9)-(line 131,col 80)",
            "(line 132,col 9)-(line 132,col 79)",
            "(line 133,col 9)-(line 136,col 48)",
            "(line 138,col 9)-(line 138,col 79)",
            "(line 139,col 9)-(line 139,col 80)",
            "(line 140,col 9)-(line 143,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int_int_int()",
        "snippet": "    public void test_toBooleanObject_int_int_int() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\n        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));\n        try {\n            BooleanUtils.toBooleanObject(9, 6, 7, 8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 147,
        "end_line": 155,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 77)",
            "(line 149,col 9)-(line 149,col 78)",
            "(line 150,col 9)-(line 150,col 69)",
            "(line 151,col 9)-(line 154,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer()",
        "snippet": "    public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        Integer eight = new Integer(8);\n\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));\n        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));\n        try {\n            BooleanUtils.toBooleanObject(null, six, seven, eight);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n        try {\n            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 157,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 37)",
            "(line 159,col 9)-(line 159,col 39)",
            "(line 160,col 9)-(line 160,col 39)",
            "(line 162,col 9)-(line 162,col 99)",
            "(line 163,col 9)-(line 163,col 98)",
            "(line 164,col 9)-(line 164,col 89)",
            "(line 165,col 9)-(line 168,col 48)",
            "(line 170,col 9)-(line 170,col 100)",
            "(line 171,col 9)-(line 171,col 101)",
            "(line 172,col 9)-(line 172,col 92)",
            "(line 173,col 9)-(line 176,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean()",
        "snippet": "    public void test_toInteger_boolean() {\n        assertEquals(1, BooleanUtils.toInteger(true));\n        assertEquals(0, BooleanUtils.toInteger(false));\n    }",
        "begin_line": 180,
        "end_line": 183,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 54)",
            "(line 182,col 9)-(line 182,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean()",
        "snippet": "    public void test_toIntegerObject_boolean() {\n        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n    }",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 73)",
            "(line 187,col 9)-(line 187,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean()",
        "snippet": "    public void test_toIntegerObject_Boolean() {\n        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));\n    }",
        "begin_line": 190,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 81)",
            "(line 192,col 9)-(line 192,col 82)",
            "(line 193,col 9)-(line 193,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean_int_int()",
        "snippet": "    public void test_toInteger_boolean_int_int() {\n        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\n        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\n    }",
        "begin_line": 197,
        "end_line": 200,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 60)",
            "(line 199,col 9)-(line 199,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_Boolean_int_int_int()",
        "snippet": "    public void test_toInteger_Boolean_int_int_int() {\n        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\n        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\n        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\n    }",
        "begin_line": 202,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 71)",
            "(line 204,col 9)-(line 204,col 72)",
            "(line 205,col 9)-(line 205,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer()",
        "snippet": "    public void test_toIntegerObject_boolean_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\n        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n    }",
        "begin_line": 208,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 37)",
            "(line 210,col 9)-(line 210,col 39)",
            "(line 211,col 9)-(line 211,col 74)",
            "(line 212,col 9)-(line 212,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer()",
        "snippet": "    public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        Integer eight = new Integer(8);\n        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\n        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\n        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));\n        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));\n    }",
        "begin_line": 215,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 37)",
            "(line 217,col 9)-(line 217,col 39)",
            "(line 218,col 9)-(line 218,col 39)",
            "(line 219,col 9)-(line 219,col 89)",
            "(line 220,col 9)-(line 220,col 92)",
            "(line 221,col 9)-(line 221,col 93)",
            "(line 222,col 9)-(line 222,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String()",
        "snippet": "    public void test_toBooleanObject_String() {\n        assertEquals(null, BooleanUtils.toBooleanObject((String) null));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"false\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"no\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"off\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"FALSE\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"NO\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"OFF\"));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"oof\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"true\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"yes\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"on\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TRUE\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\n    }",
        "begin_line": 227,
        "end_line": 244,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 72)",
            "(line 229,col 9)-(line 229,col 61)",
            "(line 230,col 9)-(line 230,col 75)",
            "(line 231,col 9)-(line 231,col 72)",
            "(line 232,col 9)-(line 232,col 73)",
            "(line 233,col 9)-(line 233,col 75)",
            "(line 234,col 9)-(line 234,col 72)",
            "(line 235,col 9)-(line 235,col 73)",
            "(line 236,col 9)-(line 236,col 64)",
            "(line 237,col 9)-(line 237,col 73)",
            "(line 238,col 9)-(line 238,col 72)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 73)",
            "(line 241,col 9)-(line 241,col 71)",
            "(line 242,col 9)-(line 242,col 72)",
            "(line 243,col 9)-(line 243,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String()",
        "snippet": "    public void test_toBooleanObject_String_String_String_String() {\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, \"N\", \"U\"));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, \"Y\", null, \"U\"));\n        assertSame(null, BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", null));\n        try {\n            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\n        try {\n            BooleanUtils.toBooleanObject(null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            BooleanUtils.toBooleanObject(\"X\", \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 246,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 94)",
            "(line 248,col 9)-(line 248,col 95)",
            "(line 249,col 9)-(line 249,col 86)",
            "(line 250,col 9)-(line 253,col 48)",
            "(line 255,col 9)-(line 255,col 85)",
            "(line 256,col 9)-(line 256,col 86)",
            "(line 257,col 9)-(line 257,col 77)",
            "(line 258,col 9)-(line 261,col 48)",
            "(line 262,col 9)-(line 265,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String()",
        "snippet": "    public void test_toBoolean_String() {\n        assertEquals(false, BooleanUtils.toBoolean((String) null));\n        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n    }",
        "begin_line": 269,
        "end_line": 309,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 67)",
            "(line 271,col 9)-(line 271,col 56)",
            "(line 272,col 9)-(line 272,col 59)",
            "(line 273,col 9)-(line 273,col 59)",
            "(line 274,col 9)-(line 274,col 59)",
            "(line 275,col 9)-(line 275,col 60)",
            "(line 276,col 9)-(line 276,col 61)",
            "(line 277,col 9)-(line 277,col 57)",
            "(line 278,col 9)-(line 278,col 59)",
            "(line 279,col 9)-(line 279,col 99)",
            "(line 280,col 9)-(line 280,col 59)",
            "(line 281,col 9)-(line 281,col 59)",
            "(line 282,col 9)-(line 282,col 59)",
            "(line 283,col 9)-(line 283,col 59)",
            "(line 284,col 9)-(line 284,col 59)",
            "(line 285,col 9)-(line 285,col 59)",
            "(line 286,col 9)-(line 286,col 59)",
            "(line 287,col 9)-(line 287,col 59)",
            "(line 288,col 9)-(line 288,col 59)",
            "(line 289,col 9)-(line 289,col 59)",
            "(line 290,col 9)-(line 290,col 59)",
            "(line 291,col 9)-(line 291,col 59)",
            "(line 292,col 9)-(line 292,col 59)",
            "(line 293,col 9)-(line 293,col 59)",
            "(line 294,col 9)-(line 294,col 59)",
            "(line 295,col 9)-(line 295,col 57)",
            "(line 296,col 9)-(line 296,col 57)",
            "(line 297,col 9)-(line 297,col 57)",
            "(line 298,col 9)-(line 298,col 57)",
            "(line 299,col 9)-(line 299,col 58)",
            "(line 300,col 9)-(line 300,col 58)",
            "(line 301,col 9)-(line 301,col 58)",
            "(line 302,col 9)-(line 302,col 58)",
            "(line 303,col 9)-(line 303,col 58)",
            "(line 304,col 9)-(line 304,col 58)",
            "(line 305,col 9)-(line 305,col 58)",
            "(line 306,col 9)-(line 306,col 58)",
            "(line 307,col 9)-(line 307,col 60)",
            "(line 308,col 9)-(line 308,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String_String_String()",
        "snippet": "    public void test_toBoolean_String_String_String() {\n        assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n        assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n        try {\n            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n        try {\n            BooleanUtils.toBoolean(null, \"Y\", \"N\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            BooleanUtils.toBoolean(\"X\", \"Y\", \"N\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 311,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 77)",
            "(line 313,col 9)-(line 313,col 78)",
            "(line 314,col 9)-(line 317,col 48)",
            "(line 319,col 9)-(line 319,col 66)",
            "(line 320,col 9)-(line 320,col 67)",
            "(line 321,col 9)-(line 324,col 48)",
            "(line 325,col 9)-(line 328,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean()",
        "snippet": "    public void test_toStringTrueFalse_Boolean() {\n        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));\n        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\n        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\n    }",
        "begin_line": 332,
        "end_line": 336,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 75)",
            "(line 334,col 9)-(line 334,col 75)",
            "(line 335,col 9)-(line 335,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_Boolean()",
        "snippet": "    public void test_toStringOnOff_Boolean() {\n        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));\n        assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\n        assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\n    }",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 71)",
            "(line 340,col 9)-(line 340,col 69)",
            "(line 341,col 9)-(line 341,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean()",
        "snippet": "    public void test_toStringYesNo_Boolean() {\n        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));\n        assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\n        assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\n    }",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 71)",
            "(line 346,col 9)-(line 346,col 70)",
            "(line 347,col 9)-(line 347,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toString_Boolean_String_String_String()",
        "snippet": "    public void test_toString_Boolean_String_String_String() {\n        assertEquals(\"U\", BooleanUtils.toString((Boolean) null, \"Y\", \"N\", \"U\"));\n        assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\n        assertEquals(\"N\", BooleanUtils.toString(Boolean.FALSE, \"Y\", \"N\", \"U\"));\n    }",
        "begin_line": 350,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 80)",
            "(line 352,col 9)-(line 352,col 78)",
            "(line 353,col 9)-(line 353,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_boolean()",
        "snippet": "    public void test_toStringTrueFalse_boolean() {\n        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\n        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\n    }",
        "begin_line": 357,
        "end_line": 360,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 67)",
            "(line 359,col 9)-(line 359,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_boolean()",
        "snippet": "    public void test_toStringOnOff_boolean() {\n        assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\n        assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\n    }",
        "begin_line": 362,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 61)",
            "(line 364,col 9)-(line 364,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_boolean()",
        "snippet": "    public void test_toStringYesNo_boolean() {\n        assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\n        assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\n    }",
        "begin_line": 367,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 62)",
            "(line 369,col 9)-(line 369,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.test_toString_boolean_String_String_String()",
        "snippet": "    public void test_toString_boolean_String_String_String() {\n        assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\n        assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n    }",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 65)",
            "(line 374,col 9)-(line 374,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_nullInput()",
        "snippet": "    public void testXor_primitive_nullInput() {\n        final boolean[] b = null;\n        try {\n            BooleanUtils.xor(b);\n            fail(\"Exception was not thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 379,
        "end_line": 385,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 33)",
            "(line 381,col 9)-(line 384,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_emptyInput()",
        "snippet": "    public void testXor_primitive_emptyInput() {\n        try {\n            BooleanUtils.xor(new boolean[] {});\n            fail(\"Exception was not thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 387,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 391,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_2items()",
        "snippet": "    public void testXor_primitive_validInput_2items() {\n        assertTrue(\n            \"True result for (true, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, true }));\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(new boolean[] { false, false }));\n\n        assertTrue(\n            \"False result for (true, false)\",\n            BooleanUtils.xor(new boolean[] { true, false }));\n\n        assertTrue(\n            \"False result for (false, true)\",\n            BooleanUtils.xor(new boolean[] { false, true }));\n    }",
        "begin_line": 394,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 397,col 62)",
            "(line 399,col 9)-(line 401,col 64)",
            "(line 403,col 9)-(line 405,col 61)",
            "(line 407,col 9)-(line 409,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_3items()",
        "snippet": "    public void testXor_primitive_validInput_3items() {\n        assertTrue(\n            \"False result for (false, false, true)\",\n            BooleanUtils.xor(new boolean[] { false, false, true }));\n\n        assertTrue(\n            \"False result for (false, true, false)\",\n            BooleanUtils.xor(new boolean[] { false, true, false }));\n\n        assertTrue(\n            \"False result for (true, false, false)\",\n            BooleanUtils.xor(new boolean[] { true, false, false }));\n\n        assertTrue(\n            \"True result for (true, true, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, true, true }));\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(new boolean[] { false, false, false }));\n\n        assertTrue(\n            \"True result for (true, true, false)\",\n            ! BooleanUtils.xor(new boolean[] { true, true, false }));\n\n        assertTrue(\n            \"True result for (true, false, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, false, true }));\n\n        assertTrue(\n            \"False result for (false, true, true)\",\n            ! BooleanUtils.xor(new boolean[] { false, true, true }));\n    }",
        "begin_line": 412,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 413,col 9)-(line 415,col 68)",
            "(line 417,col 9)-(line 419,col 68)",
            "(line 421,col 9)-(line 423,col 68)",
            "(line 425,col 9)-(line 427,col 68)",
            "(line 429,col 9)-(line 431,col 71)",
            "(line 433,col 9)-(line 435,col 69)",
            "(line 437,col 9)-(line 439,col 69)",
            "(line 441,col 9)-(line 443,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullInput()",
        "snippet": "    public void testXor_object_nullInput() {\n        final Boolean[] b = null;\n        try {\n            BooleanUtils.xor(b);\n            fail(\"Exception was not thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 446,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 447,col 9)-(line 447,col 33)",
            "(line 448,col 9)-(line 451,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_object_emptyInput()",
        "snippet": "    public void testXor_object_emptyInput() {\n        try {\n            BooleanUtils.xor(new Boolean[] {});\n            fail(\"Exception was not thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 454,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 455,col 9)-(line 458,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput()",
        "snippet": "    public void testXor_object_nullElementInput() {\n        try {\n            BooleanUtils.xor(new Boolean[] {null});\n            fail(\"Exception was not thrown for null element input.\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 461,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 462,col 9)-(line 465,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items()",
        "snippet": "    public void testXor_object_validInput_2items() {\n        assertTrue(\n            \"True result for (true, true)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (true, false)\",\n            BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true)\",\n            BooleanUtils\n                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n                .booleanValue());\n    }",
        "begin_line": 468,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 473,col 33)",
            "(line 475,col 9)-(line 479,col 33)",
            "(line 481,col 9)-(line 485,col 33)",
            "(line 487,col 9)-(line 491,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items()",
        "snippet": "    public void testXor_object_validInput_3items() {\n        assertTrue(\n            \"False result for (false, false, true)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.FALSE,\n                        Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true, false)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.TRUE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (true, false, false)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.FALSE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, true, true)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.FALSE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, true, false)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.TRUE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, false, true)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.FALSE,\n                        Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true, true)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.TRUE,\n                        Boolean.TRUE })\n                .booleanValue());\n                \n    }",
        "begin_line": 494,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 503,col 33)",
            "(line 505,col 9)-(line 513,col 33)",
            "(line 515,col 9)-(line 523,col 33)",
            "(line 525,col 9)-(line 529,col 33)",
            "(line 531,col 9)-(line 538,col 33)",
            "(line 540,col 9)-(line 547,col 33)",
            "(line 549,col 9)-(line 556,col 33)",
            "(line 558,col 9)-(line 565,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.LocaleUtilsTest(java.lang.String)",
        "snippet": "    public LocaleUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * Constructor.\n     * \n     * @param name\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.setUp()",
        "snippet": "    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        // Testing #LANG-304. Must be called before availableLocaleSet is called.\n        LocaleUtils.isAvailableLocale(Locale.getDefault());\n    }",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 22)",
            "(line 62,col 9)-(line 62,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new LocaleUtils());\n        Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n    }",
        "begin_line": 69,
        "end_line": 76,
        "comment": "\n     * Test that constructors are public, and work, etc.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 41)",
            "(line 71,col 9)-(line 71,col 76)",
            "(line 72,col 9)-(line 72,col 37)",
            "(line 73,col 9)-(line 73,col 70)",
            "(line 74,col 9)-(line 74,col 80)",
            "(line 75,col 9)-(line 75,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String)",
        "snippet": "    private void assertValidToLocale(String language) {\n        Locale locale = LocaleUtils.toLocale(language);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        //country and variant are empty\n        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }",
        "begin_line": 84,
        "end_line": 91,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param language  the language string\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 89,col 9)-(line 89,col 85)",
            "(line 90,col 9)-(line 90,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(String localeString, String language, String country) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        //variant is empty\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 59)",
            "(line 102,col 9)-(line 102,col 46)",
            "(line 103,col 9)-(line 103,col 53)",
            "(line 104,col 9)-(line 104,col 51)",
            "(line 106,col 9)-(line 106,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(\n            String localeString, String language, \n            String country, String variant) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        assertEquals(variant, locale.getVariant());\n        \n    }",
        "begin_line": 117,
        "end_line": 126,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     * @param variant of the resulting Locale\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 59)",
            "(line 121,col 9)-(line 121,col 46)",
            "(line 122,col 9)-(line 122,col 53)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 124,col 9)-(line 124,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part()",
        "snippet": "    public void testToLocale_1Part() {\n        assertEquals(null, LocaleUtils.toLocale((String) null));\n        \n        assertValidToLocale(\"us\");\n        assertValidToLocale(\"fr\");\n        assertValidToLocale(\"de\");\n        assertValidToLocale(\"zh\");\n        // Valid format but lang doesnt exist, should make instance anyway\n        assertValidToLocale(\"qq\");\n        \n        try {\n            LocaleUtils.toLocale(\"Us\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"US\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"u#\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        \n        try {\n            LocaleUtils.toLocale(\"u\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n       \n        try {\n            LocaleUtils.toLocale(\"uuu\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n\n        try {\n            LocaleUtils.toLocale(\"uu_U\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n    }        ",
        "begin_line": 131,
        "end_line": 172,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 64)",
            "(line 134,col 9)-(line 134,col 34)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 141,col 9)-(line 144,col 49)",
            "(line 145,col 9)-(line 148,col 49)",
            "(line 149,col 9)-(line 152,col 49)",
            "(line 153,col 9)-(line 156,col 49)",
            "(line 158,col 9)-(line 161,col 49)",
            "(line 163,col 9)-(line 166,col 49)",
            "(line 168,col 9)-(line 171,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part()",
        "snippet": "    public void testToLocale_2Part() {\n        assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n        //valid though doesnt exist\n        assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\n        \n        try {\n            LocaleUtils.toLocale(\"us-EN\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_En\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_en\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_eN\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS_EN\");\n            fail(\"Should fail first part not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_E3\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n    }        ",
        "begin_line": 177,
        "end_line": 206,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 49)",
            "(line 180,col 9)-(line 180,col 49)",
            "(line 182,col 9)-(line 185,col 49)",
            "(line 186,col 9)-(line 189,col 49)",
            "(line 190,col 9)-(line 193,col 49)",
            "(line 194,col 9)-(line 197,col 49)",
            "(line 198,col 9)-(line 201,col 49)",
            "(line 202,col 9)-(line 205,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part()",
        "snippet": "    public void testToLocale_3Part() {\n        assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n        // this isn't pretty, but was caused by a jdk bug it seems\n        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\n        } else {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"A\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFSAFDFDSDFF\");\n        }\n        \n        try {\n            LocaleUtils.toLocale(\"us_EN-a\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uu_UU_\");\n            fail(\"Must be 3, 5 or 7+ in length\");\n        } catch (IllegalArgumentException iae) {}\n    }",
        "begin_line": 211,
        "end_line": 231,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 56)",
            "(line 215,col 9)-(line 221,col 9)",
            "(line 223,col 9)-(line 226,col 49)",
            "(line 227,col 9)-(line 230,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[])",
        "snippet": "    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n        List<Locale> localeList = defaultLocale == null ?\n                LocaleUtils.localeLookupList(locale) :\n                LocaleUtils.localeLookupList(locale, defaultLocale);\n        \n        assertEquals(expected.length, localeList.size());\n        assertEquals(Arrays.asList(expected), localeList);\n        assertUnmodifiableCollection(localeList);\n    }",
        "begin_line": 241,
        "end_line": 249,
        "comment": "\n     * Helper method for local lookups.\n     *\n     * @param locale  the input locale\n     * @param defaultLocale  the input default locale\n     * @param expected  expected results\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 244,col 68)",
            "(line 246,col 9)-(line 246,col 57)",
            "(line 247,col 9)-(line 247,col 58)",
            "(line 248,col 9)-(line 248,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_Locale()",
        "snippet": "    public void testLocaleLookupList_Locale() {\n        assertLocaleLookupList(null, null, new Locale[0]);\n        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, null,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n    }        ",
        "begin_line": 255,
        "end_line": 269,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 58)",
            "(line 257,col 9)-(line 257,col 73)",
            "(line 258,col 9)-(line 258,col 73)",
            "(line 259,col 9)-(line 259,col 73)",
            "(line 260,col 9)-(line 263,col 28)",
            "(line 264,col 9)-(line 268,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_LocaleLocale()",
        "snippet": "    public void testLocaleLookupList_LocaleLocale() {\n        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n                new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, \n                new Locale[]{LOCALE_EN});\n        \n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, \n            new Locale[]{\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        \n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,\n            new Locale[] {\n                LOCALE_FR_CA,\n                LOCALE_FR,\n                LOCALE_EN});\n    }",
        "begin_line": 274,
        "end_line": 322,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 275,col 9)-(line 276,col 41)",
            "(line 277,col 9)-(line 278,col 41)",
            "(line 280,col 9)-(line 283,col 28)",
            "(line 284,col 9)-(line 288,col 28)",
            "(line 289,col 9)-(line 293,col 31)",
            "(line 295,col 9)-(line 299,col 28)",
            "(line 300,col 9)-(line 304,col 28)",
            "(line 305,col 9)-(line 310,col 28)",
            "(line 311,col 9)-(line 316,col 31)",
            "(line 317,col 9)-(line 321,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleList()",
        "snippet": "    public void testAvailableLocaleList() {\n        List<Locale> list = LocaleUtils.availableLocaleList();\n        List<Locale> list2 = LocaleUtils.availableLocaleList();\n        assertNotNull(list);\n        assertSame(list, list2);\n        assertUnmodifiableCollection(list);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        assertEquals(jdkLocaleList, list);\n    }",
        "begin_line": 328,
        "end_line": 338,
        "comment": "\n     * Test availableLocaleList() method.\n     ",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 62)",
            "(line 330,col 9)-(line 330,col 63)",
            "(line 331,col 9)-(line 331,col 28)",
            "(line 332,col 9)-(line 332,col 32)",
            "(line 333,col 9)-(line 333,col 43)",
            "(line 335,col 9)-(line 335,col 63)",
            "(line 336,col 9)-(line 336,col 67)",
            "(line 337,col 9)-(line 337,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleSet()",
        "snippet": "    public void testAvailableLocaleSet() {\n        Set<Locale> set = LocaleUtils.availableLocaleSet();\n        Set<Locale> set2 = LocaleUtils.availableLocaleSet();\n        assertNotNull(set);\n        assertSame(set, set2);\n        assertUnmodifiableCollection(set);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList);\n        assertEquals(jdkLocaleSet, set);\n    }",
        "begin_line": 344,
        "end_line": 355,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 59)",
            "(line 346,col 9)-(line 346,col 60)",
            "(line 347,col 9)-(line 347,col 27)",
            "(line 348,col 9)-(line 348,col 30)",
            "(line 349,col 9)-(line 349,col 42)",
            "(line 351,col 9)-(line 351,col 63)",
            "(line 352,col 9)-(line 352,col 67)",
            "(line 353,col 9)-(line 353,col 70)",
            "(line 354,col 9)-(line 354,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testIsAvailableLocale()",
        "snippet": "    public void testIsAvailableLocale() {\n        Set<Locale> set = LocaleUtils.availableLocaleSet();\n        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\n        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\n        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\n        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n    }",
        "begin_line": 361,
        "end_line": 370,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 59)",
            "(line 363,col 9)-(line 363,col 88)",
            "(line 364,col 9)-(line 364,col 94)",
            "(line 365,col 9)-(line 365,col 104)",
            "(line 366,col 9)-(line 366,col 88)",
            "(line 367,col 9)-(line 367,col 94)",
            "(line 368,col 9)-(line 368,col 88)",
            "(line 369,col 9)-(line 369,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertLanguageByCountry(String country, String[] languages) {\n        List<Locale> list = LocaleUtils.languagesByCountry(country);\n        List<Locale> list2 = LocaleUtils.languagesByCountry(country);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < languages.length; i++) {\n            Iterator<Locale> iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(country, locale.getCountry());\n                if (languages[i].equals(locale.getLanguage())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + languages[i]\n                        + \" for country: \" + country);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }",
        "begin_line": 382,
        "end_line": 409,
        "comment": "\n     * Make sure the language by country is correct. It checks that \n     * the LocaleUtils.languagesByCountry(country) call contains the \n     * array of languages passed in. It may contain more due to JVM \n     * variations.\n     *\n     * @param country\n     * @param languages array of languages that should be returned\n     ",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 68)",
            "(line 384,col 9)-(line 384,col 69)",
            "(line 385,col 9)-(line 385,col 28)",
            "(line 386,col 9)-(line 386,col 32)",
            "(line 388,col 9)-(line 407,col 9)",
            "(line 408,col 9)-(line 408,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLanguagesByCountry()",
        "snippet": "    public void testLanguagesByCountry() {\n        assertLanguageByCountry(null, new String[0]);\n        assertLanguageByCountry(\"GB\", new String[]{\"en\"});\n        assertLanguageByCountry(\"ZZ\", new String[0]);\n        assertLanguageByCountry(\"CH\", new String[]{\"fr\", \"de\", \"it\"});\n    }",
        "begin_line": 414,
        "end_line": 419,
        "comment": "\n     * Test languagesByCountry() method.\n     ",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 53)",
            "(line 416,col 9)-(line 416,col 58)",
            "(line 417,col 9)-(line 417,col 53)",
            "(line 418,col 9)-(line 418,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertCountriesByLanguage(String language, String[] countries) {\n        List<Locale> list = LocaleUtils.countriesByLanguage(language);\n        List<Locale> list2 = LocaleUtils.countriesByLanguage(language);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < countries.length; i++) {\n            Iterator<Locale> iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(language, locale.getLanguage());\n                if (countries[i].equals(locale.getCountry())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + countries[i]\n                        + \" for country: \" + language);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }",
        "begin_line": 432,
        "end_line": 459,
        "comment": "\n     * Make sure the country by language is correct. It checks that \n     * the LocaleUtils.countryByLanguage(language) call contains the \n     * array of countries passed in. It may contain more due to JVM \n     * variations.\n     *\n     *\n     * @param language\n     * @param countries array of countries that should be returned\n     ",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 70)",
            "(line 434,col 9)-(line 434,col 71)",
            "(line 435,col 9)-(line 435,col 28)",
            "(line 436,col 9)-(line 436,col 32)",
            "(line 438,col 9)-(line 457,col 9)",
            "(line 458,col 9)-(line 458,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testCountriesByLanguage()",
        "snippet": "    public void testCountriesByLanguage() {\n        assertCountriesByLanguage(null, new String[0]);\n        assertCountriesByLanguage(\"de\", new String[]{\"DE\", \"CH\", \"AT\", \"LU\"});\n        assertCountriesByLanguage(\"zz\", new String[0]);\n        assertCountriesByLanguage(\"it\", new String[]{\"IT\", \"CH\"});\n    }",
        "begin_line": 464,
        "end_line": 469,
        "comment": "\n     * Test countriesByLanguage() method.\n     ",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 55)",
            "(line 466,col 9)-(line 466,col 78)",
            "(line 467,col 9)-(line 467,col 55)",
            "(line 468,col 9)-(line 468,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection<?>)",
        "snippet": "    private static void assertUnmodifiableCollection(Collection<?> coll) {\n        try {\n            coll.add(null);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }",
        "begin_line": 474,
        "end_line": 479,
        "comment": "\n     * @param coll  the collection to check\n     ",
        "child_ranges": [
            "(line 475,col 9)-(line 478,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang3.LocaleUtilsTest.testLang328()",
        "snippet": "    public void testLang328() {\n        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n    }",
        "begin_line": 484,
        "end_line": 486,
        "comment": "\n     * Tests #LANG-328 - only language+variant\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 485,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.BitFieldTest(java.lang.String)",
        "snippet": "    public BitFieldTest(String name) {\n        super(name);\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n     * Constructor BitFieldTest\n     *\n     * @param name\n     ",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertEquals(bf_multi.getValue(-1), 127);\n        assertEquals(bf_multi.getValue(0), 0);\n        assertEquals(bf_single.getValue(-1), 1);\n        assertEquals(bf_single.getValue(0), 0);\n        assertEquals(bf_zero.getValue(-1), 0);\n        assertEquals(bf_zero.getValue(0), 0);\n    }",
        "begin_line": 47,
        "end_line": 54,
        "comment": "\n     * test the getValue() method\n     ",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 49)",
            "(line 49,col 9)-(line 49,col 46)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 47)",
            "(line 52,col 9)-(line 52,col 46)",
            "(line 53,col 9)-(line 53,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testGetShortValue()",
        "snippet": "    public void testGetShortValue() {\n        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);\n        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\n        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);\n        assertEquals(bf_single.getShortValue((short) 0), (short) 0);\n        assertEquals(bf_zero.getShortValue((short) -1), (short) 0);\n        assertEquals(bf_zero.getShortValue((short) 0), (short) 0);\n    }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "\n     * test the getShortValue() method\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 71)",
            "(line 61,col 9)-(line 61,col 67)",
            "(line 62,col 9)-(line 62,col 70)",
            "(line 63,col 9)-(line 63,col 68)",
            "(line 64,col 9)-(line 64,col 67)",
            "(line 65,col 9)-(line 65,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testGetRawValue()",
        "snippet": "    public void testGetRawValue() {\n        assertEquals(bf_multi.getRawValue(-1), 0x3F80);\n        assertEquals(bf_multi.getRawValue(0), 0);\n        assertEquals(bf_single.getRawValue(-1), 0x4000);\n        assertEquals(bf_single.getRawValue(0), 0);\n        assertEquals(bf_zero.getRawValue(-1), 0);\n        assertEquals(bf_zero.getRawValue(0), 0);\n    }",
        "begin_line": 71,
        "end_line": 78,
        "comment": "\n     * test the getRawValue() method\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 55)",
            "(line 73,col 9)-(line 73,col 49)",
            "(line 74,col 9)-(line 74,col 56)",
            "(line 75,col 9)-(line 75,col 50)",
            "(line 76,col 9)-(line 76,col 49)",
            "(line 77,col 9)-(line 77,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testGetShortRawValue()",
        "snippet": "    public void testGetShortRawValue() {\n        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);\n        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\n        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);\n        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);\n        assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);\n        assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);\n    }",
        "begin_line": 83,
        "end_line": 90,
        "comment": "\n     * test the getShortRawValue() method\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 70)",
            "(line 86,col 9)-(line 86,col 78)",
            "(line 87,col 9)-(line 87,col 71)",
            "(line 88,col 9)-(line 88,col 70)",
            "(line 89,col 9)-(line 89,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testIsSet()",
        "snippet": "    public void testIsSet() {\n        assertTrue(!bf_multi.isSet(0));\n        assertTrue(!bf_zero.isSet(0));\n        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n            assertTrue(bf_multi.isSet(j));\n        }\n        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n            assertTrue(!bf_zero.isSet(j));\n        }\n        assertTrue(!bf_single.isSet(0));\n        assertTrue(bf_single.isSet(0x4000));\n    }",
        "begin_line": 95,
        "end_line": 106,
        "comment": "\n     * test the isSet() method\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 39)",
            "(line 97,col 9)-(line 97,col 38)",
            "(line 98,col 9)-(line 100,col 9)",
            "(line 101,col 9)-(line 103,col 9)",
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 105,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testIsAllSet()",
        "snippet": "    public void testIsAllSet() {\n        for (int j = 0; j < 0x3F80; j += 0x80) {\n            assertTrue(!bf_multi.isAllSet(j));\n            assertTrue(bf_zero.isAllSet(j));\n        }\n        assertTrue(bf_multi.isAllSet(0x3F80));\n        assertTrue(!bf_single.isAllSet(0));\n        assertTrue(bf_single.isAllSet(0x4000));\n    }",
        "begin_line": 111,
        "end_line": 119,
        "comment": "\n     * test the isAllSet() method\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 115,col 9)",
            "(line 116,col 9)-(line 116,col 46)",
            "(line 117,col 9)-(line 117,col 43)",
            "(line 118,col 9)-(line 118,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testSetValue()",
        "snippet": "    public void testSetValue() {\n        for (int j = 0; j < 128; j++) {\n            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n            assertEquals(bf_multi.setValue(0, j), j << 7);\n        }\n        for (int j = 0; j < 128; j++) {\n          assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);\n          assertEquals(bf_zero.setValue(0, j), 0);\n      }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_multi.setValue(0x3f80, 128), 0);\n        for (int j = 0; j < 2; j++) {\n            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);\n            assertEquals(bf_single.setValue(0, j), j << 14);\n        }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_single.setValue(0x4000, 2), 0);\n    }",
        "begin_line": 124,
        "end_line": 143,
        "comment": "\n     * test the setValue() method\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 128,col 9)",
            "(line 129,col 9)-(line 132,col 7)",
            "(line 135,col 9)-(line 135,col 56)",
            "(line 136,col 9)-(line 139,col 9)",
            "(line 142,col 9)-(line 142,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testSetShortValue()",
        "snippet": "    public void testSetShortValue() {\n        for (int j = 0; j < 128; j++) {\n            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\n            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));\n        }\n        for (int j = 0; j < 128; j++) {\n            assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);\n            assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) (0));\n        }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);\n        for (int j = 0; j < 2; j++) {\n            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);\n            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));\n        }\n\n        // verify that excess bits are stripped off\n        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);\n    }",
        "begin_line": 148,
        "end_line": 167,
        "comment": "\n     * test the setShortValue() method\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 156,col 9)",
            "(line 159,col 9)-(line 159,col 85)",
            "(line 160,col 9)-(line 163,col 9)",
            "(line 166,col 9)-(line 166,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testByte()",
        "snippet": "    public void testByte() {\n        assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));\n        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\n        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));\n        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));\n        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));\n        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));\n        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));\n        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));\n        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));\n        assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));\n        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));\n        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));\n        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));\n        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));\n        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));\n        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));\n        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));\n        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));\n        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));\n        byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);\n\n        assertEquals(false, new BitField(0x40).isSet(clearedBit));\n    }",
        "begin_line": 169,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 72)",
            "(line 171,col 9)-(line 171,col 72)",
            "(line 172,col 9)-(line 172,col 72)",
            "(line 173,col 9)-(line 173,col 72)",
            "(line 174,col 9)-(line 174,col 72)",
            "(line 175,col 9)-(line 175,col 74)",
            "(line 176,col 9)-(line 176,col 74)",
            "(line 177,col 9)-(line 177,col 74)",
            "(line 178,col 9)-(line 178,col 77)",
            "(line 179,col 9)-(line 179,col 73)",
            "(line 180,col 9)-(line 180,col 73)",
            "(line 181,col 9)-(line 181,col 73)",
            "(line 182,col 9)-(line 182,col 73)",
            "(line 183,col 9)-(line 183,col 73)",
            "(line 184,col 9)-(line 184,col 75)",
            "(line 185,col 9)-(line 185,col 75)",
            "(line 186,col 9)-(line 186,col 75)",
            "(line 187,col 9)-(line 187,col 77)",
            "(line 188,col 9)-(line 188,col 76)",
            "(line 189,col 9)-(line 189,col 80)",
            "(line 191,col 9)-(line 191,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testClear()",
        "snippet": "    public void testClear() {\n        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n        assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);\n    }",
        "begin_line": 197,
        "end_line": 201,
        "comment": "\n     * test the clear() method\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 53)",
            "(line 199,col 9)-(line 199,col 54)",
            "(line 200,col 9)-(line 200,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testClearShort()",
        "snippet": "    public void testClearShort() {\n        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);\n        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);\n        assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);\n    }",
        "begin_line": 206,
        "end_line": 210,
        "comment": "\n     * test the clearShort() method\n     ",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 71)",
            "(line 208,col 9)-(line 208,col 72)",
            "(line 209,col 9)-(line 209,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testSet()",
        "snippet": "    public void testSet() {\n        assertEquals(bf_multi.set(0), 0x3F80);\n        assertEquals(bf_single.set(0), 0x4000);\n        assertEquals(bf_zero.set(0), 0);\n    }",
        "begin_line": 215,
        "end_line": 219,
        "comment": "\n     * test the set() method\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 46)",
            "(line 217,col 9)-(line 217,col 47)",
            "(line 218,col 9)-(line 218,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testSetShort()",
        "snippet": "    public void testSetShort() {\n        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\n        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\n        assertEquals(bf_zero.setShort((short) 0), (short) 0);\n    }",
        "begin_line": 224,
        "end_line": 228,
        "comment": "\n     * test the setShort() method\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 67)",
            "(line 226,col 9)-(line 226,col 68)",
            "(line 227,col 9)-(line 227,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testSetBoolean()",
        "snippet": "    public void testSetBoolean() {\n        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n        assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));\n        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\n        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));\n        assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));\n    }",
        "begin_line": 233,
        "end_line": 240,
        "comment": "\n     * test the setBoolean() method\n     ",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 68)",
            "(line 235,col 9)-(line 235,col 70)",
            "(line 236,col 9)-(line 236,col 66)",
            "(line 237,col 9)-(line 237,col 73)",
            "(line 238,col 9)-(line 238,col 75)",
            "(line 239,col 9)-(line 239,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.BitFieldTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/BitFieldTest.java",
        "signature": "org.apache.commons.lang3.BitFieldTest.testSetShortBoolean()",
        "snippet": "    public void testSetShortBoolean() {\n        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\n        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\n        assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));\n        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));\n        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));\n        assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));\n    }",
        "begin_line": 245,
        "end_line": 252,
        "comment": "\n     * test the setShortBoolean() method\n     ",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 94)",
            "(line 247,col 9)-(line 247,col 96)",
            "(line 248,col 9)-(line 248,col 92)",
            "(line 249,col 9)-(line 249,col 101)",
            "(line 250,col 9)-(line 250,col 103)",
            "(line 251,col 9)-(line 251,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest.StringUtilsStartsEndsWithTest(java.lang.String)",
        "snippet": "    public StringUtilsStartsEndsWithTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWith()",
        "snippet": "    public void testStartsWith() {\n        assertTrue(\"startsWith(null, null)\", StringUtils.startsWith(null, (String)null));\n        assertFalse(\"startsWith(FOOBAR, null)\", StringUtils.startsWith(FOOBAR, (String)null));\n        assertFalse(\"startsWith(null, FOO)\",    StringUtils.startsWith(null, FOO));\n        assertTrue(\"startsWith(FOOBAR, \\\"\\\")\",  StringUtils.startsWith(FOOBAR, \"\"));\n\n        assertTrue(\"startsWith(foobar, foo)\",  StringUtils.startsWith(foobar, foo));\n        assertTrue(\"startsWith(FOOBAR, FOO)\",  StringUtils.startsWith(FOOBAR, FOO));\n        assertFalse(\"startsWith(foobar, FOO)\", StringUtils.startsWith(foobar, FOO));\n        assertFalse(\"startsWith(FOOBAR, foo)\", StringUtils.startsWith(FOOBAR, foo));\n\n        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(foo, foobar));\n        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(bar, foobar));\n\n        assertFalse(\"startsWith(foobar, bar)\", StringUtils.startsWith(foobar, bar));\n        assertFalse(\"startsWith(FOOBAR, BAR)\", StringUtils.startsWith(FOOBAR, BAR));\n        assertFalse(\"startsWith(foobar, BAR)\", StringUtils.startsWith(foobar, BAR));\n        assertFalse(\"startsWith(FOOBAR, bar)\", StringUtils.startsWith(FOOBAR, bar));\n    }",
        "begin_line": 43,
        "end_line": 61,
        "comment": "\n     * Test StringUtils.startsWith()\n     ",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 89)",
            "(line 45,col 9)-(line 45,col 94)",
            "(line 46,col 9)-(line 46,col 83)",
            "(line 47,col 9)-(line 47,col 84)",
            "(line 49,col 9)-(line 49,col 84)",
            "(line 50,col 9)-(line 50,col 84)",
            "(line 51,col 9)-(line 51,col 84)",
            "(line 52,col 9)-(line 52,col 84)",
            "(line 54,col 9)-(line 54,col 84)",
            "(line 55,col 9)-(line 55,col 84)",
            "(line 57,col 9)-(line 57,col 84)",
            "(line 58,col 9)-(line 58,col 84)",
            "(line 59,col 9)-(line 59,col 84)",
            "(line 60,col 9)-(line 60,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase()",
        "snippet": "    public void testStartsWithIgnoreCase() {\n        assertTrue(\"startsWithIgnoreCase(null, null)\",    StringUtils.startsWithIgnoreCase(null, (String)null));\n        assertFalse(\"startsWithIgnoreCase(FOOBAR, null)\", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));\n        assertFalse(\"startsWithIgnoreCase(null, FOO)\",    StringUtils.startsWithIgnoreCase(null, FOO));\n        assertTrue(\"startsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.startsWithIgnoreCase(FOOBAR, \"\"));\n\n        assertTrue(\"startsWithIgnoreCase(foobar, foo)\", StringUtils.startsWithIgnoreCase(foobar, foo));\n        assertTrue(\"startsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.startsWithIgnoreCase(FOOBAR, FOO));\n        assertTrue(\"startsWithIgnoreCase(foobar, FOO)\", StringUtils.startsWithIgnoreCase(foobar, FOO));\n        assertTrue(\"startsWithIgnoreCase(FOOBAR, foo)\", StringUtils.startsWithIgnoreCase(FOOBAR, foo));\n\n        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(foo, foobar));\n        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(bar, foobar));\n\n        assertFalse(\"startsWithIgnoreCase(foobar, bar)\", StringUtils.startsWithIgnoreCase(foobar, bar));\n        assertFalse(\"startsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.startsWithIgnoreCase(FOOBAR, BAR));\n        assertFalse(\"startsWithIgnoreCase(foobar, BAR)\", StringUtils.startsWithIgnoreCase(foobar, BAR));\n        assertFalse(\"startsWithIgnoreCase(FOOBAR, bar)\", StringUtils.startsWithIgnoreCase(FOOBAR, bar));\n    }",
        "begin_line": 66,
        "end_line": 84,
        "comment": "\n     * Test StringUtils.testStartsWithIgnoreCase()\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 112)",
            "(line 68,col 9)-(line 68,col 114)",
            "(line 69,col 9)-(line 69,col 103)",
            "(line 70,col 9)-(line 70,col 104)",
            "(line 72,col 9)-(line 72,col 103)",
            "(line 73,col 9)-(line 73,col 103)",
            "(line 74,col 9)-(line 74,col 103)",
            "(line 75,col 9)-(line 75,col 103)",
            "(line 77,col 9)-(line 77,col 104)",
            "(line 78,col 9)-(line 78,col 104)",
            "(line 80,col 9)-(line 80,col 104)",
            "(line 81,col 9)-(line 81,col 104)",
            "(line 82,col 9)-(line 82,col 104)",
            "(line 83,col 9)-(line 83,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWith()",
        "snippet": "    public void testEndsWith() {\n        assertTrue(\"endsWith(null, null)\",    StringUtils.endsWith(null, (String)null));\n        assertFalse(\"endsWith(FOOBAR, null)\", StringUtils.endsWith(FOOBAR, (String)null));\n        assertFalse(\"endsWith(null, FOO)\",    StringUtils.endsWith(null, FOO));\n        assertTrue(\"endsWith(FOOBAR, \\\"\\\")\",  StringUtils.endsWith(FOOBAR, \"\"));\n\n        assertFalse(\"endsWith(foobar, foo)\", StringUtils.endsWith(foobar, foo));\n        assertFalse(\"endsWith(FOOBAR, FOO)\", StringUtils.endsWith(FOOBAR, FOO));\n        assertFalse(\"endsWith(foobar, FOO)\", StringUtils.endsWith(foobar, FOO));\n        assertFalse(\"endsWith(FOOBAR, foo)\", StringUtils.endsWith(FOOBAR, foo));\n\n        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(foo, foobar));\n        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(bar, foobar));\n\n        assertTrue(\"endsWith(foobar, bar)\",  StringUtils.endsWith(foobar, bar));\n        assertTrue(\"endsWith(FOOBAR, BAR)\",  StringUtils.endsWith(FOOBAR, BAR));\n        assertFalse(\"endsWith(foobar, BAR)\", StringUtils.endsWith(foobar, BAR));\n        assertFalse(\"endsWith(FOOBAR, bar)\", StringUtils.endsWith(FOOBAR, bar));\n    }",
        "begin_line": 90,
        "end_line": 108,
        "comment": "\n     * Test StringUtils.endsWith()\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 88)",
            "(line 92,col 9)-(line 92,col 90)",
            "(line 93,col 9)-(line 93,col 79)",
            "(line 94,col 9)-(line 94,col 80)",
            "(line 96,col 9)-(line 96,col 80)",
            "(line 97,col 9)-(line 97,col 80)",
            "(line 98,col 9)-(line 98,col 80)",
            "(line 99,col 9)-(line 99,col 80)",
            "(line 101,col 9)-(line 101,col 80)",
            "(line 102,col 9)-(line 102,col 80)",
            "(line 104,col 9)-(line 104,col 80)",
            "(line 105,col 9)-(line 105,col 80)",
            "(line 106,col 9)-(line 106,col 80)",
            "(line 107,col 9)-(line 107,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithIgnoreCase()",
        "snippet": "    public void testEndsWithIgnoreCase() {\n        assertTrue(\"endsWithIgnoreCase(null, null)\",    StringUtils.endsWithIgnoreCase(null, (String)null));\n        assertFalse(\"endsWithIgnoreCase(FOOBAR, null)\", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));\n        assertFalse(\"endsWithIgnoreCase(null, FOO)\",    StringUtils.endsWithIgnoreCase(null, FOO));\n        assertTrue(\"endsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.endsWithIgnoreCase(FOOBAR, \"\"));\n\n        assertFalse(\"endsWithIgnoreCase(foobar, foo)\", StringUtils.endsWithIgnoreCase(foobar, foo));\n        assertFalse(\"endsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.endsWithIgnoreCase(FOOBAR, FOO));\n        assertFalse(\"endsWithIgnoreCase(foobar, FOO)\", StringUtils.endsWithIgnoreCase(foobar, FOO));\n        assertFalse(\"endsWithIgnoreCase(FOOBAR, foo)\", StringUtils.endsWithIgnoreCase(FOOBAR, foo));\n\n        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(foo, foobar));\n        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(bar, foobar));\n\n        assertTrue(\"endsWithIgnoreCase(foobar, bar)\", StringUtils.endsWithIgnoreCase(foobar, bar));\n        assertTrue(\"endsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.endsWithIgnoreCase(FOOBAR, BAR));\n        assertTrue(\"endsWithIgnoreCase(foobar, BAR)\", StringUtils.endsWithIgnoreCase(foobar, BAR));\n        assertTrue(\"endsWithIgnoreCase(FOOBAR, bar)\", StringUtils.endsWithIgnoreCase(FOOBAR, bar));\n\n        // javadoc\n        assertTrue(StringUtils.endsWithIgnoreCase(\"abcdef\", \"def\"));\n        assertTrue(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"def\"));\n        assertFalse(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\"));\n    }",
        "begin_line": 113,
        "end_line": 136,
        "comment": "\n     * Test StringUtils.endsWithIgnoreCase()\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 108)",
            "(line 115,col 9)-(line 115,col 110)",
            "(line 116,col 9)-(line 116,col 99)",
            "(line 117,col 9)-(line 117,col 100)",
            "(line 119,col 9)-(line 119,col 100)",
            "(line 120,col 9)-(line 120,col 100)",
            "(line 121,col 9)-(line 121,col 100)",
            "(line 122,col 9)-(line 122,col 100)",
            "(line 124,col 9)-(line 124,col 100)",
            "(line 125,col 9)-(line 125,col 100)",
            "(line 127,col 9)-(line 127,col 99)",
            "(line 128,col 9)-(line 128,col 99)",
            "(line 129,col 9)-(line 129,col 99)",
            "(line 130,col 9)-(line 130,col 99)",
            "(line 133,col 9)-(line 133,col 68)",
            "(line 134,col 9)-(line 134,col 68)",
            "(line 135,col 9)-(line 135,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.RandomStringUtilsTest(java.lang.String)",
        "snippet": "    public RandomStringUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Construct a new instance of RandomStringUtilsTest with the specified name\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new RandomStringUtils());\n        Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n    }",
        "begin_line": 40,
        "end_line": 47,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 47)",
            "(line 42,col 9)-(line 42,col 82)",
            "(line 43,col 9)-(line 43,col 37)",
            "(line 44,col 9)-(line 44,col 70)",
            "(line 45,col 9)-(line 45,col 86)",
            "(line 46,col 9)-(line 46,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils()",
        "snippet": "    public void testRandomStringUtils() {\n        String r1 = RandomStringUtils.random(50);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        String r2 = RandomStringUtils.random(50);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomAscii(50);\n        assertEquals(\"randomAscii(50) length\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"char between 32 and 127\", r1.charAt(i) >= 32 && r1.charAt(i) <= 127);\n        }        \n        r2 = RandomStringUtils.randomAscii(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n\n        r1 = RandomStringUtils.randomAlphabetic(50);\n        assertEquals(\"randomAlphabetic(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains alphabetic\", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomAlphabetic(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomAlphanumeric(50);\n        assertEquals(\"randomAlphanumeric(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains alphanumeric\", true, Character.isLetterOrDigit(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomAlphabetic(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.randomNumeric(50);\n        assertEquals(\"randomNumeric(50)\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertEquals(\"r1 contains numeric\", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));\n        }\n        r2 = RandomStringUtils.randomNumeric(50);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        String set = \"abcdefg\";\n        r1 = RandomStringUtils.random(50, set);\n        assertEquals(\"random(50, \\\"abcdefg\\\")\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n        }\n        r2 = RandomStringUtils.random(50, set);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.random(50, (String) null);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        r2 = RandomStringUtils.random(50, (String) null);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        set = \"stuvwxyz\";\n        r1 = RandomStringUtils.random(50, set.toCharArray());\n        assertEquals(\"random(50, \\\"stuvwxyz\\\")\", 50, r1.length());\n        for(int i = 0; i < r1.length(); i++) {\n            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n        }\n        r2 = RandomStringUtils.random(50, set);\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n        \n        r1 = RandomStringUtils.random(50, (char[]) null);\n        assertEquals(\"random(50) length\", 50, r1.length());\n        r2 = RandomStringUtils.random(50, (char[]) null);\n        assertEquals(\"random(50) length\", 50, r2.length());\n        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n\n        long seed = System.currentTimeMillis();\n        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n        assertEquals(\"r1.equals(r2)\", r1, r2);\n\n        r1 = RandomStringUtils.random(0);\n        assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n\n    }",
        "begin_line": 53,
        "end_line": 130,
        "comment": "\n     * Test the implementation\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 59)",
            "(line 56,col 9)-(line 56,col 49)",
            "(line 57,col 9)-(line 57,col 59)",
            "(line 58,col 9)-(line 58,col 53)",
            "(line 60,col 9)-(line 60,col 47)",
            "(line 61,col 9)-(line 61,col 64)",
            "(line 62,col 9)-(line 64,col 9)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 66,col 9)-(line 66,col 53)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 70,col 9)-(line 72,col 9)",
            "(line 73,col 9)-(line 73,col 52)",
            "(line 74,col 9)-(line 74,col 53)",
            "(line 76,col 9)-(line 76,col 54)",
            "(line 77,col 9)-(line 77,col 64)",
            "(line 78,col 9)-(line 80,col 9)",
            "(line 81,col 9)-(line 81,col 52)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 59)",
            "(line 86,col 9)-(line 88,col 9)",
            "(line 89,col 9)-(line 89,col 49)",
            "(line 90,col 9)-(line 90,col 53)",
            "(line 92,col 9)-(line 92,col 31)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 94,col 9)-(line 94,col 65)",
            "(line 95,col 9)-(line 97,col 9)",
            "(line 98,col 9)-(line 98,col 47)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 101,col 9)-(line 101,col 57)",
            "(line 102,col 9)-(line 102,col 59)",
            "(line 103,col 9)-(line 103,col 57)",
            "(line 104,col 9)-(line 104,col 59)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 107,col 9)-(line 107,col 25)",
            "(line 108,col 9)-(line 108,col 61)",
            "(line 109,col 9)-(line 109,col 66)",
            "(line 110,col 9)-(line 112,col 9)",
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 53)",
            "(line 116,col 9)-(line 116,col 57)",
            "(line 117,col 9)-(line 117,col 59)",
            "(line 118,col 9)-(line 118,col 57)",
            "(line 119,col 9)-(line 119,col 59)",
            "(line 120,col 9)-(line 120,col 53)",
            "(line 122,col 9)-(line 122,col 47)",
            "(line 123,col 9)-(line 123,col 78)",
            "(line 124,col 9)-(line 124,col 78)",
            "(line 125,col 9)-(line 125,col 46)",
            "(line 127,col 9)-(line 127,col 41)",
            "(line 128,col 9)-(line 128,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testExceptions()",
        "snippet": "    public void testExceptions() {\n        try {\n            RandomStringUtils.random(-1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, true, true);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, new char[0]);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 131,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 135,col 48)",
            "(line 136,col 9)-(line 139,col 48)",
            "(line 140,col 9)-(line 143,col 48)",
            "(line 144,col 9)-(line 147,col 48)",
            "(line 148,col 9)-(line 151,col 48)",
            "(line 152,col 9)-(line 155,col 48)",
            "(line 156,col 9)-(line 159,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphaNumeric()",
        "snippet": "    public void testRandomAlphaNumeric() {}",
        "begin_line": 166,
        "end_line": 166,
        "comment": "\n     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric()",
        "snippet": "    public void testRandomNumeric() {}",
        "begin_line": 191,
        "end_line": 191,
        "comment": "\n     * Make sure '0' and '9' are generated by randomNumeric\n     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic()",
        "snippet": "    public void testRandomAlphabetic() {}",
        "begin_line": 216,
        "end_line": 216,
        "comment": "\n     * Make sure boundary alpha characters are generated by randomAlphabetic\n     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii()",
        "snippet": "    public void testRandomAscii() {}",
        "begin_line": 241,
        "end_line": 241,
        "comment": "\n     * Make sure 32 and 127 are generated by randomNumeric\n     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog()",
        "snippet": "    public void testRandomStringUtilsHomog() {}",
        "begin_line": 269,
        "end_line": 269,
        "comment": " \n     * Test homogeneity of random strings generated --\n     * i.e., test that characters show up with expected frequencies\n     * in generated strings.  Will fail randomly about 1 in 1000 times.\n     * Repeated failures indicate a problem.\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.chiSquare(int[], int[])",
        "snippet": "    private double chiSquare(int[] expected, int[] observed) {\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = (observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }           ",
        "begin_line": 298,
        "end_line": 306,
        "comment": "\n     * Computes Chi-Square statistic given observed and expected counts\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     ",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 28)",
            "(line 300,col 9)-(line 300,col 26)",
            "(line 301,col 9)-(line 304,col 9)",
            "(line 305,col 9)-(line 305,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.RandomStringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
        "signature": "org.apache.commons.lang3.RandomStringUtilsTest.testLang100()",
        "snippet": "    public void testLang100() throws Exception {\n        int size = 5000;\n        String encoding = \"UTF-8\";\n        String orig = RandomStringUtils.random(size);\n        byte[] bytes = orig.getBytes(encoding);\n        String copy = new String(bytes, encoding);\n\n        // for a verbose compare:\n        for (int i=0; i < orig.length() && i < copy.length(); i++) {\n            char o = orig.charAt(i);\n            char c = copy.charAt(i);\n            assertEquals(\"differs at \" + i + \"(\" + Integer.toHexString((new Character(o)).hashCode()) + \",\" +\n            Integer.toHexString((new Character(c)).hashCode()) + \")\", o, c);\n        }\n        // compare length also\n        assertEquals(orig.length(), copy.length());\n        // just to be complete\n        assertEquals(orig, copy);\n    }",
        "begin_line": 316,
        "end_line": 334,
        "comment": "\n     * Checks if the string got by {@link RandomStringUtils#random(int)}\n     * can be converted to UTF-8 and back without loss.\n     *\n     * @see <a href=\"http://issues.apache.org/jira/browse/LANG-100\">LANG-100</a>\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 24)",
            "(line 318,col 9)-(line 318,col 34)",
            "(line 319,col 9)-(line 319,col 53)",
            "(line 320,col 9)-(line 320,col 47)",
            "(line 321,col 9)-(line 321,col 50)",
            "(line 324,col 9)-(line 329,col 9)",
            "(line 331,col 9)-(line 331,col 51)",
            "(line 333,col 9)-(line 333,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.StringEscapeUtilsTest(java.lang.String)",
        "snippet": "    public StringEscapeUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringEscapeUtils());\n        Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n    }",
        "begin_line": 40,
        "end_line": 47,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 47)",
            "(line 42,col 9)-(line 42,col 82)",
            "(line 43,col 9)-(line 43,col 37)",
            "(line 44,col 9)-(line 44,col 70)",
            "(line 45,col 9)-(line 45,col 86)",
            "(line 46,col 9)-(line 46,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava()",
        "snippet": "    public void testEscapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.escapeJava(null));\n        try {\n            StringEscapeUtils.ESCAPE_JAVA.translate(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.ESCAPE_JAVA.translate(\"\", null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEscapeJava(\"empty string\", \"\", \"\");\n        assertEscapeJava(FOO, FOO);\n        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n\n        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n                \"He didn't say, \\\"stop!\\\"\");\n        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n                \"This space is non-breaking:\\u00a0\");\n        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n                \"\\uABCD\\u1234\\u012C\");\n    }",
        "begin_line": 50,
        "end_line": 85,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 63)",
            "(line 52,col 9)-(line 58,col 9)",
            "(line 59,col 9)-(line 65,col 9)",
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 35)",
            "(line 69,col 9)-(line 69,col 45)",
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 73)",
            "(line 72,col 9)-(line 72,col 54)",
            "(line 73,col 9)-(line 73,col 46)",
            "(line 74,col 9)-(line 74,col 46)",
            "(line 75,col 9)-(line 75,col 46)",
            "(line 76,col 9)-(line 76,col 46)",
            "(line 77,col 9)-(line 77,col 84)",
            "(line 79,col 9)-(line 80,col 44)",
            "(line 81,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 84,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash()",
        "snippet": "    public void testEscapeJavaWithSlash() {\n        final String input = \"String with a slash (/) in it\";\n\n        final String expected = input;\n        final String actual = StringEscapeUtils.escapeJava(input);\n\n        /**\n         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n         * in a Java string.\n         */\n        assertEquals(expected, actual);\n    }",
        "begin_line": 90,
        "end_line": 101,
        "comment": "\n     * https://issues.apache.org/jira/browse/LANG-421\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 61)",
            "(line 93,col 9)-(line 93,col 38)",
            "(line 94,col 9)-(line 94,col 66)",
            "(line 100,col 9)-(line 100,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.ESCAPE_JAVA.translate(original, writer);\n        assertEquals(expected, writer.toString());\n    }",
        "begin_line": 107,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 90)",
            "(line 110,col 9)-(line 110,col 51)",
            "(line 112,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 113,col 66)",
            "(line 114,col 9)-(line 114,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava()",
        "snippet": "    public void testUnescapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.unescapeJava(null));\n        try {\n            StringEscapeUtils.UNESCAPE_JAVA.translate(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.UNESCAPE_JAVA.translate(\"\", null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n            fail();\n        } catch (RuntimeException ex) {\n        }\n        \n        assertUnescapeJava(\"\", \"\");\n        assertUnescapeJava(\"test\", \"test\");\n        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n        assertUnescapeJava(\"\", \"\\\\\");\n        //foo\n        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n    }",
        "begin_line": 117,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 125,col 9)",
            "(line 126,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 137,col 9)",
            "(line 139,col 9)-(line 139,col 35)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 53)",
            "(line 142,col 9)-(line 142,col 76)",
            "(line 143,col 9)-(line 143,col 66)",
            "(line 144,col 9)-(line 144,col 37)",
            "(line 146,col 9)-(line 146,col 71)",
            "(line 147,col 9)-(line 147,col 71)",
            "(line 148,col 9)-(line 148,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.UNESCAPE_JAVA.translate(original, writer);\n        assertEquals(unescaped, writer.toString());\n\n    }",
        "begin_line": 155,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 36)",
            "(line 157,col 9)-(line 157,col 65)",
            "(line 159,col 9)-(line 164,col 34)",
            "(line 166,col 9)-(line 166,col 49)",
            "(line 167,col 9)-(line 167,col 68)",
            "(line 168,col 9)-(line 168,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript()",
        "snippet": "    public void testEscapeEcmaScript() {\n        assertEquals(null, StringEscapeUtils.escapeEcmaScript(null));\n        try {\n            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(\"\", null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeEcmaScript(\"He didn't say, \\\"stop!\\\"\"));\n        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n                StringEscapeUtils.escapeEcmaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n    }",
        "begin_line": 172,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 69)",
            "(line 174,col 9)-(line 180,col 9)",
            "(line 181,col 9)-(line 187,col 9)",
            "(line 189,col 9)-(line 189,col 119)",
            "(line 190,col 9)-(line 191,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml()",
        "snippet": "    public void testEscapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][1];\n            String original = htmlEscapes[i][2];\n            assertEquals(message, expected, StringEscapeUtils.escapeHtml4(original));\n            StringWriter sw = new StringWriter();\n            try {\n                StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n    }",
        "begin_line": 212,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 225,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4()",
        "snippet": "    public void testUnescapeHtml4() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][2];\n            String original = htmlEscapes[i][1];\n            assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original));\n            \n            StringWriter sw = new StringWriter();\n            try {\n                StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n        // \\u00E7 is a cedilla (c with wiggle under)\n        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n        // on some locales        \n        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml4(\"Fran\\u00E7ais\"));\n        \n        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml4(\"Hello&;World\"));\n        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml4(\"Hello&#;World\"));\n        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml4(\"Hello&# ;World\"));\n        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\n    }",
        "begin_line": 228,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 242,col 9)",
            "(line 246,col 9)-(line 246,col 119)",
            "(line 248,col 9)-(line 248,col 86)",
            "(line 249,col 9)-(line 249,col 88)",
            "(line 250,col 9)-(line 250,col 90)",
            "(line 251,col 9)-(line 251,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml()",
        "snippet": "    public void testUnescapeHexCharsHtml() {\n        // Simple easy to grok test \n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"));\n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#X80;&#X9F;\"));\n        // Test all Character values:\n        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n            Character c1 = new Character(i);\n            Character c2 = new Character((char)(i+1));\n            String expected = c1.toString() + c2.toString();\n            String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n            String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2));\n        }\n    }",
        "begin_line": 254,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 109)",
            "(line 257,col 9)-(line 257,col 109)",
            "(line 259,col 9)-(line 266,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\n    }",
        "begin_line": 269,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions()",
        "snippet": "    public void testEscapeHtmlVersions() throws Exception\n    {\n        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\n        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml4(\"&Beta;\"));\n\n        // TODO: refine API for escaping/unescaping specific HTML versions\n\n    }",
        "begin_line": 274,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 72)",
            "(line 277,col 9)-(line 277,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml()",
        "snippet": "    public void testEscapeXml() throws Exception {\n        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n\n        assertEquals(\"XML should not escape >0x7f values\",\n                \"\\u00A1\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n        assertEquals(\"XML should be able to unescape >0x7f values\",\n                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n\n        assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n        assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeXml(null));\n        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n\n        StringWriter sw = new StringWriter();\n        try {\n            StringEscapeUtils.ESCAPE_XML.translate(\"<abc>\", sw);\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n\n        sw = new StringWriter();\n        try {\n            StringEscapeUtils.UNESCAPE_XML.translate(\"&lt;abc&gt;\", sw);\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n    }",
        "begin_line": 283,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 74)",
            "(line 285,col 9)-(line 285,col 76)",
            "(line 287,col 9)-(line 288,col 65)",
            "(line 289,col 9)-(line 290,col 67)",
            "(line 292,col 9)-(line 292,col 75)",
            "(line 293,col 9)-(line 293,col 73)",
            "(line 294,col 9)-(line 294,col 58)",
            "(line 295,col 9)-(line 295,col 62)",
            "(line 296,col 9)-(line 296,col 64)",
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 302,col 9)",
            "(line 303,col 9)-(line 303,col 83)",
            "(line 305,col 9)-(line 305,col 32)",
            "(line 306,col 9)-(line 309,col 9)",
            "(line 310,col 9)-(line 310,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand()",
        "snippet": "    public void testStandaloneAmphersand() {\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n    }",
        "begin_line": 315,
        "end_line": 320,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38569",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 78)",
            "(line 317,col 9)-(line 317,col 81)",
            "(line 318,col 9)-(line 318,col 76)",
            "(line 319,col 9)-(line 319,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testLang313()",
        "snippet": "    public void testLang313() {\n        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\n    }",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString()",
        "snippet": "    public void testEscapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n        assertEquals(\"\\\"foo,bar\\\"\",      StringEscapeUtils.escapeCsv(\"foo,bar\"));\n        assertEquals(\"\\\"foo\\nbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\n        assertEquals(\"\\\"foo\\rbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\n        assertEquals(\"\\\"foo\\\"\\\"bar\\\"\",   StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\n        assertEquals(\"\",   StringEscapeUtils.escapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeCsv(null));\n    }",
        "begin_line": 326,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 81)",
            "(line 329,col 9)-(line 329,col 81)",
            "(line 330,col 9)-(line 330,col 82)",
            "(line 331,col 9)-(line 331,col 82)",
            "(line 332,col 9)-(line 332,col 82)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter()",
        "snippet": "    public void testEscapeCsvWriter() throws Exception\n    {\n        checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvEscapeWriter(\"\\\"foo,bar\\\"\",    \"foo,bar\");\n        checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\",   \"foo\\nbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\",   \"foo\\rbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\n        checkCsvEscapeWriter(\"\", null);\n        checkCsvEscapeWriter(\"\", \"\");\n    }",
        "begin_line": 337,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 58)",
            "(line 340,col 9)-(line 340,col 58)",
            "(line 341,col 9)-(line 341,col 59)",
            "(line 342,col 9)-(line 342,col 59)",
            "(line 343,col 9)-(line 343,col 59)",
            "(line 344,col 9)-(line 344,col 39)",
            "(line 345,col 9)-(line 345,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.ESCAPE_CSV.translate(value, writer);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }",
        "begin_line": 348,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 355,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString()",
        "snippet": "    public void testUnescapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n        assertEquals(\"foo,bar\",      StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\n        assertEquals(\"foo\\nbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\n        assertEquals(\"foo\\rbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\n        assertEquals(\"foo\\\"bar\",   StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\n        assertEquals(\"\",   StringEscapeUtils.unescapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.unescapeCsv(null));\n\n        assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n    }",
        "begin_line": 358,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 83)",
            "(line 361,col 9)-(line 361,col 83)",
            "(line 362,col 9)-(line 362,col 84)",
            "(line 363,col 9)-(line 363,col 84)",
            "(line 364,col 9)-(line 364,col 84)",
            "(line 365,col 9)-(line 365,col 62)",
            "(line 366,col 9)-(line 366,col 64)",
            "(line 368,col 9)-(line 368,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter()",
        "snippet": "    public void testUnescapeCsvWriter() throws Exception\n    {\n        checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvUnescapeWriter(\"foo,bar\",    \"\\\"foo,bar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\nbar\",   \"\\\"foo\\nbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\rbar\",   \"\\\"foo\\rbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\n        checkCsvUnescapeWriter(\"\", null);\n        checkCsvUnescapeWriter(\"\", \"\");\n\n        checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\",        \"\\\"foo.bar\\\"\");\n    }",
        "begin_line": 371,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 60)",
            "(line 374,col 9)-(line 374,col 60)",
            "(line 375,col 9)-(line 375,col 61)",
            "(line 376,col 9)-(line 376,col 61)",
            "(line 377,col 9)-(line 377,col 61)",
            "(line 378,col 9)-(line 378,col 41)",
            "(line 379,col 9)-(line 379,col 39)",
            "(line 381,col 9)-(line 381,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.UNESCAPE_CSV.translate(value, writer);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }",
        "begin_line": 384,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 391,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()",
        "snippet": "    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {\n        // this is the utf8 representation of the character:\n        // COUNTING ROD UNIT DIGIT THREE\n        // in unicode\n        // codepoint: U+1D362\n        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };\n\n        String original = new String(data, \"UTF8\");\n\n        String escaped = StringEscapeUtils.escapeHtml4( original );\n        assertEquals( \"High unicode should not have been escaped\", original, escaped);\n\n        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n        assertEquals( \"High unicode should have been unchanged\", original, unescaped);\n\n// TODO: I think this should hold, needs further investigation\n//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml4( \"&#119650;\" );\n//        assertEquals( \"High unicode should have been unescaped\", original, unescapedFromEntity);\n    }",
        "begin_line": 395,
        "end_line": 413,
        "comment": " https://issues.apache.org/jira/browse/LANG-480",
        "child_ranges": [
            "(line 400,col 9)-(line 400,col 84)",
            "(line 402,col 9)-(line 402,col 51)",
            "(line 404,col 9)-(line 404,col 67)",
            "(line 405,col 9)-(line 405,col 86)",
            "(line 407,col 9)-(line 407,col 70)",
            "(line 408,col 9)-(line 408,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana()",
        "snippet": "    public void testEscapeHiragana() {\n        // Some random Japanese unicode characters\n        String original = \"\\u304B\\u304C\\u3068\";\n        String escaped = StringEscapeUtils.escapeHtml4(original);\n        assertEquals( \"Hiragana character unicode behaviour should not be being escaped by escapeHtml4\",\n        original, escaped);\n\n        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n\n        assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, unescaped);\n    }",
        "begin_line": 416,
        "end_line": 426,
        "comment": " https://issues.apache.org/jira/browse/LANG-339",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 47)",
            "(line 419,col 9)-(line 419,col 65)",
            "(line 420,col 9)-(line 421,col 27)",
            "(line 423,col 9)-(line 423,col 70)",
            "(line 425,col 9)-(line 425,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.ContextedExceptionTest(java.lang.String)",
        "snippet": "    public ContextedExceptionTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedException()",
        "snippet": "    public void testContextedException() {\n        contextedException = new ContextedException();\n        String message = contextedException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(StringUtils.isEmpty(message));\n    }",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 54)",
            "(line 43,col 9)-(line 43,col 57)",
            "(line 44,col 9)-(line 44,col 72)",
            "(line 45,col 9)-(line 45,col 59)",
            "(line 46,col 9)-(line 46,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionString()",
        "snippet": "    public void testContextedExceptionString() {\n        contextedException = new ContextedException(TEST_MESSAGE);\n        assertEquals(TEST_MESSAGE, contextedException.getMessage());\n        \n        String trace = ExceptionUtils.getStackTrace(contextedException);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n    }",
        "begin_line": 49,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 66)",
            "(line 51,col 9)-(line 51,col 68)",
            "(line 53,col 9)-(line 53,col 72)",
            "(line 54,col 9)-(line 54,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionThrowable()",
        "snippet": "    public void testContextedExceptionThrowable() {\n        contextedException = new ContextedException(new Exception(TEST_MESSAGE));\n        String message = contextedException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n    }",
        "begin_line": 57,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 81)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 72)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 51)",
            "(line 63,col 9)-(line 63,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowable()",
        "snippet": "    public void testContextedExceptionStringThrowable() {\n        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n        String message = contextedException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n    }",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 97)",
            "(line 68,col 9)-(line 68,col 57)",
            "(line 69,col 9)-(line 69,col 72)",
            "(line 70,col 9)-(line 70,col 59)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 53)",
            "(line 73,col 9)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowableContext()",
        "snippet": "    public void testContextedExceptionStringThrowableContext() {\n        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n        String message = contextedException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n    }",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 128)",
            "(line 78,col 9)-(line 78,col 57)",
            "(line 79,col 9)-(line 79,col 72)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 51)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 83,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testAddValue()",
        "snippet": "    public void testAddValue() {\n        contextedException = new ContextedException(new Exception(TEST_MESSAGE))\n        .addValue(\"test1\", null)\n        .addValue(\"test2\", \"some value\")\n        .addValue(\"test Date\", new Date())\n        .addValue(\"test Nbr\", new Integer(5))\n        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n        \n        String message = contextedException.getMessage();\n        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(message.indexOf(\"test1\")>=0);\n        assertTrue(message.indexOf(\"test2\")>=0);\n        assertTrue(message.indexOf(\"test Date\")>=0);\n        assertTrue(message.indexOf(\"test Nbr\")>=0);\n        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n        assertTrue(message.indexOf(\"some value\")>=0);\n        assertTrue(message.indexOf(\"5\")>=0);\n        assertTrue(message.indexOf(\"Crap\")>=0);\n        \n        assertTrue(contextedException.getValue(\"test1\") == null);\n        assertTrue(contextedException.getValue(\"test2\").equals(\"some value\"));\n        assertTrue(contextedException.getValue(\"crap\") == null);\n        assertTrue(contextedException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n        \n        assertTrue(contextedException.getLabelSet().size() == 5);\n        assertTrue(contextedException.getLabelSet().contains(\"test1\"));\n        assertTrue(contextedException.getLabelSet().contains(\"test2\"));\n        assertTrue(contextedException.getLabelSet().contains(\"test Date\"));\n        assertTrue(contextedException.getLabelSet().contains(\"test Nbr\"));\n        assertTrue(contextedException.getLabelSet().contains(\"test Poorly written obj\"));\n        \n        assertTrue(!contextedException.getLabelSet().contains(\"crap\"));\n\n        contextedException.addValue(\"test Poorly written obj\", \"replacement\");\n        \n        String contextMessage = contextedException.getFormattedExceptionMessage(null);\n        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n        assertTrue(contextedException.getMessage().endsWith(contextMessage));\n    }",
        "begin_line": 86,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 92,col 77)",
            "(line 94,col 9)-(line 94,col 57)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 48)",
            "(line 97,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 98,col 52)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 100,col 9)-(line 100,col 66)",
            "(line 101,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 105,col 9)-(line 105,col 65)",
            "(line 106,col 9)-(line 106,col 78)",
            "(line 107,col 9)-(line 107,col 64)",
            "(line 108,col 9)-(line 108,col 111)",
            "(line 110,col 9)-(line 110,col 65)",
            "(line 111,col 9)-(line 111,col 71)",
            "(line 112,col 9)-(line 112,col 71)",
            "(line 113,col 9)-(line 113,col 75)",
            "(line 114,col 9)-(line 114,col 74)",
            "(line 115,col 9)-(line 115,col 89)",
            "(line 117,col 9)-(line 117,col 71)",
            "(line 119,col 9)-(line 119,col 78)",
            "(line 121,col 9)-(line 121,col 86)",
            "(line 122,col 9)-(line 122,col 63)",
            "(line 123,col 9)-(line 123,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testNullExceptionPassing()",
        "snippet": "    public void testNullExceptionPassing() {\n        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n        .addValue(\"test1\", null)\n        .addValue(\"test2\", \"some value\")\n        .addValue(\"test Date\", new Date())\n        .addValue(\"test Nbr\", new Integer(5))\n        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n        \n        String message = contextedException.getMessage();\n        assertTrue(message != null);\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 132,col 77)",
            "(line 134,col 9)-(line 134,col 57)",
            "(line 135,col 9)-(line 135,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.testGetMessage()",
        "snippet": "    public void testGetMessage() {\n        testAddValue();\n    }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedExceptionTest.ObjectWithFaultyToString.toString()",
        "snippet": "        @Override\n        public String toString() {\n            throw new RuntimeException(\"Crap\");\n        }",
        "begin_line": 146,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 13)-(line 148,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionUtilsTest(java.lang.String)",
        "snippet": "    public ExceptionUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        withoutCause = createExceptionWithoutCause();\n        nested = new NestableException(withoutCause);\n        withCause = new ExceptionWithCause(nested);\n        jdkNoCause = new NullPointerException();\n        ExceptionWithCause a = new ExceptionWithCause(null);\n        ExceptionWithCause b = new ExceptionWithCause(a);\n        a.setCause(b);\n        cyclicCause = new ExceptionWithCause(a);\n    }",
        "begin_line": 66,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 53)",
            "(line 69,col 9)-(line 69,col 53)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 48)",
            "(line 72,col 9)-(line 72,col 60)",
            "(line 73,col 9)-(line 73,col 57)",
            "(line 74,col 9)-(line 74,col 22)",
            "(line 75,col 9)-(line 75,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        withoutCause = null;\n        nested = null;\n        withCause = null;\n        jdkNoCause = null;\n        cyclicCause = null;\n    }",
        "begin_line": 78,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 28)",
            "(line 81,col 9)-(line 81,col 22)",
            "(line 82,col 9)-(line 82,col 25)",
            "(line 83,col 9)-(line 83,col 26)",
            "(line 84,col 9)-(line 84,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.createExceptionWithoutCause()",
        "snippet": "    private Throwable createExceptionWithoutCause() {\n        try {\n            throw new ExceptionWithoutCause();\n        } catch (Throwable t) {\n            return t;\n        }\n    }",
        "begin_line": 88,
        "end_line": 94,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 89,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.createExceptionWithCause()",
        "snippet": "    private Throwable createExceptionWithCause() {\n        try {\n            try {\n                throw new ExceptionWithCause(createExceptionWithoutCause());\n            } catch (Throwable t) {\n                throw new ExceptionWithCause(t);\n            }\n        } catch (Throwable t) {\n            return t;\n        }\n    }",
        "begin_line": 96,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new ExceptionUtils());\n        Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(ExceptionUtils.class.getModifiers()));\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 44)",
            "(line 112,col 9)-(line 112,col 79)",
            "(line 113,col 9)-(line 113,col 37)",
            "(line 114,col 9)-(line 114,col 70)",
            "(line 115,col 9)-(line 115,col 83)",
            "(line 116,col 9)-(line 116,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_Throwable()",
        "snippet": "    @SuppressWarnings(\"deprecation\") // Specifically tests the deprecated methods\n    public void testGetCause_Throwable() {\n        assertSame(null, ExceptionUtils.getCause(null));\n        assertSame(null, ExceptionUtils.getCause(withoutCause));\n        assertSame(withoutCause, ExceptionUtils.getCause(nested));\n        assertSame(nested, ExceptionUtils.getCause(withCause));\n        assertSame(null, ExceptionUtils.getCause(jdkNoCause));\n        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));\n        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause()));\n    }",
        "begin_line": 120,
        "end_line": 130,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 56)",
            "(line 123,col 9)-(line 123,col 64)",
            "(line 124,col 9)-(line 124,col 66)",
            "(line 125,col 9)-(line 125,col 63)",
            "(line 126,col 9)-(line 126,col 62)",
            "(line 127,col 9)-(line 127,col 81)",
            "(line 128,col 9)-(line 128,col 126)",
            "(line 129,col 9)-(line 129,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_ThrowableArray()",
        "snippet": "    @SuppressWarnings(\"deprecation\") // Specifically tests the deprecated methods\n    public void testGetCause_ThrowableArray() {\n        assertSame(null, ExceptionUtils.getCause(null, null));\n        assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n\n        // not known type, so match on supplied method names\n        assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names\n        assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\n        assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null}));\n        assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {\"getCause\"}));\n        \n        // not known type, so match on supplied method names\n        assertSame(null, ExceptionUtils.getCause(withoutCause, null));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null}));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getCause\"}));\n        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getTargetException\"}));\n    }",
        "begin_line": 132,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 62)",
            "(line 135,col 9)-(line 135,col 71)",
            "(line 138,col 9)-(line 138,col 69)",
            "(line 139,col 9)-(line 139,col 76)",
            "(line 140,col 9)-(line 140,col 82)",
            "(line 141,col 9)-(line 141,col 90)",
            "(line 144,col 9)-(line 144,col 70)",
            "(line 145,col 9)-(line 145,col 79)",
            "(line 146,col 9)-(line 146,col 85)",
            "(line 147,col 9)-(line 147,col 91)",
            "(line 148,col 9)-(line 148,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCause_Throwable()",
        "snippet": "    public void testGetRootCause_Throwable() {\n        assertSame(null, ExceptionUtils.getRootCause(null));\n        assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n        assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n        assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause));\n    }",
        "begin_line": 151,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 60)",
            "(line 153,col 9)-(line 153,col 68)",
            "(line 154,col 9)-(line 154,col 70)",
            "(line 155,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 156,col 66)",
            "(line 157,col 9)-(line 157,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableCount_Throwable()",
        "snippet": "    public void testGetThrowableCount_Throwable() {\n        assertEquals(0, ExceptionUtils.getThrowableCount(null));\n        assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n        assertEquals(2, ExceptionUtils.getThrowableCount(nested));\n        assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n        assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\n        assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));\n    }",
        "begin_line": 161,
        "end_line": 168,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 72)",
            "(line 164,col 9)-(line 164,col 66)",
            "(line 165,col 9)-(line 165,col 69)",
            "(line 166,col 9)-(line 166,col 70)",
            "(line 167,col 9)-(line 167,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_null()",
        "snippet": "    public void testGetThrowables_Throwable_null() {\n        assertEquals(0, ExceptionUtils.getThrowables(null).length);\n    }",
        "begin_line": 171,
        "end_line": 173,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withoutCause()",
        "snippet": "    public void testGetThrowables_Throwable_withoutCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\n        assertEquals(1, throwables.length);\n        assertSame(withoutCause, throwables[0]);\n    }",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 76)",
            "(line 177,col 9)-(line 177,col 43)",
            "(line 178,col 9)-(line 178,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_nested()",
        "snippet": "    public void testGetThrowables_Throwable_nested() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(nested);\n        assertEquals(2, throwables.length);\n        assertSame(nested, throwables[0]);\n        assertSame(withoutCause, throwables[1]);\n    }",
        "begin_line": 181,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 70)",
            "(line 183,col 9)-(line 183,col 43)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 185,col 9)-(line 185,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withCause()",
        "snippet": "    public void testGetThrowables_Throwable_withCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\n        assertEquals(3, throwables.length);\n        assertSame(withCause, throwables[0]);\n        assertSame(nested, throwables[1]);\n        assertSame(withoutCause, throwables[2]);\n    }",
        "begin_line": 188,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 73)",
            "(line 190,col 9)-(line 190,col 43)",
            "(line 191,col 9)-(line 191,col 45)",
            "(line 192,col 9)-(line 192,col 42)",
            "(line 193,col 9)-(line 193,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_jdkNoCause()",
        "snippet": "    public void testGetThrowables_Throwable_jdkNoCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\n        assertEquals(1, throwables.length);\n        assertSame(jdkNoCause, throwables[0]);\n    }",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 74)",
            "(line 198,col 9)-(line 198,col 43)",
            "(line 199,col 9)-(line 199,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_recursiveCause()",
        "snippet": "    public void testGetThrowables_Throwable_recursiveCause() {\n        Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\n        assertEquals(3, throwables.length);\n        assertSame(cyclicCause, throwables[0]);\n        assertSame(cyclicCause.getCause(), throwables[1]);\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]);\n    }",
        "begin_line": 202,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 75)",
            "(line 204,col 9)-(line 204,col 43)",
            "(line 205,col 9)-(line 205,col 47)",
            "(line 206,col 9)-(line 206,col 58)",
            "(line 207,col 9)-(line 207,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_null()",
        "snippet": "    public void testGetThrowableList_Throwable_null() {\n        List<?> throwables = ExceptionUtils.getThrowableList(null);\n        assertEquals(0, throwables.size());\n    }",
        "begin_line": 211,
        "end_line": 214,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 67)",
            "(line 213,col 9)-(line 213,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withoutCause()",
        "snippet": "    public void testGetThrowableList_Throwable_withoutCause() {\n        List<?> throwables = ExceptionUtils.getThrowableList(withoutCause);\n        assertEquals(1, throwables.size());\n        assertSame(withoutCause, throwables.get(0));\n    }",
        "begin_line": 216,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 75)",
            "(line 218,col 9)-(line 218,col 43)",
            "(line 219,col 9)-(line 219,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_nested()",
        "snippet": "    public void testGetThrowableList_Throwable_nested() {\n        List<?> throwables = ExceptionUtils.getThrowableList(nested);\n        assertEquals(2, throwables.size());\n        assertSame(nested, throwables.get(0));\n        assertSame(withoutCause, throwables.get(1));\n    }",
        "begin_line": 222,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 69)",
            "(line 224,col 9)-(line 224,col 43)",
            "(line 225,col 9)-(line 225,col 46)",
            "(line 226,col 9)-(line 226,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withCause()",
        "snippet": "    public void testGetThrowableList_Throwable_withCause() {\n        List<?> throwables = ExceptionUtils.getThrowableList(withCause);\n        assertEquals(3, throwables.size());\n        assertSame(withCause, throwables.get(0));\n        assertSame(nested, throwables.get(1));\n        assertSame(withoutCause, throwables.get(2));\n    }",
        "begin_line": 229,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 72)",
            "(line 231,col 9)-(line 231,col 43)",
            "(line 232,col 9)-(line 232,col 49)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_jdkNoCause()",
        "snippet": "    public void testGetThrowableList_Throwable_jdkNoCause() {\n        List<?> throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n        assertEquals(1, throwables.size());\n        assertSame(jdkNoCause, throwables.get(0));\n    }",
        "begin_line": 237,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 73)",
            "(line 239,col 9)-(line 239,col 43)",
            "(line 240,col 9)-(line 240,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_recursiveCause()",
        "snippet": "    public void testGetThrowableList_Throwable_recursiveCause() {\n        List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause);\n        assertEquals(3, throwables.size());\n        assertSame(cyclicCause, throwables.get(0));\n        assertSame(cyclicCause.getCause(), throwables.get(1));\n        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2));\n    }",
        "begin_line": 243,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 74)",
            "(line 245,col 9)-(line 245,col 43)",
            "(line 246,col 9)-(line 246,col 51)",
            "(line 247,col 9)-(line 247,col 62)",
            "(line 248,col 9)-(line 248,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClass()",
        "snippet": "    public void testIndexOf_ThrowableClass() {\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\n        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\n    }",
        "begin_line": 252,
        "end_line": 272,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 70)",
            "(line 254,col 9)-(line 254,col 89)",
            "(line 256,col 9)-(line 256,col 78)",
            "(line 257,col 9)-(line 257,col 98)",
            "(line 258,col 9)-(line 258,col 97)",
            "(line 259,col 9)-(line 259,col 100)",
            "(line 261,col 9)-(line 261,col 72)",
            "(line 262,col 9)-(line 262,col 92)",
            "(line 263,col 9)-(line 263,col 90)",
            "(line 264,col 9)-(line 264,col 94)",
            "(line 266,col 9)-(line 266,col 75)",
            "(line 267,col 9)-(line 267,col 94)",
            "(line 268,col 9)-(line 268,col 93)",
            "(line 269,col 9)-(line 269,col 97)",
            "(line 271,col 9)-(line 271,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClassInt()",
        "snippet": "    public void testIndexOf_ThrowableClassInt() {\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));\n        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));\n\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));\n        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\n        \n        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));\n    }",
        "begin_line": 274,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 73)",
            "(line 276,col 9)-(line 276,col 92)",
            "(line 278,col 9)-(line 278,col 78)",
            "(line 279,col 9)-(line 279,col 101)",
            "(line 280,col 9)-(line 280,col 100)",
            "(line 281,col 9)-(line 281,col 103)",
            "(line 283,col 9)-(line 283,col 75)",
            "(line 284,col 9)-(line 284,col 95)",
            "(line 285,col 9)-(line 285,col 93)",
            "(line 286,col 9)-(line 286,col 97)",
            "(line 288,col 9)-(line 288,col 75)",
            "(line 289,col 9)-(line 289,col 97)",
            "(line 290,col 9)-(line 290,col 96)",
            "(line 291,col 9)-(line 291,col 100)",
            "(line 293,col 9)-(line 293,col 98)",
            "(line 294,col 9)-(line 294,col 97)",
            "(line 295,col 9)-(line 295,col 98)",
            "(line 296,col 9)-(line 296,col 98)",
            "(line 298,col 9)-(line 298,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClass()",
        "snippet": "    public void testIndexOfType_ThrowableClass() {\n        assertEquals(-1, ExceptionUtils.indexOfType(null, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));\n        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(nested, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));\n        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));\n        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));\n        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));\n        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));\n        \n        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\n    }",
        "begin_line": 302,
        "end_line": 322,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 65)",
            "(line 304,col 9)-(line 304,col 84)",
            "(line 306,col 9)-(line 306,col 73)",
            "(line 307,col 9)-(line 307,col 93)",
            "(line 308,col 9)-(line 308,col 92)",
            "(line 309,col 9)-(line 309,col 95)",
            "(line 311,col 9)-(line 311,col 67)",
            "(line 312,col 9)-(line 312,col 87)",
            "(line 313,col 9)-(line 313,col 85)",
            "(line 314,col 9)-(line 314,col 89)",
            "(line 316,col 9)-(line 316,col 70)",
            "(line 317,col 9)-(line 317,col 89)",
            "(line 318,col 9)-(line 318,col 88)",
            "(line 319,col 9)-(line 319,col 92)",
            "(line 321,col 9)-(line 321,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClassInt()",
        "snippet": "    public void testIndexOfType_ThrowableClassInt() {\n        assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));\n        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));\n        \n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));\n        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));\n\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));\n        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));\n        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));\n        \n        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));\n    }",
        "begin_line": 324,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 68)",
            "(line 326,col 9)-(line 326,col 87)",
            "(line 328,col 9)-(line 328,col 73)",
            "(line 329,col 9)-(line 329,col 96)",
            "(line 330,col 9)-(line 330,col 95)",
            "(line 331,col 9)-(line 331,col 98)",
            "(line 333,col 9)-(line 333,col 70)",
            "(line 334,col 9)-(line 334,col 90)",
            "(line 335,col 9)-(line 335,col 88)",
            "(line 336,col 9)-(line 336,col 92)",
            "(line 338,col 9)-(line 338,col 70)",
            "(line 339,col 9)-(line 339,col 92)",
            "(line 340,col 9)-(line 340,col 91)",
            "(line 341,col 9)-(line 341,col 95)",
            "(line 343,col 9)-(line 343,col 93)",
            "(line 344,col 9)-(line 344,col 92)",
            "(line 345,col 9)-(line 345,col 93)",
            "(line 346,col 9)-(line 346,col 93)",
            "(line 348,col 9)-(line 348,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_Throwable()",
        "snippet": "    public void testPrintRootCauseStackTrace_Throwable() throws Exception {\n        ExceptionUtils.printRootCauseStackTrace(null);\n        // could pipe system.err to a known stream, but not much point as\n        // internally this method calls stram method anyway\n    }",
        "begin_line": 352,
        "end_line": 356,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream()",
        "snippet": "    public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {\n        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n        ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\n        ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));\n        assertEquals(0, out.toString().length());\n        \n        out = new ByteArrayOutputStream(1024);\n        try {\n            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        out = new ByteArrayOutputStream(1024);\n        Throwable withCause = createExceptionWithCause();\n        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out));\n        String stackTrace = out.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n        \n        out = new ByteArrayOutputStream(1024);\n        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));\n        stackTrace = out.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n    }",
        "begin_line": 358,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 68)",
            "(line 360,col 9)-(line 360,col 74)",
            "(line 361,col 9)-(line 361,col 76)",
            "(line 362,col 9)-(line 362,col 49)",
            "(line 364,col 9)-(line 364,col 46)",
            "(line 365,col 9)-(line 369,col 9)",
            "(line 371,col 9)-(line 371,col 46)",
            "(line 372,col 9)-(line 372,col 57)",
            "(line 373,col 9)-(line 373,col 81)",
            "(line 374,col 9)-(line 374,col 43)",
            "(line 375,col 9)-(line 375,col 76)",
            "(line 377,col 9)-(line 377,col 46)",
            "(line 378,col 9)-(line 378,col 84)",
            "(line 379,col 9)-(line 379,col 36)",
            "(line 380,col 9)-(line 380,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableWriter()",
        "snippet": "    public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {\n        StringWriter writer = new StringWriter(1024);\n        ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\n        ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));\n        assertEquals(0, writer.getBuffer().length());\n        \n        writer = new StringWriter(1024);\n        try {\n            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        writer = new StringWriter(1024);\n        Throwable withCause = createExceptionWithCause();\n        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer));\n        String stackTrace = writer.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n        \n        writer = new StringWriter(1024);\n        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));\n        stackTrace = writer.toString();\n        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n    }",
        "begin_line": 383,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 53)",
            "(line 385,col 9)-(line 385,col 74)",
            "(line 386,col 9)-(line 386,col 79)",
            "(line 387,col 9)-(line 387,col 53)",
            "(line 389,col 9)-(line 389,col 40)",
            "(line 390,col 9)-(line 394,col 9)",
            "(line 396,col 9)-(line 396,col 40)",
            "(line 397,col 9)-(line 397,col 57)",
            "(line 398,col 9)-(line 398,col 84)",
            "(line 399,col 9)-(line 399,col 46)",
            "(line 400,col 9)-(line 400,col 76)",
            "(line 402,col 9)-(line 402,col 40)",
            "(line 403,col 9)-(line 403,col 87)",
            "(line 404,col 9)-(line 404,col 39)",
            "(line 405,col 9)-(line 405,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable()",
        "snippet": "    public void testGetRootCauseStackTrace_Throwable() throws Exception {\n        assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\n        \n        Throwable withCause = createExceptionWithCause();\n        String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause);\n        boolean match = false;\n        for (int i = 0; i < stackTrace.length; i++) {\n            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n                match = true;\n                break;\n            }\n        }\n        assertEquals(true, match);\n        \n        stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\n        match = false;\n        for (int i = 0; i < stackTrace.length; i++) {\n            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n                match = true;\n                break;\n            }\n        }\n        assertEquals(false, match);\n    }",
        "begin_line": 409,
        "end_line": 432,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 410,col 9)-(line 410,col 76)",
            "(line 412,col 9)-(line 412,col 57)",
            "(line 413,col 9)-(line 413,col 79)",
            "(line 414,col 9)-(line 414,col 30)",
            "(line 415,col 9)-(line 420,col 9)",
            "(line 421,col 9)-(line 421,col 34)",
            "(line 423,col 9)-(line 423,col 73)",
            "(line 424,col 9)-(line 424,col 22)",
            "(line 425,col 9)-(line 430,col 9)",
            "(line 431,col 9)-(line 431,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.testRemoveCommonFrames_ListList()",
        "snippet": "    public void testRemoveCommonFrames_ListList() throws Exception {\n        try {\n            ExceptionUtils.removeCommonFrames(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n    }",
        "begin_line": 434,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 435,col 9)-(line 439,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable()",
        "snippet": "    public void test_getMessage_Throwable() {\n        Throwable th = null;\n        assertEquals(\"\", ExceptionUtils.getMessage(th));\n        \n        th = new IllegalArgumentException(\"Base\");\n        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getMessage(th));\n        \n        th = new ExceptionWithCause(\"Wrapper\", th);\n        assertEquals(\"ExceptionUtilsTest.ExceptionWithCause: Wrapper\", ExceptionUtils.getMessage(th));\n    }",
        "begin_line": 442,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 443,col 9)-(line 443,col 28)",
            "(line 444,col 9)-(line 444,col 56)",
            "(line 446,col 9)-(line 446,col 50)",
            "(line 447,col 9)-(line 447,col 86)",
            "(line 449,col 9)-(line 449,col 51)",
            "(line 450,col 9)-(line 450,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable()",
        "snippet": "    public void test_getRootCauseMessage_Throwable() {\n        Throwable th = null;\n        assertEquals(\"\", ExceptionUtils.getRootCauseMessage(th));\n        \n        th = new IllegalArgumentException(\"Base\");\n        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n        \n        th = new ExceptionWithCause(\"Wrapper\", th);\n        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n    }",
        "begin_line": 453,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 454,col 9)-(line 454,col 28)",
            "(line 455,col 9)-(line 455,col 65)",
            "(line 457,col 9)-(line 457,col 50)",
            "(line 458,col 9)-(line 458,col 95)",
            "(line 460,col 9)-(line 460,col 51)",
            "(line 461,col 9)-(line 461,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionWithCause.ExceptionWithCause(java.lang.String, java.lang.Throwable)",
        "snippet": "        public ExceptionWithCause(String str, Throwable cause) {\n            super(str);\n            setCause(cause);\n        }",
        "begin_line": 473,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 474,col 13)-(line 474,col 23)",
            "(line 475,col 13)-(line 475,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionWithCause.ExceptionWithCause(java.lang.Throwable)",
        "snippet": "        public ExceptionWithCause(Throwable cause) {\n            super();\n            setCause(cause);\n        }",
        "begin_line": 478,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 479,col 13)-(line 479,col 20)",
            "(line 480,col 13)-(line 480,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionWithCause.getCause()",
        "snippet": "        @Override\n        public Throwable getCause() {\n            return cause;\n        }",
        "begin_line": 483,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 485,col 13)-(line 485,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionWithCause.setCause(java.lang.Throwable)",
        "snippet": "        public void setCause(Throwable cause) {\n            this.cause = cause;\n        }",
        "begin_line": 488,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 489,col 13)-(line 489,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionWithoutCause.getTargetException()",
        "snippet": "        @SuppressWarnings(\"unused\")\n        public void getTargetException() {\n        }",
        "begin_line": 499,
        "end_line": 501,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.NestableException.NestableException()",
        "snippet": "        @SuppressWarnings(\"unused\")\n        public NestableException() { super(); }",
        "begin_line": 507,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 508,col 38)-(line 508,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ExceptionUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java",
        "signature": "org.apache.commons.lang3.exception.ExceptionUtilsTest.NestableException.NestableException(java.lang.Throwable)",
        "snippet": "        public NestableException(Throwable t) { super(t); }",
        "begin_line": 509,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 509,col 49)-(line 509,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.DefaultExceptionContextTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java",
        "signature": "org.apache.commons.lang3.exception.DefaultExceptionContextTest.DefaultExceptionContextTest(java.lang.String)",
        "snippet": "    public DefaultExceptionContextTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.DefaultExceptionContextTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java",
        "signature": "org.apache.commons.lang3.exception.DefaultExceptionContextTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        defaultExceptionContext = new DefaultExceptionContext()\n        .addValue(\"test1\", null)\n        .addValue(\"test2\", \"some value\")\n        .addValue(\"test Date\", new Date())\n        .addValue(\"test Nbr\", new Integer(5))\n        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n    }",
        "begin_line": 38,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 45,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.DefaultExceptionContextTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java",
        "signature": "org.apache.commons.lang3.exception.DefaultExceptionContextTest.testAddValue()",
        "snippet": "    public void testAddValue() {\n                \n        String message = defaultExceptionContext.getFormattedExceptionMessage(\"This is an error\");\n        assertTrue(message.indexOf(\"This is an error\")>=0);\n        assertTrue(message.indexOf(\"test1\")>=0);\n        assertTrue(message.indexOf(\"test2\")>=0);\n        assertTrue(message.indexOf(\"test Date\")>=0);\n        assertTrue(message.indexOf(\"test Nbr\")>=0);\n        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n        assertTrue(message.indexOf(\"some value\")>=0);\n        assertTrue(message.indexOf(\"5\")>=0);\n        assertTrue(message.indexOf(\"Crap\")>=0);\n        \n        //contextedException.printStackTrace();\n    }",
        "begin_line": 48,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 98)",
            "(line 51,col 9)-(line 51,col 59)",
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 48)",
            "(line 54,col 9)-(line 54,col 52)",
            "(line 55,col 9)-(line 55,col 51)",
            "(line 56,col 9)-(line 56,col 66)",
            "(line 57,col 9)-(line 57,col 53)",
            "(line 58,col 9)-(line 58,col 44)",
            "(line 59,col 9)-(line 59,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.DefaultExceptionContextTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java",
        "signature": "org.apache.commons.lang3.exception.DefaultExceptionContextTest.testFormattedExceptionMessageNull()",
        "snippet": "    public void testFormattedExceptionMessageNull() {\n        defaultExceptionContext = new DefaultExceptionContext();\n        defaultExceptionContext.getFormattedExceptionMessage(null);\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 64)",
            "(line 66,col 9)-(line 66,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.DefaultExceptionContextTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java",
        "signature": "org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetValue()",
        "snippet": "    public void testGetValue() {\n        assertTrue(defaultExceptionContext.getValue(\"test1\") == null);\n        assertTrue(defaultExceptionContext.getValue(\"test2\").equals(\"some value\"));\n        assertTrue(defaultExceptionContext.getValue(\"crap\") == null);\n        assertTrue(defaultExceptionContext.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 70)",
            "(line 71,col 9)-(line 71,col 83)",
            "(line 72,col 9)-(line 72,col 69)",
            "(line 73,col 9)-(line 73,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.DefaultExceptionContextTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java",
        "signature": "org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetLabelSet()",
        "snippet": "    public void testGetLabelSet() {\n        assertTrue(defaultExceptionContext.getLabelSet().size() == 5);\n        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test1\"));\n        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test2\"));\n        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Date\"));\n        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Nbr\"));\n        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Poorly written obj\"));\n        \n        assertTrue(!defaultExceptionContext.getLabelSet().contains(\"crap\"));\n    }",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 70)",
            "(line 78,col 9)-(line 78,col 76)",
            "(line 79,col 9)-(line 79,col 76)",
            "(line 80,col 9)-(line 80,col 80)",
            "(line 81,col 9)-(line 81,col 79)",
            "(line 82,col 9)-(line 82,col 94)",
            "(line 84,col 9)-(line 84,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.ContextedRuntimeExceptionTest(java.lang.String)",
        "snippet": "    public ContextedRuntimeExceptionTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException()",
        "snippet": "    public void testContextedException() {\n        contextedRuntimeException = new ContextedRuntimeException();\n        String message = contextedRuntimeException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(StringUtils.isEmpty(message));\n    }",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 68)",
            "(line 43,col 9)-(line 43,col 64)",
            "(line 44,col 9)-(line 44,col 79)",
            "(line 45,col 9)-(line 45,col 59)",
            "(line 46,col 9)-(line 46,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionString()",
        "snippet": "    public void testContextedExceptionString() {\n        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE);\n        assertEquals(TEST_MESSAGE, contextedRuntimeException.getMessage());\n        \n        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n    }",
        "begin_line": 49,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 80)",
            "(line 51,col 9)-(line 51,col 75)",
            "(line 53,col 9)-(line 53,col 79)",
            "(line 54,col 9)-(line 54,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionThrowable()",
        "snippet": "    public void testContextedExceptionThrowable() {\n        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\n        String message = contextedRuntimeException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n    }",
        "begin_line": 57,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 95)",
            "(line 59,col 9)-(line 59,col 64)",
            "(line 60,col 9)-(line 60,col 79)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 51)",
            "(line 63,col 9)-(line 63,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionStringThrowable()",
        "snippet": "    public void testContextedExceptionStringThrowable() {\n        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n        String message = contextedRuntimeException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n    }",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 111)",
            "(line 68,col 9)-(line 68,col 64)",
            "(line 69,col 9)-(line 69,col 79)",
            "(line 70,col 9)-(line 70,col 59)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 53)",
            "(line 73,col 9)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionStringThrowableContext()",
        "snippet": "    public void testContextedExceptionStringThrowableContext() {\n        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n        String message = contextedRuntimeException.getMessage();\n        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n    }",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 142)",
            "(line 78,col 9)-(line 78,col 64)",
            "(line 79,col 9)-(line 79,col 79)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 51)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 83,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddValue()",
        "snippet": "    public void testAddValue() {\n        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE))\n        .addValue(\"test1\", null)\n        .addValue(\"test2\", \"some value\")\n        .addValue(\"test Date\", new Date())\n        .addValue(\"test Nbr\", new Integer(5))\n        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n        \n        String message = contextedRuntimeException.getMessage();\n        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n        assertTrue(message.indexOf(\"test1\")>=0);\n        assertTrue(message.indexOf(\"test2\")>=0);\n        assertTrue(message.indexOf(\"test Date\")>=0);\n        assertTrue(message.indexOf(\"test Nbr\")>=0);\n        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n        assertTrue(message.indexOf(\"some value\")>=0);\n        assertTrue(message.indexOf(\"5\")>=0);\n        assertTrue(message.indexOf(\"Crap\")>=0);\n        \n        assertTrue(contextedRuntimeException.getValue(\"test1\") == null);\n        assertTrue(contextedRuntimeException.getValue(\"test2\").equals(\"some value\"));\n        assertTrue(contextedRuntimeException.getValue(\"crap\") == null);\n        assertTrue(contextedRuntimeException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n        \n        assertTrue(contextedRuntimeException.getLabelSet().size() == 5);\n        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test1\"));\n        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test2\"));\n        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Date\"));\n        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Nbr\"));\n        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Poorly written obj\"));\n        \n        assertTrue(!contextedRuntimeException.getLabelSet().contains(\"crap\"));\n\n        contextedRuntimeException.addValue(\"test Poorly written obj\", \"replacement\");\n        \n        String contextMessage = contextedRuntimeException.getFormattedExceptionMessage(null);\n        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n        assertTrue(contextedRuntimeException.getMessage().endsWith(contextMessage));\n    }",
        "begin_line": 86,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 92,col 77)",
            "(line 94,col 9)-(line 94,col 64)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 48)",
            "(line 97,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 98,col 52)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 100,col 9)-(line 100,col 66)",
            "(line 101,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 102,col 44)",
            "(line 103,col 9)-(line 103,col 47)",
            "(line 105,col 9)-(line 105,col 72)",
            "(line 106,col 9)-(line 106,col 85)",
            "(line 107,col 9)-(line 107,col 71)",
            "(line 108,col 9)-(line 108,col 118)",
            "(line 110,col 9)-(line 110,col 72)",
            "(line 111,col 9)-(line 111,col 78)",
            "(line 112,col 9)-(line 112,col 78)",
            "(line 113,col 9)-(line 113,col 82)",
            "(line 114,col 9)-(line 114,col 81)",
            "(line 115,col 9)-(line 115,col 96)",
            "(line 117,col 9)-(line 117,col 78)",
            "(line 119,col 9)-(line 119,col 85)",
            "(line 121,col 9)-(line 121,col 93)",
            "(line 122,col 9)-(line 122,col 63)",
            "(line 123,col 9)-(line 123,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testNullExceptionPassing()",
        "snippet": "    public void testNullExceptionPassing() {\n        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n        .addValue(\"test1\", null)\n        .addValue(\"test2\", \"some value\")\n        .addValue(\"test Date\", new Date())\n        .addValue(\"test Nbr\", new Integer(5))\n        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n        \n        String message = contextedRuntimeException.getMessage();\n        assertTrue(message != null);\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 132,col 77)",
            "(line 134,col 9)-(line 134,col 64)",
            "(line 135,col 9)-(line 135,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java",
        "signature": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetMessage()",
        "snippet": "    public void testGetMessage() {\n        testAddValue();\n    }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang3.text.StrLookupTest.testNoneLookup()",
        "snippet": "    public void testNoneLookup() {\n        assertEquals(null, StrLookup.noneLookup().lookup(null));\n        assertEquals(null, StrLookup.noneLookup().lookup(\"\"));\n        assertEquals(null, StrLookup.noneLookup().lookup(\"any\"));\n    }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 64)",
            "(line 35,col 9)-(line 35,col 62)",
            "(line 36,col 9)-(line 36,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang3.text.StrLookupTest.testSystemProperiesLookup()",
        "snippet": "    public void testSystemProperiesLookup() {\n        assertEquals(System.getProperty(\"os.name\"), StrLookup.systemPropertiesLookup().lookup(\"os.name\"));\n        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"\"));\n        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"other\"));\n        try {\n            StrLookup.systemPropertiesLookup().lookup(null);\n            fail();\n        } catch (NullPointerException ex) {\n            // expected\n        }\n    }",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 106)",
            "(line 41,col 9)-(line 41,col 74)",
            "(line 42,col 9)-(line 42,col 79)",
            "(line 43,col 9)-(line 48,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang3.text.StrLookupTest.testMapLookup()",
        "snippet": "    public void testMapLookup() {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"key\", \"value\");\n        map.put(\"number\", new Integer(2));\n        assertEquals(\"value\", StrLookup.mapLookup(map).lookup(\"key\"));\n        assertEquals(\"2\", StrLookup.mapLookup(map).lookup(\"number\"));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"other\"));\n    }",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 64)",
            "(line 53,col 9)-(line 53,col 32)",
            "(line 54,col 9)-(line 54,col 42)",
            "(line 55,col 9)-(line 55,col 70)",
            "(line 56,col 9)-(line 56,col 69)",
            "(line 57,col 9)-(line 57,col 66)",
            "(line 58,col 9)-(line 58,col 64)",
            "(line 59,col 9)-(line 59,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrLookupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java",
        "signature": "org.apache.commons.lang3.text.StrLookupTest.testMapLookup_nullMap()",
        "snippet": "    public void testMapLookup_nullMap() {\n        Map<String, ?> map = null;\n        assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n        assertEquals(null, StrLookup.mapLookup(map).lookup(\"any\"));\n    }",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 34)",
            "(line 64,col 9)-(line 64,col 66)",
            "(line 65,col 9)-(line 65,col 64)",
            "(line 66,col 9)-(line 66,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.ExtendedMessageFormatTest(java.lang.String)",
        "snippet": "    public ExtendedMessageFormatTest(String name) {\n        super(name);\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n     * Create a new test case.\n     *\n     * @param name The name of the test\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        registry.put(\"lower\", new LowerCaseFormatFactory());\n        registry.put(\"upper\", new UpperCaseFormatFactory());\n    }",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 22)",
            "(line 61,col 9)-(line 61,col 60)",
            "(line 62,col 9)-(line 62,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats()",
        "snippet": "    public void testExtendedFormats() {\n        String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertPatternsEqual(\"TOPATTERN\", pattern, emf.toPattern());\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"Foo\", \"Bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"BAR\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"bar\"}));\n        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"BAR\"}));\n    }",
        "begin_line": 68,
        "end_line": 77,
        "comment": "\n     * Test extended formats.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 61)",
            "(line 70,col 9)-(line 70,col 81)",
            "(line 71,col 9)-(line 71,col 67)",
            "(line 72,col 9)-(line 72,col 87)",
            "(line 73,col 9)-(line 73,col 87)",
            "(line 74,col 9)-(line 74,col 87)",
            "(line 75,col 9)-(line 75,col 87)",
            "(line 76,col 9)-(line 76,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()",
        "snippet": "    public void testEscapedQuote_LANG_477() {\n        String pattern = \"it''s a {0,lower} 'test'!\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertEquals(\"it's a dummy test!\", emf.format(new Object[] {\"DUMMY\"}));\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n     * Test Bug LANG-477 - out of memory error with escaped quote\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 81)",
            "(line 85,col 9)-(line 85,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()",
        "snippet": "    public void testExtendedAndBuiltInFormats() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n        Object[] args = new Object[] {\"John Doe\", cal.getTime(), new Double(\"12345.67\")};\n        String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\n        String extendedPattern = \"Name: {0,upper} \";\n        String pattern = extendedPattern + builtinsPattern;\n\n        HashSet<Locale> testLocales = new HashSet<Locale>();\n        testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales()));\n        testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));\n        testLocales.add(null);\n\n        for (Iterator<Locale> l = testLocales.iterator(); l.hasNext();) {\n            Locale locale = l.next();\n            MessageFormat builtins = createMessageFormat(builtinsPattern, locale);\n            String expectedPattern = extendedPattern + builtins.toPattern();\n            DateFormat df = null;\n            NumberFormat nf = null;\n            ExtendedMessageFormat emf = null;\n            if (locale == null) {\n                df = DateFormat.getDateInstance(DateFormat.SHORT);\n                nf = NumberFormat.getCurrencyInstance();\n                emf = new ExtendedMessageFormat(pattern, registry);\n            } else {\n                df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n                nf = NumberFormat.getCurrencyInstance(locale);\n                emf = new ExtendedMessageFormat(pattern, locale, registry);\n            }\n            StringBuffer expected = new StringBuffer();\n            expected.append(\"Name: \");\n            expected.append(args[0].toString().toUpperCase());\n            expected.append(\" DOB: \");\n            expected.append(df.format(args[1]));\n            expected.append(\" Salary: \");\n            expected.append(nf.format(args[2]));\n            assertPatternsEqual(\"pattern comparison for locale \" + locale, expectedPattern, emf.toPattern());\n            assertEquals(String.valueOf(locale), expected.toString(), emf.format(args));\n        }\n    }",
        "begin_line": 91,
        "end_line": 130,
        "comment": "\n     * Test extended and built in formats.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 46)",
            "(line 93,col 9)-(line 93,col 56)",
            "(line 94,col 9)-(line 94,col 89)",
            "(line 95,col 9)-(line 95,col 83)",
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 59)",
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 100,col 76)",
            "(line 101,col 9)-(line 101,col 81)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 104,col 9)-(line 129,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()",
        "snippet": "    public void testBuiltInChoiceFormat() {\n        Object[] values = new Number[] {new Integer(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n        String choicePattern = null;\n        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n\n        choicePattern = \"{0,choice,1#One|2#Two|3#Many {0,number}}\";\n        for (int i = 0; i < values.length; i++) {\n            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n        }\n\n        choicePattern = \"{0,choice,1#''One''|2#\\\"Two\\\"|3#''{Many}'' {0,number}}\";\n        for (int i = 0; i < values.length; i++) {\n            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n        }\n    }",
        "begin_line": 190,
        "end_line": 204,
        "comment": "\n     * Test the built in choice format.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 97)",
            "(line 192,col 9)-(line 192,col 36)",
            "(line 193,col 9)-(line 193,col 71)",
            "(line 195,col 9)-(line 195,col 67)",
            "(line 196,col 9)-(line 198,col 9)",
            "(line 200,col 9)-(line 200,col 81)",
            "(line 201,col 9)-(line 203,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()",
        "snippet": "    public void testBuiltInDateTimeFormat() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n        Object[] args = new Object[] {cal.getTime()};\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n\n        checkBuiltInFormat(\"1: {0,date,short}\",    args, availableLocales);\n        checkBuiltInFormat(\"2: {0,date,medium}\",   args, availableLocales);\n        checkBuiltInFormat(\"3: {0,date,long}\",     args, availableLocales);\n        checkBuiltInFormat(\"4: {0,date,full}\",     args, availableLocales);\n        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", args, availableLocales);\n        checkBuiltInFormat(\"6: {0,time,short}\",    args, availableLocales);\n        checkBuiltInFormat(\"7: {0,time,medium}\",   args, availableLocales);\n        checkBuiltInFormat(\"8: {0,time,long}\",     args, availableLocales);\n        checkBuiltInFormat(\"9: {0,time,full}\",     args, availableLocales);\n        checkBuiltInFormat(\"10: {0,time,HH:mm}\",   args, availableLocales);\n        checkBuiltInFormat(\"11: {0,date}\",         args, availableLocales);\n        checkBuiltInFormat(\"12: {0,time}\",         args, availableLocales);\n    }",
        "begin_line": 209,
        "end_line": 227,
        "comment": "\n     * Test the built in date/time formats\n     ",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 46)",
            "(line 211,col 9)-(line 211,col 56)",
            "(line 212,col 9)-(line 212,col 53)",
            "(line 213,col 9)-(line 213,col 69)",
            "(line 215,col 9)-(line 215,col 75)",
            "(line 216,col 9)-(line 216,col 75)",
            "(line 217,col 9)-(line 217,col 75)",
            "(line 218,col 9)-(line 218,col 75)",
            "(line 219,col 9)-(line 219,col 75)",
            "(line 220,col 9)-(line 220,col 75)",
            "(line 221,col 9)-(line 221,col 75)",
            "(line 222,col 9)-(line 222,col 75)",
            "(line 223,col 9)-(line 223,col 75)",
            "(line 224,col 9)-(line 224,col 75)",
            "(line 225,col 9)-(line 225,col 75)",
            "(line 226,col 9)-(line 226,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()",
        "snippet": "    public void testOverriddenBuiltinFormat() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2007, Calendar.JANUARY, 23);\n        Object[] args = new Object[] {cal.getTime()};\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"date\", new OverrideShortDateFormatFactory());\n\n        //check the non-overridden builtins:\n        checkBuiltInFormat(\"1: {0,date}\", registry,          args, availableLocales);\n        checkBuiltInFormat(\"2: {0,date,medium}\", registry,   args, availableLocales);\n        checkBuiltInFormat(\"3: {0,date,long}\", registry,     args, availableLocales);\n        checkBuiltInFormat(\"4: {0,date,full}\", registry,     args, availableLocales);\n        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", registry, args, availableLocales);\n\n        //check the overridden format:\n        for (int i = -1; i < availableLocales.length; i++) {\n            Locale locale = i < 0 ? null : availableLocales[i];\n            MessageFormat dateDefault = createMessageFormat(\"{0,date}\", locale);\n            String pattern = \"{0,date,short}\";\n            ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, registry);\n            assertEquals(\"overridden date,short format\", dateDefault.format(args), dateShort.format(args));\n            assertEquals(\"overridden date,short pattern\", pattern, dateShort.toPattern());\n        }\n    }",
        "begin_line": 229,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 46)",
            "(line 231,col 9)-(line 231,col 44)",
            "(line 232,col 9)-(line 232,col 53)",
            "(line 233,col 9)-(line 233,col 69)",
            "(line 234,col 9)-(line 234,col 127)",
            "(line 237,col 9)-(line 237,col 85)",
            "(line 238,col 9)-(line 238,col 85)",
            "(line 239,col 9)-(line 239,col 85)",
            "(line 240,col 9)-(line 240,col 85)",
            "(line 241,col 9)-(line 241,col 85)",
            "(line 244,col 9)-(line 251,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()",
        "snippet": "    public void testBuiltInNumberFormat() {\n        Object[] args = new Object[] {new Double(\"6543.21\")};\n        Locale[] availableLocales = NumberFormat.getAvailableLocales();\n        checkBuiltInFormat(\"1: {0,number}\",            args, availableLocales);\n        checkBuiltInFormat(\"2: {0,number,integer}\",    args, availableLocales);\n        checkBuiltInFormat(\"3: {0,number,currency}\",   args, availableLocales);\n        checkBuiltInFormat(\"4: {0,number,percent}\",    args, availableLocales);\n        checkBuiltInFormat(\"5: {0,number,00000.000}\",  args, availableLocales);\n    }",
        "begin_line": 257,
        "end_line": 265,
        "comment": "\n     * Test the built in number formats.\n     ",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 61)",
            "(line 259,col 9)-(line 259,col 71)",
            "(line 260,col 9)-(line 260,col 79)",
            "(line 261,col 9)-(line 261,col 79)",
            "(line 262,col 9)-(line 262,col 79)",
            "(line 263,col 9)-(line 263,col 79)",
            "(line 264,col 9)-(line 264,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.lang.Object[], java.util.Locale[])",
        "snippet": "    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, null, args, locales);\n    }",
        "begin_line": 273,
        "end_line": 275,
        "comment": "\n     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n     * @param pattern MessageFormat pattern\n     * @param args MessageFormat arguments\n     * @param locales to test\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Object[], java.util.Locale[])",
        "snippet": "    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale[] locales) {\n        checkBuiltInFormat(pattern, registry, args, (Locale) null);\n        for (int i = 0; i < locales.length; i++) {\n            checkBuiltInFormat(pattern, registry, args, locales[i]);\n        }\n    }",
        "begin_line": 284,
        "end_line": 289,
        "comment": "\n     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n     * @param pattern MessageFormat pattern\n     * @param registry FormatFactory registry to use\n     * @param args MessageFormat arguments\n     * @param locales to test\n     ",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 67)",
            "(line 286,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.checkBuiltInFormat(java.lang.String, java.util.Map<java.lang.String, ?>, java.lang.Object[], java.util.Locale)",
        "snippet": "    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale locale) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"Pattern=[\");\n        buffer.append(pattern);\n        buffer.append(\"], locale=[\");\n        buffer.append(locale);\n        buffer.append(\"]\");\n        MessageFormat mf = createMessageFormat(pattern, locale);\n        // System.out.println(buffer + \", result=[\" + mf.format(args) +\"]\");\n        ExtendedMessageFormat emf = null;\n        if (locale == null) {\n            emf = new ExtendedMessageFormat(pattern);\n        } else {\n            emf = new ExtendedMessageFormat(pattern, locale);\n        }\n        assertEquals(\"format \"    + buffer.toString(), mf.format(args), emf.format(args));\n        assertPatternsEqual(\"toPattern \" + buffer.toString(), mf.toPattern(),  emf.toPattern());\n    }",
        "begin_line": 299,
        "end_line": 316,
        "comment": "\n     * Create an ExtendedMessageFormat for the specified pattern and locale and check the\n     * formated output matches the expected result for the parameters.\n     * @param pattern string\n     * @param registry map\n     * @param args Object[]\n     * @param locale Locale\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 49)",
            "(line 301,col 9)-(line 301,col 35)",
            "(line 302,col 9)-(line 302,col 31)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 30)",
            "(line 305,col 9)-(line 305,col 27)",
            "(line 306,col 9)-(line 306,col 64)",
            "(line 308,col 9)-(line 308,col 41)",
            "(line 309,col 9)-(line 313,col 9)",
            "(line 314,col 9)-(line 314,col 90)",
            "(line 315,col 9)-(line 315,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.assertPatternsEqual(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertPatternsEqual(String message, String expected, String actual) {\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(message, expected, actual);\n        }\n    }",
        "begin_line": 319,
        "end_line": 323,
        "comment": "can't trust what MessageFormat does with toPattern() pre 1.4:",
        "child_ranges": [
            "(line 320,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.createMessageFormat(java.lang.String, java.util.Locale)",
        "snippet": "    private MessageFormat createMessageFormat(String pattern, Locale locale) {\n        MessageFormat result = new MessageFormat(pattern);\n        if (locale != null) {\n            result.setLocale(locale);\n            result.applyPattern(pattern);\n        }\n        return result;\n    }",
        "begin_line": 331,
        "end_line": 338,
        "comment": "\n     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).\n     * @param pattern string\n     * @param locale Locale\n     * @return MessageFormat\n     ",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 58)",
            "(line 333,col 9)-(line 336,col 9)",
            "(line 337,col 9)-(line 337,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.LowerCaseFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        @Override\n        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(((String)obj).toLowerCase());\n        }",
        "begin_line": 346,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 348,col 13)-(line 348,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        @Override\n        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}",
        "begin_line": 350,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 351,col 70)-(line 351,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.UpperCaseFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "        @Override\n        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n            return toAppendTo.append(((String)obj).toUpperCase());\n        }",
        "begin_line": 358,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 360,col 13)-(line 360,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "        @Override\n        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}",
        "begin_line": 362,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 363,col 70)-(line 363,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.LowerCaseFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return LOWER_INSTANCE;\n        }",
        "begin_line": 373,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 374,col 13)-(line 374,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.UpperCaseFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return UPPER_INSTANCE;\n        }",
        "begin_line": 382,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 383,col 13)-(line 383,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.ExtendedMessageFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
        "signature": "org.apache.commons.lang3.text.ExtendedMessageFormatTest.OverrideShortDateFormatFactory.getFormat(java.lang.String, java.lang.String, java.util.Locale)",
        "snippet": "        public Format getFormat(String name, String arguments, Locale locale) {\n            return !\"short\".equals(arguments) ? null\n                    : locale == null ? DateFormat\n                            .getDateInstance(DateFormat.DEFAULT) : DateFormat\n                            .getDateInstance(DateFormat.DEFAULT, locale);\n        }",
        "begin_line": 390,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 391,col 13)-(line 394,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-c20ce4ad-fb7b-40ae-9fb6-b4586e974983.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return \"foo\";\n        }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 13)-(line 43,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.StrBuilderAppendInsertTest(java.lang.String)",
        "snippet": "    public StrBuilderAppendInsertTest(String name) {\n        super(name);\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name  the name\n     ",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine()",
        "snippet": "    public void testAppendNewLine() {\n        StrBuilder sb = new StrBuilder(\"---\");\n        sb.appendNewLine().append(\"+++\");\n        assertEquals(\"---\" + SEP + \"+++\", sb.toString());\n        \n        sb = new StrBuilder(\"---\");\n        sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\n        assertEquals(\"---#\" + SEP, sb.toString());\n    }",
        "begin_line": 57,
        "end_line": 65,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 46)",
            "(line 59,col 9)-(line 59,col 41)",
            "(line 60,col 9)-(line 60,col 57)",
            "(line 62,col 9)-(line 62,col 35)",
            "(line 63,col 9)-(line 63,col 84)",
            "(line 64,col 9)-(line 64,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText()",
        "snippet": "    public void testAppendWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\");\n        assertEquals(\"\", sb.toString());\n\n        sb.appendNull();\n        assertEquals(\"NULL\", sb.toString());\n\n        sb.append((Object) null);\n        assertEquals(\"NULLNULL\", sb.toString());\n\n        sb.append(FOO);\n        assertEquals(\"NULLNULLfoo\", sb.toString());\n\n        sb.append((String) null);\n        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n\n        sb.append(\"\");\n        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n\n        sb.append(\"bar\");\n        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n\n        sb.append((StringBuffer) null);\n        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n\n        sb.append(new StringBuffer(\"baz\"));\n        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n    }",
        "begin_line": 68,
        "end_line": 96,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 41)",
            "(line 70,col 9)-(line 70,col 31)",
            "(line 71,col 9)-(line 71,col 40)",
            "(line 73,col 9)-(line 73,col 24)",
            "(line 74,col 9)-(line 74,col 44)",
            "(line 76,col 9)-(line 76,col 33)",
            "(line 77,col 9)-(line 77,col 48)",
            "(line 79,col 9)-(line 79,col 23)",
            "(line 80,col 9)-(line 80,col 51)",
            "(line 82,col 9)-(line 82,col 33)",
            "(line 83,col 9)-(line 83,col 55)",
            "(line 85,col 9)-(line 85,col 22)",
            "(line 86,col 9)-(line 86,col 55)",
            "(line 88,col 9)-(line 88,col 25)",
            "(line 89,col 9)-(line 89,col 58)",
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 94,col 9)-(line 94,col 43)",
            "(line 95,col 9)-(line 95,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object()",
        "snippet": "    public void testAppend_Object() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendNull();\n        assertEquals(\"\", sb.toString());\n\n        sb.append((Object) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.append(FOO);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append((StringBuffer) null);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"baz\"));\n        assertEquals(\"foobaz\", sb.toString());\n\n        sb.append(new StrBuilder(\"yes\"));\n        assertEquals(\"foobazyes\", sb.toString());\n\n        sb.append((CharSequence) \"Seq\");\n        assertEquals(\"foobazyesSeq\", sb.toString());\n    }",
        "begin_line": 99,
        "end_line": 121,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 41)",
            "(line 101,col 9)-(line 101,col 24)",
            "(line 102,col 9)-(line 102,col 40)",
            "(line 104,col 9)-(line 104,col 33)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 107,col 9)-(line 107,col 23)",
            "(line 108,col 9)-(line 108,col 43)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 113,col 9)-(line 113,col 43)",
            "(line 114,col 9)-(line 114,col 46)",
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 49)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String()",
        "snippet": "    public void testAppend_String() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((String) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"bar\");\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 124,
        "end_line": 138,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 41)",
            "(line 126,col 9)-(line 126,col 53)",
            "(line 127,col 9)-(line 127,col 44)",
            "(line 129,col 9)-(line 129,col 30)",
            "(line 130,col 9)-(line 130,col 25)",
            "(line 131,col 9)-(line 131,col 43)",
            "(line 133,col 9)-(line 133,col 22)",
            "(line 134,col 9)-(line 134,col 43)",
            "(line 136,col 9)-(line 136,col 25)",
            "(line 137,col 9)-(line 137,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int()",
        "snippet": "    public void testAppend_String_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((String) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(\"foo\", 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(\"bar\", -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(\"bar\", 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(\"bar\", 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(\"abcbardef\", 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n\n        sb.append( (CharSequence)\"abcbardef\", 4, 3);\n        assertEquals(\"foobarard\", sb.toString());\n    }",
        "begin_line": 141,
        "end_line": 200,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 41)",
            "(line 143,col 9)-(line 143,col 59)",
            "(line 144,col 9)-(line 144,col 44)",
            "(line 146,col 9)-(line 146,col 30)",
            "(line 147,col 9)-(line 147,col 31)",
            "(line 148,col 9)-(line 148,col 43)",
            "(line 150,col 9)-(line 155,col 9)",
            "(line 157,col 9)-(line 162,col 9)",
            "(line 164,col 9)-(line 169,col 9)",
            "(line 171,col 9)-(line 176,col 9)",
            "(line 178,col 9)-(line 183,col 9)",
            "(line 185,col 9)-(line 190,col 9)",
            "(line 192,col 9)-(line 192,col 31)",
            "(line 193,col 9)-(line 193,col 43)",
            "(line 195,col 9)-(line 195,col 37)",
            "(line 196,col 9)-(line 196,col 46)",
            "(line 198,col 9)-(line 198,col 52)",
            "(line 199,col 9)-(line 199,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()",
        "snippet": "    public void testAppend_StringBuffer() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StringBuffer) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StringBuffer(\"foo\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"bar\"));\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 203,
        "end_line": 217,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 41)",
            "(line 205,col 9)-(line 205,col 59)",
            "(line 206,col 9)-(line 206,col 44)",
            "(line 208,col 9)-(line 208,col 30)",
            "(line 209,col 9)-(line 209,col 43)",
            "(line 210,col 9)-(line 210,col 43)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 213,col 9)-(line 213,col 43)",
            "(line 215,col 9)-(line 215,col 43)",
            "(line 216,col 9)-(line 216,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()",
        "snippet": "    public void testAppend_StringBuffer_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StringBuffer(\"foo\"), 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StringBuffer(\"bar\"), 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new StringBuffer(\"bar\"), 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 220,
        "end_line": 276,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 41)",
            "(line 222,col 9)-(line 222,col 65)",
            "(line 223,col 9)-(line 223,col 44)",
            "(line 225,col 9)-(line 225,col 30)",
            "(line 226,col 9)-(line 226,col 49)",
            "(line 227,col 9)-(line 227,col 43)",
            "(line 229,col 9)-(line 234,col 9)",
            "(line 236,col 9)-(line 241,col 9)",
            "(line 243,col 9)-(line 248,col 9)",
            "(line 250,col 9)-(line 255,col 9)",
            "(line 257,col 9)-(line 262,col 9)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 271,col 9)-(line 271,col 49)",
            "(line 272,col 9)-(line 272,col 43)",
            "(line 274,col 9)-(line 274,col 55)",
            "(line 275,col 9)-(line 275,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()",
        "snippet": "    public void testAppend_StrBuilder() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StrBuilder) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StrBuilder(\"foo\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"\"));\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"bar\"));\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 279,
        "end_line": 293,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 41)",
            "(line 281,col 9)-(line 281,col 57)",
            "(line 282,col 9)-(line 282,col 44)",
            "(line 284,col 9)-(line 284,col 30)",
            "(line 285,col 9)-(line 285,col 41)",
            "(line 286,col 9)-(line 286,col 43)",
            "(line 288,col 9)-(line 288,col 38)",
            "(line 289,col 9)-(line 289,col 43)",
            "(line 291,col 9)-(line 291,col 41)",
            "(line 292,col 9)-(line 292,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()",
        "snippet": "    public void testAppend_StrBuilder_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new StrBuilder(\"foo\"), 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new StrBuilder(\"bar\"), 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new StrBuilder(\"bar\"), 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 296,
        "end_line": 352,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 41)",
            "(line 298,col 9)-(line 298,col 63)",
            "(line 299,col 9)-(line 299,col 44)",
            "(line 301,col 9)-(line 301,col 30)",
            "(line 302,col 9)-(line 302,col 47)",
            "(line 303,col 9)-(line 303,col 43)",
            "(line 305,col 9)-(line 310,col 9)",
            "(line 312,col 9)-(line 317,col 9)",
            "(line 319,col 9)-(line 324,col 9)",
            "(line 326,col 9)-(line 331,col 9)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 340,col 9)-(line 345,col 9)",
            "(line 347,col 9)-(line 347,col 47)",
            "(line 348,col 9)-(line 348,col 43)",
            "(line 350,col 9)-(line 350,col 53)",
            "(line 351,col 9)-(line 351,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray()",
        "snippet": "    public void testAppend_CharArray() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((char[]) null);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new char[0]);\n        assertEquals(\"\", sb.toString());\n\n        sb.append(new char[]{'f', 'o', 'o'});\n        assertEquals(\"foo\", sb.toString());\n    }",
        "begin_line": 355,
        "end_line": 366,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 41)",
            "(line 357,col 9)-(line 357,col 53)",
            "(line 358,col 9)-(line 358,col 44)",
            "(line 360,col 9)-(line 360,col 30)",
            "(line 361,col 9)-(line 361,col 31)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 364,col 9)-(line 364,col 45)",
            "(line 365,col 9)-(line 365,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()",
        "snippet": "    public void testAppend_CharArray_int_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\n        assertEquals(\"NULL\", sb.toString());\n\n        sb = new StrBuilder();\n        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n        assertEquals(\"foo\", sb.toString());\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n        assertEquals(\"foo\", sb.toString());\n\n        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n        assertEquals(\"foobar\", sb.toString());\n    }",
        "begin_line": 369,
        "end_line": 425,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 41)",
            "(line 371,col 9)-(line 371,col 59)",
            "(line 372,col 9)-(line 372,col 44)",
            "(line 374,col 9)-(line 374,col 30)",
            "(line 375,col 9)-(line 375,col 51)",
            "(line 376,col 9)-(line 376,col 43)",
            "(line 378,col 9)-(line 383,col 9)",
            "(line 385,col 9)-(line 390,col 9)",
            "(line 392,col 9)-(line 397,col 9)",
            "(line 399,col 9)-(line 404,col 9)",
            "(line 406,col 9)-(line 411,col 9)",
            "(line 413,col 9)-(line 418,col 9)",
            "(line 420,col 9)-(line 420,col 51)",
            "(line 421,col 9)-(line 421,col 43)",
            "(line 423,col 9)-(line 423,col 81)",
            "(line 424,col 9)-(line 424,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean()",
        "snippet": "    public void testAppend_Boolean() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(true);\n        assertEquals(\"true\", sb.toString());\n\n        sb.append(false);\n        assertEquals(\"truefalse\", sb.toString());\n\n        sb.append('!');\n        assertEquals(\"truefalse!\", sb.toString());\n    }",
        "begin_line": 428,
        "end_line": 438,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 41)",
            "(line 430,col 9)-(line 430,col 24)",
            "(line 431,col 9)-(line 431,col 44)",
            "(line 433,col 9)-(line 433,col 25)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 436,col 9)-(line 436,col 23)",
            "(line 437,col 9)-(line 437,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()",
        "snippet": "    public void testAppend_PrimitiveNumber() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(0);\n        assertEquals(\"0\", sb.toString());\n\n        sb.append(1L);\n        assertEquals(\"01\", sb.toString());\n\n        sb.append(2.3f);\n        assertEquals(\"012.3\", sb.toString());\n\n        sb.append(4.5d);\n        assertEquals(\"012.34.5\", sb.toString());\n    }",
        "begin_line": 441,
        "end_line": 454,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 41)",
            "(line 443,col 9)-(line 443,col 21)",
            "(line 444,col 9)-(line 444,col 41)",
            "(line 446,col 9)-(line 446,col 22)",
            "(line 447,col 9)-(line 447,col 42)",
            "(line 449,col 9)-(line 449,col 24)",
            "(line 450,col 9)-(line 450,col 45)",
            "(line 452,col 9)-(line 452,col 24)",
            "(line 453,col 9)-(line 453,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object()",
        "snippet": "    public void testAppendln_Object() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendln((Object) null);\n        assertEquals(\"\" + SEP, sb.toString());\n\n        sb.appendln(FOO);\n        assertEquals(SEP + \"foo\" + SEP, sb.toString());\n\n        sb.appendln(new Integer(6));\n        assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\n    }",
        "begin_line": 457,
        "end_line": 467,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 41)",
            "(line 459,col 9)-(line 459,col 35)",
            "(line 460,col 9)-(line 460,col 46)",
            "(line 462,col 9)-(line 462,col 25)",
            "(line 463,col 9)-(line 463,col 55)",
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String()",
        "snippet": "    public void testAppendln_String() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(String str) {\n                count[0]++;\n                return super.append(str);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\");\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(2, count[0]);  // appendNewLine() calls append(String)\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 470,
        "end_line": 488,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 39)",
            "(line 472,col 9)-(line 483,col 10)",
            "(line 484,col 9)-(line 484,col 27)",
            "(line 485,col 9)-(line 485,col 49)",
            "(line 486,col 9)-(line 486,col 34)",
            "(line 487,col 9)-(line 487,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-e441f2c5-ae69-4f20-a5af-831d7e82a62a.append(java.lang.String)",
        "snippet": "            @Override\n            public StrBuilder append(String str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 475,col 17)-(line 475,col 27)",
            "(line 476,col 17)-(line 476,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-26008796-d034-4fa1-ae4c-d7d85df6c5f8.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 478,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 480,col 17)-(line 480,col 27)",
            "(line 481,col 17)-(line 481,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()",
        "snippet": "    public void testAppendln_String_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(String str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\", 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 491,
        "end_line": 509,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 39)",
            "(line 493,col 9)-(line 504,col 10)",
            "(line 505,col 9)-(line 505,col 33)",
            "(line 506,col 9)-(line 506,col 49)",
            "(line 507,col 9)-(line 507,col 34)",
            "(line 508,col 9)-(line 508,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-3680929c-068f-444d-8653-43f3c7296bc4.append(java.lang.String, int, int)",
        "snippet": "            @Override\n            public StrBuilder append(String str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 494,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 496,col 17)-(line 496,col 27)",
            "(line 497,col 17)-(line 497,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-d1fa63c1-6f9a-41a1-8b9a-d9e5e14069aa.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 499,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 501,col 17)-(line 501,col 27)",
            "(line 502,col 17)-(line 502,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()",
        "snippet": "    public void testAppendln_StringBuffer() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(StringBuffer str) {\n                count[0]++;\n                return super.append(str);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StringBuffer(\"foo\"));\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 512,
        "end_line": 530,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 513,col 9)-(line 513,col 39)",
            "(line 514,col 9)-(line 525,col 10)",
            "(line 526,col 9)-(line 526,col 45)",
            "(line 527,col 9)-(line 527,col 49)",
            "(line 528,col 9)-(line 528,col 34)",
            "(line 529,col 9)-(line 529,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-96ded438-8cf2-4420-b0c7-fc58b79df1a8.append(java.lang.StringBuffer)",
        "snippet": "            @Override\n            public StrBuilder append(StringBuffer str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 515,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 517,col 17)-(line 517,col 27)",
            "(line 518,col 17)-(line 518,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-e17e4d88-3789-402d-98ff-be53e594c3a2.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 520,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 522,col 17)-(line 522,col 27)",
            "(line 523,col 17)-(line 523,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()",
        "snippet": "    public void testAppendln_StringBuffer_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(StringBuffer str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StringBuffer(\"foo\"), 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 533,
        "end_line": 551,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 39)",
            "(line 535,col 9)-(line 546,col 10)",
            "(line 547,col 9)-(line 547,col 51)",
            "(line 548,col 9)-(line 548,col 49)",
            "(line 549,col 9)-(line 549,col 34)",
            "(line 550,col 9)-(line 550,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-4eae50b3-a88f-45a7-b836-baf47c926c37.append(java.lang.StringBuffer, int, int)",
        "snippet": "            @Override\n            public StrBuilder append(StringBuffer str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 536,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 538,col 17)-(line 538,col 27)",
            "(line 539,col 17)-(line 539,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-aae6bfc4-6414-44dc-bc5d-34ccd8ba1409.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 541,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 543,col 17)-(line 543,col 27)",
            "(line 544,col 17)-(line 544,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()",
        "snippet": "    public void testAppendln_StrBuilder() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(StrBuilder str) {\n                count[0]++;\n                return super.append(str);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StrBuilder(\"foo\"));\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 554,
        "end_line": 572,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 39)",
            "(line 556,col 9)-(line 567,col 10)",
            "(line 568,col 9)-(line 568,col 43)",
            "(line 569,col 9)-(line 569,col 49)",
            "(line 570,col 9)-(line 570,col 34)",
            "(line 571,col 9)-(line 571,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-5ca3f6e3-0e1e-4443-a588-fd09f96297c8.append(org.apache.commons.lang3.text.StrBuilder)",
        "snippet": "            @Override\n            public StrBuilder append(StrBuilder str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 557,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 559,col 17)-(line 559,col 27)",
            "(line 560,col 17)-(line 560,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-b8bdc2da-f6d0-439b-b2e9-2c04f8791f5f.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 562,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 564,col 17)-(line 564,col 27)",
            "(line 565,col 17)-(line 565,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()",
        "snippet": "    public void testAppendln_StrBuilder_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(StrBuilder str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(new StrBuilder(\"foo\"), 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 575,
        "end_line": 593,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 576,col 9)-(line 576,col 39)",
            "(line 577,col 9)-(line 588,col 10)",
            "(line 589,col 9)-(line 589,col 49)",
            "(line 590,col 9)-(line 590,col 49)",
            "(line 591,col 9)-(line 591,col 34)",
            "(line 592,col 9)-(line 592,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-680f833a-79ae-467c-9946-a7566ebaff17.append(org.apache.commons.lang3.text.StrBuilder, int, int)",
        "snippet": "            @Override\n            public StrBuilder append(StrBuilder str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 578,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 580,col 17)-(line 580,col 27)",
            "(line 581,col 17)-(line 581,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-a894f773-1ad0-4ff7-9772-dd821bec7eb1.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 583,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 585,col 17)-(line 585,col 27)",
            "(line 586,col 17)-(line 586,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray()",
        "snippet": "    public void testAppendln_CharArray() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(char[] str) {\n                count[0]++;\n                return super.append(str);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\".toCharArray());\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 596,
        "end_line": 614,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 597,col 9)-(line 597,col 39)",
            "(line 598,col 9)-(line 609,col 10)",
            "(line 610,col 9)-(line 610,col 41)",
            "(line 611,col 9)-(line 611,col 49)",
            "(line 612,col 9)-(line 612,col 34)",
            "(line 613,col 9)-(line 613,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-0d3548fc-8154-4a2c-9aad-2a0190b09965.append(char[])",
        "snippet": "            @Override\n            public StrBuilder append(char[] str) {\n                count[0]++;\n                return super.append(str);\n            }",
        "begin_line": 599,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 601,col 17)-(line 601,col 27)",
            "(line 602,col 17)-(line 602,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-b8af3d7e-97db-4dbe-978d-2519a5490707.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 604,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 606,col 17)-(line 606,col 27)",
            "(line 607,col 17)-(line 607,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()",
        "snippet": "    public void testAppendln_CharArray_int_int() {\n        final int[] count = new int[2];\n        StrBuilder sb = new StrBuilder() {\n            @Override\n            public StrBuilder append(char[] str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }\n            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }\n        };\n        sb.appendln(\"foo\".toCharArray(), 0, 3);\n        assertEquals(\"foo\" + SEP, sb.toString());\n        assertEquals(1, count[0]);\n        assertEquals(1, count[1]);\n    }",
        "begin_line": 617,
        "end_line": 635,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 618,col 9)-(line 618,col 39)",
            "(line 619,col 9)-(line 630,col 10)",
            "(line 631,col 9)-(line 631,col 47)",
            "(line 632,col 9)-(line 632,col 49)",
            "(line 633,col 9)-(line 633,col 34)",
            "(line 634,col 9)-(line 634,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-6af7bf62-2f89-4055-8a00-5ea728b68368.append(char[], int, int)",
        "snippet": "            @Override\n            public StrBuilder append(char[] str, int startIndex, int length) {\n                count[0]++;\n                return super.append(str, startIndex, length);\n            }",
        "begin_line": 620,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 622,col 17)-(line 622,col 27)",
            "(line 623,col 17)-(line 623,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.Anonymous-9cbc96dc-04bc-435d-b14f-696077dc76aa.appendNewLine()",
        "snippet": "            @Override\n            public StrBuilder appendNewLine() {\n                count[1]++;\n                return super.appendNewLine();\n            }",
        "begin_line": 625,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 627,col 17)-(line 627,col 27)",
            "(line 628,col 17)-(line 628,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean()",
        "snippet": "    public void testAppendln_Boolean() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendln(true);\n        assertEquals(\"true\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(false);\n        assertEquals(\"false\" + SEP, sb.toString());\n    }",
        "begin_line": 638,
        "end_line": 646,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 41)",
            "(line 640,col 9)-(line 640,col 26)",
            "(line 641,col 9)-(line 641,col 50)",
            "(line 643,col 9)-(line 643,col 19)",
            "(line 644,col 9)-(line 644,col 27)",
            "(line 645,col 9)-(line 645,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()",
        "snippet": "    public void testAppendln_PrimitiveNumber() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendln(0);\n        assertEquals(\"0\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(1L);\n        assertEquals(\"1\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(2.3f);\n        assertEquals(\"2.3\" + SEP, sb.toString());\n        \n        sb.clear();\n        sb.appendln(4.5d);\n        assertEquals(\"4.5\" + SEP, sb.toString());\n    }",
        "begin_line": 649,
        "end_line": 665,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 41)",
            "(line 651,col 9)-(line 651,col 23)",
            "(line 652,col 9)-(line 652,col 47)",
            "(line 654,col 9)-(line 654,col 19)",
            "(line 655,col 9)-(line 655,col 24)",
            "(line 656,col 9)-(line 656,col 47)",
            "(line 658,col 9)-(line 658,col 19)",
            "(line 659,col 9)-(line 659,col 26)",
            "(line 660,col 9)-(line 660,col 49)",
            "(line 662,col 9)-(line 662,col 19)",
            "(line 663,col 9)-(line 663,col 26)",
            "(line 664,col 9)-(line 664,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding()",
        "snippet": "    public void testAppendPadding() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(-1, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(0, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.appendPadding(1, '-');\n        assertEquals(\"foo-\", sb.toString());\n\n        sb.appendPadding(16, '-');\n        assertEquals(20, sb.length());\n        //            12345678901234567890\n        assertEquals(\"foo-----------------\", sb.toString());\n    }",
        "begin_line": 668,
        "end_line": 686,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 41)",
            "(line 670,col 9)-(line 670,col 25)",
            "(line 671,col 9)-(line 671,col 43)",
            "(line 673,col 9)-(line 673,col 34)",
            "(line 674,col 9)-(line 674,col 43)",
            "(line 676,col 9)-(line 676,col 33)",
            "(line 677,col 9)-(line 677,col 43)",
            "(line 679,col 9)-(line 679,col 33)",
            "(line 680,col 9)-(line 680,col 44)",
            "(line 682,col 9)-(line 682,col 34)",
            "(line 683,col 9)-(line 683,col 38)",
            "(line 685,col 9)-(line 685,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()",
        "snippet": "    public void testAppendFixedWidthPadLeft() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n        assertEquals(\"o\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n        assertEquals(\"oo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n        assertEquals(\"-foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"-------foo\", sb.toString());\n\n        sb.clear();\n        sb.setNullText(\"null\");\n        sb.appendFixedWidthPadLeft(null, 5, '-');\n        assertEquals(\"-null\", sb.toString());\n    }",
        "begin_line": 689,
        "end_line": 724,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 690,col 9)-(line 690,col 41)",
            "(line 691,col 9)-(line 691,col 51)",
            "(line 692,col 9)-(line 692,col 40)",
            "(line 694,col 9)-(line 694,col 19)",
            "(line 695,col 9)-(line 695,col 50)",
            "(line 696,col 9)-(line 696,col 40)",
            "(line 698,col 9)-(line 698,col 19)",
            "(line 699,col 9)-(line 699,col 50)",
            "(line 700,col 9)-(line 700,col 41)",
            "(line 702,col 9)-(line 702,col 19)",
            "(line 703,col 9)-(line 703,col 50)",
            "(line 704,col 9)-(line 704,col 42)",
            "(line 706,col 9)-(line 706,col 19)",
            "(line 707,col 9)-(line 707,col 50)",
            "(line 708,col 9)-(line 708,col 43)",
            "(line 710,col 9)-(line 710,col 19)",
            "(line 711,col 9)-(line 711,col 50)",
            "(line 712,col 9)-(line 712,col 44)",
            "(line 714,col 9)-(line 714,col 19)",
            "(line 715,col 9)-(line 715,col 51)",
            "(line 716,col 9)-(line 716,col 38)",
            "(line 718,col 9)-(line 718,col 50)",
            "(line 720,col 9)-(line 720,col 19)",
            "(line 721,col 9)-(line 721,col 31)",
            "(line 722,col 9)-(line 722,col 49)",
            "(line 723,col 9)-(line 723,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()",
        "snippet": "    public void testAppendFixedWidthPadLeft_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(123, -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 1, '-');\n        assertEquals(\"3\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 2, '-');\n        assertEquals(\"23\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 3, '-');\n        assertEquals(\"123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 4, '-');\n        assertEquals(\"-123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadLeft(123, 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"-------123\", sb.toString());\n    }",
        "begin_line": 727,
        "end_line": 757,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 728,col 9)-(line 728,col 41)",
            "(line 729,col 9)-(line 729,col 49)",
            "(line 730,col 9)-(line 730,col 40)",
            "(line 732,col 9)-(line 732,col 19)",
            "(line 733,col 9)-(line 733,col 48)",
            "(line 734,col 9)-(line 734,col 40)",
            "(line 736,col 9)-(line 736,col 19)",
            "(line 737,col 9)-(line 737,col 48)",
            "(line 738,col 9)-(line 738,col 41)",
            "(line 740,col 9)-(line 740,col 19)",
            "(line 741,col 9)-(line 741,col 48)",
            "(line 742,col 9)-(line 742,col 42)",
            "(line 744,col 9)-(line 744,col 19)",
            "(line 745,col 9)-(line 745,col 48)",
            "(line 746,col 9)-(line 746,col 43)",
            "(line 748,col 9)-(line 748,col 19)",
            "(line 749,col 9)-(line 749,col 48)",
            "(line 750,col 9)-(line 750,col 44)",
            "(line 752,col 9)-(line 752,col 19)",
            "(line 753,col 9)-(line 753,col 49)",
            "(line 754,col 9)-(line 754,col 38)",
            "(line 756,col 9)-(line 756,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()",
        "snippet": "    public void testAppendFixedWidthPadRight() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n        assertEquals(\"fo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n        assertEquals(\"foo\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n        assertEquals(\"foo-\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"foo-------\", sb.toString());\n\n        sb.clear();\n        sb.setNullText(\"null\");\n        sb.appendFixedWidthPadRight(null, 5, '-');\n        assertEquals(\"null-\", sb.toString());\n    }",
        "begin_line": 760,
        "end_line": 795,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 761,col 9)-(line 761,col 41)",
            "(line 762,col 9)-(line 762,col 52)",
            "(line 763,col 9)-(line 763,col 40)",
            "(line 765,col 9)-(line 765,col 19)",
            "(line 766,col 9)-(line 766,col 51)",
            "(line 767,col 9)-(line 767,col 40)",
            "(line 769,col 9)-(line 769,col 19)",
            "(line 770,col 9)-(line 770,col 51)",
            "(line 771,col 9)-(line 771,col 41)",
            "(line 773,col 9)-(line 773,col 19)",
            "(line 774,col 9)-(line 774,col 51)",
            "(line 775,col 9)-(line 775,col 42)",
            "(line 777,col 9)-(line 777,col 19)",
            "(line 778,col 9)-(line 778,col 51)",
            "(line 779,col 9)-(line 779,col 43)",
            "(line 781,col 9)-(line 781,col 19)",
            "(line 782,col 9)-(line 782,col 51)",
            "(line 783,col 9)-(line 783,col 44)",
            "(line 785,col 9)-(line 785,col 19)",
            "(line 786,col 9)-(line 786,col 52)",
            "(line 787,col 9)-(line 787,col 38)",
            "(line 789,col 9)-(line 789,col 50)",
            "(line 791,col 9)-(line 791,col 19)",
            "(line 792,col 9)-(line 792,col 31)",
            "(line 793,col 9)-(line 793,col 50)",
            "(line 794,col 9)-(line 794,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299()",
        "snippet": "    public void testLang299() {\n        StrBuilder sb = new StrBuilder(1);\n        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n        assertEquals(\"f\", sb.toString());\n    }",
        "begin_line": 798,
        "end_line": 802,
        "comment": " See: http://issues.apache.org/jira/browse/LANG-299",
        "child_ranges": [
            "(line 799,col 9)-(line 799,col 42)",
            "(line 800,col 9)-(line 800,col 51)",
            "(line 801,col 9)-(line 801,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()",
        "snippet": "    public void testAppendFixedWidthPadRight_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(123, -1, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 0, '-');\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 1, '-');\n        assertEquals(\"1\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 2, '-');\n        assertEquals(\"12\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 3, '-');\n        assertEquals(\"123\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 4, '-');\n        assertEquals(\"123-\", sb.toString());\n\n        sb.clear();\n        sb.appendFixedWidthPadRight(123, 10, '-');\n        assertEquals(10, sb.length());\n        //            1234567890\n        assertEquals(\"123-------\", sb.toString());\n    }",
        "begin_line": 805,
        "end_line": 835,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 806,col 9)-(line 806,col 41)",
            "(line 807,col 9)-(line 807,col 50)",
            "(line 808,col 9)-(line 808,col 40)",
            "(line 810,col 9)-(line 810,col 19)",
            "(line 811,col 9)-(line 811,col 49)",
            "(line 812,col 9)-(line 812,col 40)",
            "(line 814,col 9)-(line 814,col 19)",
            "(line 815,col 9)-(line 815,col 49)",
            "(line 816,col 9)-(line 816,col 41)",
            "(line 818,col 9)-(line 818,col 19)",
            "(line 819,col 9)-(line 819,col 49)",
            "(line 820,col 9)-(line 820,col 42)",
            "(line 822,col 9)-(line 822,col 19)",
            "(line 823,col 9)-(line 823,col 49)",
            "(line 824,col 9)-(line 824,col 43)",
            "(line 826,col 9)-(line 826,col 19)",
            "(line 827,col 9)-(line 827,col 49)",
            "(line 828,col 9)-(line 828,col 44)",
            "(line 830,col 9)-(line 830,col 19)",
            "(line 831,col 9)-(line 831,col 50)",
            "(line 832,col 9)-(line 832,col 38)",
            "(line 834,col 9)-(line 834,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array()",
        "snippet": "    public void testAppendAll_Array() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendAll((Object[]) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(new Object[0]);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(new Object[]{\"foo\", \"bar\", \"baz\"});\n        assertEquals(\"foobarbaz\", sb.toString());\n    }",
        "begin_line": 838,
        "end_line": 850,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 839,col 9)-(line 839,col 41)",
            "(line 840,col 9)-(line 840,col 38)",
            "(line 841,col 9)-(line 841,col 40)",
            "(line 843,col 9)-(line 843,col 19)",
            "(line 844,col 9)-(line 844,col 36)",
            "(line 845,col 9)-(line 845,col 40)",
            "(line 847,col 9)-(line 847,col 19)",
            "(line 848,col 9)-(line 848,col 56)",
            "(line 849,col 9)-(line 849,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection()",
        "snippet": "    public void testAppendAll_Collection() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendAll((Collection<?>) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Collections.EMPTY_LIST);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}));\n        assertEquals(\"foobarbaz\", sb.toString());\n    }",
        "begin_line": 853,
        "end_line": 865,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 854,col 9)-(line 854,col 41)",
            "(line 855,col 9)-(line 855,col 43)",
            "(line 856,col 9)-(line 856,col 40)",
            "(line 858,col 9)-(line 858,col 19)",
            "(line 859,col 9)-(line 859,col 45)",
            "(line 860,col 9)-(line 860,col 40)",
            "(line 862,col 9)-(line 862,col 19)",
            "(line 863,col 9)-(line 863,col 71)",
            "(line 864,col 9)-(line 864,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()",
        "snippet": "    public void testAppendAll_Iterator() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendAll((Iterator<?>) null);\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Collections.EMPTY_LIST.iterator());\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator());\n        assertEquals(\"foobarbaz\", sb.toString());\n    }",
        "begin_line": 868,
        "end_line": 880,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 41)",
            "(line 870,col 9)-(line 870,col 41)",
            "(line 871,col 9)-(line 871,col 40)",
            "(line 873,col 9)-(line 873,col 19)",
            "(line 874,col 9)-(line 874,col 56)",
            "(line 875,col 9)-(line 875,col 40)",
            "(line 877,col 9)-(line 877,col 19)",
            "(line 878,col 9)-(line 878,col 82)",
            "(line 879,col 9)-(line 879,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()",
        "snippet": "    public void testAppendWithSeparators_Array() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Object[]) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[0], \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }",
        "begin_line": 883,
        "end_line": 903,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 884,col 9)-(line 884,col 41)",
            "(line 885,col 9)-(line 885,col 54)",
            "(line 886,col 9)-(line 886,col 40)",
            "(line 888,col 9)-(line 888,col 19)",
            "(line 889,col 9)-(line 889,col 52)",
            "(line 890,col 9)-(line 890,col 40)",
            "(line 892,col 9)-(line 892,col 19)",
            "(line 893,col 9)-(line 893,col 72)",
            "(line 894,col 9)-(line 894,col 51)",
            "(line 896,col 9)-(line 896,col 19)",
            "(line 897,col 9)-(line 897,col 73)",
            "(line 898,col 9)-(line 898,col 49)",
            "(line 900,col 9)-(line 900,col 19)",
            "(line 901,col 9)-(line 901,col 71)",
            "(line 902,col 9)-(line 902,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()",
        "snippet": "    public void testAppendWithSeparators_Collection() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Collection<?>) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }",
        "begin_line": 906,
        "end_line": 926,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 907,col 9)-(line 907,col 41)",
            "(line 908,col 9)-(line 908,col 59)",
            "(line 909,col 9)-(line 909,col 40)",
            "(line 911,col 9)-(line 911,col 19)",
            "(line 912,col 9)-(line 912,col 61)",
            "(line 913,col 9)-(line 913,col 40)",
            "(line 915,col 9)-(line 915,col 19)",
            "(line 916,col 9)-(line 916,col 87)",
            "(line 917,col 9)-(line 917,col 51)",
            "(line 919,col 9)-(line 919,col 19)",
            "(line 920,col 9)-(line 920,col 88)",
            "(line 921,col 9)-(line 921,col 49)",
            "(line 923,col 9)-(line 923,col 19)",
            "(line 924,col 9)-(line 924,col 86)",
            "(line 925,col 9)-(line 925,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()",
        "snippet": "    public void testAppendWithSeparators_Iterator() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendWithSeparators((Iterator<?>) null, \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n        assertEquals(\"\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n        assertEquals(\"foo,bar,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n        assertEquals(\"foo,,baz\", sb.toString());\n    }",
        "begin_line": 929,
        "end_line": 949,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 930,col 9)-(line 930,col 41)",
            "(line 931,col 9)-(line 931,col 57)",
            "(line 932,col 9)-(line 932,col 40)",
            "(line 934,col 9)-(line 934,col 19)",
            "(line 935,col 9)-(line 935,col 72)",
            "(line 936,col 9)-(line 936,col 40)",
            "(line 938,col 9)-(line 938,col 19)",
            "(line 939,col 9)-(line 939,col 98)",
            "(line 940,col 9)-(line 940,col 51)",
            "(line 942,col 9)-(line 942,col 19)",
            "(line 943,col 9)-(line 943,col 99)",
            "(line 944,col 9)-(line 944,col 49)",
            "(line 946,col 9)-(line 946,col 19)",
            "(line 947,col 9)-(line 947,col 97)",
            "(line 948,col 9)-(line 948,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()",
        "snippet": "    public void testAppendWithSeparatorsWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"null\");\n        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n        assertEquals(\"foo,null,baz\", sb.toString());\n\n        sb.clear();\n        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n        assertEquals(\"foo,null,baz\", sb.toString());\n    }",
        "begin_line": 952,
        "end_line": 961,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 953,col 9)-(line 953,col 41)",
            "(line 954,col 9)-(line 954,col 31)",
            "(line 955,col 9)-(line 955,col 71)",
            "(line 956,col 9)-(line 956,col 52)",
            "(line 958,col 9)-(line 958,col 19)",
            "(line 959,col 9)-(line 959,col 86)",
            "(line 960,col 9)-(line 960,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String()",
        "snippet": "    public void testAppendSeparator_String() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(\",\");  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(\",\");\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 964,
        "end_line": 972,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 965,col 9)-(line 965,col 41)",
            "(line 966,col 9)-(line 966,col 32)",
            "(line 967,col 9)-(line 967,col 40)",
            "(line 968,col 9)-(line 968,col 25)",
            "(line 969,col 9)-(line 969,col 43)",
            "(line 970,col 9)-(line 970,col 32)",
            "(line 971,col 9)-(line 971,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()",
        "snippet": "    public void testAppendSeparator_String_String() {\n        StrBuilder sb = new StrBuilder();\n        final String startSeparator = \"order by \";\n        final String standardSeparator = \",\";\n        final String foo = \"foo\";\n        sb.appendSeparator(null, null);\n        assertEquals(\"\", sb.toString());\n        sb.appendSeparator(standardSeparator, null);\n        assertEquals(\"\", sb.toString());\n        sb.appendSeparator(standardSeparator, startSeparator); \n        assertEquals(startSeparator, sb.toString());\n        sb.appendSeparator(null, null); \n        assertEquals(startSeparator, sb.toString());\n        sb.appendSeparator(null, startSeparator); \n        assertEquals(startSeparator, sb.toString());\n        sb.append(foo);\n        assertEquals(startSeparator + foo, sb.toString());\n        sb.appendSeparator(standardSeparator, startSeparator);\n        assertEquals(startSeparator + foo + standardSeparator, sb.toString());\n    }",
        "begin_line": 975,
        "end_line": 994,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 976,col 9)-(line 976,col 41)",
            "(line 977,col 9)-(line 977,col 50)",
            "(line 978,col 9)-(line 978,col 45)",
            "(line 979,col 9)-(line 979,col 33)",
            "(line 980,col 9)-(line 980,col 39)",
            "(line 981,col 9)-(line 981,col 40)",
            "(line 982,col 9)-(line 982,col 52)",
            "(line 983,col 9)-(line 983,col 40)",
            "(line 984,col 9)-(line 984,col 62)",
            "(line 985,col 9)-(line 985,col 52)",
            "(line 986,col 9)-(line 986,col 39)",
            "(line 987,col 9)-(line 987,col 52)",
            "(line 988,col 9)-(line 988,col 49)",
            "(line 989,col 9)-(line 989,col 52)",
            "(line 990,col 9)-(line 990,col 23)",
            "(line 991,col 9)-(line 991,col 58)",
            "(line 992,col 9)-(line 992,col 62)",
            "(line 993,col 9)-(line 993,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char()",
        "snippet": "    public void testAppendSeparator_char() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(',');  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(',');\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 997,
        "end_line": 1005,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 998,col 9)-(line 998,col 41)",
            "(line 999,col 9)-(line 999,col 32)",
            "(line 1000,col 9)-(line 1000,col 40)",
            "(line 1001,col 9)-(line 1001,col 25)",
            "(line 1002,col 9)-(line 1002,col 43)",
            "(line 1003,col 9)-(line 1003,col 32)",
            "(line 1004,col 9)-(line 1004,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()",
        "snippet": "    public void testAppendSeparator_char_char() {\n        StrBuilder sb = new StrBuilder();\n        final char startSeparator = ':';\n        final char standardSeparator = ',';\n        final String foo = \"foo\";\n        sb.appendSeparator(standardSeparator, startSeparator);  // no effect\n        assertEquals(String.valueOf(startSeparator), sb.toString());\n        sb.append(foo);\n        assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\n        sb.appendSeparator(standardSeparator, startSeparator);\n        assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\n    }",
        "begin_line": 1006,
        "end_line": 1017,
        "comment": "",
        "child_ranges": [
            "(line 1007,col 9)-(line 1007,col 41)",
            "(line 1008,col 9)-(line 1008,col 40)",
            "(line 1009,col 9)-(line 1009,col 43)",
            "(line 1010,col 9)-(line 1010,col 33)",
            "(line 1011,col 9)-(line 1011,col 62)",
            "(line 1012,col 9)-(line 1012,col 68)",
            "(line 1013,col 9)-(line 1013,col 23)",
            "(line 1014,col 9)-(line 1014,col 74)",
            "(line 1015,col 9)-(line 1015,col 62)",
            "(line 1016,col 9)-(line 1016,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()",
        "snippet": "    public void testAppendSeparator_String_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(\",\", 0);  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(\",\", 1);\n        assertEquals(\"foo,\", sb.toString());\n        \n        sb.appendSeparator(\",\", -1);  // no effect\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 1020,
        "end_line": 1031,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1021,col 9)-(line 1021,col 41)",
            "(line 1022,col 9)-(line 1022,col 35)",
            "(line 1023,col 9)-(line 1023,col 40)",
            "(line 1024,col 9)-(line 1024,col 25)",
            "(line 1025,col 9)-(line 1025,col 43)",
            "(line 1026,col 9)-(line 1026,col 35)",
            "(line 1027,col 9)-(line 1027,col 44)",
            "(line 1029,col 9)-(line 1029,col 36)",
            "(line 1030,col 9)-(line 1030,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()",
        "snippet": "    public void testAppendSeparator_char_int() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendSeparator(',', 0);  // no effect\n        assertEquals(\"\", sb.toString());\n        sb.append(\"foo\");\n        assertEquals(\"foo\", sb.toString());\n        sb.appendSeparator(',', 1);\n        assertEquals(\"foo,\", sb.toString());\n        \n        sb.appendSeparator(',', -1);  // no effect\n        assertEquals(\"foo,\", sb.toString());\n    }",
        "begin_line": 1034,
        "end_line": 1045,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1035,col 9)-(line 1035,col 41)",
            "(line 1036,col 9)-(line 1036,col 35)",
            "(line 1037,col 9)-(line 1037,col 40)",
            "(line 1038,col 9)-(line 1038,col 25)",
            "(line 1039,col 9)-(line 1039,col 43)",
            "(line 1040,col 9)-(line 1040,col 35)",
            "(line 1041,col 9)-(line 1041,col 44)",
            "(line 1043,col 9)-(line 1043,col 36)",
            "(line 1044,col 9)-(line 1044,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert()",
        "snippet": "    public void testInsert() {\n\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, FOO);\n            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, FOO);\n            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (Object) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, FOO);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, \"foo\");\n            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, \"foo\");\n            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (String) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, \"foo\");\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, new char[]{'f', 'o', 'o'});\n            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, new char[]{'f', 'o', 'o'});\n            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (char[]) null);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[0]);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[]{'f', 'o', 'o'});\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (char[]) null, 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[0], 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n        assertEquals(\"barbaz\", sb.toString());\n\n        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n        assertEquals(\"foobarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, true);\n            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, true);\n            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, true);\n        assertEquals(\"truebarbaz\", sb.toString());\n\n        sb.insert(0, false);\n        assertEquals(\"falsetruebarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, '!');\n            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, '!');\n            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, '!');\n        assertEquals(\"!barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 0);\n            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 0);\n            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, '0');\n        assertEquals(\"0barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 1L);\n            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 1L);\n            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 1L);\n        assertEquals(\"1barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 2.3F);\n            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 2.3F);\n            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 2.3F);\n        assertEquals(\"2.3barbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, 4.5D);\n            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, 4.5D);\n            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, 4.5D);\n        assertEquals(\"4.5barbaz\", sb.toString());\n    }",
        "begin_line": 1048,
        "end_line": 1311,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1050,col 9)-(line 1050,col 41)",
            "(line 1051,col 9)-(line 1051,col 28)",
            "(line 1052,col 9)-(line 1052,col 46)",
            "(line 1054,col 9)-(line 1059,col 9)",
            "(line 1061,col 9)-(line 1066,col 9)",
            "(line 1068,col 9)-(line 1068,col 36)",
            "(line 1069,col 9)-(line 1069,col 46)",
            "(line 1071,col 9)-(line 1071,col 26)",
            "(line 1072,col 9)-(line 1072,col 49)",
            "(line 1074,col 9)-(line 1074,col 19)",
            "(line 1075,col 9)-(line 1075,col 28)",
            "(line 1076,col 9)-(line 1076,col 46)",
            "(line 1078,col 9)-(line 1083,col 9)",
            "(line 1085,col 9)-(line 1090,col 9)",
            "(line 1092,col 9)-(line 1092,col 36)",
            "(line 1093,col 9)-(line 1093,col 46)",
            "(line 1095,col 9)-(line 1095,col 28)",
            "(line 1096,col 9)-(line 1096,col 49)",
            "(line 1098,col 9)-(line 1098,col 19)",
            "(line 1099,col 9)-(line 1099,col 28)",
            "(line 1100,col 9)-(line 1100,col 46)",
            "(line 1102,col 9)-(line 1107,col 9)",
            "(line 1109,col 9)-(line 1114,col 9)",
            "(line 1116,col 9)-(line 1116,col 36)",
            "(line 1117,col 9)-(line 1117,col 46)",
            "(line 1119,col 9)-(line 1119,col 34)",
            "(line 1120,col 9)-(line 1120,col 46)",
            "(line 1122,col 9)-(line 1122,col 48)",
            "(line 1123,col 9)-(line 1123,col 49)",
            "(line 1125,col 9)-(line 1125,col 19)",
            "(line 1126,col 9)-(line 1126,col 28)",
            "(line 1127,col 9)-(line 1127,col 46)",
            "(line 1129,col 9)-(line 1134,col 9)",
            "(line 1136,col 9)-(line 1141,col 9)",
            "(line 1143,col 9)-(line 1143,col 42)",
            "(line 1144,col 9)-(line 1144,col 46)",
            "(line 1146,col 9)-(line 1146,col 40)",
            "(line 1147,col 9)-(line 1147,col 46)",
            "(line 1149,col 9)-(line 1154,col 9)",
            "(line 1156,col 9)-(line 1161,col 9)",
            "(line 1163,col 9)-(line 1168,col 9)",
            "(line 1170,col 9)-(line 1175,col 9)",
            "(line 1177,col 9)-(line 1177,col 84)",
            "(line 1178,col 9)-(line 1178,col 46)",
            "(line 1180,col 9)-(line 1180,col 84)",
            "(line 1181,col 9)-(line 1181,col 49)",
            "(line 1183,col 9)-(line 1183,col 19)",
            "(line 1184,col 9)-(line 1184,col 28)",
            "(line 1185,col 9)-(line 1185,col 46)",
            "(line 1187,col 9)-(line 1192,col 9)",
            "(line 1194,col 9)-(line 1199,col 9)",
            "(line 1201,col 9)-(line 1201,col 27)",
            "(line 1202,col 9)-(line 1202,col 50)",
            "(line 1204,col 9)-(line 1204,col 28)",
            "(line 1205,col 9)-(line 1205,col 55)",
            "(line 1207,col 9)-(line 1207,col 19)",
            "(line 1208,col 9)-(line 1208,col 28)",
            "(line 1209,col 9)-(line 1209,col 46)",
            "(line 1211,col 9)-(line 1216,col 9)",
            "(line 1218,col 9)-(line 1223,col 9)",
            "(line 1225,col 9)-(line 1225,col 26)",
            "(line 1226,col 9)-(line 1226,col 47)",
            "(line 1228,col 9)-(line 1228,col 19)",
            "(line 1229,col 9)-(line 1229,col 28)",
            "(line 1230,col 9)-(line 1230,col 46)",
            "(line 1232,col 9)-(line 1237,col 9)",
            "(line 1239,col 9)-(line 1244,col 9)",
            "(line 1246,col 9)-(line 1246,col 26)",
            "(line 1247,col 9)-(line 1247,col 47)",
            "(line 1249,col 9)-(line 1249,col 19)",
            "(line 1250,col 9)-(line 1250,col 28)",
            "(line 1251,col 9)-(line 1251,col 46)",
            "(line 1253,col 9)-(line 1258,col 9)",
            "(line 1260,col 9)-(line 1265,col 9)",
            "(line 1267,col 9)-(line 1267,col 25)",
            "(line 1268,col 9)-(line 1268,col 47)",
            "(line 1270,col 9)-(line 1270,col 19)",
            "(line 1271,col 9)-(line 1271,col 28)",
            "(line 1272,col 9)-(line 1272,col 46)",
            "(line 1274,col 9)-(line 1279,col 9)",
            "(line 1281,col 9)-(line 1286,col 9)",
            "(line 1288,col 9)-(line 1288,col 27)",
            "(line 1289,col 9)-(line 1289,col 49)",
            "(line 1291,col 9)-(line 1291,col 19)",
            "(line 1292,col 9)-(line 1292,col 28)",
            "(line 1293,col 9)-(line 1293,col 46)",
            "(line 1295,col 9)-(line 1300,col 9)",
            "(line 1302,col 9)-(line 1307,col 9)",
            "(line 1309,col 9)-(line 1309,col 27)",
            "(line 1310,col 9)-(line 1310,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText()",
        "snippet": "    public void testInsertWithNullText() {\n        StrBuilder sb = new StrBuilder();\n        sb.setNullText(\"null\");\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, FOO);\n            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, FOO);\n            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (Object) null);\n        assertEquals(\"nullbarbaz\", sb.toString());\n\n        sb.insert(0, FOO);\n        assertEquals(\"foonullbarbaz\", sb.toString());\n\n        sb.clear();\n        sb.append(\"barbaz\");\n        assertEquals(\"barbaz\", sb.toString());\n\n        try {\n            sb.insert(-1, \"foo\");\n            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        try {\n            sb.insert(7, \"foo\");\n            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.insert(0, (String) null);\n        assertEquals(\"nullbarbaz\", sb.toString());\n\n        sb.insert(0, \"foo\");\n        assertEquals(\"foonullbarbaz\", sb.toString());\n\n        sb.insert(0, (char[]) null);\n        assertEquals(\"nullfoonullbarbaz\", sb.toString());\n\n        sb.insert(0, (char[]) null, 0, 0);\n        assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\n    }",
        "begin_line": 1314,
        "end_line": 1369,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1315,col 9)-(line 1315,col 41)",
            "(line 1316,col 9)-(line 1316,col 31)",
            "(line 1317,col 9)-(line 1317,col 28)",
            "(line 1318,col 9)-(line 1318,col 46)",
            "(line 1320,col 9)-(line 1325,col 9)",
            "(line 1327,col 9)-(line 1332,col 9)",
            "(line 1334,col 9)-(line 1334,col 36)",
            "(line 1335,col 9)-(line 1335,col 50)",
            "(line 1337,col 9)-(line 1337,col 26)",
            "(line 1338,col 9)-(line 1338,col 53)",
            "(line 1340,col 9)-(line 1340,col 19)",
            "(line 1341,col 9)-(line 1341,col 28)",
            "(line 1342,col 9)-(line 1342,col 46)",
            "(line 1344,col 9)-(line 1349,col 9)",
            "(line 1351,col 9)-(line 1356,col 9)",
            "(line 1358,col 9)-(line 1358,col 36)",
            "(line 1359,col 9)-(line 1359,col 50)",
            "(line 1361,col 9)-(line 1361,col 28)",
            "(line 1362,col 9)-(line 1362,col 53)",
            "(line 1364,col 9)-(line 1364,col 36)",
            "(line 1365,col 9)-(line 1365,col 57)",
            "(line 1367,col 9)-(line 1367,col 42)",
            "(line 1368,col 9)-(line 1368,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.StrTokenizerTest(java.lang.String)",
        "snippet": "    public StrTokenizerTest(String name) {\n        super(name);\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "\n     * JUnit constructor.\n     * \n     * @param name\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.checkClone(org.apache.commons.lang3.text.StrTokenizer)",
        "snippet": "    private void checkClone(StrTokenizer tokenizer) {\n        assertFalse(StrTokenizer.getCSVInstance() == tokenizer);\n        assertFalse(StrTokenizer.getTSVInstance() == tokenizer);\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 64)",
            "(line 52,col 9)-(line 52,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test1()",
        "snippet": "    public void test1() {\n\n        String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 56,
        "end_line": 74,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 52)",
            "(line 59,col 9)-(line 59,col 51)",
            "(line 60,col 9)-(line 60,col 34)",
            "(line 61,col 9)-(line 61,col 30)",
            "(line 62,col 9)-(line 62,col 56)",
            "(line 63,col 9)-(line 63,col 40)",
            "(line 64,col 9)-(line 64,col 46)",
            "(line 66,col 9)-(line 66,col 83)",
            "(line 68,col 9)-(line 68,col 82)",
            "(line 69,col 9)-(line 72,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test2()",
        "snippet": "    public void test2() {\n\n        String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 76,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 51)",
            "(line 79,col 9)-(line 79,col 51)",
            "(line 80,col 9)-(line 80,col 34)",
            "(line 81,col 9)-(line 81,col 30)",
            "(line 82,col 9)-(line 82,col 56)",
            "(line 83,col 9)-(line 83,col 40)",
            "(line 84,col 9)-(line 84,col 46)",
            "(line 86,col 9)-(line 86,col 86)",
            "(line 88,col 9)-(line 88,col 82)",
            "(line 89,col 9)-(line 92,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test3()",
        "snippet": "    public void test3() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 96,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 51)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 101,col 9)-(line 101,col 30)",
            "(line 102,col 9)-(line 102,col 56)",
            "(line 103,col 9)-(line 103,col 40)",
            "(line 104,col 9)-(line 104,col 46)",
            "(line 106,col 9)-(line 106,col 86)",
            "(line 108,col 9)-(line 108,col 82)",
            "(line 109,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test4()",
        "snippet": "    public void test4() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 116,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 30)",
            "(line 122,col 9)-(line 122,col 56)",
            "(line 123,col 9)-(line 123,col 39)",
            "(line 124,col 9)-(line 124,col 46)",
            "(line 126,col 9)-(line 126,col 71)",
            "(line 128,col 9)-(line 128,col 82)",
            "(line 129,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test5()",
        "snippet": "    public void test5() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null,};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 136,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 51)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 141,col 9)-(line 141,col 30)",
            "(line 142,col 9)-(line 142,col 56)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 144,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 145,col 46)",
            "(line 147,col 9)-(line 147,col 89)",
            "(line 149,col 9)-(line 149,col 82)",
            "(line 150,col 9)-(line 153,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test6()",
        "snippet": "    public void test6() {\n\n        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterChar(';');\n        tok.setQuoteChar('\"');\n        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        // tok.setTreatingEmptyAsNull(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null,};\n\n        int nextCount = 0;\n        while (tok.hasNext()) {\n            tok.next();\n            nextCount++;\n        }\n\n        int prevCount = 0;\n        while (tok.hasPrevious()) {\n            tok.previous();\n            prevCount++;\n        }\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n\n        assertTrue(\"could not cycle through entire token list\" + \" using the 'hasNext' and 'next' methods\",\n                nextCount == expected.length);\n\n        assertTrue(\"could not cycle through entire token list\" + \" using the 'hasPrevious' and 'previous' methods\",\n                prevCount == expected.length);\n\n    }",
        "begin_line": 157,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 162,col 9)-(line 162,col 30)",
            "(line 163,col 9)-(line 163,col 56)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 166,col 9)-(line 166,col 46)",
            "(line 168,col 9)-(line 168,col 90)",
            "(line 170,col 9)-(line 170,col 26)",
            "(line 171,col 9)-(line 174,col 9)",
            "(line 176,col 9)-(line 176,col 26)",
            "(line 177,col 9)-(line 180,col 9)",
            "(line 182,col 9)-(line 182,col 82)",
            "(line 184,col 9)-(line 185,col 46)",
            "(line 187,col 9)-(line 188,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test7()",
        "snippet": "    public void test7() {\n\n        String input = \"a   b c \\\"d e\\\" f \";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\n        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 192,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 44)",
            "(line 195,col 9)-(line 195,col 51)",
            "(line 196,col 9)-(line 196,col 59)",
            "(line 197,col 9)-(line 197,col 61)",
            "(line 198,col 9)-(line 198,col 56)",
            "(line 199,col 9)-(line 199,col 40)",
            "(line 200,col 9)-(line 200,col 46)",
            "(line 202,col 9)-(line 202,col 81)",
            "(line 204,col 9)-(line 204,col 82)",
            "(line 205,col 9)-(line 208,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.test8()",
        "snippet": "    public void test8() {\n\n        String input = \"a   b c \\\"d e\\\" f \";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\n        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n        tok.setIgnoreEmptyTokens(true);\n        String tokens[] = tok.getTokenArray();\n\n        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d e\", \"f\",};\n\n        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n        for (int i = 0; i < expected.length; i++) {\n            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n                    ObjectUtils.equals(expected[i], tokens[i]));\n        }\n\n    }",
        "begin_line": 212,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 44)",
            "(line 215,col 9)-(line 215,col 51)",
            "(line 216,col 9)-(line 216,col 59)",
            "(line 217,col 9)-(line 217,col 61)",
            "(line 218,col 9)-(line 218,col 56)",
            "(line 219,col 9)-(line 219,col 39)",
            "(line 220,col 9)-(line 220,col 46)",
            "(line 222,col 9)-(line 222,col 69)",
            "(line 224,col 9)-(line 224,col 82)",
            "(line 225,col 9)-(line 228,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasic1()",
        "snippet": "    public void testBasic1() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 232,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 32)",
            "(line 234,col 9)-(line 234,col 51)",
            "(line 235,col 9)-(line 235,col 38)",
            "(line 236,col 9)-(line 236,col 38)",
            "(line 237,col 9)-(line 237,col 38)",
            "(line 238,col 9)-(line 238,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasic2()",
        "snippet": "    public void testBasic2() {\n        String input = \"a \\nb\\fc\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 241,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 34)",
            "(line 243,col 9)-(line 243,col 51)",
            "(line 244,col 9)-(line 244,col 38)",
            "(line 245,col 9)-(line 245,col 38)",
            "(line 246,col 9)-(line 246,col 38)",
            "(line 247,col 9)-(line 247,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasic3()",
        "snippet": "    public void testBasic3() {\n        String input = \"a \\nb\\u0001\\fc\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\\u0001\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 250,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 40)",
            "(line 252,col 9)-(line 252,col 51)",
            "(line 253,col 9)-(line 253,col 38)",
            "(line 254,col 9)-(line 254,col 44)",
            "(line 255,col 9)-(line 255,col 38)",
            "(line 256,col 9)-(line 256,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasic4()",
        "snippet": "    public void testBasic4() {\n        String input = \"a \\\"b\\\" c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"\\\"b\\\"\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 259,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 35)",
            "(line 261,col 9)-(line 261,col 51)",
            "(line 262,col 9)-(line 262,col 38)",
            "(line 263,col 9)-(line 263,col 42)",
            "(line 264,col 9)-(line 264,col 38)",
            "(line 265,col 9)-(line 265,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasic5()",
        "snippet": "    public void testBasic5() {\n        String input = \"a:b':c\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b'\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 32)",
            "(line 270,col 9)-(line 270,col 62)",
            "(line 271,col 9)-(line 271,col 38)",
            "(line 272,col 9)-(line 272,col 39)",
            "(line 273,col 9)-(line 273,col 38)",
            "(line 274,col 9)-(line 274,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1()",
        "snippet": "    public void testBasicDelim1() {\n        String input = \"a:b:c\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 277,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 31)",
            "(line 279,col 9)-(line 279,col 56)",
            "(line 280,col 9)-(line 280,col 38)",
            "(line 281,col 9)-(line 281,col 38)",
            "(line 282,col 9)-(line 282,col 38)",
            "(line 283,col 9)-(line 283,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2()",
        "snippet": "    public void testBasicDelim2() {\n        String input = \"a:b:c\";\n        StrTokenizer tok = new StrTokenizer(input, ',');\n        assertEquals(\"a:b:c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 286,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 31)",
            "(line 288,col 9)-(line 288,col 56)",
            "(line 289,col 9)-(line 289,col 42)",
            "(line 290,col 9)-(line 290,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1()",
        "snippet": "    public void testBasicEmpty1() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setIgnoreEmptyTokens(false);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 293,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 32)",
            "(line 295,col 9)-(line 295,col 51)",
            "(line 296,col 9)-(line 296,col 40)",
            "(line 297,col 9)-(line 297,col 38)",
            "(line 298,col 9)-(line 298,col 37)",
            "(line 299,col 9)-(line 299,col 38)",
            "(line 300,col 9)-(line 300,col 38)",
            "(line 301,col 9)-(line 301,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2()",
        "snippet": "    public void testBasicEmpty2() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 304,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 32)",
            "(line 306,col 9)-(line 306,col 51)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 308,col 9)-(line 308,col 38)",
            "(line 309,col 9)-(line 309,col 38)",
            "(line 310,col 9)-(line 310,col 39)",
            "(line 311,col 9)-(line 311,col 38)",
            "(line 312,col 9)-(line 312,col 38)",
            "(line 313,col 9)-(line 313,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1()",
        "snippet": "    public void testBasicQuoted1() {\n        String input = \"a 'b' c\";\n        StrTokenizer tok = new StrTokenizer(input, ' ', '\\'');\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 316,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 33)",
            "(line 318,col 9)-(line 318,col 62)",
            "(line 319,col 9)-(line 319,col 38)",
            "(line 320,col 9)-(line 320,col 38)",
            "(line 321,col 9)-(line 321,col 38)",
            "(line 322,col 9)-(line 322,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2()",
        "snippet": "    public void testBasicQuoted2() {\n        String input = \"a:'b':\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 325,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 32)",
            "(line 327,col 9)-(line 327,col 62)",
            "(line 328,col 9)-(line 328,col 40)",
            "(line 329,col 9)-(line 329,col 38)",
            "(line 330,col 9)-(line 330,col 38)",
            "(line 331,col 9)-(line 331,col 38)",
            "(line 332,col 9)-(line 332,col 39)",
            "(line 333,col 9)-(line 333,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3()",
        "snippet": "    public void testBasicQuoted3() {\n        String input = \"a:'b''c'\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b'c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 336,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 34)",
            "(line 338,col 9)-(line 338,col 62)",
            "(line 339,col 9)-(line 339,col 40)",
            "(line 340,col 9)-(line 340,col 38)",
            "(line 341,col 9)-(line 341,col 38)",
            "(line 342,col 9)-(line 342,col 40)",
            "(line 343,col 9)-(line 343,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4()",
        "snippet": "    public void testBasicQuoted4() {\n        String input = \"a: 'b' 'c' :d\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b c\", tok.next());\n        assertEquals(\"d\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 346,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 39)",
            "(line 348,col 9)-(line 348,col 62)",
            "(line 349,col 9)-(line 349,col 56)",
            "(line 350,col 9)-(line 350,col 40)",
            "(line 351,col 9)-(line 351,col 38)",
            "(line 352,col 9)-(line 352,col 38)",
            "(line 353,col 9)-(line 353,col 40)",
            "(line 354,col 9)-(line 354,col 38)",
            "(line 355,col 9)-(line 355,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5()",
        "snippet": "    public void testBasicQuoted5() {\n        String input = \"a: 'b'x'c' :d\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bxc\", tok.next());\n        assertEquals(\"d\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 358,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 39)",
            "(line 360,col 9)-(line 360,col 62)",
            "(line 361,col 9)-(line 361,col 56)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 363,col 9)-(line 363,col 38)",
            "(line 364,col 9)-(line 364,col 38)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 38)",
            "(line 367,col 9)-(line 367,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6()",
        "snippet": "    public void testBasicQuoted6() {\n        String input = \"a:'b'\\\"c':d\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\\\"c:d\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 370,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 37)",
            "(line 372,col 9)-(line 372,col 56)",
            "(line 373,col 9)-(line 373,col 55)",
            "(line 374,col 9)-(line 374,col 38)",
            "(line 375,col 9)-(line 375,col 43)",
            "(line 376,col 9)-(line 376,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7()",
        "snippet": "    public void testBasicQuoted7() {\n        String input = \"a:\\\"There's a reason here\\\":b\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"There's a reason here\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 379,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 55)",
            "(line 381,col 9)-(line 381,col 56)",
            "(line 382,col 9)-(line 382,col 55)",
            "(line 383,col 9)-(line 383,col 38)",
            "(line 384,col 9)-(line 384,col 58)",
            "(line 385,col 9)-(line 385,col 38)",
            "(line 386,col 9)-(line 386,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1()",
        "snippet": "    public void testBasicQuotedTrimmed1() {\n        String input = \"a: 'b' :\";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 389,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 34)",
            "(line 391,col 9)-(line 391,col 62)",
            "(line 392,col 9)-(line 392,col 56)",
            "(line 393,col 9)-(line 393,col 40)",
            "(line 394,col 9)-(line 394,col 38)",
            "(line 395,col 9)-(line 395,col 38)",
            "(line 396,col 9)-(line 396,col 38)",
            "(line 397,col 9)-(line 397,col 39)",
            "(line 398,col 9)-(line 398,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1()",
        "snippet": "    public void testBasicTrimmed1() {\n        String input = \"a: b :  \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 401,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 34)",
            "(line 403,col 9)-(line 403,col 56)",
            "(line 404,col 9)-(line 404,col 56)",
            "(line 405,col 9)-(line 405,col 40)",
            "(line 406,col 9)-(line 406,col 38)",
            "(line 407,col 9)-(line 407,col 38)",
            "(line 408,col 9)-(line 408,col 38)",
            "(line 409,col 9)-(line 409,col 39)",
            "(line 410,col 9)-(line 410,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2()",
        "snippet": "    public void testBasicTrimmed2() {\n        String input = \"a:  b  :\";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setTrimmerMatcher(StrMatcher.stringMatcher(\"  \"));\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 413,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 414,col 34)",
            "(line 415,col 9)-(line 415,col 56)",
            "(line 416,col 9)-(line 416,col 62)",
            "(line 417,col 9)-(line 417,col 40)",
            "(line 418,col 9)-(line 418,col 38)",
            "(line 419,col 9)-(line 419,col 38)",
            "(line 420,col 9)-(line 420,col 38)",
            "(line 421,col 9)-(line 421,col 39)",
            "(line 422,col 9)-(line 422,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1()",
        "snippet": "    public void testBasicIgnoreTrimmed1() {\n        String input = \"a: bIGNOREc : \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bc\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 425,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 40)",
            "(line 427,col 9)-(line 427,col 56)",
            "(line 428,col 9)-(line 428,col 66)",
            "(line 429,col 9)-(line 429,col 56)",
            "(line 430,col 9)-(line 430,col 40)",
            "(line 431,col 9)-(line 431,col 38)",
            "(line 432,col 9)-(line 432,col 38)",
            "(line 433,col 9)-(line 433,col 39)",
            "(line 434,col 9)-(line 434,col 39)",
            "(line 435,col 9)-(line 435,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2()",
        "snippet": "    public void testBasicIgnoreTrimmed2() {\n        String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bc\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 438,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 73)",
            "(line 440,col 9)-(line 440,col 56)",
            "(line 441,col 9)-(line 441,col 66)",
            "(line 442,col 9)-(line 442,col 56)",
            "(line 443,col 9)-(line 443,col 40)",
            "(line 444,col 9)-(line 444,col 38)",
            "(line 445,col 9)-(line 445,col 38)",
            "(line 446,col 9)-(line 446,col 39)",
            "(line 447,col 9)-(line 447,col 39)",
            "(line 448,col 9)-(line 448,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3()",
        "snippet": "    public void testBasicIgnoreTrimmed3() {\n        String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n        StrTokenizer tok = new StrTokenizer(input, ':');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"  bc  \", tok.next());\n        assertEquals(\"  \", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 451,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 73)",
            "(line 453,col 9)-(line 453,col 56)",
            "(line 454,col 9)-(line 454,col 66)",
            "(line 455,col 9)-(line 455,col 40)",
            "(line 456,col 9)-(line 456,col 38)",
            "(line 457,col 9)-(line 457,col 38)",
            "(line 458,col 9)-(line 458,col 43)",
            "(line 459,col 9)-(line 459,col 39)",
            "(line 460,col 9)-(line 460,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4()",
        "snippet": "    public void testBasicIgnoreTrimmed4() {\n        String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\n        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n        tok.setIgnoreEmptyTokens(false);\n        tok.setEmptyTokenAsNull(true);\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"bIGNOREcd\", tok.next());\n        assertEquals(null, tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 463,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 84)",
            "(line 465,col 9)-(line 465,col 62)",
            "(line 466,col 9)-(line 466,col 66)",
            "(line 467,col 9)-(line 467,col 56)",
            "(line 468,col 9)-(line 468,col 40)",
            "(line 469,col 9)-(line 469,col 38)",
            "(line 470,col 9)-(line 470,col 38)",
            "(line 471,col 9)-(line 471,col 46)",
            "(line 472,col 9)-(line 472,col 39)",
            "(line 473,col 9)-(line 473,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testListArray()",
        "snippet": "    public void testListArray() {\n        String input = \"a  b c\";\n        StrTokenizer tok = new StrTokenizer(input);\n        String[] array = tok.getTokenArray();\n        List<?> list = tok.getTokenList();\n        \n        assertEquals(Arrays.asList(array), list);\n        assertEquals(3, list.size());\n    }",
        "begin_line": 477,
        "end_line": 485,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 478,col 9)-(line 478,col 32)",
            "(line 479,col 9)-(line 479,col 51)",
            "(line 480,col 9)-(line 480,col 45)",
            "(line 481,col 9)-(line 481,col 42)",
            "(line 483,col 9)-(line 483,col 49)",
            "(line 484,col 9)-(line 484,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCSV(java.lang.String)",
        "snippet": "    public void testCSV(String data) {\n        this.testXSVAbc(StrTokenizer.getCSVInstance(data));\n        this.testXSVAbc(StrTokenizer.getCSVInstance(data.toCharArray()));\n    }",
        "begin_line": 488,
        "end_line": 491,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 59)",
            "(line 490,col 9)-(line 490,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty()",
        "snippet": "    public void testCSVEmpty() {\n        this.testEmpty(StrTokenizer.getCSVInstance());\n        this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n    }",
        "begin_line": 493,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 54)",
            "(line 495,col 9)-(line 495,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple()",
        "snippet": "    public void testCSVSimple() {\n        this.testCSV(CSV_SIMPLE_FIXTURE);\n    }",
        "begin_line": 498,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 499,col 9)-(line 499,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim()",
        "snippet": "    public void testCSVSimpleNeedsTrim() {\n        this.testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\n        this.testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\n        this.testCSV(\"   \\n  \" + CSV_SIMPLE_FIXTURE + \"\\n\\n\\r\");\n    }",
        "begin_line": 502,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 503,col 49)",
            "(line 504,col 9)-(line 504,col 55)",
            "(line 505,col 9)-(line 505,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testEmpty(org.apache.commons.lang3.text.StrTokenizer)",
        "snippet": "    void testEmpty(StrTokenizer tokenizer) {\n        this.checkClone(tokenizer);\n        assertEquals(false, tokenizer.hasNext());\n        assertEquals(false, tokenizer.hasPrevious());\n        assertEquals(null, tokenizer.nextToken());\n        assertEquals(0, tokenizer.size());\n        try {\n            tokenizer.next();\n            fail();\n        } catch (NoSuchElementException ex) {}\n    }",
        "begin_line": 508,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 509,col 9)-(line 509,col 35)",
            "(line 510,col 9)-(line 510,col 49)",
            "(line 511,col 9)-(line 511,col 53)",
            "(line 512,col 9)-(line 512,col 50)",
            "(line 513,col 9)-(line 513,col 42)",
            "(line 514,col 9)-(line 517,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testGetContent()",
        "snippet": "    public void testGetContent() {\n        String input = \"a   b c \\\"d e\\\" f \";\n        StrTokenizer tok = new StrTokenizer(input);\n        assertEquals(input, tok.getContent());\n\n        tok = new StrTokenizer(input.toCharArray());\n        assertEquals(input, tok.getContent());\n        \n        tok = new StrTokenizer();\n        assertEquals(null, tok.getContent());\n    }",
        "begin_line": 520,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 44)",
            "(line 522,col 9)-(line 522,col 51)",
            "(line 523,col 9)-(line 523,col 46)",
            "(line 525,col 9)-(line 525,col 52)",
            "(line 526,col 9)-(line 526,col 46)",
            "(line 528,col 9)-(line 528,col 33)",
            "(line 529,col 9)-(line 529,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testChaining()",
        "snippet": "    public void testChaining() {\n        StrTokenizer tok = new StrTokenizer();\n        assertEquals(tok, tok.reset());\n        assertEquals(tok, tok.reset(\"\"));\n        assertEquals(tok, tok.reset(new char[0]));\n        assertEquals(tok, tok.setDelimiterChar(' '));\n        assertEquals(tok, tok.setDelimiterString(\" \"));\n        assertEquals(tok, tok.setDelimiterMatcher(null));\n        assertEquals(tok, tok.setQuoteChar(' '));\n        assertEquals(tok, tok.setQuoteMatcher(null));\n        assertEquals(tok, tok.setIgnoredChar(' '));\n        assertEquals(tok, tok.setIgnoredMatcher(null));\n        assertEquals(tok, tok.setTrimmerMatcher(null));\n        assertEquals(tok, tok.setEmptyTokenAsNull(false));\n        assertEquals(tok, tok.setIgnoreEmptyTokens(false));\n    }",
        "begin_line": 533,
        "end_line": 548,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 46)",
            "(line 535,col 9)-(line 535,col 39)",
            "(line 536,col 9)-(line 536,col 41)",
            "(line 537,col 9)-(line 537,col 50)",
            "(line 538,col 9)-(line 538,col 53)",
            "(line 539,col 9)-(line 539,col 55)",
            "(line 540,col 9)-(line 540,col 57)",
            "(line 541,col 9)-(line 541,col 49)",
            "(line 542,col 9)-(line 542,col 53)",
            "(line 543,col 9)-(line 543,col 51)",
            "(line 544,col 9)-(line 544,col 55)",
            "(line 545,col 9)-(line 545,col 55)",
            "(line 546,col 9)-(line 546,col 58)",
            "(line 547,col 9)-(line 547,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException()",
        "snippet": "    public void testCloneNotSupportedException() {\n        Object notCloned = (new StrTokenizer() {\n            @Override\n            Object cloneReset() throws CloneNotSupportedException {\n                throw new CloneNotSupportedException(\"test\");\n            }\n        }).clone();\n        assertNull(notCloned);\n    }",
        "begin_line": 554,
        "end_line": 562,
        "comment": "\n     * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns\n     * <code>null</code>.\n     ",
        "child_ranges": [
            "(line 555,col 9)-(line 560,col 19)",
            "(line 561,col 9)-(line 561,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.Anonymous-0c107e5d-de2e-428b-9358-43463524bbca.cloneReset()",
        "snippet": "            @Override\n            Object cloneReset() throws CloneNotSupportedException {\n                throw new CloneNotSupportedException(\"test\");\n            }",
        "begin_line": 556,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 558,col 17)-(line 558,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull()",
        "snippet": "    public void testCloneNull() {\n        StrTokenizer tokenizer = new StrTokenizer((char[]) null);\n        // Start sanity check\n        assertEquals(null, tokenizer.nextToken());\n        tokenizer.reset();\n        assertEquals(null, tokenizer.nextToken());\n        // End sanity check\n        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n        tokenizer.reset();\n        assertEquals(null, tokenizer.nextToken());\n        assertEquals(null, clonedTokenizer.nextToken());\n    }",
        "begin_line": 564,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 65)",
            "(line 567,col 9)-(line 567,col 50)",
            "(line 568,col 9)-(line 568,col 26)",
            "(line 569,col 9)-(line 569,col 50)",
            "(line 571,col 9)-(line 571,col 72)",
            "(line 572,col 9)-(line 572,col 26)",
            "(line 573,col 9)-(line 573,col 50)",
            "(line 574,col 9)-(line 574,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset()",
        "snippet": "    public void testCloneReset() {\n        char[] input = new char[]{'a'};\n        StrTokenizer tokenizer = new StrTokenizer(input);\n        // Start sanity check\n        assertEquals(\"a\", tokenizer.nextToken());\n        tokenizer.reset(input);\n        assertEquals(\"a\", tokenizer.nextToken());\n        // End sanity check\n        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n        input[0] = 'b';\n        tokenizer.reset(input);\n        assertEquals(\"b\", tokenizer.nextToken());\n        assertEquals(\"a\", clonedTokenizer.nextToken());\n    }",
        "begin_line": 577,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 578,col 9)-(line 578,col 39)",
            "(line 579,col 9)-(line 579,col 57)",
            "(line 581,col 9)-(line 581,col 49)",
            "(line 582,col 9)-(line 582,col 31)",
            "(line 583,col 9)-(line 583,col 49)",
            "(line 585,col 9)-(line 585,col 72)",
            "(line 586,col 9)-(line 586,col 23)",
            "(line 587,col 9)-(line 587,col 31)",
            "(line 588,col 9)-(line 588,col 49)",
            "(line 589,col 9)-(line 589,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String()",
        "snippet": "    public void testConstructor_String() {\n        StrTokenizer tok = new StrTokenizer(\"a b\");\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(\"\");\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((String) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 593,
        "end_line": 604,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 594,col 9)-(line 594,col 51)",
            "(line 595,col 9)-(line 595,col 38)",
            "(line 596,col 9)-(line 596,col 38)",
            "(line 597,col 9)-(line 597,col 43)",
            "(line 599,col 9)-(line 599,col 35)",
            "(line 600,col 9)-(line 600,col 43)",
            "(line 602,col 9)-(line 602,col 46)",
            "(line 603,col 9)-(line 603,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char()",
        "snippet": "    public void testConstructor_String_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(\"\", ' ');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((String) null, ' ');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 607,
        "end_line": 619,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 608,col 9)-(line 608,col 56)",
            "(line 609,col 9)-(line 609,col 87)",
            "(line 610,col 9)-(line 610,col 38)",
            "(line 611,col 9)-(line 611,col 38)",
            "(line 612,col 9)-(line 612,col 43)",
            "(line 614,col 9)-(line 614,col 40)",
            "(line 615,col 9)-(line 615,col 43)",
            "(line 617,col 9)-(line 617,col 51)",
            "(line 618,col 9)-(line 618,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char()",
        "snippet": "    public void testConstructor_String_char_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(\"\", ' ', '\"');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((String) null, ' ', '\"');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 622,
        "end_line": 635,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 61)",
            "(line 624,col 9)-(line 624,col 87)",
            "(line 625,col 9)-(line 625,col 84)",
            "(line 626,col 9)-(line 626,col 38)",
            "(line 627,col 9)-(line 627,col 38)",
            "(line 628,col 9)-(line 628,col 43)",
            "(line 630,col 9)-(line 630,col 45)",
            "(line 631,col 9)-(line 631,col 43)",
            "(line 633,col 9)-(line 633,col 56)",
            "(line 634,col 9)-(line 634,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray()",
        "snippet": "    public void testConstructor_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0]);\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 638,
        "end_line": 649,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 65)",
            "(line 640,col 9)-(line 640,col 38)",
            "(line 641,col 9)-(line 641,col 38)",
            "(line 642,col 9)-(line 642,col 43)",
            "(line 644,col 9)-(line 644,col 44)",
            "(line 645,col 9)-(line 645,col 43)",
            "(line 647,col 9)-(line 647,col 46)",
            "(line 648,col 9)-(line 648,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char()",
        "snippet": "    public void testConstructor_charArray_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0], ' ');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null, ' ');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 652,
        "end_line": 664,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 653,col 9)-(line 653,col 70)",
            "(line 654,col 9)-(line 654,col 87)",
            "(line 655,col 9)-(line 655,col 38)",
            "(line 656,col 9)-(line 656,col 38)",
            "(line 657,col 9)-(line 657,col 43)",
            "(line 659,col 9)-(line 659,col 49)",
            "(line 660,col 9)-(line 660,col 43)",
            "(line 662,col 9)-(line 662,col 51)",
            "(line 663,col 9)-(line 663,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char()",
        "snippet": "    public void testConstructor_charArray_char_char() {\n        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\n        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer(new char[0], ' ', '\"');\n        assertEquals(false, tok.hasNext());\n        \n        tok = new StrTokenizer((char[]) null, ' ', '\"');\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 667,
        "end_line": 680,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 668,col 9)-(line 668,col 75)",
            "(line 669,col 9)-(line 669,col 87)",
            "(line 670,col 9)-(line 670,col 84)",
            "(line 671,col 9)-(line 671,col 38)",
            "(line 672,col 9)-(line 672,col 38)",
            "(line 673,col 9)-(line 673,col 43)",
            "(line 675,col 9)-(line 675,col 54)",
            "(line 676,col 9)-(line 676,col 43)",
            "(line 678,col 9)-(line 678,col 56)",
            "(line 679,col 9)-(line 679,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testReset()",
        "snippet": "    public void testReset() {\n        StrTokenizer tok = new StrTokenizer(\"a b c\");\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok.reset();\n        assertEquals(\"a\", tok.next());\n        assertEquals(\"b\", tok.next());\n        assertEquals(\"c\", tok.next());\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 683,
        "end_line": 695,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 684,col 9)-(line 684,col 53)",
            "(line 685,col 9)-(line 685,col 38)",
            "(line 686,col 9)-(line 686,col 38)",
            "(line 687,col 9)-(line 687,col 38)",
            "(line 688,col 9)-(line 688,col 43)",
            "(line 690,col 9)-(line 690,col 20)",
            "(line 691,col 9)-(line 691,col 38)",
            "(line 692,col 9)-(line 692,col 38)",
            "(line 693,col 9)-(line 693,col 38)",
            "(line 694,col 9)-(line 694,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testReset_String()",
        "snippet": "    public void testReset_String() {\n        StrTokenizer tok = new StrTokenizer(\"x x x\");\n        tok.reset(\"d e\");\n        assertEquals(\"d\", tok.next());\n        assertEquals(\"e\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok.reset((String) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 698,
        "end_line": 707,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 699,col 9)-(line 699,col 53)",
            "(line 700,col 9)-(line 700,col 25)",
            "(line 701,col 9)-(line 701,col 38)",
            "(line 702,col 9)-(line 702,col 38)",
            "(line 703,col 9)-(line 703,col 43)",
            "(line 705,col 9)-(line 705,col 33)",
            "(line 706,col 9)-(line 706,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray()",
        "snippet": "    public void testReset_charArray() {\n        StrTokenizer tok = new StrTokenizer(\"x x x\");\n        \n        char[] array = new char[] {'a', 'b', 'c'};\n        tok.reset(array);\n        assertEquals(\"abc\", tok.next());\n        assertEquals(false, tok.hasNext());\n        \n        tok.reset((char[]) null);\n        assertEquals(false, tok.hasNext());\n    }",
        "begin_line": 710,
        "end_line": 720,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 711,col 9)-(line 711,col 53)",
            "(line 713,col 9)-(line 713,col 50)",
            "(line 714,col 9)-(line 714,col 25)",
            "(line 715,col 9)-(line 715,col 40)",
            "(line 716,col 9)-(line 716,col 43)",
            "(line 718,col 9)-(line 718,col 33)",
            "(line 719,col 9)-(line 719,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testTSV()",
        "snippet": "    public void testTSV() {\n        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\n        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\n    }",
        "begin_line": 723,
        "end_line": 726,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 724,col 9)-(line 724,col 73)",
            "(line 725,col 9)-(line 725,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty()",
        "snippet": "    public void testTSVEmpty() {\n        this.testEmpty(StrTokenizer.getCSVInstance());\n        this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n    }",
        "begin_line": 728,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 729,col 9)-(line 729,col 54)",
            "(line 730,col 9)-(line 730,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testXSVAbc(org.apache.commons.lang3.text.StrTokenizer)",
        "snippet": "    void testXSVAbc(StrTokenizer tokenizer) {\n        this.checkClone(tokenizer);\n        assertEquals(-1, tokenizer.previousIndex());\n        assertEquals(0, tokenizer.nextIndex());\n        assertEquals(null, tokenizer.previousToken());\n        assertEquals(\"A\", tokenizer.nextToken());\n        assertEquals(1, tokenizer.nextIndex());\n        assertEquals(\"b\", tokenizer.nextToken());\n        assertEquals(2, tokenizer.nextIndex());\n        assertEquals(\"c\", tokenizer.nextToken());\n        assertEquals(3, tokenizer.nextIndex());\n        assertEquals(null, tokenizer.nextToken());\n        assertEquals(3, tokenizer.nextIndex());\n        assertEquals(\"c\", tokenizer.previousToken());\n        assertEquals(2, tokenizer.nextIndex());\n        assertEquals(\"b\", tokenizer.previousToken());\n        assertEquals(1, tokenizer.nextIndex());\n        assertEquals(\"A\", tokenizer.previousToken());\n        assertEquals(0, tokenizer.nextIndex());\n        assertEquals(null, tokenizer.previousToken());\n        assertEquals(0, tokenizer.nextIndex());\n        assertEquals(-1, tokenizer.previousIndex());\n        assertEquals(3, tokenizer.size());\n    }",
        "begin_line": 733,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 734,col 9)-(line 734,col 35)",
            "(line 735,col 9)-(line 735,col 52)",
            "(line 736,col 9)-(line 736,col 47)",
            "(line 737,col 9)-(line 737,col 54)",
            "(line 738,col 9)-(line 738,col 49)",
            "(line 739,col 9)-(line 739,col 47)",
            "(line 740,col 9)-(line 740,col 49)",
            "(line 741,col 9)-(line 741,col 47)",
            "(line 742,col 9)-(line 742,col 49)",
            "(line 743,col 9)-(line 743,col 47)",
            "(line 744,col 9)-(line 744,col 50)",
            "(line 745,col 9)-(line 745,col 47)",
            "(line 746,col 9)-(line 746,col 53)",
            "(line 747,col 9)-(line 747,col 47)",
            "(line 748,col 9)-(line 748,col 53)",
            "(line 749,col 9)-(line 749,col 47)",
            "(line 750,col 9)-(line 750,col 53)",
            "(line 751,col 9)-(line 751,col 47)",
            "(line 752,col 9)-(line 752,col 54)",
            "(line 753,col 9)-(line 753,col 47)",
            "(line 754,col 9)-(line 754,col 52)",
            "(line 755,col 9)-(line 755,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testIteration()",
        "snippet": "    public void testIteration() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c\");\n        assertEquals(false, tkn.hasPrevious());\n        try {\n            tkn.previous();\n            fail();\n        } catch (NoSuchElementException ex) {}\n        assertEquals(true, tkn.hasNext());\n        \n        assertEquals(\"a\", tkn.next());\n        try {\n            tkn.remove();\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        try {\n            tkn.set(\"x\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        try {\n            tkn.add(\"y\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(true, tkn.hasNext());\n        \n        assertEquals(\"b\", tkn.next());\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(true, tkn.hasNext());\n        \n        assertEquals(\"c\", tkn.next());\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(false, tkn.hasNext());\n        \n        try {\n            tkn.next();\n            fail();\n        } catch (NoSuchElementException ex) {}\n        assertEquals(true, tkn.hasPrevious());\n        assertEquals(false, tkn.hasNext());\n    }",
        "begin_line": 758,
        "end_line": 797,
        "comment": "",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 53)",
            "(line 760,col 9)-(line 760,col 47)",
            "(line 761,col 9)-(line 764,col 46)",
            "(line 765,col 9)-(line 765,col 42)",
            "(line 767,col 9)-(line 767,col 38)",
            "(line 768,col 9)-(line 771,col 53)",
            "(line 772,col 9)-(line 775,col 53)",
            "(line 776,col 9)-(line 779,col 53)",
            "(line 780,col 9)-(line 780,col 46)",
            "(line 781,col 9)-(line 781,col 42)",
            "(line 783,col 9)-(line 783,col 38)",
            "(line 784,col 9)-(line 784,col 46)",
            "(line 785,col 9)-(line 785,col 42)",
            "(line 787,col 9)-(line 787,col 38)",
            "(line 788,col 9)-(line 788,col 46)",
            "(line 789,col 9)-(line 789,col 43)",
            "(line 791,col 9)-(line 794,col 46)",
            "(line 795,col 9)-(line 795,col 46)",
            "(line 796,col 9)-(line 796,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange()",
        "snippet": "    public void testTokenizeSubclassInputChange() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\n            @Override\n            protected List<String> tokenize(char[] chars, int offset, int count) {\n                return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n            }\n        };\n        assertEquals(\"x\", tkn.next());\n        assertEquals(\"y\", tkn.next());\n    }",
        "begin_line": 800,
        "end_line": 809,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 801,col 9)-(line 806,col 10)",
            "(line 807,col 9)-(line 807,col 38)",
            "(line 808,col 9)-(line 808,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.Anonymous-bc158ced-aa6b-49b8-9190-23e998f9d151.tokenize(char[], int, int)",
        "snippet": "            @Override\n            protected List<String> tokenize(char[] chars, int offset, int count) {\n                return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n            }",
        "begin_line": 802,
        "end_line": 805,
        "comment": "",
        "child_ranges": [
            "(line 804,col 17)-(line 804,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange()",
        "snippet": "    public void testTokenizeSubclassOutputChange() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c\") {\n            @Override\n            protected List<String> tokenize(char[] chars, int offset, int count) {\n                List<String> list = super.tokenize(chars, offset, count);\n                Collections.reverse(list);\n                return list;\n            }\n        };\n        assertEquals(\"c\", tkn.next());\n        assertEquals(\"b\", tkn.next());\n        assertEquals(\"a\", tkn.next());\n    }",
        "begin_line": 812,
        "end_line": 824,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 813,col 9)-(line 820,col 10)",
            "(line 821,col 9)-(line 821,col 38)",
            "(line 822,col 9)-(line 822,col 38)",
            "(line 823,col 9)-(line 823,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.Anonymous-868f220e-25c7-4424-8a3f-579b2e40606b.tokenize(char[], int, int)",
        "snippet": "            @Override\n            protected List<String> tokenize(char[] chars, int offset, int count) {\n                List<String> list = super.tokenize(chars, offset, count);\n                Collections.reverse(list);\n                return list;\n            }",
        "begin_line": 814,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 816,col 17)-(line 816,col 73)",
            "(line 817,col 17)-(line 817,col 42)",
            "(line 818,col 17)-(line 818,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrTokenizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java",
        "signature": "org.apache.commons.lang3.text.StrTokenizerTest.testToString()",
        "snippet": "    public void testToString() {\n        StrTokenizer tkn = new StrTokenizer(\"a b c d e\");\n        assertEquals(\"StrTokenizer[not tokenized yet]\", tkn.toString());\n        tkn.next();\n        assertEquals(\"StrTokenizer[a, b, c, d, e]\", tkn.toString());\n    }",
        "begin_line": 827,
        "end_line": 832,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 828,col 9)-(line 828,col 57)",
            "(line 829,col 9)-(line 829,col 72)",
            "(line 830,col 9)-(line 830,col 19)",
            "(line 831,col 9)-(line 831,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.WordUtilsTest(java.lang.String)",
        "snippet": "    public WordUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new WordUtils());\n        Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n    }",
        "begin_line": 40,
        "end_line": 47,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 39)",
            "(line 42,col 9)-(line 42,col 74)",
            "(line 43,col 9)-(line 43,col 37)",
            "(line 44,col 9)-(line 44,col 70)",
            "(line 45,col 9)-(line 45,col 78)",
            "(line 46,col 9)-(line 46,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt()",
        "snippet": "    public void testWrap_StringInt() {\n        assertEquals(null, WordUtils.wrap(null, 20));\n        assertEquals(null, WordUtils.wrap(null, -1));\n        \n        assertEquals(\"\", WordUtils.wrap(\"\", 20));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1));\n        \n        // normal\n        String systemNewLine = System.getProperty(\"line.separator\");\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" \n            + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n        \n        // long word at end\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\" + systemNewLine + \"to the jakarta\" + systemNewLine \n            + \"website -\" + systemNewLine + \"http://jakarta.apache.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n        \n        // long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\" + systemNewLine + \"http://jakarta.apache.org,\" + systemNewLine \n            + \"to jump to the\" + systemNewLine + \"jakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n    }",
        "begin_line": 50,
        "end_line": 75,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 53)",
            "(line 52,col 9)-(line 52,col 53)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 49)",
            "(line 58,col 9)-(line 58,col 68)",
            "(line 59,col 9)-(line 59,col 96)",
            "(line 60,col 9)-(line 61,col 84)",
            "(line 62,col 9)-(line 62,col 58)",
            "(line 65,col 9)-(line 65,col 88)",
            "(line 66,col 9)-(line 67,col 72)",
            "(line 68,col 9)-(line 68,col 58)",
            "(line 71,col 9)-(line 71,col 88)",
            "(line 72,col 9)-(line 73,col 67)",
            "(line 74,col 9)-(line 74,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean()",
        "snippet": "    public void testWrap_StringIntStringBoolean() {\n        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n        assertEquals(null, WordUtils.wrap(null, 20, null, true));\n        assertEquals(null, WordUtils.wrap(null, 20, null, false));\n        assertEquals(null, WordUtils.wrap(null, -1, null, true));\n        assertEquals(null, WordUtils.wrap(null, -1, null, false));\n        \n        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\n        \n        // normal\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n\n        // unusual newline char\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\n\n        // short line length\n        input = \"Here is one line\";\n        expected = \"Here\\nis one\\nline\";\n        assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\n        expected = \"Here\\nis\\none\\nline\";\n        assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\n\n        // system newline char\n        String systemNewLine = System.getProperty(\"line.separator\");\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine \n            + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, null, false));\n        assertEquals(expected, WordUtils.wrap(input, 20, null, true));\n\n        // with extra spaces\n        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // with tab\n        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // with tab at wrapColumn\n        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // difference because of long word\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // difference because of long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n//        System.err.println(expected);\n//        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n    }",
        "begin_line": 77,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 66)",
            "(line 79,col 9)-(line 79,col 65)",
            "(line 80,col 9)-(line 80,col 65)",
            "(line 81,col 9)-(line 81,col 66)",
            "(line 82,col 9)-(line 82,col 65)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 85,col 9)-(line 85,col 62)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 62)",
            "(line 88,col 9)-(line 88,col 61)",
            "(line 89,col 9)-(line 89,col 62)",
            "(line 90,col 9)-(line 90,col 61)",
            "(line 93,col 9)-(line 93,col 96)",
            "(line 94,col 9)-(line 94,col 102)",
            "(line 95,col 9)-(line 95,col 71)",
            "(line 96,col 9)-(line 96,col 70)",
            "(line 99,col 9)-(line 99,col 89)",
            "(line 100,col 9)-(line 100,col 107)",
            "(line 101,col 9)-(line 101,col 75)",
            "(line 102,col 9)-(line 102,col 74)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 40)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 41)",
            "(line 109,col 9)-(line 109,col 70)",
            "(line 110,col 9)-(line 110,col 71)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 114,col 9)-(line 114,col 89)",
            "(line 115,col 9)-(line 116,col 68)",
            "(line 117,col 9)-(line 117,col 71)",
            "(line 118,col 9)-(line 118,col 70)",
            "(line 121,col 9)-(line 121,col 105)",
            "(line 122,col 9)-(line 122,col 110)",
            "(line 123,col 9)-(line 123,col 71)",
            "(line 124,col 9)-(line 124,col 70)",
            "(line 127,col 9)-(line 127,col 90)",
            "(line 128,col 9)-(line 128,col 96)",
            "(line 129,col 9)-(line 129,col 71)",
            "(line 130,col 9)-(line 130,col 70)",
            "(line 133,col 9)-(line 133,col 90)",
            "(line 134,col 9)-(line 134,col 96)",
            "(line 135,col 9)-(line 135,col 71)",
            "(line 136,col 9)-(line 136,col 70)",
            "(line 139,col 9)-(line 139,col 88)",
            "(line 140,col 9)-(line 140,col 94)",
            "(line 141,col 9)-(line 141,col 71)",
            "(line 142,col 9)-(line 142,col 96)",
            "(line 143,col 9)-(line 143,col 70)",
            "(line 146,col 9)-(line 146,col 88)",
            "(line 147,col 9)-(line 147,col 94)",
            "(line 148,col 9)-(line 148,col 71)",
            "(line 149,col 9)-(line 149,col 95)",
            "(line 150,col 9)-(line 150,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testCapitalize_String()",
        "snippet": "    public void testCapitalize_String() {\n        assertEquals(null, WordUtils.capitalize(null));\n        assertEquals(\"\", WordUtils.capitalize(\"\"));\n        assertEquals(\"  \", WordUtils.capitalize(\"  \"));\n        \n        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\") );\n        assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\") );\n        assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n    }",
        "begin_line": 156,
        "end_line": 167,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 55)",
            "(line 158,col 9)-(line 158,col 51)",
            "(line 159,col 9)-(line 159,col 55)",
            "(line 161,col 9)-(line 161,col 54)",
            "(line 162,col 9)-(line 162,col 54)",
            "(line 163,col 9)-(line 163,col 78)",
            "(line 164,col 9)-(line 164,col 78)",
            "(line 165,col 9)-(line 165,col 78)",
            "(line 166,col 9)-(line 166,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeWithDelimiters_String()",
        "snippet": "    public void testCapitalizeWithDelimiters_String() {\n        assertEquals(null, WordUtils.capitalize(null, null));\n        assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.capitalize(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"I\", WordUtils.capitalize(\"I\", chars) );\n        assertEquals(\"I\", WordUtils.capitalize(\"i\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars) );\n        assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars) );\n        assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars) );\n        assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars) );\n        assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null) );\n    }",
        "begin_line": 169,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 61)",
            "(line 171,col 9)-(line 171,col 64)",
            "(line 172,col 9)-(line 172,col 68)",
            "(line 174,col 9)-(line 174,col 57)",
            "(line 175,col 9)-(line 175,col 61)",
            "(line 176,col 9)-(line 176,col 61)",
            "(line 177,col 9)-(line 177,col 85)",
            "(line 178,col 9)-(line 178,col 85)",
            "(line 179,col 9)-(line 179,col 85)",
            "(line 180,col 9)-(line 180,col 85)",
            "(line 181,col 9)-(line 181,col 33)",
            "(line 182,col 9)-(line 182,col 77)",
            "(line 183,col 9)-(line 183,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFully_String()",
        "snippet": "    public void testCapitalizeFully_String() {\n        assertEquals(null, WordUtils.capitalizeFully(null));\n        assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\n        \n        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\") );\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n    }",
        "begin_line": 186,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 60)",
            "(line 188,col 9)-(line 188,col 56)",
            "(line 189,col 9)-(line 189,col 60)",
            "(line 191,col 9)-(line 191,col 59)",
            "(line 192,col 9)-(line 192,col 59)",
            "(line 193,col 9)-(line 193,col 83)",
            "(line 194,col 9)-(line 194,col 83)",
            "(line 195,col 9)-(line 195,col 83)",
            "(line 196,col 9)-(line 196,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()",
        "snippet": "    public void testCapitalizeFullyWithDelimiters_String() {\n        assertEquals(null, WordUtils.capitalizeFully(null, null));\n        assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars) );\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars) );\n        assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars) );\n        assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars) );\n        assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null) );\n    }",
        "begin_line": 199,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 66)",
            "(line 201,col 9)-(line 201,col 69)",
            "(line 202,col 9)-(line 202,col 73)",
            "(line 204,col 9)-(line 204,col 57)",
            "(line 205,col 9)-(line 205,col 66)",
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 90)",
            "(line 208,col 9)-(line 208,col 90)",
            "(line 209,col 9)-(line 209,col 90)",
            "(line 210,col 9)-(line 210,col 90)",
            "(line 211,col 9)-(line 211,col 33)",
            "(line 212,col 9)-(line 212,col 82)",
            "(line 213,col 9)-(line 213,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testUncapitalize_String()",
        "snippet": "    public void testUncapitalize_String() {\n        assertEquals(null, WordUtils.uncapitalize(null));\n        assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n        assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.uncapitalize(\"I\") );\n        assertEquals(\"i\", WordUtils.uncapitalize(\"i\") );\n        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\") );\n        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\") );\n        assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\") );\n        assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n    }",
        "begin_line": 216,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 57)",
            "(line 218,col 9)-(line 218,col 53)",
            "(line 219,col 9)-(line 219,col 57)",
            "(line 221,col 9)-(line 221,col 56)",
            "(line 222,col 9)-(line 222,col 56)",
            "(line 223,col 9)-(line 223,col 80)",
            "(line 224,col 9)-(line 224,col 80)",
            "(line 225,col 9)-(line 225,col 80)",
            "(line 226,col 9)-(line 226,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()",
        "snippet": "    public void testUncapitalizeWithDelimiters_String() {\n        assertEquals(null, WordUtils.uncapitalize(null, null));\n        assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.uncapitalize(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars) );\n        assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars) );\n        assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars) );\n        assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars) );\n        assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars) );\n        assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars) );\n        assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null) );\n    }",
        "begin_line": 229,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 63)",
            "(line 231,col 9)-(line 231,col 66)",
            "(line 232,col 9)-(line 232,col 70)",
            "(line 234,col 9)-(line 234,col 57)",
            "(line 235,col 9)-(line 235,col 63)",
            "(line 236,col 9)-(line 236,col 63)",
            "(line 237,col 9)-(line 237,col 87)",
            "(line 238,col 9)-(line 238,col 87)",
            "(line 239,col 9)-(line 239,col 87)",
            "(line 240,col 9)-(line 240,col 87)",
            "(line 241,col 9)-(line 241,col 33)",
            "(line 242,col 9)-(line 242,col 79)",
            "(line 243,col 9)-(line 243,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testInitials_String()",
        "snippet": "    public void testInitials_String() {\n        assertEquals(null, WordUtils.initials(null));\n        assertEquals(\"\", WordUtils.initials(\"\"));\n        assertEquals(\"\", WordUtils.initials(\"  \"));\n\n        assertEquals(\"I\", WordUtils.initials(\"I\"));\n        assertEquals(\"i\", WordUtils.initials(\"i\"));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\n    }",
        "begin_line": 247,
        "end_line": 258,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 53)",
            "(line 249,col 9)-(line 249,col 49)",
            "(line 250,col 9)-(line 250,col 51)",
            "(line 252,col 9)-(line 252,col 51)",
            "(line 253,col 9)-(line 253,col 51)",
            "(line 254,col 9)-(line 254,col 64)",
            "(line 255,col 9)-(line 255,col 60)",
            "(line 256,col 9)-(line 256,col 71)",
            "(line 257,col 9)-(line 257,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testInitials_String_charArray()",
        "snippet": "    public void testInitials_String_charArray() {\n        char[] array = null;\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = new char[0];\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"\", WordUtils.initials(\"I\", array));\n        assertEquals(\"\", WordUtils.initials(\"i\", array));\n        assertEquals(\"\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" \".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" .\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" .'\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \"SIJo1\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\" \", WordUtils.initials(\"  \", array));\n        assertEquals(\"\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\n    }",
        "begin_line": 261,
        "end_line": 339,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 28)",
            "(line 263,col 9)-(line 263,col 60)",
            "(line 264,col 9)-(line 264,col 56)",
            "(line 265,col 9)-(line 265,col 58)",
            "(line 266,col 9)-(line 266,col 58)",
            "(line 267,col 9)-(line 267,col 58)",
            "(line 268,col 9)-(line 268,col 60)",
            "(line 269,col 9)-(line 269,col 71)",
            "(line 270,col 9)-(line 270,col 67)",
            "(line 271,col 9)-(line 271,col 78)",
            "(line 272,col 9)-(line 272,col 70)",
            "(line 273,col 9)-(line 273,col 73)",
            "(line 275,col 9)-(line 275,col 28)",
            "(line 276,col 9)-(line 276,col 60)",
            "(line 277,col 9)-(line 277,col 56)",
            "(line 278,col 9)-(line 278,col 58)",
            "(line 279,col 9)-(line 279,col 57)",
            "(line 280,col 9)-(line 280,col 57)",
            "(line 281,col 9)-(line 281,col 59)",
            "(line 282,col 9)-(line 282,col 68)",
            "(line 283,col 9)-(line 283,col 65)",
            "(line 284,col 9)-(line 284,col 74)",
            "(line 285,col 9)-(line 285,col 68)",
            "(line 286,col 9)-(line 286,col 69)",
            "(line 288,col 9)-(line 288,col 34)",
            "(line 289,col 9)-(line 289,col 60)",
            "(line 290,col 9)-(line 290,col 56)",
            "(line 291,col 9)-(line 291,col 58)",
            "(line 292,col 9)-(line 292,col 58)",
            "(line 293,col 9)-(line 293,col 58)",
            "(line 294,col 9)-(line 294,col 60)",
            "(line 295,col 9)-(line 295,col 71)",
            "(line 296,col 9)-(line 296,col 67)",
            "(line 297,col 9)-(line 297,col 78)",
            "(line 298,col 9)-(line 298,col 70)",
            "(line 299,col 9)-(line 299,col 73)",
            "(line 301,col 9)-(line 301,col 35)",
            "(line 302,col 9)-(line 302,col 60)",
            "(line 303,col 9)-(line 303,col 56)",
            "(line 304,col 9)-(line 304,col 58)",
            "(line 305,col 9)-(line 305,col 58)",
            "(line 306,col 9)-(line 306,col 58)",
            "(line 307,col 9)-(line 307,col 60)",
            "(line 308,col 9)-(line 308,col 71)",
            "(line 309,col 9)-(line 309,col 68)",
            "(line 310,col 9)-(line 310,col 77)",
            "(line 311,col 9)-(line 311,col 70)",
            "(line 312,col 9)-(line 312,col 73)",
            "(line 314,col 9)-(line 314,col 36)",
            "(line 315,col 9)-(line 315,col 60)",
            "(line 316,col 9)-(line 316,col 56)",
            "(line 317,col 9)-(line 317,col 58)",
            "(line 318,col 9)-(line 318,col 58)",
            "(line 319,col 9)-(line 319,col 58)",
            "(line 320,col 9)-(line 320,col 60)",
            "(line 321,col 9)-(line 321,col 71)",
            "(line 322,col 9)-(line 322,col 68)",
            "(line 323,col 9)-(line 323,col 77)",
            "(line 324,col 9)-(line 324,col 71)",
            "(line 325,col 9)-(line 325,col 73)",
            "(line 327,col 9)-(line 327,col 38)",
            "(line 328,col 9)-(line 328,col 60)",
            "(line 329,col 9)-(line 329,col 56)",
            "(line 330,col 9)-(line 330,col 59)",
            "(line 331,col 9)-(line 331,col 57)",
            "(line 332,col 9)-(line 332,col 58)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 70)",
            "(line 335,col 9)-(line 335,col 67)",
            "(line 336,col 9)-(line 336,col 76)",
            "(line 337,col 9)-(line 337,col 69)",
            "(line 338,col 9)-(line 338,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, WordUtils.swapCase(null));\n        assertEquals(\"\", WordUtils.swapCase(\"\"));\n        assertEquals(\"  \", WordUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\") );\n\n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }",
        "begin_line": 342,
        "end_line": 357,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 53)",
            "(line 344,col 9)-(line 344,col 49)",
            "(line 345,col 9)-(line 345,col 53)",
            "(line 347,col 9)-(line 347,col 52)",
            "(line 348,col 9)-(line 348,col 52)",
            "(line 349,col 9)-(line 349,col 76)",
            "(line 350,col 9)-(line 350,col 76)",
            "(line 351,col 9)-(line 351,col 76)",
            "(line 352,col 9)-(line 352,col 76)",
            "(line 354,col 9)-(line 354,col 75)",
            "(line 355,col 9)-(line 355,col 77)",
            "(line 356,col 9)-(line 356,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java",
        "signature": "org.apache.commons.lang3.text.WordUtilsTest.testAbbreviate()",
        "snippet": "    public void testAbbreviate() {\n        // check null and empty are returned respectively\n        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n\n        // test upper limit\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test upper limit + append string\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test lower value\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n\n        // test lower value + append\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n\n        // others\n        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n    }",
        "begin_line": 360,
        "end_line": 395,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 56)",
            "(line 363,col 9)-(line 363,col 75)",
            "(line 366,col 9)-(line 366,col 74)",
            "(line 367,col 9)-(line 367,col 75)",
            "(line 368,col 9)-(line 368,col 74)",
            "(line 369,col 9)-(line 369,col 76)",
            "(line 370,col 9)-(line 370,col 80)",
            "(line 373,col 9)-(line 373,col 76)",
            "(line 374,col 9)-(line 374,col 77)",
            "(line 375,col 9)-(line 375,col 77)",
            "(line 376,col 9)-(line 376,col 76)",
            "(line 377,col 9)-(line 377,col 80)",
            "(line 380,col 9)-(line 380,col 76)",
            "(line 381,col 9)-(line 381,col 80)",
            "(line 382,col 9)-(line 382,col 89)",
            "(line 383,col 9)-(line 383,col 88)",
            "(line 384,col 9)-(line 384,col 85)",
            "(line 387,col 9)-(line 387,col 76)",
            "(line 388,col 9)-(line 388,col 80)",
            "(line 389,col 9)-(line 389,col 93)",
            "(line 390,col 9)-(line 390,col 86)",
            "(line 393,col 9)-(line 393,col 69)",
            "(line 394,col 9)-(line 394,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.CompositeFormatTest(java.lang.String)",
        "snippet": "    public CompositeFormatTest(String name) {\n        super(name);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name\n     *            name\n     ",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.testCompositeFormat()",
        "snippet": "    public void testCompositeFormat() {\n\n        Format parser = new Format() {\n            @Override\n            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }\n\n            @Override\n            public Object parseObject(String source, ParsePosition pos) {\n                return null;    // do nothing\n            }\n        };\n\n        Format formatter = new Format() {\n            @Override\n            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                return null;    // do nothing\n            }\n\n            @Override\n            public Object parseObject(String source, ParsePosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }\n        };\n\n        CompositeFormat composite = new CompositeFormat(parser, formatter);\n\n        composite.parseObject(\"\", null);\n        composite.format(new Object(), new StringBuffer(), null);\n        assertEquals( \"Parser get method incorrectly implemented\", parser, composite.getParser() );\n        assertEquals( \"Formatter get method incorrectly implemented\", formatter, composite.getFormatter() );\n    }",
        "begin_line": 47,
        "end_line": 79,
        "comment": "\n     * Ensures that the parse/format separation is correctly maintained. \n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 59,col 10)",
            "(line 61,col 9)-(line 71,col 10)",
            "(line 73,col 9)-(line 73,col 75)",
            "(line 75,col 9)-(line 75,col 40)",
            "(line 76,col 9)-(line 76,col 65)",
            "(line 77,col 9)-(line 77,col 99)",
            "(line 78,col 9)-(line 78,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.Anonymous-117cc553-edfa-4fdc-98f1-00557316cb55.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "            @Override\n            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 17)-(line 52,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.Anonymous-1bb36520-f1af-4c3a-9f20-bc087d7aa9a9.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "            @Override\n            public Object parseObject(String source, ParsePosition pos) {\n                return null;    // do nothing\n            }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 17)-(line 57,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.Anonymous-1fd5a733-c631-4cc7-99ed-1fd0c03bb3b5.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)",
        "snippet": "            @Override\n            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                return null;    // do nothing\n            }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 17)-(line 64,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.Anonymous-64f9ea00-2fff-4e8d-b91d-201c2113a861.parseObject(java.lang.String, java.text.ParsePosition)",
        "snippet": "            @Override\n            public Object parseObject(String source, ParsePosition pos) {\n                throw new UnsupportedOperationException(\"Not implemented\");\n            }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 17)-(line 69,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.CompositeFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java",
        "signature": "org.apache.commons.lang3.text.CompositeFormatTest.testUsage()",
        "snippet": "    public void testUsage() throws Exception {\n        Format f1 = new SimpleDateFormat(\"MMddyyyy\", Locale.ENGLISH);\n        Format f2 = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\n        CompositeFormat c = new CompositeFormat(f1, f2);\n        String testString = \"January 3, 2005\";\n        assertEquals(testString, c.format(c.parseObject(\"01032005\")));\n        assertEquals(testString, c.reformat(\"01032005\"));\n    }",
        "begin_line": 81,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 69)",
            "(line 83,col 9)-(line 83,col 73)",
            "(line 84,col 9)-(line 84,col 56)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        values = new HashMap<String, String>();\n        values.put(\"animal\", \"quick brown fox\");\n        values.put(\"target\", \"lazy dog\");\n    }",
        "begin_line": 37,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 22)",
            "(line 40,col 9)-(line 40,col 47)",
            "(line 41,col 9)-(line 41,col 48)",
            "(line 42,col 9)-(line 42,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        values = null;\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 25)",
            "(line 48,col 9)-(line 48,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple()",
        "snippet": "    public void testReplaceSimple() {\n        doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "\n     * Tests simple key replace.\n     ",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo()",
        "snippet": "    public void testReplaceSolo() {\n        doTestReplace(\"quick brown fox\", \"${animal}\", false);\n    }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * Tests simple key replace.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables()",
        "snippet": "    public void testReplaceNoVariables() {\n        doTestNoReplace(\"The balloon arrived.\");\n    }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Tests replace with no variables.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull()",
        "snippet": "    public void testReplaceNull() {\n        doTestNoReplace(null);\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Tests replace with null.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmpty()",
        "snippet": "    public void testReplaceEmpty() {\n        doTestNoReplace(\"\");\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Tests replace with null.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap()",
        "snippet": "    public void testReplaceChangedMap() {\n        StrSubstitutor sub = new StrSubstitutor(values);\n        values.put(\"target\", \"moon\");\n        assertEquals(\"The quick brown fox jumps over the moon.\", sub.replace(\"The ${animal} jumps over the ${target}.\"));\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n     * Tests key replace changing map after initialization (not recommended).\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 56)",
            "(line 92,col 9)-(line 92,col 37)",
            "(line 93,col 9)-(line 93,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey()",
        "snippet": "    public void testReplaceUnknownKey() {\n        doTestReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\n    }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Tests unknown key replace.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart()",
        "snippet": "    public void testReplaceAdjacentAtStart() {\n        values.put(\"code\", \"GBP\");\n        values.put(\"amount\", \"12.50\");\n        StrSubstitutor sub = new StrSubstitutor(values);\n        assertEquals(\"GBP12.50 charged\", sub.replace(\"${code}${amount} charged\"));\n    }",
        "begin_line": 106,
        "end_line": 111,
        "comment": "\n     * Tests adjacent keys.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 34)",
            "(line 108,col 9)-(line 108,col 38)",
            "(line 109,col 9)-(line 109,col 56)",
            "(line 110,col 9)-(line 110,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()",
        "snippet": "    public void testReplaceAdjacentAtEnd() {\n        values.put(\"code\", \"GBP\");\n        values.put(\"amount\", \"12.50\");\n        StrSubstitutor sub = new StrSubstitutor(values);\n        assertEquals(\"Amount is GBP12.50\", sub.replace(\"Amount is ${code}${amount}\"));\n    }",
        "begin_line": 116,
        "end_line": 121,
        "comment": "\n     * Tests adjacent keys.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 34)",
            "(line 118,col 9)-(line 118,col 38)",
            "(line 119,col 9)-(line 119,col 56)",
            "(line 120,col 9)-(line 120,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive()",
        "snippet": "    public void testReplaceRecursive() {\n        values.put(\"animal\", \"${critter}\");\n        values.put(\"target\", \"${pet}\");\n        values.put(\"pet\", \"${petCharacteristic} dog\");\n        values.put(\"petCharacteristic\", \"lazy\");\n        values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n        values.put(\"critterSpeed\", \"quick\");\n        values.put(\"critterColor\", \"brown\");\n        values.put(\"critterType\", \"fox\");\n        doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Tests simple recursive replace.\n     ",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 39)",
            "(line 129,col 9)-(line 129,col 54)",
            "(line 130,col 9)-(line 130,col 48)",
            "(line 131,col 9)-(line 131,col 80)",
            "(line 132,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 133,col 44)",
            "(line 134,col 9)-(line 134,col 41)",
            "(line 135,col 9)-(line 135,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping()",
        "snippet": "    public void testReplaceEscaping() {\n        doTestReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 141,
        "end_line": 143,
        "comment": "\n     * Tests escaping.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping()",
        "snippet": "    public void testReplaceSoloEscaping() {\n        doTestReplace(\"${animal}\", \"$${animal}\", false);\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Tests escaping.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping()",
        "snippet": "    public void testReplaceComplexEscaping() {\n        doTestReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\n    }",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n     * Tests complex escaping.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPefixNoSuffix()",
        "snippet": "    public void testReplaceNoPefixNoSuffix() {\n        doTestReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * Tests when no prefix or suffix.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePefix()",
        "snippet": "    public void testReplaceIncompletePefix() {\n        doTestReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Tests when no incomplete prefix.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix()",
        "snippet": "    public void testReplacePrefixNoSuffix() {\n        doTestReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\n    }",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\n     * Tests when prefix but no suffix.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()",
        "snippet": "    public void testReplaceNoPrefixSuffix() {\n        doTestReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\n    }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n     * Tests when suffix but no prefix.\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys()",
        "snippet": "    public void testReplaceEmptyKeys() {\n        doTestReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\n    }",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\n     * Tests when no variable name.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical()",
        "snippet": "    public void testReplaceToIdentical() {\n        values.put(\"animal\", \"$${${thing}}\");\n        values.put(\"thing\", \"animal\");\n        doTestReplace(\"The ${animal} jumps.\", \"The ${animal} jumps.\", true);\n    }",
        "begin_line": 197,
        "end_line": 201,
        "comment": "\n     * Tests replace creates output same as input.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 45)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement()",
        "snippet": "    public void testCyclicReplacement() {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"animal\", \"${critter}\");\n        map.put(\"target\", \"${pet}\");\n        map.put(\"pet\", \"${petCharacteristic} dog\");\n        map.put(\"petCharacteristic\", \"lazy\");\n        map.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n        map.put(\"critterSpeed\", \"quick\");\n        map.put(\"critterColor\", \"brown\");\n        map.put(\"critterType\", \"${animal}\");\n        StrSubstitutor sub = new StrSubstitutor(map);\n        try {\n            sub.replace(\"The ${animal} jumps over the ${target}.\");\n            fail(\"Cyclic replacement was not detected!\");\n        } catch (IllegalStateException ex) {\n            // expected\n        }\n    }",
        "begin_line": 207,
        "end_line": 224,
        "comment": "\n     * Tests a cyclic replace operation.\n     * The cycle should be detected and cause an exception to be thrown.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 64)",
            "(line 209,col 9)-(line 209,col 40)",
            "(line 210,col 9)-(line 210,col 36)",
            "(line 211,col 9)-(line 211,col 51)",
            "(line 212,col 9)-(line 212,col 45)",
            "(line 213,col 9)-(line 213,col 77)",
            "(line 214,col 9)-(line 214,col 41)",
            "(line 215,col 9)-(line 215,col 41)",
            "(line 216,col 9)-(line 216,col 44)",
            "(line 217,col 9)-(line 217,col 53)",
            "(line 218,col 9)-(line 223,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens()",
        "snippet": "    public void testReplaceWeirdPattens() {\n        doTestNoReplace(\"\");\n        doTestNoReplace(\"${}\");\n        doTestNoReplace(\"${ }\");\n        doTestNoReplace(\"${\\t}\");\n        doTestNoReplace(\"${\\n}\");\n        doTestNoReplace(\"${\\b}\");\n        doTestNoReplace(\"${\");\n        doTestNoReplace(\"$}\");\n        doTestNoReplace(\"}\");\n        doTestNoReplace(\"${}$\");\n        doTestNoReplace(\"${${\");\n        doTestNoReplace(\"${${}}\");\n        doTestNoReplace(\"${$${}}\");\n        doTestNoReplace(\"${$$${}}\");\n        doTestNoReplace(\"${$$${$}}\");\n        doTestNoReplace(\"${${}}\");\n        doTestNoReplace(\"${${ }}\");\n    }",
        "begin_line": 229,
        "end_line": 247,
        "comment": "\n     * Tests interpolation with weird boundary patterns.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 28)",
            "(line 231,col 9)-(line 231,col 31)",
            "(line 232,col 9)-(line 232,col 32)",
            "(line 233,col 9)-(line 233,col 33)",
            "(line 234,col 9)-(line 234,col 33)",
            "(line 235,col 9)-(line 235,col 33)",
            "(line 236,col 9)-(line 236,col 30)",
            "(line 237,col 9)-(line 237,col 30)",
            "(line 238,col 9)-(line 238,col 29)",
            "(line 239,col 9)-(line 239,col 32)",
            "(line 240,col 9)-(line 240,col 32)",
            "(line 241,col 9)-(line 241,col 34)",
            "(line 242,col 9)-(line 242,col 35)",
            "(line 243,col 9)-(line 243,col 36)",
            "(line 244,col 9)-(line 244,col 37)",
            "(line 245,col 9)-(line 245,col 34)",
            "(line 246,col 9)-(line 246,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace()",
        "snippet": "    public void testReplacePartialString_noReplace() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(\"${animal} jumps\", sub.replace(\"The ${animal} jumps over the ${target}.\", 4, 15));\n    }",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n     * Tests simple key replace.\n     ",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 50)",
            "(line 254,col 9)-(line 254,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable()",
        "snippet": "    public void testResolveVariable() {\n        final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"name\", \"commons\");\n        StrSubstitutor sub = new StrSubstitutor(map) {\n            @Override\n            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n                assertEquals(\"name\", variableName);\n                assertSame(builder, buf);\n                assertEquals(3, startPos);\n                assertEquals(10, endPos);\n                return \"jakarta\";\n            }\n        };\n        sub.replaceIn(builder);\n        assertEquals(\"Hi jakarta!\", builder.toString());\n    }",
        "begin_line": 261,
        "end_line": 277,
        "comment": "\n     * Tests protected.\n     ",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 65)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 264,col 9)-(line 264,col 35)",
            "(line 265,col 9)-(line 274,col 10)",
            "(line 275,col 9)-(line 275,col 31)",
            "(line 276,col 9)-(line 276,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.Anonymous-8efd0982-ab0e-4424-822f-c119ae5ab344.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int)",
        "snippet": "            @Override\n            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n                assertEquals(\"name\", variableName);\n                assertSame(builder, buf);\n                assertEquals(3, startPos);\n                assertEquals(10, endPos);\n                return \"jakarta\";\n            }",
        "begin_line": 266,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 268,col 17)-(line 268,col 51)",
            "(line 269,col 17)-(line 269,col 41)",
            "(line 270,col 17)-(line 270,col 42)",
            "(line 271,col 17)-(line 271,col 41)",
            "(line 272,col 17)-(line 272,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs()",
        "snippet": "    public void testConstructorNoArgs() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(\"Hi ${name}\", sub.replace(\"Hi ${name}\"));\n    }",
        "begin_line": 283,
        "end_line": 286,
        "comment": "\n     * Tests constructor.\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()",
        "snippet": "    public void testConstructorMapPrefixSuffix() {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"name\", \"commons\");\n        StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\");\n        assertEquals(\"Hi < commons\", sub.replace(\"Hi $< <name>\"));\n    }",
        "begin_line": 291,
        "end_line": 296,
        "comment": "\n     * Tests constructor.\n     ",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 64)",
            "(line 293,col 9)-(line 293,col 35)",
            "(line 294,col 9)-(line 294,col 63)",
            "(line 295,col 9)-(line 295,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull()",
        "snippet": "    public void testConstructorMapFull() {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"name\", \"commons\");\n        StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\", '!');\n        assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name>\"));\n    }",
        "begin_line": 301,
        "end_line": 306,
        "comment": "\n     * Tests constructor.\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 64)",
            "(line 303,col 9)-(line 303,col 35)",
            "(line 304,col 9)-(line 304,col 68)",
            "(line 305,col 9)-(line 305,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetEscape()",
        "snippet": "    public void testGetSetEscape() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals('$', sub.getEscapeChar());\n        sub.setEscapeChar('<');\n        assertEquals('<', sub.getEscapeChar());\n    }",
        "begin_line": 312,
        "end_line": 317,
        "comment": "\n     * Tests get set.\n     ",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 50)",
            "(line 314,col 9)-(line 314,col 47)",
            "(line 315,col 9)-(line 315,col 31)",
            "(line 316,col 9)-(line 316,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetPrefix()",
        "snippet": "    public void testGetSetPrefix() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n        sub.setVariablePrefix('<');\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);\n        \n        sub.setVariablePrefix(\"<<\");\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n        try {\n            sub.setVariablePrefix((String) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n        \n        StrMatcher matcher = StrMatcher.commaMatcher();\n        sub.setVariablePrefixMatcher(matcher);\n        assertSame(matcher, sub.getVariablePrefixMatcher());\n        try {\n            sub.setVariablePrefixMatcher((StrMatcher) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertSame(matcher, sub.getVariablePrefixMatcher());\n    }",
        "begin_line": 322,
        "end_line": 348,
        "comment": "\n     * Tests get set.\n     ",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 50)",
            "(line 324,col 9)-(line 324,col 95)",
            "(line 325,col 9)-(line 325,col 35)",
            "(line 326,col 9)-(line 326,col 93)",
            "(line 328,col 9)-(line 328,col 36)",
            "(line 329,col 9)-(line 329,col 95)",
            "(line 330,col 9)-(line 335,col 9)",
            "(line 336,col 9)-(line 336,col 95)",
            "(line 338,col 9)-(line 338,col 55)",
            "(line 339,col 9)-(line 339,col 46)",
            "(line 340,col 9)-(line 340,col 60)",
            "(line 341,col 9)-(line 346,col 9)",
            "(line 347,col 9)-(line 347,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetSuffix()",
        "snippet": "    public void testGetSetSuffix() {\n        StrSubstitutor sub = new StrSubstitutor();\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n        sub.setVariableSuffix('<');\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);\n        \n        sub.setVariableSuffix(\"<<\");\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n        try {\n            sub.setVariableSuffix((String) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n        \n        StrMatcher matcher = StrMatcher.commaMatcher();\n        sub.setVariableSuffixMatcher(matcher);\n        assertSame(matcher, sub.getVariableSuffixMatcher());\n        try {\n            sub.setVariableSuffixMatcher((StrMatcher) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        assertSame(matcher, sub.getVariableSuffixMatcher());\n    }",
        "begin_line": 353,
        "end_line": 379,
        "comment": "\n     * Tests get set.\n     ",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 50)",
            "(line 355,col 9)-(line 355,col 95)",
            "(line 356,col 9)-(line 356,col 35)",
            "(line 357,col 9)-(line 357,col 93)",
            "(line 359,col 9)-(line 359,col 36)",
            "(line 360,col 9)-(line 360,col 95)",
            "(line 361,col 9)-(line 366,col 9)",
            "(line 367,col 9)-(line 367,col 95)",
            "(line 369,col 9)-(line 369,col 55)",
            "(line 370,col 9)-(line 370,col 46)",
            "(line 371,col 9)-(line 371,col 60)",
            "(line 372,col 9)-(line 377,col 9)",
            "(line 378,col 9)-(line 378,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace()",
        "snippet": "    public void testStaticReplace() {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"name\", \"commons\");\n        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\n    }",
        "begin_line": 385,
        "end_line": 389,
        "comment": "\n     * Tests static.\n     ",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 64)",
            "(line 387,col 9)-(line 387,col 35)",
            "(line 388,col 9)-(line 388,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()",
        "snippet": "    public void testStaticReplacePrefixSuffix() {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"name\", \"commons\");\n        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\n    }",
        "begin_line": 394,
        "end_line": 398,
        "comment": "\n     * Tests static.\n     ",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 64)",
            "(line 396,col 9)-(line 396,col 35)",
            "(line 397,col 9)-(line 397,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties()",
        "snippet": "    public void testStaticReplaceSystemProperties() {\n        StrBuilder buf = new StrBuilder();\n        buf.append(\"Hi \").append(System.getProperty(\"user.name\"));\n        buf.append(\", you are working with \");\n        buf.append(System.getProperty(\"os.name\"));\n        buf.append(\", your home directory is \");\n        buf.append(System.getProperty(\"user.home\")).append('.');\n        assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \"\n            + \"working with ${os.name}, your home \"\n            + \"directory is ${user.home}.\"));\n    }",
        "begin_line": 403,
        "end_line": 413,
        "comment": "\n     * Tests interpolation with system properties.\n     ",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 42)",
            "(line 405,col 9)-(line 405,col 66)",
            "(line 406,col 9)-(line 406,col 46)",
            "(line 407,col 9)-(line 407,col 50)",
            "(line 408,col 9)-(line 408,col 48)",
            "(line 409,col 9)-(line 409,col 64)",
            "(line 410,col 9)-(line 412,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.doTestReplace(java.lang.String, java.lang.String, boolean)",
        "snippet": "    private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {\n        String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);\n        StrSubstitutor sub = new StrSubstitutor(values);\n        \n        // replace using String\n        assertEquals(expectedResult, sub.replace(replaceTemplate));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));\n        }\n        \n        // replace using char[]\n        char[] chars = replaceTemplate.toCharArray();\n        assertEquals(expectedResult, sub.replace(chars));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));\n        }\n        \n        // replace using StringBuffer\n        StringBuffer buf = new StringBuffer(replaceTemplate);\n        assertEquals(expectedResult, sub.replace(buf));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));\n        }\n        \n        // replace using StrBuilder\n        StrBuilder bld = new StrBuilder(replaceTemplate);\n        assertEquals(expectedResult, sub.replace(bld));\n        if (substring) {\n            assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));\n        }\n        \n        // replace using object\n        MutableObject<String> obj = new MutableObject<String>(replaceTemplate);  // toString returns template\n        assertEquals(expectedResult, sub.replace(obj));\n        \n        // replace in StringBuffer\n        buf = new StringBuffer(replaceTemplate);\n        assertEquals(true, sub.replaceIn(buf));\n        assertEquals(expectedResult, buf.toString());\n        if (substring) {\n            buf = new StringBuffer(replaceTemplate);\n            assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));\n            assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched\n        }\n        \n        // replace in StrBuilder\n        bld = new StrBuilder(replaceTemplate);\n        assertEquals(true, sub.replaceIn(bld));\n        assertEquals(expectedResult, bld.toString());\n        if (substring) {\n            bld = new StrBuilder(replaceTemplate);\n            assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));\n            assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched\n        }\n    }",
        "begin_line": 416,
        "end_line": 470,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 94)",
            "(line 418,col 9)-(line 418,col 56)",
            "(line 421,col 9)-(line 421,col 67)",
            "(line 422,col 9)-(line 424,col 9)",
            "(line 427,col 9)-(line 427,col 53)",
            "(line 428,col 9)-(line 428,col 57)",
            "(line 429,col 9)-(line 431,col 9)",
            "(line 434,col 9)-(line 434,col 61)",
            "(line 435,col 9)-(line 435,col 55)",
            "(line 436,col 9)-(line 438,col 9)",
            "(line 441,col 9)-(line 441,col 57)",
            "(line 442,col 9)-(line 442,col 55)",
            "(line 443,col 9)-(line 445,col 9)",
            "(line 448,col 9)-(line 448,col 79)",
            "(line 449,col 9)-(line 449,col 55)",
            "(line 452,col 9)-(line 452,col 48)",
            "(line 453,col 9)-(line 453,col 47)",
            "(line 454,col 9)-(line 454,col 53)",
            "(line 455,col 9)-(line 459,col 9)",
            "(line 462,col 9)-(line 462,col 46)",
            "(line 463,col 9)-(line 463,col 47)",
            "(line 464,col 9)-(line 464,col 53)",
            "(line 465,col 9)-(line 469,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrSubstitutorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java",
        "signature": "org.apache.commons.lang3.text.StrSubstitutorTest.doTestNoReplace(java.lang.String)",
        "snippet": "    private void doTestNoReplace(String replaceTemplate) {\n        StrSubstitutor sub = new StrSubstitutor(values);\n        \n        if (replaceTemplate == null) {\n            assertEquals(null, sub.replace((String) null));\n            assertEquals(null, sub.replace((String) null, 0, 100));\n            assertEquals(null, sub.replace((char[]) null));\n            assertEquals(null, sub.replace((char[]) null, 0, 100));\n            assertEquals(null, sub.replace((StringBuffer) null));\n            assertEquals(null, sub.replace((StringBuffer) null, 0, 100));\n            assertEquals(null, sub.replace((StrBuilder) null));\n            assertEquals(null, sub.replace((StrBuilder) null, 0, 100));\n            assertEquals(null, sub.replace((Object) null));\n            assertEquals(false, sub.replaceIn((StringBuffer) null));\n            assertEquals(false, sub.replaceIn((StringBuffer) null, 0, 100));\n            assertEquals(false, sub.replaceIn((StrBuilder) null));\n            assertEquals(false, sub.replaceIn((StrBuilder) null, 0, 100));\n        } else {\n            assertEquals(replaceTemplate, sub.replace(replaceTemplate));\n            StrBuilder bld = new StrBuilder(replaceTemplate);\n            assertEquals(false, sub.replaceIn(bld));\n            assertEquals(replaceTemplate, bld.toString());\n        }\n    }",
        "begin_line": 472,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 56)",
            "(line 475,col 9)-(line 494,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.StrMatcherTest(java.lang.String)",
        "snippet": "    public StrMatcherTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name  the name\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testCommaMatcher()",
        "snippet": "    public void testCommaMatcher() {\n        StrMatcher matcher = StrMatcher.commaMatcher();\n        assertSame(matcher, StrMatcher.commaMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 0));\n        assertEquals(1, matcher.isMatch(BUFFER1, 1));\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n    }",
        "begin_line": 43,
        "end_line": 49,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 55)",
            "(line 45,col 9)-(line 45,col 55)",
            "(line 46,col 9)-(line 46,col 53)",
            "(line 47,col 9)-(line 47,col 53)",
            "(line 48,col 9)-(line 48,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testTabMatcher()",
        "snippet": "    public void testTabMatcher() {\n        StrMatcher matcher = StrMatcher.tabMatcher();\n        assertSame(matcher, StrMatcher.tabMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n    }",
        "begin_line": 52,
        "end_line": 58,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 53)",
            "(line 56,col 9)-(line 56,col 53)",
            "(line 57,col 9)-(line 57,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testSpaceMatcher()",
        "snippet": "    public void testSpaceMatcher() {\n        StrMatcher matcher = StrMatcher.spaceMatcher();\n        assertSame(matcher, StrMatcher.spaceMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n    }",
        "begin_line": 61,
        "end_line": 67,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 55)",
            "(line 63,col 9)-(line 63,col 55)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 66,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testSplitMatcher()",
        "snippet": "    public void testSplitMatcher() {\n        StrMatcher matcher = StrMatcher.splitMatcher();\n        assertSame(matcher, StrMatcher.splitMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n        assertEquals(1, matcher.isMatch(BUFFER1, 7));\n        assertEquals(1, matcher.isMatch(BUFFER1, 8));\n        assertEquals(1, matcher.isMatch(BUFFER1, 9));\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n    }",
        "begin_line": 70,
        "end_line": 82,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 55)",
            "(line 72,col 9)-(line 72,col 55)",
            "(line 73,col 9)-(line 73,col 53)",
            "(line 74,col 9)-(line 74,col 53)",
            "(line 75,col 9)-(line 75,col 53)",
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 53)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 79,col 53)",
            "(line 80,col 9)-(line 80,col 53)",
            "(line 81,col 9)-(line 81,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testTrimMatcher()",
        "snippet": "    public void testTrimMatcher() {\n        StrMatcher matcher = StrMatcher.trimMatcher();\n        assertSame(matcher, StrMatcher.trimMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n        assertEquals(1, matcher.isMatch(BUFFER1, 7));\n        assertEquals(1, matcher.isMatch(BUFFER1, 8));\n        assertEquals(1, matcher.isMatch(BUFFER1, 9));\n        assertEquals(1, matcher.isMatch(BUFFER1, 10));\n    }",
        "begin_line": 85,
        "end_line": 97,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 87,col 54)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 90,col 53)",
            "(line 91,col 9)-(line 91,col 53)",
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testSingleQuoteMatcher()",
        "snippet": "    public void testSingleQuoteMatcher() {\n        StrMatcher matcher = StrMatcher.singleQuoteMatcher();\n        assertSame(matcher, StrMatcher.singleQuoteMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n        assertEquals(1, matcher.isMatch(BUFFER1, 11));\n        assertEquals(0, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 100,
        "end_line": 106,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 61)",
            "(line 102,col 9)-(line 102,col 61)",
            "(line 103,col 9)-(line 103,col 54)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testDoubleQuoteMatcher()",
        "snippet": "    public void testDoubleQuoteMatcher() {\n        StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\n        assertSame(matcher, StrMatcher.doubleQuoteMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 11));\n        assertEquals(1, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 109,
        "end_line": 114,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 61)",
            "(line 111,col 9)-(line 111,col 61)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 113,col 9)-(line 113,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testQuoteMatcher()",
        "snippet": "    public void testQuoteMatcher() {\n        StrMatcher matcher = StrMatcher.quoteMatcher();\n        assertSame(matcher, StrMatcher.quoteMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n        assertEquals(1, matcher.isMatch(BUFFER1, 11));\n        assertEquals(1, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 117,
        "end_line": 123,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 55)",
            "(line 119,col 9)-(line 119,col 55)",
            "(line 120,col 9)-(line 120,col 54)",
            "(line 121,col 9)-(line 121,col 54)",
            "(line 122,col 9)-(line 122,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testNoneMatcher()",
        "snippet": "    public void testNoneMatcher() {\n        StrMatcher matcher = StrMatcher.noneMatcher();\n        assertSame(matcher, StrMatcher.noneMatcher());\n        assertEquals(0, matcher.isMatch(BUFFER1, 0));\n        assertEquals(0, matcher.isMatch(BUFFER1, 1));\n        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n        assertEquals(0, matcher.isMatch(BUFFER1, 3));\n        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n        assertEquals(0, matcher.isMatch(BUFFER1, 5));\n        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n        assertEquals(0, matcher.isMatch(BUFFER1, 7));\n        assertEquals(0, matcher.isMatch(BUFFER1, 8));\n        assertEquals(0, matcher.isMatch(BUFFER1, 9));\n        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n        assertEquals(0, matcher.isMatch(BUFFER1, 11));\n        assertEquals(0, matcher.isMatch(BUFFER1, 12));\n    }",
        "begin_line": 126,
        "end_line": 142,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 54)",
            "(line 128,col 9)-(line 128,col 54)",
            "(line 129,col 9)-(line 129,col 53)",
            "(line 130,col 9)-(line 130,col 53)",
            "(line 131,col 9)-(line 131,col 53)",
            "(line 132,col 9)-(line 132,col 53)",
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 53)",
            "(line 135,col 9)-(line 135,col 53)",
            "(line 136,col 9)-(line 136,col 53)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 53)",
            "(line 139,col 9)-(line 139,col 54)",
            "(line 140,col 9)-(line 140,col 54)",
            "(line 141,col 9)-(line 141,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testCharMatcher_char()",
        "snippet": "    public void testCharMatcher_char() {\n        StrMatcher matcher = StrMatcher.charMatcher('c');\n        assertEquals(0, matcher.isMatch(BUFFER2, 0));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(0, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n    }",
        "begin_line": 145,
        "end_line": 153,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 57)",
            "(line 147,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 148,col 53)",
            "(line 149,col 9)-(line 149,col 53)",
            "(line 150,col 9)-(line 150,col 53)",
            "(line 151,col 9)-(line 151,col 53)",
            "(line 152,col 9)-(line 152,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_String()",
        "snippet": "    public void testCharSetMatcher_String() {\n        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\n        assertEquals(1, matcher.isMatch(BUFFER2, 0));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(1, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(\"\"));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));\n        assertTrue(StrMatcher.charSetMatcher(\"a\") instanceof StrMatcher.CharMatcher);\n    }",
        "begin_line": 156,
        "end_line": 167,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 62)",
            "(line 158,col 9)-(line 158,col 53)",
            "(line 159,col 9)-(line 159,col 53)",
            "(line 160,col 9)-(line 160,col 53)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 162,col 9)-(line 162,col 53)",
            "(line 163,col 9)-(line 163,col 53)",
            "(line 164,col 9)-(line 164,col 76)",
            "(line 165,col 9)-(line 165,col 87)",
            "(line 166,col 9)-(line 166,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_charArray()",
        "snippet": "    public void testCharSetMatcher_charArray() {\n        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\n        assertEquals(1, matcher.isMatch(BUFFER2, 0));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(1, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0]));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));\n        assertTrue(StrMatcher.charSetMatcher(\"a\".toCharArray()) instanceof StrMatcher.CharMatcher);\n    }",
        "begin_line": 170,
        "end_line": 181,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 76)",
            "(line 172,col 9)-(line 172,col 53)",
            "(line 173,col 9)-(line 173,col 53)",
            "(line 174,col 9)-(line 174,col 53)",
            "(line 175,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 53)",
            "(line 177,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 85)",
            "(line 179,col 9)-(line 179,col 87)",
            "(line 180,col 9)-(line 180,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String()",
        "snippet": "    public void testStringMatcher_String() {\n        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n        assertEquals(0, matcher.isMatch(BUFFER2, 0));\n        assertEquals(2, matcher.isMatch(BUFFER2, 1));\n        assertEquals(0, matcher.isMatch(BUFFER2, 2));\n        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n        assertEquals(0, matcher.isMatch(BUFFER2, 4));\n        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(\"\"));\n        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null));\n    }",
        "begin_line": 184,
        "end_line": 194,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 186,col 53)",
            "(line 187,col 9)-(line 187,col 53)",
            "(line 188,col 9)-(line 188,col 53)",
            "(line 189,col 9)-(line 189,col 53)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 53)",
            "(line 192,col 9)-(line 192,col 75)",
            "(line 193,col 9)-(line 193,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrMatcherTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java",
        "signature": "org.apache.commons.lang3.text.StrMatcherTest.testMatcherIndices()",
        "snippet": "    public void testMatcherIndices() {\n        // remember that the API contract is tight for the isMatch() method\n        // all the onus is on the caller, so invalid inputs are not\n        // the concern of StrMatcher, and are not bugs\n        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n        assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));\n        assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));\n        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));\n    }",
        "begin_line": 197,
        "end_line": 205,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 60)",
            "(line 202,col 9)-(line 202,col 72)",
            "(line 203,col 9)-(line 203,col 59)",
            "(line 204,col 9)-(line 204,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.StrBuilderTest(java.lang.String)",
        "snippet": "    public StrBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Create a new test case with the specified name.\n     * \n     * @param name\n     *            name\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        StrBuilder sb0 = new StrBuilder();\n        assertEquals(32, sb0.capacity());\n        assertEquals(0, sb0.length());\n        assertEquals(0, sb0.size());\n\n        StrBuilder sb1 = new StrBuilder(32);\n        assertEquals(32, sb1.capacity());\n        assertEquals(0, sb1.length());\n        assertEquals(0, sb1.size());\n\n        StrBuilder sb2 = new StrBuilder(0);\n        assertEquals(32, sb2.capacity());\n        assertEquals(0, sb2.length());\n        assertEquals(0, sb2.size());\n\n        StrBuilder sb3 = new StrBuilder(-1);\n        assertEquals(32, sb3.capacity());\n        assertEquals(0, sb3.length());\n        assertEquals(0, sb3.size());\n\n        StrBuilder sb4 = new StrBuilder(1);\n        assertEquals(1, sb4.capacity());\n        assertEquals(0, sb4.length());\n        assertEquals(0, sb4.size());\n\n        StrBuilder sb5 = new StrBuilder((String) null);\n        assertEquals(32, sb5.capacity());\n        assertEquals(0, sb5.length());\n        assertEquals(0, sb5.size());\n\n        StrBuilder sb6 = new StrBuilder(\"\");\n        assertEquals(32, sb6.capacity());\n        assertEquals(0, sb6.length());\n        assertEquals(0, sb6.size());\n\n        StrBuilder sb7 = new StrBuilder(\"foo\");\n        assertEquals(35, sb7.capacity());\n        assertEquals(3, sb7.length());\n        assertEquals(3, sb7.size());\n    }",
        "begin_line": 47,
        "end_line": 87,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 42)",
            "(line 49,col 9)-(line 49,col 41)",
            "(line 50,col 9)-(line 50,col 38)",
            "(line 51,col 9)-(line 51,col 36)",
            "(line 53,col 9)-(line 53,col 44)",
            "(line 54,col 9)-(line 54,col 41)",
            "(line 55,col 9)-(line 55,col 38)",
            "(line 56,col 9)-(line 56,col 36)",
            "(line 58,col 9)-(line 58,col 43)",
            "(line 59,col 9)-(line 59,col 41)",
            "(line 60,col 9)-(line 60,col 38)",
            "(line 61,col 9)-(line 61,col 36)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 41)",
            "(line 65,col 9)-(line 65,col 38)",
            "(line 66,col 9)-(line 66,col 36)",
            "(line 68,col 9)-(line 68,col 43)",
            "(line 69,col 9)-(line 69,col 40)",
            "(line 70,col 9)-(line 70,col 38)",
            "(line 71,col 9)-(line 71,col 36)",
            "(line 73,col 9)-(line 73,col 55)",
            "(line 74,col 9)-(line 74,col 41)",
            "(line 75,col 9)-(line 75,col 38)",
            "(line 76,col 9)-(line 76,col 36)",
            "(line 78,col 9)-(line 78,col 44)",
            "(line 79,col 9)-(line 79,col 41)",
            "(line 80,col 9)-(line 80,col 38)",
            "(line 81,col 9)-(line 81,col 36)",
            "(line 83,col 9)-(line 83,col 47)",
            "(line 84,col 9)-(line 84,col 41)",
            "(line 85,col 9)-(line 85,col 38)",
            "(line 86,col 9)-(line 86,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testChaining()",
        "snippet": "    public void testChaining() {\n        StrBuilder sb = new StrBuilder();\n        assertSame(sb, sb.setNewLineText(null));\n        assertSame(sb, sb.setNullText(null));\n        assertSame(sb, sb.setLength(1));\n        assertSame(sb, sb.setCharAt(0, 'a'));\n        assertSame(sb, sb.ensureCapacity(0));\n        assertSame(sb, sb.minimizeCapacity());\n        assertSame(sb, sb.clear());\n        assertSame(sb, sb.reverse());\n        assertSame(sb, sb.trim());\n    }",
        "begin_line": 90,
        "end_line": 101,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 41)",
            "(line 92,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 46)",
            "(line 98,col 9)-(line 98,col 35)",
            "(line 99,col 9)-(line 99,col 37)",
            "(line 100,col 9)-(line 100,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetSetNewLineText()",
        "snippet": "    public void testGetSetNewLineText() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(null, sb.getNewLineText());\n\n        sb.setNewLineText(\"#\");\n        assertEquals(\"#\", sb.getNewLineText());\n\n        sb.setNewLineText(\"\");\n        assertEquals(\"\", sb.getNewLineText());\n\n        sb.setNewLineText((String) null);\n        assertEquals(null, sb.getNewLineText());\n    }",
        "begin_line": 104,
        "end_line": 116,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 41)",
            "(line 106,col 9)-(line 106,col 48)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 109,col 9)-(line 109,col 47)",
            "(line 111,col 9)-(line 111,col 30)",
            "(line 112,col 9)-(line 112,col 46)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetSetNullText()",
        "snippet": "    public void testGetSetNullText() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"null\");\n        assertEquals(\"null\", sb.getNullText());\n\n        sb.setNullText(\"\");\n        assertEquals(null, sb.getNullText());\n\n        sb.setNullText(\"NULL\");\n        assertEquals(\"NULL\", sb.getNullText());\n\n        sb.setNullText((String) null);\n        assertEquals(null, sb.getNullText());\n    }",
        "begin_line": 119,
        "end_line": 134,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 41)",
            "(line 121,col 9)-(line 121,col 45)",
            "(line 123,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 126,col 9)-(line 126,col 27)",
            "(line 127,col 9)-(line 127,col 45)",
            "(line 129,col 9)-(line 129,col 31)",
            "(line 130,col 9)-(line 130,col 47)",
            "(line 132,col 9)-(line 132,col 38)",
            "(line 133,col 9)-(line 133,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength()",
        "snippet": "    public void testCapacityAndLength() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(32, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.ensureCapacity(32);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"foo\");\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(3, sb.length());\n        assertEquals(3, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.clear();\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n\n        sb.append(\"123456789012345678901234567890123\");\n        assertTrue(sb.capacity() > 32);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.ensureCapacity(16);\n        assertTrue(sb.capacity() > 16);\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.minimizeCapacity();\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n\n        sb.setLength(33);\n        assertEquals(33, sb.capacity());\n        assertEquals(33, sb.length());\n        assertEquals(33, sb.size());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(16);\n        assertTrue(sb.capacity() >= 16);\n        assertEquals(16, sb.length());\n        assertEquals(16, sb.size());\n        assertEquals(\"1234567890123456\", sb.toString());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(32);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(32, sb.length());\n        assertEquals(32, sb.size());\n        assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\n        assertTrue(sb.isEmpty() == false);\n\n        sb.setLength(0);\n        assertTrue(sb.capacity() >= 32);\n        assertEquals(0, sb.length());\n        assertEquals(0, sb.size());\n        assertTrue(sb.isEmpty());\n    }",
        "begin_line": 137,
        "end_line": 218,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 41)",
            "(line 139,col 9)-(line 139,col 40)",
            "(line 140,col 9)-(line 140,col 37)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 144,col 9)-(line 144,col 30)",
            "(line 145,col 9)-(line 145,col 39)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 35)",
            "(line 148,col 9)-(line 148,col 33)",
            "(line 150,col 9)-(line 150,col 30)",
            "(line 151,col 9)-(line 151,col 40)",
            "(line 152,col 9)-(line 152,col 37)",
            "(line 153,col 9)-(line 153,col 35)",
            "(line 154,col 9)-(line 154,col 33)",
            "(line 156,col 9)-(line 156,col 25)",
            "(line 157,col 9)-(line 157,col 40)",
            "(line 158,col 9)-(line 158,col 37)",
            "(line 159,col 9)-(line 159,col 35)",
            "(line 160,col 9)-(line 160,col 42)",
            "(line 162,col 9)-(line 162,col 19)",
            "(line 163,col 9)-(line 163,col 40)",
            "(line 164,col 9)-(line 164,col 37)",
            "(line 165,col 9)-(line 165,col 35)",
            "(line 166,col 9)-(line 166,col 33)",
            "(line 168,col 9)-(line 168,col 55)",
            "(line 169,col 9)-(line 169,col 39)",
            "(line 170,col 9)-(line 170,col 38)",
            "(line 171,col 9)-(line 171,col 36)",
            "(line 172,col 9)-(line 172,col 42)",
            "(line 174,col 9)-(line 174,col 30)",
            "(line 175,col 9)-(line 175,col 39)",
            "(line 176,col 9)-(line 176,col 38)",
            "(line 177,col 9)-(line 177,col 36)",
            "(line 178,col 9)-(line 178,col 42)",
            "(line 180,col 9)-(line 180,col 30)",
            "(line 181,col 9)-(line 181,col 40)",
            "(line 182,col 9)-(line 182,col 38)",
            "(line 183,col 9)-(line 183,col 36)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 186,col 9)-(line 191,col 9)",
            "(line 193,col 9)-(line 193,col 25)",
            "(line 194,col 9)-(line 194,col 40)",
            "(line 195,col 9)-(line 195,col 38)",
            "(line 196,col 9)-(line 196,col 36)",
            "(line 197,col 9)-(line 197,col 42)",
            "(line 199,col 9)-(line 199,col 25)",
            "(line 200,col 9)-(line 200,col 40)",
            "(line 201,col 9)-(line 201,col 38)",
            "(line 202,col 9)-(line 202,col 36)",
            "(line 203,col 9)-(line 203,col 56)",
            "(line 204,col 9)-(line 204,col 42)",
            "(line 206,col 9)-(line 206,col 25)",
            "(line 207,col 9)-(line 207,col 40)",
            "(line 208,col 9)-(line 208,col 38)",
            "(line 209,col 9)-(line 209,col 36)",
            "(line 210,col 9)-(line 210,col 88)",
            "(line 211,col 9)-(line 211,col 42)",
            "(line 213,col 9)-(line 213,col 24)",
            "(line 214,col 9)-(line 214,col 40)",
            "(line 215,col 9)-(line 215,col 37)",
            "(line 216,col 9)-(line 216,col 35)",
            "(line 217,col 9)-(line 217,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLength()",
        "snippet": "    public void testLength() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(0, sb.length());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.length());\n    }",
        "begin_line": 221,
        "end_line": 227,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 41)",
            "(line 223,col 9)-(line 223,col 37)",
            "(line 225,col 9)-(line 225,col 27)",
            "(line 226,col 9)-(line 226,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSetLength()",
        "snippet": "    public void testSetLength() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"Hello\");\n        sb.setLength(2);  // shorten\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(2);  // no change\n        assertEquals(\"He\", sb.toString());\n        sb.setLength(3);  // lengthen\n        assertEquals(\"He\\0\", sb.toString());\n\n        try {\n            sb.setLength(-1);\n            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n    }",
        "begin_line": 229,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 41)",
            "(line 231,col 9)-(line 231,col 27)",
            "(line 232,col 9)-(line 232,col 24)",
            "(line 233,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 234,col 24)",
            "(line 235,col 9)-(line 235,col 42)",
            "(line 236,col 9)-(line 236,col 24)",
            "(line 237,col 9)-(line 237,col 44)",
            "(line 239,col 9)-(line 244,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testCapacity()",
        "snippet": "    public void testCapacity() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(sb.buffer.length, sb.capacity());\n        \n        sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n        assertEquals(sb.buffer.length, sb.capacity());\n    }",
        "begin_line": 248,
        "end_line": 254,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 41)",
            "(line 250,col 9)-(line 250,col 54)",
            "(line 252,col 9)-(line 252,col 62)",
            "(line 253,col 9)-(line 253,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity()",
        "snippet": "    public void testEnsureCapacity() {\n        StrBuilder sb = new StrBuilder();\n        sb.ensureCapacity(2);\n        assertEquals(true, sb.capacity() >= 2);\n        \n        sb.ensureCapacity(-1);\n        assertEquals(true, sb.capacity() >= 0);\n        \n        sb.append(\"HelloWorld\");\n        sb.ensureCapacity(40);\n        assertEquals(true, sb.capacity() >= 40);\n    }",
        "begin_line": 256,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 41)",
            "(line 258,col 9)-(line 258,col 29)",
            "(line 259,col 9)-(line 259,col 47)",
            "(line 261,col 9)-(line 261,col 30)",
            "(line 262,col 9)-(line 262,col 47)",
            "(line 264,col 9)-(line 264,col 32)",
            "(line 265,col 9)-(line 265,col 30)",
            "(line 266,col 9)-(line 266,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testMinimizeCapacity()",
        "snippet": "    public void testMinimizeCapacity() {\n        StrBuilder sb = new StrBuilder();\n        sb.minimizeCapacity();\n        assertEquals(0, sb.capacity());\n        \n        sb.append(\"HelloWorld\");\n        sb.minimizeCapacity();\n        assertEquals(10, sb.capacity());\n    }",
        "begin_line": 269,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 41)",
            "(line 271,col 9)-(line 271,col 30)",
            "(line 272,col 9)-(line 272,col 39)",
            "(line 274,col 9)-(line 274,col 32)",
            "(line 275,col 9)-(line 275,col 30)",
            "(line 276,col 9)-(line 276,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSize()",
        "snippet": "    public void testSize() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(0, sb.size());\n        \n        sb.append(\"Hello\");\n        assertEquals(5, sb.size());\n    }",
        "begin_line": 280,
        "end_line": 286,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 41)",
            "(line 282,col 9)-(line 282,col 35)",
            "(line 284,col 9)-(line 284,col 27)",
            "(line 285,col 9)-(line 285,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIsEmpty()",
        "snippet": "    public void testIsEmpty() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(true, sb.isEmpty());\n        \n        sb.append(\"Hello\");\n        assertEquals(false, sb.isEmpty());\n        \n        sb.clear();\n        assertEquals(true, sb.isEmpty());\n    }",
        "begin_line": 288,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 41)",
            "(line 290,col 9)-(line 290,col 41)",
            "(line 292,col 9)-(line 292,col 27)",
            "(line 293,col 9)-(line 293,col 42)",
            "(line 295,col 9)-(line 295,col 19)",
            "(line 296,col 9)-(line 296,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testClear()",
        "snippet": "    public void testClear() {\n        StrBuilder sb = new StrBuilder();\n        sb.append(\"Hello\");\n        sb.clear();\n        assertEquals(0, sb.length());\n        assertEquals(true, sb.buffer.length >= 5);\n    }",
        "begin_line": 299,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 41)",
            "(line 301,col 9)-(line 301,col 27)",
            "(line 302,col 9)-(line 302,col 19)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testCharAt()",
        "snippet": "    public void testCharAt() {\n        StrBuilder sb = new StrBuilder();\n        try {\n            sb.charAt(0);\n            fail(\"charAt(0) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        assertEquals('f', sb.charAt(0));\n        assertEquals('o', sb.charAt(1));\n        assertEquals('o', sb.charAt(2));\n        try {\n            sb.charAt(-1);\n            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.charAt(3);\n            fail(\"charAt(3) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n    }",
        "begin_line": 308,
        "end_line": 338,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 41)",
            "(line 310,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 321,col 9)",
            "(line 322,col 9)-(line 322,col 25)",
            "(line 323,col 9)-(line 323,col 40)",
            "(line 324,col 9)-(line 324,col 40)",
            "(line 325,col 9)-(line 325,col 40)",
            "(line 326,col 9)-(line 331,col 9)",
            "(line 332,col 9)-(line 337,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSetCharAt()",
        "snippet": "    public void testSetCharAt() {\n        StrBuilder sb = new StrBuilder();\n        try {\n            sb.setCharAt(0, 'f');\n            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        try {\n            sb.setCharAt(-1, 'f');\n            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        sb.append(\"foo\");\n        sb.setCharAt(0, 'b');\n        sb.setCharAt(1, 'a');\n        sb.setCharAt(2, 'r');\n        try {\n            sb.setCharAt(3, '!');\n            fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {\n            // expected\n        }\n        assertEquals(\"bar\", sb.toString());\n    }",
        "begin_line": 341,
        "end_line": 366,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 41)",
            "(line 343,col 9)-(line 348,col 9)",
            "(line 349,col 9)-(line 354,col 9)",
            "(line 355,col 9)-(line 355,col 25)",
            "(line 356,col 9)-(line 356,col 29)",
            "(line 357,col 9)-(line 357,col 29)",
            "(line 358,col 9)-(line 358,col 29)",
            "(line 359,col 9)-(line 364,col 9)",
            "(line 365,col 9)-(line 365,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteCharAt()",
        "snippet": "    public void testDeleteCharAt() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.deleteCharAt(0);\n        assertEquals(\"bc\", sb.toString()); \n        \n        try {\n            sb.deleteCharAt(1000);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 369,
        "end_line": 378,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 46)",
            "(line 371,col 9)-(line 371,col 27)",
            "(line 372,col 9)-(line 372,col 42)",
            "(line 374,col 9)-(line 377,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToCharArray()",
        "snippet": "    public void testToCharArray() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n\n        char[] a = sb.toCharArray();\n        assertNotNull(\"toCharArray() result is null\", a);\n        assertEquals(\"toCharArray() result is too large\", 0, a.length);\n\n        sb.append(\"junit\");\n        a = sb.toCharArray();\n        assertEquals(\"toCharArray() result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n    }",
        "begin_line": 381,
        "end_line": 393,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 41)",
            "(line 383,col 9)-(line 383,col 68)",
            "(line 385,col 9)-(line 385,col 36)",
            "(line 386,col 9)-(line 386,col 57)",
            "(line 387,col 9)-(line 387,col 71)",
            "(line 389,col 9)-(line 389,col 27)",
            "(line 390,col 9)-(line 390,col 29)",
            "(line 391,col 9)-(line 391,col 75)",
            "(line 392,col 9)-(line 392,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt()",
        "snippet": "    public void testToCharArrayIntInt() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n\n        sb.append(\"junit\");\n        char[] a = sb.toCharArray(0, 20); // too large test\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 5, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 4);\n        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n\n        a = sb.toCharArray(0, 1);\n        assertNotNull(\"toCharArray(int,int) result is null\", a);\n\n        try {\n            sb.toCharArray(-1, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n\n        try {\n            sb.toCharArray(6, 5);\n            fail(\"no string index out of bound on -1\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n    }",
        "begin_line": 395,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 41)",
            "(line 397,col 9)-(line 397,col 72)",
            "(line 399,col 9)-(line 399,col 27)",
            "(line 400,col 9)-(line 400,col 41)",
            "(line 401,col 9)-(line 401,col 82)",
            "(line 402,col 9)-(line 402,col 106)",
            "(line 404,col 9)-(line 404,col 33)",
            "(line 405,col 9)-(line 405,col 82)",
            "(line 406,col 9)-(line 406,col 105)",
            "(line 408,col 9)-(line 408,col 33)",
            "(line 409,col 9)-(line 409,col 82)",
            "(line 410,col 9)-(line 410,col 105)",
            "(line 412,col 9)-(line 412,col 33)",
            "(line 413,col 9)-(line 413,col 64)",
            "(line 415,col 9)-(line 419,col 9)",
            "(line 421,col 9)-(line 425,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetChars()",
        "snippet": "    public void testGetChars ( ) {\n        StrBuilder sb = new StrBuilder();\n        \n        char[] input = new char[10];\n        char[] a = sb.getChars(input);\n        assertSame (input, a);\n        assertTrue(Arrays.equals(new char[10], a));\n        \n        sb.append(\"junit\");\n        a = sb.getChars(input);\n        assertSame(input, a);\n        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n        \n        a = sb.getChars(null);\n        assertNotSame(input,a);\n        assertEquals(5,a.length);\n        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n        \n        input = new char[5];\n        a = sb.getChars(input);\n        assertSame(input, a);\n        \n        input = new char[4];\n        a = sb.getChars(input);\n        assertNotSame(input, a);\n    }",
        "begin_line": 428,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 41)",
            "(line 431,col 9)-(line 431,col 36)",
            "(line 432,col 9)-(line 432,col 38)",
            "(line 433,col 9)-(line 433,col 30)",
            "(line 434,col 9)-(line 434,col 51)",
            "(line 436,col 9)-(line 436,col 27)",
            "(line 437,col 9)-(line 437,col 31)",
            "(line 438,col 9)-(line 438,col 29)",
            "(line 439,col 9)-(line 439,col 80)",
            "(line 441,col 9)-(line 441,col 30)",
            "(line 442,col 9)-(line 442,col 31)",
            "(line 443,col 9)-(line 443,col 33)",
            "(line 444,col 9)-(line 444,col 59)",
            "(line 446,col 9)-(line 446,col 28)",
            "(line 447,col 9)-(line 447,col 31)",
            "(line 448,col 9)-(line 448,col 29)",
            "(line 450,col 9)-(line 450,col 28)",
            "(line 451,col 9)-(line 451,col 31)",
            "(line 452,col 9)-(line 452,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()",
        "snippet": "    public void testGetCharsIntIntCharArrayInt( ) {\n        StrBuilder sb = new StrBuilder();\n               \n        sb.append(\"junit\");\n        char[] a = new char[5];\n        sb.getChars(0,5,a,0);\n        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n        \n        a = new char[5];\n        sb.getChars(0,2,a,3);\n        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n        \n        try {\n            sb.getChars(-1,0,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,-1,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(0,20,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n        \n        try {\n            sb.getChars(4,2,a,0);\n            fail(\"no exception\");\n        }\n        catch (IndexOutOfBoundsException e) {\n        }\n    }",
        "begin_line": 455,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 41)",
            "(line 458,col 9)-(line 458,col 27)",
            "(line 459,col 9)-(line 459,col 31)",
            "(line 460,col 9)-(line 460,col 29)",
            "(line 461,col 9)-(line 461,col 70)",
            "(line 463,col 9)-(line 463,col 24)",
            "(line 464,col 9)-(line 464,col 29)",
            "(line 465,col 9)-(line 465,col 64)",
            "(line 467,col 9)-(line 472,col 9)",
            "(line 474,col 9)-(line 479,col 9)",
            "(line 481,col 9)-(line 486,col 9)",
            "(line 488,col 9)-(line 493,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteIntInt()",
        "snippet": "    public void testDeleteIntInt() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.delete(0, 1);\n        assertEquals(\"bc\", sb.toString()); \n        sb.delete(1, 2);\n        assertEquals(\"b\", sb.toString());\n        sb.delete(0, 1);\n        assertEquals(\"\", sb.toString()); \n        sb.delete(0, 1000);\n        assertEquals(\"\", sb.toString()); \n        \n        try {\n            sb.delete(1, 2);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            sb.delete(-1, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        \n        sb = new StrBuilder(\"anything\");\n        try {\n            sb.delete(2, 1);\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 497,
        "end_line": 522,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 46)",
            "(line 499,col 9)-(line 499,col 24)",
            "(line 500,col 9)-(line 500,col 42)",
            "(line 501,col 9)-(line 501,col 24)",
            "(line 502,col 9)-(line 502,col 41)",
            "(line 503,col 9)-(line 503,col 24)",
            "(line 504,col 9)-(line 504,col 40)",
            "(line 505,col 9)-(line 505,col 27)",
            "(line 506,col 9)-(line 506,col 40)",
            "(line 508,col 9)-(line 511,col 48)",
            "(line 512,col 9)-(line 515,col 48)",
            "(line 517,col 9)-(line 517,col 40)",
            "(line 518,col 9)-(line 521,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_char()",
        "snippet": "    public void testDeleteAll_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll('X');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll('a');\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll('c');\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll('b');\n        assertEquals(\"\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll('b');\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 525,
        "end_line": 539,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 51)",
            "(line 527,col 9)-(line 527,col 26)",
            "(line 528,col 9)-(line 528,col 48)",
            "(line 529,col 9)-(line 529,col 26)",
            "(line 530,col 9)-(line 530,col 46)",
            "(line 531,col 9)-(line 531,col 26)",
            "(line 532,col 9)-(line 532,col 43)",
            "(line 533,col 9)-(line 533,col 26)",
            "(line 534,col 9)-(line 534,col 40)",
            "(line 536,col 9)-(line 536,col 32)",
            "(line 537,col 9)-(line 537,col 26)",
            "(line 538,col 9)-(line 538,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_char()",
        "snippet": "    public void testDeleteFirst_char() {\n        StrBuilder sb = new StrBuilder(\"abcba\");\n        sb.deleteFirst('X');\n        assertEquals(\"abcba\", sb.toString());\n        sb.deleteFirst('a');\n        assertEquals(\"bcba\", sb.toString());\n        sb.deleteFirst('c');\n        assertEquals(\"bba\", sb.toString());\n        sb.deleteFirst('b');\n        assertEquals(\"ba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst('b');\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 541,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 542,col 9)-(line 542,col 48)",
            "(line 543,col 9)-(line 543,col 28)",
            "(line 544,col 9)-(line 544,col 45)",
            "(line 545,col 9)-(line 545,col 28)",
            "(line 546,col 9)-(line 546,col 44)",
            "(line 547,col 9)-(line 547,col 28)",
            "(line 548,col 9)-(line 548,col 43)",
            "(line 549,col 9)-(line 549,col 28)",
            "(line 550,col 9)-(line 550,col 42)",
            "(line 552,col 9)-(line 552,col 32)",
            "(line 553,col 9)-(line 553,col 28)",
            "(line 554,col 9)-(line 554,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String()",
        "snippet": "    public void testDeleteAll_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.deleteAll(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteAll(\"a\");\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.deleteAll(\"c\");\n        assertEquals(\"bbb\", sb.toString());\n        sb.deleteAll(\"b\");\n        assertEquals(\"\", sb.toString());\n\n        sb = new StrBuilder(\"abcbccba\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"acba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 558,
        "end_line": 581,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 559,col 9)-(line 559,col 51)",
            "(line 560,col 9)-(line 560,col 36)",
            "(line 561,col 9)-(line 561,col 48)",
            "(line 562,col 9)-(line 562,col 25)",
            "(line 563,col 9)-(line 563,col 48)",
            "(line 565,col 9)-(line 565,col 26)",
            "(line 566,col 9)-(line 566,col 48)",
            "(line 567,col 9)-(line 567,col 26)",
            "(line 568,col 9)-(line 568,col 46)",
            "(line 569,col 9)-(line 569,col 26)",
            "(line 570,col 9)-(line 570,col 43)",
            "(line 571,col 9)-(line 571,col 26)",
            "(line 572,col 9)-(line 572,col 40)",
            "(line 574,col 9)-(line 574,col 40)",
            "(line 575,col 9)-(line 575,col 27)",
            "(line 576,col 9)-(line 576,col 44)",
            "(line 578,col 9)-(line 578,col 32)",
            "(line 579,col 9)-(line 579,col 27)",
            "(line 580,col 9)-(line 580,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_String()",
        "snippet": "    public void testDeleteFirst_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.deleteFirst((String) null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"\");\n        assertEquals(\"abcbccba\", sb.toString());\n\n        sb.deleteFirst(\"X\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.deleteFirst(\"a\");\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.deleteFirst(\"c\");\n        assertEquals(\"bbccba\", sb.toString());\n        sb.deleteFirst(\"b\");\n        assertEquals(\"bccba\", sb.toString());\n\n        sb = new StrBuilder(\"abcbccba\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"abccba\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst(\"bc\");\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 583,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 584,col 9)-(line 584,col 51)",
            "(line 585,col 9)-(line 585,col 38)",
            "(line 586,col 9)-(line 586,col 48)",
            "(line 587,col 9)-(line 587,col 27)",
            "(line 588,col 9)-(line 588,col 48)",
            "(line 590,col 9)-(line 590,col 28)",
            "(line 591,col 9)-(line 591,col 48)",
            "(line 592,col 9)-(line 592,col 28)",
            "(line 593,col 9)-(line 593,col 47)",
            "(line 594,col 9)-(line 594,col 28)",
            "(line 595,col 9)-(line 595,col 46)",
            "(line 596,col 9)-(line 596,col 28)",
            "(line 597,col 9)-(line 597,col 45)",
            "(line 599,col 9)-(line 599,col 40)",
            "(line 600,col 9)-(line 600,col 29)",
            "(line 601,col 9)-(line 601,col 46)",
            "(line 603,col 9)-(line 603,col 32)",
            "(line 604,col 9)-(line 604,col 29)",
            "(line 605,col 9)-(line 605,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher()",
        "snippet": "    public void testDeleteAll_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteAll((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"xy\", sb.toString());\n\n        sb = new StrBuilder(\"Ax1\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteAll(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 609,
        "end_line": 623,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 610,col 9)-(line 610,col 53)",
            "(line 611,col 9)-(line 611,col 40)",
            "(line 612,col 9)-(line 612,col 50)",
            "(line 613,col 9)-(line 613,col 39)",
            "(line 614,col 9)-(line 614,col 42)",
            "(line 616,col 9)-(line 616,col 35)",
            "(line 617,col 9)-(line 617,col 39)",
            "(line 618,col 9)-(line 618,col 43)",
            "(line 620,col 9)-(line 620,col 32)",
            "(line 621,col 9)-(line 621,col 39)",
            "(line 622,col 9)-(line 622,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher()",
        "snippet": "    public void testDeleteFirst_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n        sb.deleteFirst((StrMatcher) null);\n        assertEquals(\"A0xA1A2yA3\", sb.toString());\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"xA1A2yA3\", sb.toString());\n\n        sb = new StrBuilder(\"Ax1\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"Ax1\", sb.toString());\n\n        sb = new StrBuilder(\"\");\n        sb.deleteFirst(A_NUMBER_MATCHER);\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 625,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 626,col 9)-(line 626,col 53)",
            "(line 627,col 9)-(line 627,col 42)",
            "(line 628,col 9)-(line 628,col 50)",
            "(line 629,col 9)-(line 629,col 41)",
            "(line 630,col 9)-(line 630,col 48)",
            "(line 632,col 9)-(line 632,col 35)",
            "(line 633,col 9)-(line 633,col 41)",
            "(line 634,col 9)-(line 634,col 43)",
            "(line 636,col 9)-(line 636,col 32)",
            "(line 637,col 9)-(line 637,col 41)",
            "(line 638,col 9)-(line 638,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String()",
        "snippet": "    public void testReplace_int_int_String() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        sb.replace(0, 1, \"d\");\n        assertEquals(\"dbc\", sb.toString());\n        sb.replace(0, 1, \"aaa\");\n        assertEquals(\"aaabc\", sb.toString());\n        sb.replace(0, 3, \"\");\n        assertEquals(\"bc\", sb.toString());\n        sb.replace(1, 2, (String) null);\n        assertEquals(\"b\", sb.toString());\n        sb.replace(1, 1000, \"text\");\n        assertEquals(\"btext\", sb.toString());\n        sb.replace(0, 1000, \"text\");\n        assertEquals(\"text\", sb.toString());\n        \n        sb = new StrBuilder(\"atext\");\n        sb.replace(1, 1, \"ny\");\n        assertEquals(\"anytext\", sb.toString());\n        try {\n            sb.replace(2, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        \n        sb = new StrBuilder();\n        try {\n            sb.replace(1, 2, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n        try {\n            sb.replace(-1, 1, \"anything\");\n            fail(\"Expected IndexOutOfBoundsException\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 642,
        "end_line": 674,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 643,col 9)-(line 643,col 46)",
            "(line 644,col 9)-(line 644,col 30)",
            "(line 645,col 9)-(line 645,col 43)",
            "(line 646,col 9)-(line 646,col 32)",
            "(line 647,col 9)-(line 647,col 45)",
            "(line 648,col 9)-(line 648,col 29)",
            "(line 649,col 9)-(line 649,col 42)",
            "(line 650,col 9)-(line 650,col 40)",
            "(line 651,col 9)-(line 651,col 41)",
            "(line 652,col 9)-(line 652,col 36)",
            "(line 653,col 9)-(line 653,col 45)",
            "(line 654,col 9)-(line 654,col 36)",
            "(line 655,col 9)-(line 655,col 44)",
            "(line 657,col 9)-(line 657,col 37)",
            "(line 658,col 9)-(line 658,col 31)",
            "(line 659,col 9)-(line 659,col 47)",
            "(line 660,col 9)-(line 663,col 48)",
            "(line 665,col 9)-(line 665,col 30)",
            "(line 666,col 9)-(line 669,col 48)",
            "(line 670,col 9)-(line 673,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_char_char()",
        "snippet": "    public void testReplaceAll_char_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll('x', 'y');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll('a', 'd');\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll('b', 'e');\n        assertEquals(\"dececced\", sb.toString());\n        sb.replaceAll('c', 'f');\n        assertEquals(\"defeffed\", sb.toString());\n        sb.replaceAll('d', 'd');\n        assertEquals(\"defeffed\", sb.toString());\n    }",
        "begin_line": 677,
        "end_line": 689,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 678,col 9)-(line 678,col 51)",
            "(line 679,col 9)-(line 679,col 32)",
            "(line 680,col 9)-(line 680,col 48)",
            "(line 681,col 9)-(line 681,col 32)",
            "(line 682,col 9)-(line 682,col 48)",
            "(line 683,col 9)-(line 683,col 32)",
            "(line 684,col 9)-(line 684,col 48)",
            "(line 685,col 9)-(line 685,col 32)",
            "(line 686,col 9)-(line 686,col 48)",
            "(line 687,col 9)-(line 687,col 32)",
            "(line 688,col 9)-(line 688,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_char_char()",
        "snippet": "    public void testReplaceFirst_char_char() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst('x', 'y');\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst('a', 'd');\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst('b', 'e');\n        assertEquals(\"decbccba\", sb.toString());\n        sb.replaceFirst('c', 'f');\n        assertEquals(\"defbccba\", sb.toString());\n        sb.replaceFirst('d', 'd');\n        assertEquals(\"defbccba\", sb.toString());\n    }",
        "begin_line": 692,
        "end_line": 704,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 693,col 9)-(line 693,col 51)",
            "(line 694,col 9)-(line 694,col 34)",
            "(line 695,col 9)-(line 695,col 48)",
            "(line 696,col 9)-(line 696,col 34)",
            "(line 697,col 9)-(line 697,col 48)",
            "(line 698,col 9)-(line 698,col 34)",
            "(line 699,col 9)-(line 699,col 48)",
            "(line 700,col 9)-(line 700,col 34)",
            "(line 701,col 9)-(line 701,col 48)",
            "(line 702,col 9)-(line 702,col 34)",
            "(line 703,col 9)-(line 703,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String()",
        "snippet": "    public void testReplaceAll_String_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(\"a\", \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(\"d\", null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(\"cb\", \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceAll(\"b\", \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n    }",
        "begin_line": 707,
        "end_line": 734,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 51)",
            "(line 709,col 9)-(line 709,col 43)",
            "(line 710,col 9)-(line 710,col 48)",
            "(line 711,col 9)-(line 711,col 49)",
            "(line 712,col 9)-(line 712,col 48)",
            "(line 713,col 9)-(line 713,col 32)",
            "(line 714,col 9)-(line 714,col 48)",
            "(line 715,col 9)-(line 715,col 38)",
            "(line 716,col 9)-(line 716,col 48)",
            "(line 718,col 9)-(line 718,col 32)",
            "(line 719,col 9)-(line 719,col 48)",
            "(line 720,col 9)-(line 720,col 32)",
            "(line 721,col 9)-(line 721,col 48)",
            "(line 722,col 9)-(line 722,col 33)",
            "(line 723,col 9)-(line 723,col 46)",
            "(line 724,col 9)-(line 724,col 33)",
            "(line 725,col 9)-(line 725,col 44)",
            "(line 727,col 9)-(line 727,col 37)",
            "(line 728,col 9)-(line 728,col 34)",
            "(line 729,col 9)-(line 729,col 49)",
            "(line 731,col 9)-(line 731,col 34)",
            "(line 732,col 9)-(line 732,col 34)",
            "(line 733,col 9)-(line 733,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_String_String()",
        "snippet": "    public void testReplaceFirst_String_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((String) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((String) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"\", \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(\"x\", \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(\"a\", \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(\"d\", null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(\"cb\", \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceFirst(\"b\", \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n    }",
        "begin_line": 736,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 737,col 9)-(line 737,col 51)",
            "(line 738,col 9)-(line 738,col 45)",
            "(line 739,col 9)-(line 739,col 48)",
            "(line 740,col 9)-(line 740,col 51)",
            "(line 741,col 9)-(line 741,col 48)",
            "(line 742,col 9)-(line 742,col 34)",
            "(line 743,col 9)-(line 743,col 48)",
            "(line 744,col 9)-(line 744,col 40)",
            "(line 745,col 9)-(line 745,col 48)",
            "(line 747,col 9)-(line 747,col 34)",
            "(line 748,col 9)-(line 748,col 48)",
            "(line 749,col 9)-(line 749,col 34)",
            "(line 750,col 9)-(line 750,col 48)",
            "(line 751,col 9)-(line 751,col 35)",
            "(line 752,col 9)-(line 752,col 47)",
            "(line 753,col 9)-(line 753,col 35)",
            "(line 754,col 9)-(line 754,col 46)",
            "(line 756,col 9)-(line 756,col 37)",
            "(line 757,col 9)-(line 757,col 36)",
            "(line 758,col 9)-(line 758,col 47)",
            "(line 760,col 9)-(line 760,col 34)",
            "(line 761,col 9)-(line 761,col 36)",
            "(line 762,col 9)-(line 762,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String()",
        "snippet": "    public void testReplaceAll_StrMatcher_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceAll((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\n        assertEquals(\"dbcbccbd\", sb.toString());\n        sb.replaceAll(StrMatcher.charMatcher('d'), null);\n        assertEquals(\"bcbccb\", sb.toString());\n        sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-c-\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"axbxcxbxa\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"xbxxbx\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceAll(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-******-***\", sb.toString());\n    }",
        "begin_line": 766,
        "end_line": 797,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 767,col 9)-(line 767,col 51)",
            "(line 768,col 9)-(line 768,col 47)",
            "(line 769,col 9)-(line 769,col 48)",
            "(line 770,col 9)-(line 770,col 53)",
            "(line 771,col 9)-(line 771,col 48)",
            "(line 772,col 9)-(line 772,col 54)",
            "(line 773,col 9)-(line 773,col 48)",
            "(line 774,col 9)-(line 774,col 60)",
            "(line 775,col 9)-(line 775,col 48)",
            "(line 777,col 9)-(line 777,col 56)",
            "(line 778,col 9)-(line 778,col 48)",
            "(line 779,col 9)-(line 779,col 56)",
            "(line 780,col 9)-(line 780,col 48)",
            "(line 781,col 9)-(line 781,col 57)",
            "(line 782,col 9)-(line 782,col 46)",
            "(line 783,col 9)-(line 783,col 59)",
            "(line 784,col 9)-(line 784,col 44)",
            "(line 786,col 9)-(line 786,col 37)",
            "(line 787,col 9)-(line 787,col 58)",
            "(line 788,col 9)-(line 788,col 49)",
            "(line 790,col 9)-(line 790,col 34)",
            "(line 791,col 9)-(line 791,col 58)",
            "(line 792,col 9)-(line 792,col 46)",
            "(line 794,col 9)-(line 794,col 42)",
            "(line 795,col 9)-(line 795,col 47)",
            "(line 796,col 9)-(line 796,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()",
        "snippet": "    public void testReplaceFirst_StrMatcher_String() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replaceFirst((StrMatcher) null, null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst((StrMatcher) null, \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), null);\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\n        assertEquals(\"abcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\n        assertEquals(\"dbcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.charMatcher('d'), null);\n        assertEquals(\"bcbccba\", sb.toString());\n        sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\n        assertEquals(\"b-ccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcba\");\n        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"axbxcba\", sb.toString());\n        \n        sb = new StrBuilder(\"bb\");\n        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n        assertEquals(\"xbxb\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\n        assertEquals(\"***-A2A3-A4\", sb.toString());\n    }",
        "begin_line": 799,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 800,col 9)-(line 800,col 51)",
            "(line 801,col 9)-(line 801,col 49)",
            "(line 802,col 9)-(line 802,col 48)",
            "(line 803,col 9)-(line 803,col 55)",
            "(line 804,col 9)-(line 804,col 48)",
            "(line 805,col 9)-(line 805,col 56)",
            "(line 806,col 9)-(line 806,col 48)",
            "(line 807,col 9)-(line 807,col 62)",
            "(line 808,col 9)-(line 808,col 48)",
            "(line 810,col 9)-(line 810,col 58)",
            "(line 811,col 9)-(line 811,col 48)",
            "(line 812,col 9)-(line 812,col 58)",
            "(line 813,col 9)-(line 813,col 48)",
            "(line 814,col 9)-(line 814,col 59)",
            "(line 815,col 9)-(line 815,col 47)",
            "(line 816,col 9)-(line 816,col 61)",
            "(line 817,col 9)-(line 817,col 46)",
            "(line 819,col 9)-(line 819,col 37)",
            "(line 820,col 9)-(line 820,col 60)",
            "(line 821,col 9)-(line 821,col 47)",
            "(line 823,col 9)-(line 823,col 34)",
            "(line 824,col 9)-(line 824,col 60)",
            "(line 825,col 9)-(line 825,col 44)",
            "(line 827,col 9)-(line 827,col 42)",
            "(line 828,col 9)-(line 828,col 49)",
            "(line 829,col 9)-(line 829,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbcbccbx\", sb.toString());\n        \n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\n        assertEquals(\"xbxcxx\", sb.toString());\n        \n        sb = new StrBuilder(\"A1-A2A3-A4\");\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"***-******-***\", sb.toString());\n        \n        sb = new StrBuilder();\n        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n        assertEquals(\"\", sb.toString());\n    }",
        "begin_line": 833,
        "end_line": 851,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 834,col 9)-(line 834,col 51)",
            "(line 835,col 9)-(line 835,col 63)",
            "(line 836,col 9)-(line 836,col 48)",
            "(line 838,col 9)-(line 838,col 73)",
            "(line 839,col 9)-(line 839,col 48)",
            "(line 841,col 9)-(line 841,col 76)",
            "(line 842,col 9)-(line 842,col 46)",
            "(line 844,col 9)-(line 844,col 42)",
            "(line 845,col 9)-(line 845,col 64)",
            "(line 846,col 9)-(line 846,col 54)",
            "(line 848,col 9)-(line 848,col 30)",
            "(line 849,col 9)-(line 849,col 64)",
            "(line 850,col 9)-(line 850,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n        StrBuilder sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n        assertEquals(\"abcbccba\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"ab-c-a\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\n        assertEquals(\"ab+++c+++a\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n        \n        sb = new StrBuilder(\"abcbccba\");\n        sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\n        assertEquals(\"abca\", sb.toString());\n    }",
        "begin_line": 853,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 854,col 9)-(line 854,col 51)",
            "(line 855,col 9)-(line 855,col 77)",
            "(line 856,col 9)-(line 856,col 48)",
            "(line 858,col 9)-(line 858,col 40)",
            "(line 859,col 9)-(line 859,col 76)",
            "(line 860,col 9)-(line 860,col 46)",
            "(line 862,col 9)-(line 862,col 40)",
            "(line 863,col 9)-(line 863,col 78)",
            "(line 864,col 9)-(line 864,col 50)",
            "(line 866,col 9)-(line 866,col 40)",
            "(line 867,col 9)-(line 867,col 75)",
            "(line 868,col 9)-(line 868,col 44)",
            "(line 870,col 9)-(line 870,col 40)",
            "(line 871,col 9)-(line 871,col 77)",
            "(line 872,col 9)-(line 872,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\n        assertEquals(\"aax--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\n        assertEquals(\"aaxa-ay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\n        assertEquals(\"aaxaa-y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\n        assertEquals(\"aaxaaaay-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }",
        "begin_line": 875,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 876,col 9)-(line 876,col 53)",
            "(line 877,col 9)-(line 877,col 76)",
            "(line 878,col 9)-(line 878,col 46)",
            "(line 880,col 9)-(line 880,col 42)",
            "(line 881,col 9)-(line 881,col 76)",
            "(line 882,col 9)-(line 882,col 47)",
            "(line 884,col 9)-(line 884,col 42)",
            "(line 885,col 9)-(line 885,col 76)",
            "(line 886,col 9)-(line 886,col 47)",
            "(line 888,col 9)-(line 888,col 42)",
            "(line 889,col 9)-(line 889,col 76)",
            "(line 890,col 9)-(line 890,col 47)",
            "(line 892,col 9)-(line 892,col 42)",
            "(line 893,col 9)-(line 893,col 76)",
            "(line 894,col 9)-(line 894,col 48)",
            "(line 896,col 9)-(line 896,col 42)",
            "(line 897,col 9)-(line 897,col 76)",
            "(line 898,col 9)-(line 898,col 48)",
            "(line 900,col 9)-(line 900,col 42)",
            "(line 901,col 9)-(line 901,col 76)",
            "(line 902,col 9)-(line 902,col 49)",
            "(line 904,col 9)-(line 904,col 42)",
            "(line 905,col 9)-(line 905,col 76)",
            "(line 906,col 9)-(line 906,col 49)",
            "(line 908,col 9)-(line 908,col 42)",
            "(line 909,col 9)-(line 909,col 76)",
            "(line 910,col 9)-(line 910,col 49)",
            "(line 912,col 9)-(line 912,col 42)",
            "(line 913,col 9)-(line 913,col 76)",
            "(line 914,col 9)-(line 914,col 50)",
            "(line 916,col 9)-(line 916,col 42)",
            "(line 917,col 9)-(line 917,col 77)",
            "(line 918,col 9)-(line 918,col 50)",
            "(line 920,col 9)-(line 920,col 42)",
            "(line 921,col 9)-(line 924,col 49)",
            "(line 925,col 9)-(line 925,col 50)",
            "(line 927,col 9)-(line 927,col 42)",
            "(line 928,col 9)-(line 931,col 49)",
            "(line 932,col 9)-(line 932,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        try {\n            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n    }",
        "begin_line": 935,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 936,col 9)-(line 936,col 53)",
            "(line 937,col 9)-(line 937,col 66)",
            "(line 938,col 9)-(line 938,col 50)",
            "(line 940,col 9)-(line 940,col 42)",
            "(line 941,col 9)-(line 941,col 66)",
            "(line 942,col 9)-(line 942,col 49)",
            "(line 944,col 9)-(line 944,col 42)",
            "(line 945,col 9)-(line 945,col 66)",
            "(line 946,col 9)-(line 946,col 49)",
            "(line 948,col 9)-(line 948,col 42)",
            "(line 949,col 9)-(line 949,col 66)",
            "(line 950,col 9)-(line 950,col 49)",
            "(line 952,col 9)-(line 952,col 42)",
            "(line 953,col 9)-(line 953,col 66)",
            "(line 954,col 9)-(line 954,col 48)",
            "(line 956,col 9)-(line 956,col 42)",
            "(line 957,col 9)-(line 957,col 66)",
            "(line 958,col 9)-(line 958,col 48)",
            "(line 960,col 9)-(line 960,col 42)",
            "(line 961,col 9)-(line 961,col 66)",
            "(line 962,col 9)-(line 962,col 47)",
            "(line 964,col 9)-(line 964,col 42)",
            "(line 965,col 9)-(line 965,col 66)",
            "(line 966,col 9)-(line 966,col 47)",
            "(line 968,col 9)-(line 968,col 42)",
            "(line 969,col 9)-(line 969,col 66)",
            "(line 970,col 9)-(line 970,col 47)",
            "(line 972,col 9)-(line 972,col 42)",
            "(line 973,col 9)-(line 973,col 67)",
            "(line 974,col 9)-(line 974,col 46)",
            "(line 976,col 9)-(line 976,col 42)",
            "(line 977,col 9)-(line 977,col 69)",
            "(line 978,col 9)-(line 978,col 46)",
            "(line 980,col 9)-(line 980,col 42)",
            "(line 981,col 9)-(line 984,col 49)",
            "(line 985,col 9)-(line 985,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()",
        "snippet": "    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\n        assertEquals(\"aaxaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\n        assertEquals(\"-xaaaayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\n        assertEquals(\"-x-aayaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\n        assertEquals(\"-x--yaa\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\n        assertEquals(\"-x--y-\", sb.toString());\n        \n        sb = new StrBuilder(\"aaxaaaayaa\");\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\n        assertEquals(\"-x--y-\", sb.toString());\n    }",
        "begin_line": 988,
        "end_line": 1016,
        "comment": "",
        "child_ranges": [
            "(line 989,col 9)-(line 989,col 53)",
            "(line 990,col 9)-(line 990,col 67)",
            "(line 991,col 9)-(line 991,col 46)",
            "(line 993,col 9)-(line 993,col 42)",
            "(line 994,col 9)-(line 994,col 66)",
            "(line 995,col 9)-(line 995,col 50)",
            "(line 997,col 9)-(line 997,col 42)",
            "(line 998,col 9)-(line 998,col 66)",
            "(line 999,col 9)-(line 999,col 49)",
            "(line 1001,col 9)-(line 1001,col 42)",
            "(line 1002,col 9)-(line 1002,col 66)",
            "(line 1003,col 9)-(line 1003,col 48)",
            "(line 1005,col 9)-(line 1005,col 42)",
            "(line 1006,col 9)-(line 1006,col 66)",
            "(line 1007,col 9)-(line 1007,col 47)",
            "(line 1009,col 9)-(line 1009,col 42)",
            "(line 1010,col 9)-(line 1010,col 66)",
            "(line 1011,col 9)-(line 1011,col 46)",
            "(line 1013,col 9)-(line 1013,col 42)",
            "(line 1014,col 9)-(line 1014,col 66)",
            "(line 1015,col 9)-(line 1015,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testReverse()",
        "snippet": "    public void testReverse() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(true);\n        assertEquals(\"eurt\", sb.reverse().toString());\n        assertEquals(\"true\", sb.reverse().toString());\n    }",
        "begin_line": 1019,
        "end_line": 1026,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1020,col 9)-(line 1020,col 41)",
            "(line 1021,col 9)-(line 1021,col 50)",
            "(line 1023,col 9)-(line 1023,col 32)",
            "(line 1024,col 9)-(line 1024,col 54)",
            "(line 1025,col 9)-(line 1025,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testTrim()",
        "snippet": "    public void testTrim() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(\"\", sb.reverse().toString());\n        \n        sb.clear().append(\" \\u0000 \");\n        assertEquals(\"\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\" \\u0000 a b c \\u0000 \");\n        assertEquals(\"a b c\", sb.trim().toString());\n        \n        sb.clear().append(\"a b c\");\n        assertEquals(\"a b c\", sb.trim().toString());\n    }",
        "begin_line": 1029,
        "end_line": 1047,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1030,col 9)-(line 1030,col 41)",
            "(line 1031,col 9)-(line 1031,col 50)",
            "(line 1033,col 9)-(line 1033,col 38)",
            "(line 1034,col 9)-(line 1034,col 47)",
            "(line 1036,col 9)-(line 1036,col 43)",
            "(line 1037,col 9)-(line 1037,col 52)",
            "(line 1039,col 9)-(line 1039,col 43)",
            "(line 1040,col 9)-(line 1040,col 52)",
            "(line 1042,col 9)-(line 1042,col 51)",
            "(line 1043,col 9)-(line 1043,col 52)",
            "(line 1045,col 9)-(line 1045,col 35)",
            "(line 1046,col 9)-(line 1046,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testStartsWith()",
        "snippet": "    public void testStartsWith() {\n        StrBuilder sb = new StrBuilder();\n        assertFalse(sb.startsWith(\"a\"));\n        assertFalse(sb.startsWith(null));\n        assertTrue(sb.startsWith(\"\"));\n        sb.append(\"abc\");\n        assertTrue(sb.startsWith(\"a\"));\n        assertTrue(sb.startsWith(\"ab\"));\n        assertTrue(sb.startsWith(\"abc\"));\n        assertFalse(sb.startsWith(\"cba\"));\n    }",
        "begin_line": 1050,
        "end_line": 1060,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1051,col 9)-(line 1051,col 41)",
            "(line 1052,col 9)-(line 1052,col 40)",
            "(line 1053,col 9)-(line 1053,col 41)",
            "(line 1054,col 9)-(line 1054,col 38)",
            "(line 1055,col 9)-(line 1055,col 25)",
            "(line 1056,col 9)-(line 1056,col 39)",
            "(line 1057,col 9)-(line 1057,col 40)",
            "(line 1058,col 9)-(line 1058,col 41)",
            "(line 1059,col 9)-(line 1059,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEndsWith()",
        "snippet": "    public void testEndsWith() {\n        StrBuilder sb = new StrBuilder();\n        assertFalse(sb.endsWith(\"a\"));\n        assertFalse(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"\"));\n        assertFalse(sb.endsWith(null));\n        sb.append(\"abc\");\n        assertTrue(sb.endsWith(\"c\"));\n        assertTrue(sb.endsWith(\"bc\"));\n        assertTrue(sb.endsWith(\"abc\"));\n        assertFalse(sb.endsWith(\"cba\"));\n        assertFalse(sb.endsWith(\"abcd\"));\n        assertFalse(sb.endsWith(\" abc\"));\n        assertFalse(sb.endsWith(\"abc \"));\n    }",
        "begin_line": 1062,
        "end_line": 1076,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 9)-(line 1063,col 41)",
            "(line 1064,col 9)-(line 1064,col 38)",
            "(line 1065,col 9)-(line 1065,col 38)",
            "(line 1066,col 9)-(line 1066,col 36)",
            "(line 1067,col 9)-(line 1067,col 39)",
            "(line 1068,col 9)-(line 1068,col 25)",
            "(line 1069,col 9)-(line 1069,col 37)",
            "(line 1070,col 9)-(line 1070,col 38)",
            "(line 1071,col 9)-(line 1071,col 39)",
            "(line 1072,col 9)-(line 1072,col 40)",
            "(line 1073,col 9)-(line 1073,col 41)",
            "(line 1074,col 9)-(line 1074,col 41)",
            "(line 1075,col 9)-(line 1075,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSubSequenceIntInt()",
        "snippet": "    public void testSubSequenceIntInt() {\n       StrBuilder sb = new StrBuilder (\"hello goodbye\");\n       // Start index is negative\n       try {\n            sb.subSequence(-1, 5);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        // End index is negative\n       try {\n            sb.subSequence(2, -1);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        // End index greater than length()\n        try {\n            sb.subSequence(2, sb.length() + 1);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        // Start index greater then end index\n        try {\n            sb.subSequence(3, 2);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        // Normal cases\n        assertEquals (\"hello\", sb.subSequence(0, 5));\n        assertEquals (\"hello goodbye\".subSequence(0, 6), sb.subSequence(0, 6));\n        assertEquals (\"goodbye\", sb.subSequence(6, 13));\n        assertEquals (\"hello goodbye\".subSequence(6,13), sb.subSequence(6, 13));\n    }",
        "begin_line": 1079,
        "end_line": 1110,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1080,col 8)-(line 1080,col 56)",
            "(line 1082,col 8)-(line 1085,col 48)",
            "(line 1088,col 8)-(line 1091,col 48)",
            "(line 1094,col 9)-(line 1097,col 48)",
            "(line 1100,col 9)-(line 1103,col 48)",
            "(line 1106,col 9)-(line 1106,col 53)",
            "(line 1107,col 9)-(line 1107,col 79)",
            "(line 1108,col 9)-(line 1108,col 56)",
            "(line 1109,col 9)-(line 1109,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt()",
        "snippet": "    public void testSubstringInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        assertEquals (\"goodbye\", sb.substring(6));\n        assertEquals (\"hello goodbye\".substring(6), sb.substring(6));\n        assertEquals (\"hello goodbye\", sb.substring(0));\n        assertEquals (\"hello goodbye\".substring(0), sb.substring(0));\n        try {\n            sb.substring(-1);\n            fail ();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15);\n            fail ();\n        } catch (IndexOutOfBoundsException e) {}\n    \n    }",
        "begin_line": 1112,
        "end_line": 1128,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 9)-(line 1113,col 57)",
            "(line 1114,col 9)-(line 1114,col 50)",
            "(line 1115,col 9)-(line 1115,col 69)",
            "(line 1116,col 9)-(line 1116,col 56)",
            "(line 1117,col 9)-(line 1117,col 69)",
            "(line 1118,col 9)-(line 1121,col 48)",
            "(line 1123,col 9)-(line 1126,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testSubstringIntInt()",
        "snippet": "    public void testSubstringIntInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        assertEquals (\"hello\", sb.substring(0, 5));\n        assertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 13));\n        assertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n        \n        assertEquals (\"goodbye\", sb.substring(6, 20));\n        \n        try {\n            sb.substring(-1, 5);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n        \n        try {\n            sb.substring(15, 20);\n            fail();\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 1130,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 9)-(line 1131,col 57)",
            "(line 1132,col 9)-(line 1132,col 51)",
            "(line 1133,col 9)-(line 1133,col 75)",
            "(line 1135,col 9)-(line 1135,col 54)",
            "(line 1136,col 9)-(line 1136,col 76)",
            "(line 1138,col 9)-(line 1138,col 54)",
            "(line 1140,col 9)-(line 1143,col 48)",
            "(line 1145,col 9)-(line 1148,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testMidString()",
        "snippet": "    public void testMidString() {\n        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n        assertEquals(\"goodbye\", sb.midString(6, 7));\n        assertEquals(\"hello\", sb.midString(0, 5));\n        assertEquals(\"hello\", sb.midString(-5, 5));\n        assertEquals(\"\", sb.midString(0, -1));\n        assertEquals(\"\", sb.midString(20, 2));\n        assertEquals(\"hello\", sb.midString(14, 22));\n    }",
        "begin_line": 1152,
        "end_line": 1160,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1153,col 9)-(line 1153,col 62)",
            "(line 1154,col 9)-(line 1154,col 52)",
            "(line 1155,col 9)-(line 1155,col 50)",
            "(line 1156,col 9)-(line 1156,col 51)",
            "(line 1157,col 9)-(line 1157,col 46)",
            "(line 1158,col 9)-(line 1158,col 46)",
            "(line 1159,col 9)-(line 1159,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testRightString()",
        "snippet": "    public void testRightString() {\n        StrBuilder sb = new StrBuilder(\"left right\");\n        assertEquals(\"right\", sb.rightString(5));\n        assertEquals(\"\", sb.rightString(0));\n        assertEquals(\"\", sb.rightString(-5));\n        assertEquals(\"left right\", sb.rightString(15));\n    }",
        "begin_line": 1162,
        "end_line": 1168,
        "comment": "",
        "child_ranges": [
            "(line 1163,col 9)-(line 1163,col 53)",
            "(line 1164,col 9)-(line 1164,col 49)",
            "(line 1165,col 9)-(line 1165,col 44)",
            "(line 1166,col 9)-(line 1166,col 45)",
            "(line 1167,col 9)-(line 1167,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLeftString()",
        "snippet": "    public void testLeftString() {\n        StrBuilder sb = new StrBuilder(\"left right\");\n        assertEquals(\"left\", sb.leftString(4));\n        assertEquals(\"\", sb.leftString(0));\n        assertEquals(\"\", sb.leftString(-5));\n        assertEquals(\"left right\", sb.leftString(15));\n    }",
        "begin_line": 1170,
        "end_line": 1176,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 9)-(line 1171,col 53)",
            "(line 1172,col 9)-(line 1172,col 47)",
            "(line 1173,col 9)-(line 1173,col 43)",
            "(line 1174,col 9)-(line 1174,col 44)",
            "(line 1175,col 9)-(line 1175,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testContains_char()",
        "snippet": "    public void testContains_char() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains('a'));\n        assertEquals(true, sb.contains('o'));\n        assertEquals(true, sb.contains('z'));\n        assertEquals(false, sb.contains('1'));\n    }",
        "begin_line": 1179,
        "end_line": 1185,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1180,col 9)-(line 1180,col 69)",
            "(line 1181,col 9)-(line 1181,col 45)",
            "(line 1182,col 9)-(line 1182,col 45)",
            "(line 1183,col 9)-(line 1183,col 45)",
            "(line 1184,col 9)-(line 1184,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testContains_String()",
        "snippet": "    public void testContains_String() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains(\"a\"));\n        assertEquals(true, sb.contains(\"pq\"));\n        assertEquals(true, sb.contains(\"z\"));\n        assertEquals(false, sb.contains(\"zyx\"));\n        assertEquals(false, sb.contains((String) null));\n    }",
        "begin_line": 1187,
        "end_line": 1194,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 9)-(line 1188,col 69)",
            "(line 1189,col 9)-(line 1189,col 45)",
            "(line 1190,col 9)-(line 1190,col 46)",
            "(line 1191,col 9)-(line 1191,col 45)",
            "(line 1192,col 9)-(line 1192,col 48)",
            "(line 1193,col 9)-(line 1193,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher()",
        "snippet": "    public void testContains_StrMatcher() {\n        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n        assertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\n        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\n        assertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\n        assertEquals(false, sb.contains((StrMatcher) null));\n\n        sb = new StrBuilder();\n        assertEquals(false, sb.contains(A_NUMBER_MATCHER));\n        sb.append(\"B A1 C\");\n        assertEquals(true, sb.contains(A_NUMBER_MATCHER));\n    }",
        "begin_line": 1196,
        "end_line": 1208,
        "comment": "",
        "child_ranges": [
            "(line 1197,col 9)-(line 1197,col 69)",
            "(line 1198,col 9)-(line 1198,col 69)",
            "(line 1199,col 9)-(line 1199,col 72)",
            "(line 1200,col 9)-(line 1200,col 69)",
            "(line 1201,col 9)-(line 1201,col 73)",
            "(line 1202,col 9)-(line 1202,col 60)",
            "(line 1204,col 9)-(line 1204,col 30)",
            "(line 1205,col 9)-(line 1205,col 59)",
            "(line 1206,col 9)-(line 1206,col 28)",
            "(line 1207,col 9)-(line 1207,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char()",
        "snippet": "    public void testIndexOf_char() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf('a'));\n        \n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\n\n        assertEquals(1, sb.indexOf('b'));\n        assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\n\n        assertEquals(-1, sb.indexOf('z'));\n    }",
        "begin_line": 1211,
        "end_line": 1222,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1212,col 9)-(line 1212,col 47)",
            "(line 1213,col 9)-(line 1213,col 41)",
            "(line 1216,col 9)-(line 1216,col 59)",
            "(line 1218,col 9)-(line 1218,col 41)",
            "(line 1219,col 9)-(line 1219,col 59)",
            "(line 1221,col 9)-(line 1221,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int()",
        "snippet": "    public void testIndexOf_char_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf('a', -1));\n        assertEquals(0, sb.indexOf('a', 0));\n        assertEquals(2, sb.indexOf('a', 1));\n        assertEquals(-1, sb.indexOf('a', 4));\n        assertEquals(-1, sb.indexOf('a', 5));\n\n        // should work like String#indexOf\n        assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n\n        assertEquals(3, sb.indexOf('b', 2));\n        assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n\n        assertEquals(-1, sb.indexOf('z', 2));\n\n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf('z', 0));\n        assertEquals(-1, sb.indexOf('z', 3));\n    }",
        "begin_line": 1224,
        "end_line": 1243,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 9)-(line 1225,col 47)",
            "(line 1226,col 9)-(line 1226,col 45)",
            "(line 1227,col 9)-(line 1227,col 44)",
            "(line 1228,col 9)-(line 1228,col 44)",
            "(line 1229,col 9)-(line 1229,col 45)",
            "(line 1230,col 9)-(line 1230,col 45)",
            "(line 1233,col 9)-(line 1233,col 65)",
            "(line 1235,col 9)-(line 1235,col 44)",
            "(line 1236,col 9)-(line 1236,col 65)",
            "(line 1238,col 9)-(line 1238,col 45)",
            "(line 1240,col 9)-(line 1240,col 38)",
            "(line 1241,col 9)-(line 1241,col 44)",
            "(line 1242,col 9)-(line 1242,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char()",
        "snippet": "    public void testLastIndexOf_char() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals (2, sb.lastIndexOf('a'));\n        //should work like String#lastIndexOf\n        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n        \n        assertEquals(3, sb.lastIndexOf('b'));\n        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n        \n        assertEquals (-1, sb.lastIndexOf('z'));\n    }",
        "begin_line": 1245,
        "end_line": 1256,
        "comment": "",
        "child_ranges": [
            "(line 1246,col 9)-(line 1246,col 47)",
            "(line 1248,col 9)-(line 1248,col 46)",
            "(line 1250,col 9)-(line 1250,col 68)",
            "(line 1252,col 9)-(line 1252,col 45)",
            "(line 1253,col 9)-(line 1253,col 68)",
            "(line 1255,col 9)-(line 1255,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char_int()",
        "snippet": "    public void testLastIndexOf_char_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf('a', -1));\n        assertEquals(0, sb.lastIndexOf('a', 0));\n        assertEquals(0, sb.lastIndexOf('a', 1));\n\n        // should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n\n        assertEquals(1, sb.lastIndexOf('b', 2));\n        assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n\n        assertEquals(-1, sb.lastIndexOf('z', 2));\n\n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf('z', sb.length()));\n        assertEquals(-1, sb.lastIndexOf('z', 1));\n    }",
        "begin_line": 1258,
        "end_line": 1275,
        "comment": "",
        "child_ranges": [
            "(line 1259,col 9)-(line 1259,col 47)",
            "(line 1260,col 9)-(line 1260,col 50)",
            "(line 1261,col 9)-(line 1261,col 48)",
            "(line 1262,col 9)-(line 1262,col 48)",
            "(line 1265,col 9)-(line 1265,col 73)",
            "(line 1267,col 9)-(line 1267,col 48)",
            "(line 1268,col 9)-(line 1268,col 73)",
            "(line 1270,col 9)-(line 1270,col 49)",
            "(line 1272,col 9)-(line 1272,col 38)",
            "(line 1273,col 9)-(line 1273,col 58)",
            "(line 1274,col 9)-(line 1274,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String()",
        "snippet": "    public void testIndexOf_String() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals(0, sb.indexOf(\"a\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n        \n        assertEquals(0, sb.indexOf(\"ab\"));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n        \n        assertEquals(1, sb.indexOf(\"b\"));\n        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n        \n        assertEquals(1, sb.indexOf(\"ba\"));\n        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n        \n        assertEquals(-1, sb.indexOf(\"z\"));\n        \n        assertEquals(-1, sb.indexOf((String) null));\n    }",
        "begin_line": 1278,
        "end_line": 1298,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1279,col 9)-(line 1279,col 47)",
            "(line 1281,col 9)-(line 1281,col 41)",
            "(line 1283,col 9)-(line 1283,col 59)",
            "(line 1285,col 9)-(line 1285,col 42)",
            "(line 1287,col 9)-(line 1287,col 61)",
            "(line 1289,col 9)-(line 1289,col 41)",
            "(line 1290,col 9)-(line 1290,col 59)",
            "(line 1292,col 9)-(line 1292,col 42)",
            "(line 1293,col 9)-(line 1293,col 61)",
            "(line 1295,col 9)-(line 1295,col 42)",
            "(line 1297,col 9)-(line 1297,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int()",
        "snippet": "    public void testIndexOf_String_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(0, sb.indexOf(\"a\", -1));\n        assertEquals(0, sb.indexOf(\"a\", 0));\n        assertEquals(2, sb.indexOf(\"a\", 1));\n        assertEquals(2, sb.indexOf(\"a\", 2));\n        assertEquals(-1, sb.indexOf(\"a\", 3));\n        assertEquals(-1, sb.indexOf(\"a\", 4));\n        assertEquals(-1, sb.indexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.indexOf(\"abcdef\", 0));\n        assertEquals(0, sb.indexOf(\"\", 0));\n        assertEquals(1, sb.indexOf(\"\", 1));\n        \n        //should work like String#indexOf\n        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n        \n        assertEquals(2, sb.indexOf(\"ab\", 1));\n        //should work like String#indexOf\n        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n        \n        assertEquals(3, sb.indexOf(\"b\", 2));\n        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n        \n        assertEquals(1, sb.indexOf(\"ba\", 1));\n        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.indexOf(\"z\", 2));\n        \n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.indexOf(\"za\", 0));\n        assertEquals(-1, sb.indexOf(\"za\", 3));\n        \n        assertEquals(-1, sb.indexOf((String) null, 2));\n    }",
        "begin_line": 1300,
        "end_line": 1334,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 9)-(line 1301,col 47)",
            "(line 1302,col 9)-(line 1302,col 45)",
            "(line 1303,col 9)-(line 1303,col 44)",
            "(line 1304,col 9)-(line 1304,col 44)",
            "(line 1305,col 9)-(line 1305,col 44)",
            "(line 1306,col 9)-(line 1306,col 45)",
            "(line 1307,col 9)-(line 1307,col 45)",
            "(line 1308,col 9)-(line 1308,col 45)",
            "(line 1310,col 9)-(line 1310,col 50)",
            "(line 1311,col 9)-(line 1311,col 43)",
            "(line 1312,col 9)-(line 1312,col 43)",
            "(line 1315,col 9)-(line 1315,col 66)",
            "(line 1317,col 9)-(line 1317,col 45)",
            "(line 1319,col 9)-(line 1319,col 67)",
            "(line 1321,col 9)-(line 1321,col 44)",
            "(line 1322,col 9)-(line 1322,col 65)",
            "(line 1324,col 9)-(line 1324,col 45)",
            "(line 1325,col 9)-(line 1325,col 67)",
            "(line 1327,col 9)-(line 1327,col 45)",
            "(line 1329,col 9)-(line 1329,col 38)",
            "(line 1330,col 9)-(line 1330,col 45)",
            "(line 1331,col 9)-(line 1331,col 46)",
            "(line 1333,col 9)-(line 1333,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String()",
        "snippet": "    public void testLastIndexOf_String() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        \n        assertEquals(2, sb.lastIndexOf(\"a\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n        \n        assertEquals(2, sb.lastIndexOf(\"ab\"));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n        \n        assertEquals(3, sb.lastIndexOf(\"b\"));\n        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\"));\n        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\"));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null));\n    }",
        "begin_line": 1336,
        "end_line": 1356,
        "comment": "",
        "child_ranges": [
            "(line 1337,col 9)-(line 1337,col 47)",
            "(line 1339,col 9)-(line 1339,col 45)",
            "(line 1341,col 9)-(line 1341,col 67)",
            "(line 1343,col 9)-(line 1343,col 46)",
            "(line 1345,col 9)-(line 1345,col 69)",
            "(line 1347,col 9)-(line 1347,col 45)",
            "(line 1348,col 9)-(line 1348,col 67)",
            "(line 1350,col 9)-(line 1350,col 46)",
            "(line 1351,col 9)-(line 1351,col 69)",
            "(line 1353,col 9)-(line 1353,col 46)",
            "(line 1355,col 9)-(line 1355,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String_int()",
        "snippet": "    public void testLastIndexOf_String_int() {\n        StrBuilder sb = new StrBuilder(\"abab\");\n        assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n        assertEquals(0, sb.lastIndexOf(\"a\", 0));\n        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n        assertEquals(2, sb.lastIndexOf(\"a\", 2));\n        assertEquals(2, sb.lastIndexOf(\"a\", 3));\n        assertEquals(2, sb.lastIndexOf(\"a\", 4));\n        assertEquals(2, sb.lastIndexOf(\"a\", 5));\n        \n        assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\n        assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n        \n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n        \n        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n        //should work like String#lastIndexOf\n        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n        \n        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n        \n        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n        \n        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n        \n        sb = new StrBuilder(\"xyzabc\");\n        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n        \n        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n    }",
        "begin_line": 1358,
        "end_line": 1392,
        "comment": "",
        "child_ranges": [
            "(line 1359,col 9)-(line 1359,col 47)",
            "(line 1360,col 9)-(line 1360,col 50)",
            "(line 1361,col 9)-(line 1361,col 48)",
            "(line 1362,col 9)-(line 1362,col 48)",
            "(line 1363,col 9)-(line 1363,col 48)",
            "(line 1364,col 9)-(line 1364,col 48)",
            "(line 1365,col 9)-(line 1365,col 48)",
            "(line 1366,col 9)-(line 1366,col 48)",
            "(line 1368,col 9)-(line 1368,col 54)",
            "(line 1369,col 9)-(line 1369,col 71)",
            "(line 1370,col 9)-(line 1370,col 71)",
            "(line 1373,col 9)-(line 1373,col 73)",
            "(line 1375,col 9)-(line 1375,col 49)",
            "(line 1377,col 9)-(line 1377,col 75)",
            "(line 1379,col 9)-(line 1379,col 48)",
            "(line 1380,col 9)-(line 1380,col 73)",
            "(line 1382,col 9)-(line 1382,col 49)",
            "(line 1383,col 9)-(line 1383,col 75)",
            "(line 1385,col 9)-(line 1385,col 49)",
            "(line 1387,col 9)-(line 1387,col 38)",
            "(line 1388,col 9)-(line 1388,col 59)",
            "(line 1389,col 9)-(line 1389,col 50)",
            "(line 1391,col 9)-(line 1391,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher()",
        "snippet": "    public void testIndexOf_StrMatcher() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.indexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n    }",
        "begin_line": 1395,
        "end_line": 1410,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1396,col 9)-(line 1396,col 41)",
            "(line 1397,col 9)-(line 1397,col 56)",
            "(line 1398,col 9)-(line 1398,col 66)",
            "(line 1400,col 9)-(line 1400,col 27)",
            "(line 1401,col 9)-(line 1401,col 65)",
            "(line 1402,col 9)-(line 1402,col 65)",
            "(line 1403,col 9)-(line 1403,col 63)",
            "(line 1404,col 9)-(line 1404,col 65)",
            "(line 1405,col 9)-(line 1405,col 63)",
            "(line 1406,col 9)-(line 1406,col 56)",
            "(line 1408,col 9)-(line 1408,col 34)",
            "(line 1409,col 9)-(line 1409,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int()",
        "snippet": "    public void testIndexOf_StrMatcher_int() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\n        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\n        \n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\n        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\n        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\n        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\n        \n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\n        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n    }",
        "begin_line": 1412,
        "end_line": 1449,
        "comment": "",
        "child_ranges": [
            "(line 1413,col 9)-(line 1413,col 41)",
            "(line 1414,col 9)-(line 1414,col 59)",
            "(line 1415,col 9)-(line 1415,col 69)",
            "(line 1416,col 9)-(line 1416,col 69)",
            "(line 1418,col 9)-(line 1418,col 27)",
            "(line 1419,col 9)-(line 1419,col 69)",
            "(line 1420,col 9)-(line 1420,col 68)",
            "(line 1421,col 9)-(line 1421,col 69)",
            "(line 1422,col 9)-(line 1422,col 70)",
            "(line 1424,col 9)-(line 1424,col 69)",
            "(line 1425,col 9)-(line 1425,col 68)",
            "(line 1426,col 9)-(line 1426,col 68)",
            "(line 1427,col 9)-(line 1427,col 68)",
            "(line 1428,col 9)-(line 1428,col 68)",
            "(line 1429,col 9)-(line 1429,col 69)",
            "(line 1430,col 9)-(line 1430,col 69)",
            "(line 1431,col 9)-(line 1431,col 69)",
            "(line 1433,col 9)-(line 1433,col 67)",
            "(line 1434,col 9)-(line 1434,col 66)",
            "(line 1435,col 9)-(line 1435,col 66)",
            "(line 1436,col 9)-(line 1436,col 67)",
            "(line 1437,col 9)-(line 1437,col 68)",
            "(line 1439,col 9)-(line 1439,col 66)",
            "(line 1440,col 9)-(line 1440,col 59)",
            "(line 1442,col 9)-(line 1442,col 42)",
            "(line 1443,col 9)-(line 1443,col 57)",
            "(line 1444,col 9)-(line 1444,col 57)",
            "(line 1445,col 9)-(line 1445,col 58)",
            "(line 1446,col 9)-(line 1446,col 59)",
            "(line 1447,col 9)-(line 1447,col 59)",
            "(line 1448,col 9)-(line 1448,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher()",
        "snippet": "    public void testLastIndexOf_StrMatcher() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n        \n        sb.append(\"ab bd\");\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\n        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n        \n        sb.append(\" A1 junction\");\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n    }",
        "begin_line": 1451,
        "end_line": 1466,
        "comment": "",
        "child_ranges": [
            "(line 1452,col 9)-(line 1452,col 41)",
            "(line 1453,col 9)-(line 1453,col 60)",
            "(line 1454,col 9)-(line 1454,col 70)",
            "(line 1456,col 9)-(line 1456,col 27)",
            "(line 1457,col 9)-(line 1457,col 69)",
            "(line 1458,col 9)-(line 1458,col 69)",
            "(line 1459,col 9)-(line 1459,col 67)",
            "(line 1460,col 9)-(line 1460,col 69)",
            "(line 1461,col 9)-(line 1461,col 67)",
            "(line 1462,col 9)-(line 1462,col 60)",
            "(line 1464,col 9)-(line 1464,col 34)",
            "(line 1465,col 9)-(line 1465,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()",
        "snippet": "    public void testLastIndexOf_StrMatcher_int() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\n        \n        sb.append(\"ab bd\");\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\n        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\n        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\n        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\n        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n        \n        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\n        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n        \n        sb.append(\" A1 junction with A2\");\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\n        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\n        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds\n        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\n    }",
        "begin_line": 1468,
        "end_line": 1506,
        "comment": "",
        "child_ranges": [
            "(line 1469,col 9)-(line 1469,col 41)",
            "(line 1470,col 9)-(line 1470,col 63)",
            "(line 1471,col 9)-(line 1471,col 73)",
            "(line 1472,col 9)-(line 1472,col 73)",
            "(line 1473,col 9)-(line 1473,col 74)",
            "(line 1475,col 9)-(line 1475,col 27)",
            "(line 1476,col 9)-(line 1476,col 74)",
            "(line 1477,col 9)-(line 1477,col 72)",
            "(line 1478,col 9)-(line 1478,col 72)",
            "(line 1479,col 9)-(line 1479,col 73)",
            "(line 1481,col 9)-(line 1481,col 74)",
            "(line 1482,col 9)-(line 1482,col 73)",
            "(line 1483,col 9)-(line 1483,col 72)",
            "(line 1484,col 9)-(line 1484,col 72)",
            "(line 1485,col 9)-(line 1485,col 72)",
            "(line 1486,col 9)-(line 1486,col 72)",
            "(line 1487,col 9)-(line 1487,col 72)",
            "(line 1488,col 9)-(line 1488,col 72)",
            "(line 1490,col 9)-(line 1490,col 72)",
            "(line 1491,col 9)-(line 1491,col 71)",
            "(line 1492,col 9)-(line 1492,col 70)",
            "(line 1493,col 9)-(line 1493,col 70)",
            "(line 1494,col 9)-(line 1494,col 71)",
            "(line 1496,col 9)-(line 1496,col 70)",
            "(line 1497,col 9)-(line 1497,col 63)",
            "(line 1499,col 9)-(line 1499,col 42)",
            "(line 1500,col 9)-(line 1500,col 62)",
            "(line 1501,col 9)-(line 1501,col 62)",
            "(line 1502,col 9)-(line 1502,col 61)",
            "(line 1503,col 9)-(line 1503,col 62)",
            "(line 1504,col 9)-(line 1504,col 62)",
            "(line 1505,col 9)-(line 1505,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.Anonymous-adb25e40-b041-4d29-8a56-02b3615d00ed.isMatch(char[], int, int, int)",
        "snippet": "        @Override\n        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n            if (buffer[pos] == 'A') {\n                pos++;\n                if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') {\n                    return 2;\n                }\n            }\n            return 0;\n        }",
        "begin_line": 1509,
        "end_line": 1518,
        "comment": "",
        "child_ranges": [
            "(line 1511,col 13)-(line 1516,col 13)",
            "(line 1517,col 13)-(line 1517,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer()",
        "snippet": "    public void testAsTokenizer() throws Exception {\n        // from Javadoc\n        StrBuilder b = new StrBuilder();\n        b.append(\"a b \");\n        StrTokenizer t = b.asTokenizer();\n        \n        String[] tokens1 = t.getTokenArray();\n        assertEquals(2, tokens1.length);\n        assertEquals(\"a\", tokens1[0]);\n        assertEquals(\"b\", tokens1[1]);\n        assertEquals(2, t.size());\n        \n        b.append(\"c d \");\n        String[] tokens2 = t.getTokenArray();\n        assertEquals(2, tokens2.length);\n        assertEquals(\"a\", tokens2[0]);\n        assertEquals(\"b\", tokens2[1]);\n        assertEquals(2, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        \n        t.reset();\n        String[] tokens3 = t.getTokenArray();\n        assertEquals(4, tokens3.length);\n        assertEquals(\"a\", tokens3[0]);\n        assertEquals(\"b\", tokens3[1]);\n        assertEquals(\"c\", tokens3[2]);\n        assertEquals(\"d\", tokens3[3]);\n        assertEquals(4, t.size());\n        assertEquals(\"a\", t.next());\n        assertEquals(\"b\", t.next());\n        assertEquals(\"c\", t.next());\n        assertEquals(\"d\", t.next());\n        \n        assertEquals(\"a b c d \", t.getContent());\n    }",
        "begin_line": 1522,
        "end_line": 1557,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1524,col 9)-(line 1524,col 40)",
            "(line 1525,col 9)-(line 1525,col 25)",
            "(line 1526,col 9)-(line 1526,col 41)",
            "(line 1528,col 9)-(line 1528,col 45)",
            "(line 1529,col 9)-(line 1529,col 40)",
            "(line 1530,col 9)-(line 1530,col 38)",
            "(line 1531,col 9)-(line 1531,col 38)",
            "(line 1532,col 9)-(line 1532,col 34)",
            "(line 1534,col 9)-(line 1534,col 25)",
            "(line 1535,col 9)-(line 1535,col 45)",
            "(line 1536,col 9)-(line 1536,col 40)",
            "(line 1537,col 9)-(line 1537,col 38)",
            "(line 1538,col 9)-(line 1538,col 38)",
            "(line 1539,col 9)-(line 1539,col 34)",
            "(line 1540,col 9)-(line 1540,col 36)",
            "(line 1541,col 9)-(line 1541,col 36)",
            "(line 1543,col 9)-(line 1543,col 18)",
            "(line 1544,col 9)-(line 1544,col 45)",
            "(line 1545,col 9)-(line 1545,col 40)",
            "(line 1546,col 9)-(line 1546,col 38)",
            "(line 1547,col 9)-(line 1547,col 38)",
            "(line 1548,col 9)-(line 1548,col 38)",
            "(line 1549,col 9)-(line 1549,col 38)",
            "(line 1550,col 9)-(line 1550,col 34)",
            "(line 1551,col 9)-(line 1551,col 36)",
            "(line 1552,col 9)-(line 1552,col 36)",
            "(line 1553,col 9)-(line 1553,col 36)",
            "(line 1554,col 9)-(line 1554,col 36)",
            "(line 1556,col 9)-(line 1556,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsReader()",
        "snippet": "    public void testAsReader() throws Exception {\n        StrBuilder sb = new StrBuilder(\"some text\");\n        Reader reader = sb.asReader();\n        assertEquals(true, reader.ready());\n        char[] buf = new char[40];\n        assertEquals(9, reader.read(buf));\n        assertEquals(\"some text\", new String(buf, 0, 9));\n        \n        assertEquals(-1, reader.read());\n        assertEquals(false, reader.ready());\n        assertEquals(0, reader.skip(2));\n        assertEquals(0, reader.skip(-1));\n        \n        assertEquals(true, reader.markSupported());\n        reader = sb.asReader();\n        assertEquals('s', reader.read());\n        reader.mark(-1);\n        char[] array = new char[3];\n        assertEquals(3, reader.read(array, 0, 3));\n        assertEquals('o', array[0]);\n        assertEquals('m', array[1]);\n        assertEquals('e', array[2]);\n        reader.reset();\n        assertEquals(1, reader.read(array, 1, 1));\n        assertEquals('o', array[0]);\n        assertEquals('o', array[1]);\n        assertEquals('e', array[2]);\n        assertEquals(2, reader.skip(2));\n        assertEquals(' ', reader.read());\n        \n        assertEquals(true, reader.ready());\n        reader.close();\n        assertEquals(true, reader.ready());\n        \n        reader = sb.asReader();\n        array = new char[3];\n        try {\n            reader.read(array, -1, 0);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, -1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 100, 1);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, 0, 100);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        try {\n            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (IndexOutOfBoundsException ex) {}\n        \n        assertEquals(0, reader.read(array, 0, 0));\n        assertEquals(0, array[0]);\n        assertEquals(0, array[1]);\n        assertEquals(0, array[2]);\n        \n        reader.skip(9);\n        assertEquals(-1, reader.read(array, 0, 1));\n        \n        reader.reset();\n        array = new char[30];\n        assertEquals(9, reader.read(array, 0, 30));\n    }",
        "begin_line": 1560,
        "end_line": 1628,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1561,col 9)-(line 1561,col 52)",
            "(line 1562,col 9)-(line 1562,col 38)",
            "(line 1563,col 9)-(line 1563,col 43)",
            "(line 1564,col 9)-(line 1564,col 34)",
            "(line 1565,col 9)-(line 1565,col 42)",
            "(line 1566,col 9)-(line 1566,col 57)",
            "(line 1568,col 9)-(line 1568,col 40)",
            "(line 1569,col 9)-(line 1569,col 44)",
            "(line 1570,col 9)-(line 1570,col 40)",
            "(line 1571,col 9)-(line 1571,col 41)",
            "(line 1573,col 9)-(line 1573,col 51)",
            "(line 1574,col 9)-(line 1574,col 31)",
            "(line 1575,col 9)-(line 1575,col 41)",
            "(line 1576,col 9)-(line 1576,col 24)",
            "(line 1577,col 9)-(line 1577,col 35)",
            "(line 1578,col 9)-(line 1578,col 50)",
            "(line 1579,col 9)-(line 1579,col 36)",
            "(line 1580,col 9)-(line 1580,col 36)",
            "(line 1581,col 9)-(line 1581,col 36)",
            "(line 1582,col 9)-(line 1582,col 23)",
            "(line 1583,col 9)-(line 1583,col 50)",
            "(line 1584,col 9)-(line 1584,col 36)",
            "(line 1585,col 9)-(line 1585,col 36)",
            "(line 1586,col 9)-(line 1586,col 36)",
            "(line 1587,col 9)-(line 1587,col 40)",
            "(line 1588,col 9)-(line 1588,col 41)",
            "(line 1590,col 9)-(line 1590,col 43)",
            "(line 1591,col 9)-(line 1591,col 23)",
            "(line 1592,col 9)-(line 1592,col 43)",
            "(line 1594,col 9)-(line 1594,col 31)",
            "(line 1595,col 9)-(line 1595,col 28)",
            "(line 1596,col 9)-(line 1599,col 49)",
            "(line 1600,col 9)-(line 1603,col 49)",
            "(line 1604,col 9)-(line 1607,col 49)",
            "(line 1608,col 9)-(line 1611,col 49)",
            "(line 1612,col 9)-(line 1615,col 49)",
            "(line 1617,col 9)-(line 1617,col 50)",
            "(line 1618,col 9)-(line 1618,col 34)",
            "(line 1619,col 9)-(line 1619,col 34)",
            "(line 1620,col 9)-(line 1620,col 34)",
            "(line 1622,col 9)-(line 1622,col 23)",
            "(line 1623,col 9)-(line 1623,col 51)",
            "(line 1625,col 9)-(line 1625,col 23)",
            "(line 1626,col 9)-(line 1626,col 29)",
            "(line 1627,col 9)-(line 1627,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testAsWriter()",
        "snippet": "    public void testAsWriter() throws Exception {\n        StrBuilder sb = new StrBuilder(\"base\");\n        Writer writer = sb.asWriter();\n        \n        writer.write('l');\n        assertEquals(\"basel\", sb.toString());\n        \n        writer.write(new char[] {'i', 'n'});\n        assertEquals(\"baselin\", sb.toString());\n        \n        writer.write(new char[] {'n', 'e', 'r'}, 1, 2);\n        assertEquals(\"baseliner\", sb.toString());\n        \n        writer.write(\" rout\");\n        assertEquals(\"baseliner rout\", sb.toString());\n        \n        writer.write(\"ping that server\", 1, 3);\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.flush();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.close();  // no effect\n        assertEquals(\"baseliner routing\", sb.toString());\n        \n        writer.write(\" hi\");  // works after close\n        assertEquals(\"baseliner routing hi\", sb.toString());\n        \n        sb.setLength(4);  // mix and match\n        writer.write('d');\n        assertEquals(\"based\", sb.toString());\n    }",
        "begin_line": 1631,
        "end_line": 1662,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1632,col 9)-(line 1632,col 47)",
            "(line 1633,col 9)-(line 1633,col 38)",
            "(line 1635,col 9)-(line 1635,col 26)",
            "(line 1636,col 9)-(line 1636,col 45)",
            "(line 1638,col 9)-(line 1638,col 44)",
            "(line 1639,col 9)-(line 1639,col 47)",
            "(line 1641,col 9)-(line 1641,col 55)",
            "(line 1642,col 9)-(line 1642,col 49)",
            "(line 1644,col 9)-(line 1644,col 30)",
            "(line 1645,col 9)-(line 1645,col 54)",
            "(line 1647,col 9)-(line 1647,col 47)",
            "(line 1648,col 9)-(line 1648,col 57)",
            "(line 1650,col 9)-(line 1650,col 23)",
            "(line 1651,col 9)-(line 1651,col 57)",
            "(line 1653,col 9)-(line 1653,col 23)",
            "(line 1654,col 9)-(line 1654,col 57)",
            "(line 1656,col 9)-(line 1656,col 28)",
            "(line 1657,col 9)-(line 1657,col 60)",
            "(line 1659,col 9)-(line 1659,col 24)",
            "(line 1660,col 9)-(line 1660,col 26)",
            "(line 1661,col 9)-(line 1661,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEqualsIgnoreCase()",
        "snippet": "    public void testEqualsIgnoreCase() {\n        StrBuilder sb1 = new StrBuilder();\n        StrBuilder sb2 = new StrBuilder();\n        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n        \n        sb1.append(\"abc\");\n        assertEquals(false, sb1.equalsIgnoreCase(sb2));\n        \n        sb2.append(\"ABC\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n        \n        sb2.clear().append(\"aBc\");\n        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n    }",
        "begin_line": 1665,
        "end_line": 1685,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1666,col 9)-(line 1666,col 42)",
            "(line 1667,col 9)-(line 1667,col 42)",
            "(line 1668,col 9)-(line 1668,col 54)",
            "(line 1669,col 9)-(line 1669,col 54)",
            "(line 1670,col 9)-(line 1670,col 54)",
            "(line 1672,col 9)-(line 1672,col 26)",
            "(line 1673,col 9)-(line 1673,col 55)",
            "(line 1675,col 9)-(line 1675,col 26)",
            "(line 1676,col 9)-(line 1676,col 54)",
            "(line 1678,col 9)-(line 1678,col 34)",
            "(line 1679,col 9)-(line 1679,col 54)",
            "(line 1680,col 9)-(line 1680,col 54)",
            "(line 1681,col 9)-(line 1681,col 54)",
            "(line 1683,col 9)-(line 1683,col 34)",
            "(line 1684,col 9)-(line 1684,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testEquals()",
        "snippet": "    public void testEquals() {\n        StrBuilder sb1 = new StrBuilder();\n        StrBuilder sb2 = new StrBuilder();\n        assertEquals(true, sb1.equals(sb2));\n        assertEquals(true, sb1.equals(sb1));\n        assertEquals(true, sb2.equals(sb2));\n        assertEquals(true, sb1.equals((Object) sb2));\n        \n        sb1.append(\"abc\");\n        assertEquals(false, sb1.equals(sb2));\n        assertEquals(false, sb1.equals((Object) sb2));\n        \n        sb2.append(\"ABC\");\n        assertEquals(false, sb1.equals(sb2));\n        assertEquals(false, sb1.equals((Object) sb2));\n        \n        sb2.clear().append(\"abc\");\n        assertEquals(true, sb1.equals(sb2));\n        assertEquals(true, sb1.equals((Object) sb2));\n        \n        assertEquals(false, sb1.equals(new Integer(1)));\n        assertEquals(false, sb1.equals(\"abc\"));\n    }",
        "begin_line": 1688,
        "end_line": 1710,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1689,col 9)-(line 1689,col 42)",
            "(line 1690,col 9)-(line 1690,col 42)",
            "(line 1691,col 9)-(line 1691,col 44)",
            "(line 1692,col 9)-(line 1692,col 44)",
            "(line 1693,col 9)-(line 1693,col 44)",
            "(line 1694,col 9)-(line 1694,col 53)",
            "(line 1696,col 9)-(line 1696,col 26)",
            "(line 1697,col 9)-(line 1697,col 45)",
            "(line 1698,col 9)-(line 1698,col 54)",
            "(line 1700,col 9)-(line 1700,col 26)",
            "(line 1701,col 9)-(line 1701,col 45)",
            "(line 1702,col 9)-(line 1702,col 54)",
            "(line 1704,col 9)-(line 1704,col 34)",
            "(line 1705,col 9)-(line 1705,col 44)",
            "(line 1706,col 9)-(line 1706,col 53)",
            "(line 1708,col 9)-(line 1708,col 56)",
            "(line 1709,col 9)-(line 1709,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        StrBuilder sb = new StrBuilder();\n        int hc1a = sb.hashCode();\n        int hc1b = sb.hashCode();\n        assertEquals(0, hc1a);\n        assertEquals(hc1a, hc1b);\n        \n        sb.append(\"abc\");\n        int hc2a = sb.hashCode();\n        int hc2b = sb.hashCode();\n        assertEquals(true, hc2a != 0);\n        assertEquals(hc2a, hc2b);\n    }",
        "begin_line": 1713,
        "end_line": 1725,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1714,col 9)-(line 1714,col 41)",
            "(line 1715,col 9)-(line 1715,col 33)",
            "(line 1716,col 9)-(line 1716,col 33)",
            "(line 1717,col 9)-(line 1717,col 30)",
            "(line 1718,col 9)-(line 1718,col 33)",
            "(line 1720,col 9)-(line 1720,col 25)",
            "(line 1721,col 9)-(line 1721,col 33)",
            "(line 1722,col 9)-(line 1722,col 33)",
            "(line 1723,col 9)-(line 1723,col 38)",
            "(line 1724,col 9)-(line 1724,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToString()",
        "snippet": "    public void testToString() {\n        StrBuilder sb = new StrBuilder(\"abc\");\n        assertEquals(\"abc\", sb.toString());\n    }",
        "begin_line": 1728,
        "end_line": 1731,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1729,col 9)-(line 1729,col 46)",
            "(line 1730,col 9)-(line 1730,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testToStringBuffer()",
        "snippet": "    public void testToStringBuffer() {\n        StrBuilder sb = new StrBuilder();\n        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n        \n        sb.append(\"junit\");\n        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n    }",
        "begin_line": 1734,
        "end_line": 1740,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1735,col 9)-(line 1735,col 41)",
            "(line 1736,col 9)-(line 1736,col 84)",
            "(line 1738,col 9)-(line 1738,col 27)",
            "(line 1739,col 9)-(line 1739,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang294()",
        "snippet": "    public void testLang294() {\n        StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\n        sb.deleteAll(\"\\n%BLAH%\");\n        assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString()); \n    }",
        "begin_line": 1743,
        "end_line": 1747,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1744,col 9)-(line 1744,col 93)",
            "(line 1745,col 9)-(line 1745,col 33)",
            "(line 1746,col 9)-(line 1746,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294()",
        "snippet": "    public void testIndexOfLang294() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertEquals(-1, sb.indexOf(\"three\"));\n    }",
        "begin_line": 1749,
        "end_line": 1753,
        "comment": "",
        "child_ranges": [
            "(line 1750,col 9)-(line 1750,col 54)",
            "(line 1751,col 9)-(line 1751,col 32)",
            "(line 1752,col 9)-(line 1752,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang295()",
        "snippet": "    public void testLang295() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\n        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n    }",
        "begin_line": 1756,
        "end_line": 1761,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1757,col 9)-(line 1757,col 54)",
            "(line 1758,col 9)-(line 1758,col 32)",
            "(line 1759,col 9)-(line 1759,col 108)",
            "(line 1760,col 9)-(line 1760,col 111)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang412Right()",
        "snippet": "    public void testLang412Right() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n    }",
        "begin_line": 1764,
        "end_line": 1768,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1765,col 9)-(line 1765,col 41)",
            "(line 1766,col 9)-(line 1766,col 51)",
            "(line 1767,col 9)-(line 1767,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.StrBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
        "signature": "org.apache.commons.lang3.text.StrBuilderTest.testLang412Left()",
        "snippet": "    public void testLang412Left() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n    }",
        "begin_line": 1770,
        "end_line": 1774,
        "comment": "",
        "child_ranges": [
            "(line 1771,col 9)-(line 1771,col 41)",
            "(line 1772,col 9)-(line 1772,col 50)",
            "(line 1773,col 9)-(line 1773,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow()",
        "snippet": "    public void testBelow() {\n        NumericEntityEscaper nee = NumericEntityEscaper.below('F');\n\n        String input = \"ADFGZ\";\n        String result = nee.translate(input);\n        assertEquals(\"Failed to escape numeric entities via the below method\", \"&#65;&#68;FGZ\", result);\n    }",
        "begin_line": 27,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 67)",
            "(line 30,col 9)-(line 30,col 31)",
            "(line 31,col 9)-(line 31,col 45)",
            "(line 32,col 9)-(line 32,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween()",
        "snippet": "    public void testBetween() {\n        NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L');\n\n        String input = \"ADFGZ\";\n        String result = nee.translate(input);\n        assertEquals(\"Failed to escape numeric entities via the between method\", \"AD&#70;&#71;Z\", result);\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 74)",
            "(line 38,col 9)-(line 38,col 31)",
            "(line 39,col 9)-(line 39,col 45)",
            "(line 40,col 9)-(line 40,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove()",
        "snippet": "    public void testAbove() {\n        NumericEntityEscaper nee = NumericEntityEscaper.above('F');\n\n        String input = \"ADFGZ\";\n        String result = nee.translate(input);\n        assertEquals(\"Failed to escape numeric entities via the above method\", \"ADF&#71;&#90;\", result);\n    }",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 67)",
            "(line 46,col 9)-(line 46,col 31)",
            "(line 47,col 9)-(line 47,col 45)",
            "(line 48,col 9)-(line 48,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslatorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslatorTest.testBasicLookup()",
        "snippet": "    public void testBasicLookup() throws IOException {\n        LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { \"one\", \"two\" } });\n        StringWriter out = new StringWriter();\n        int result = lt.translate(\"one\", 0, out);\n        assertEquals(\"Incorrect codepoint consumption\", 3, result);\n        assertEquals(\"Incorrect value\", \"two\", out.toString());\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 94)",
            "(line 32,col 9)-(line 32,col 46)",
            "(line 33,col 9)-(line 33,col 49)",
            "(line 34,col 9)-(line 34,col 67)",
            "(line 35,col 9)-(line 35,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUPlus()",
        "snippet": "    public void testUPlus() {}",
        "begin_line": 28,
        "end_line": 28,
        "comment": " Requested in LANG-507",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUuuuu()",
        "snippet": "    public void testUuuuu() {\n        UnicodeUnescaper uu = new UnicodeUnescaper();\n\n        String input = \"\\\\uuuuuuuu0047\";\n        String result = uu.translate(input);\n        assertEquals(\"Failed to unescape unicode characters with many 'u' characters\", \"G\", result);\n    }",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 53)",
            "(line 48,col 9)-(line 48,col 40)",
            "(line 49,col 9)-(line 49,col 44)",
            "(line 50,col 9)-(line 50,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testLessThanFour()",
        "snippet": "    public void testLessThanFour() {\n        UnicodeUnescaper uu = new UnicodeUnescaper();\n\n        String input = \"\\\\0047\\\\u006\";\n        try {\n            uu.translate(input);\n            fail(\"A lack of digits in a unicode escape sequence failed to throw an exception\");\n        } catch(IllegalArgumentException iae) {\n            // expected\n        }\n    }",
        "begin_line": 53,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 53)",
            "(line 56,col 9)-(line 56,col 38)",
            "(line 57,col 9)-(line 62,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBelow()",
        "snippet": "    public void testBelow() {\n        UnicodeEscaper nee = UnicodeEscaper.below('F');\n\n        String input = \"ADFGZ\";\n        String result = nee.translate(input);\n        assertEquals(\"Failed to escape unicode characters via the below method\", \"\\\\u0041\\\\u0044FGZ\", result);\n    }",
        "begin_line": 27,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 55)",
            "(line 30,col 9)-(line 30,col 31)",
            "(line 31,col 9)-(line 31,col 45)",
            "(line 32,col 9)-(line 32,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBetween()",
        "snippet": "    public void testBetween() {\n        UnicodeEscaper nee = UnicodeEscaper.between('F', 'L');\n\n        String input = \"ADFGZ\";\n        String result = nee.translate(input);\n        assertEquals(\"Failed to escape unicode characters via the between method\", \"AD\\\\u0046\\\\u0047Z\", result);\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 62)",
            "(line 38,col 9)-(line 38,col 31)",
            "(line 39,col 9)-(line 39,col 45)",
            "(line 40,col 9)-(line 40,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testAbove()",
        "snippet": "    public void testAbove() {\n        UnicodeEscaper nee = UnicodeEscaper.above('F');\n\n        String input = \"ADFGZ\";\n        String result = nee.translate(input);\n        assertEquals(\"Failed to escape unicode characters via the above method\", \"ADF\\\\u0047\\\\u005A\", result);\n    }",
        "begin_line": 43,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 55)",
            "(line 46,col 9)-(line 46,col 31)",
            "(line 47,col 9)-(line 47,col 45)",
            "(line 48,col 9)-(line 48,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArraysTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArraysTest.testConstructorExists()",
        "snippet": "    public void testConstructorExists() {\n        new EntityArrays();\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.DurationFormatUtilsTest(java.lang.String)",
        "snippet": "    public DurationFormatUtilsTest(String s) {\n        super(s);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DurationFormatUtils());\n        Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n    }",
        "begin_line": 43,
        "end_line": 50,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 49)",
            "(line 45,col 9)-(line 45,col 84)",
            "(line 46,col 9)-(line 46,col 37)",
            "(line 47,col 9)-(line 47,col 70)",
            "(line 48,col 9)-(line 48,col 88)",
            "(line 49,col 9)-(line 49,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords()",
        "snippet": "    public void testFormatDurationWords() {\n        String text = null;\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);\n        assertEquals(\"50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);\n        assertEquals(\"1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);\n        assertEquals(\"2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);\n        assertEquals(\"2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);\n        assertEquals(\"1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);\n        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);\n        assertEquals(\"50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);\n        assertEquals(\"1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);\n        assertEquals(\"2 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);\n        assertEquals(\"2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);\n        assertEquals(\"1 hour 12 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);\n        assertEquals(\"1 day\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 2 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);\n        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);\n        assertEquals(\"0 days 1 hour 12 minutes\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);\n        assertEquals(\"1 day\", text);\n\n        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);\n        assertEquals(\"0 days 1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n        assertEquals(\"1 day 1 hour 12 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n        assertEquals(\"2 days 1 hour 12 minutes 0 seconds\", text);\n        for (int i = 2; i < 31; i++) {\n            text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false);\n            // assertEquals(i + \" days 0 hours 0 minutes 0 seconds\", text);\n            //            \n            // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours\n            // -2 minutes -47...>\n            // at junit.framework.Assert.assertEquals(Assert.java:81)\n            // at junit.framework.Assert.assertEquals(Assert.java:87)\n            // at\n            // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124)\n            // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n            // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n            // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n            // at java.lang.reflect.Method.invoke(Method.java:324)\n            // at junit.framework.TestCase.runTest(TestCase.java:154)\n            // at junit.framework.TestCase.runBare(TestCase.java:127)\n            // at junit.framework.TestResult$1.protect(TestResult.java:106)\n            // at junit.framework.TestResult.runProtected(TestResult.java:124)\n            // at junit.framework.TestResult.run(TestResult.java:109)\n            // at junit.framework.TestCase.run(TestCase.java:118)\n            // at junit.framework.TestSuite.runTest(TestSuite.java:208)\n            // at junit.framework.TestSuite.run(TestSuite.java:203)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n        }\n    }",
        "begin_line": 53,
        "end_line": 135,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 27)",
            "(line 56,col 9)-(line 56,col 79)",
            "(line 57,col 9)-(line 57,col 41)",
            "(line 58,col 9)-(line 58,col 79)",
            "(line 59,col 9)-(line 59,col 49)",
            "(line 60,col 9)-(line 60,col 80)",
            "(line 61,col 9)-(line 61,col 50)",
            "(line 62,col 9)-(line 62,col 80)",
            "(line 63,col 9)-(line 63,col 49)",
            "(line 64,col 9)-(line 64,col 84)",
            "(line 65,col 9)-(line 65,col 58)",
            "(line 66,col 9)-(line 66,col 89)",
            "(line 67,col 9)-(line 67,col 64)",
            "(line 69,col 9)-(line 69,col 78)",
            "(line 70,col 9)-(line 70,col 41)",
            "(line 71,col 9)-(line 71,col 78)",
            "(line 72,col 9)-(line 72,col 49)",
            "(line 73,col 9)-(line 73,col 79)",
            "(line 74,col 9)-(line 74,col 40)",
            "(line 75,col 9)-(line 75,col 79)",
            "(line 76,col 9)-(line 76,col 49)",
            "(line 77,col 9)-(line 77,col 83)",
            "(line 78,col 9)-(line 78,col 48)",
            "(line 79,col 9)-(line 79,col 88)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 82,col 9)-(line 82,col 79)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 79)",
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 86,col 80)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 80)",
            "(line 89,col 9)-(line 89,col 64)",
            "(line 90,col 9)-(line 90,col 84)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 89)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 95,col 9)-(line 95,col 80)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 80)",
            "(line 98,col 9)-(line 98,col 64)",
            "(line 99,col 9)-(line 99,col 81)",
            "(line 100,col 9)-(line 100,col 65)",
            "(line 101,col 9)-(line 101,col 81)",
            "(line 102,col 9)-(line 102,col 64)",
            "(line 103,col 9)-(line 103,col 85)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 107)",
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 111)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 134,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords()",
        "snippet": "    public void testFormatDurationPluralWords() {\n        long oneSecond = 1000;\n        long oneMinute = oneSecond * 60;\n        long oneHour = oneMinute * 60;\n        long oneDay = oneHour * 24;\n        String text = null;\n\n        text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 1 second\", text);\n        text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 2 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);\n        assertEquals(\"0 days 0 hours 0 minutes 11 seconds\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);\n        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);\n        assertEquals(\"0 days 0 hours 11 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);\n        assertEquals(\"0 days 0 hours 1 minute 1 second\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneHour, false, false);\n        assertEquals(\"0 days 1 hour 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);\n        assertEquals(\"0 days 2 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);\n        assertEquals(\"0 days 11 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);\n        assertEquals(\"0 days 1 hour 1 minute 1 second\", text);\n\n        text = DurationFormatUtils.formatDurationWords(oneDay, false, false);\n        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);\n        assertEquals(\"2 days 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);\n        assertEquals(\"11 days 0 hours 0 minutes 0 seconds\", text);\n        text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);\n        assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\n    }",
        "begin_line": 140,
        "end_line": 180,
        "comment": "\n     * Tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 30)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 38)",
            "(line 144,col 9)-(line 144,col 35)",
            "(line 145,col 9)-(line 145,col 27)",
            "(line 147,col 9)-(line 147,col 80)",
            "(line 148,col 9)-(line 148,col 64)",
            "(line 149,col 9)-(line 149,col 84)",
            "(line 150,col 9)-(line 150,col 65)",
            "(line 151,col 9)-(line 151,col 85)",
            "(line 152,col 9)-(line 152,col 66)",
            "(line 154,col 9)-(line 154,col 80)",
            "(line 155,col 9)-(line 155,col 64)",
            "(line 156,col 9)-(line 156,col 84)",
            "(line 157,col 9)-(line 157,col 65)",
            "(line 158,col 9)-(line 158,col 85)",
            "(line 159,col 9)-(line 159,col 66)",
            "(line 160,col 9)-(line 160,col 92)",
            "(line 161,col 9)-(line 161,col 63)",
            "(line 163,col 9)-(line 163,col 78)",
            "(line 164,col 9)-(line 164,col 64)",
            "(line 165,col 9)-(line 165,col 82)",
            "(line 166,col 9)-(line 166,col 65)",
            "(line 167,col 9)-(line 167,col 83)",
            "(line 168,col 9)-(line 168,col 66)",
            "(line 169,col 9)-(line 169,col 102)",
            "(line 170,col 9)-(line 170,col 62)",
            "(line 172,col 9)-(line 172,col 77)",
            "(line 173,col 9)-(line 173,col 64)",
            "(line 174,col 9)-(line 174,col 81)",
            "(line 175,col 9)-(line 175,col 65)",
            "(line 176,col 9)-(line 176,col 82)",
            "(line 177,col 9)-(line 177,col 66)",
            "(line 178,col 9)-(line 178,col 111)",
            "(line 179,col 9)-(line 179,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS()",
        "snippet": "    public void testFormatDurationHMS() {\n        long time = 0;\n        assertEquals(\"0:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 1;\n        assertEquals(\"0:00:00.001\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 15;\n        assertEquals(\"0:00:00.015\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 165;\n        assertEquals(\"0:00:00.165\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 1675;\n        assertEquals(\"0:00:01.675\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 13465;\n        assertEquals(\"0:00:13.465\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 72789;\n        assertEquals(\"0:01:12.789\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 12789 + 32 * 60000;\n        assertEquals(\"0:32:12.789\", DurationFormatUtils.formatDurationHMS(time));\n\n        time = 12789 + 62 * 60000;\n        assertEquals(\"1:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\n    }",
        "begin_line": 182,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 22)",
            "(line 184,col 9)-(line 184,col 81)",
            "(line 186,col 9)-(line 186,col 17)",
            "(line 187,col 9)-(line 187,col 81)",
            "(line 189,col 9)-(line 189,col 18)",
            "(line 190,col 9)-(line 190,col 81)",
            "(line 192,col 9)-(line 192,col 19)",
            "(line 193,col 9)-(line 193,col 81)",
            "(line 195,col 9)-(line 195,col 20)",
            "(line 196,col 9)-(line 196,col 81)",
            "(line 198,col 9)-(line 198,col 21)",
            "(line 199,col 9)-(line 199,col 81)",
            "(line 201,col 9)-(line 201,col 21)",
            "(line 202,col 9)-(line 202,col 81)",
            "(line 204,col 9)-(line 204,col 34)",
            "(line 205,col 9)-(line 205,col 81)",
            "(line 207,col 9)-(line 207,col 34)",
            "(line 208,col 9)-(line 208,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO()",
        "snippet": "    public void testFormatDurationISO() {\n        assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatDurationISO(0L));\n        assertEquals(\"P0Y0M0DT0H0M0.001S\", DurationFormatUtils.formatDurationISO(1L));\n        assertEquals(\"P0Y0M0DT0H0M0.010S\", DurationFormatUtils.formatDurationISO(10L));\n        assertEquals(\"P0Y0M0DT0H0M0.100S\", DurationFormatUtils.formatDurationISO(100L));\n        assertEquals(\"P0Y0M0DT0H1M15.321S\", DurationFormatUtils.formatDurationISO(75321L));\n    }",
        "begin_line": 211,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 86)",
            "(line 213,col 9)-(line 213,col 86)",
            "(line 214,col 9)-(line 214,col 87)",
            "(line 215,col 9)-(line 215,col 88)",
            "(line 216,col 9)-(line 216,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration()",
        "snippet": "    public void testFormatDuration() {\n        long duration = 0;\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"m\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"s\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"S\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\"));\n\n        duration = 60 * 1000;\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n        assertEquals(\"1\", DurationFormatUtils.formatDuration(duration, \"m\"));\n        assertEquals(\"60\", DurationFormatUtils.formatDuration(duration, \"s\"));\n        assertEquals(\"60000\", DurationFormatUtils.formatDuration(duration, \"S\"));\n        assertEquals(\"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\"));\n\n        Calendar base = Calendar.getInstance();\n        base.set(2000, 0, 1, 0, 0, 0);\n        base.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2003, 1, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        duration = cal.getTime().getTime() - base.getTime().getTime(); // duration from 2000-01-01 to cal\n        // don't use 1970 in test as time zones were less reliable in 1970 than now\n        // remember that duration formatting ignores time zones, working on strict hour lengths\n        int days = 366 + 365 + 365 + 31;\n        assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\n    }",
        "begin_line": 219,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 26)",
            "(line 221,col 9)-(line 221,col 77)",
            "(line 222,col 9)-(line 222,col 77)",
            "(line 223,col 9)-(line 223,col 77)",
            "(line 224,col 9)-(line 224,col 77)",
            "(line 225,col 9)-(line 225,col 77)",
            "(line 226,col 9)-(line 226,col 77)",
            "(line 227,col 9)-(line 227,col 77)",
            "(line 228,col 9)-(line 228,col 83)",
            "(line 229,col 9)-(line 229,col 83)",
            "(line 230,col 9)-(line 230,col 83)",
            "(line 232,col 9)-(line 232,col 29)",
            "(line 233,col 9)-(line 233,col 77)",
            "(line 234,col 9)-(line 234,col 77)",
            "(line 235,col 9)-(line 235,col 77)",
            "(line 236,col 9)-(line 236,col 77)",
            "(line 237,col 9)-(line 237,col 77)",
            "(line 238,col 9)-(line 238,col 78)",
            "(line 239,col 9)-(line 239,col 81)",
            "(line 240,col 9)-(line 240,col 85)",
            "(line 242,col 9)-(line 242,col 47)",
            "(line 243,col 9)-(line 243,col 38)",
            "(line 244,col 9)-(line 244,col 42)",
            "(line 246,col 9)-(line 246,col 46)",
            "(line 247,col 9)-(line 247,col 37)",
            "(line 248,col 9)-(line 248,col 41)",
            "(line 249,col 9)-(line 249,col 70)",
            "(line 252,col 9)-(line 252,col 40)",
            "(line 253,col 9)-(line 253,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO()",
        "snippet": "    public void testFormatPeriodISO() {\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar base = Calendar.getInstance(timeZone);\n        base.set(1970, 0, 1, 0, 0, 0);\n        base.set(Calendar.MILLISECOND, 0);\n\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002, 1, 23, 9, 11, 12);\n        cal.set(Calendar.MILLISECOND, 1);\n        String text;\n        // repeat a test from testDateTimeISO to compare extended and not extended.\n        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        // test fixture is the same as above, but now with extended format.\n        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n        assertEquals(\"P32Y1M22DT9H11M12.001S\", text);\n        // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration\n        cal.set(1971, 1, 3, 10, 30, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n        assertEquals(\"P1Y1M2DT10H30M0.000S\", text);\n        // want a way to say 'don't print the seconds in format()' or other fields for that matter:\n        // assertEquals(\"P1Y2M3DT10H30M\", text);\n    }",
        "begin_line": 256,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 257,col 9)-(line 257,col 58)",
            "(line 258,col 9)-(line 258,col 55)",
            "(line 259,col 9)-(line 259,col 38)",
            "(line 260,col 9)-(line 260,col 42)",
            "(line 262,col 9)-(line 262,col 54)",
            "(line 263,col 9)-(line 263,col 40)",
            "(line 264,col 9)-(line 264,col 41)",
            "(line 265,col 9)-(line 265,col 20)",
            "(line 267,col 9)-(line 267,col 73)",
            "(line 268,col 9)-(line 268,col 56)",
            "(line 270,col 9)-(line 271,col 82)",
            "(line 272,col 9)-(line 272,col 53)",
            "(line 274,col 9)-(line 274,col 39)",
            "(line 275,col 9)-(line 275,col 41)",
            "(line 276,col 9)-(line 277,col 82)",
            "(line 278,col 9)-(line 278,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod()",
        "snippet": "    public void testFormatPeriod() {\n        Calendar cal1970 = Calendar.getInstance();\n        cal1970.set(1970, 0, 1, 0, 0, 0);\n        cal1970.set(Calendar.MILLISECOND, 0);\n        long time1970 = cal1970.getTime().getTime();\n\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\"));\n        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\"));\n\n        long time = time1970 + 60 * 1000;\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\"));\n        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\"));\n        assertEquals(\"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\"));\n        assertEquals(\"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\"));\n        assertEquals(\"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\"));\n        assertEquals(\"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\"));\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(1973, 6, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n\n        cal.set(1973, 10, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n\n        cal.set(1974, 0, 1, 0, 0, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        time = cal.getTime().getTime();\n        assertEquals(\"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n        assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n        assertEquals(\"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\"));\n        assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\n    }",
        "begin_line": 283,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 41)",
            "(line 286,col 9)-(line 286,col 45)",
            "(line 287,col 9)-(line 287,col 52)",
            "(line 289,col 9)-(line 289,col 85)",
            "(line 290,col 9)-(line 290,col 85)",
            "(line 291,col 9)-(line 291,col 85)",
            "(line 292,col 9)-(line 292,col 85)",
            "(line 293,col 9)-(line 293,col 85)",
            "(line 294,col 9)-(line 294,col 85)",
            "(line 295,col 9)-(line 295,col 85)",
            "(line 296,col 9)-(line 296,col 91)",
            "(line 297,col 9)-(line 297,col 91)",
            "(line 298,col 9)-(line 298,col 91)",
            "(line 300,col 9)-(line 300,col 41)",
            "(line 301,col 9)-(line 301,col 81)",
            "(line 302,col 9)-(line 302,col 81)",
            "(line 303,col 9)-(line 303,col 81)",
            "(line 304,col 9)-(line 304,col 81)",
            "(line 305,col 9)-(line 305,col 81)",
            "(line 306,col 9)-(line 306,col 82)",
            "(line 307,col 9)-(line 307,col 85)",
            "(line 308,col 9)-(line 308,col 89)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 37)",
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 39)",
            "(line 314,col 9)-(line 314,col 83)",
            "(line 315,col 9)-(line 315,col 115)",
            "(line 316,col 9)-(line 316,col 89)",
            "(line 318,col 9)-(line 318,col 38)",
            "(line 319,col 9)-(line 319,col 41)",
            "(line 320,col 9)-(line 320,col 39)",
            "(line 321,col 9)-(line 321,col 84)",
            "(line 322,col 9)-(line 322,col 116)",
            "(line 323,col 9)-(line 323,col 89)",
            "(line 325,col 9)-(line 325,col 37)",
            "(line 326,col 9)-(line 326,col 41)",
            "(line 327,col 9)-(line 327,col 39)",
            "(line 328,col 9)-(line 328,col 83)",
            "(line 329,col 9)-(line 329,col 115)",
            "(line 330,col 9)-(line 330,col 89)",
            "(line 331,col 9)-(line 331,col 82)",
            "(line 332,col 9)-(line 332,col 83)",
            "(line 333,col 9)-(line 333,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx()",
        "snippet": "    public void testLexx() {\n        // tests each constant\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(DurationFormatUtils.y, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx(\"yMdHmsS\"));\n\n        // tests the ISO8601-like\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(\"H:mm:ss.SSS\"));\n\n        // test the iso extended format\n        assertArrayEquals(new DurationFormatUtils.Token[]{\n            new DurationFormatUtils.Token(new StringBuffer(\"P\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.y, 4),\n            new DurationFormatUtils.Token(new StringBuffer(\"Y\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"DT\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"H\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n            new DurationFormatUtils.Token(DurationFormatUtils.S, 1),\n            new DurationFormatUtils.Token(new StringBuffer(\"S\"), 1)}, DurationFormatUtils\n                .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\n\n        // test failures in equals\n        DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4);\n        assertFalse(\"Token equal to non-Token class. \", token.equals(new Object()));\n        assertFalse(\"Token equal to Token with wrong value class. \", token.equals(new DurationFormatUtils.Token(\n                new Object())));\n        assertFalse(\"Token equal to Token with different count. \", token.equals(new DurationFormatUtils.Token(\n                DurationFormatUtils.y, 1)));\n        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);\n        assertTrue(\"Token with Number value not equal to itself. \", numToken.equals(numToken));\n    }",
        "begin_line": 336,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 345,col 107)",
            "(line 348,col 9)-(line 355,col 111)",
            "(line 358,col 9)-(line 374,col 72)",
            "(line 377,col 9)-(line 377,col 98)",
            "(line 378,col 9)-(line 378,col 84)",
            "(line 379,col 9)-(line 380,col 32)",
            "(line 381,col 9)-(line 382,col 44)",
            "(line 383,col 9)-(line 383,col 94)",
            "(line 384,col 9)-(line 384,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401()",
        "snippet": "    public void testBugzilla38401() {\n        assertEqualDuration( \"0000/00/30 16:00:00 000\", new int[] { 2006, 0, 26, 18, 47, 34 }, \n                             new int[] { 2006, 1, 26, 10, 47, 34 }, \"yyyy/MM/dd HH:mm:ss SSS\");\n    }",
        "begin_line": 389,
        "end_line": 392,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38401",
        "child_ranges": [
            "(line 390,col 9)-(line 391,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281()",
        "snippet": "    public void testJiraLang281() {\n        assertEqualDuration( \"09\", new int[] { 2005, 11, 31, 0, 0, 0 }, \n                             new int[] { 2006, 9, 6, 0, 0, 0 }, \"MM\");\n    }",
        "begin_line": 395,
        "end_line": 398,
        "comment": " https://issues.apache.org/jira/browse/LANG-281",
        "child_ranges": [
            "(line 396,col 9)-(line 397,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testLowDurations()",
        "snippet": "    public void testLowDurations() {\n        for(int hr=0; hr < 24; hr++) {\n            for(int min=0; min < 60; min++) {\n                for(int sec=0; sec < 60; sec++) {\n                    assertEqualDuration( hr + \":\" + min + \":\" + sec, \n                                         new int[] { 2000, 0, 1, 0, 0, 0, 0 },\n                                         new int[] { 2000, 0, 1, hr, min, sec },\n                                         \"H:m:s\"\n                                       );\n                }\n            }\n        }\n    }",
        "begin_line": 401,
        "end_line": 413,
        "comment": " Testing the under a day range in DurationFormatUtils.formatPeriod",
        "child_ranges": [
            "(line 402,col 9)-(line 412,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations()",
        "snippet": "    public void testEdgeDurations() {\n        assertEqualDuration( \"01\", new int[] { 2006, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM\");\n        assertEqualDuration( \"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 0, 15, 0, 0, 0 }, \"MM\");\n        assertEqualDuration( \"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 0, 16, 0, 0, 0 }, \"MM\");\n        assertEqualDuration( \"11\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n                             new int[] { 2006, 0, 14, 0, 0, 0 }, \"MM\");\n        \n        assertEqualDuration( \"01 26\", new int[] { 2006, 0, 15, 0, 0, 0 },\n                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM dd\");\n        assertEqualDuration( \"54\", new int[] { 2006, 0, 15, 0, 0, 0 },\n                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"dd\"); \n        \n        assertEqualDuration( \"09 12\", new int[] { 2006, 1, 20, 0, 0, 0 },\n                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"MM dd\");\n        assertEqualDuration( \"287\", new int[] { 2006, 1, 20, 0, 0, 0 },\n                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"11 30\", new int[] { 2006, 0, 2, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n        assertEqualDuration( \"364\", new int[] { 2006, 0, 2, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"12 00\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n        assertEqualDuration( \"365\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n    \n        assertEqualDuration( \"31\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                new int[] { 2006, 1, 1, 0, 0, 0 }, \"dd\"); \n        \n        assertEqualDuration( \"92\", new int[] { 2005, 9, 1, 0, 0, 0 },\n                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"77\", new int[] { 2005, 9, 16, 0, 0, 0 },\n                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        // test month larger in start than end\n        assertEqualDuration( \"136\", new int[] { 2005, 9, 16, 0, 0, 0 },\n                new int[] { 2006, 2, 1, 0, 0, 0 }, \"dd\"); \n        // test when start in leap year\n        assertEqualDuration( \"136\", new int[] { 2004, 9, 16, 0, 0, 0 },\n                new int[] { 2005, 2, 1, 0, 0, 0 }, \"dd\"); \n        // test when end in leap year\n        assertEqualDuration( \"137\", new int[] { 2003, 9, 16, 0, 0, 0 },\n                new int[] { 2004, 2, 1, 0, 0, 0 }, \"dd\");         \n        // test when end in leap year but less than end of feb\n        assertEqualDuration( \"135\", new int[] { 2003, 9, 16, 0, 0, 0 },\n                new int[] { 2004, 1, 28, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"364\", new int[] { 2007, 0, 2, 0, 0, 0 },\n                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"729\", new int[] { 2006, 0, 2, 0, 0, 0 },\n                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"365\", new int[] { 2007, 2, 2, 0, 0, 0 },\n                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"333\", new int[] { 2007, 1, 2, 0, 0, 0 },\n                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"28\", new int[] { 2008, 1, 2, 0, 0, 0 },\n                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n        assertEqualDuration( \"393\", new int[] { 2007, 1, 2, 0, 0, 0 },\n                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"369\", new int[] { 2004, 0, 29, 0, 0, 0 },\n                new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"338\", new int[] { 2004, 1, 29, 0, 0, 0 },\n                new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"28\", new int[] { 2004, 2, 8, 0, 0, 0 },\n                new int[] { 2004, 3, 5, 0, 0, 0 }, \"dd\"); \n\n        assertEqualDuration( \"48\", new int[] { 1992, 1, 29, 0, 0, 0 },\n                new int[] { 1996, 1, 29, 0, 0, 0 }, \"M\"); \n        \n        \n        // this seems odd - and will fail if I throw it in as a brute force \n        // below as it expects the answer to be 12. It's a tricky edge case\n        assertEqualDuration( \"11\", new int[] { 1996, 1, 29, 0, 0, 0 },\n                new int[] { 1997, 1, 28, 0, 0, 0 }, \"M\"); \n        // again - this seems odd\n        assertEqualDuration( \"11 28\", new int[] { 1996, 1, 29, 0, 0, 0 },\n                new int[] { 1997, 1, 28, 0, 0, 0 }, \"M d\"); \n        \n    }",
        "begin_line": 416,
        "end_line": 503,
        "comment": " Attempting to test edge cases in DurationFormatUtils.formatPeriod",
        "child_ranges": [
            "(line 417,col 9)-(line 418,col 71)",
            "(line 419,col 9)-(line 420,col 71)",
            "(line 421,col 9)-(line 422,col 71)",
            "(line 423,col 9)-(line 424,col 71)",
            "(line 426,col 9)-(line 427,col 74)",
            "(line 428,col 9)-(line 429,col 71)",
            "(line 431,col 9)-(line 432,col 74)",
            "(line 433,col 9)-(line 434,col 71)",
            "(line 436,col 9)-(line 437,col 73)",
            "(line 438,col 9)-(line 439,col 70)",
            "(line 441,col 9)-(line 442,col 73)",
            "(line 443,col 9)-(line 444,col 70)",
            "(line 446,col 9)-(line 447,col 57)",
            "(line 449,col 9)-(line 450,col 57)",
            "(line 451,col 9)-(line 452,col 57)",
            "(line 455,col 9)-(line 456,col 57)",
            "(line 458,col 9)-(line 459,col 57)",
            "(line 461,col 9)-(line 462,col 57)",
            "(line 464,col 9)-(line 465,col 58)",
            "(line 467,col 9)-(line 468,col 57)",
            "(line 469,col 9)-(line 470,col 57)",
            "(line 472,col 9)-(line 473,col 57)",
            "(line 474,col 9)-(line 475,col 57)",
            "(line 477,col 9)-(line 478,col 57)",
            "(line 479,col 9)-(line 480,col 57)",
            "(line 482,col 9)-(line 483,col 57)",
            "(line 485,col 9)-(line 486,col 57)",
            "(line 488,col 9)-(line 489,col 57)",
            "(line 491,col 9)-(line 492,col 57)",
            "(line 497,col 9)-(line 498,col 57)",
            "(line 500,col 9)-(line 501,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.testDurationsByBruteForce()",
        "snippet": "    public void testDurationsByBruteForce() {\n        bruteForce(2006, 0, 1, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(2006, 0, 2, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(2007, 1, 2, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(2004, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\n        bruteForce(1996, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\n\n        bruteForce(1969, 1, 28, \"M\", Calendar.MONTH);  // tests for 48 years\n        //bruteForce(1996, 1, 29, \"M\", Calendar.MONTH);  // this will fail\n    }",
        "begin_line": 505,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 506,col 9)-(line 506,col 59)",
            "(line 507,col 9)-(line 507,col 59)",
            "(line 508,col 9)-(line 508,col 59)",
            "(line 509,col 9)-(line 509,col 60)",
            "(line 510,col 9)-(line 510,col 60)",
            "(line 512,col 9)-(line 512,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.bruteForce(int, int, int, java.lang.String, int)",
        "snippet": "    private void bruteForce(int year, int month, int day, String format, int calendarType) {\n        String msg = year + \"-\" + month + \"-\" + day + \" to \";\n        Calendar c = Calendar.getInstance();\n        c.set(year, month, day, 0, 0, 0);\n        int[] array1 = new int[] { year, month, day, 0, 0, 0 };\n        int[] array2 = new int[] { year, month, day, 0, 0, 0 };\n        for (int i=0; i < FOUR_YEARS; i++) {\n            array2[0] = c.get(Calendar.YEAR);\n            array2[1] = c.get(Calendar.MONTH);\n            array2[2] = c.get(Calendar.DAY_OF_MONTH);\n            String tmpMsg = msg + array2[0] + \"-\" + array2[1] + \"-\" + array2[2] + \" at \";\n            assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format );\n            c.add(calendarType, 1);\n        }\n    }",
        "begin_line": 528,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 529,col 9)-(line 529,col 61)",
            "(line 530,col 9)-(line 530,col 44)",
            "(line 531,col 9)-(line 531,col 41)",
            "(line 532,col 9)-(line 532,col 63)",
            "(line 533,col 9)-(line 533,col 63)",
            "(line 534,col 9)-(line 541,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, int[], int[], java.lang.String)",
        "snippet": "    private void assertEqualDuration(String expected, int[] start, int[] end, String format) {\n        assertEqualDuration(null, expected, start, end, format);\n    }",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, java.lang.String, int[], int[], java.lang.String)",
        "snippet": "    private void assertEqualDuration(String message, String expected, int[] start, int[] end, String format) {\n        Calendar cal1 = Calendar.getInstance();\n        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);\n        cal1.set(Calendar.MILLISECOND, 0);\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);\n        cal2.set(Calendar.MILLISECOND, 0);\n        long milli1 = cal1.getTime().getTime();\n        long milli2 = cal2.getTime().getTime();\n        String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);\n        if (message == null) {\n            assertEquals(expected, result);\n        } else {\n            assertEquals(message, expected, result);\n        }\n    }",
        "begin_line": 547,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 47)",
            "(line 549,col 9)-(line 549,col 77)",
            "(line 550,col 9)-(line 550,col 42)",
            "(line 551,col 9)-(line 551,col 47)",
            "(line 552,col 9)-(line 552,col 65)",
            "(line 553,col 9)-(line 553,col 42)",
            "(line 554,col 9)-(line 554,col 47)",
            "(line 555,col 9)-(line 555,col 47)",
            "(line 556,col 9)-(line 556,col 81)",
            "(line 557,col 9)-(line 561,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DurationFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DurationFormatUtilsTest.assertArrayEquals(org.apache.commons.lang3.time.DurationFormatUtils.Token[], org.apache.commons.lang3.time.DurationFormatUtils.Token[])",
        "snippet": "    private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n        assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n        for (int i = 0; i < obj1.length; i++) {\n            assertTrue(\"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2[i], obj1[i].equals(obj2[i]));\n        }\n    }",
        "begin_line": 564,
        "end_line": 569,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 78)",
            "(line 566,col 9)-(line 568,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.DateUtilsTest(java.lang.String)",
        "snippet": "    public DateUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);\n        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n\n        dateAmPm1 = dateTimeParser.parse(\"February 3, 2002 01:10:00.000\");\n        dateAmPm2 = dateTimeParser.parse(\"February 3, 2002 11:10:00.000\");\n        dateAmPm3 = dateTimeParser.parse(\"February 3, 2002 13:10:00.000\");\n        dateAmPm4 = dateTimeParser.parse(\"February 3, 2002 19:10:00.000\");\n        date0 = dateTimeParser.parse(\"February 3, 2002 12:34:56.789\");\n        date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");\n        date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");\n        defaultZone = TimeZone.getDefault();\n        zone = TimeZone.getTimeZone(\"MET\");\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");\n        date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");\n        date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");\n        date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");\n        date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");\n        date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");\n        dateTimeParser.setTimeZone(defaultZone);\n        TimeZone.setDefault(defaultZone);\n        calAmPm1 = Calendar.getInstance();\n        calAmPm1.setTime(dateAmPm1);\n        calAmPm2 = Calendar.getInstance();\n        calAmPm2.setTime(dateAmPm2);\n        calAmPm3 = Calendar.getInstance();\n        calAmPm3.setTime(dateAmPm3);\n        calAmPm4 = Calendar.getInstance();\n        calAmPm4.setTime(dateAmPm4);\n        cal1 = Calendar.getInstance();\n        cal1.setTime(date1);\n        cal2 = Calendar.getInstance();\n        cal2.setTime(date2);\n        TimeZone.setDefault(zone);\n        cal3 = Calendar.getInstance();\n        cal3.setTime(date3);\n        cal4 = Calendar.getInstance();\n        cal4.setTime(date4);\n        cal5 = Calendar.getInstance();\n        cal5.setTime(date5);\n        cal6 = Calendar.getInstance();\n        cal6.setTime(date6);\n        cal7 = Calendar.getInstance();\n        cal7.setTime(date7);\n        cal8 = Calendar.getInstance();\n        cal8.setTime(date8);\n        TimeZone.setDefault(defaultZone);\n    }",
        "begin_line": 87,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 22)",
            "(line 91,col 9)-(line 91,col 74)",
            "(line 92,col 9)-(line 92,col 90)",
            "(line 94,col 9)-(line 94,col 74)",
            "(line 95,col 9)-(line 95,col 74)",
            "(line 96,col 9)-(line 96,col 74)",
            "(line 97,col 9)-(line 97,col 74)",
            "(line 98,col 9)-(line 98,col 70)",
            "(line 99,col 9)-(line 99,col 71)",
            "(line 100,col 9)-(line 100,col 70)",
            "(line 101,col 9)-(line 101,col 44)",
            "(line 102,col 9)-(line 102,col 43)",
            "(line 103,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 41)",
            "(line 105,col 9)-(line 105,col 68)",
            "(line 106,col 9)-(line 106,col 68)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 110,col 9)-(line 110,col 70)",
            "(line 111,col 9)-(line 111,col 48)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 36)",
            "(line 115,col 9)-(line 115,col 42)",
            "(line 116,col 9)-(line 116,col 36)",
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 36)",
            "(line 119,col 9)-(line 119,col 42)",
            "(line 120,col 9)-(line 120,col 36)",
            "(line 121,col 9)-(line 121,col 38)",
            "(line 122,col 9)-(line 122,col 28)",
            "(line 123,col 9)-(line 123,col 38)",
            "(line 124,col 9)-(line 124,col 28)",
            "(line 125,col 9)-(line 125,col 34)",
            "(line 126,col 9)-(line 126,col 38)",
            "(line 127,col 9)-(line 127,col 28)",
            "(line 128,col 9)-(line 128,col 38)",
            "(line 129,col 9)-(line 129,col 28)",
            "(line 130,col 9)-(line 130,col 38)",
            "(line 131,col 9)-(line 131,col 28)",
            "(line 132,col 9)-(line 132,col 38)",
            "(line 133,col 9)-(line 133,col 28)",
            "(line 134,col 9)-(line 134,col 38)",
            "(line 135,col 9)-(line 135,col 28)",
            "(line 136,col 9)-(line 136,col 38)",
            "(line 137,col 9)-(line 137,col 28)",
            "(line 138,col 9)-(line 138,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DateUtils());\n        Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));\n    }",
        "begin_line": 142,
        "end_line": 149,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 39)",
            "(line 144,col 9)-(line 144,col 74)",
            "(line 145,col 9)-(line 145,col 37)",
            "(line 146,col 9)-(line 146,col 70)",
            "(line 147,col 9)-(line 147,col 78)",
            "(line 148,col 9)-(line 148,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Date()",
        "snippet": "    public void testIsSameDay_Date() {\n        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameDay(date1, date2));\n        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameDay(date1, date2));\n        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameDay(date1, date2));\n        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameDay(date1, date2));\n        try {\n            DateUtils.isSameDay((Date) null, (Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 152,
        "end_line": 166,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 73)",
            "(line 154,col 9)-(line 154,col 73)",
            "(line 155,col 9)-(line 155,col 62)",
            "(line 156,col 9)-(line 156,col 69)",
            "(line 157,col 9)-(line 157,col 63)",
            "(line 158,col 9)-(line 158,col 69)",
            "(line 159,col 9)-(line 159,col 62)",
            "(line 160,col 9)-(line 160,col 69)",
            "(line 161,col 9)-(line 161,col 63)",
            "(line 162,col 9)-(line 165,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Cal()",
        "snippet": "    public void testIsSameDay_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);\n        GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);\n        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n        cal2.add(Calendar.DAY_OF_YEAR, 1);\n        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n        cal1.add(Calendar.DAY_OF_YEAR, 1);\n        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n        cal2.add(Calendar.YEAR, 1);\n        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n        try {\n            DateUtils.isSameDay((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 169,
        "end_line": 183,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 75)",
            "(line 171,col 9)-(line 171,col 75)",
            "(line 172,col 9)-(line 172,col 60)",
            "(line 173,col 9)-(line 173,col 42)",
            "(line 174,col 9)-(line 174,col 61)",
            "(line 175,col 9)-(line 175,col 42)",
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 35)",
            "(line 178,col 9)-(line 178,col 61)",
            "(line 179,col 9)-(line 182,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Date()",
        "snippet": "    public void testIsSameInstant_Date() {\n        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n        try {\n            DateUtils.isSameInstant((Date) null, (Date) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 186,
        "end_line": 200,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 73)",
            "(line 188,col 9)-(line 188,col 73)",
            "(line 189,col 9)-(line 189,col 66)",
            "(line 190,col 9)-(line 190,col 69)",
            "(line 191,col 9)-(line 191,col 67)",
            "(line 192,col 9)-(line 192,col 69)",
            "(line 193,col 9)-(line 193,col 66)",
            "(line 194,col 9)-(line 194,col 69)",
            "(line 195,col 9)-(line 195,col 67)",
            "(line 196,col 9)-(line 199,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Cal()",
        "snippet": "    public void testIsSameInstant_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));\n        try {\n            DateUtils.isSameInstant((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 203,
        "end_line": 218,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 86)",
            "(line 205,col 9)-(line 205,col 86)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 207,col 9)-(line 207,col 42)",
            "(line 208,col 9)-(line 208,col 40)",
            "(line 209,col 9)-(line 209,col 42)",
            "(line 210,col 9)-(line 210,col 65)",
            "(line 212,col 9)-(line 212,col 40)",
            "(line 213,col 9)-(line 213,col 64)",
            "(line 214,col 9)-(line 217,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal()",
        "snippet": "    public void testIsSameLocalTime_Cal() {\n        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n        cal1.set(2004, 6, 9, 13, 45, 0);\n        cal1.set(Calendar.MILLISECOND, 0);\n        cal2.set(2004, 6, 9, 13, 45, 0);\n        cal2.set(Calendar.MILLISECOND, 0);\n        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n        \n        cal2.set(2004, 6, 9, 11, 45, 0);\n        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n        try {\n            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 221,
        "end_line": 236,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 86)",
            "(line 223,col 9)-(line 223,col 86)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 225,col 9)-(line 225,col 42)",
            "(line 226,col 9)-(line 226,col 40)",
            "(line 227,col 9)-(line 227,col 42)",
            "(line 228,col 9)-(line 228,col 66)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 231,col 9)-(line 231,col 67)",
            "(line 232,col 9)-(line 235,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testParseDate()",
        "snippet": "    public void testParseDate() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\n        String dateStr = \"1972-12-03\";\n        String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};\n        Date date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        dateStr = \"1972-338\";\n        date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        dateStr = \"19721203\";\n        date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        try {\n            DateUtils.parseDate(\"PURPLE\", parsers);\n            fail();\n        } catch (ParseException ex) {}\n        try {\n            DateUtils.parseDate(\"197212AB\", parsers);\n            fail();\n        } catch (ParseException ex) {}\n        try {\n            DateUtils.parseDate(null, parsers);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.parseDate(dateStr, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.parseDate(dateStr, new String[0]);\n            fail();\n        } catch (ParseException ex) {}\n    }",
        "begin_line": 239,
        "end_line": 274,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 67)",
            "(line 241,col 9)-(line 241,col 38)",
            "(line 242,col 9)-(line 242,col 85)",
            "(line 243,col 9)-(line 243,col 58)",
            "(line 244,col 9)-(line 244,col 42)",
            "(line 246,col 9)-(line 246,col 29)",
            "(line 247,col 9)-(line 247,col 53)",
            "(line 248,col 9)-(line 248,col 42)",
            "(line 250,col 9)-(line 250,col 29)",
            "(line 251,col 9)-(line 251,col 53)",
            "(line 252,col 9)-(line 252,col 42)",
            "(line 254,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 261,col 38)",
            "(line 262,col 9)-(line 265,col 48)",
            "(line 266,col 9)-(line 269,col 48)",
            "(line 270,col 9)-(line 273,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testParseDateWithLeniency()",
        "snippet": "    public void testParseDateWithLeniency() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);\n        String dateStr = \"02 942, 1996\";\n        String[] parsers = new String[] {\"MM DDD, yyyy\"};\n        \n        Date date = DateUtils.parseDate(dateStr, parsers);\n        assertEquals(cal.getTime(), date);\n        \n        try {\n            date = DateUtils.parseDateStrictly(dateStr, parsers);\n            fail();\n        } catch (ParseException ex) {}\n    }",
        "begin_line": 276,
        "end_line": 288,
        "comment": " LANG-486",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 67)",
            "(line 278,col 9)-(line 278,col 40)",
            "(line 279,col 9)-(line 279,col 57)",
            "(line 281,col 9)-(line 281,col 58)",
            "(line 282,col 9)-(line 282,col 42)",
            "(line 284,col 9)-(line 287,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddYears()",
        "snippet": "    public void testAddYears() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addYears(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addYears(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addYears(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n    }",
        "begin_line": 291,
        "end_line": 307,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 42)",
            "(line 293,col 9)-(line 293,col 50)",
            "(line 294,col 9)-(line 294,col 36)",
            "(line 295,col 9)-(line 295,col 49)",
            "(line 296,col 9)-(line 296,col 51)",
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 36)",
            "(line 300,col 9)-(line 300,col 49)",
            "(line 301,col 9)-(line 301,col 51)",
            "(line 303,col 9)-(line 303,col 46)",
            "(line 304,col 9)-(line 304,col 36)",
            "(line 305,col 9)-(line 305,col 49)",
            "(line 306,col 9)-(line 306,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddMonths()",
        "snippet": "    public void testAddMonths() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMonths(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMonths(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 7, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMonths(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n    }",
        "begin_line": 310,
        "end_line": 326,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 42)",
            "(line 312,col 9)-(line 312,col 51)",
            "(line 313,col 9)-(line 313,col 36)",
            "(line 314,col 9)-(line 314,col 49)",
            "(line 315,col 9)-(line 315,col 51)",
            "(line 317,col 9)-(line 317,col 46)",
            "(line 318,col 9)-(line 318,col 36)",
            "(line 319,col 9)-(line 319,col 49)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 322,col 9)-(line 322,col 47)",
            "(line 323,col 9)-(line 323,col 36)",
            "(line 324,col 9)-(line 324,col 49)",
            "(line 325,col 9)-(line 325,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks()",
        "snippet": "    public void testAddWeeks() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addWeeks(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addWeeks(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);\n        \n        result = DateUtils.addWeeks(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july\n        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june\n    }",
        "begin_line": 329,
        "end_line": 345,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 42)",
            "(line 331,col 9)-(line 331,col 50)",
            "(line 332,col 9)-(line 332,col 36)",
            "(line 333,col 9)-(line 333,col 49)",
            "(line 334,col 9)-(line 334,col 51)",
            "(line 336,col 9)-(line 336,col 45)",
            "(line 337,col 9)-(line 337,col 36)",
            "(line 338,col 9)-(line 338,col 49)",
            "(line 339,col 9)-(line 339,col 52)",
            "(line 341,col 9)-(line 341,col 46)",
            "(line 342,col 9)-(line 342,col 36)",
            "(line 343,col 9)-(line 343,col 49)",
            "(line 344,col 9)-(line 344,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddDays()",
        "snippet": "    public void testAddDays() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addDays(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addDays(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);\n        \n        result = DateUtils.addDays(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);\n    }",
        "begin_line": 348,
        "end_line": 364,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 42)",
            "(line 350,col 9)-(line 350,col 49)",
            "(line 351,col 9)-(line 351,col 36)",
            "(line 352,col 9)-(line 352,col 49)",
            "(line 353,col 9)-(line 353,col 51)",
            "(line 355,col 9)-(line 355,col 44)",
            "(line 356,col 9)-(line 356,col 36)",
            "(line 357,col 9)-(line 357,col 49)",
            "(line 358,col 9)-(line 358,col 51)",
            "(line 360,col 9)-(line 360,col 45)",
            "(line 361,col 9)-(line 361,col 36)",
            "(line 362,col 9)-(line 362,col 49)",
            "(line 363,col 9)-(line 363,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddHours()",
        "snippet": "    public void testAddHours() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addHours(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addHours(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);\n        \n        result = DateUtils.addHours(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);\n    }",
        "begin_line": 367,
        "end_line": 383,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 42)",
            "(line 369,col 9)-(line 369,col 50)",
            "(line 370,col 9)-(line 370,col 36)",
            "(line 371,col 9)-(line 371,col 49)",
            "(line 372,col 9)-(line 372,col 51)",
            "(line 374,col 9)-(line 374,col 45)",
            "(line 375,col 9)-(line 375,col 36)",
            "(line 376,col 9)-(line 376,col 49)",
            "(line 377,col 9)-(line 377,col 51)",
            "(line 379,col 9)-(line 379,col 46)",
            "(line 380,col 9)-(line 380,col 36)",
            "(line 381,col 9)-(line 381,col 49)",
            "(line 382,col 9)-(line 382,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddMinutes()",
        "snippet": "    public void testAddMinutes() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMinutes(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMinutes(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);\n        \n        result = DateUtils.addMinutes(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);\n    }",
        "begin_line": 386,
        "end_line": 402,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 42)",
            "(line 388,col 9)-(line 388,col 52)",
            "(line 389,col 9)-(line 389,col 36)",
            "(line 390,col 9)-(line 390,col 49)",
            "(line 391,col 9)-(line 391,col 51)",
            "(line 393,col 9)-(line 393,col 47)",
            "(line 394,col 9)-(line 394,col 36)",
            "(line 395,col 9)-(line 395,col 49)",
            "(line 396,col 9)-(line 396,col 51)",
            "(line 398,col 9)-(line 398,col 48)",
            "(line 399,col 9)-(line 399,col 36)",
            "(line 400,col 9)-(line 400,col 49)",
            "(line 401,col 9)-(line 401,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds()",
        "snippet": "    public void testAddSeconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addSeconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addSeconds(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);\n        \n        result = DateUtils.addSeconds(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);\n    }",
        "begin_line": 405,
        "end_line": 421,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 42)",
            "(line 407,col 9)-(line 407,col 52)",
            "(line 408,col 9)-(line 408,col 36)",
            "(line 409,col 9)-(line 409,col 49)",
            "(line 410,col 9)-(line 410,col 51)",
            "(line 412,col 9)-(line 412,col 47)",
            "(line 413,col 9)-(line 413,col 36)",
            "(line 414,col 9)-(line 414,col 49)",
            "(line 415,col 9)-(line 415,col 51)",
            "(line 417,col 9)-(line 417,col 48)",
            "(line 418,col 9)-(line 418,col 36)",
            "(line 419,col 9)-(line 419,col 49)",
            "(line 420,col 9)-(line 420,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds()",
        "snippet": "    public void testAddMilliseconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.addMilliseconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n        \n        result = DateUtils.addMilliseconds(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 2);\n        \n        result = DateUtils.addMilliseconds(base, -1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n    }",
        "begin_line": 424,
        "end_line": 440,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 42)",
            "(line 426,col 9)-(line 426,col 57)",
            "(line 427,col 9)-(line 427,col 36)",
            "(line 428,col 9)-(line 428,col 49)",
            "(line 429,col 9)-(line 429,col 51)",
            "(line 431,col 9)-(line 431,col 52)",
            "(line 432,col 9)-(line 432,col 36)",
            "(line 433,col 9)-(line 433,col 49)",
            "(line 434,col 9)-(line 434,col 51)",
            "(line 436,col 9)-(line 436,col 53)",
            "(line 437,col 9)-(line 437,col 36)",
            "(line 438,col 9)-(line 438,col 49)",
            "(line 439,col 9)-(line 439,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetYears()",
        "snippet": "    public void testSetYears() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setYears(base, 2000);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n\n        result = DateUtils.setYears(base, 2008);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n\n        result = DateUtils.setYears(base, 2005);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n    }",
        "begin_line": 443,
        "end_line": 459,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 42)",
            "(line 445,col 9)-(line 445,col 53)",
            "(line 446,col 9)-(line 446,col 36)",
            "(line 447,col 9)-(line 447,col 49)",
            "(line 448,col 9)-(line 448,col 51)",
            "(line 450,col 9)-(line 450,col 48)",
            "(line 451,col 9)-(line 451,col 36)",
            "(line 452,col 9)-(line 452,col 49)",
            "(line 453,col 9)-(line 453,col 51)",
            "(line 455,col 9)-(line 455,col 48)",
            "(line 456,col 9)-(line 456,col 36)",
            "(line 457,col 9)-(line 457,col 49)",
            "(line 458,col 9)-(line 458,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetMonths()",
        "snippet": "    public void testSetMonths() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setMonths(base, 5);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n\n        result = DateUtils.setMonths(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n\n        try {\n            result = DateUtils.setMonths(base, 12);\n            fail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }",
        "begin_line": 462,
        "end_line": 480,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 42)",
            "(line 464,col 9)-(line 464,col 51)",
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 49)",
            "(line 467,col 9)-(line 467,col 51)",
            "(line 469,col 9)-(line 469,col 46)",
            "(line 470,col 9)-(line 470,col 36)",
            "(line 471,col 9)-(line 471,col 49)",
            "(line 472,col 9)-(line 472,col 51)",
            "(line 474,col 9)-(line 479,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetDays()",
        "snippet": "    public void testSetDays() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setDays(base, 1);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n\n        result = DateUtils.setDays(base, 29);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n\n        try {\n            result = DateUtils.setDays(base, 32);\n            fail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }",
        "begin_line": 483,
        "end_line": 501,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 42)",
            "(line 485,col 9)-(line 485,col 49)",
            "(line 486,col 9)-(line 486,col 36)",
            "(line 487,col 9)-(line 487,col 49)",
            "(line 488,col 9)-(line 488,col 51)",
            "(line 490,col 9)-(line 490,col 45)",
            "(line 491,col 9)-(line 491,col 36)",
            "(line 492,col 9)-(line 492,col 49)",
            "(line 493,col 9)-(line 493,col 52)",
            "(line 495,col 9)-(line 500,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetHours()",
        "snippet": "    public void testSetHours() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setHours(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n\n        result = DateUtils.setHours(base, 23);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n\n        try {\n            result = DateUtils.setHours(base, 24);\n            fail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }",
        "begin_line": 504,
        "end_line": 522,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 42)",
            "(line 506,col 9)-(line 506,col 50)",
            "(line 507,col 9)-(line 507,col 36)",
            "(line 508,col 9)-(line 508,col 49)",
            "(line 509,col 9)-(line 509,col 51)",
            "(line 511,col 9)-(line 511,col 46)",
            "(line 512,col 9)-(line 512,col 36)",
            "(line 513,col 9)-(line 513,col 49)",
            "(line 514,col 9)-(line 514,col 52)",
            "(line 516,col 9)-(line 521,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes()",
        "snippet": "    public void testSetMinutes() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setMinutes(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n\n        result = DateUtils.setMinutes(base, 59);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n\n        try {\n            result = DateUtils.setMinutes(base, 60);\n            fail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }",
        "begin_line": 525,
        "end_line": 543,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 42)",
            "(line 527,col 9)-(line 527,col 52)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 49)",
            "(line 530,col 9)-(line 530,col 51)",
            "(line 532,col 9)-(line 532,col 48)",
            "(line 533,col 9)-(line 533,col 36)",
            "(line 534,col 9)-(line 534,col 49)",
            "(line 535,col 9)-(line 535,col 52)",
            "(line 537,col 9)-(line 542,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds()",
        "snippet": "    public void testSetSeconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setSeconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n\n        result = DateUtils.setSeconds(base, 59);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n\n        try {\n            result = DateUtils.setSeconds(base, 60);\n            fail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }",
        "begin_line": 546,
        "end_line": 564,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 547,col 9)-(line 547,col 42)",
            "(line 548,col 9)-(line 548,col 52)",
            "(line 549,col 9)-(line 549,col 36)",
            "(line 550,col 9)-(line 550,col 49)",
            "(line 551,col 9)-(line 551,col 51)",
            "(line 553,col 9)-(line 553,col 48)",
            "(line 554,col 9)-(line 554,col 36)",
            "(line 555,col 9)-(line 555,col 49)",
            "(line 556,col 9)-(line 556,col 52)",
            "(line 558,col 9)-(line 563,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testSetMilliseconds()",
        "snippet": "    public void testSetMilliseconds() throws Exception {\n        Date base = new Date(MILLIS_TEST);\n        Date result = DateUtils.setMilliseconds(base, 0);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n\n        result = DateUtils.setMilliseconds(base, 999);\n        assertNotSame(base, result);\n        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n        assertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n\n        try {\n            result = DateUtils.setMilliseconds(base, 1000);\n            fail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n        } catch (IllegalArgumentException e) {\n\n        }\n    }",
        "begin_line": 567,
        "end_line": 585,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 568,col 9)-(line 568,col 42)",
            "(line 569,col 9)-(line 569,col 57)",
            "(line 570,col 9)-(line 570,col 36)",
            "(line 571,col 9)-(line 571,col 49)",
            "(line 572,col 9)-(line 572,col 51)",
            "(line 574,col 9)-(line 574,col 54)",
            "(line 575,col 9)-(line 575,col 36)",
            "(line 576,col 9)-(line 576,col 49)",
            "(line 577,col 9)-(line 577,col 53)",
            "(line 579,col 9)-(line 584,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertDate(java.util.Date, int, int, int, int, int, int, int)",
        "snippet": "    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTime(date);\n        assertEquals(year, cal.get(Calendar.YEAR));\n        assertEquals(month, cal.get(Calendar.MONTH));\n        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n    }",
        "begin_line": 588,
        "end_line": 598,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 56)",
            "(line 590,col 9)-(line 590,col 26)",
            "(line 591,col 9)-(line 591,col 51)",
            "(line 592,col 9)-(line 592,col 53)",
            "(line 593,col 9)-(line 593,col 58)",
            "(line 594,col 9)-(line 594,col 58)",
            "(line 595,col 9)-(line 595,col 52)",
            "(line 596,col 9)-(line 596,col 52)",
            "(line 597,col 9)-(line 597,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testRound()",
        "snippet": "    public void testRound() throws Exception {\n        // tests for public static Date round(Date date, int field)\n        assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date1, Calendar.YEAR));\n        assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date2, Calendar.YEAR));\n        assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date1, Calendar.MONTH));\n        assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round(date2, Calendar.MONTH));\n        assertEquals(\"round semimonth-0 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date0, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round(date2, DateUtils.SEMI_MONTH));\n        \n        \n        assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round(date1, Calendar.DATE));\n        assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round(date2, Calendar.DATE));\n        assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round(date1, Calendar.HOUR));\n        assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round(date2, Calendar.HOUR));\n        assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round(date1, Calendar.MINUTE));\n        assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round(date2, Calendar.MINUTE));\n        assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round(date1, Calendar.SECOND));\n        assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round(date2, Calendar.SECOND));\n        assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm4, Calendar.AM_PM));\n\n        // tests for public static Date round(Object date, int field)\n        assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.YEAR));\n        assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date2, Calendar.YEAR));\n        assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.MONTH));\n        assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round((Object) date2, Calendar.MONTH));\n        assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round((Object) date1, Calendar.DATE));\n        assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round((Object) date2, Calendar.DATE));\n        assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round((Object) date1, Calendar.HOUR));\n        assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round((Object) date2, Calendar.HOUR));\n        assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round((Object) date1, Calendar.MINUTE));\n        assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round((Object) date2, Calendar.MINUTE));\n        assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) date1, Calendar.SECOND));\n        assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) date2, Calendar.SECOND));\n        assertEquals(\"round calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) cal1, Calendar.SECOND));\n        assertEquals(\"round calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) cal2, Calendar.SECOND));\n        assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));\n\n        try {\n            DateUtils.round((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.round(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            DateUtils.round(date1, -9999);\n            fail();\n        } catch(IllegalArgumentException ex) {}\n\n        assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));\n        \n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 / LANG-13\n        // Test rounding across the beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date4, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date5, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date6, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date7, Calendar.DATE));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.DATE));\n        \n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round(date4, Calendar.HOUR_OF_DAY));\n        assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round(date5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round(date6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.round(date7, Calendar.HOUR_OF_DAY));\n            assertEquals(\"round MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));\n        } else {\n            this.warn(\"WARNING: Some date rounding tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n    }",
        "begin_line": 604,
        "end_line": 821,
        "comment": "\n     * Tests various values with the round method\n     ",
        "child_ranges": [
            "(line 606,col 9)-(line 608,col 55)",
            "(line 609,col 9)-(line 611,col 55)",
            "(line 612,col 9)-(line 614,col 56)",
            "(line 615,col 9)-(line 617,col 56)",
            "(line 618,col 9)-(line 620,col 62)",
            "(line 621,col 9)-(line 623,col 62)",
            "(line 624,col 9)-(line 626,col 62)",
            "(line 629,col 9)-(line 631,col 55)",
            "(line 632,col 9)-(line 634,col 55)",
            "(line 635,col 9)-(line 637,col 55)",
            "(line 638,col 9)-(line 640,col 55)",
            "(line 641,col 9)-(line 643,col 57)",
            "(line 644,col 9)-(line 646,col 57)",
            "(line 647,col 9)-(line 649,col 57)",
            "(line 650,col 9)-(line 652,col 57)",
            "(line 653,col 9)-(line 655,col 60)",
            "(line 656,col 9)-(line 658,col 60)",
            "(line 659,col 9)-(line 661,col 60)",
            "(line 662,col 9)-(line 664,col 60)",
            "(line 667,col 9)-(line 669,col 64)",
            "(line 670,col 9)-(line 672,col 64)",
            "(line 673,col 9)-(line 675,col 65)",
            "(line 676,col 9)-(line 678,col 65)",
            "(line 679,col 9)-(line 681,col 71)",
            "(line 682,col 9)-(line 684,col 71)",
            "(line 685,col 9)-(line 687,col 64)",
            "(line 688,col 9)-(line 690,col 64)",
            "(line 691,col 9)-(line 693,col 64)",
            "(line 694,col 9)-(line 696,col 64)",
            "(line 697,col 9)-(line 699,col 66)",
            "(line 700,col 9)-(line 702,col 66)",
            "(line 703,col 9)-(line 705,col 66)",
            "(line 706,col 9)-(line 708,col 66)",
            "(line 709,col 9)-(line 711,col 65)",
            "(line 712,col 9)-(line 714,col 65)",
            "(line 715,col 9)-(line 717,col 69)",
            "(line 718,col 9)-(line 720,col 69)",
            "(line 721,col 9)-(line 723,col 69)",
            "(line 724,col 9)-(line 726,col 69)",
            "(line 728,col 9)-(line 731,col 48)",
            "(line 732,col 9)-(line 735,col 48)",
            "(line 736,col 9)-(line 739,col 48)",
            "(line 740,col 9)-(line 743,col 42)",
            "(line 744,col 9)-(line 747,col 47)",
            "(line 749,col 9)-(line 751,col 68)",
            "(line 752,col 9)-(line 754,col 68)",
            "(line 755,col 9)-(line 757,col 68)",
            "(line 758,col 9)-(line 760,col 68)",
            "(line 764,col 9)-(line 764,col 34)",
            "(line 765,col 9)-(line 765,col 41)",
            "(line 766,col 9)-(line 768,col 55)",
            "(line 769,col 9)-(line 771,col 63)",
            "(line 772,col 9)-(line 774,col 55)",
            "(line 775,col 9)-(line 777,col 63)",
            "(line 778,col 9)-(line 780,col 55)",
            "(line 781,col 9)-(line 783,col 63)",
            "(line 784,col 9)-(line 786,col 55)",
            "(line 787,col 9)-(line 789,col 63)",
            "(line 791,col 9)-(line 793,col 62)",
            "(line 794,col 9)-(line 796,col 70)",
            "(line 797,col 9)-(line 818,col 9)",
            "(line 819,col 9)-(line 819,col 41)",
            "(line 820,col 9)-(line 820,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346()",
        "snippet": "    public void testRoundLang346() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));\n    }",
        "begin_line": 827,
        "end_line": 884,
        "comment": "\n     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n     * by DateUtils.round().\n     ",
        "child_ranges": [
            "(line 829,col 9)-(line 829,col 41)",
            "(line 830,col 9)-(line 830,col 48)",
            "(line 831,col 9)-(line 831,col 55)",
            "(line 832,col 9)-(line 832,col 47)",
            "(line 833,col 9)-(line 833,col 43)",
            "(line 834,col 9)-(line 836,col 61)",
            "(line 838,col 9)-(line 838,col 47)",
            "(line 839,col 9)-(line 839,col 38)",
            "(line 840,col 9)-(line 842,col 61)",
            "(line 844,col 9)-(line 844,col 47)",
            "(line 845,col 9)-(line 845,col 52)",
            "(line 846,col 9)-(line 846,col 38)",
            "(line 848,col 9)-(line 850,col 61)",
            "(line 852,col 9)-(line 852,col 47)",
            "(line 853,col 9)-(line 853,col 52)",
            "(line 854,col 9)-(line 854,col 38)",
            "(line 855,col 9)-(line 857,col 61)",
            "(line 859,col 9)-(line 859,col 47)",
            "(line 860,col 9)-(line 860,col 52)",
            "(line 861,col 9)-(line 861,col 38)",
            "(line 862,col 9)-(line 864,col 61)",
            "(line 866,col 9)-(line 866,col 47)",
            "(line 867,col 9)-(line 867,col 52)",
            "(line 868,col 9)-(line 868,col 38)",
            "(line 869,col 9)-(line 871,col 61)",
            "(line 873,col 9)-(line 873,col 47)",
            "(line 874,col 9)-(line 874,col 38)",
            "(line 875,col 9)-(line 877,col 59)",
            "(line 879,col 9)-(line 879,col 48)",
            "(line 880,col 9)-(line 880,col 38)",
            "(line 881,col 9)-(line 883,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testTruncate()",
        "snippet": "    public void testTruncate() throws Exception {\n        // tests public static Date truncate(Date date, int field)\n        assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.YEAR));\n        assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.YEAR));\n        assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.MONTH));\n        assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.MONTH));\n        assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate(date1, Calendar.DATE));\n        assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate(date2, Calendar.DATE));\n        assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate(date1, Calendar.HOUR));\n        assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate(date2, Calendar.HOUR));\n        assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate(date1, Calendar.MINUTE));\n        assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate(date2, Calendar.MINUTE));\n        assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate(date1, Calendar.SECOND));\n        assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate(date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));\n\n        // tests public static Date truncate(Object date, int field)\n        assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.YEAR));\n        assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.YEAR));\n        assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.MONTH));\n        assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.MONTH));\n        assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.DATE));\n        assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.DATE));\n        assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.HOUR));\n        assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.HOUR));\n        assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.MINUTE));\n        assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.MINUTE));\n        assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) date1, Calendar.SECOND));\n        assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) date2, Calendar.SECOND));\n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));\n        \n        assertEquals(\"truncate calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) cal1, Calendar.SECOND));\n        assertEquals(\"truncate calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) cal2, Calendar.SECOND));\n        \n        assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));\n        \n        try {\n            DateUtils.truncate((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.truncate(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n\n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n        // Test truncate across beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate(date3, Calendar.DATE));\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal3, Calendar.DATE));\n        // Test truncate across end of daylight saving time\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate(date8, Calendar.DATE));\n        assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal8, Calendar.DATE));\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        \n        // Bug 31395, large dates\n        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n        GregorianCalendar endCal = new GregorianCalendar();\n        endCal.setTime(endOfTime);\n        try {\n            DateUtils.truncate(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000001);\n        try {\n            DateUtils.truncate(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000000);\n        Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);\n        assertEquals(0, cal.get(Calendar.HOUR));\n    }",
        "begin_line": 889,
        "end_line": 1075,
        "comment": "\n     * Tests various values with the trunc method\n     ",
        "child_ranges": [
            "(line 891,col 9)-(line 893,col 58)",
            "(line 894,col 9)-(line 896,col 58)",
            "(line 897,col 9)-(line 899,col 59)",
            "(line 900,col 9)-(line 902,col 59)",
            "(line 903,col 9)-(line 905,col 65)",
            "(line 906,col 9)-(line 908,col 65)",
            "(line 909,col 9)-(line 911,col 58)",
            "(line 912,col 9)-(line 914,col 58)",
            "(line 915,col 9)-(line 917,col 58)",
            "(line 918,col 9)-(line 920,col 58)",
            "(line 921,col 9)-(line 923,col 60)",
            "(line 924,col 9)-(line 926,col 60)",
            "(line 927,col 9)-(line 929,col 60)",
            "(line 930,col 9)-(line 932,col 60)",
            "(line 933,col 9)-(line 935,col 63)",
            "(line 936,col 9)-(line 938,col 63)",
            "(line 939,col 9)-(line 941,col 63)",
            "(line 942,col 9)-(line 944,col 63)",
            "(line 947,col 9)-(line 949,col 67)",
            "(line 950,col 9)-(line 952,col 67)",
            "(line 953,col 9)-(line 955,col 68)",
            "(line 956,col 9)-(line 958,col 68)",
            "(line 959,col 9)-(line 961,col 74)",
            "(line 962,col 9)-(line 964,col 74)",
            "(line 965,col 9)-(line 967,col 67)",
            "(line 968,col 9)-(line 970,col 67)",
            "(line 971,col 9)-(line 973,col 67)",
            "(line 974,col 9)-(line 976,col 67)",
            "(line 977,col 9)-(line 979,col 69)",
            "(line 980,col 9)-(line 982,col 69)",
            "(line 983,col 9)-(line 985,col 69)",
            "(line 986,col 9)-(line 988,col 69)",
            "(line 989,col 9)-(line 991,col 72)",
            "(line 992,col 9)-(line 994,col 72)",
            "(line 995,col 9)-(line 997,col 72)",
            "(line 998,col 9)-(line 1000,col 72)",
            "(line 1002,col 9)-(line 1004,col 68)",
            "(line 1005,col 9)-(line 1007,col 68)",
            "(line 1009,col 9)-(line 1011,col 71)",
            "(line 1012,col 9)-(line 1014,col 71)",
            "(line 1015,col 9)-(line 1017,col 71)",
            "(line 1018,col 9)-(line 1020,col 71)",
            "(line 1022,col 9)-(line 1025,col 48)",
            "(line 1026,col 9)-(line 1029,col 48)",
            "(line 1030,col 9)-(line 1033,col 48)",
            "(line 1034,col 9)-(line 1037,col 42)",
            "(line 1041,col 9)-(line 1041,col 34)",
            "(line 1042,col 9)-(line 1042,col 41)",
            "(line 1043,col 9)-(line 1045,col 58)",
            "(line 1046,col 9)-(line 1048,col 66)",
            "(line 1050,col 9)-(line 1052,col 58)",
            "(line 1053,col 9)-(line 1055,col 66)",
            "(line 1056,col 9)-(line 1056,col 41)",
            "(line 1057,col 9)-(line 1057,col 48)",
            "(line 1060,col 9)-(line 1060,col 50)",
            "(line 1061,col 9)-(line 1061,col 59)",
            "(line 1062,col 9)-(line 1062,col 34)",
            "(line 1063,col 9)-(line 1066,col 43)",
            "(line 1067,col 9)-(line 1067,col 45)",
            "(line 1068,col 9)-(line 1071,col 43)",
            "(line 1072,col 9)-(line 1072,col 45)",
            "(line 1073,col 9)-(line 1073,col 65)",
            "(line 1074,col 9)-(line 1074,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59()",
        "snippet": "    public void testTruncateLang59() throws Exception {\n        if (!SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_VERSION);\n            return;\n        }\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n\n        // ---------- Test Truncate ----------\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n\n\n        // ---------- Test Round (down) ----------\n        assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n\n        assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n\n        assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n\n        assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n\n        assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
        "begin_line": 1082,
        "end_line": 1154,
        "comment": "\n     * Tests for LANG-59\n     *\n     * see http://issues.apache.org/jira/browse/LANG-59\n     ",
        "child_ranges": [
            "(line 1083,col 9)-(line 1086,col 9)",
            "(line 1089,col 9)-(line 1089,col 59)",
            "(line 1090,col 9)-(line 1090,col 37)",
            "(line 1091,col 9)-(line 1091,col 78)",
            "(line 1092,col 9)-(line 1092,col 36)",
            "(line 1094,col 9)-(line 1094,col 52)",
            "(line 1096,col 9)-(line 1096,col 85)",
            "(line 1097,col 9)-(line 1097,col 84)",
            "(line 1098,col 9)-(line 1098,col 82)",
            "(line 1099,col 9)-(line 1099,col 79)",
            "(line 1101,col 9)-(line 1101,col 99)",
            "(line 1102,col 9)-(line 1102,col 102)",
            "(line 1103,col 9)-(line 1103,col 105)",
            "(line 1104,col 9)-(line 1104,col 108)",
            "(line 1105,col 9)-(line 1105,col 111)",
            "(line 1108,col 9)-(line 1108,col 47)",
            "(line 1109,col 9)-(line 1109,col 54)",
            "(line 1110,col 9)-(line 1110,col 61)",
            "(line 1111,col 9)-(line 1111,col 104)",
            "(line 1114,col 9)-(line 1115,col 102)",
            "(line 1117,col 9)-(line 1118,col 97)",
            "(line 1120,col 9)-(line 1121,col 97)",
            "(line 1123,col 9)-(line 1124,col 102)",
            "(line 1126,col 9)-(line 1127,col 95)",
            "(line 1129,col 9)-(line 1130,col 95)",
            "(line 1134,col 9)-(line 1135,col 99)",
            "(line 1137,col 9)-(line 1138,col 94)",
            "(line 1140,col 9)-(line 1141,col 94)",
            "(line 1143,col 9)-(line 1144,col 99)",
            "(line 1146,col 9)-(line 1147,col 92)",
            "(line 1149,col 9)-(line 1150,col 92)",
            "(line 1153,col 9)-(line 1153,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testLang530()",
        "snippet": "    public void testLang530() throws ParseException {\n        Date d = new Date();\n        String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\n        Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });\n        // the format loses milliseconds so have to reintroduce them\n        assertEquals(\"Date not equal to itself ISO formatted and parsed\", d.getTime(), d2.getTime() + d.getTime() % 1000); \n    }",
        "begin_line": 1157,
        "end_line": 1163,
        "comment": " http://issues.apache.org/jira/browse/LANG-530",
        "child_ranges": [
            "(line 1158,col 9)-(line 1158,col 28)",
            "(line 1159,col 9)-(line 1159,col 84)",
            "(line 1160,col 9)-(line 1160,col 127)",
            "(line 1162,col 9)-(line 1162,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testCeil()",
        "snippet": "    public void testCeil() throws Exception {\n        // tests public static Date ceiling(Date date, int field)\n        assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling(date1, Calendar.YEAR));\n        assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling(date2, Calendar.YEAR));\n        assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling(date1, Calendar.MONTH));\n        assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, Calendar.MONTH));\n        assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling(date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling(date1, Calendar.DATE));\n        assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling(date2, Calendar.DATE));\n        assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling(date1, Calendar.HOUR));\n        assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling(date2, Calendar.HOUR));\n        assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling(date1, Calendar.MINUTE));\n        assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling(date2, Calendar.MINUTE));\n        assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling(date1, Calendar.SECOND));\n        assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling(date2, Calendar.SECOND));\n        assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm4, Calendar.AM_PM));\n        \n     // tests public static Date ceiling(Object date, int field)\n        assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling((Object) date1, Calendar.YEAR));\n        assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling((Object) date2, Calendar.YEAR));\n        assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.MONTH));\n        assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.MONTH));\n        assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH));\n        assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.DATE));\n        assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.DATE));\n        assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.HOUR));\n        assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.HOUR));\n        assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.MINUTE));\n        assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.MINUTE));\n        assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.SECOND));\n        assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.SECOND));\n        assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM));\n        \n        assertEquals(\"ceiling calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) cal1, Calendar.SECOND));\n        assertEquals(\"ceiling calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) cal2, Calendar.SECOND));\n        \n        assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM));\n        assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM));\n\n        try {\n            DateUtils.ceiling((Date) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.ceiling((Calendar) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.ceiling((Object) null, Calendar.SECOND);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.ceiling(\"\", Calendar.SECOND);\n            fail();\n        } catch (ClassCastException ex) {}\n        try {\n            DateUtils.ceiling(date1, -9999);\n            fail();\n        } catch(IllegalArgumentException ex) {}\n\n        \n        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n        // Test ceiling across the beginning of daylight saving time\n        TimeZone.setDefault(zone);\n        dateTimeParser.setTimeZone(zone);\n\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date5, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal5, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date6, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal6, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date7, Calendar.DATE));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal7, Calendar.DATE));\n        \n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY));\n        assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                    DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY));\n            assertEquals(\"ceiling MET date across DST change-over\",\n                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                    DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));\n        } else {\n            this.warn(\"WARNING: Some date ceiling tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n        }\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        \n     // Bug 31395, large dates\n        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n        GregorianCalendar endCal = new GregorianCalendar();\n        endCal.setTime(endOfTime);\n        try {\n            DateUtils.ceiling(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000001);\n        try {\n            DateUtils.ceiling(endCal, Calendar.DATE);\n            fail();\n        } catch (ArithmeticException ex) {}\n        endCal.set(Calendar.YEAR, 280000000);\n        Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);\n        assertEquals(0, cal.get(Calendar.HOUR));\n    }",
        "begin_line": 1168,
        "end_line": 1400,
        "comment": "\n     * Tests various values with the ceiling method\n     ",
        "child_ranges": [
            "(line 1170,col 9)-(line 1172,col 57)",
            "(line 1173,col 9)-(line 1175,col 57)",
            "(line 1176,col 9)-(line 1178,col 58)",
            "(line 1179,col 9)-(line 1181,col 58)",
            "(line 1182,col 9)-(line 1184,col 64)",
            "(line 1185,col 9)-(line 1187,col 64)",
            "(line 1188,col 9)-(line 1190,col 57)",
            "(line 1191,col 9)-(line 1193,col 57)",
            "(line 1194,col 9)-(line 1196,col 57)",
            "(line 1197,col 9)-(line 1199,col 57)",
            "(line 1200,col 9)-(line 1202,col 59)",
            "(line 1203,col 9)-(line 1205,col 59)",
            "(line 1206,col 9)-(line 1208,col 59)",
            "(line 1209,col 9)-(line 1211,col 59)",
            "(line 1212,col 9)-(line 1214,col 62)",
            "(line 1215,col 9)-(line 1217,col 62)",
            "(line 1218,col 9)-(line 1220,col 62)",
            "(line 1221,col 9)-(line 1223,col 62)",
            "(line 1226,col 9)-(line 1228,col 66)",
            "(line 1229,col 9)-(line 1231,col 66)",
            "(line 1232,col 9)-(line 1234,col 67)",
            "(line 1235,col 9)-(line 1237,col 67)",
            "(line 1238,col 9)-(line 1240,col 73)",
            "(line 1241,col 9)-(line 1243,col 73)",
            "(line 1244,col 9)-(line 1246,col 66)",
            "(line 1247,col 9)-(line 1249,col 66)",
            "(line 1250,col 9)-(line 1252,col 66)",
            "(line 1253,col 9)-(line 1255,col 66)",
            "(line 1256,col 9)-(line 1258,col 68)",
            "(line 1259,col 9)-(line 1261,col 68)",
            "(line 1262,col 9)-(line 1264,col 68)",
            "(line 1265,col 9)-(line 1267,col 68)",
            "(line 1268,col 9)-(line 1270,col 71)",
            "(line 1271,col 9)-(line 1273,col 71)",
            "(line 1274,col 9)-(line 1276,col 71)",
            "(line 1277,col 9)-(line 1279,col 71)",
            "(line 1281,col 9)-(line 1283,col 67)",
            "(line 1284,col 9)-(line 1286,col 67)",
            "(line 1288,col 9)-(line 1290,col 70)",
            "(line 1291,col 9)-(line 1293,col 70)",
            "(line 1294,col 9)-(line 1296,col 70)",
            "(line 1297,col 9)-(line 1299,col 70)",
            "(line 1301,col 9)-(line 1304,col 48)",
            "(line 1305,col 9)-(line 1308,col 48)",
            "(line 1309,col 9)-(line 1312,col 48)",
            "(line 1313,col 9)-(line 1316,col 42)",
            "(line 1317,col 9)-(line 1320,col 47)",
            "(line 1325,col 9)-(line 1325,col 34)",
            "(line 1326,col 9)-(line 1326,col 41)",
            "(line 1328,col 9)-(line 1330,col 57)",
            "(line 1331,col 9)-(line 1333,col 65)",
            "(line 1334,col 9)-(line 1336,col 57)",
            "(line 1337,col 9)-(line 1339,col 65)",
            "(line 1340,col 9)-(line 1342,col 57)",
            "(line 1343,col 9)-(line 1345,col 65)",
            "(line 1346,col 9)-(line 1348,col 57)",
            "(line 1349,col 9)-(line 1351,col 65)",
            "(line 1353,col 9)-(line 1355,col 64)",
            "(line 1356,col 9)-(line 1358,col 72)",
            "(line 1359,col 9)-(line 1380,col 9)",
            "(line 1381,col 9)-(line 1381,col 41)",
            "(line 1382,col 9)-(line 1382,col 48)",
            "(line 1385,col 9)-(line 1385,col 50)",
            "(line 1386,col 9)-(line 1386,col 59)",
            "(line 1387,col 9)-(line 1387,col 34)",
            "(line 1388,col 9)-(line 1391,col 43)",
            "(line 1392,col 9)-(line 1392,col 45)",
            "(line 1393,col 9)-(line 1396,col 43)",
            "(line 1397,col 9)-(line 1397,col 45)",
            "(line 1398,col 9)-(line 1398,col 64)",
            "(line 1399,col 9)-(line 1399,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx()",
        "snippet": "    public void testIteratorEx() throws Exception {\n        try {\n            DateUtils.iterator(Calendar.getInstance(), -9999);\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER);\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 1405,
        "end_line": 1425,
        "comment": "\n     * Tests the iterator exceptions\n     ",
        "child_ranges": [
            "(line 1406,col 9)-(line 1408,col 48)",
            "(line 1409,col 9)-(line 1412,col 48)",
            "(line 1413,col 9)-(line 1416,col 48)",
            "(line 1417,col 9)-(line 1420,col 48)",
            "(line 1421,col 9)-(line 1424,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator()",
        "snippet": "    public void testWeekIterator() throws Exception {\n        Calendar now = Calendar.getInstance();\n        for (int i = 0; i< 7; i++) {\n            Calendar today = DateUtils.truncate(now, Calendar.DATE);\n            Calendar sunday = DateUtils.truncate(now, Calendar.DATE);\n            sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));\n            Calendar monday = DateUtils.truncate(now, Calendar.DATE);\n            if (monday.get(Calendar.DAY_OF_WEEK) == 1) {\n                //This is sunday... roll back 6 days\n                monday.add(Calendar.DATE, -6);\n            } else {\n                monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));\n            }\n            Calendar centered = DateUtils.truncate(now, Calendar.DATE);\n            centered.add(Calendar.DATE, -3);\n            \n            Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\n            assertWeekIterator(it, sunday);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);\n            assertWeekIterator(it, monday);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);\n            assertWeekIterator(it, today);\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            \n            it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);\n            assertWeekIterator(it, centered);\n            try {\n                it.next();\n                fail();\n            } catch (NoSuchElementException ex) {}\n            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n            it.next();\n            try {\n                it.remove();\n            } catch( UnsupportedOperationException ex) {}\n            \n            now.add(Calendar.DATE,1);\n        }\n    }",
        "begin_line": 1430,
        "end_line": 1471,
        "comment": "\n     * Tests the calendar iterator for week ranges\n     ",
        "child_ranges": [
            "(line 1431,col 9)-(line 1431,col 46)",
            "(line 1432,col 9)-(line 1470,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator()",
        "snippet": "    public void testMonthIterator() throws Exception {\n        Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"January 27, 2002\"),\n                dateParser.parse(\"March 2, 2002\"));\n\n        it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"January 28, 2002\"),\n                dateParser.parse(\"March 3, 2002\"));\n\n        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"October 28, 2001\"),\n                dateParser.parse(\"December 1, 2001\"));\n\n        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);\n        assertWeekIterator(it,\n                dateParser.parse(\"October 29, 2001\"),\n                dateParser.parse(\"December 2, 2001\"));\n    }",
        "begin_line": 1476,
        "end_line": 1496,
        "comment": "\n     * Tests the calendar iterator for month-based ranges\n     ",
        "child_ranges": [
            "(line 1477,col 9)-(line 1477,col 81)",
            "(line 1478,col 9)-(line 1480,col 51)",
            "(line 1482,col 9)-(line 1482,col 69)",
            "(line 1483,col 9)-(line 1485,col 51)",
            "(line 1487,col 9)-(line 1487,col 69)",
            "(line 1488,col 9)-(line 1490,col 54)",
            "(line 1492,col 9)-(line 1492,col 69)",
            "(line 1493,col 9)-(line 1495,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator<?>, java.util.Calendar)",
        "snippet": "    private static void assertWeekIterator(Iterator<?> it, Calendar start) {\n        Calendar end = (Calendar) start.clone();\n        end.add(Calendar.DATE, 6);\n\n        assertWeekIterator(it, start, end);\n    }",
        "begin_line": 1502,
        "end_line": 1507,
        "comment": "\n     * This checks that this is a 7 element iterator of Calendar objects\n     * that are dates (no time), and exactly 1 day spaced after each other.\n     ",
        "child_ranges": [
            "(line 1503,col 9)-(line 1503,col 48)",
            "(line 1504,col 9)-(line 1504,col 34)",
            "(line 1506,col 9)-(line 1506,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator<?>, java.util.Date, java.util.Date)",
        "snippet": "    private static void assertWeekIterator(Iterator<?> it, Date start, Date end) {\n        Calendar calStart = Calendar.getInstance();\n        calStart.setTime(start);\n        Calendar calEnd = Calendar.getInstance();\n        calEnd.setTime(end);\n\n        assertWeekIterator(it, calStart, calEnd);\n    }",
        "begin_line": 1512,
        "end_line": 1519,
        "comment": "\n     * Convenience method for when working with Date objects\n     ",
        "child_ranges": [
            "(line 1513,col 9)-(line 1513,col 51)",
            "(line 1514,col 9)-(line 1514,col 32)",
            "(line 1515,col 9)-(line 1515,col 49)",
            "(line 1516,col 9)-(line 1516,col 28)",
            "(line 1518,col 9)-(line 1518,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator<?>, java.util.Calendar, java.util.Calendar)",
        "snippet": "    private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {\n        Calendar cal = (Calendar) it.next();\n        assertEquals(\"\", start, cal, 0);\n        Calendar last = null;\n        int count = 1;\n        while (it.hasNext()) {\n            //Check this is just a date (no time component)\n            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n\n            last = cal;\n            cal = (Calendar) it.next();\n            count++;\n\n            //Check that this is one day more than the last date\n            last.add(Calendar.DATE, 1);\n            assertEquals(\"\", last, cal, 0);\n        }\n        if (count % 7 != 0) {\n            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n        }\n        assertEquals(\"\", end, cal, 0);\n    }",
        "begin_line": 1526,
        "end_line": 1547,
        "comment": "\n     * This checks that this is a 7 divisble iterator of Calendar objects\n     * that are dates (no time), and exactly 1 day spaced after each other\n     * (in addition to the proper start and stop dates)\n     ",
        "child_ranges": [
            "(line 1527,col 9)-(line 1527,col 44)",
            "(line 1528,col 9)-(line 1528,col 40)",
            "(line 1529,col 9)-(line 1529,col 29)",
            "(line 1530,col 9)-(line 1530,col 22)",
            "(line 1531,col 9)-(line 1542,col 9)",
            "(line 1543,col 9)-(line 1545,col 9)",
            "(line 1546,col 9)-(line 1546,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.assertEquals(java.lang.String, java.util.Calendar, java.util.Calendar, long)",
        "snippet": "    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n            throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n        }\n    }",
        "begin_line": 1553,
        "end_line": 1558,
        "comment": "\n     * Used to check that Calendar objects are close enough\n     * delta is in milliseconds\n     ",
        "child_ranges": [
            "(line 1554,col 9)-(line 1557,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsTest.warn(java.lang.String)",
        "snippet": "    void warn(String msg) {\n        System.err.println(msg);\n    }",
        "begin_line": 1560,
        "end_line": 1562,
        "comment": "",
        "child_ranges": [
            "(line 1561,col 9)-(line 1561,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.StopWatchTest(java.lang.String)",
        "snippet": "    public StopWatchTest(String s) {\n        super(s);\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimple()",
        "snippet": "    public void testStopWatchSimple(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long time = watch.getTime();\n        assertEquals(time, watch.getTime());\n        \n        assertTrue(time >= 500);\n        assertTrue(time < 700);\n        \n        watch.reset();\n        assertEquals(0, watch.getTime());\n    }",
        "begin_line": 35,
        "end_line": 48,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 42)",
            "(line 37,col 9)-(line 37,col 22)",
            "(line 38,col 13)-(line 38,col 71)",
            "(line 39,col 9)-(line 39,col 21)",
            "(line 40,col 9)-(line 40,col 36)",
            "(line 41,col 9)-(line 41,col 44)",
            "(line 43,col 9)-(line 43,col 32)",
            "(line 44,col 9)-(line 44,col 31)",
            "(line 46,col 9)-(line 46,col 22)",
            "(line 47,col 9)-(line 47,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet()",
        "snippet": "    public void testStopWatchSimpleGet(){\n        StopWatch watch = new StopWatch();\n        assertEquals(0, watch.getTime());\n        assertEquals(\"0:00:00.000\", watch.toString());\n        \n        watch.start();\n            try {Thread.sleep(500);} catch (InterruptedException ex) {}\n        assertTrue(watch.getTime() < 2000);\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 42)",
            "(line 52,col 9)-(line 52,col 41)",
            "(line 53,col 9)-(line 53,col 54)",
            "(line 55,col 9)-(line 55,col 22)",
            "(line 56,col 13)-(line 56,col 71)",
            "(line 57,col 9)-(line 57,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit()",
        "snippet": "    public void testStopWatchSplit(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.split();\n        long splitTime = watch.getSplitTime();\n        String splitStr = watch.toSplitString();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.unsplit();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n\n        assertEquals(\"Formatted split string not the correct length\", \n                     splitStr.length(), 11);\n        assertTrue(splitTime >= 500);\n        assertTrue(splitTime < 700);\n        assertTrue(totalTime >= 1500);\n        assertTrue(totalTime < 1900);\n    }",
        "begin_line": 60,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 42)",
            "(line 62,col 9)-(line 62,col 22)",
            "(line 63,col 13)-(line 63,col 71)",
            "(line 64,col 9)-(line 64,col 22)",
            "(line 65,col 9)-(line 65,col 46)",
            "(line 66,col 9)-(line 66,col 48)",
            "(line 67,col 13)-(line 67,col 71)",
            "(line 68,col 9)-(line 68,col 24)",
            "(line 69,col 13)-(line 69,col 71)",
            "(line 70,col 9)-(line 70,col 21)",
            "(line 71,col 9)-(line 71,col 41)",
            "(line 73,col 9)-(line 74,col 44)",
            "(line 75,col 9)-(line 75,col 37)",
            "(line 76,col 9)-(line 76,col 36)",
            "(line 77,col 9)-(line 77,col 38)",
            "(line 78,col 9)-(line 78,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testStopWatchSuspend()",
        "snippet": "    public void testStopWatchSuspend(){\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.resume();\n            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        \n        assertTrue(suspendTime >= 500);\n        assertTrue(suspendTime < 700);\n        assertTrue(totalTime >= 1000);\n        assertTrue(totalTime < 1300);\n    }",
        "begin_line": 81,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 42)",
            "(line 83,col 9)-(line 83,col 22)",
            "(line 84,col 13)-(line 84,col 71)",
            "(line 85,col 9)-(line 85,col 24)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 13)-(line 87,col 71)",
            "(line 88,col 9)-(line 88,col 23)",
            "(line 89,col 13)-(line 89,col 71)",
            "(line 90,col 9)-(line 90,col 21)",
            "(line 91,col 9)-(line 91,col 41)",
            "(line 93,col 9)-(line 93,col 39)",
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 95,col 38)",
            "(line 96,col 9)-(line 96,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testLang315()",
        "snippet": "    public void testLang315() {\n        StopWatch watch = new StopWatch();\n        watch.start();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.suspend();\n        long suspendTime = watch.getTime();\n            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n        watch.stop();\n        long totalTime = watch.getTime();\n        assertTrue( suspendTime == totalTime );\n    }",
        "begin_line": 99,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 42)",
            "(line 101,col 9)-(line 101,col 22)",
            "(line 102,col 13)-(line 102,col 71)",
            "(line 103,col 9)-(line 103,col 24)",
            "(line 104,col 9)-(line 104,col 43)",
            "(line 105,col 13)-(line 105,col 71)",
            "(line 106,col 9)-(line 106,col 21)",
            "(line 107,col 9)-(line 107,col 41)",
            "(line 108,col 9)-(line 108,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testBadStates()",
        "snippet": "    public void testBadStates() {\n        StopWatch watch = new StopWatch();\n        try {\n            watch.stop();\n            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.stop();\n            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.suspend();\n            fail(\"Calling suspend on an unstarted StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.split();\n            fail(\"Calling split on a non-running StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.unsplit();\n            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.resume();\n            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        watch.start();\n\n        try {\n            watch.start();\n            fail(\"Calling start on a started StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.unsplit();\n            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.getSplitTime();\n            fail(\"Calling getSplitTime on an unsplit StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        try {\n            watch.resume();\n            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n\n        watch.stop();\n\n        try {\n            watch.start();\n            fail(\"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. \");\n        } catch(IllegalStateException ise) {\n            // expected\n        }\n    }",
        "begin_line": 112,
        "end_line": 194,
        "comment": " test bad states",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 142,col 9)-(line 147,col 9)",
            "(line 149,col 9)-(line 154,col 9)",
            "(line 156,col 9)-(line 156,col 22)",
            "(line 158,col 9)-(line 163,col 9)",
            "(line 165,col 9)-(line 170,col 9)",
            "(line 172,col 9)-(line 177,col 9)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 186,col 9)-(line 186,col 21)",
            "(line 188,col 9)-(line 193,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.StopWatchTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/StopWatchTest.java",
        "signature": "org.apache.commons.lang3.time.StopWatchTest.testGetStartTime()",
        "snippet": "    public void testGetStartTime() {\n        long beforeStopWatch = System.currentTimeMillis();\n        StopWatch watch = new StopWatch();\n        try {\n            watch.getStartTime();\n            fail(\"Calling getStartTime on an unstarted StopWatch should throw an exception\");\n        } catch (IllegalStateException expected) {\n            // expected\n        }\n        watch.start();\n        try {\n            watch.getStartTime();\n            Assert.assertTrue(watch.getStartTime() >= beforeStopWatch);\n        } catch (IllegalStateException ex) {\n            fail(\"Start time should be available: \" + ex.getMessage());\n        }\n        watch.reset();\n        try {\n            watch.getStartTime();\n            fail(\"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception\");\n        } catch (IllegalStateException expected) {\n            // expected\n        }\n    }",
        "begin_line": 196,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 58)",
            "(line 198,col 9)-(line 198,col 42)",
            "(line 199,col 9)-(line 204,col 9)",
            "(line 205,col 9)-(line 205,col 22)",
            "(line 206,col 9)-(line 211,col 9)",
            "(line 212,col 9)-(line 212,col 22)",
            "(line 213,col 9)-(line 218,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.DateFormatUtilsTest(java.lang.String)",
        "snippet": "    public DateFormatUtilsTest(String s) {\n        super(s);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new DateFormatUtils());\n        Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));\n    }",
        "begin_line": 43,
        "end_line": 50,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 45)",
            "(line 45,col 9)-(line 45,col 80)",
            "(line 46,col 9)-(line 46,col 37)",
            "(line 47,col 9)-(line 47,col 70)",
            "(line 48,col 9)-(line 48,col 84)",
            "(line 49,col 9)-(line 49,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat()",
        "snippet": "    public void testFormat() {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.set(2005,0,1,12,0,0);\n        c.setTimeZone(TimeZone.getDefault());\n        StringBuffer buffer = new StringBuffer ();\n        int year = c.get(Calendar.YEAR);\n        int month = c.get(Calendar.MONTH) + 1;\n        int day = c.get(Calendar.DAY_OF_MONTH);\n        int hour = c.get(Calendar.HOUR_OF_DAY);\n        buffer.append (year);\n        buffer.append(month);\n        buffer.append(day);\n        buffer.append(hour);\n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\", Locale.US));\n    }",
        "begin_line": 53,
        "end_line": 73,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 71)",
            "(line 55,col 9)-(line 55,col 31)",
            "(line 56,col 9)-(line 56,col 45)",
            "(line 57,col 9)-(line 57,col 50)",
            "(line 58,col 9)-(line 58,col 40)",
            "(line 59,col 9)-(line 59,col 46)",
            "(line 60,col 9)-(line 60,col 47)",
            "(line 61,col 9)-(line 61,col 47)",
            "(line 62,col 9)-(line 62,col 29)",
            "(line 63,col 9)-(line 63,col 29)",
            "(line 64,col 9)-(line 64,col 27)",
            "(line 65,col 9)-(line 65,col 28)",
            "(line 66,col 9)-(line 66,col 88)",
            "(line 68,col 9)-(line 68,col 98)",
            "(line 70,col 9)-(line 70,col 99)",
            "(line 72,col 9)-(line 72,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar()",
        "snippet": "    public void testFormatCalendar() {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.set(2005,0,1,12,0,0);\n        c.setTimeZone(TimeZone.getDefault());\n        StringBuffer buffer = new StringBuffer ();\n        int year = c.get(Calendar.YEAR);\n        int month = c.get(Calendar.MONTH) + 1;\n        int day = c.get(Calendar.DAY_OF_MONTH);\n        int hour = c.get(Calendar.HOUR_OF_DAY);\n        buffer.append (year);\n        buffer.append(month);\n        buffer.append(day);\n        buffer.append(hour);\n        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\", Locale.US));\n        \n        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n    }",
        "begin_line": 76,
        "end_line": 96,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 71)",
            "(line 78,col 9)-(line 78,col 31)",
            "(line 79,col 9)-(line 79,col 45)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 81,col 40)",
            "(line 82,col 9)-(line 82,col 46)",
            "(line 83,col 9)-(line 83,col 47)",
            "(line 84,col 9)-(line 84,col 47)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 87,col 9)-(line 87,col 27)",
            "(line 88,col 9)-(line 88,col 28)",
            "(line 89,col 9)-(line 89,col 78)",
            "(line 91,col 9)-(line 91,col 88)",
            "(line 93,col 9)-(line 93,col 89)",
            "(line 95,col 9)-(line 95,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC()",
        "snippet": "    public void testFormatUTC() {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.set(2005,0,1,12,0,0);\n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\n        \n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\n        \n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n        \n        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n    }",
        "begin_line": 98,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 71)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 101,col 135)",
            "(line 103,col 9)-(line 103,col 145)",
            "(line 105,col 9)-(line 105,col 146)",
            "(line 107,col 9)-(line 107,col 156)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO()",
        "snippet": "    public void testDateTimeISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,9,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12\", text);\n        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n    }",
        "begin_line": 110,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 58)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 113,col 9)-(line 113,col 35)",
            "(line 114,col 9)-(line 115,col 84)",
            "(line 116,col 9)-(line 116,col 50)",
            "(line 117,col 9)-(line 118,col 82)",
            "(line 119,col 9)-(line 119,col 50)",
            "(line 120,col 9)-(line 120,col 63)",
            "(line 121,col 9)-(line 121,col 50)",
            "(line 123,col 9)-(line 124,col 92)",
            "(line 125,col 9)-(line 125,col 56)",
            "(line 126,col 9)-(line 127,col 92)",
            "(line 128,col 9)-(line 128,col 56)",
            "(line 129,col 9)-(line 129,col 73)",
            "(line 130,col 9)-(line 130,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO()",
        "snippet": "    public void testDateISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23\", text);\n        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"2002-02-23-03:00\", text);\n        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"2002-02-23-03:00\", text);\n    }",
        "begin_line": 133,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 54)",
            "(line 136,col 9)-(line 136,col 36)",
            "(line 137,col 9)-(line 138,col 80)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 140,col 9)-(line 141,col 80)",
            "(line 142,col 9)-(line 142,col 41)",
            "(line 143,col 9)-(line 143,col 59)",
            "(line 144,col 9)-(line 144,col 41)",
            "(line 146,col 9)-(line 147,col 88)",
            "(line 148,col 9)-(line 148,col 47)",
            "(line 149,col 9)-(line 150,col 88)",
            "(line 151,col 9)-(line 151,col 47)",
            "(line 152,col 9)-(line 152,col 69)",
            "(line 153,col 9)-(line 153,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO()",
        "snippet": "    public void testTimeISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12\", text);\n        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n        assertEquals(\"T10:11:12\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"T10:11:12-03:00\", text);\n        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"T10:11:12-03:00\", text);\n    }",
        "begin_line": 156,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 58)",
            "(line 158,col 9)-(line 158,col 54)",
            "(line 159,col 9)-(line 159,col 36)",
            "(line 160,col 9)-(line 161,col 80)",
            "(line 162,col 9)-(line 162,col 40)",
            "(line 163,col 9)-(line 164,col 80)",
            "(line 165,col 9)-(line 165,col 40)",
            "(line 166,col 9)-(line 166,col 59)",
            "(line 167,col 9)-(line 167,col 40)",
            "(line 169,col 9)-(line 170,col 88)",
            "(line 171,col 9)-(line 171,col 46)",
            "(line 172,col 9)-(line 173,col 88)",
            "(line 174,col 9)-(line 174,col 46)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO()",
        "snippet": "    public void testTimeNoTISO(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2002,1,23,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12\", text);\n        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n        assertEquals(\"10:11:12\", text);\n        \n        text = DateFormatUtils.format(cal.getTime(), \n                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12-03:00\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n        assertEquals(\"10:11:12-03:00\", text);\n        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n        assertEquals(\"10:11:12-03:00\", text);\n    }",
        "begin_line": 179,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 58)",
            "(line 181,col 9)-(line 181,col 54)",
            "(line 182,col 9)-(line 182,col 36)",
            "(line 183,col 9)-(line 184,col 85)",
            "(line 185,col 9)-(line 185,col 39)",
            "(line 186,col 9)-(line 187,col 85)",
            "(line 188,col 9)-(line 188,col 39)",
            "(line 189,col 9)-(line 189,col 64)",
            "(line 190,col 9)-(line 190,col 39)",
            "(line 192,col 9)-(line 193,col 93)",
            "(line 194,col 9)-(line 194,col 45)",
            "(line 195,col 9)-(line 196,col 93)",
            "(line 197,col 9)-(line 197,col 45)",
            "(line 198,col 9)-(line 198,col 74)",
            "(line 199,col 9)-(line 199,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateFormatUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
        "signature": "org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP()",
        "snippet": "    public void testSMTP(){\n        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n        Calendar cal = Calendar.getInstance(timeZone);\n        cal.set(2003,5,8,10,11,12);\n        String text = DateFormatUtils.format(cal.getTime(), \n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n        text = DateFormatUtils.format(cal.getTime().getTime(), \n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n        \n        // format UTC\n        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n        assertEquals(\"Sun, 08 Jun 2003 13:11:12 +0000\", text);\n    }",
        "begin_line": 202,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 58)",
            "(line 204,col 9)-(line 204,col 54)",
            "(line 205,col 9)-(line 205,col 35)",
            "(line 206,col 9)-(line 208,col 74)",
            "(line 209,col 9)-(line 209,col 62)",
            "(line 210,col 9)-(line 212,col 74)",
            "(line 213,col 9)-(line 213,col 62)",
            "(line 214,col 9)-(line 214,col 64)",
            "(line 215,col 9)-(line 215,col 62)",
            "(line 218,col 9)-(line 220,col 74)",
            "(line 221,col 9)-(line 221,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n        \n        targetYearDate = dateTimeParser.parse(\"January 1, 2007 0:00:00.000\");\n        targetDateDate = targetDayOfMonthDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n        targetAmDate =  dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n        targetPmDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n        targetHourDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n        targetHourOfDayDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n        targetMinuteDate =  dateTimeParser.parse(\"June 1, 2008 8:15:00.000\");\n        targetSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.000\");\n        targetMilliSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.231\");\n        \n        januaryOneDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n        januaryOneCalendar = Calendar.getInstance();\n        januaryOneCalendar.setTime(januaryOneDate);\n    }",
        "begin_line": 58,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 22)",
            "(line 61,col 9)-(line 61,col 90)",
            "(line 63,col 9)-(line 63,col 77)",
            "(line 64,col 9)-(line 64,col 97)",
            "(line 65,col 9)-(line 65,col 73)",
            "(line 66,col 9)-(line 66,col 73)",
            "(line 67,col 9)-(line 67,col 74)",
            "(line 68,col 9)-(line 68,col 79)",
            "(line 69,col 9)-(line 69,col 77)",
            "(line 70,col 9)-(line 70,col 77)",
            "(line 71,col 9)-(line 71,col 82)",
            "(line 73,col 9)-(line 73,col 77)",
            "(line 74,col 9)-(line 74,col 52)",
            "(line 75,col 9)-(line 75,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear()",
        "snippet": "    public void testRoundYear() throws Exception {\n        final int calendarField = Calendar.YEAR;\n        Date roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n        Date roundedDownDate = targetYearDate;\n        Date lastRoundedDownDate = dateTimeParser.parse(\"June 30, 2007 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.Year\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 48)",
            "(line 86,col 9)-(line 86,col 81)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 86)",
            "(line 89,col 9)-(line 89,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth()",
        "snippet": "    public void testRoundMonth() throws Exception {\n        final int calendarField = Calendar.MONTH;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n        \n        //month with 28 days\n        roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"February 14, 2007 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //month with 29 days\n        roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //month with 30 days\n        roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //month with 31 days\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"May 16, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 17, 2007 00:00:00.000\");\n        maxDate = dateTimeParser.parse(\"January 16, 2008 23:59:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 100,
        "end_line": 133,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.MONTH\n     * Includes rounding months with 28, 29, 30 and 31 days\n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 65)",
            "(line 103,col 9)-(line 103,col 30)",
            "(line 106,col 9)-(line 106,col 74)",
            "(line 107,col 9)-(line 107,col 79)",
            "(line 108,col 9)-(line 108,col 85)",
            "(line 109,col 9)-(line 109,col 91)",
            "(line 112,col 9)-(line 112,col 74)",
            "(line 113,col 9)-(line 113,col 79)",
            "(line 114,col 9)-(line 114,col 85)",
            "(line 115,col 9)-(line 115,col 91)",
            "(line 118,col 9)-(line 118,col 72)",
            "(line 119,col 9)-(line 119,col 76)",
            "(line 120,col 9)-(line 120,col 82)",
            "(line 121,col 9)-(line 121,col 91)",
            "(line 124,col 9)-(line 124,col 73)",
            "(line 125,col 9)-(line 125,col 74)",
            "(line 126,col 9)-(line 126,col 80)",
            "(line 127,col 9)-(line 127,col 91)",
            "(line 130,col 9)-(line 130,col 73)",
            "(line 131,col 9)-(line 131,col 72)",
            "(line 132,col 9)-(line 132,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth()",
        "snippet": "    public void testRoundSemiMonth() throws Exception {\n        final int calendarField = DateUtils.SEMI_MONTH;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n        \n        //month with 28 days (1)\n        roundedUpDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2007 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //month with 28 days (2)\n        roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2007 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //month with 29 days (1)\n        roundedUpDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //month with 29 days (2)\n        roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //month with 30 days (1)\n        roundedUpDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"April 8, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //month with 30 days (2)\n        roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"April 23, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //month with 31 days (1)\n        roundedUpDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"May 8, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //month with 31 days (2)\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n        roundedDownDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n        lastRoundedDownDate = dateTimeParser.parse(\"May 23, 2008 23:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 24, 2007 00:00:00.000\");\n        maxDate = dateTimeParser.parse(\"January 8, 2008 23:59:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 143,
        "end_line": 200,
        "comment": "\n     * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH\n     * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half \n     * Includes rounding to January 1\n     *      \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 55)",
            "(line 145,col 9)-(line 145,col 65)",
            "(line 146,col 9)-(line 146,col 30)",
            "(line 149,col 9)-(line 149,col 78)",
            "(line 150,col 9)-(line 150,col 79)",
            "(line 151,col 9)-(line 151,col 84)",
            "(line 152,col 9)-(line 152,col 91)",
            "(line 155,col 9)-(line 155,col 74)",
            "(line 156,col 9)-(line 156,col 80)",
            "(line 157,col 9)-(line 157,col 85)",
            "(line 158,col 9)-(line 158,col 91)",
            "(line 161,col 9)-(line 161,col 78)",
            "(line 162,col 9)-(line 162,col 79)",
            "(line 163,col 9)-(line 163,col 84)",
            "(line 164,col 9)-(line 164,col 91)",
            "(line 167,col 9)-(line 167,col 74)",
            "(line 168,col 9)-(line 168,col 80)",
            "(line 169,col 9)-(line 169,col 85)",
            "(line 170,col 9)-(line 170,col 91)",
            "(line 173,col 9)-(line 173,col 75)",
            "(line 174,col 9)-(line 174,col 76)",
            "(line 175,col 9)-(line 175,col 81)",
            "(line 176,col 9)-(line 176,col 91)",
            "(line 179,col 9)-(line 179,col 72)",
            "(line 180,col 9)-(line 180,col 77)",
            "(line 181,col 9)-(line 181,col 82)",
            "(line 182,col 9)-(line 182,col 91)",
            "(line 185,col 9)-(line 185,col 73)",
            "(line 186,col 9)-(line 186,col 74)",
            "(line 187,col 9)-(line 187,col 79)",
            "(line 188,col 9)-(line 188,col 91)",
            "(line 191,col 9)-(line 191,col 73)",
            "(line 192,col 9)-(line 192,col 75)",
            "(line 193,col 9)-(line 193,col 80)",
            "(line 194,col 9)-(line 194,col 91)",
            "(line 197,col 9)-(line 197,col 73)",
            "(line 198,col 9)-(line 198,col 71)",
            "(line 199,col 9)-(line 199,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate()",
        "snippet": "    public void testRoundDate() throws Exception {\n        final int calendarField = Calendar.DATE;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n        roundedDownDate = targetDateDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 210,
        "end_line": 224,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.DATE\n     * Includes rounding the extremes of one day \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 48)",
            "(line 212,col 9)-(line 212,col 65)",
            "(line 213,col 9)-(line 213,col 30)",
            "(line 215,col 9)-(line 215,col 73)",
            "(line 216,col 9)-(line 216,col 41)",
            "(line 217,col 9)-(line 217,col 80)",
            "(line 218,col 9)-(line 218,col 91)",
            "(line 221,col 9)-(line 221,col 73)",
            "(line 222,col 9)-(line 222,col 71)",
            "(line 223,col 9)-(line 223,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth()",
        "snippet": "    public void testRoundDayOfMonth() throws Exception {\n        final int calendarField = Calendar.DAY_OF_MONTH;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n        roundedDownDate = targetDayOfMonthDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 234,
        "end_line": 248,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH\n     * Includes rounding the extremes of one day \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 56)",
            "(line 236,col 9)-(line 236,col 65)",
            "(line 237,col 9)-(line 237,col 30)",
            "(line 239,col 9)-(line 239,col 73)",
            "(line 240,col 9)-(line 240,col 47)",
            "(line 241,col 9)-(line 241,col 80)",
            "(line 242,col 9)-(line 242,col 91)",
            "(line 245,col 9)-(line 245,col 73)",
            "(line 246,col 9)-(line 246,col 71)",
            "(line 247,col 9)-(line 247,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm()",
        "snippet": "    public void testRoundAmPm() throws Exception {\n        final int calendarField = Calendar.AM_PM;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        //AM\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n        roundedDownDate = targetAmDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 5:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //PM\n        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n        roundedDownDate = targetPmDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 17:59:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n\n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 18:00:00.000\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 5:59:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 258,
        "end_line": 279,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.AM_PM\n     * Includes rounding the extremes of both AM and PM of one day \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 49)",
            "(line 260,col 9)-(line 260,col 65)",
            "(line 261,col 9)-(line 261,col 30)",
            "(line 264,col 9)-(line 264,col 74)",
            "(line 265,col 9)-(line 265,col 39)",
            "(line 266,col 9)-(line 266,col 79)",
            "(line 267,col 9)-(line 267,col 91)",
            "(line 270,col 9)-(line 270,col 73)",
            "(line 271,col 9)-(line 271,col 39)",
            "(line 272,col 9)-(line 272,col 80)",
            "(line 273,col 9)-(line 273,col 91)",
            "(line 276,col 9)-(line 276,col 73)",
            "(line 277,col 9)-(line 277,col 70)",
            "(line 278,col 9)-(line 278,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay()",
        "snippet": "    public void testRoundHourOfDay() throws Exception {\n        final int calendarField = Calendar.HOUR_OF_DAY;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n        roundedDownDate = targetHourOfDayDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 289,
        "end_line": 303,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY\n     * Includes rounding the extremes of one hour \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 55)",
            "(line 291,col 9)-(line 291,col 65)",
            "(line 292,col 9)-(line 292,col 30)",
            "(line 294,col 9)-(line 294,col 73)",
            "(line 295,col 9)-(line 295,col 46)",
            "(line 296,col 9)-(line 296,col 79)",
            "(line 297,col 9)-(line 297,col 91)",
            "(line 300,col 9)-(line 300,col 73)",
            "(line 301,col 9)-(line 301,col 70)",
            "(line 302,col 9)-(line 302,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour()",
        "snippet": "    public void testRoundHour() throws Exception {\n        final int calendarField = Calendar.HOUR;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n        roundedDownDate = targetHourDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 313,
        "end_line": 327,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.HOUR\n     * Includes rounding the extremes of one hour \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 48)",
            "(line 315,col 9)-(line 315,col 65)",
            "(line 316,col 9)-(line 316,col 30)",
            "(line 318,col 9)-(line 318,col 73)",
            "(line 319,col 9)-(line 319,col 41)",
            "(line 320,col 9)-(line 320,col 79)",
            "(line 321,col 9)-(line 321,col 91)",
            "(line 324,col 9)-(line 324,col 73)",
            "(line 325,col 9)-(line 325,col 70)",
            "(line 326,col 9)-(line 326,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute()",
        "snippet": "    public void testRoundMinute() throws Exception {\n        final int calendarField = Calendar.MINUTE;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:16:00.000\");\n        roundedDownDate = targetMinuteDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:29.999\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 23:59:30.000\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:29.999\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 337,
        "end_line": 351,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.MINUTE\n     * Includes rounding the extremes of one minute \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 50)",
            "(line 339,col 9)-(line 339,col 65)",
            "(line 340,col 9)-(line 340,col 30)",
            "(line 342,col 9)-(line 342,col 73)",
            "(line 343,col 9)-(line 343,col 43)",
            "(line 344,col 9)-(line 344,col 79)",
            "(line 345,col 9)-(line 345,col 91)",
            "(line 348,col 9)-(line 348,col 73)",
            "(line 349,col 9)-(line 349,col 70)",
            "(line 350,col 9)-(line 350,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond()",
        "snippet": "    public void testRoundSecond() throws Exception {\n        final int calendarField = Calendar.SECOND;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:15.000\");\n        roundedDownDate = targetSecondDate;\n        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.499\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.500\");\n        maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.499\");\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 361,
        "end_line": 375,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.SECOND\n     * Includes rounding the extremes of one second \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 50)",
            "(line 363,col 9)-(line 363,col 65)",
            "(line 364,col 9)-(line 364,col 30)",
            "(line 366,col 9)-(line 366,col 73)",
            "(line 367,col 9)-(line 367,col 43)",
            "(line 368,col 9)-(line 368,col 79)",
            "(line 369,col 9)-(line 369,col 91)",
            "(line 372,col 9)-(line 372,col 73)",
            "(line 373,col 9)-(line 373,col 70)",
            "(line 374,col 9)-(line 374,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond()",
        "snippet": "    public void testRoundMilliSecond() throws Exception {\n        final int calendarField = Calendar.MILLISECOND;\n        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n        Date minDate, maxDate;\n\n        roundedDownDate = lastRoundedDownDate = targetMilliSecondDate;\n        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.232\");\n        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n        \n        //round to January 1\n        minDate = maxDate = januaryOneDate;\n        roundToJanuaryFirst(minDate, maxDate, calendarField);\n    }",
        "begin_line": 385,
        "end_line": 397,
        "comment": "\n     * Tests DateUtils.round()-method with Calendar.MILLISECOND\n     * Includes rounding the extremes of one second \n     * Includes rounding to January 1\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 55)",
            "(line 387,col 9)-(line 387,col 65)",
            "(line 388,col 9)-(line 388,col 30)",
            "(line 390,col 9)-(line 390,col 70)",
            "(line 391,col 9)-(line 391,col 73)",
            "(line 392,col 9)-(line 392,col 91)",
            "(line 395,col 9)-(line 395,col 43)",
            "(line 396,col 9)-(line 396,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear()",
        "snippet": "    public void testTruncateYear() throws Exception {\n        final int calendarField = Calendar.YEAR;\n        Date lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\n        baseTruncateTest(targetYearDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 405,
        "end_line": 409,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.YEAR\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 48)",
            "(line 407,col 9)-(line 407,col 87)",
            "(line 408,col 9)-(line 408,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth()",
        "snippet": "    public void testTruncateMonth() throws Exception {\n        final int calendarField = Calendar.MONTH;\n        Date truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n        Date lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 417,
        "end_line": 422,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.MONTH\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 49)",
            "(line 419,col 9)-(line 419,col 79)",
            "(line 420,col 9)-(line 420,col 84)",
            "(line 421,col 9)-(line 421,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth()",
        "snippet": "    public void testTruncateSemiMonth() throws Exception {\n        final int calendarField = DateUtils.SEMI_MONTH;\n        Date truncatedDate, lastTruncateDate;\n        \n        //month with 28 days (1)\n        truncatedDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"February 15, 2007 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n        //month with 28 days (2)\n        truncatedDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"February 28, 2007 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n        //month with 29 days (1)\n        truncatedDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n        //month with 29 days (2)\n        truncatedDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"February 29, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n        //month with 30 days (1)\n        truncatedDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n        //month with 30 days (2)\n        truncatedDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"April 30, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n        \n        //month with 31 days (1)\n        truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"March 15, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n        //month with 31 days (2)\n        truncatedDate = dateTimeParser.parse(\"March 16, 2008 0:00:00.000\");\n        lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n\n    }",
        "begin_line": 431,
        "end_line": 475,
        "comment": "\n     * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH\n     * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 55)",
            "(line 433,col 9)-(line 433,col 45)",
            "(line 436,col 9)-(line 436,col 77)",
            "(line 437,col 9)-(line 437,col 82)",
            "(line 438,col 9)-(line 438,col 73)",
            "(line 441,col 9)-(line 441,col 78)",
            "(line 442,col 9)-(line 442,col 82)",
            "(line 443,col 9)-(line 443,col 73)",
            "(line 446,col 9)-(line 446,col 77)",
            "(line 447,col 9)-(line 447,col 82)",
            "(line 448,col 9)-(line 448,col 73)",
            "(line 451,col 9)-(line 451,col 78)",
            "(line 452,col 9)-(line 452,col 82)",
            "(line 453,col 9)-(line 453,col 73)",
            "(line 456,col 9)-(line 456,col 74)",
            "(line 457,col 9)-(line 457,col 79)",
            "(line 458,col 9)-(line 458,col 73)",
            "(line 461,col 9)-(line 461,col 75)",
            "(line 462,col 9)-(line 462,col 79)",
            "(line 463,col 9)-(line 463,col 73)",
            "(line 466,col 9)-(line 466,col 74)",
            "(line 467,col 9)-(line 467,col 79)",
            "(line 468,col 9)-(line 468,col 73)",
            "(line 471,col 9)-(line 471,col 75)",
            "(line 472,col 9)-(line 472,col 79)",
            "(line 473,col 9)-(line 473,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate()",
        "snippet": "    public void testTruncateDate() throws Exception {\n        final int calendarField = Calendar.DATE;\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n        baseTruncateTest(targetDateDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 483,
        "end_line": 487,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.DATE\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 48)",
            "(line 485,col 9)-(line 485,col 82)",
            "(line 486,col 9)-(line 486,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth()",
        "snippet": "    public void testTruncateDayOfMonth() throws Exception {\n        final int calendarField = Calendar.DAY_OF_MONTH;\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n        baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 495,
        "end_line": 499,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 56)",
            "(line 497,col 9)-(line 497,col 82)",
            "(line 498,col 9)-(line 498,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm()",
        "snippet": "    public void testTruncateAmPm() throws Exception {\n        final int calendarField = Calendar.AM_PM;\n        \n        //AM\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n        baseTruncateTest(targetAmDate, lastTruncateDate, calendarField);\n\n        //PM\n        lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n        baseTruncateTest(targetPmDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 508,
        "end_line": 518,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.AM_PM\n     * Includes truncating the extremes of both AM and PM of one day \n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 509,col 9)-(line 509,col 49)",
            "(line 512,col 9)-(line 512,col 82)",
            "(line 513,col 9)-(line 513,col 72)",
            "(line 516,col 9)-(line 516,col 77)",
            "(line 517,col 9)-(line 517,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour()",
        "snippet": "    public void testTruncateHour() throws Exception {\n        final int calendarField = Calendar.HOUR;\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n        baseTruncateTest(targetHourDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 526,
        "end_line": 530,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.HOUR\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 527,col 9)-(line 527,col 48)",
            "(line 528,col 9)-(line 528,col 81)",
            "(line 529,col 9)-(line 529,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay()",
        "snippet": "    public void testTruncateHourOfDay() throws Exception {\n        final int calendarField = Calendar.HOUR_OF_DAY;\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n        baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 538,
        "end_line": 542,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 539,col 9)-(line 539,col 55)",
            "(line 540,col 9)-(line 540,col 81)",
            "(line 541,col 9)-(line 541,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute()",
        "snippet": "    public void testTruncateMinute() throws Exception {\n        final int calendarField = Calendar.MINUTE;\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\n        baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 550,
        "end_line": 554,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.MINUTE\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 551,col 9)-(line 551,col 50)",
            "(line 552,col 9)-(line 552,col 81)",
            "(line 553,col 9)-(line 553,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond()",
        "snippet": "    public void testTruncateSecond() throws Exception {\n        final int calendarField = Calendar.SECOND;\n        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\n        baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);\n    }",
        "begin_line": 562,
        "end_line": 566,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.SECOND\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 563,col 9)-(line 563,col 50)",
            "(line 564,col 9)-(line 564,col 81)",
            "(line 565,col 9)-(line 565,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond()",
        "snippet": "    public void testTruncateMilliSecond() throws Exception {\n        final int calendarField = Calendar.MILLISECOND;\n        baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\n    }",
        "begin_line": 574,
        "end_line": 577,
        "comment": "\n     * Test DateUtils.truncate()-method with Calendar.SECOND\n     * \n     * @throws Exception\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 575,col 9)-(line 575,col 55)",
            "(line 576,col 9)-(line 576,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.baseRoundTest(java.util.Date, java.util.Date, java.util.Date, int)",
        "snippet": "    protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {\n        Date firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);\n        \n        //Date-comparison\n        assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));\n        assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));\n        assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));\n        assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));\n        \n        //Calendar-initiations\n        Calendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar; \n        roundedDownCalendar = Calendar.getInstance();\n        roundedUpCalendar = Calendar.getInstance();\n        lastRoundDownCalendar = Calendar.getInstance();\n        firstRoundUpCalendar = Calendar.getInstance();\n        roundedDownCalendar.setTime(roundedDownDate);\n        roundedUpCalendar.setTime(roundedUpDate);\n        lastRoundDownCalendar.setTime(lastRoundDownDate);\n        firstRoundUpCalendar.setTime(firstRoundUpDate);\n\n        //Calendar-comparison\n        assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));\n        assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));\n        assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));\n        assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));\n\n        //Object-comparison\n        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));\n        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));\n        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));\n        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));\n        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n    }",
        "begin_line": 591,
        "end_line": 626,
        "comment": "\n     * When using this basetest all extremes are tested.<br> \n     * It will test the Date, Calendar and Object-implementation<br>\n     * lastRoundDownDate should round down to roundedDownDate<br>\n     * lastRoundDownDate + 1 millisecond should round up to roundedUpDate\n     * \n     * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>\n     * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>\n     * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>\n     * @param calendarField\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 592,col 9)-(line 592,col 80)",
            "(line 595,col 9)-(line 595,col 87)",
            "(line 596,col 9)-(line 596,col 83)",
            "(line 597,col 9)-(line 597,col 89)",
            "(line 598,col 9)-(line 598,col 86)",
            "(line 601,col 9)-(line 601,col 101)",
            "(line 602,col 9)-(line 602,col 53)",
            "(line 603,col 9)-(line 603,col 51)",
            "(line 604,col 9)-(line 604,col 55)",
            "(line 605,col 9)-(line 605,col 54)",
            "(line 606,col 9)-(line 606,col 53)",
            "(line 607,col 9)-(line 607,col 49)",
            "(line 608,col 9)-(line 608,col 57)",
            "(line 609,col 9)-(line 609,col 55)",
            "(line 612,col 9)-(line 612,col 95)",
            "(line 613,col 9)-(line 613,col 91)",
            "(line 614,col 9)-(line 614,col 97)",
            "(line 615,col 9)-(line 615,col 94)",
            "(line 618,col 9)-(line 618,col 96)",
            "(line 619,col 9)-(line 619,col 92)",
            "(line 620,col 9)-(line 620,col 98)",
            "(line 621,col 9)-(line 621,col 95)",
            "(line 622,col 9)-(line 622,col 100)",
            "(line 623,col 9)-(line 623,col 96)",
            "(line 624,col 9)-(line 624,col 98)",
            "(line 625,col 9)-(line 625,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.baseTruncateTest(java.util.Date, java.util.Date, int)",
        "snippet": "    protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {\n        Date nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);\n        \n        //Date-comparison\n        assertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));\n        assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));\n        assertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));\n        \n        //Calendar-initiations\n        Calendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar; \n        truncatedCalendar = Calendar.getInstance();\n        lastTruncateCalendar = Calendar.getInstance();\n        nextTruncateCalendar = Calendar.getInstance();\n        truncatedCalendar.setTime(truncatedDate);\n        lastTruncateCalendar.setTime(lastTruncateDate);\n        nextTruncateCalendar.setTime(nextTruncateDate);\n\n        //Calendar-comparison\n        assertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar with CalendarField-value \"+ calendarField +\" must return itself\", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));\n        assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));\n        assertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar with CalendarField-value \"+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));\n\n        //Object-comparison\n        assertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));\n        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));\n        assertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));\n        assertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));\n        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));\n        assertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));\n    }",
        "begin_line": 639,
        "end_line": 668,
        "comment": "\n     * When using this basetest all extremes are tested.<br> \n     * It will test the Date, Calendar and Object-implementation<br>\n     * lastTruncateDate should round down to truncatedDate<br>\n     * lastTruncateDate + 1 millisecond should never round down to truncatedDate\n     * \n     * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>\n     * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>\n     * @param calendarField a Calendar.field value\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 640,col 9)-(line 640,col 79)",
            "(line 643,col 9)-(line 643,col 204)",
            "(line 644,col 9)-(line 644,col 89)",
            "(line 645,col 9)-(line 645,col 212)",
            "(line 648,col 9)-(line 648,col 79)",
            "(line 649,col 9)-(line 649,col 51)",
            "(line 650,col 9)-(line 650,col 54)",
            "(line 651,col 9)-(line 651,col 54)",
            "(line 652,col 9)-(line 652,col 49)",
            "(line 653,col 9)-(line 653,col 55)",
            "(line 654,col 9)-(line 654,col 55)",
            "(line 657,col 9)-(line 657,col 220)",
            "(line 658,col 9)-(line 658,col 97)",
            "(line 659,col 9)-(line 659,col 228)",
            "(line 662,col 9)-(line 662,col 236)",
            "(line 663,col 9)-(line 663,col 98)",
            "(line 664,col 9)-(line 664,col 236)",
            "(line 665,col 9)-(line 665,col 248)",
            "(line 666,col 9)-(line 666,col 102)",
            "(line 667,col 9)-(line 667,col 248)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsRoundingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsRoundingTest.roundToJanuaryFirst(java.util.Date, java.util.Date, int)",
        "snippet": "    protected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {\n        assertEquals(\"Rounding \"+ fdf.format(januaryOneDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));\n        assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));\n        assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));\n        \n        Calendar minCalendar = Calendar.getInstance();\n        minCalendar.setTime(minDate);\n        Calendar maxCalendar = Calendar.getInstance();\n        maxCalendar.setTime(maxDate);\n        assertEquals(\"Rounding \"+ fdf.format(januaryOneCalendar) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));\n        assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));\n        assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));\n\n        Date toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);\n        Date toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);\n        assertFalse(fdf.format(minDate) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n        assertFalse(fdf.format(maxDate) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n        \n        Calendar toPrevRoundCalendar = Calendar.getInstance();\n        toPrevRoundCalendar.setTime(toPrevRoundDate);\n        Calendar toNextRoundCalendar = Calendar.getInstance();\n        toNextRoundCalendar.setTime(toNextRoundDate);\n        assertFalse(fdf.format(minCalendar) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n        assertFalse(fdf.format(maxCalendar) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n    }",
        "begin_line": 680,
        "end_line": 704,
        "comment": "\n     * \n     * Any January 1 could be considered as the ultimate extreme.\n     * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first. \n     * \n     * @param minDate\n     * @param maxDate\n     * @param calendarField\n     * @since 3.0\n     ",
        "child_ranges": [
            "(line 681,col 9)-(line 681,col 202)",
            "(line 682,col 9)-(line 682,col 78)",
            "(line 683,col 9)-(line 683,col 78)",
            "(line 685,col 9)-(line 685,col 54)",
            "(line 686,col 9)-(line 686,col 37)",
            "(line 687,col 9)-(line 687,col 54)",
            "(line 688,col 9)-(line 688,col 37)",
            "(line 689,col 9)-(line 689,col 214)",
            "(line 690,col 9)-(line 690,col 86)",
            "(line 691,col 9)-(line 691,col 86)",
            "(line 693,col 9)-(line 693,col 70)",
            "(line 694,col 9)-(line 694,col 69)",
            "(line 695,col 9)-(line 695,col 204)",
            "(line 696,col 9)-(line 696,col 204)",
            "(line 698,col 9)-(line 698,col 62)",
            "(line 699,col 9)-(line 699,col 53)",
            "(line 700,col 9)-(line 700,col 62)",
            "(line 701,col 9)-(line 701,col 53)",
            "(line 702,col 9)-(line 702,col 208)",
            "(line 703,col 9)-(line 703,col 208)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() {\n        aCalendar = Calendar.getInstance();\n        aCalendar.set(2005, months, days, hours, minutes, seconds);\n        aCalendar.set(Calendar.MILLISECOND, millis);\n        aDate = aCalendar.getTime();\n    }",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 43)",
            "(line 39,col 9)-(line 39,col 67)",
            "(line 40,col 9)-(line 40,col 52)",
            "(line 41,col 9)-(line 41,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullDate()",
        "snippet": "    public void testNullDate() {\n        try {\n            DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n    }",
        "begin_line": 44,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 48,col 48)",
            "(line 50,col 9)-(line 53,col 48)",
            "(line 55,col 9)-(line 58,col 48)",
            "(line 60,col 9)-(line 63,col 48)",
            "(line 65,col 9)-(line 68,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullCalendar()",
        "snippet": "    public void testNullCalendar() {\n        try {\n            DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n    }",
        "begin_line": 71,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 75,col 48)",
            "(line 77,col 9)-(line 80,col 48)",
            "(line 82,col 9)-(line 85,col 48)",
            "(line 87,col 9)-(line 90,col 48)",
            "(line 92,col 9)-(line 95,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithDate()",
        "snippet": "    public void testInvalidFragmentWithDate() {\n        try {\n            DateUtils.getFragmentInMilliseconds(aDate, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInSeconds(aDate, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInMinutes(aDate, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInHours(aDate, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInDays(aDate, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n    }",
        "begin_line": 98,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 102,col 48)",
            "(line 104,col 9)-(line 107,col 48)",
            "(line 109,col 9)-(line 112,col 48)",
            "(line 114,col 9)-(line 117,col 48)",
            "(line 119,col 9)-(line 122,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithCalendar()",
        "snippet": "    public void testInvalidFragmentWithCalendar() {\n        try {\n            DateUtils.getFragmentInMilliseconds(aCalendar, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInSeconds(aCalendar, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInMinutes(aCalendar, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInHours(aCalendar, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n\n        try {\n            DateUtils.getFragmentInDays(aCalendar, 0);\n            fail();\n        } catch(IllegalArgumentException iae) {}\n    }",
        "begin_line": 125,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 129,col 48)",
            "(line 131,col 9)-(line 134,col 48)",
            "(line 136,col 9)-(line 139,col 48)",
            "(line 141,col 9)-(line 144,col 48)",
            "(line 146,col 9)-(line 149,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate()",
        "snippet": "    public void testMillisecondFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n    }",
        "begin_line": 152,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 90)",
            "(line 154,col 9)-(line 154,col 85)",
            "(line 155,col 9)-(line 155,col 85)",
            "(line 156,col 9)-(line 156,col 83)",
            "(line 157,col 9)-(line 157,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithCalendar()",
        "snippet": "    public void testMillisecondFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n    }",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 94)",
            "(line 162,col 9)-(line 162,col 89)",
            "(line 163,col 9)-(line 163,col 89)",
            "(line 164,col 9)-(line 164,col 87)",
            "(line 165,col 9)-(line 165,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithDate()",
        "snippet": "    public void testSecondFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n    }",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 80)",
            "(line 170,col 9)-(line 170,col 80)",
            "(line 171,col 9)-(line 171,col 78)",
            "(line 172,col 9)-(line 172,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithCalendar()",
        "snippet": "    public void testSecondFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n    }",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 84)",
            "(line 177,col 9)-(line 177,col 84)",
            "(line 178,col 9)-(line 178,col 82)",
            "(line 179,col 9)-(line 179,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithDate()",
        "snippet": "    public void testMinuteFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n    }",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 80)",
            "(line 184,col 9)-(line 184,col 78)",
            "(line 185,col 9)-(line 185,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithCalendar()",
        "snippet": "    public void testMinuteFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n    }",
        "begin_line": 188,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 84)",
            "(line 190,col 9)-(line 190,col 82)",
            "(line 191,col 9)-(line 191,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithDate()",
        "snippet": "    public void testHourOfDayFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n    }",
        "begin_line": 194,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 83)",
            "(line 196,col 9)-(line 196,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithCalendar()",
        "snippet": "    public void testHourOfDayFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n    }",
        "begin_line": 199,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 87)",
            "(line 201,col 9)-(line 201,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithDate()",
        "snippet": "    public void testDayOfYearFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithCalendar()",
        "snippet": "    public void testDayOfYearFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n    }",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testDateFragmentInLargerUnitWithDate()",
        "snippet": "    public void testDateFragmentInLargerUnitWithDate() {\n        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n    }",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testDateFragmentInLargerUnitWithCalendar()",
        "snippet": "    public void testDateFragmentInLargerUnitWithCalendar() {\n        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n    }",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfSecondWithDate()",
        "snippet": "    public void testMillisecondsOfSecondWithDate() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n        assertEquals(millis, testResult);\n    }",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 86)",
            "(line 224,col 9)-(line 224,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfSecondWithCalendar()",
        "snippet": "    public void testMillisecondsOfSecondWithCalendar() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n        assertEquals(millis, testResult);\n        assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\n    }",
        "begin_line": 227,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 90)",
            "(line 229,col 9)-(line 229,col 41)",
            "(line 230,col 9)-(line 230,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMinuteWithDate()",
        "snippet": "    public void testMillisecondsOfMinuteWithDate() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n    }",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 86)",
            "(line 237,col 9)-(line 237,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMinuteWithCalender()",
        "snippet": "    public void testMillisecondsOfMinuteWithCalender() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n    }",
        "begin_line": 240,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 90)",
            "(line 242,col 9)-(line 242,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofMinuteWithDate()",
        "snippet": "    public void testSecondsofMinuteWithDate() {\n        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n        assertEquals(seconds, testResult);\n    }",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 81)",
            "(line 247,col 9)-(line 247,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofMinuteWithCalendar()",
        "snippet": "    public void testSecondsofMinuteWithCalendar() {\n        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n        assertEquals(seconds, testResult);\n        assertEquals(aCalendar.get(Calendar.SECOND), testResult);\n    }",
        "begin_line": 250,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 85)",
            "(line 252,col 9)-(line 252,col 42)",
            "(line 253,col 9)-(line 253,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfHourWithDate()",
        "snippet": "    public void testMillisecondsOfHourWithDate() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n    }",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 91)",
            "(line 260,col 9)-(line 260,col 125)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfHourWithCalendar()",
        "snippet": "    public void testMillisecondsOfHourWithCalendar() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n    }",
        "begin_line": 263,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 95)",
            "(line 265,col 9)-(line 265,col 125)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofHourWithDate()",
        "snippet": "    public void testSecondsofHourWithDate() {\n        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n        assertEquals(\n                seconds\n                        + (minutes\n                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n                testResult);\n    }",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 86)",
            "(line 270,col 9)-(line 274,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsofHourWithCalendar()",
        "snippet": "    public void testSecondsofHourWithCalendar() {\n        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n        assertEquals(\n                seconds\n                        + (minutes\n                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n                testResult);\n    }",
        "begin_line": 277,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 90)",
            "(line 279,col 9)-(line 283,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfHourWithDate()",
        "snippet": "    public void testMinutesOfHourWithDate() {\n        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n        assertEquals(minutes, testResult);\n    }",
        "begin_line": 286,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 86)",
            "(line 288,col 9)-(line 288,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfHourWithCalendar()",
        "snippet": "    public void testMinutesOfHourWithCalendar() {\n        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n        assertEquals(minutes, testResult);\n    }",
        "begin_line": 291,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 90)",
            "(line 293,col 9)-(line 293,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfDayWithDate()",
        "snippet": "    public void testMillisecondsOfDayWithDate() {\n        long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }",
        "begin_line": 297,
        "end_line": 303,
        "comment": "Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 84)",
            "(line 299,col 9)-(line 299,col 158)",
            "(line 300,col 9)-(line 300,col 48)",
            "(line 301,col 9)-(line 301,col 86)",
            "(line 302,col 9)-(line 302,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfDayWithCalendar()",
        "snippet": "    public void testMillisecondsOfDayWithCalendar() {\n        long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }",
        "begin_line": 305,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 88)",
            "(line 307,col 9)-(line 307,col 158)",
            "(line 308,col 9)-(line 308,col 48)",
            "(line 309,col 9)-(line 309,col 90)",
            "(line 310,col 9)-(line 310,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfDayWithDate()",
        "snippet": "    public void testSecondsOfDayWithDate() {\n        long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }",
        "begin_line": 313,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 79)",
            "(line 315,col 9)-(line 315,col 148)",
            "(line 316,col 9)-(line 316,col 48)",
            "(line 317,col 9)-(line 317,col 81)",
            "(line 318,col 9)-(line 318,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfDayWithCalendar()",
        "snippet": "    public void testSecondsOfDayWithCalendar() {\n        long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n        assertEquals(expectedValue, testresult);\n        testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testresult);\n    }",
        "begin_line": 321,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 83)",
            "(line 323,col 9)-(line 323,col 148)",
            "(line 324,col 9)-(line 324,col 48)",
            "(line 325,col 9)-(line 325,col 85)",
            "(line 326,col 9)-(line 326,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfDayWithDate()",
        "snippet": "    public void testMinutesOfDayWithDate() {\n        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n        assertEquals(expectedValue,testResult);\n        testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue,testResult);\n    }",
        "begin_line": 329,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 79)",
            "(line 331,col 9)-(line 331,col 106)",
            "(line 332,col 9)-(line 332,col 47)",
            "(line 333,col 9)-(line 333,col 81)",
            "(line 334,col 9)-(line 334,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfDayWithCalendar()",
        "snippet": "    public void testMinutesOfDayWithCalendar() {\n        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n        assertEquals(expectedValue, testResult);\n        testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testResult);\n    }",
        "begin_line": 337,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 83)",
            "(line 339,col 9)-(line 339,col 106)",
            "(line 340,col 9)-(line 340,col 48)",
            "(line 341,col 9)-(line 341,col 85)",
            "(line 342,col 9)-(line 342,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfDayWithDate()",
        "snippet": "    public void testHoursOfDayWithDate() {\n        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n        long expectedValue = hours; \n        assertEquals(expectedValue,testResult);\n        testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue,testResult);\n    }",
        "begin_line": 345,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 77)",
            "(line 347,col 9)-(line 347,col 35)",
            "(line 348,col 9)-(line 348,col 47)",
            "(line 349,col 9)-(line 349,col 79)",
            "(line 350,col 9)-(line 350,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfDayWithCalendar()",
        "snippet": "    public void testHoursOfDayWithCalendar() {\n        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n        long expectedValue = hours; \n        assertEquals(expectedValue, testResult);\n        testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\n        assertEquals(expectedValue, testResult);\n    }",
        "begin_line": 353,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 81)",
            "(line 355,col 9)-(line 355,col 35)",
            "(line 356,col 9)-(line 356,col 48)",
            "(line 357,col 9)-(line 357,col 83)",
            "(line 358,col 9)-(line 358,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMonthWithDate()",
        "snippet": "    public void testMillisecondsOfMonthWithDate() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n                testResult);\n    }",
        "begin_line": 363,
        "end_line": 368,
        "comment": "Calendar.MONTH as useful fragment",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 85)",
            "(line 365,col 9)-(line 367,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfMonthWithCalendar()",
        "snippet": "    public void testMillisecondsOfMonthWithCalendar() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\ntestResult);\n    }",
        "begin_line": 370,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 89)",
            "(line 372,col 9)-(line 374,col 12)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfMonthWithDate()",
        "snippet": "    public void testSecondsOfMonthWithDate() {\n        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n        assertEquals(\n                seconds\n                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_SECOND,\n                testResult);\n    }",
        "begin_line": 377,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 80)",
            "(line 379,col 9)-(line 384,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfMonthWithCalendar()",
        "snippet": "    public void testSecondsOfMonthWithCalendar() {\n        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n        assertEquals(\n                seconds\n                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_SECOND,\n                testResult);\n    }",
        "begin_line": 387,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 84)",
            "(line 389,col 9)-(line 394,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfMonthWithDate()",
        "snippet": "    public void testMinutesOfMonthWithDate() {\n        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n        assertEquals(minutes\n                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_MINUTE,\n                testResult);\n    }",
        "begin_line": 397,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 80)",
            "(line 399,col 9)-(line 402,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfMonthWithCalendar()",
        "snippet": "    public void testMinutesOfMonthWithCalendar() {\n        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_MINUTE,\n                testResult);\n    }",
        "begin_line": 405,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 84)",
            "(line 407,col 9)-(line 409,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfMonthWithDate()",
        "snippet": "    public void testHoursOfMonthWithDate() {\n        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n        assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_HOUR,\n                testResult);\n    }",
        "begin_line": 412,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 78)",
            "(line 414,col 9)-(line 416,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfMonthWithCalendar()",
        "snippet": "    public void testHoursOfMonthWithCalendar() {\n        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n        assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_HOUR,\n                testResult);\n    }",
        "begin_line": 419,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 82)",
            "(line 421,col 9)-(line 423,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfYearWithDate()",
        "snippet": "    public void testMillisecondsOfYearWithDate() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(aDate);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n                testResult);\n    }",
        "begin_line": 427,
        "end_line": 434,
        "comment": "Calendar.YEAR as useful fragment",
        "child_ranges": [
            "(line 428,col 9)-(line 428,col 84)",
            "(line 429,col 9)-(line 429,col 46)",
            "(line 430,col 9)-(line 430,col 27)",
            "(line 431,col 9)-(line 433,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondsOfYearWithCalendar()",
        "snippet": "    public void testMillisecondsOfYearWithCalendar() {\n        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\ntestResult);\n    }",
        "begin_line": 436,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 88)",
            "(line 438,col 9)-(line 440,col 12)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfYearWithDate()",
        "snippet": "    public void testSecondsOfYearWithDate() {\n        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(aDate);\n        assertEquals(\n                seconds\n                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_SECOND,\n                testResult);\n    }",
        "begin_line": 443,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 79)",
            "(line 445,col 9)-(line 445,col 46)",
            "(line 446,col 9)-(line 446,col 27)",
            "(line 447,col 9)-(line 452,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondsOfYearWithCalendar()",
        "snippet": "    public void testSecondsOfYearWithCalendar() {\n        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\n        assertEquals(\n                seconds\n                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n                                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_SECOND,\n                testResult);\n    }",
        "begin_line": 455,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 83)",
            "(line 457,col 9)-(line 462,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfYearWithDate()",
        "snippet": "    public void testMinutesOfYearWithDate() {\n        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(aDate);\n        assertEquals(minutes\n                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_MINUTE,\n                testResult);\n    }",
        "begin_line": 465,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 79)",
            "(line 467,col 9)-(line 467,col 46)",
            "(line 468,col 9)-(line 468,col 27)",
            "(line 469,col 9)-(line 472,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfYearWithCalendar()",
        "snippet": "    public void testMinutesOfYearWithCalendar() {\n        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\n        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_MINUTE,\n                testResult);\n    }",
        "begin_line": 475,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 83)",
            "(line 477,col 9)-(line 479,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfYearWithDate()",
        "snippet": "    public void testHoursOfYearWithDate() {\n        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(aDate);\n        assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_HOUR,\n                testResult);\n    }",
        "begin_line": 482,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 77)",
            "(line 484,col 9)-(line 484,col 46)",
            "(line 485,col 9)-(line 485,col 27)",
            "(line 486,col 9)-(line 488,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.DateUtilsFragmentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
        "signature": "org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfYearWithCalendar()",
        "snippet": "    public void testHoursOfYearWithCalendar() {\n        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\n        assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                        / DateUtils.MILLIS_PER_HOUR,\n                testResult);\n    }",
        "begin_line": 491,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 81)",
            "(line 493,col 9)-(line 495,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.FastDateFormatTest(java.lang.String)",
        "snippet": "    public FastDateFormatTest(String name) {\n        super(name);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance()",
        "snippet": "    public void test_getInstance() {\n        FastDateFormat format1 = FastDateFormat.getInstance();\n        FastDateFormat format2 = FastDateFormat.getInstance();\n        assertSame(format1, format2);\n        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n    }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 62)",
            "(line 47,col 9)-(line 47,col 62)",
            "(line 48,col 9)-(line 48,col 37)",
            "(line 49,col 9)-(line 49,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String()",
        "snippet": "    public void test_getInstance_String() {\n        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n        FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n        FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n        assertSame(format2, format3);\n        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n        assertEquals(false, format1.getTimeZoneOverridesCalendar());\n        assertEquals(false, format2.getTimeZoneOverridesCalendar());\n    }",
        "begin_line": 52,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 74)",
            "(line 54,col 9)-(line 54,col 74)",
            "(line 55,col 9)-(line 55,col 74)",
            "(line 57,col 9)-(line 57,col 39)",
            "(line 58,col 9)-(line 58,col 37)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 67)",
            "(line 61,col 9)-(line 61,col 67)",
            "(line 62,col 9)-(line 62,col 68)",
            "(line 63,col 9)-(line 63,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone()",
        "snippet": "    public void test_getInstance_String_TimeZone() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n            FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertSame(format3, format4);\n            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
        "begin_line": 66,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 57)",
            "(line 69,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale()",
        "snippet": "    public void test_getInstance_String_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertSame(format1, format3);\n            assertSame(Locale.GERMANY, format1.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
        "begin_line": 96,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
        "begin_line": 113,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 130,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateTimeInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
        "begin_line": 133,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 150,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale()",
        "snippet": "    public void test_getInstance_String_TimeZone_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getDefault(), Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertEquals(true, format3.getTimeZoneOverridesCalendar());\n            assertEquals(Locale.GERMANY, format1.getLocale());\n            assertEquals(Locale.GERMANY, format2.getLocale());\n            assertEquals(Locale.GERMANY, format3.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
        "begin_line": 153,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 55)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 180,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat()",
        "snippet": "    public void testFormat() {}",
        "begin_line": 183,
        "end_line": 183,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testShortDateStyleWithLocales()",
        "snippet": "    public void testShortDateStyleWithLocales() {\n        Locale usLocale = Locale.US;\n        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 1, 3);\n        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n        assertEquals(\"2/3/04\", fdf.format(cal));\n\n        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n        assertEquals(\"2004-02-03\", fdf.format(cal));\n\n    }",
        "begin_line": 247,
        "end_line": 258,
        "comment": "\n     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n     ",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 36)",
            "(line 249,col 9)-(line 249,col 54)",
            "(line 250,col 9)-(line 250,col 46)",
            "(line 251,col 9)-(line 251,col 28)",
            "(line 252,col 9)-(line 252,col 92)",
            "(line 253,col 9)-(line 253,col 48)",
            "(line 255,col 9)-(line 255,col 82)",
            "(line 256,col 9)-(line 256,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLowYearPadding()",
        "snippet": "    public void testLowYearPadding() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/DD\");\n\n        cal.set(1,0,1);\n        assertEquals(\"0001/01/01\", format.format(cal));\n        cal.set(10,0,1);\n        assertEquals(\"0010/01/01\", format.format(cal));\n        cal.set(100,0,1);\n        assertEquals(\"0100/01/01\", format.format(cal));\n        cal.set(999,0,1);\n        assertEquals(\"0999/01/01\", format.format(cal));\n    }",
        "begin_line": 263,
        "end_line": 275,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     ",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 46)",
            "(line 265,col 9)-(line 265,col 73)",
            "(line 267,col 9)-(line 267,col 23)",
            "(line 268,col 9)-(line 268,col 55)",
            "(line 269,col 9)-(line 269,col 24)",
            "(line 270,col 9)-(line 270,col 55)",
            "(line 271,col 9)-(line 271,col 25)",
            "(line 272,col 9)-(line 272,col 55)",
            "(line 273,col 9)-(line 273,col 25)",
            "(line 274,col 9)-(line 274,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testMilleniumBug()",
        "snippet": "    public void testMilleniumBug() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n\n        cal.set(1000,0,1);\n        assertEquals(\"01.01.1000\", format.format(cal));\n    }",
        "begin_line": 279,
        "end_line": 285,
        "comment": "\n     * Show Bug #39410 is solved\n     ",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 46)",
            "(line 281,col 9)-(line 281,col 73)",
            "(line 283,col 9)-(line 283,col 26)",
            "(line 284,col 9)-(line 284,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testSimpleDate()",
        "snippet": "    public void testSimpleDate() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n\n        cal.set(2004,11,31);\n        assertEquals(\"2004/12/31\", format.format(cal));\n        cal.set(999,11,31);\n        assertEquals(\"0999/12/31\", format.format(cal));\n        cal.set(1,2,2);\n        assertEquals(\"0001/03/02\", format.format(cal));\n    }",
        "begin_line": 292,
        "end_line": 302,
        "comment": " TODO: Fix this problem",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 46)",
            "(line 294,col 9)-(line 294,col 73)",
            "(line 296,col 9)-(line 296,col 28)",
            "(line 297,col 9)-(line 297,col 55)",
            "(line 298,col 9)-(line 298,col 27)",
            "(line 299,col 9)-(line 299,col 55)",
            "(line 300,col 9)-(line 300,col 23)",
            "(line 301,col 9)-(line 301,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang303()",
        "snippet": "    public void testLang303() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004,11,31);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n        String output = format.format(cal);\n\n        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n        assertEquals(output, format.format(cal));\n    }",
        "begin_line": 304,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 46)",
            "(line 306,col 9)-(line 306,col 28)",
            "(line 308,col 9)-(line 308,col 73)",
            "(line 309,col 9)-(line 309,col 43)",
            "(line 311,col 9)-(line 311,col 107)",
            "(line 312,col 9)-(line 312,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang538()",
        "snippet": "    public void testLang538() {\n        final String dateTime = \"2009-10-16T16:42:16.000Z\";\n\n        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n        cal.clear();\n        cal.set(2009, 9, 16, 8, 42, 16);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n        assertEquals(\"dateTime\", dateTime, format.format(cal));\n    }",
        "begin_line": 315,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 59)",
            "(line 320,col 9)-(line 320,col 85)",
            "(line 321,col 9)-(line 321,col 20)",
            "(line 322,col 9)-(line 322,col 40)",
            "(line 324,col 9)-(line 324,col 120)",
            "(line 325,col 9)-(line 325,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude()",
        "snippet": "    public void test_toStringExclude() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);\n        this.validateSecretFieldAbsent(toString);\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 101)",
            "(line 53,col 9)-(line 53,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray()",
        "snippet": "    public void test_toStringExcludeArray() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{SECRET_FIELD});\n        this.validateSecretFieldAbsent(toString);\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 115)",
            "(line 58,col 9)-(line 58,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull()",
        "snippet": "    public void test_toStringExcludeArrayWithNull() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null});\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 107)",
            "(line 63,col 9)-(line 63,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls()",
        "snippet": "    public void test_toStringExcludeArrayWithNulls() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null, null});\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 113)",
            "(line 68,col 9)-(line 68,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection()",
        "snippet": "    public void test_toStringExcludeCollection() {\n        List<String> excludeList = new ArrayList<String>();\n        excludeList.add(SECRET_FIELD);\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n        this.validateSecretFieldAbsent(toString);\n    }",
        "begin_line": 71,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 59)",
            "(line 73,col 9)-(line 73,col 38)",
            "(line 74,col 9)-(line 74,col 100)",
            "(line 75,col 9)-(line 75,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull()",
        "snippet": "    public void test_toStringExcludeCollectionWithNull() {\n        List<String> excludeList = new ArrayList<String>();\n        excludeList.add(null);\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 30)",
            "(line 81,col 9)-(line 81,col 100)",
            "(line 82,col 9)-(line 82,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls()",
        "snippet": "    public void test_toStringExcludeCollectionWithNulls() {\n        List<String> excludeList = new ArrayList<String>();\n        excludeList.add(null);\n        excludeList.add(null);\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 59)",
            "(line 87,col 9)-(line 87,col 30)",
            "(line 88,col 9)-(line 88,col 30)",
            "(line 89,col 9)-(line 89,col 100)",
            "(line 90,col 9)-(line 90,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray()",
        "snippet": "    public void test_toStringExcludeEmptyArray() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 118)",
            "(line 95,col 9)-(line 95,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection()",
        "snippet": "    public void test_toStringExcludeEmptyCollection() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList<String>());\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 112)",
            "(line 100,col 9)-(line 100,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray()",
        "snippet": "    public void test_toStringExcludeNullArray() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 104)",
            "(line 105,col 9)-(line 105,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection()",
        "snippet": "    public void test_toStringExcludeNullCollection() {\n        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection<String>) null);\n        this.validateSecretFieldPresent(toString);\n    }",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 114)",
            "(line 110,col 9)-(line 110,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.validateNonSecretField(java.lang.String)",
        "snippet": "    private void validateNonSecretField(String toString) {\n        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND);\n        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND);\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 91)",
            "(line 115,col 9)-(line 115,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.validateSecretFieldAbsent(java.lang.String)",
        "snippet": "    private void validateSecretFieldAbsent(String toString) {\n        Assert.assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));\n        this.validateNonSecretField(toString);\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 88)",
            "(line 120,col 9)-(line 120,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.validateSecretFieldPresent(java.lang.String)",
        "snippet": "    private void validateSecretFieldPresent(String toString) {\n        Assert.assertTrue(toString.indexOf(SECRET_VALUE) > 0);\n        this.validateNonSecretField(toString);\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 62)",
            "(line 125,col 9)-(line 125,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.MultiLineToStringStyleTest(java.lang.String)",
        "snippet": "    public MultiLineToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 22)",
            "(line 45,col 9)-(line 45,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 25)",
            "(line 51,col 9)-(line 51,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n        \n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 173)",
            "(line 62,col 9)-(line 62,col 257)",
            "(line 64,col 9)-(line 64,col 237)",
            "(line 65,col 9)-(line 65,col 321)",
            "(line 66,col 9)-(line 66,col 191)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<Integer>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=[]\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 69,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 36)",
            "(line 71,col 9)-(line 71,col 36)",
            "(line 72,col 9)-(line 72,col 173)",
            "(line 73,col 9)-(line 73,col 157)",
            "(line 74,col 9)-(line 74,col 180)",
            "(line 75,col 9)-(line 75,col 164)",
            "(line 76,col 9)-(line 76,col 219)",
            "(line 77,col 9)-(line 77,col 179)",
            "(line 78,col 9)-(line 78,col 199)",
            "(line 79,col 9)-(line 79,col 192)",
            "(line 80,col 9)-(line 80,col 205)",
            "(line 81,col 9)-(line 81,col 198)",
            "(line 82,col 9)-(line 82,col 198)",
            "(line 83,col 9)-(line 83,col 191)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Jane Doe\";\n        p.age = 25;\n        p.smoker = true;\n        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n        assertEquals(pBaseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  name=Jane Doe\" + SystemUtils.LINE_SEPARATOR + \"  age=25\" + SystemUtils.LINE_SEPARATOR + \"  smoker=true\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 32)",
            "(line 88,col 9)-(line 88,col 28)",
            "(line 89,col 9)-(line 89,col 19)",
            "(line 90,col 9)-(line 90,col 24)",
            "(line 91,col 9)-(line 91,col 105)",
            "(line 92,col 9)-(line 92,col 316)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 157)",
            "(line 97,col 9)-(line 97,col 164)",
            "(line 98,col 9)-(line 98,col 219)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 69)",
            "(line 103,col 9)-(line 103,col 175)",
            "(line 104,col 9)-(line 104,col 184)",
            "(line 105,col 9)-(line 105,col 21)",
            "(line 106,col 9)-(line 106,col 165)",
            "(line 107,col 9)-(line 107,col 174)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 48)",
            "(line 112,col 9)-(line 112,col 169)",
            "(line 113,col 9)-(line 113,col 178)",
            "(line 114,col 9)-(line 114,col 21)",
            "(line 115,col 9)-(line 115,col 165)",
            "(line 116,col 9)-(line 116,col 174)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 119,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 121,col 177)",
            "(line 122,col 9)-(line 122,col 186)",
            "(line 123,col 9)-(line 123,col 21)",
            "(line 124,col 9)-(line 124,col 165)",
            "(line 125,col 9)-(line 125,col 174)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.HashCodeBuilderAndEqualsBuilderTest(java.lang.String)",
        "snippet": "    public HashCodeBuilderAndEqualsBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Constructor for HashCodeBuilderAndEqualsBuilderTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger(boolean)",
        "snippet": "    public void testInteger(boolean testTransients) {\n        Integer i1 = new Integer(12345);\n        Integer i2 = new Integer(12345);\n        assertEqualsAndHashCodeContract(i1, i2, testTransients);\n    }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 40)",
            "(line 44,col 9)-(line 44,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger()",
        "snippet": "    public void testInteger() {\n        testInteger(false);\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients()",
        "snippet": "    public void testIntegerWithTransients() {\n        testInteger(true);\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture()",
        "snippet": "    public void testFixture() {\n        testFixture(false);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients()",
        "snippet": "    public void testFixtureWithTransients() {\n        testFixture(true);\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture(boolean)",
        "snippet": "    public void testFixture(boolean testTransients) {\n        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', \"Test\", (short) 2), new TestFixture(2, 'c', \"Test\", (short) 2), testTransients);\n        assertEqualsAndHashCodeContract(\n            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n            testTransients);\n        assertEqualsAndHashCodeContract(\n            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            testTransients);\n        assertEqualsAndHashCodeContract(\n            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n            testTransients);\n    }",
        "begin_line": 63,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 144)",
            "(line 65,col 9)-(line 68,col 28)",
            "(line 69,col 9)-(line 72,col 28)",
            "(line 73,col 9)-(line 76,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.assertEqualsAndHashCodeContract(java.lang.Object, java.lang.Object, boolean)",
        "snippet": "    public void assertEqualsAndHashCodeContract(Object lhs, Object rhs, boolean testTransients) {\n        if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {\n            // test a couple of times for consistency.\n            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n        }\n    }",
        "begin_line": 87,
        "end_line": 94,
        "comment": "\n     * Asserts that if <code>lhs</code> equals <code>rhs</code> \n     * then their hash codes MUST be identical.\n     * \n     * @param lhs The Left-Hand-Side of the equals test\n     * @param rhs The Right-Hand-Side of the equals test\n     * @param testTransients wether to test transient fields\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.TestFixture.TestFixture(int, char, java.lang.String, short)",
        "snippet": "        TestFixture(int i, char c, String string, short s) {\n            this.i = i;\n            this.c = c;\n            this.string = string;\n            this.s = s;\n        }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 13)-(line 103,col 23)",
            "(line 104,col 13)-(line 104,col 23)",
            "(line 105,col 13)-(line 105,col 33)",
            "(line 106,col 13)-(line 106,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.SubTestFixture.SubTestFixture(int, char, java.lang.String, short, java.lang.String)",
        "snippet": "        SubTestFixture(int i, char c, String string, short s, String tString) {\n            super(i, c, string, s);\n            this.tString = tString;\n        }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 13)-(line 114,col 35)",
            "(line 115,col 13)-(line 115,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.AllTransientFixture.AllTransientFixture(int, char, java.lang.String, short)",
        "snippet": "        AllTransientFixture(int i, char c, String string, short s) {\n            this.i = i;\n            this.c = c;\n            this.string = string;\n            this.s = s;\n        }",
        "begin_line": 125,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 126,col 13)-(line 126,col 23)",
            "(line 127,col 13)-(line 127,col 23)",
            "(line 128,col 13)-(line 128,col 33)",
            "(line 129,col 13)-(line 129,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.SubAllTransientFixture.SubAllTransientFixture(int, char, java.lang.String, short, java.lang.String)",
        "snippet": "        SubAllTransientFixture(int i, char c, String string, short s, String tString) {\n            super(i, c, string, s);\n            this.tString = tString;\n        }",
        "begin_line": 136,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 137,col 13)-(line 137,col 35)",
            "(line 138,col 13)-(line 138,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.ToStringBuilderTest(java.lang.String)",
        "snippet": "    public ToStringBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1()",
        "snippet": "    public void testConstructorEx1() {\n        assertEquals(\"<null>\", new ToStringBuilder(null).toString());\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2()",
        "snippet": "    public void testConstructorEx2() {\n        assertEquals(\"<null>\", new ToStringBuilder(null, null).toString());\n        new ToStringBuilder(this.base, null).toString();\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 75)",
            "(line 50,col 9)-(line 50,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3()",
        "snippet": "    public void testConstructorEx3() {\n        assertEquals(\"<null>\", new ToStringBuilder(null, null, null).toString());\n        new ToStringBuilder(this.base, null, null);\n        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);\n    }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 81)",
            "(line 55,col 9)-(line 55,col 51)",
            "(line 56,col 9)-(line 56,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault()",
        "snippet": "    public void testGetSetDefault() {\n        try {\n            ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n            assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());\n        } finally {\n            // reset for other tests\n            ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n        }\n    }",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 66,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx()",
        "snippet": "    public void testSetDefaultEx() {\n        try {\n            ToStringBuilder.setDefaultStyle(null);\n\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 75,col 9)",
            "(line 76,col 9)-(line 76,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger()",
        "snippet": "    public void testReflectionInteger() {\n        assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\n    }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Test wrapper for int primitive.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter()",
        "snippet": "    public void testReflectionCharacter() {\n        Character c = new Character('A');\n        assertEquals(this.toBaseString(c) + \"[value=A]\", ToStringBuilder.reflectionToString(c));\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Test wrapper for char primitive.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 41)",
            "(line 95,col 9)-(line 95,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean()",
        "snippet": "    public void testReflectionBoolean() {\n        Boolean b;\n        b = Boolean.TRUE;\n        assertEquals(this.toBaseString(b) + \"[value=true]\", ToStringBuilder.reflectionToString(b));\n        b = Boolean.FALSE;\n        assertEquals(this.toBaseString(b) + \"[value=false]\", ToStringBuilder.reflectionToString(b));\n    }",
        "begin_line": 101,
        "end_line": 107,
        "comment": "\n     * Test wrapper for char boolean.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 18)",
            "(line 103,col 9)-(line 103,col 25)",
            "(line 104,col 9)-(line 104,col 99)",
            "(line 105,col 9)-(line 105,col 26)",
            "(line 106,col 9)-(line 106,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.toBaseString(java.lang.Object)",
        "snippet": "    private String toBaseString(Object o) {\n        return o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o));\n    }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\n     * Create the same toString() as Object.toString().\n     * @param o the object to create the string for.\n     * @return a String in the Object.toString format.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.assertReflectionArray(java.lang.String, java.lang.Object)",
        "snippet": "    public void assertReflectionArray(String expected, Object actual) {\n        if (actual == null) {\n            // Until ToStringBuilder supports null objects.\n            return;\n        }\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual));\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));\n        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));\n    }",
        "begin_line": 133,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 137,col 9)",
            "(line 138,col 9)-(line 138,col 75)",
            "(line 139,col 9)-(line 139,col 81)",
            "(line 140,col 9)-(line 140,col 87)",
            "(line 141,col 9)-(line 141,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray()",
        "snippet": "    public void testReflectionObjectArray() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 144,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 73)",
            "(line 146,col 9)-(line 146,col 50)",
            "(line 147,col 9)-(line 147,col 96)",
            "(line 148,col 9)-(line 148,col 21)",
            "(line 149,col 9)-(line 149,col 47)",
            "(line 150,col 9)-(line 150,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray()",
        "snippet": "    public void testReflectionLongArray() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 153,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 50)",
            "(line 155,col 9)-(line 155,col 50)",
            "(line 156,col 9)-(line 156,col 90)",
            "(line 157,col 9)-(line 157,col 21)",
            "(line 158,col 9)-(line 158,col 47)",
            "(line 159,col 9)-(line 159,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray()",
        "snippet": "    public void testReflectionIntArray() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 162,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 48)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 90)",
            "(line 166,col 9)-(line 166,col 21)",
            "(line 167,col 9)-(line 167,col 47)",
            "(line 168,col 9)-(line 168,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray()",
        "snippet": "    public void testReflectionShortArray() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 171,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 52)",
            "(line 173,col 9)-(line 173,col 50)",
            "(line 174,col 9)-(line 174,col 90)",
            "(line 175,col 9)-(line 175,col 21)",
            "(line 176,col 9)-(line 176,col 47)",
            "(line 177,col 9)-(line 177,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray()",
        "snippet": "    public void testReflectionyteArray() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 180,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 50)",
            "(line 182,col 9)-(line 182,col 50)",
            "(line 183,col 9)-(line 183,col 90)",
            "(line 184,col 9)-(line 184,col 21)",
            "(line 185,col 9)-(line 185,col 47)",
            "(line 186,col 9)-(line 186,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray()",
        "snippet": "    public void testReflectionCharArray() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 189,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 57)",
            "(line 191,col 9)-(line 191,col 50)",
            "(line 192,col 9)-(line 192,col 89)",
            "(line 193,col 9)-(line 193,col 21)",
            "(line 194,col 9)-(line 194,col 47)",
            "(line 195,col 9)-(line 195,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray()",
        "snippet": "    public void testReflectionDoubleArray() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 198,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 69)",
            "(line 200,col 9)-(line 200,col 50)",
            "(line 201,col 9)-(line 201,col 105)",
            "(line 202,col 9)-(line 202,col 21)",
            "(line 203,col 9)-(line 203,col 47)",
            "(line 204,col 9)-(line 204,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray()",
        "snippet": "    public void testReflectionFloatArray() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 207,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 71)",
            "(line 209,col 9)-(line 209,col 50)",
            "(line 210,col 9)-(line 210,col 105)",
            "(line 211,col 9)-(line 211,col 21)",
            "(line 212,col 9)-(line 212,col 47)",
            "(line 213,col 9)-(line 213,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray()",
        "snippet": "    public void testReflectionBooleanArray() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 216,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 63)",
            "(line 218,col 9)-(line 218,col 50)",
            "(line 219,col 9)-(line 219,col 98)",
            "(line 220,col 9)-(line 220,col 21)",
            "(line 221,col 9)-(line 221,col 47)",
            "(line 222,col 9)-(line 222,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray()",
        "snippet": "    public void testReflectionFloatArrayArray() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 227,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 84)",
            "(line 229,col 9)-(line 229,col 50)",
            "(line 230,col 9)-(line 230,col 108)",
            "(line 231,col 9)-(line 231,col 21)",
            "(line 232,col 9)-(line 232,col 47)",
            "(line 233,col 9)-(line 233,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray()",
        "snippet": "    public void testReflectionLongArrayArray() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 64)",
            "(line 239,col 9)-(line 239,col 50)",
            "(line 240,col 9)-(line 240,col 98)",
            "(line 241,col 9)-(line 241,col 21)",
            "(line 242,col 9)-(line 242,col 47)",
            "(line 243,col 9)-(line 243,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray()",
        "snippet": "    public void testReflectionIntArrayArray() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 246,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 62)",
            "(line 248,col 9)-(line 248,col 50)",
            "(line 249,col 9)-(line 249,col 98)",
            "(line 250,col 9)-(line 250,col 21)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 252,col 9)-(line 252,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray()",
        "snippet": "    public void testReflectionhortArrayArray() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 255,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 66)",
            "(line 257,col 9)-(line 257,col 50)",
            "(line 258,col 9)-(line 258,col 98)",
            "(line 259,col 9)-(line 259,col 21)",
            "(line 260,col 9)-(line 260,col 47)",
            "(line 261,col 9)-(line 261,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray()",
        "snippet": "    public void testReflectionByteArrayArray() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 264,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 64)",
            "(line 266,col 9)-(line 266,col 50)",
            "(line 267,col 9)-(line 267,col 98)",
            "(line 268,col 9)-(line 268,col 21)",
            "(line 269,col 9)-(line 269,col 47)",
            "(line 270,col 9)-(line 270,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray()",
        "snippet": "    public void testReflectionCharArrayArray() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 273,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 50)",
            "(line 276,col 9)-(line 276,col 98)",
            "(line 277,col 9)-(line 277,col 21)",
            "(line 278,col 9)-(line 278,col 47)",
            "(line 279,col 9)-(line 279,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray()",
        "snippet": "    public void testReflectionDoubleArrayArray() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 282,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 85)",
            "(line 284,col 9)-(line 284,col 50)",
            "(line 285,col 9)-(line 285,col 108)",
            "(line 286,col 9)-(line 286,col 21)",
            "(line 287,col 9)-(line 287,col 47)",
            "(line 288,col 9)-(line 288,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray()",
        "snippet": "    public void testReflectionBooleanArrayArray() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 291,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 81)",
            "(line 293,col 9)-(line 293,col 50)",
            "(line 294,col 9)-(line 294,col 109)",
            "(line 295,col 9)-(line 295,col 109)",
            "(line 296,col 9)-(line 296,col 21)",
            "(line 297,col 9)-(line 297,col 47)",
            "(line 298,col 9)-(line 298,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList()",
        "snippet": "    public void testReflectionHierarchyArrayList() {}",
        "begin_line": 303,
        "end_line": 303,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy()",
        "snippet": "    public void testReflectionHierarchy() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));\n        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));\n        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\n        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 313,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 68)",
            "(line 315,col 9)-(line 315,col 50)",
            "(line 316,col 9)-(line 316,col 83)",
            "(line 317,col 9)-(line 317,col 89)",
            "(line 318,col 9)-(line 318,col 96)",
            "(line 319,col 9)-(line 319,col 108)",
            "(line 320,col 9)-(line 320,col 102)",
            "(line 321,col 9)-(line 321,col 110)",
            "(line 322,col 9)-(line 322,col 126)",
            "(line 324,col 9)-(line 324,col 68)",
            "(line 325,col 9)-(line 325,col 43)",
            "(line 326,col 9)-(line 326,col 87)",
            "(line 327,col 9)-(line 327,col 87)",
            "(line 328,col 9)-(line 328,col 93)",
            "(line 329,col 9)-(line 329,col 100)",
            "(line 330,col 9)-(line 330,col 125)",
            "(line 331,col 9)-(line 331,col 106)",
            "(line 332,col 9)-(line 332,col 114)",
            "(line 333,col 9)-(line 333,col 130)",
            "(line 334,col 9)-(line 334,col 126)",
            "(line 335,col 9)-(line 335,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection()",
        "snippet": "    public void testInnerClassReflection() {\n        Outer outer = new Outer();\n        assertEquals(toBaseString(outer) + \"[inner=\" + toBaseString(outer.inner) + \"[]]\", outer.toString());\n    }",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 34)",
            "(line 354,col 9)-(line 354,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.Outer.Inner.toString()",
        "snippet": "            @Override\n            public String toString() {\n                return ToStringBuilder.reflectionToString(this);\n            }",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 362,col 17)-(line 362,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.Outer.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 365,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 367,col 13)-(line 367,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle()",
        "snippet": "    public void testReflectionArrayCycle() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 376,
        "end_line": 383,
        "comment": "\n     * Test an array element pointing to its container.\n     ",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 378,col 29)",
            "(line 379,col 9)-(line 381,col 57)",
            "(line 382,col 9)-(line 382,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2()",
        "snippet": "    public void testReflectionArrayCycleLevel2() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));\n        assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 388,
        "end_line": 400,
        "comment": "\n     * Test an array element pointing to its container.\n     ",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 41)",
            "(line 390,col 9)-(line 390,col 47)",
            "(line 391,col 9)-(line 391,col 35)",
            "(line 392,col 9)-(line 392,col 35)",
            "(line 393,col 9)-(line 395,col 57)",
            "(line 396,col 9)-(line 398,col 63)",
            "(line 399,col 9)-(line 399,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle()",
        "snippet": "    public void testReflectionArrayArrayCycle() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 402,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 46)",
            "(line 404,col 9)-(line 404,col 32)",
            "(line 405,col 9)-(line 405,col 32)",
            "(line 406,col 9)-(line 406,col 32)",
            "(line 407,col 9)-(line 407,col 32)",
            "(line 408,col 9)-(line 408,col 58)",
            "(line 409,col 9)-(line 420,col 57)",
            "(line 421,col 9)-(line 421,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.ReflectionTestCycleA.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 432,col 13)-(line 432,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.ReflectionTestCycleB.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 442,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 444,col 13)-(line 444,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SimpleReflectionTestFixture.SimpleReflectionTestFixture()",
        "snippet": "        public SimpleReflectionTestFixture() {\n        }",
        "begin_line": 454,
        "end_line": 455,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SimpleReflectionTestFixture.SimpleReflectionTestFixture(java.lang.Object)",
        "snippet": "        public SimpleReflectionTestFixture(Object o) {\n            this.o = o;\n        }",
        "begin_line": 457,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 458,col 13)-(line 458,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SimpleReflectionTestFixture.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 461,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 463,col 13)-(line 463,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SelfInstanceVarReflectionTestFixture.SelfInstanceVarReflectionTestFixture()",
        "snippet": "        public SelfInstanceVarReflectionTestFixture() {\n            this.typeIsSelf = this;\n        }",
        "begin_line": 471,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 472,col 13)-(line 472,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SelfInstanceVarReflectionTestFixture.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 475,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 477,col 13)-(line 477,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SelfInstanceTwoVarsReflectionTestFixture.SelfInstanceTwoVarsReflectionTestFixture()",
        "snippet": "        public SelfInstanceTwoVarsReflectionTestFixture() {\n            this.typeIsSelf = this;\n        }",
        "begin_line": 486,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 487,col 13)-(line 487,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SelfInstanceTwoVarsReflectionTestFixture.getOtherType()",
        "snippet": "        public String getOtherType(){\n            return this.otherType;\n        }",
        "begin_line": 490,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 491,col 13)-(line 491,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.SelfInstanceTwoVarsReflectionTestFixture.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 496,col 13)-(line 496,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle()",
        "snippet": "    public void testSimpleReflectionObjectCycle() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 506,
        "end_line": 511,
        "comment": "\n     * Test an Object pointing to itself, the simplest test.\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 507,col 9)-(line 507,col 79)",
            "(line 508,col 9)-(line 508,col 26)",
            "(line 509,col 9)-(line 509,col 109)",
            "(line 510,col 9)-(line 510,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle()",
        "snippet": "    public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 518,
        "end_line": 522,
        "comment": "\n     * Test a class that defines an ivar pointing to itself.\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 519,col 9)-(line 519,col 95)",
            "(line 520,col 9)-(line 520,col 112)",
            "(line 521,col 9)-(line 521,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle()",
        "snippet": "    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 530,
        "end_line": 534,
        "comment": "\n     * Test a class that defines an ivar pointing to itself.  This test was\n     * created to show that handling cyclical object resulted in a missing endFieldSeparator call.\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 103)",
            "(line 532,col 9)-(line 532,col 161)",
            "(line 533,col 9)-(line 533,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle()",
        "snippet": "    public void testReflectionObjectCycle() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 542,
        "end_line": 551,
        "comment": "\n     * Test Objects pointing to each other.\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 543,col 9)-(line 543,col 60)",
            "(line 544,col 9)-(line 544,col 60)",
            "(line 545,col 9)-(line 545,col 16)",
            "(line 546,col 9)-(line 546,col 16)",
            "(line 547,col 9)-(line 549,col 26)",
            "(line 550,col 9)-(line 550,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle()",
        "snippet": "    public void testReflectionArrayAndObjectCycle() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));\n        assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));\n        this.validateNullToStringStyleRegistry();\n    }",
        "begin_line": 559,
        "end_line": 579,
        "comment": "\n     * Test a nasty combination of arrays and Objects pointing to each other.\n     * objects[0] -> SimpleReflectionTestFixture[ o -> objects ]\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 41)",
            "(line 561,col 9)-(line 561,col 86)",
            "(line 562,col 9)-(line 562,col 28)",
            "(line 563,col 9)-(line 571,col 57)",
            "(line 572,col 9)-(line 577,col 56)",
            "(line 578,col 9)-(line 578,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry()",
        "snippet": "    void validateNullToStringStyleRegistry() {\n       if (ToStringStyle.getRegistry() != null) {\n           System.out.println(ToStringStyle.getRegistry());\n       }\n\n        assertNull(ToStringStyle.getRegistry());\n    }",
        "begin_line": 581,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 582,col 8)-(line 584,col 8)",
            "(line 586,col 9)-(line 586,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 590,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 105)",
            "(line 592,col 9)-(line 592,col 117)",
            "(line 594,col 9)-(line 594,col 133)",
            "(line 595,col 9)-(line 595,col 146)",
            "(line 596,col 9)-(line 596,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString()",
        "snippet": "    public void testAppendToString() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").toString());\n\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 599,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 600,col 9)-(line 600,col 108)",
            "(line 601,col 9)-(line 601,col 120)",
            "(line 603,col 9)-(line 603,col 136)",
            "(line 604,col 9)-(line 604,col 149)",
            "(line 605,col 9)-(line 605,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 608,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 609,col 9)-(line 609,col 36)",
            "(line 610,col 9)-(line 610,col 36)",
            "(line 611,col 9)-(line 611,col 103)",
            "(line 612,col 9)-(line 612,col 87)",
            "(line 613,col 9)-(line 613,col 110)",
            "(line 614,col 9)-(line 614,col 94)",
            "(line 615,col 9)-(line 615,col 114)",
            "(line 616,col 9)-(line 616,col 109)",
            "(line 617,col 9)-(line 617,col 129)",
            "(line 618,col 9)-(line 618,col 122)",
            "(line 619,col 9)-(line 619,col 135)",
            "(line 620,col 9)-(line 620,col 128)",
            "(line 621,col 9)-(line 621,col 128)",
            "(line 622,col 9)-(line 622,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 625,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 626,col 9)-(line 626,col 87)",
            "(line 627,col 9)-(line 627,col 94)",
            "(line 628,col 9)-(line 628,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testInt()",
        "snippet": "    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n    public void testInt() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((int) 3).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (int) 3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (int) 3).append(\"b\", (int) 4).toString());\n    }",
        "begin_line": 631,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 633,col 9)-(line 633,col 92)",
            "(line 634,col 9)-(line 634,col 99)",
            "(line 635,col 9)-(line 635,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((short) 3).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (short) 3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (short) 3).append(\"b\", (short) 4).toString());\n    }",
        "begin_line": 638,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 94)",
            "(line 640,col 9)-(line 640,col 101)",
            "(line 641,col 9)-(line 641,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        assertEquals(baseStr + \"[A]\", new ToStringBuilder(base).append((char) 65).toString());\n        assertEquals(baseStr + \"[a=A]\", new ToStringBuilder(base).append(\"a\", (char) 65).toString());\n        assertEquals(baseStr + \"[a=A,b=B]\", new ToStringBuilder(base).append(\"a\", (char) 65).append(\"b\", (char) 66).toString());\n    }",
        "begin_line": 644,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 94)",
            "(line 646,col 9)-(line 646,col 101)",
            "(line 647,col 9)-(line 647,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((byte) 3).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (byte) 3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (byte) 3).append(\"b\", (byte) 4).toString());\n    }",
        "begin_line": 650,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 651,col 9)-(line 651,col 93)",
            "(line 652,col 9)-(line 652,col 100)",
            "(line 653,col 9)-(line 653,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble()",
        "snippet": "    @SuppressWarnings(\"cast\")\n    public void testDouble() {\n        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((double) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).append(\"b\", (double) 4.3).toString());\n    }",
        "begin_line": 656,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 658,col 9)-(line 658,col 99)",
            "(line 659,col 9)-(line 659,col 106)",
            "(line 660,col 9)-(line 660,col 138)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((float) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).toString());\n        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).append(\"b\", (float) 4.3).toString());\n    }",
        "begin_line": 663,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 664,col 9)-(line 664,col 98)",
            "(line 665,col 9)-(line 665,col 105)",
            "(line 666,col 9)-(line 666,col 136)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        assertEquals(baseStr + \"[true]\", new ToStringBuilder(base).append(true).toString());\n        assertEquals(baseStr + \"[a=true]\", new ToStringBuilder(base).append(\"a\", true).toString());\n        assertEquals(baseStr + \"[a=true,b=false]\", new ToStringBuilder(base).append(\"a\", true).append(\"b\", false).toString());\n    }",
        "begin_line": 669,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 670,col 9)-(line 670,col 92)",
            "(line 671,col 9)-(line 671,col 99)",
            "(line 672,col 9)-(line 672,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 676,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 677,col 9)-(line 677,col 69)",
            "(line 678,col 9)-(line 678,col 105)",
            "(line 679,col 9)-(line 679,col 114)",
            "(line 680,col 9)-(line 680,col 21)",
            "(line 681,col 9)-(line 681,col 95)",
            "(line 682,col 9)-(line 682,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 685,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 686,col 9)-(line 686,col 48)",
            "(line 687,col 9)-(line 687,col 99)",
            "(line 688,col 9)-(line 688,col 108)",
            "(line 689,col 9)-(line 689,col 21)",
            "(line 690,col 9)-(line 690,col 95)",
            "(line 691,col 9)-(line 691,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        int[] array = new int[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 694,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 695,col 9)-(line 695,col 46)",
            "(line 696,col 9)-(line 696,col 99)",
            "(line 697,col 9)-(line 697,col 108)",
            "(line 698,col 9)-(line 698,col 21)",
            "(line 699,col 9)-(line 699,col 95)",
            "(line 700,col 9)-(line 700,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        short[] array = new short[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 703,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 704,col 9)-(line 704,col 50)",
            "(line 705,col 9)-(line 705,col 99)",
            "(line 706,col 9)-(line 706,col 108)",
            "(line 707,col 9)-(line 707,col 21)",
            "(line 708,col 9)-(line 708,col 95)",
            "(line 709,col 9)-(line 709,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        byte[] array = new byte[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 712,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 48)",
            "(line 714,col 9)-(line 714,col 99)",
            "(line 715,col 9)-(line 715,col 108)",
            "(line 716,col 9)-(line 716,col 21)",
            "(line 717,col 9)-(line 717,col 95)",
            "(line 718,col 9)-(line 718,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        char[] array = new char[] {'A', '2', '_', 'D'};\n        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 721,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 722,col 9)-(line 722,col 55)",
            "(line 723,col 9)-(line 723,col 98)",
            "(line 724,col 9)-(line 724,col 107)",
            "(line 725,col 9)-(line 725,col 21)",
            "(line 726,col 9)-(line 726,col 95)",
            "(line 727,col 9)-(line 727,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 730,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 731,col 9)-(line 731,col 67)",
            "(line 732,col 9)-(line 732,col 114)",
            "(line 733,col 9)-(line 733,col 123)",
            "(line 734,col 9)-(line 734,col 21)",
            "(line 735,col 9)-(line 735,col 95)",
            "(line 736,col 9)-(line 736,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 739,
        "end_line": 746,
        "comment": "",
        "child_ranges": [
            "(line 740,col 9)-(line 740,col 69)",
            "(line 741,col 9)-(line 741,col 114)",
            "(line 742,col 9)-(line 742,col 123)",
            "(line 743,col 9)-(line 743,col 21)",
            "(line 744,col 9)-(line 744,col 95)",
            "(line 745,col 9)-(line 745,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        boolean[] array = new boolean[] {true, false, false};\n        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 748,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 749,col 9)-(line 749,col 61)",
            "(line 750,col 9)-(line 750,col 107)",
            "(line 751,col 9)-(line 751,col 116)",
            "(line 752,col 9)-(line 752,col 21)",
            "(line 753,col 9)-(line 753,col 95)",
            "(line 754,col 9)-(line 754,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 757,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 758,col 9)-(line 758,col 58)",
            "(line 759,col 9)-(line 759,col 107)",
            "(line 760,col 9)-(line 760,col 116)",
            "(line 761,col 9)-(line 761,col 21)",
            "(line 762,col 9)-(line 762,col 95)",
            "(line 763,col 9)-(line 763,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray()",
        "snippet": "    public void testIntArrayArray() {\n        int[][] array = new int[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 766,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 767,col 9)-(line 767,col 56)",
            "(line 768,col 9)-(line 768,col 107)",
            "(line 769,col 9)-(line 769,col 116)",
            "(line 770,col 9)-(line 770,col 21)",
            "(line 771,col 9)-(line 771,col 95)",
            "(line 772,col 9)-(line 772,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray()",
        "snippet": "    public void testShortArrayArray() {\n        short[][] array = new short[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 775,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 776,col 9)-(line 776,col 60)",
            "(line 777,col 9)-(line 777,col 107)",
            "(line 778,col 9)-(line 778,col 116)",
            "(line 779,col 9)-(line 779,col 21)",
            "(line 780,col 9)-(line 780,col 95)",
            "(line 781,col 9)-(line 781,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray()",
        "snippet": "    public void testByteArrayArray() {\n        byte[][] array = new byte[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 784,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 785,col 9)-(line 785,col 58)",
            "(line 786,col 9)-(line 786,col 107)",
            "(line 787,col 9)-(line 787,col 116)",
            "(line 788,col 9)-(line 788,col 21)",
            "(line 789,col 9)-(line 789,col 95)",
            "(line 790,col 9)-(line 790,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray()",
        "snippet": "    public void testCharArrayArray() {\n        char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 793,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 794,col 9)-(line 794,col 64)",
            "(line 795,col 9)-(line 795,col 107)",
            "(line 796,col 9)-(line 796,col 116)",
            "(line 797,col 9)-(line 797,col 21)",
            "(line 798,col 9)-(line 798,col 95)",
            "(line 799,col 9)-(line 799,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray()",
        "snippet": "    public void testDoubleArrayArray() {\n        double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 802,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 803,col 9)-(line 803,col 79)",
            "(line 804,col 9)-(line 804,col 117)",
            "(line 805,col 9)-(line 805,col 126)",
            "(line 806,col 9)-(line 806,col 21)",
            "(line 807,col 9)-(line 807,col 95)",
            "(line 808,col 9)-(line 808,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray()",
        "snippet": "    public void testFloatArrayArray() {\n        float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 811,
        "end_line": 818,
        "comment": "",
        "child_ranges": [
            "(line 812,col 9)-(line 812,col 78)",
            "(line 813,col 9)-(line 813,col 117)",
            "(line 814,col 9)-(line 814,col 126)",
            "(line 815,col 9)-(line 815,col 21)",
            "(line 816,col 9)-(line 816,col 95)",
            "(line 817,col 9)-(line 817,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray()",
        "snippet": "    public void testBooleanArrayArray() {\n        boolean[][] array = new boolean[][] {{true, false}, null, {false}};\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 820,
        "end_line": 827,
        "comment": "",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 75)",
            "(line 822,col 9)-(line 822,col 118)",
            "(line 823,col 9)-(line 823,col 127)",
            "(line 824,col 9)-(line 824,col 21)",
            "(line 825,col 9)-(line 825,col 95)",
            "(line 826,col 9)-(line 826,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle()",
        "snippet": "    public void testObjectCycle() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());\n        validateNullToStringStyleRegistry();\n    }",
        "begin_line": 829,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 830,col 9)-(line 830,col 42)",
            "(line 831,col 9)-(line 831,col 42)",
            "(line 832,col 9)-(line 832,col 18)",
            "(line 833,col 9)-(line 833,col 18)",
            "(line 835,col 9)-(line 835,col 97)",
            "(line 836,col 9)-(line 836,col 45)",
            "(line 837,col 9)-(line 837,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.ObjectCycle.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return new ToStringBuilder(this).append(obj).toString();\n        }",
        "begin_line": 843,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 845,col 13)-(line 845,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics()",
        "snippet": "    public void testSimpleReflectionStatics() {\n        SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n    }",
        "begin_line": 849,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 850,col 9)-(line 850,col 98)",
            "(line 851,col 9)-(line 853,col 121)",
            "(line 854,col 9)-(line 856,col 120)",
            "(line 857,col 9)-(line 859,col 98)",
            "(line 860,col 9)-(line 862,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics()",
        "snippet": "    public void testReflectionStatics() {\n        ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]\",\n            ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n    }",
        "begin_line": 868,
        "end_line": 882,
        "comment": "\n     * Tests ReflectionToStringBuilder.toString() for statics.\n     ",
        "child_ranges": [
            "(line 869,col 9)-(line 869,col 86)",
            "(line 870,col 9)-(line 872,col 115)",
            "(line 873,col 9)-(line 875,col 114)",
            "(line 876,col 9)-(line 878,col 92)",
            "(line 879,col 9)-(line 881,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics()",
        "snippet": "    public void testInheritedReflectionStatics() {\n        InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n        assertEquals(\n            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n    }",
        "begin_line": 887,
        "end_line": 901,
        "comment": "\n     * Tests ReflectionToStringBuilder.toString() for statics.\n     ",
        "child_ranges": [
            "(line 888,col 9)-(line 888,col 104)",
            "(line 889,col 9)-(line 891,col 124)",
            "(line 892,col 9)-(line 894,col 121)",
            "(line 895,col 9)-(line 897,col 98)",
            "(line 898,col 9)-(line 900,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.toStringWithStatics(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle, java.lang.Class)",
        "snippet": "    public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {\n        return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);\n    }",
        "begin_line": 928,
        "end_line": 930,
        "comment": "\n     * <p>This method uses reflection to build a suitable\n     * <code>toString</code> value which includes static fields.</p>\n     *\n     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n     * fields. This means that it will throw a security exception if run\n     * under a security manager, if the permissions are not set up correctly.\n     * It is also not as efficient as testing explicitly. </p>\n     *\n     * <p>Transient fields are not output.</p>\n     *\n     * <p>Superclass fields will be appended up to and including the specified superclass.\n     * A null superclass is treated as <code>java.lang.Object</code>.</p>\n     *\n     * <p>If the style is <code>null</code>, the default\n     * <code>ToStringStyle</code> is used.</p>\n     *\n     * @param object  the Object to be output\n     * @param style  the style of the <code>toString</code> to create,\n     *  may be <code>null</code>\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n     *  may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException if the Object is <code>null</code>\n     ",
        "child_ranges": [
            "(line 929,col 9)-(line 929,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid()",
        "snippet": "    public void test_setUpToClass_valid() {\n        Integer val = new Integer(5);\n        ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n        test.setUpToClass(Number.class);\n    }",
        "begin_line": 935,
        "end_line": 939,
        "comment": "\n     * Tests ReflectionToStringBuilder setUpToClass().\n     ",
        "child_ranges": [
            "(line 936,col 9)-(line 936,col 37)",
            "(line 937,col 9)-(line 937,col 76)",
            "(line 938,col 9)-(line 938,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid()",
        "snippet": "    public void test_setUpToClass_invalid() {\n        Integer val = new Integer(5);\n        ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n        try {\n            test.setUpToClass(String.class);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }",
        "begin_line": 944,
        "end_line": 953,
        "comment": "\n     * Tests ReflectionToStringBuilder setUpToClass().\n     ",
        "child_ranges": [
            "(line 945,col 9)-(line 945,col 37)",
            "(line 946,col 9)-(line 946,col 76)",
            "(line 947,col 9)-(line 952,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull()",
        "snippet": "    public void testReflectionNull() {\n        assertEquals(\"<null>\", ReflectionToStringBuilder.toString(null));\n    }",
        "begin_line": 985,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 986,col 9)-(line 986,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.MultiLineTestObject.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return new ToStringBuilder(this).append(\"testInt\", i).toString();\n        }",
        "begin_line": 995,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 997,col 13)-(line 997,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle()",
        "snippet": "    public void testAppendToStringUsingMultiLineStyle() {\n        MultiLineTestObject obj = new MultiLineTestObject();\n        ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n                                          .appendToString(obj.toString());\n        assertEquals(testBuilder.toString().indexOf(\"testInt=31337\"), -1);\n    }",
        "begin_line": 1001,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 1002,col 9)-(line 1002,col 60)",
            "(line 1003,col 9)-(line 1004,col 74)",
            "(line 1005,col 9)-(line 1005,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.NoFieldNamesToStringStyleTest(java.lang.String)",
        "snippet": "    public NoFieldNamesToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n    }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 22)",
            "(line 44,col 9)-(line 44,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 25)",
            "(line 50,col 9)-(line 50,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 105)",
            "(line 61,col 9)-(line 61,col 117)",
            "(line 63,col 9)-(line 63,col 131)",
            "(line 64,col 9)-(line 64,col 144)",
            "(line 65,col 9)-(line 65,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 68,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 36)",
            "(line 70,col 9)-(line 70,col 36)",
            "(line 71,col 9)-(line 71,col 103)",
            "(line 72,col 9)-(line 72,col 87)",
            "(line 73,col 9)-(line 73,col 108)",
            "(line 74,col 9)-(line 74,col 92)",
            "(line 75,col 9)-(line 75,col 110)",
            "(line 76,col 9)-(line 76,col 107)",
            "(line 77,col 9)-(line 77,col 127)",
            "(line 78,col 9)-(line 78,col 120)",
            "(line 79,col 9)-(line 79,col 133)",
            "(line 80,col 9)-(line 80,col 126)",
            "(line 81,col 9)-(line 81,col 126)",
            "(line 82,col 9)-(line 82,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Ron Paul\";\n        p.age = 72;\n        p.smoker = false;\n        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n        assertEquals(pBaseStr + \"[Ron Paul,72,false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 32)",
            "(line 87,col 9)-(line 87,col 28)",
            "(line 88,col 9)-(line 88,col 19)",
            "(line 89,col 9)-(line 89,col 25)",
            "(line 90,col 9)-(line 90,col 105)",
            "(line 91,col 9)-(line 91,col 161)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 87)",
            "(line 96,col 9)-(line 96,col 92)",
            "(line 97,col 9)-(line 97,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 105)",
            "(line 103,col 9)-(line 103,col 114)",
            "(line 104,col 9)-(line 104,col 21)",
            "(line 105,col 9)-(line 105,col 95)",
            "(line 106,col 9)-(line 106,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 109,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 48)",
            "(line 111,col 9)-(line 111,col 99)",
            "(line 112,col 9)-(line 112,col 108)",
            "(line 113,col 9)-(line 113,col 21)",
            "(line 114,col 9)-(line 114,col 95)",
            "(line 115,col 9)-(line 115,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 58)",
            "(line 120,col 9)-(line 120,col 107)",
            "(line 121,col 9)-(line 121,col 116)",
            "(line 122,col 9)-(line 122,col 21)",
            "(line 123,col 9)-(line 123,col 95)",
            "(line 124,col 9)-(line 124,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.ToStringStyleTest(java.lang.String)",
        "snippet": "    public ToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayStart()",
        "snippet": "    public void testSetArrayStart() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setArrayStart(null);\n        assertEquals(\"\", style.getArrayStart());\n    }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 54)",
            "(line 39,col 9)-(line 39,col 34)",
            "(line 40,col 9)-(line 40,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetArrayEnd()",
        "snippet": "    public void testSetArrayEnd() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setArrayEnd(null);\n        assertEquals(\"\", style.getArrayEnd());\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 54)",
            "(line 45,col 9)-(line 45,col 32)",
            "(line 46,col 9)-(line 46,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetArraySeparator()",
        "snippet": "    public void testSetArraySeparator() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setArraySeparator(null);\n        assertEquals(\"\", style.getArraySeparator());\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 54)",
            "(line 51,col 9)-(line 51,col 38)",
            "(line 52,col 9)-(line 52,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentStart()",
        "snippet": "    public void testSetContentStart() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setContentStart(null);\n        assertEquals(\"\", style.getContentStart());\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 54)",
            "(line 57,col 9)-(line 57,col 36)",
            "(line 58,col 9)-(line 58,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetContentEnd()",
        "snippet": "    public void testSetContentEnd() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setContentEnd(null);\n        assertEquals(\"\", style.getContentEnd());\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 54)",
            "(line 63,col 9)-(line 63,col 34)",
            "(line 64,col 9)-(line 64,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldNameValueSeparator()",
        "snippet": "    public void testSetFieldNameValueSeparator() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setFieldNameValueSeparator(null);\n        assertEquals(\"\", style.getFieldNameValueSeparator());\n    }",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 54)",
            "(line 69,col 9)-(line 69,col 47)",
            "(line 70,col 9)-(line 70,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator()",
        "snippet": "    public void testSetFieldSeparator() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setFieldSeparator(null);\n        assertEquals(\"\", style.getFieldSeparator());\n    }",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 54)",
            "(line 75,col 9)-(line 75,col 38)",
            "(line 76,col 9)-(line 76,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetNullText()",
        "snippet": "    public void testSetNullText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setNullText(null);\n        assertEquals(\"\", style.getNullText());\n    }",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 54)",
            "(line 81,col 9)-(line 81,col 32)",
            "(line 82,col 9)-(line 82,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText()",
        "snippet": "    public void testSetSizeStartText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSizeStartText(null);\n        assertEquals(\"\", style.getSizeStartText());\n    }",
        "begin_line": 85,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 87,col 37)",
            "(line 88,col 9)-(line 88,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeEndText()",
        "snippet": "    public void testSetSizeEndText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSizeEndText(null);\n        assertEquals(\"\", style.getSizeEndText());\n    }",
        "begin_line": 91,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 54)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 94,col 9)-(line 94,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectStartText()",
        "snippet": "    public void testSetSummaryObjectStartText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSummaryObjectStartText(null);\n        assertEquals(\"\", style.getSummaryObjectStartText());\n    }",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 46)",
            "(line 100,col 9)-(line 100,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ToStringStyleTest.testSetSummaryObjectEndText()",
        "snippet": "    public void testSetSummaryObjectEndText() {\n        ToStringStyle style = new ToStringStyleImpl();\n        style.setSummaryObjectEndText(null);\n        assertEquals(\"\", style.getSummaryObjectEndText());\n    }",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 44)",
            "(line 106,col 9)-(line 106,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.EqualsBuilderTest(java.lang.String)",
        "snippet": "    public EqualsBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject.TestObject()",
        "snippet": "        public TestObject() {\n        }",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 47,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 49,col 13)-(line 49,col 44)",
            "(line 50,col 13)-(line 50,col 43)",
            "(line 51,col 13)-(line 53,col 13)",
            "(line 55,col 13)-(line 55,col 44)",
            "(line 56,col 13)-(line 56,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestSubObject.TestSubObject(int, int)",
        "snippet": "        public TestSubObject(int a, int b) {\n            super(a);\n            this.b = b;\n        }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 74,col 13)-(line 74,col 21)",
            "(line 75,col 13)-(line 75,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 79,col 13)-(line 79,col 44)",
            "(line 80,col 13)-(line 80,col 43)",
            "(line 81,col 13)-(line 83,col 13)",
            "(line 85,col 13)-(line 85,col 50)",
            "(line 86,col 13)-(line 86,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestSubObject.setB(int)",
        "snippet": "        public void setB(int b) {\n            this.b = b;\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestSubObject.getB()",
        "snippet": "        public int getB() {\n            return b;\n        }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 13)-(line 94,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestEmptySubObject.TestEmptySubObject(int)",
        "snippet": "        public TestEmptySubObject(int a) {\n            super(a);\n        }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 13)-(line 100,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestTSubObject.TestTSubObject(int, int)",
        "snippet": "        public TestTSubObject(int a, int t) {\n            super(a);\n            this.t = t;\n        }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 108,col 13)-(line 108,col 21)",
            "(line 109,col 13)-(line 109,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestTTSubObject.TestTTSubObject(int, int, int)",
        "snippet": "        public TestTTSubObject(int a, int t, int tt) {\n            super(a, t);\n            this.tt = tt;\n        }",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 117,col 13)-(line 117,col 24)",
            "(line 118,col 13)-(line 118,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestTTLeafObject.TestTTLeafObject(int, int, int, int)",
        "snippet": "        public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n            super(a, t, tt);\n            this.leafValue = leafValue;\n        }",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 13)-(line 126,col 28)",
            "(line 127,col 13)-(line 127,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestTSubObject2.TestTSubObject2(int, int)",
        "snippet": "        public TestTSubObject2(int a, int t) {\n            super(a);\n        }",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 134,col 13)-(line 134,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestTSubObject2.getT()",
        "snippet": "        public int getT() {\n            return t;\n        }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 13)-(line 137,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestTSubObject2.setT(int)",
        "snippet": "        public void setT(int t) {\n            this.t = t;\n        }",
        "begin_line": 139,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 140,col 13)-(line 140,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals()",
        "snippet": "    public void testReflectionEquals() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));\n        o2.setA(4);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n    }",
        "begin_line": 144,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 42)",
            "(line 146,col 9)-(line 146,col 42)",
            "(line 147,col 9)-(line 147,col 59)",
            "(line 148,col 9)-(line 148,col 60)",
            "(line 149,col 9)-(line 149,col 19)",
            "(line 150,col 9)-(line 150,col 59)",
            "(line 152,col 9)-(line 152,col 62)",
            "(line 154,col 9)-(line 154,col 62)",
            "(line 155,col 9)-(line 155,col 62)",
            "(line 156,col 9)-(line 156,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals()",
        "snippet": "    public void testReflectionHierarchyEquals() {\n        testReflectionHierarchyEquals(false);\n        testReflectionHierarchyEquals(true);\n        // Transients\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n    }",
        "begin_line": 159,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 45)",
            "(line 161,col 9)-(line 161,col 44)",
            "(line 163,col 9)-(line 163,col 125)",
            "(line 164,col 9)-(line 164,col 126)",
            "(line 165,col 9)-(line 165,col 126)",
            "(line 166,col 9)-(line 166,col 126)",
            "(line 167,col 9)-(line 167,col 126)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals(boolean)",
        "snippet": "    public void testReflectionHierarchyEquals(boolean testTransients) {\n        TestObject to1 = new TestObject(4);\n        TestObject to1Bis = new TestObject(4);\n        TestObject to1Ter = new TestObject(4);\n        TestObject to2 = new TestObject(5);\n        TestEmptySubObject teso = new TestEmptySubObject(4);\n        TestTSubObject ttso = new TestTSubObject(4, 1);\n        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);\n        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);\n        TestSubObject tso1 = new TestSubObject(1, 4);\n        TestSubObject tso1bis = new TestSubObject(1, 4);\n        TestSubObject tso1ter = new TestSubObject(1, 4);\n        TestSubObject tso2 = new TestSubObject(2, 5);\n\n        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);\n        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);\n\n        // More sanity checks:\n\n        // same values\n        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));\n        // same super values, diff sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));\n        // diff super values, same sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));\n\n        // mix super and sub types: equals\n        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert\n\n        // mix super and sub types: NOT equals\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));\n        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));\n    }",
        "begin_line": 170,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 43)",
            "(line 172,col 9)-(line 172,col 46)",
            "(line 173,col 9)-(line 173,col 46)",
            "(line 174,col 9)-(line 174,col 43)",
            "(line 175,col 9)-(line 175,col 60)",
            "(line 176,col 9)-(line 176,col 55)",
            "(line 177,col 9)-(line 177,col 61)",
            "(line 178,col 9)-(line 178,col 65)",
            "(line 179,col 9)-(line 179,col 53)",
            "(line 180,col 9)-(line 180,col 56)",
            "(line 181,col 9)-(line 181,col 56)",
            "(line 182,col 9)-(line 182,col 53)",
            "(line 184,col 9)-(line 184,col 112)",
            "(line 185,col 9)-(line 185,col 119)",
            "(line 190,col 9)-(line 190,col 79)",
            "(line 191,col 9)-(line 191,col 119)",
            "(line 193,col 9)-(line 193,col 120)",
            "(line 194,col 9)-(line 194,col 120)",
            "(line 196,col 9)-(line 196,col 120)",
            "(line 197,col 9)-(line 197,col 120)",
            "(line 200,col 9)-(line 200,col 78)",
            "(line 201,col 9)-(line 201,col 78)",
            "(line 203,col 9)-(line 203,col 69)",
            "(line 204,col 9)-(line 204,col 69)",
            "(line 206,col 9)-(line 206,col 70)",
            "(line 207,col 9)-(line 207,col 70)",
            "(line 209,col 9)-(line 209,col 71)",
            "(line 210,col 9)-(line 210,col 71)",
            "(line 213,col 9)-(line 213,col 114)",
            "(line 214,col 9)-(line 214,col 114)",
            "(line 216,col 9)-(line 216,col 113)",
            "(line 217,col 9)-(line 217,col 113)",
            "(line 219,col 9)-(line 219,col 113)",
            "(line 220,col 9)-(line 220,col 113)",
            "(line 222,col 9)-(line 222,col 63)",
            "(line 223,col 9)-(line 223,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship(org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest.TestObject, boolean)",
        "snippet": "    public void testReflectionEqualsEquivalenceRelationship(\n        TestObject to,\n        TestObject toBis,\n        TestObject toTer,\n        TestObject to2,\n        TestObject oToChange,\n        boolean testTransients) {\n\n        // reflection test\n        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));\n\n        // symmetry test\n        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));\n\n        // transitive test\n        assertTrue(\n            EqualsBuilder.reflectionEquals(to, toBis, testTransients)\n                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)\n                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));\n\n        // consistency test\n        oToChange.setA(to.getA());\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());\n        }\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        oToChange.setA(to.getA() + 1);\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);\n        }\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n\n        // non-null reference test\n        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));\n    }",
        "begin_line": 241,
        "end_line": 282,
        "comment": "\n     * Equivalence relationship tests inspired by \"Effective Java\":\n     * <ul>\n     * <li>reflection</li>\n     * <li>symmetry</li>\n     * <li>transitive</li>\n     * <li>consistency</li>\n     * <li>non-null reference</li>\n     * </ul>\n     * @param to a TestObject\n     * @param toBis a TestObject, equal to to and toTer\n     * @param toTer Left hand side, equal to to and toBis\n     * @param to2 a different TestObject\n     * @param oToChange a TestObject that will be changed\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 75)",
            "(line 251,col 9)-(line 251,col 77)",
            "(line 254,col 9)-(line 254,col 139)",
            "(line 257,col 9)-(line 260,col 78)",
            "(line 263,col 9)-(line 263,col 34)",
            "(line 264,col 9)-(line 266,col 9)",
            "(line 267,col 9)-(line 267,col 82)",
            "(line 268,col 9)-(line 268,col 82)",
            "(line 269,col 9)-(line 269,col 38)",
            "(line 270,col 9)-(line 272,col 9)",
            "(line 273,col 9)-(line 273,col 83)",
            "(line 274,col 9)-(line 274,col 83)",
            "(line 277,col 9)-(line 277,col 78)",
            "(line 278,col 9)-(line 278,col 79)",
            "(line 279,col 9)-(line 279,col 78)",
            "(line 280,col 9)-(line 280,col 79)",
            "(line 281,col 9)-(line 281,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testSuper()",
        "snippet": "    public void testSuper() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n    }",
        "begin_line": 284,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 42)",
            "(line 286,col 9)-(line 286,col 42)",
            "(line 287,col 9)-(line 287,col 92)",
            "(line 288,col 9)-(line 288,col 94)",
            "(line 289,col 9)-(line 289,col 93)",
            "(line 290,col 9)-(line 290,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        o2.setA(4);\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n\n        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());\n        \n        assertTrue(!new EqualsBuilder().append(o1, null).isEquals());\n        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n    }",
        "begin_line": 293,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 42)",
            "(line 295,col 9)-(line 295,col 42)",
            "(line 296,col 9)-(line 296,col 66)",
            "(line 297,col 9)-(line 297,col 67)",
            "(line 298,col 9)-(line 298,col 19)",
            "(line 299,col 9)-(line 299,col 66)",
            "(line 301,col 9)-(line 301,col 69)",
            "(line 303,col 9)-(line 303,col 69)",
            "(line 304,col 9)-(line 304,col 69)",
            "(line 305,col 9)-(line 305,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        long o1 = 1L;\n        long o2 = 2L;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 308,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 21)",
            "(line 310,col 9)-(line 310,col 21)",
            "(line 311,col 9)-(line 311,col 66)",
            "(line 312,col 9)-(line 312,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testInt()",
        "snippet": "    public void testInt() {\n        int o1 = 1;\n        int o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 315,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 19)",
            "(line 317,col 9)-(line 317,col 19)",
            "(line 318,col 9)-(line 318,col 66)",
            "(line 319,col 9)-(line 319,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        short o1 = 1;\n        short o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 322,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 21)",
            "(line 324,col 9)-(line 324,col 21)",
            "(line 325,col 9)-(line 325,col 66)",
            "(line 326,col 9)-(line 326,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        char o1 = 1;\n        char o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 20)",
            "(line 331,col 9)-(line 331,col 20)",
            "(line 332,col 9)-(line 332,col 66)",
            "(line 333,col 9)-(line 333,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        byte o1 = 1;\n        byte o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 336,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 20)",
            "(line 338,col 9)-(line 338,col 20)",
            "(line 339,col 9)-(line 339,col 66)",
            "(line 340,col 9)-(line 340,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testDouble()",
        "snippet": "    public void testDouble() {\n        double o1 = 1;\n        double o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 343,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 22)",
            "(line 345,col 9)-(line 345,col 22)",
            "(line 346,col 9)-(line 346,col 66)",
            "(line 347,col 9)-(line 347,col 67)",
            "(line 348,col 9)-(line 348,col 75)",
            "(line 349,col 9)-(line 349,col 82)",
            "(line 350,col 9)-(line 350,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        float o1 = 1;\n        float o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 353,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 21)",
            "(line 355,col 9)-(line 355,col 21)",
            "(line 356,col 9)-(line 356,col 66)",
            "(line 357,col 9)-(line 357,col 67)",
            "(line 358,col 9)-(line 358,col 74)",
            "(line 359,col 9)-(line 359,col 80)",
            "(line 360,col 9)-(line 360,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testAccessors()",
        "snippet": "    public void testAccessors() {\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(true);\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(false);\n        assertFalse(equalsBuilder.isEquals());\n    }",
        "begin_line": 363,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 58)",
            "(line 365,col 9)-(line 365,col 45)",
            "(line 366,col 9)-(line 366,col 38)",
            "(line 367,col 9)-(line 367,col 45)",
            "(line 368,col 9)-(line 368,col 39)",
            "(line 369,col 9)-(line 369,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testReset()",
        "snippet": "    public void testReset() {\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(false);\n        assertFalse(equalsBuilder.isEquals());\n        equalsBuilder.reset();\n        assertTrue(equalsBuilder.isEquals());\n    }",
        "begin_line": 372,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 58)",
            "(line 374,col 9)-(line 374,col 45)",
            "(line 375,col 9)-(line 375,col 39)",
            "(line 376,col 9)-(line 376,col 46)",
            "(line 377,col 9)-(line 377,col 30)",
            "(line 378,col 9)-(line 378,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        boolean o1 = true;\n        boolean o2 = false;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 381,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 26)",
            "(line 383,col 9)-(line 383,col 27)",
            "(line 384,col 9)-(line 384,col 66)",
            "(line 385,col 9)-(line 385,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        TestObject[] obj1 = new TestObject[3];\n        obj1[0] = new TestObject(4);\n        obj1[1] = new TestObject(5);\n        obj1[2] = null;\n        TestObject[] obj2 = new TestObject[3];\n        obj2[0] = new TestObject(4);\n        obj2[1] = new TestObject(5);\n        obj2[2] = null;\n        \n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(5);\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = obj1[1];\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n                       \n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 388,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 46)",
            "(line 390,col 9)-(line 390,col 36)",
            "(line 391,col 9)-(line 391,col 36)",
            "(line 392,col 9)-(line 392,col 23)",
            "(line 393,col 9)-(line 393,col 46)",
            "(line 394,col 9)-(line 394,col 36)",
            "(line 395,col 9)-(line 395,col 36)",
            "(line 396,col 9)-(line 396,col 23)",
            "(line 398,col 9)-(line 398,col 70)",
            "(line 399,col 9)-(line 399,col 70)",
            "(line 400,col 9)-(line 400,col 70)",
            "(line 401,col 9)-(line 401,col 24)",
            "(line 402,col 9)-(line 402,col 71)",
            "(line 403,col 9)-(line 403,col 24)",
            "(line 404,col 9)-(line 404,col 70)",
            "(line 405,col 9)-(line 405,col 26)",
            "(line 406,col 9)-(line 406,col 71)",
            "(line 407,col 9)-(line 407,col 23)",
            "(line 408,col 9)-(line 408,col 70)",
            "(line 410,col 9)-(line 410,col 20)",
            "(line 411,col 9)-(line 411,col 71)",
            "(line 412,col 9)-(line 412,col 20)",
            "(line 413,col 9)-(line 413,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] obj1 = new long[2];\n        obj1[0] = 5L;\n        obj1[1] = 6L;\n        long[] obj2 = new long[2];\n        obj2[0] = 5L;\n        obj2[1] = 6L;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 416,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 34)",
            "(line 418,col 9)-(line 418,col 21)",
            "(line 419,col 9)-(line 419,col 21)",
            "(line 420,col 9)-(line 420,col 34)",
            "(line 421,col 9)-(line 421,col 21)",
            "(line 422,col 9)-(line 422,col 21)",
            "(line 423,col 9)-(line 423,col 70)",
            "(line 424,col 9)-(line 424,col 70)",
            "(line 425,col 9)-(line 425,col 20)",
            "(line 426,col 9)-(line 426,col 71)",
            "(line 428,col 9)-(line 428,col 20)",
            "(line 429,col 9)-(line 429,col 71)",
            "(line 430,col 9)-(line 430,col 20)",
            "(line 431,col 9)-(line 431,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        int[] obj1 = new int[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        int[] obj2 = new int[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 434,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 32)",
            "(line 436,col 9)-(line 436,col 20)",
            "(line 437,col 9)-(line 437,col 20)",
            "(line 438,col 9)-(line 438,col 32)",
            "(line 439,col 9)-(line 439,col 20)",
            "(line 440,col 9)-(line 440,col 20)",
            "(line 441,col 9)-(line 441,col 70)",
            "(line 442,col 9)-(line 442,col 70)",
            "(line 443,col 9)-(line 443,col 20)",
            "(line 444,col 9)-(line 444,col 71)",
            "(line 446,col 9)-(line 446,col 20)",
            "(line 447,col 9)-(line 447,col 71)",
            "(line 448,col 9)-(line 448,col 20)",
            "(line 449,col 9)-(line 449,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        short[] obj1 = new short[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        short[] obj2 = new short[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 452,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 36)",
            "(line 454,col 9)-(line 454,col 20)",
            "(line 455,col 9)-(line 455,col 20)",
            "(line 456,col 9)-(line 456,col 36)",
            "(line 457,col 9)-(line 457,col 20)",
            "(line 458,col 9)-(line 458,col 20)",
            "(line 459,col 9)-(line 459,col 70)",
            "(line 460,col 9)-(line 460,col 70)",
            "(line 461,col 9)-(line 461,col 20)",
            "(line 462,col 9)-(line 462,col 71)",
            "(line 464,col 9)-(line 464,col 20)",
            "(line 465,col 9)-(line 465,col 71)",
            "(line 466,col 9)-(line 466,col 20)",
            "(line 467,col 9)-(line 467,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        char[] obj1 = new char[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        char[] obj2 = new char[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 470,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 34)",
            "(line 472,col 9)-(line 472,col 20)",
            "(line 473,col 9)-(line 473,col 20)",
            "(line 474,col 9)-(line 474,col 34)",
            "(line 475,col 9)-(line 475,col 20)",
            "(line 476,col 9)-(line 476,col 20)",
            "(line 477,col 9)-(line 477,col 70)",
            "(line 478,col 9)-(line 478,col 70)",
            "(line 479,col 9)-(line 479,col 20)",
            "(line 480,col 9)-(line 480,col 71)",
            "(line 482,col 9)-(line 482,col 20)",
            "(line 483,col 9)-(line 483,col 71)",
            "(line 484,col 9)-(line 484,col 20)",
            "(line 485,col 9)-(line 485,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        byte[] obj1 = new byte[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        byte[] obj2 = new byte[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 488,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 34)",
            "(line 490,col 9)-(line 490,col 20)",
            "(line 491,col 9)-(line 491,col 20)",
            "(line 492,col 9)-(line 492,col 34)",
            "(line 493,col 9)-(line 493,col 20)",
            "(line 494,col 9)-(line 494,col 20)",
            "(line 495,col 9)-(line 495,col 70)",
            "(line 496,col 9)-(line 496,col 70)",
            "(line 497,col 9)-(line 497,col 20)",
            "(line 498,col 9)-(line 498,col 71)",
            "(line 500,col 9)-(line 500,col 20)",
            "(line 501,col 9)-(line 501,col 71)",
            "(line 502,col 9)-(line 502,col 20)",
            "(line 503,col 9)-(line 503,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        double[] obj1 = new double[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        double[] obj2 = new double[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 506,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 507,col 9)-(line 507,col 38)",
            "(line 508,col 9)-(line 508,col 20)",
            "(line 509,col 9)-(line 509,col 20)",
            "(line 510,col 9)-(line 510,col 38)",
            "(line 511,col 9)-(line 511,col 20)",
            "(line 512,col 9)-(line 512,col 20)",
            "(line 513,col 9)-(line 513,col 70)",
            "(line 514,col 9)-(line 514,col 70)",
            "(line 515,col 9)-(line 515,col 20)",
            "(line 516,col 9)-(line 516,col 71)",
            "(line 518,col 9)-(line 518,col 20)",
            "(line 519,col 9)-(line 519,col 71)",
            "(line 520,col 9)-(line 520,col 20)",
            "(line 521,col 9)-(line 521,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        float[] obj1 = new float[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        float[] obj2 = new float[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 524,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 36)",
            "(line 526,col 9)-(line 526,col 20)",
            "(line 527,col 9)-(line 527,col 20)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 20)",
            "(line 530,col 9)-(line 530,col 20)",
            "(line 531,col 9)-(line 531,col 70)",
            "(line 532,col 9)-(line 532,col 70)",
            "(line 533,col 9)-(line 533,col 20)",
            "(line 534,col 9)-(line 534,col 71)",
            "(line 536,col 9)-(line 536,col 20)",
            "(line 537,col 9)-(line 537,col 71)",
            "(line 538,col 9)-(line 538,col 20)",
            "(line 539,col 9)-(line 539,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        boolean[] obj1 = new boolean[2];\n        obj1[0] = true;\n        obj1[1] = false;\n        boolean[] obj2 = new boolean[2];\n        obj2[0] = true;\n        obj2[1] = false;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 542,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 543,col 9)-(line 543,col 40)",
            "(line 544,col 9)-(line 544,col 23)",
            "(line 545,col 9)-(line 545,col 24)",
            "(line 546,col 9)-(line 546,col 40)",
            "(line 547,col 9)-(line 547,col 23)",
            "(line 548,col 9)-(line 548,col 24)",
            "(line 549,col 9)-(line 549,col 70)",
            "(line 550,col 9)-(line 550,col 70)",
            "(line 551,col 9)-(line 551,col 23)",
            "(line 552,col 9)-(line 552,col 71)",
            "(line 554,col 9)-(line 554,col 20)",
            "(line 555,col 9)-(line 555,col 71)",
            "(line 556,col 9)-(line 556,col 20)",
            "(line 557,col 9)-(line 557,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiLongArray()",
        "snippet": "    public void testMultiLongArray() {\n        long[][] array1 = new long[2][2];\n        long[][] array2 = new long[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 560,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 561,col 9)-(line 561,col 41)",
            "(line 562,col 9)-(line 562,col 41)",
            "(line 563,col 9)-(line 568,col 9)",
            "(line 569,col 9)-(line 569,col 74)",
            "(line 570,col 9)-(line 570,col 74)",
            "(line 571,col 9)-(line 571,col 25)",
            "(line 572,col 9)-(line 572,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiIntArray()",
        "snippet": "    public void testMultiIntArray() {\n        int[][] array1 = new int[2][2];\n        int[][] array2 = new int[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 575,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 576,col 9)-(line 576,col 39)",
            "(line 577,col 9)-(line 577,col 39)",
            "(line 578,col 9)-(line 583,col 9)",
            "(line 584,col 9)-(line 584,col 74)",
            "(line 585,col 9)-(line 585,col 74)",
            "(line 586,col 9)-(line 586,col 25)",
            "(line 587,col 9)-(line 587,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiShortArray()",
        "snippet": "    public void testMultiShortArray() {\n        short[][] array1 = new short[2][2];\n        short[][] array2 = new short[2][2];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 590,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 43)",
            "(line 592,col 9)-(line 592,col 43)",
            "(line 593,col 9)-(line 598,col 9)",
            "(line 599,col 9)-(line 599,col 74)",
            "(line 600,col 9)-(line 600,col 74)",
            "(line 601,col 9)-(line 601,col 25)",
            "(line 602,col 9)-(line 602,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiCharArray()",
        "snippet": "    public void testMultiCharArray() {\n        char[][] array1 = new char[2][2];\n        char[][] array2 = new char[2][2];\n        for (char i = 0; i < array1.length; ++i) {\n            for (char j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 605,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 606,col 9)-(line 606,col 41)",
            "(line 607,col 9)-(line 607,col 41)",
            "(line 608,col 9)-(line 613,col 9)",
            "(line 614,col 9)-(line 614,col 74)",
            "(line 615,col 9)-(line 615,col 74)",
            "(line 616,col 9)-(line 616,col 25)",
            "(line 617,col 9)-(line 617,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiByteArray()",
        "snippet": "    public void testMultiByteArray() {\n        byte[][] array1 = new byte[2][2];\n        byte[][] array2 = new byte[2][2];\n        for (byte i = 0; i < array1.length; ++i) {\n            for (byte j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 620,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 621,col 9)-(line 621,col 41)",
            "(line 622,col 9)-(line 622,col 41)",
            "(line 623,col 9)-(line 628,col 9)",
            "(line 629,col 9)-(line 629,col 74)",
            "(line 630,col 9)-(line 630,col 74)",
            "(line 631,col 9)-(line 631,col 25)",
            "(line 632,col 9)-(line 632,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiFloatArray()",
        "snippet": "    public void testMultiFloatArray() {\n        float[][] array1 = new float[2][2];\n        float[][] array2 = new float[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 634,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 635,col 9)-(line 635,col 43)",
            "(line 636,col 9)-(line 636,col 43)",
            "(line 637,col 9)-(line 642,col 9)",
            "(line 643,col 9)-(line 643,col 74)",
            "(line 644,col 9)-(line 644,col 74)",
            "(line 645,col 9)-(line 645,col 25)",
            "(line 646,col 9)-(line 646,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiDoubleArray()",
        "snippet": "    public void testMultiDoubleArray() {\n        double[][] array1 = new double[2][2];\n        double[][] array2 = new double[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 649,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 45)",
            "(line 651,col 9)-(line 651,col 45)",
            "(line 652,col 9)-(line 657,col 9)",
            "(line 658,col 9)-(line 658,col 74)",
            "(line 659,col 9)-(line 659,col 74)",
            "(line 660,col 9)-(line 660,col 25)",
            "(line 661,col 9)-(line 661,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiBooleanArray()",
        "snippet": "    public void testMultiBooleanArray() {\n        boolean[][] array1 = new boolean[2][2];\n        boolean[][] array2 = new boolean[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i == 1) || (j == 1);\n                array2[i][j] = (i == 1) || (j == 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = false;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n        \n        // compare 1 dim to 2.\n        boolean[] array3 = new boolean[]{true, true};\n        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\n        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n    }",
        "begin_line": 664,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 47)",
            "(line 666,col 9)-(line 666,col 47)",
            "(line 667,col 9)-(line 672,col 9)",
            "(line 673,col 9)-(line 673,col 74)",
            "(line 674,col 9)-(line 674,col 74)",
            "(line 675,col 9)-(line 675,col 29)",
            "(line 676,col 9)-(line 676,col 75)",
            "(line 679,col 9)-(line 679,col 53)",
            "(line 680,col 9)-(line 680,col 75)",
            "(line 681,col 9)-(line 681,col 75)",
            "(line 682,col 9)-(line 682,col 75)",
            "(line 683,col 9)-(line 683,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testRaggedArray()",
        "snippet": "    public void testRaggedArray() {\n        long array1[][] = new long[2][];\n        long array2[][] = new long[2][];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < array1[i].length; ++j) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 686,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 687,col 9)-(line 687,col 40)",
            "(line 688,col 9)-(line 688,col 40)",
            "(line 689,col 9)-(line 696,col 9)",
            "(line 697,col 9)-(line 697,col 74)",
            "(line 698,col 9)-(line 698,col 74)",
            "(line 699,col 9)-(line 699,col 25)",
            "(line 700,col 9)-(line 700,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testMixedArray()",
        "snippet": "    public void testMixedArray() {\n        Object array1[] = new Object[2];\n        Object array2[] = new Object[2];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < 2; ++j) {\n                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        ((long[]) array1[1])[1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 703,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 704,col 9)-(line 704,col 40)",
            "(line 705,col 9)-(line 705,col 40)",
            "(line 706,col 9)-(line 713,col 9)",
            "(line 714,col 9)-(line 714,col 74)",
            "(line 715,col 9)-(line 715,col 74)",
            "(line 716,col 9)-(line 716,col 36)",
            "(line 717,col 9)-(line 717,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectArrayHiddenByObject()",
        "snippet": "    public void testObjectArrayHiddenByObject() {\n        TestObject[] array1 = new TestObject[2];\n        array1[0] = new TestObject(4);\n        array1[1] = new TestObject(5);\n        TestObject[] array2 = new TestObject[2];\n        array2[0] = new TestObject(4);\n        array2[1] = new TestObject(5);\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 720,
        "end_line": 735,
        "comment": "",
        "child_ranges": [
            "(line 721,col 9)-(line 721,col 48)",
            "(line 722,col 9)-(line 722,col 38)",
            "(line 723,col 9)-(line 723,col 38)",
            "(line 724,col 9)-(line 724,col 48)",
            "(line 725,col 9)-(line 725,col 38)",
            "(line 726,col 9)-(line 726,col 38)",
            "(line 727,col 9)-(line 727,col 29)",
            "(line 728,col 9)-(line 728,col 29)",
            "(line 729,col 9)-(line 729,col 70)",
            "(line 730,col 9)-(line 730,col 72)",
            "(line 731,col 9)-(line 731,col 70)",
            "(line 732,col 9)-(line 732,col 72)",
            "(line 733,col 9)-(line 733,col 26)",
            "(line 734,col 9)-(line 734,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArrayHiddenByObject()",
        "snippet": "    public void testLongArrayHiddenByObject() {\n        long[] array1 = new long[2];\n        array1[0] = 5L;\n        array1[1] = 6L;\n        long[] array2 = new long[2];\n        array2[0] = 5L;\n        array2[1] = 6L;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 737,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 738,col 9)-(line 738,col 36)",
            "(line 739,col 9)-(line 739,col 23)",
            "(line 740,col 9)-(line 740,col 23)",
            "(line 741,col 9)-(line 741,col 36)",
            "(line 742,col 9)-(line 742,col 23)",
            "(line 743,col 9)-(line 743,col 23)",
            "(line 744,col 9)-(line 744,col 29)",
            "(line 745,col 9)-(line 745,col 29)",
            "(line 746,col 9)-(line 746,col 70)",
            "(line 747,col 9)-(line 747,col 72)",
            "(line 748,col 9)-(line 748,col 70)",
            "(line 749,col 9)-(line 749,col 72)",
            "(line 750,col 9)-(line 750,col 22)",
            "(line 751,col 9)-(line 751,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testIntArrayHiddenByObject()",
        "snippet": "    public void testIntArrayHiddenByObject() {\n        int[] array1 = new int[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        int[] array2 = new int[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 754,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 755,col 9)-(line 755,col 34)",
            "(line 756,col 9)-(line 756,col 22)",
            "(line 757,col 9)-(line 757,col 22)",
            "(line 758,col 9)-(line 758,col 34)",
            "(line 759,col 9)-(line 759,col 22)",
            "(line 760,col 9)-(line 760,col 22)",
            "(line 761,col 9)-(line 761,col 29)",
            "(line 762,col 9)-(line 762,col 29)",
            "(line 763,col 9)-(line 763,col 70)",
            "(line 764,col 9)-(line 764,col 72)",
            "(line 765,col 9)-(line 765,col 70)",
            "(line 766,col 9)-(line 766,col 72)",
            "(line 767,col 9)-(line 767,col 22)",
            "(line 768,col 9)-(line 768,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArrayHiddenByObject()",
        "snippet": "    public void testShortArrayHiddenByObject() {\n        short[] array1 = new short[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        short[] array2 = new short[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 771,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 772,col 38)",
            "(line 773,col 9)-(line 773,col 22)",
            "(line 774,col 9)-(line 774,col 22)",
            "(line 775,col 9)-(line 775,col 38)",
            "(line 776,col 9)-(line 776,col 22)",
            "(line 777,col 9)-(line 777,col 22)",
            "(line 778,col 9)-(line 778,col 29)",
            "(line 779,col 9)-(line 779,col 29)",
            "(line 780,col 9)-(line 780,col 70)",
            "(line 781,col 9)-(line 781,col 72)",
            "(line 782,col 9)-(line 782,col 70)",
            "(line 783,col 9)-(line 783,col 72)",
            "(line 784,col 9)-(line 784,col 22)",
            "(line 785,col 9)-(line 785,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArrayHiddenByObject()",
        "snippet": "    public void testCharArrayHiddenByObject() {\n        char[] array1 = new char[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        char[] array2 = new char[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 788,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 789,col 9)-(line 789,col 36)",
            "(line 790,col 9)-(line 790,col 22)",
            "(line 791,col 9)-(line 791,col 22)",
            "(line 792,col 9)-(line 792,col 36)",
            "(line 793,col 9)-(line 793,col 22)",
            "(line 794,col 9)-(line 794,col 22)",
            "(line 795,col 9)-(line 795,col 29)",
            "(line 796,col 9)-(line 796,col 29)",
            "(line 797,col 9)-(line 797,col 70)",
            "(line 798,col 9)-(line 798,col 72)",
            "(line 799,col 9)-(line 799,col 70)",
            "(line 800,col 9)-(line 800,col 72)",
            "(line 801,col 9)-(line 801,col 22)",
            "(line 802,col 9)-(line 802,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArrayHiddenByObject()",
        "snippet": "    public void testByteArrayHiddenByObject() {\n        byte[] array1 = new byte[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        byte[] array2 = new byte[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 805,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 806,col 9)-(line 806,col 36)",
            "(line 807,col 9)-(line 807,col 22)",
            "(line 808,col 9)-(line 808,col 22)",
            "(line 809,col 9)-(line 809,col 36)",
            "(line 810,col 9)-(line 810,col 22)",
            "(line 811,col 9)-(line 811,col 22)",
            "(line 812,col 9)-(line 812,col 29)",
            "(line 813,col 9)-(line 813,col 29)",
            "(line 814,col 9)-(line 814,col 70)",
            "(line 815,col 9)-(line 815,col 72)",
            "(line 816,col 9)-(line 816,col 70)",
            "(line 817,col 9)-(line 817,col 72)",
            "(line 818,col 9)-(line 818,col 22)",
            "(line 819,col 9)-(line 819,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArrayHiddenByObject()",
        "snippet": "    public void testDoubleArrayHiddenByObject() {\n        double[] array1 = new double[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        double[] array2 = new double[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 822,
        "end_line": 837,
        "comment": "",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 40)",
            "(line 824,col 9)-(line 824,col 22)",
            "(line 825,col 9)-(line 825,col 22)",
            "(line 826,col 9)-(line 826,col 40)",
            "(line 827,col 9)-(line 827,col 22)",
            "(line 828,col 9)-(line 828,col 22)",
            "(line 829,col 9)-(line 829,col 29)",
            "(line 830,col 9)-(line 830,col 29)",
            "(line 831,col 9)-(line 831,col 70)",
            "(line 832,col 9)-(line 832,col 72)",
            "(line 833,col 9)-(line 833,col 70)",
            "(line 834,col 9)-(line 834,col 72)",
            "(line 835,col 9)-(line 835,col 22)",
            "(line 836,col 9)-(line 836,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testFloatArrayHiddenByObject()",
        "snippet": "    public void testFloatArrayHiddenByObject() {\n        float[] array1 = new float[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        float[] array2 = new float[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 839,
        "end_line": 854,
        "comment": "",
        "child_ranges": [
            "(line 840,col 9)-(line 840,col 38)",
            "(line 841,col 9)-(line 841,col 22)",
            "(line 842,col 9)-(line 842,col 22)",
            "(line 843,col 9)-(line 843,col 38)",
            "(line 844,col 9)-(line 844,col 22)",
            "(line 845,col 9)-(line 845,col 22)",
            "(line 846,col 9)-(line 846,col 29)",
            "(line 847,col 9)-(line 847,col 29)",
            "(line 848,col 9)-(line 848,col 70)",
            "(line 849,col 9)-(line 849,col 72)",
            "(line 850,col 9)-(line 850,col 70)",
            "(line 851,col 9)-(line 851,col 72)",
            "(line 852,col 9)-(line 852,col 22)",
            "(line 853,col 9)-(line 853,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject()",
        "snippet": "    public void testBooleanArrayHiddenByObject() {\n        boolean[] array1 = new boolean[2];\n        array1[0] = true;\n        array1[1] = false;\n        boolean[] array2 = new boolean[2];\n        array2[0] = true;\n        array2[1] = false;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 856,
        "end_line": 871,
        "comment": "",
        "child_ranges": [
            "(line 857,col 9)-(line 857,col 42)",
            "(line 858,col 9)-(line 858,col 25)",
            "(line 859,col 9)-(line 859,col 26)",
            "(line 860,col 9)-(line 860,col 42)",
            "(line 861,col 9)-(line 861,col 25)",
            "(line 862,col 9)-(line 862,col 26)",
            "(line 863,col 9)-(line 863,col 29)",
            "(line 864,col 9)-(line 864,col 29)",
            "(line 865,col 9)-(line 865,col 70)",
            "(line 866,col 9)-(line 866,col 72)",
            "(line 867,col 9)-(line 867,col 70)",
            "(line 868,col 9)-(line 868,col 72)",
            "(line 869,col 9)-(line 869,col 25)",
            "(line 870,col 9)-(line 870,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestACanEqualB.TestACanEqualB(int)",
        "snippet": "        public TestACanEqualB(int a) {\n            this.a = a;\n        }",
        "begin_line": 876,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 877,col 13)-(line 877,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestACanEqualB.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof TestACanEqualB)\n                return this.a == ((TestACanEqualB) o).getA();\n            if (o instanceof TestBCanEqualA)\n                return this.a == ((TestBCanEqualA) o).getB();\n            return false;\n        }",
        "begin_line": 880,
        "end_line": 889,
        "comment": "",
        "child_ranges": [
            "(line 882,col 13)-(line 883,col 28)",
            "(line 884,col 13)-(line 885,col 61)",
            "(line 886,col 13)-(line 887,col 61)",
            "(line 888,col 13)-(line 888,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestACanEqualB.getA()",
        "snippet": "        public int getA() {\n            return this.a;\n        }",
        "begin_line": 891,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 892,col 13)-(line 892,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestBCanEqualA.TestBCanEqualA(int)",
        "snippet": "        public TestBCanEqualA(int b) {\n            this.b = b;\n        }",
        "begin_line": 899,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 900,col 13)-(line 900,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestBCanEqualA.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof TestACanEqualB)\n                return this.b == ((TestACanEqualB) o).getA();\n            if (o instanceof TestBCanEqualA)\n                return this.b == ((TestBCanEqualA) o).getB();\n            return false;\n        }",
        "begin_line": 903,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 905,col 13)-(line 906,col 28)",
            "(line 907,col 13)-(line 908,col 61)",
            "(line 909,col 13)-(line 910,col 61)",
            "(line 911,col 13)-(line 911,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestBCanEqualA.getB()",
        "snippet": "        public int getB() {\n            return this.b;\n        }",
        "begin_line": 914,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 915,col 13)-(line 915,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testUnrelatedClasses()",
        "snippet": "    public void testUnrelatedClasses() {\n        Object[] x = new Object[]{new TestACanEqualB(1)};\n        Object[] y = new Object[]{new TestBCanEqualA(1)};\n\n        // sanity checks:\n        assertTrue(Arrays.equals(x, x));\n        assertTrue(Arrays.equals(y, y));\n        assertTrue(Arrays.equals(x, y));\n        assertTrue(Arrays.equals(y, x));\n        // real tests:\n        assertTrue(x[0].equals(x[0]));\n        assertTrue(y[0].equals(y[0]));\n        assertTrue(x[0].equals(y[0]));\n        assertTrue(y[0].equals(x[0]));\n        assertTrue(new EqualsBuilder().append(x, x).isEquals());\n        assertTrue(new EqualsBuilder().append(y, y).isEquals());\n        assertTrue(new EqualsBuilder().append(x, y).isEquals());\n        assertTrue(new EqualsBuilder().append(y, x).isEquals());\n    }",
        "begin_line": 924,
        "end_line": 942,
        "comment": "\n     * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\n     * of each other and do not share a parent aside from Object.\n     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n     ",
        "child_ranges": [
            "(line 925,col 9)-(line 925,col 57)",
            "(line 926,col 9)-(line 926,col 57)",
            "(line 929,col 9)-(line 929,col 40)",
            "(line 930,col 9)-(line 930,col 40)",
            "(line 931,col 9)-(line 931,col 40)",
            "(line 932,col 9)-(line 932,col 40)",
            "(line 934,col 9)-(line 934,col 38)",
            "(line 935,col 9)-(line 935,col 38)",
            "(line 936,col 9)-(line 936,col 38)",
            "(line 937,col 9)-(line 937,col 38)",
            "(line 938,col 9)-(line 938,col 64)",
            "(line 939,col 9)-(line 939,col 64)",
            "(line 940,col 9)-(line 940,col 64)",
            "(line 941,col 9)-(line 941,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testNpeForNullElement()",
        "snippet": "    public void testNpeForNullElement() {\n        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };\n        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };\n\n        // causes an NPE in 2.0 according to:\n        // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n        new EqualsBuilder().append(x1, x2);\n    }",
        "begin_line": 947,
        "end_line": 954,
        "comment": "\n     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n     ",
        "child_ranges": [
            "(line 948,col 9)-(line 948,col 76)",
            "(line 949,col 9)-(line 949,col 86)",
            "(line 953,col 9)-(line 953,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields()",
        "snippet": "    public void testReflectionEqualsExcludeFields() throws Exception {\n        TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\n        TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\n\n        // not equal when including all fields\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));\n\n        // doesn't barf on null, empty array, or non-existent field, but still tests as not equal\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"xxx\"}));\n\n        // not equal if only one of the differing fields excluded\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\"}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"three\"}));\n\n        // equal if both differing fields excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\", \"three\"}));\n\n        // still equal as long as both differing fields are among excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\"}));\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\", \"xxx\"}));\n    }",
        "begin_line": 956,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 957,col 9)-(line 957,col 84)",
            "(line 958,col 9)-(line 958,col 84)",
            "(line 961,col 9)-(line 961,col 60)",
            "(line 964,col 9)-(line 964,col 77)",
            "(line 965,col 9)-(line 965,col 77)",
            "(line 966,col 9)-(line 966,col 82)",
            "(line 969,col 9)-(line 969,col 82)",
            "(line 970,col 9)-(line 970,col 84)",
            "(line 973,col 9)-(line 973,col 90)",
            "(line 976,col 9)-(line 976,col 97)",
            "(line 977,col 9)-(line 977,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.EqualsBuilderTest.TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int)",
        "snippet": "        public TestObjectWithMultipleFields(int one, int two, int three) {\n            this.one = new TestObject(one);\n            this.two = new TestObject(two);\n            this.three = new TestObject(three);\n        }",
        "begin_line": 988,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 989,col 13)-(line 989,col 43)",
            "(line 990,col 13)-(line 990,col 43)",
            "(line 991,col 13)-(line 991,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.SimpleToStringStyleTest(java.lang.String)",
        "snippet": "    public SimpleToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);\n    }",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 22)",
            "(line 43,col 9)-(line 43,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 25)",
            "(line 49,col 9)-(line 49,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(\"\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(\"\", new ToStringBuilder(base).appendSuper(\"\").toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).appendSuper(\"<null>\").toString());\n        \n        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(\"\").append(\"a\", \"hello\").toString());\n        assertEquals(\"<null>,hello\", new ToStringBuilder(base).appendSuper(\"<null>\").append(\"a\", \"hello\").toString());\n        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 79)",
            "(line 60,col 9)-(line 60,col 91)",
            "(line 62,col 9)-(line 62,col 105)",
            "(line 63,col 9)-(line 63,col 118)",
            "(line 64,col 9)-(line 64,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(\"3\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(\"<Integer>\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 36)",
            "(line 69,col 9)-(line 69,col 36)",
            "(line 70,col 9)-(line 70,col 91)",
            "(line 71,col 9)-(line 71,col 75)",
            "(line 72,col 9)-(line 72,col 96)",
            "(line 73,col 9)-(line 73,col 80)",
            "(line 74,col 9)-(line 74,col 98)",
            "(line 75,col 9)-(line 75,col 95)",
            "(line 76,col 9)-(line 76,col 115)",
            "(line 77,col 9)-(line 77,col 108)",
            "(line 78,col 9)-(line 78,col 121)",
            "(line 79,col 9)-(line 79,col 114)",
            "(line 80,col 9)-(line 80,col 114)",
            "(line 81,col 9)-(line 81,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Jane Q. Public\";\n        p.age = 47;\n        p.smoker = false;\n        assertEquals(\"Jane Q. Public,47,false\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 19)",
            "(line 88,col 9)-(line 88,col 25)",
            "(line 89,col 9)-(line 89,col 154)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(\"3\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 75)",
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 98,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 69)",
            "(line 100,col 9)-(line 100,col 93)",
            "(line 101,col 9)-(line 101,col 102)",
            "(line 102,col 9)-(line 102,col 21)",
            "(line 103,col 9)-(line 103,col 83)",
            "(line 104,col 9)-(line 104,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 107,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 48)",
            "(line 109,col 9)-(line 109,col 87)",
            "(line 110,col 9)-(line 110,col 96)",
            "(line 111,col 9)-(line 111,col 21)",
            "(line 112,col 9)-(line 112,col 83)",
            "(line 113,col 9)-(line 113,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.SimpleToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 116,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 58)",
            "(line 118,col 9)-(line 118,col 95)",
            "(line 119,col 9)-(line 119,col 104)",
            "(line 120,col 9)-(line 120,col 21)",
            "(line 121,col 9)-(line 121,col 83)",
            "(line 122,col 9)-(line 122,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.ReflectionTestCycleA.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.ReflectionTestCycleB.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 13)-(line 50,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.HashCodeBuilderTest(java.lang.String)",
        "snippet": "    public HashCodeBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testConstructorEx1()",
        "snippet": "    public void testConstructorEx1() {\n        try {\n            new HashCodeBuilder(0, 0);\n\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 66,col 9)",
            "(line 67,col 9)-(line 67,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testConstructorEx2()",
        "snippet": "    public void testConstructorEx2() {\n        try {\n            new HashCodeBuilder(2, 2);\n\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 70,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 76,col 9)",
            "(line 77,col 9)-(line 77,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 13)-(line 84,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestObject)) {\n                return false;\n            }\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 87,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 89,col 13)-(line 91,col 13)",
            "(line 92,col 13)-(line 94,col 13)",
            "(line 95,col 13)-(line 95,col 44)",
            "(line 96,col 13)-(line 96,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 13)-(line 100,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 13)-(line 104,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 13)-(line 115,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestSubObject.TestSubObject(int, int, int)",
        "snippet": "        public TestSubObject(int a, int b, int t) {\n            super(a);\n            this.b = b;\n            this.t = t;\n        }",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 13)-(line 119,col 21)",
            "(line 120,col 13)-(line 120,col 23)",
            "(line 121,col 13)-(line 121,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestSubObject)) {\n                return false;\n            }\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 126,col 13)-(line 128,col 13)",
            "(line 129,col 13)-(line 131,col 13)",
            "(line 132,col 13)-(line 132,col 50)",
            "(line 133,col 13)-(line 133,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode()",
        "snippet": "    public void testReflectionHashCode() {\n        assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));\n        assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));\n    }",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 85)",
            "(line 139,col 9)-(line 139,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode()",
        "snippet": "    public void testReflectionHierarchyHashCode() {\n        assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));\n        assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));\n        assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,\n                0)));\n        assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(\n                123456, 7890, 0), true));\n    }",
        "begin_line": 142,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 99)",
            "(line 144,col 9)-(line 144,col 110)",
            "(line 145,col 9)-(line 146,col 21)",
            "(line 147,col 9)-(line 148,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx1()",
        "snippet": "    public void testReflectionHierarchyHashCodeEx1() {\n        try {\n            HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 151,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 156,col 9)",
            "(line 157,col 9)-(line 157,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx2()",
        "snippet": "    public void testReflectionHierarchyHashCodeEx2() {\n        try {\n            HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 166,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeEx1()",
        "snippet": "    public void testReflectionHashCodeEx1() {\n        try {\n            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 169,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 175,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeEx2()",
        "snippet": "    public void testReflectionHashCodeEx2() {\n        try {\n            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 178,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 183,col 9)",
            "(line 184,col 9)-(line 184,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeEx3()",
        "snippet": "    public void testReflectionHashCodeEx3() {\n        try {\n            HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 193,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testSuper()",
        "snippet": "    public void testSuper() {\n        Object obj = new Object();\n        assertEquals(17 * 37 + (19 * 41 + obj.hashCode()), new HashCodeBuilder(17, 37).appendSuper(\n                new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());\n    }",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 34)",
            "(line 198,col 9)-(line 199,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        Object obj = null;\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj = new Object();\n        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 202,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 26)",
            "(line 204,col 9)-(line 204,col 84)",
            "(line 205,col 9)-(line 205,col 27)",
            "(line 206,col 9)-(line 206,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testLong()",
        "snippet": "    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n    public void testLong() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append(\n                (long) 123456789L).toHashCode());\n    }",
        "begin_line": 209,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 90)",
            "(line 212,col 9)-(line 213,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testInt()",
        "snippet": "    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n    public void testInt() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n    }",
        "begin_line": 216,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 88)",
            "(line 219,col 9)-(line 219,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\n        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\n    }",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 90)",
            "(line 224,col 9)-(line 224,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\n        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\n    }",
        "begin_line": 227,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 89)",
            "(line 229,col 9)-(line 229,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\n        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n    }",
        "begin_line": 232,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 89)",
            "(line 234,col 9)-(line 234,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testDouble()",
        "snippet": "    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n    public void testDouble() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n        double d = 1234567.89;\n        long l = Double.doubleToLongBits(d);\n        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n    }",
        "begin_line": 237,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 92)",
            "(line 240,col 9)-(line 240,col 30)",
            "(line 241,col 9)-(line 241,col 44)",
            "(line 242,col 9)-(line 242,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloat()",
        "snippet": "    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n    public void testFloat() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n        float f = 1234.89f;\n        int i = Float.floatToIntBits(f);\n        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\n    }",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 91)",
            "(line 248,col 9)-(line 248,col 27)",
            "(line 249,col 9)-(line 249,col 40)",
            "(line 250,col 9)-(line 250,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\n        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\n    }",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 89)",
            "(line 255,col 9)-(line 255,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\n        Object[] obj = new Object[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj)\n                .toHashCode());\n    }",
        "begin_line": 258,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 96)",
            "(line 260,col 9)-(line 260,col 37)",
            "(line 261,col 9)-(line 261,col 91)",
            "(line 262,col 9)-(line 262,col 30)",
            "(line 263,col 9)-(line 263,col 111)",
            "(line 264,col 9)-(line 264,col 30)",
            "(line 265,col 9)-(line 266,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testObjectArrayAsObject()",
        "snippet": "    public void testObjectArrayAsObject() {\n        Object[] obj = new Object[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = new Object();\n        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(\n                (Object) obj).toHashCode());\n    }",
        "begin_line": 269,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 37)",
            "(line 271,col 9)-(line 271,col 100)",
            "(line 272,col 9)-(line 272,col 30)",
            "(line 273,col 9)-(line 273,col 120)",
            "(line 274,col 9)-(line 274,col 30)",
            "(line 275,col 9)-(line 276,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\n        long[] obj = new long[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5L;\n        int h1 = (int) (5L ^ (5L >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6L;\n        int h2 = (int) (6L ^ (6L >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 279,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 94)",
            "(line 281,col 9)-(line 281,col 33)",
            "(line 282,col 9)-(line 282,col 91)",
            "(line 283,col 9)-(line 283,col 20)",
            "(line 284,col 9)-(line 284,col 41)",
            "(line 285,col 9)-(line 285,col 96)",
            "(line 286,col 9)-(line 286,col 20)",
            "(line 287,col 9)-(line 287,col 41)",
            "(line 288,col 9)-(line 288,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testLongArrayAsObject()",
        "snippet": "    public void testLongArrayAsObject() {\n        long[] obj = new long[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5L;\n        int h1 = (int) (5L ^ (5L >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6L;\n        int h2 = (int) (6L ^ (6L >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 291,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 33)",
            "(line 293,col 9)-(line 293,col 100)",
            "(line 294,col 9)-(line 294,col 20)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 296,col 105)",
            "(line 297,col 9)-(line 297,col 20)",
            "(line 298,col 9)-(line 298,col 41)",
            "(line 299,col 9)-(line 299,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\n        int[] obj = new int[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 302,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 93)",
            "(line 304,col 9)-(line 304,col 31)",
            "(line 305,col 9)-(line 305,col 91)",
            "(line 306,col 9)-(line 306,col 19)",
            "(line 307,col 9)-(line 307,col 95)",
            "(line 308,col 9)-(line 308,col 19)",
            "(line 309,col 9)-(line 309,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testIntArrayAsObject()",
        "snippet": "    public void testIntArrayAsObject() {\n        int[] obj = new int[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 312,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 31)",
            "(line 314,col 9)-(line 314,col 100)",
            "(line 315,col 9)-(line 315,col 19)",
            "(line 316,col 9)-(line 316,col 104)",
            "(line 317,col 9)-(line 317,col 19)",
            "(line 318,col 9)-(line 318,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\n        short[] obj = new short[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = (short) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = (short) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 321,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 95)",
            "(line 323,col 9)-(line 323,col 35)",
            "(line 324,col 9)-(line 324,col 91)",
            "(line 325,col 9)-(line 325,col 27)",
            "(line 326,col 9)-(line 326,col 95)",
            "(line 327,col 9)-(line 327,col 27)",
            "(line 328,col 9)-(line 328,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testShortArrayAsObject()",
        "snippet": "    public void testShortArrayAsObject() {\n        short[] obj = new short[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = (short) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = (short) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 331,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 35)",
            "(line 333,col 9)-(line 333,col 100)",
            "(line 334,col 9)-(line 334,col 27)",
            "(line 335,col 9)-(line 335,col 104)",
            "(line 336,col 9)-(line 336,col 27)",
            "(line 337,col 9)-(line 337,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\n        char[] obj = new char[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = (char) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = (char) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 340,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 94)",
            "(line 342,col 9)-(line 342,col 33)",
            "(line 343,col 9)-(line 343,col 91)",
            "(line 344,col 9)-(line 344,col 26)",
            "(line 345,col 9)-(line 345,col 95)",
            "(line 346,col 9)-(line 346,col 26)",
            "(line 347,col 9)-(line 347,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArrayAsObject()",
        "snippet": "    public void testCharArrayAsObject() {\n        char[] obj = new char[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = (char) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = (char) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 350,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 33)",
            "(line 352,col 9)-(line 352,col 100)",
            "(line 353,col 9)-(line 353,col 26)",
            "(line 354,col 9)-(line 354,col 104)",
            "(line 355,col 9)-(line 355,col 26)",
            "(line 356,col 9)-(line 356,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\n        byte[] obj = new byte[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = (byte) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = (byte) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 359,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 94)",
            "(line 361,col 9)-(line 361,col 33)",
            "(line 362,col 9)-(line 362,col 91)",
            "(line 363,col 9)-(line 363,col 26)",
            "(line 364,col 9)-(line 364,col 95)",
            "(line 365,col 9)-(line 365,col 26)",
            "(line 366,col 9)-(line 366,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArrayAsObject()",
        "snippet": "    public void testByteArrayAsObject() {\n        byte[] obj = new byte[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = (byte) 5;\n        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = (byte) 6;\n        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 369,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 33)",
            "(line 371,col 9)-(line 371,col 100)",
            "(line 372,col 9)-(line 372,col 26)",
            "(line 373,col 9)-(line 373,col 104)",
            "(line 374,col 9)-(line 374,col 26)",
            "(line 375,col 9)-(line 375,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\n        double[] obj = new double[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5.4d;\n        long l1 = Double.doubleToLongBits(5.4d);\n        int h1 = (int) (l1 ^ (l1 >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6.3d;\n        long l2 = Double.doubleToLongBits(6.3d);\n        int h2 = (int) (l2 ^ (l2 >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 378,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 96)",
            "(line 380,col 9)-(line 380,col 37)",
            "(line 381,col 9)-(line 381,col 91)",
            "(line 382,col 9)-(line 382,col 22)",
            "(line 383,col 9)-(line 383,col 48)",
            "(line 384,col 9)-(line 384,col 41)",
            "(line 385,col 9)-(line 385,col 96)",
            "(line 386,col 9)-(line 386,col 22)",
            "(line 387,col 9)-(line 387,col 48)",
            "(line 388,col 9)-(line 388,col 41)",
            "(line 389,col 9)-(line 389,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testDoubleArrayAsObject()",
        "snippet": "    public void testDoubleArrayAsObject() {\n        double[] obj = new double[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5.4d;\n        long l1 = Double.doubleToLongBits(5.4d);\n        int h1 = (int) (l1 ^ (l1 >> 32));\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6.3d;\n        long l2 = Double.doubleToLongBits(6.3d);\n        int h2 = (int) (l2 ^ (l2 >> 32));\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 392,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 37)",
            "(line 394,col 9)-(line 394,col 100)",
            "(line 395,col 9)-(line 395,col 22)",
            "(line 396,col 9)-(line 396,col 48)",
            "(line 397,col 9)-(line 397,col 41)",
            "(line 398,col 9)-(line 398,col 105)",
            "(line 399,col 9)-(line 399,col 22)",
            "(line 400,col 9)-(line 400,col 48)",
            "(line 401,col 9)-(line 401,col 41)",
            "(line 402,col 9)-(line 402,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\n        float[] obj = new float[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = 5.4f;\n        int h1 = Float.floatToIntBits(5.4f);\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = 6.3f;\n        int h2 = Float.floatToIntBits(6.3f);\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 405,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 95)",
            "(line 407,col 9)-(line 407,col 35)",
            "(line 408,col 9)-(line 408,col 91)",
            "(line 409,col 9)-(line 409,col 22)",
            "(line 410,col 9)-(line 410,col 44)",
            "(line 411,col 9)-(line 411,col 96)",
            "(line 412,col 9)-(line 412,col 22)",
            "(line 413,col 9)-(line 413,col 44)",
            "(line 414,col 9)-(line 414,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testFloatArrayAsObject()",
        "snippet": "    public void testFloatArrayAsObject() {\n        float[] obj = new float[2];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = 5.4f;\n        int h1 = Float.floatToIntBits(5.4f);\n        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = 6.3f;\n        int h2 = Float.floatToIntBits(6.3f);\n        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 417,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 35)",
            "(line 419,col 9)-(line 419,col 100)",
            "(line 420,col 9)-(line 420,col 22)",
            "(line 421,col 9)-(line 421,col 44)",
            "(line 422,col 9)-(line 422,col 105)",
            "(line 423,col 9)-(line 423,col 22)",
            "(line 424,col 9)-(line 424,col 44)",
            "(line 425,col 9)-(line 425,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\n        boolean[] obj = new boolean[2];\n        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = true;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = false;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 428,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 97)",
            "(line 430,col 9)-(line 430,col 39)",
            "(line 431,col 9)-(line 431,col 99)",
            "(line 432,col 9)-(line 432,col 22)",
            "(line 433,col 9)-(line 433,col 99)",
            "(line 434,col 9)-(line 434,col 23)",
            "(line 435,col 9)-(line 435,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArrayAsObject()",
        "snippet": "    public void testBooleanArrayAsObject() {\n        boolean[] obj = new boolean[2];\n        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[0] = true;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n        obj[1] = false;\n        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n    }",
        "begin_line": 438,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 39)",
            "(line 440,col 9)-(line 440,col 108)",
            "(line 441,col 9)-(line 441,col 22)",
            "(line 442,col 9)-(line 442,col 108)",
            "(line 443,col 9)-(line 443,col 23)",
            "(line 444,col 9)-(line 444,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanMultiArray()",
        "snippet": "    public void testBooleanMultiArray() {\n        boolean[][] obj = new boolean[2][];\n        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new boolean[0];\n        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new boolean[1];\n        assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0] = new boolean[2];\n        assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[0][0] = true;\n        assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n        obj[1] = new boolean[1];\n        assertEquals((((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n    }",
        "begin_line": 447,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 43)",
            "(line 449,col 9)-(line 449,col 91)",
            "(line 450,col 9)-(line 450,col 32)",
            "(line 451,col 9)-(line 451,col 84)",
            "(line 452,col 9)-(line 452,col 32)",
            "(line 453,col 9)-(line 453,col 95)",
            "(line 454,col 9)-(line 454,col 32)",
            "(line 455,col 9)-(line 455,col 106)",
            "(line 456,col 9)-(line 456,col 25)",
            "(line 457,col 9)-(line 457,col 106)",
            "(line 458,col 9)-(line 458,col 32)",
            "(line 459,col 9)-(line 459,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields()",
        "snippet": "    public void testReflectionHashCodeExcludeFields() throws Exception {\n        TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);\n\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x));\n\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, (String[]) null));\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{}));\n        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{\"xxx\"}));\n\n        assertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{\"two\"}));\n        assertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[]{\"three\"}));\n\n        assertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[]{\"two\", \"three\"}));\n\n        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{\"one\", \"two\", \"three\"}));\n        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{\"one\", \"two\", \"three\", \"xxx\"}));\n    }",
        "begin_line": 462,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 83)",
            "(line 465,col 9)-(line 465,col 97)",
            "(line 467,col 9)-(line 467,col 114)",
            "(line 468,col 9)-(line 468,col 113)",
            "(line 469,col 9)-(line 469,col 118)",
            "(line 471,col 9)-(line 471,col 107)",
            "(line 472,col 9)-(line 472,col 109)",
            "(line 474,col 9)-(line 474,col 105)",
            "(line 476,col 9)-(line 476,col 101)",
            "(line 477,col 9)-(line 477,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int)",
        "snippet": "        public TestObjectWithMultipleFields(int one, int two, int three) {\n            this.one = one;\n            this.two = two;\n            this.three = three;\n        }",
        "begin_line": 490,
        "end_line": 494,
        "comment": "",
        "child_ranges": [
            "(line 491,col 13)-(line 491,col 27)",
            "(line 492,col 13)-(line 492,col 27)",
            "(line 493,col 13)-(line 493,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle()",
        "snippet": "    public void testReflectionObjectCycle() {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        \n        // Used to caused:\n        // java.lang.StackOverflowError\n        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)\n        // at java.lang.Class.getDeclaredFields(Class.java:992)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n        // at\n        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n        // at\n        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\n        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n\n        a.hashCode();\n        b.hashCode();\n    }",
        "begin_line": 500,
        "end_line": 525,
        "comment": "\n     * Test Objects pointing to each other.\n     ",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 60)",
            "(line 502,col 9)-(line 502,col 60)",
            "(line 503,col 9)-(line 503,col 16)",
            "(line 504,col 9)-(line 504,col 16)",
            "(line 523,col 9)-(line 523,col 21)",
            "(line 524,col 9)-(line 524,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testToHashCodeEqualsHashCode()",
        "snippet": "    public void testToHashCodeEqualsHashCode() {\n        HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a');\n        assertEquals(\"hashCode() is no longer returning the same value as toHashCode() - see LANG-520\", \n                     hcb.toHashCode(), hcb.hashCode());\n    }",
        "begin_line": 530,
        "end_line": 534,
        "comment": "\n     * Ensures LANG-520 remains true\n     ",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 91)",
            "(line 532,col 9)-(line 533,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.DefaultToStringStyleTest(java.lang.String)",
        "snippet": "    public DefaultToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 22)",
            "(line 44,col 9)-(line 44,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 25)",
            "(line 50,col 9)-(line 50,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 105)",
            "(line 61,col 9)-(line 61,col 117)",
            "(line 63,col 9)-(line 63,col 133)",
            "(line 64,col 9)-(line 64,col 146)",
            "(line 65,col 9)-(line 65,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 68,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 36)",
            "(line 70,col 9)-(line 70,col 36)",
            "(line 71,col 9)-(line 71,col 103)",
            "(line 72,col 9)-(line 72,col 87)",
            "(line 73,col 9)-(line 73,col 110)",
            "(line 74,col 9)-(line 74,col 94)",
            "(line 75,col 9)-(line 75,col 114)",
            "(line 76,col 9)-(line 76,col 109)",
            "(line 77,col 9)-(line 77,col 129)",
            "(line 78,col 9)-(line 78,col 122)",
            "(line 79,col 9)-(line 79,col 135)",
            "(line 80,col 9)-(line 80,col 128)",
            "(line 81,col 9)-(line 81,col 128)",
            "(line 82,col 9)-(line 82,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"John Doe\";\n        p.age = 33;\n        p.smoker = false;\n        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n        assertEquals(pBaseStr + \"[name=John Doe,age=33,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 32)",
            "(line 87,col 9)-(line 87,col 28)",
            "(line 88,col 9)-(line 88,col 19)",
            "(line 89,col 9)-(line 89,col 25)",
            "(line 90,col 9)-(line 90,col 105)",
            "(line 91,col 9)-(line 91,col 177)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 87)",
            "(line 96,col 9)-(line 96,col 94)",
            "(line 97,col 9)-(line 97,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 105)",
            "(line 103,col 9)-(line 103,col 114)",
            "(line 104,col 9)-(line 104,col 21)",
            "(line 105,col 9)-(line 105,col 95)",
            "(line 106,col 9)-(line 106,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 109,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 48)",
            "(line 111,col 9)-(line 111,col 99)",
            "(line 112,col 9)-(line 112,col 108)",
            "(line 113,col 9)-(line 113,col 21)",
            "(line 114,col 9)-(line 114,col 95)",
            "(line 115,col 9)-(line 115,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.DefaultToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 58)",
            "(line 120,col 9)-(line 120,col 107)",
            "(line 121,col 9)-(line 121,col 116)",
            "(line 122,col 9)-(line 122,col 21)",
            "(line 123,col 9)-(line 123,col 95)",
            "(line 124,col 9)-(line 124,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.CompareToBuilderTest(java.lang.String)",
        "snippet": "    public CompareToBuilderTest(String name) {\n        super(name);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestObject)) {\n                return false;\n            }\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 43,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 47,col 13)",
            "(line 48,col 13)-(line 50,col 13)",
            "(line 51,col 13)-(line 51,col 44)",
            "(line 52,col 13)-(line 52,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestObject.compareTo(org.apache.commons.lang3.builder.CompareToBuilderTest.TestObject)",
        "snippet": "        public int compareTo(TestObject rhs) {\n            return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;\n        }",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestSubObject.TestSubObject(int, int)",
        "snippet": "        public TestSubObject(int a, int b) {\n            super(a);\n            this.b = b;\n        }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 73,col 13)-(line 73,col 21)",
            "(line 74,col 13)-(line 74,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (!(o instanceof TestSubObject)) {\n                return false;\n            }\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 76,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 78,col 13)-(line 80,col 13)",
            "(line 81,col 13)-(line 83,col 13)",
            "(line 84,col 13)-(line 84,col 50)",
            "(line 85,col 13)-(line 85,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.TestTransientSubObject.TestTransientSubObject(int, int)",
        "snippet": "        public TestTransientSubObject(int a, int t) {\n            super(a);\n            this.t = t;\n        }",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 93,col 13)-(line 93,col 21)",
            "(line 94,col 13)-(line 94,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompare()",
        "snippet": "    public void testReflectionCompare() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(4);\n        assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0);\n        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0);\n        o2.setA(5);\n        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);\n        assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);\n    }",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 42)",
            "(line 100,col 9)-(line 100,col 42)",
            "(line 101,col 9)-(line 101,col 68)",
            "(line 102,col 9)-(line 102,col 68)",
            "(line 103,col 9)-(line 103,col 19)",
            "(line 104,col 9)-(line 104,col 67)",
            "(line 105,col 9)-(line 105,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompareEx1()",
        "snippet": "    public void testReflectionCompareEx1() {\n        TestObject o1 = new TestObject(4);\n        try {\n            CompareToBuilder.reflectionCompare(o1, null);\n        } catch (NullPointerException ex) {\n            return;\n        }\n        fail();\n    }",
        "begin_line": 108,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 42)",
            "(line 110,col 9)-(line 114,col 9)",
            "(line 115,col 9)-(line 115,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompareEx2()",
        "snippet": "    public void testReflectionCompareEx2() {\n        TestObject o1 = new TestObject(4);\n        Object o2 = new Object();\n        try {\n            CompareToBuilder.reflectionCompare(o1, o2);\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 42)",
            "(line 120,col 9)-(line 120,col 33)",
            "(line 121,col 9)-(line 124,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare()",
        "snippet": "    public void testReflectionHierarchyCompare() {\n        testReflectionHierarchyCompare(false, null);\n    }",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields()",
        "snippet": "    public void testReflectionHierarchyCompareExcludeFields() {\n        String[] excludeFields = new String[] { \"b\" };\n        testReflectionHierarchyCompare(true, excludeFields);\n        \n        TestSubObject x;\n        TestSubObject y;\n        TestSubObject z;\n        \n        x = new TestSubObject(1, 1);\n        y = new TestSubObject(2, 1);\n        z = new TestSubObject(3, 1);\n        assertXYZCompareOrder(x, y, z, true, excludeFields);\n\n        x = new TestSubObject(1, 3);\n        y = new TestSubObject(2, 2);\n        z = new TestSubObject(3, 1);\n        assertXYZCompareOrder(x, y, z, true, excludeFields);\n    }",
        "begin_line": 131,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 54)",
            "(line 133,col 9)-(line 133,col 60)",
            "(line 135,col 9)-(line 135,col 24)",
            "(line 136,col 9)-(line 136,col 24)",
            "(line 137,col 9)-(line 137,col 24)",
            "(line 139,col 9)-(line 139,col 36)",
            "(line 140,col 9)-(line 140,col 36)",
            "(line 141,col 9)-(line 141,col 36)",
            "(line 142,col 9)-(line 142,col 60)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 36)",
            "(line 146,col 9)-(line 146,col 36)",
            "(line 147,col 9)-(line 147,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients()",
        "snippet": "    public void testReflectionHierarchyCompareTransients() {\n        testReflectionHierarchyCompare(true, null);\n\n        TestTransientSubObject x;\n        TestTransientSubObject y;\n        TestTransientSubObject z;\n\n        x = new TestTransientSubObject(1, 1);\n        y = new TestTransientSubObject(2, 2);\n        z = new TestTransientSubObject(3, 3);\n        assertXYZCompareOrder(x, y, z, true, null);\n        \n        x = new TestTransientSubObject(1, 1);\n        y = new TestTransientSubObject(1, 2);\n        z = new TestTransientSubObject(1, 3);\n        assertXYZCompareOrder(x, y, z, true, null);  \n    }",
        "begin_line": 150,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 51)",
            "(line 153,col 9)-(line 153,col 33)",
            "(line 154,col 9)-(line 154,col 33)",
            "(line 155,col 9)-(line 155,col 33)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 158,col 45)",
            "(line 159,col 9)-(line 159,col 45)",
            "(line 160,col 9)-(line 160,col 51)",
            "(line 162,col 9)-(line 162,col 45)",
            "(line 163,col 9)-(line 163,col 45)",
            "(line 164,col 9)-(line 164,col 45)",
            "(line 165,col 9)-(line 165,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.assertXYZCompareOrder(java.lang.Object, java.lang.Object, java.lang.Object, boolean, java.lang.String[])",
        "snippet": "    private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n        assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));\n        assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));\n        assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));\n        \n        assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));\n        assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));\n        assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));\n        \n        assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));\n        assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));\n        assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));\n    }",
        "begin_line": 168,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 103)",
            "(line 170,col 9)-(line 170,col 103)",
            "(line 171,col 9)-(line 171,col 103)",
            "(line 173,col 9)-(line 173,col 102)",
            "(line 174,col 9)-(line 174,col 102)",
            "(line 175,col 9)-(line 175,col 102)",
            "(line 177,col 9)-(line 177,col 102)",
            "(line 178,col 9)-(line 178,col 102)",
            "(line 179,col 9)-(line 179,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare(boolean, java.lang.String[])",
        "snippet": "    public void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {\n        TestObject to1 = new TestObject(1);\n        TestObject to2 = new TestObject(2);\n        TestObject to3 = new TestObject(3);\n        TestSubObject tso1 = new TestSubObject(1, 1);\n        TestSubObject tso2 = new TestSubObject(2, 2);\n        TestSubObject tso3 = new TestSubObject(3, 3);\n        \n        assertReflectionCompareContract(to1, to1, to1, false, excludeFields);\n        assertReflectionCompareContract(to1, to2, to3, false, excludeFields);\n        assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);\n        assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);\n        assertReflectionCompareContract(\"1\", \"2\", \"3\", false, excludeFields);\n        \n        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));\n        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));\n\n        // root class\n        assertXYZCompareOrder(to1, to2, to3, true, null);\n        // subclass  \n        assertXYZCompareOrder(tso1, tso2, tso3, true, null);  \n    }",
        "begin_line": 182,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 43)",
            "(line 184,col 9)-(line 184,col 43)",
            "(line 185,col 9)-(line 185,col 43)",
            "(line 186,col 9)-(line 186,col 53)",
            "(line 187,col 9)-(line 187,col 53)",
            "(line 188,col 9)-(line 188,col 53)",
            "(line 190,col 9)-(line 190,col 77)",
            "(line 191,col 9)-(line 191,col 77)",
            "(line 192,col 9)-(line 192,col 80)",
            "(line 193,col 9)-(line 193,col 80)",
            "(line 194,col 9)-(line 194,col 77)",
            "(line 196,col 9)-(line 196,col 107)",
            "(line 197,col 9)-(line 197,col 107)",
            "(line 200,col 9)-(line 200,col 57)",
            "(line 202,col 9)-(line 202,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.assertReflectionCompareContract(java.lang.Object, java.lang.Object, java.lang.Object, boolean, java.lang.String[])",
        "snippet": "    public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n\n        // signum\n        assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields));\n        \n        // transitive\n        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) > 0 \n                && CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields) > 0){\n            assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);\n        }\n        \n        // un-named\n        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) == 0) {\n            assertTrue(reflectionCompareSignum(x, z, testTransients, excludeFields) == -reflectionCompareSignum(y, z, testTransients, excludeFields));\n        }\n        \n        // strongly recommended but not strictly required\n        assertTrue((CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 ) == EqualsBuilder.reflectionEquals(x, y, testTransients));\n    }",
        "begin_line": 214,
        "end_line": 232,
        "comment": "\n     * See \"Effective Java\" under \"Consider Implementing Comparable\".\n     *  \n     * @param x an object to compare \n     * @param y an object to compare\n     * @param z an object to compare\n     * @param testTransients Whether to include transients in the comparison\n     * @param excludeFields fields to exclude\n     ",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 146)",
            "(line 220,col 9)-(line 223,col 9)",
            "(line 226,col 9)-(line 228,col 9)",
            "(line 231,col 9)-(line 231,col 140)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.reflectionCompareSignum(java.lang.Object, java.lang.Object, boolean, java.lang.String[])",
        "snippet": "    private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n        return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();\n    }",
        "begin_line": 244,
        "end_line": 246,
        "comment": "\n     * Returns the signum of the result of comparing x and y with\n     * <code>CompareToBuilder.reflectionCompare</code>\n     * \n     * @param lhs The \"left-hand-side\" of the comparison.\n     * @param rhs The \"right-hand-side\" of the comparison.\n     * @param testTransients Whether to include transients in the comparison\n     * @param excludeFields fields to exclude\n     * @return int The signum\n     ",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);\n        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);\n        \n        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);\n    }",
        "begin_line": 248,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 42)",
            "(line 250,col 9)-(line 250,col 42)",
            "(line 251,col 9)-(line 251,col 93)",
            "(line 252,col 9)-(line 252,col 92)",
            "(line 253,col 9)-(line 253,col 92)",
            "(line 255,col 9)-(line 255,col 93)",
            "(line 256,col 9)-(line 256,col 93)",
            "(line 258,col 9)-(line 258,col 92)",
            "(line 259,col 9)-(line 259,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testObject()",
        "snippet": "    public void testObject() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(4);\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0);\n        o2.setA(5);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);\n    }",
        "begin_line": 262,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 42)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 265,col 9)-(line 265,col 78)",
            "(line 266,col 9)-(line 266,col 78)",
            "(line 267,col 9)-(line 267,col 19)",
            "(line 268,col 9)-(line 268,col 77)",
            "(line 269,col 9)-(line 269,col 77)",
            "(line 271,col 9)-(line 271,col 79)",
            "(line 272,col 9)-(line 272,col 100)",
            "(line 273,col 9)-(line 273,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectEx2()",
        "snippet": "    public void testObjectEx2() {\n        TestObject o1 = new TestObject(4);\n        Object o2 = new Object();\n        try {\n            new CompareToBuilder().append(o1, o2);\n            fail();\n        } catch (ClassCastException ex) {}\n    }",
        "begin_line": 276,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 42)",
            "(line 278,col 9)-(line 278,col 33)",
            "(line 279,col 9)-(line 282,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectComparator()",
        "snippet": "    public void testObjectComparator() {\n        String o1 = \"Fred\";\n        String o2 = \"Fred\";\n        assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        o2 = \"FRED\";\n        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        o2 = \"FREDA\";\n        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n    }",
        "begin_line": 285,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 27)",
            "(line 287,col 9)-(line 287,col 27)",
            "(line 288,col 9)-(line 288,col 109)",
            "(line 289,col 9)-(line 289,col 109)",
            "(line 290,col 9)-(line 290,col 20)",
            "(line 291,col 9)-(line 291,col 109)",
            "(line 292,col 9)-(line 292,col 109)",
            "(line 293,col 9)-(line 293,col 21)",
            "(line 294,col 9)-(line 294,col 108)",
            "(line 295,col 9)-(line 295,col 108)",
            "(line 297,col 9)-(line 297,col 110)",
            "(line 298,col 9)-(line 298,col 131)",
            "(line 299,col 9)-(line 299,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectComparatorNull()",
        "snippet": "    public void testObjectComparatorNull() {\n        String o1 = \"Fred\";\n        String o2 = \"Fred\";\n        assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0);\n        o2 = \"Zebra\";\n        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);\n        \n        assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);\n    }",
        "begin_line": 302,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 27)",
            "(line 304,col 9)-(line 304,col 27)",
            "(line 305,col 9)-(line 305,col 84)",
            "(line 306,col 9)-(line 306,col 84)",
            "(line 307,col 9)-(line 307,col 21)",
            "(line 308,col 9)-(line 308,col 83)",
            "(line 309,col 9)-(line 309,col 83)",
            "(line 311,col 9)-(line 311,col 85)",
            "(line 312,col 9)-(line 312,col 106)",
            "(line 313,col 9)-(line 313,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testLong()",
        "snippet": "    public void testLong() {\n        long o1 = 1L;\n        long o2 = 2L;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 316,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 21)",
            "(line 318,col 9)-(line 318,col 21)",
            "(line 319,col 9)-(line 319,col 78)",
            "(line 320,col 9)-(line 320,col 77)",
            "(line 321,col 9)-(line 321,col 77)",
            "(line 322,col 9)-(line 322,col 89)",
            "(line 323,col 9)-(line 323,col 89)",
            "(line 324,col 9)-(line 324,col 89)",
            "(line 325,col 9)-(line 325,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testInt()",
        "snippet": "    public void testInt() {\n        int o1 = 1;\n        int o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 328,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 19)",
            "(line 330,col 9)-(line 330,col 19)",
            "(line 331,col 9)-(line 331,col 78)",
            "(line 332,col 9)-(line 332,col 77)",
            "(line 333,col 9)-(line 333,col 77)",
            "(line 334,col 9)-(line 334,col 92)",
            "(line 335,col 9)-(line 335,col 92)",
            "(line 336,col 9)-(line 336,col 92)",
            "(line 337,col 9)-(line 337,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testShort()",
        "snippet": "    public void testShort() {\n        short o1 = 1;\n        short o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 340,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 21)",
            "(line 342,col 9)-(line 342,col 21)",
            "(line 343,col 9)-(line 343,col 78)",
            "(line 344,col 9)-(line 344,col 77)",
            "(line 345,col 9)-(line 345,col 77)",
            "(line 346,col 9)-(line 346,col 90)",
            "(line 347,col 9)-(line 347,col 90)",
            "(line 348,col 9)-(line 348,col 90)",
            "(line 349,col 9)-(line 349,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testChar()",
        "snippet": "    public void testChar() {\n        char o1 = 1;\n        char o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 352,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 20)",
            "(line 354,col 9)-(line 354,col 20)",
            "(line 355,col 9)-(line 355,col 78)",
            "(line 356,col 9)-(line 356,col 77)",
            "(line 357,col 9)-(line 357,col 77)",
            "(line 358,col 9)-(line 358,col 94)",
            "(line 359,col 9)-(line 359,col 94)",
            "(line 360,col 9)-(line 360,col 94)",
            "(line 361,col 9)-(line 361,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testByte()",
        "snippet": "    public void testByte() {\n        byte o1 = 1;\n        byte o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);\n    }",
        "begin_line": 364,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 20)",
            "(line 366,col 9)-(line 366,col 20)",
            "(line 367,col 9)-(line 367,col 78)",
            "(line 368,col 9)-(line 368,col 77)",
            "(line 369,col 9)-(line 369,col 77)",
            "(line 370,col 9)-(line 370,col 89)",
            "(line 371,col 9)-(line 371,col 89)",
            "(line 372,col 9)-(line 372,col 89)",
            "(line 373,col 9)-(line 373,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testDouble()",
        "snippet": "    public void testDouble() {\n        double o1 = 1;\n        double o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n    }",
        "begin_line": 376,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 22)",
            "(line 378,col 9)-(line 378,col 22)",
            "(line 379,col 9)-(line 379,col 78)",
            "(line 380,col 9)-(line 380,col 77)",
            "(line 381,col 9)-(line 381,col 77)",
            "(line 382,col 9)-(line 382,col 91)",
            "(line 383,col 9)-(line 383,col 91)",
            "(line 384,col 9)-(line 384,col 91)",
            "(line 385,col 9)-(line 385,col 91)",
            "(line 386,col 9)-(line 386,col 94)",
            "(line 387,col 9)-(line 387,col 99)",
            "(line 388,col 9)-(line 388,col 113)",
            "(line 389,col 9)-(line 389,col 113)",
            "(line 390,col 9)-(line 390,col 85)",
            "(line 391,col 9)-(line 391,col 85)",
            "(line 392,col 9)-(line 392,col 80)",
            "(line 393,col 9)-(line 393,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testFloat()",
        "snippet": "    public void testFloat() {\n        float o1 = 1;\n        float o2 = 2;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n    }",
        "begin_line": 396,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 397,col 9)-(line 397,col 21)",
            "(line 398,col 9)-(line 398,col 21)",
            "(line 399,col 9)-(line 399,col 78)",
            "(line 400,col 9)-(line 400,col 77)",
            "(line 401,col 9)-(line 401,col 77)",
            "(line 402,col 9)-(line 402,col 90)",
            "(line 403,col 9)-(line 403,col 90)",
            "(line 404,col 9)-(line 404,col 90)",
            "(line 405,col 9)-(line 405,col 90)",
            "(line 406,col 9)-(line 406,col 92)",
            "(line 407,col 9)-(line 407,col 97)",
            "(line 408,col 9)-(line 408,col 111)",
            "(line 409,col 9)-(line 409,col 111)",
            "(line 410,col 9)-(line 410,col 84)",
            "(line 411,col 9)-(line 411,col 84)",
            "(line 412,col 9)-(line 412,col 80)",
            "(line 413,col 9)-(line 413,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testBoolean()",
        "snippet": "    public void testBoolean() {\n        boolean o1 = true;\n        boolean o2 = false;\n        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);\n    }",
        "begin_line": 416,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 26)",
            "(line 418,col 9)-(line 418,col 27)",
            "(line 419,col 9)-(line 419,col 78)",
            "(line 420,col 9)-(line 420,col 78)",
            "(line 421,col 9)-(line 421,col 77)",
            "(line 422,col 9)-(line 422,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        TestObject[] obj1 = new TestObject[2];\n        obj1[0] = new TestObject(4);\n        obj1[1] = new TestObject(5);\n        TestObject[] obj2 = new TestObject[2];\n        obj2[0] = new TestObject(4);\n        obj2[1] = new TestObject(5);\n        TestObject[] obj3 = new TestObject[3];\n        obj3[0] = new TestObject(4);\n        obj3[1] = new TestObject(5);\n        obj3[2] = new TestObject(6);\n        \n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n        \n        obj1[1] = new TestObject(7);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 425,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 46)",
            "(line 427,col 9)-(line 427,col 36)",
            "(line 428,col 9)-(line 428,col 36)",
            "(line 429,col 9)-(line 429,col 46)",
            "(line 430,col 9)-(line 430,col 36)",
            "(line 431,col 9)-(line 431,col 36)",
            "(line 432,col 9)-(line 432,col 46)",
            "(line 433,col 9)-(line 433,col 36)",
            "(line 434,col 9)-(line 434,col 36)",
            "(line 435,col 9)-(line 435,col 36)",
            "(line 437,col 9)-(line 437,col 82)",
            "(line 438,col 9)-(line 438,col 82)",
            "(line 439,col 9)-(line 439,col 81)",
            "(line 440,col 9)-(line 440,col 81)",
            "(line 442,col 9)-(line 442,col 36)",
            "(line 443,col 9)-(line 443,col 81)",
            "(line 444,col 9)-(line 444,col 81)",
            "(line 446,col 9)-(line 446,col 81)",
            "(line 447,col 9)-(line 447,col 104)",
            "(line 448,col 9)-(line 448,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] obj1 = new long[2];\n        obj1[0] = 5L;\n        obj1[1] = 6L;\n        long[] obj2 = new long[2];\n        obj2[0] = 5L;\n        obj2[1] = 6L;\n        long[] obj3 = new long[3];\n        obj3[0] = 5L;\n        obj3[1] = 6L;\n        obj3[2] = 7L;\n        \n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 451,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 34)",
            "(line 453,col 9)-(line 453,col 21)",
            "(line 454,col 9)-(line 454,col 21)",
            "(line 455,col 9)-(line 455,col 34)",
            "(line 456,col 9)-(line 456,col 21)",
            "(line 457,col 9)-(line 457,col 21)",
            "(line 458,col 9)-(line 458,col 34)",
            "(line 459,col 9)-(line 459,col 21)",
            "(line 460,col 9)-(line 460,col 21)",
            "(line 461,col 9)-(line 461,col 21)",
            "(line 463,col 9)-(line 463,col 82)",
            "(line 464,col 9)-(line 464,col 82)",
            "(line 465,col 9)-(line 465,col 81)",
            "(line 466,col 9)-(line 466,col 81)",
            "(line 468,col 9)-(line 468,col 20)",
            "(line 469,col 9)-(line 469,col 81)",
            "(line 470,col 9)-(line 470,col 81)",
            "(line 472,col 9)-(line 472,col 81)",
            "(line 473,col 9)-(line 473,col 100)",
            "(line 474,col 9)-(line 474,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArray()",
        "snippet": "    public void testIntArray() {\n        int[] obj1 = new int[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        int[] obj2 = new int[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        int[] obj3 = new int[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 477,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 478,col 9)-(line 478,col 32)",
            "(line 479,col 9)-(line 479,col 20)",
            "(line 480,col 9)-(line 480,col 20)",
            "(line 481,col 9)-(line 481,col 32)",
            "(line 482,col 9)-(line 482,col 20)",
            "(line 483,col 9)-(line 483,col 20)",
            "(line 484,col 9)-(line 484,col 32)",
            "(line 485,col 9)-(line 485,col 20)",
            "(line 486,col 9)-(line 486,col 20)",
            "(line 487,col 9)-(line 487,col 20)",
            "(line 489,col 9)-(line 489,col 82)",
            "(line 490,col 9)-(line 490,col 82)",
            "(line 491,col 9)-(line 491,col 81)",
            "(line 492,col 9)-(line 492,col 81)",
            "(line 494,col 9)-(line 494,col 20)",
            "(line 495,col 9)-(line 495,col 81)",
            "(line 496,col 9)-(line 496,col 81)",
            "(line 498,col 9)-(line 498,col 81)",
            "(line 499,col 9)-(line 499,col 98)",
            "(line 500,col 9)-(line 500,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArray()",
        "snippet": "    public void testShortArray() {\n        short[] obj1 = new short[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        short[] obj2 = new short[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        short[] obj3 = new short[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 503,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 504,col 9)-(line 504,col 36)",
            "(line 505,col 9)-(line 505,col 20)",
            "(line 506,col 9)-(line 506,col 20)",
            "(line 507,col 9)-(line 507,col 36)",
            "(line 508,col 9)-(line 508,col 20)",
            "(line 509,col 9)-(line 509,col 20)",
            "(line 510,col 9)-(line 510,col 36)",
            "(line 511,col 9)-(line 511,col 20)",
            "(line 512,col 9)-(line 512,col 20)",
            "(line 513,col 9)-(line 513,col 20)",
            "(line 515,col 9)-(line 515,col 82)",
            "(line 516,col 9)-(line 516,col 82)",
            "(line 517,col 9)-(line 517,col 81)",
            "(line 518,col 9)-(line 518,col 81)",
            "(line 520,col 9)-(line 520,col 20)",
            "(line 521,col 9)-(line 521,col 81)",
            "(line 522,col 9)-(line 522,col 81)",
            "(line 524,col 9)-(line 524,col 81)",
            "(line 525,col 9)-(line 525,col 102)",
            "(line 526,col 9)-(line 526,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testCharArray()",
        "snippet": "    public void testCharArray() {\n        char[] obj1 = new char[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        char[] obj2 = new char[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        char[] obj3 = new char[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 529,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 34)",
            "(line 531,col 9)-(line 531,col 20)",
            "(line 532,col 9)-(line 532,col 20)",
            "(line 533,col 9)-(line 533,col 34)",
            "(line 534,col 9)-(line 534,col 20)",
            "(line 535,col 9)-(line 535,col 20)",
            "(line 536,col 9)-(line 536,col 34)",
            "(line 537,col 9)-(line 537,col 20)",
            "(line 538,col 9)-(line 538,col 20)",
            "(line 539,col 9)-(line 539,col 20)",
            "(line 541,col 9)-(line 541,col 82)",
            "(line 542,col 9)-(line 542,col 82)",
            "(line 543,col 9)-(line 543,col 81)",
            "(line 544,col 9)-(line 544,col 81)",
            "(line 546,col 9)-(line 546,col 20)",
            "(line 547,col 9)-(line 547,col 81)",
            "(line 548,col 9)-(line 548,col 81)",
            "(line 550,col 9)-(line 550,col 81)",
            "(line 551,col 9)-(line 551,col 100)",
            "(line 552,col 9)-(line 552,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testByteArray()",
        "snippet": "    public void testByteArray() {\n        byte[] obj1 = new byte[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        byte[] obj2 = new byte[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        byte[] obj3 = new byte[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 555,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 556,col 9)-(line 556,col 34)",
            "(line 557,col 9)-(line 557,col 20)",
            "(line 558,col 9)-(line 558,col 20)",
            "(line 559,col 9)-(line 559,col 34)",
            "(line 560,col 9)-(line 560,col 20)",
            "(line 561,col 9)-(line 561,col 20)",
            "(line 562,col 9)-(line 562,col 34)",
            "(line 563,col 9)-(line 563,col 20)",
            "(line 564,col 9)-(line 564,col 20)",
            "(line 565,col 9)-(line 565,col 20)",
            "(line 567,col 9)-(line 567,col 82)",
            "(line 568,col 9)-(line 568,col 82)",
            "(line 569,col 9)-(line 569,col 81)",
            "(line 570,col 9)-(line 570,col 81)",
            "(line 572,col 9)-(line 572,col 20)",
            "(line 573,col 9)-(line 573,col 81)",
            "(line 574,col 9)-(line 574,col 81)",
            "(line 576,col 9)-(line 576,col 81)",
            "(line 577,col 9)-(line 577,col 100)",
            "(line 578,col 9)-(line 578,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testDoubleArray()",
        "snippet": "    public void testDoubleArray() {\n        double[] obj1 = new double[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        double[] obj2 = new double[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        double[] obj3 = new double[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 581,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 582,col 9)-(line 582,col 38)",
            "(line 583,col 9)-(line 583,col 20)",
            "(line 584,col 9)-(line 584,col 20)",
            "(line 585,col 9)-(line 585,col 38)",
            "(line 586,col 9)-(line 586,col 20)",
            "(line 587,col 9)-(line 587,col 20)",
            "(line 588,col 9)-(line 588,col 38)",
            "(line 589,col 9)-(line 589,col 20)",
            "(line 590,col 9)-(line 590,col 20)",
            "(line 591,col 9)-(line 591,col 20)",
            "(line 593,col 9)-(line 593,col 82)",
            "(line 594,col 9)-(line 594,col 82)",
            "(line 595,col 9)-(line 595,col 81)",
            "(line 596,col 9)-(line 596,col 81)",
            "(line 598,col 9)-(line 598,col 20)",
            "(line 599,col 9)-(line 599,col 81)",
            "(line 600,col 9)-(line 600,col 81)",
            "(line 602,col 9)-(line 602,col 81)",
            "(line 603,col 9)-(line 603,col 104)",
            "(line 604,col 9)-(line 604,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testFloatArray()",
        "snippet": "    public void testFloatArray() {\n        float[] obj1 = new float[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        float[] obj2 = new float[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        float[] obj3 = new float[3];\n        obj3[0] = 5;\n        obj3[1] = 6;\n        obj3[2] = 7;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 607,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 608,col 9)-(line 608,col 36)",
            "(line 609,col 9)-(line 609,col 20)",
            "(line 610,col 9)-(line 610,col 20)",
            "(line 611,col 9)-(line 611,col 36)",
            "(line 612,col 9)-(line 612,col 20)",
            "(line 613,col 9)-(line 613,col 20)",
            "(line 614,col 9)-(line 614,col 36)",
            "(line 615,col 9)-(line 615,col 20)",
            "(line 616,col 9)-(line 616,col 20)",
            "(line 617,col 9)-(line 617,col 20)",
            "(line 619,col 9)-(line 619,col 82)",
            "(line 620,col 9)-(line 620,col 82)",
            "(line 621,col 9)-(line 621,col 81)",
            "(line 622,col 9)-(line 622,col 81)",
            "(line 624,col 9)-(line 624,col 20)",
            "(line 625,col 9)-(line 625,col 81)",
            "(line 626,col 9)-(line 626,col 81)",
            "(line 628,col 9)-(line 628,col 81)",
            "(line 629,col 9)-(line 629,col 102)",
            "(line 630,col 9)-(line 630,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArray()",
        "snippet": "    public void testBooleanArray() {\n        boolean[] obj1 = new boolean[2];\n        obj1[0] = true;\n        obj1[1] = false;\n        boolean[] obj2 = new boolean[2];\n        obj2[0] = true;\n        obj2[1] = false;\n        boolean[] obj3 = new boolean[3];\n        obj3[0] = true;\n        obj3[1] = false;\n        obj3[2] = true;\n\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        obj1[1] = true;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n\n        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n    }",
        "begin_line": 633,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 634,col 9)-(line 634,col 40)",
            "(line 635,col 9)-(line 635,col 23)",
            "(line 636,col 9)-(line 636,col 24)",
            "(line 637,col 9)-(line 637,col 40)",
            "(line 638,col 9)-(line 638,col 23)",
            "(line 639,col 9)-(line 639,col 24)",
            "(line 640,col 9)-(line 640,col 40)",
            "(line 641,col 9)-(line 641,col 23)",
            "(line 642,col 9)-(line 642,col 24)",
            "(line 643,col 9)-(line 643,col 23)",
            "(line 645,col 9)-(line 645,col 82)",
            "(line 646,col 9)-(line 646,col 82)",
            "(line 647,col 9)-(line 647,col 81)",
            "(line 648,col 9)-(line 648,col 81)",
            "(line 650,col 9)-(line 650,col 23)",
            "(line 651,col 9)-(line 651,col 81)",
            "(line 652,col 9)-(line 652,col 81)",
            "(line 654,col 9)-(line 654,col 81)",
            "(line 655,col 9)-(line 655,col 106)",
            "(line 656,col 9)-(line 656,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiLongArray()",
        "snippet": "    public void testMultiLongArray() {\n        long[][] array1 = new long[2][2];\n        long[][] array2 = new long[2][2];\n        long[][] array3 = new long[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n                array3[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 659,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 660,col 9)-(line 660,col 41)",
            "(line 661,col 9)-(line 661,col 41)",
            "(line 662,col 9)-(line 662,col 41)",
            "(line 663,col 9)-(line 669,col 9)",
            "(line 670,col 9)-(line 670,col 27)",
            "(line 671,col 9)-(line 671,col 27)",
            "(line 673,col 9)-(line 673,col 86)",
            "(line 674,col 9)-(line 674,col 86)",
            "(line 675,col 9)-(line 675,col 85)",
            "(line 676,col 9)-(line 676,col 85)",
            "(line 677,col 9)-(line 677,col 27)",
            "(line 678,col 9)-(line 678,col 85)",
            "(line 679,col 9)-(line 679,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiIntArray()",
        "snippet": "    public void testMultiIntArray() {\n        int[][] array1 = new int[2][2];\n        int[][] array2 = new int[2][2];\n        int[][] array3 = new int[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n                array3[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 682,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 683,col 9)-(line 683,col 39)",
            "(line 684,col 9)-(line 684,col 39)",
            "(line 685,col 9)-(line 685,col 39)",
            "(line 686,col 9)-(line 692,col 9)",
            "(line 693,col 9)-(line 693,col 27)",
            "(line 694,col 9)-(line 694,col 27)",
            "(line 696,col 9)-(line 696,col 86)",
            "(line 697,col 9)-(line 697,col 86)",
            "(line 698,col 9)-(line 698,col 85)",
            "(line 699,col 9)-(line 699,col 85)",
            "(line 700,col 9)-(line 700,col 27)",
            "(line 701,col 9)-(line 701,col 85)",
            "(line 702,col 9)-(line 702,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray()",
        "snippet": "    public void testMultiShortArray() {\n        short[][] array1 = new short[2][2];\n        short[][] array2 = new short[2][2];\n        short[][] array3 = new short[2][3];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (short)((i + 1) * (j + 1));\n                array2[i][j] = (short)((i + 1) * (j + 1));\n                array3[i][j] = (short)((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 705,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 706,col 9)-(line 706,col 43)",
            "(line 707,col 9)-(line 707,col 43)",
            "(line 708,col 9)-(line 708,col 43)",
            "(line 709,col 9)-(line 715,col 9)",
            "(line 716,col 9)-(line 716,col 27)",
            "(line 717,col 9)-(line 717,col 27)",
            "(line 719,col 9)-(line 719,col 86)",
            "(line 720,col 9)-(line 720,col 86)",
            "(line 721,col 9)-(line 721,col 85)",
            "(line 722,col 9)-(line 722,col 85)",
            "(line 723,col 9)-(line 723,col 27)",
            "(line 724,col 9)-(line 724,col 85)",
            "(line 725,col 9)-(line 725,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiCharArray()",
        "snippet": "    public void testMultiCharArray() {\n        char[][] array1 = new char[2][2];\n        char[][] array2 = new char[2][2];\n        char[][] array3 = new char[2][3];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (char)((i + 1) * (j + 1));\n                array2[i][j] = (char)((i + 1) * (j + 1));\n                array3[i][j] = (char)((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 728,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 729,col 9)-(line 729,col 41)",
            "(line 730,col 9)-(line 730,col 41)",
            "(line 731,col 9)-(line 731,col 41)",
            "(line 732,col 9)-(line 738,col 9)",
            "(line 739,col 9)-(line 739,col 27)",
            "(line 740,col 9)-(line 740,col 27)",
            "(line 742,col 9)-(line 742,col 86)",
            "(line 743,col 9)-(line 743,col 86)",
            "(line 744,col 9)-(line 744,col 85)",
            "(line 745,col 9)-(line 745,col 85)",
            "(line 746,col 9)-(line 746,col 27)",
            "(line 747,col 9)-(line 747,col 85)",
            "(line 748,col 9)-(line 748,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiByteArray()",
        "snippet": "    public void testMultiByteArray() {\n        byte[][] array1 = new byte[2][2];\n        byte[][] array2 = new byte[2][2];\n        byte[][] array3 = new byte[2][3];\n        for (byte i = 0; i < array1.length; ++i) {\n            for (byte j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (byte)((i + 1) * (j + 1));\n                array2[i][j] = (byte)((i + 1) * (j + 1));\n                array3[i][j] = (byte)((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 127;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 751,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 752,col 9)-(line 752,col 41)",
            "(line 753,col 9)-(line 753,col 41)",
            "(line 754,col 9)-(line 754,col 41)",
            "(line 755,col 9)-(line 761,col 9)",
            "(line 762,col 9)-(line 762,col 27)",
            "(line 763,col 9)-(line 763,col 27)",
            "(line 765,col 9)-(line 765,col 86)",
            "(line 766,col 9)-(line 766,col 86)",
            "(line 767,col 9)-(line 767,col 85)",
            "(line 768,col 9)-(line 768,col 85)",
            "(line 769,col 9)-(line 769,col 27)",
            "(line 770,col 9)-(line 770,col 85)",
            "(line 771,col 9)-(line 771,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiFloatArray()",
        "snippet": "    public void testMultiFloatArray() {\n        float[][] array1 = new float[2][2];\n        float[][] array2 = new float[2][2];\n        float[][] array3 = new float[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = ((i + 1) * (j + 1));\n                array2[i][j] = ((i + 1) * (j + 1));\n                array3[i][j] = ((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 127;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 774,
        "end_line": 795,
        "comment": "",
        "child_ranges": [
            "(line 775,col 9)-(line 775,col 43)",
            "(line 776,col 9)-(line 776,col 43)",
            "(line 777,col 9)-(line 777,col 43)",
            "(line 778,col 9)-(line 784,col 9)",
            "(line 785,col 9)-(line 785,col 27)",
            "(line 786,col 9)-(line 786,col 27)",
            "(line 788,col 9)-(line 788,col 86)",
            "(line 789,col 9)-(line 789,col 86)",
            "(line 790,col 9)-(line 790,col 85)",
            "(line 791,col 9)-(line 791,col 85)",
            "(line 792,col 9)-(line 792,col 27)",
            "(line 793,col 9)-(line 793,col 85)",
            "(line 794,col 9)-(line 794,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiDoubleArray()",
        "snippet": "    public void testMultiDoubleArray() {\n        double[][] array1 = new double[2][2];\n        double[][] array2 = new double[2][2];\n        double[][] array3 = new double[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = ((i + 1) * (j + 1));\n                array2[i][j] = ((i + 1) * (j + 1));\n                array3[i][j] = ((i + 1) * (j + 1));\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 127;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 797,
        "end_line": 818,
        "comment": "",
        "child_ranges": [
            "(line 798,col 9)-(line 798,col 45)",
            "(line 799,col 9)-(line 799,col 45)",
            "(line 800,col 9)-(line 800,col 45)",
            "(line 801,col 9)-(line 807,col 9)",
            "(line 808,col 9)-(line 808,col 27)",
            "(line 809,col 9)-(line 809,col 27)",
            "(line 811,col 9)-(line 811,col 86)",
            "(line 812,col 9)-(line 812,col 86)",
            "(line 813,col 9)-(line 813,col 85)",
            "(line 814,col 9)-(line 814,col 85)",
            "(line 815,col 9)-(line 815,col 27)",
            "(line 816,col 9)-(line 816,col 85)",
            "(line 817,col 9)-(line 817,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray()",
        "snippet": "    public void testMultiBooleanArray() {\n        boolean[][] array1 = new boolean[2][2];\n        boolean[][] array2 = new boolean[2][2];\n        boolean[][] array3 = new boolean[2][3];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = ((i == 1) ^ (j == 1));\n                array2[i][j] = ((i == 1) ^ (j == 1));\n                array3[i][j] = ((i == 1) ^ (j == 1));\n            }\n        }\n        array3[1][2] = false;\n        array3[1][2] = false;\n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = true;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 820,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 47)",
            "(line 822,col 9)-(line 822,col 47)",
            "(line 823,col 9)-(line 823,col 47)",
            "(line 824,col 9)-(line 830,col 9)",
            "(line 831,col 9)-(line 831,col 29)",
            "(line 832,col 9)-(line 832,col 29)",
            "(line 834,col 9)-(line 834,col 86)",
            "(line 835,col 9)-(line 835,col 86)",
            "(line 836,col 9)-(line 836,col 85)",
            "(line 837,col 9)-(line 837,col 85)",
            "(line 838,col 9)-(line 838,col 28)",
            "(line 839,col 9)-(line 839,col 85)",
            "(line 840,col 9)-(line 840,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testRaggedArray()",
        "snippet": "    public void testRaggedArray() {\n        long array1[][] = new long[2][];\n        long array2[][] = new long[2][];\n        long array3[][] = new long[3][];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            array3[i] = new long[3];\n            for (int j = 0; j < array1[i].length; ++j) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n                array3[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        array3[1][2] = 100;\n        array3[1][2] = 100;\n        \n        \n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        array1[1][1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 843,
        "end_line": 868,
        "comment": "",
        "child_ranges": [
            "(line 844,col 9)-(line 844,col 40)",
            "(line 845,col 9)-(line 845,col 40)",
            "(line 846,col 9)-(line 846,col 40)",
            "(line 847,col 9)-(line 856,col 9)",
            "(line 857,col 9)-(line 857,col 27)",
            "(line 858,col 9)-(line 858,col 27)",
            "(line 861,col 9)-(line 861,col 86)",
            "(line 862,col 9)-(line 862,col 86)",
            "(line 863,col 9)-(line 863,col 85)",
            "(line 864,col 9)-(line 864,col 85)",
            "(line 865,col 9)-(line 865,col 27)",
            "(line 866,col 9)-(line 866,col 85)",
            "(line 867,col 9)-(line 867,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testMixedArray()",
        "snippet": "    public void testMixedArray() {\n        Object array1[] = new Object[2];\n        Object array2[] = new Object[2];\n        Object array3[] = new Object[2];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            array3[i] = new long[3];\n            for (int j = 0; j < 2; ++j) {\n                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array3[i])[j] = (i + 1) * (j + 1);\n            }\n        }\n        ((long[]) array3[0])[2] = 1;\n        ((long[]) array3[1])[2] = 1;\n        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n        ((long[]) array1[1])[1] = 200;\n        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n    }",
        "begin_line": 870,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 871,col 9)-(line 871,col 40)",
            "(line 872,col 9)-(line 872,col 40)",
            "(line 873,col 9)-(line 873,col 40)",
            "(line 874,col 9)-(line 883,col 9)",
            "(line 884,col 9)-(line 884,col 36)",
            "(line 885,col 9)-(line 885,col 36)",
            "(line 886,col 9)-(line 886,col 86)",
            "(line 887,col 9)-(line 887,col 86)",
            "(line 888,col 9)-(line 888,col 85)",
            "(line 889,col 9)-(line 889,col 85)",
            "(line 890,col 9)-(line 890,col 38)",
            "(line 891,col 9)-(line 891,col 85)",
            "(line 892,col 9)-(line 892,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectArrayHiddenByObject()",
        "snippet": "    public void testObjectArrayHiddenByObject() {\n        TestObject[] array1 = new TestObject[2];\n        array1[0] = new TestObject(4);\n        array1[1] = new TestObject(5);\n        TestObject[] array2 = new TestObject[2];\n        array2[0] = new TestObject(4);\n        array2[1] = new TestObject(5);\n        TestObject[] array3 = new TestObject[3];\n        array3[0] = new TestObject(4);\n        array3[1] = new TestObject(5);\n        array3[2] = new TestObject(6);\n        \n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        \n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = new TestObject(7);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 895,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 896,col 9)-(line 896,col 48)",
            "(line 897,col 9)-(line 897,col 38)",
            "(line 898,col 9)-(line 898,col 38)",
            "(line 899,col 9)-(line 899,col 48)",
            "(line 900,col 9)-(line 900,col 38)",
            "(line 901,col 9)-(line 901,col 38)",
            "(line 902,col 9)-(line 902,col 48)",
            "(line 903,col 9)-(line 903,col 38)",
            "(line 904,col 9)-(line 904,col 38)",
            "(line 905,col 9)-(line 905,col 38)",
            "(line 907,col 9)-(line 907,col 29)",
            "(line 908,col 9)-(line 908,col 29)",
            "(line 909,col 9)-(line 909,col 29)",
            "(line 911,col 9)-(line 911,col 82)",
            "(line 912,col 9)-(line 912,col 82)",
            "(line 913,col 9)-(line 913,col 81)",
            "(line 914,col 9)-(line 914,col 81)",
            "(line 916,col 9)-(line 916,col 38)",
            "(line 917,col 9)-(line 917,col 81)",
            "(line 918,col 9)-(line 918,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testLongArrayHiddenByObject()",
        "snippet": "    public void testLongArrayHiddenByObject() {\n        long[] array1 = new long[2];\n        array1[0] = 5L;\n        array1[1] = 6L;\n        long[] array2 = new long[2];\n        array2[0] = 5L;\n        array2[1] = 6L;\n        long[] array3 = new long[3];\n        array3[0] = 5L;\n        array3[1] = 6L;\n        array3[2] = 7L;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 921,
        "end_line": 943,
        "comment": "",
        "child_ranges": [
            "(line 922,col 9)-(line 922,col 36)",
            "(line 923,col 9)-(line 923,col 23)",
            "(line 924,col 9)-(line 924,col 23)",
            "(line 925,col 9)-(line 925,col 36)",
            "(line 926,col 9)-(line 926,col 23)",
            "(line 927,col 9)-(line 927,col 23)",
            "(line 928,col 9)-(line 928,col 36)",
            "(line 929,col 9)-(line 929,col 23)",
            "(line 930,col 9)-(line 930,col 23)",
            "(line 931,col 9)-(line 931,col 23)",
            "(line 932,col 9)-(line 932,col 29)",
            "(line 933,col 9)-(line 933,col 29)",
            "(line 934,col 9)-(line 934,col 29)",
            "(line 935,col 9)-(line 935,col 82)",
            "(line 936,col 9)-(line 936,col 82)",
            "(line 937,col 9)-(line 937,col 81)",
            "(line 938,col 9)-(line 938,col 81)",
            "(line 940,col 9)-(line 940,col 22)",
            "(line 941,col 9)-(line 941,col 81)",
            "(line 942,col 9)-(line 942,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArrayHiddenByObject()",
        "snippet": "    public void testIntArrayHiddenByObject() {\n        int[] array1 = new int[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        int[] array2 = new int[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        int[] array3 = new int[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 945,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 946,col 9)-(line 946,col 34)",
            "(line 947,col 9)-(line 947,col 22)",
            "(line 948,col 9)-(line 948,col 22)",
            "(line 949,col 9)-(line 949,col 34)",
            "(line 950,col 9)-(line 950,col 22)",
            "(line 951,col 9)-(line 951,col 22)",
            "(line 952,col 9)-(line 952,col 34)",
            "(line 953,col 9)-(line 953,col 22)",
            "(line 954,col 9)-(line 954,col 22)",
            "(line 955,col 9)-(line 955,col 22)",
            "(line 956,col 9)-(line 956,col 29)",
            "(line 957,col 9)-(line 957,col 29)",
            "(line 958,col 9)-(line 958,col 29)",
            "(line 959,col 9)-(line 959,col 82)",
            "(line 960,col 9)-(line 960,col 82)",
            "(line 961,col 9)-(line 961,col 81)",
            "(line 962,col 9)-(line 962,col 81)",
            "(line 964,col 9)-(line 964,col 22)",
            "(line 965,col 9)-(line 965,col 81)",
            "(line 966,col 9)-(line 966,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testShortArrayHiddenByObject()",
        "snippet": "    public void testShortArrayHiddenByObject() {\n        short[] array1 = new short[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        short[] array2 = new short[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        short[] array3 = new short[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 969,
        "end_line": 991,
        "comment": "",
        "child_ranges": [
            "(line 970,col 9)-(line 970,col 38)",
            "(line 971,col 9)-(line 971,col 22)",
            "(line 972,col 9)-(line 972,col 22)",
            "(line 973,col 9)-(line 973,col 38)",
            "(line 974,col 9)-(line 974,col 22)",
            "(line 975,col 9)-(line 975,col 22)",
            "(line 976,col 9)-(line 976,col 38)",
            "(line 977,col 9)-(line 977,col 22)",
            "(line 978,col 9)-(line 978,col 22)",
            "(line 979,col 9)-(line 979,col 22)",
            "(line 980,col 9)-(line 980,col 29)",
            "(line 981,col 9)-(line 981,col 29)",
            "(line 982,col 9)-(line 982,col 29)",
            "(line 983,col 9)-(line 983,col 82)",
            "(line 984,col 9)-(line 984,col 82)",
            "(line 985,col 9)-(line 985,col 81)",
            "(line 986,col 9)-(line 986,col 81)",
            "(line 988,col 9)-(line 988,col 22)",
            "(line 989,col 9)-(line 989,col 81)",
            "(line 990,col 9)-(line 990,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testCharArrayHiddenByObject()",
        "snippet": "    public void testCharArrayHiddenByObject() {\n        char[] array1 = new char[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        char[] array2 = new char[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        char[] array3 = new char[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 993,
        "end_line": 1015,
        "comment": "",
        "child_ranges": [
            "(line 994,col 9)-(line 994,col 36)",
            "(line 995,col 9)-(line 995,col 22)",
            "(line 996,col 9)-(line 996,col 22)",
            "(line 997,col 9)-(line 997,col 36)",
            "(line 998,col 9)-(line 998,col 22)",
            "(line 999,col 9)-(line 999,col 22)",
            "(line 1000,col 9)-(line 1000,col 36)",
            "(line 1001,col 9)-(line 1001,col 22)",
            "(line 1002,col 9)-(line 1002,col 22)",
            "(line 1003,col 9)-(line 1003,col 22)",
            "(line 1004,col 9)-(line 1004,col 29)",
            "(line 1005,col 9)-(line 1005,col 29)",
            "(line 1006,col 9)-(line 1006,col 29)",
            "(line 1007,col 9)-(line 1007,col 82)",
            "(line 1008,col 9)-(line 1008,col 82)",
            "(line 1009,col 9)-(line 1009,col 81)",
            "(line 1010,col 9)-(line 1010,col 81)",
            "(line 1012,col 9)-(line 1012,col 22)",
            "(line 1013,col 9)-(line 1013,col 81)",
            "(line 1014,col 9)-(line 1014,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testByteArrayHiddenByObject()",
        "snippet": "    public void testByteArrayHiddenByObject() {\n        byte[] array1 = new byte[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        byte[] array2 = new byte[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        byte[] array3 = new byte[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1017,
        "end_line": 1039,
        "comment": "",
        "child_ranges": [
            "(line 1018,col 9)-(line 1018,col 36)",
            "(line 1019,col 9)-(line 1019,col 22)",
            "(line 1020,col 9)-(line 1020,col 22)",
            "(line 1021,col 9)-(line 1021,col 36)",
            "(line 1022,col 9)-(line 1022,col 22)",
            "(line 1023,col 9)-(line 1023,col 22)",
            "(line 1024,col 9)-(line 1024,col 36)",
            "(line 1025,col 9)-(line 1025,col 22)",
            "(line 1026,col 9)-(line 1026,col 22)",
            "(line 1027,col 9)-(line 1027,col 22)",
            "(line 1028,col 9)-(line 1028,col 29)",
            "(line 1029,col 9)-(line 1029,col 29)",
            "(line 1030,col 9)-(line 1030,col 29)",
            "(line 1031,col 9)-(line 1031,col 82)",
            "(line 1032,col 9)-(line 1032,col 82)",
            "(line 1033,col 9)-(line 1033,col 81)",
            "(line 1034,col 9)-(line 1034,col 81)",
            "(line 1036,col 9)-(line 1036,col 22)",
            "(line 1037,col 9)-(line 1037,col 81)",
            "(line 1038,col 9)-(line 1038,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testDoubleArrayHiddenByObject()",
        "snippet": "    public void testDoubleArrayHiddenByObject() {\n        double[] array1 = new double[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        double[] array2 = new double[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        double[] array3 = new double[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1041,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 9)-(line 1042,col 40)",
            "(line 1043,col 9)-(line 1043,col 22)",
            "(line 1044,col 9)-(line 1044,col 22)",
            "(line 1045,col 9)-(line 1045,col 40)",
            "(line 1046,col 9)-(line 1046,col 22)",
            "(line 1047,col 9)-(line 1047,col 22)",
            "(line 1048,col 9)-(line 1048,col 40)",
            "(line 1049,col 9)-(line 1049,col 22)",
            "(line 1050,col 9)-(line 1050,col 22)",
            "(line 1051,col 9)-(line 1051,col 22)",
            "(line 1052,col 9)-(line 1052,col 29)",
            "(line 1053,col 9)-(line 1053,col 29)",
            "(line 1054,col 9)-(line 1054,col 29)",
            "(line 1055,col 9)-(line 1055,col 82)",
            "(line 1056,col 9)-(line 1056,col 82)",
            "(line 1057,col 9)-(line 1057,col 81)",
            "(line 1058,col 9)-(line 1058,col 81)",
            "(line 1060,col 9)-(line 1060,col 22)",
            "(line 1061,col 9)-(line 1061,col 81)",
            "(line 1062,col 9)-(line 1062,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testFloatArrayHiddenByObject()",
        "snippet": "    public void testFloatArrayHiddenByObject() {\n        float[] array1 = new float[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        float[] array2 = new float[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        float[] array3 = new float[3];\n        array3[0] = 5;\n        array3[1] = 6;\n        array3[2] = 7;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = 7;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1065,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 9)-(line 1066,col 38)",
            "(line 1067,col 9)-(line 1067,col 22)",
            "(line 1068,col 9)-(line 1068,col 22)",
            "(line 1069,col 9)-(line 1069,col 38)",
            "(line 1070,col 9)-(line 1070,col 22)",
            "(line 1071,col 9)-(line 1071,col 22)",
            "(line 1072,col 9)-(line 1072,col 38)",
            "(line 1073,col 9)-(line 1073,col 22)",
            "(line 1074,col 9)-(line 1074,col 22)",
            "(line 1075,col 9)-(line 1075,col 22)",
            "(line 1076,col 9)-(line 1076,col 29)",
            "(line 1077,col 9)-(line 1077,col 29)",
            "(line 1078,col 9)-(line 1078,col 29)",
            "(line 1079,col 9)-(line 1079,col 82)",
            "(line 1080,col 9)-(line 1080,col 82)",
            "(line 1081,col 9)-(line 1081,col 81)",
            "(line 1082,col 9)-(line 1082,col 81)",
            "(line 1084,col 9)-(line 1084,col 22)",
            "(line 1085,col 9)-(line 1085,col 81)",
            "(line 1086,col 9)-(line 1086,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.CompareToBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java",
        "signature": "org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject()",
        "snippet": "    public void testBooleanArrayHiddenByObject() {\n        boolean[] array1 = new boolean[2];\n        array1[0] = true;\n        array1[1] = false;\n        boolean[] array2 = new boolean[2];\n        array2[0] = true;\n        array2[1] = false;\n        boolean[] array3 = new boolean[3];\n        array3[0] = true;\n        array3[1] = false;\n        array3[2] = true;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        Object obj3 = array3;\n        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n\n        array1[1] = true;\n        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n    }",
        "begin_line": 1089,
        "end_line": 1111,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 9)-(line 1090,col 42)",
            "(line 1091,col 9)-(line 1091,col 25)",
            "(line 1092,col 9)-(line 1092,col 26)",
            "(line 1093,col 9)-(line 1093,col 42)",
            "(line 1094,col 9)-(line 1094,col 25)",
            "(line 1095,col 9)-(line 1095,col 26)",
            "(line 1096,col 9)-(line 1096,col 42)",
            "(line 1097,col 9)-(line 1097,col 25)",
            "(line 1098,col 9)-(line 1098,col 26)",
            "(line 1099,col 9)-(line 1099,col 25)",
            "(line 1100,col 9)-(line 1100,col 29)",
            "(line 1101,col 9)-(line 1101,col 29)",
            "(line 1102,col 9)-(line 1102,col 29)",
            "(line 1103,col 9)-(line 1103,col 82)",
            "(line 1104,col 9)-(line 1104,col 82)",
            "(line 1105,col 9)-(line 1105,col 81)",
            "(line 1106,col 9)-(line 1106,col 81)",
            "(line 1108,col 9)-(line 1108,col 25)",
            "(line 1109,col 9)-(line 1109,col 81)",
            "(line 1110,col 9)-(line 1110,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.StandardToStringStyleTest(java.lang.String)",
        "snippet": "    public StandardToStringStyleTest(String name) {\n        super(name);\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(STYLE);\n    }",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 22)",
            "(line 59,col 9)-(line 59,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 25)",
            "(line 65,col 9)-(line 65,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[%NULL%,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 74,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 105)",
            "(line 76,col 9)-(line 76,col 117)",
            "(line 78,col 9)-(line 78,col 133)",
            "(line 79,col 9)-(line 79,col 146)",
            "(line 80,col 9)-(line 80,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=%NULL%]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=%Integer%]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 36)",
            "(line 85,col 9)-(line 85,col 36)",
            "(line 86,col 9)-(line 86,col 103)",
            "(line 87,col 9)-(line 87,col 87)",
            "(line 88,col 9)-(line 88,col 110)",
            "(line 89,col 9)-(line 89,col 94)",
            "(line 90,col 9)-(line 90,col 114)",
            "(line 91,col 9)-(line 91,col 109)",
            "(line 92,col 9)-(line 92,col 129)",
            "(line 93,col 9)-(line 93,col 122)",
            "(line 94,col 9)-(line 94,col 135)",
            "(line 95,col 9)-(line 95,col 128)",
            "(line 96,col 9)-(line 96,col 128)",
            "(line 97,col 9)-(line 97,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"Suzy Queue\";\n        p.age = 19;\n        p.smoker = false;\n        String pBaseStr = \"ToStringStyleTest.Person\";\n        assertEquals(pBaseStr + \"[name=Suzy Queue,age=19,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 32)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 103,col 9)-(line 103,col 19)",
            "(line 104,col 9)-(line 104,col 25)",
            "(line 105,col 9)-(line 105,col 53)",
            "(line 106,col 9)-(line 106,col 179)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 87)",
            "(line 111,col 9)-(line 111,col 94)",
            "(line 112,col 9)-(line 112,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 115,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 69)",
            "(line 117,col 9)-(line 117,col 108)",
            "(line 118,col 9)-(line 118,col 117)",
            "(line 119,col 9)-(line 119,col 21)",
            "(line 120,col 9)-(line 120,col 95)",
            "(line 121,col 9)-(line 121,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 124,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 48)",
            "(line 126,col 9)-(line 126,col 102)",
            "(line 127,col 9)-(line 127,col 111)",
            "(line 128,col 9)-(line 128,col 21)",
            "(line 129,col 9)-(line 129,col 95)",
            "(line 130,col 9)-(line 130,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.StandardToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 133,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 110)",
            "(line 136,col 9)-(line 136,col 119)",
            "(line 137,col 9)-(line 137,col 21)",
            "(line 138,col 9)-(line 138,col 95)",
            "(line 139,col 9)-(line 139,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);\n    }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 22)",
            "(line 40,col 9)-(line 40,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 25)",
            "(line 46,col 9)-(line 46,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank()",
        "snippet": "    public void testBlank() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper()",
        "snippet": "    public void testAppendSuper() {\n        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n        \n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n    }",
        "begin_line": 55,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 105)",
            "(line 57,col 9)-(line 57,col 117)",
            "(line 59,col 9)-(line 59,col 133)",
            "(line 60,col 9)-(line 60,col 146)",
            "(line 61,col 9)-(line 61,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject()",
        "snippet": "    public void testObject() {\n        Integer i3 = new Integer(3);\n        Integer i4 = new Integer(4);\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n    }",
        "begin_line": 64,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 36)",
            "(line 66,col 9)-(line 66,col 36)",
            "(line 67,col 9)-(line 67,col 103)",
            "(line 68,col 9)-(line 68,col 87)",
            "(line 69,col 9)-(line 69,col 110)",
            "(line 70,col 9)-(line 70,col 94)",
            "(line 71,col 9)-(line 71,col 114)",
            "(line 72,col 9)-(line 72,col 109)",
            "(line 73,col 9)-(line 73,col 129)",
            "(line 74,col 9)-(line 74,col 122)",
            "(line 75,col 9)-(line 75,col 135)",
            "(line 76,col 9)-(line 76,col 128)",
            "(line 77,col 9)-(line 77,col 128)",
            "(line 78,col 9)-(line 78,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson()",
        "snippet": "    public void testPerson() {\n        Person p = new Person();\n        p.name = \"John Q. Public\";\n        p.age = 45;\n        p.smoker = true;\n        String pBaseStr = \"ToStringStyleTest.Person\";\n        assertEquals(pBaseStr + \"[name=John Q. Public,age=45,smoker=true]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n    }",
        "begin_line": 81,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 32)",
            "(line 83,col 9)-(line 83,col 34)",
            "(line 84,col 9)-(line 84,col 19)",
            "(line 85,col 9)-(line 85,col 24)",
            "(line 86,col 9)-(line 86,col 53)",
            "(line 87,col 9)-(line 87,col 182)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong()",
        "snippet": "    public void testLong() {\n        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 87)",
            "(line 92,col 9)-(line 92,col 94)",
            "(line 93,col 9)-(line 93,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray()",
        "snippet": "    public void testObjectArray() {\n        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 96,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 69)",
            "(line 98,col 9)-(line 98,col 105)",
            "(line 99,col 9)-(line 99,col 114)",
            "(line 100,col 9)-(line 100,col 21)",
            "(line 101,col 9)-(line 101,col 95)",
            "(line 102,col 9)-(line 102,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray()",
        "snippet": "    public void testLongArray() {\n        long[] array = new long[] {1, 2, -3, 4};\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 105,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 48)",
            "(line 107,col 9)-(line 107,col 99)",
            "(line 108,col 9)-(line 108,col 108)",
            "(line 109,col 9)-(line 109,col 21)",
            "(line 110,col 9)-(line 110,col 95)",
            "(line 111,col 9)-(line 111,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java",
        "signature": "org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray()",
        "snippet": "    public void testLongArrayArray() {\n        long[][] array = new long[][] {{1, 2}, null, {5}};\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n        array = null;\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n    }",
        "begin_line": 114,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 58)",
            "(line 116,col 9)-(line 116,col 107)",
            "(line 117,col 9)-(line 117,col 116)",
            "(line 118,col 9)-(line 118,col 21)",
            "(line 119,col 9)-(line 119,col 95)",
            "(line 120,col 9)-(line 120,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.LazyInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.LazyInitializerTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        initializer = new LazyInitializerTestImpl();\n    }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 22)",
            "(line 35,col 9)-(line 35,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.LazyInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.LazyInitializerTest.testGet()",
        "snippet": "    public void testGet() {\n        assertNotNull(\"No managed object\", initializer.get());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Tests obtaining the managed object.\n     ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.LazyInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.LazyInitializerTest.testGetMultipleTimes()",
        "snippet": "    public void testGetMultipleTimes() {\n        Object obj = initializer.get();\n        for (int i = 0; i < 10; i++) {\n            assertEquals(\"Got different object at \" + i, obj, initializer.get());\n        }\n    }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "\n     * Tests whether sequential get() invocations always return the same\n     * instance.\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 39)",
            "(line 51,col 9)-(line 53,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.LazyInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.LazyInitializerTest.testGetConcurrent()",
        "snippet": "    public void testGetConcurrent() throws InterruptedException {\n        final int threadCount = 20;\n        final CountDownLatch startLatch = new CountDownLatch(1);\n        class GetThread extends Thread {\n            Object object;\n\n            @Override\n            public void run() {\n                try {\n                    // wait until all threads are ready for maximum parallelism\n                    startLatch.await();\n                    // access the initializer\n                    object = initializer.get();\n                } catch (InterruptedException iex) {\n                    // ignore\n                }\n            }\n        }\n\n        GetThread[] threads = new GetThread[threadCount];\n        for (int i = 0; i < threadCount; i++) {\n            threads[i] = new GetThread();\n            threads[i].start();\n        }\n\n        // fire all threads and wait until they are ready\n        startLatch.countDown();\n        for (Thread t : threads) {\n            t.join();\n        }\n\n        // check results\n        Object managedObject = initializer.get();\n        for (GetThread t : threads) {\n            assertEquals(\"Wrong object\", managedObject, t.object);\n        }\n    }",
        "begin_line": 59,
        "end_line": 95,
        "comment": "\n     * Tests invoking get() from multiple threads concurrently.\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 35)",
            "(line 61,col 9)-(line 61,col 64)",
            "(line 62,col 9)-(line 76,col 9)",
            "(line 78,col 9)-(line 78,col 57)",
            "(line 79,col 9)-(line 82,col 9)",
            "(line 85,col 9)-(line 85,col 31)",
            "(line 86,col 9)-(line 88,col 9)",
            "(line 91,col 9)-(line 91,col 49)",
            "(line 92,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.LazyInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.LazyInitializerTest.GetThread.run()",
        "snippet": "            @Override\n            public void run() {\n                try {\n                    // wait until all threads are ready for maximum parallelism\n                    startLatch.await();\n                    // access the initializer\n                    object = initializer.get();\n                } catch (InterruptedException iex) {\n                    // ignore\n                }\n            }",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 67,col 17)-(line 74,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.LazyInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.LazyInitializerTest.LazyInitializerTestImpl.initialize()",
        "snippet": "        @Override\n        protected Object initialize() {\n            return new Object();\n        }",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 13)-(line 106,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitNullCallable()",
        "snippet": "    public void testInitNullCallable() {\n        try {\n            new CallableBackgroundInitializer<Object>(null);\n            fail(\"Could create instance without a Callable!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 38,
        "end_line": 45,
        "comment": "\n     * Tries to create an instance without a Callable. This should cause an\n     * exception.\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitExecutor()",
        "snippet": "    public void testInitExecutor() {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n                new TestCallable(), exec);\n        assertEquals(\"Executor not set\", exec, init.getExternalExecutor());\n    }",
        "begin_line": 51,
        "end_line": 56,
        "comment": "\n     * Tests whether the executor service is correctly passed to the super\n     * class.\n     ",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 67)",
            "(line 53,col 9)-(line 54,col 42)",
            "(line 55,col 9)-(line 55,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitExecutorNullCallable()",
        "snippet": "    public void testInitExecutorNullCallable() {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        try {\n            new CallableBackgroundInitializer<Integer>(null, exec);\n            fail(\"Could create instance without a Callable!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 62,
        "end_line": 70,
        "comment": "\n     * Tries to pass a null Callable to the constructor that takes an executor.\n     * This should cause an exception.\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 67)",
            "(line 64,col 9)-(line 69,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitialize()",
        "snippet": "    public void testInitialize() throws Exception {\n        TestCallable call = new TestCallable();\n        CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n                call);\n        assertEquals(\"Wrong result\", RESULT, init.initialize());\n        assertEquals(\"Wrong number of invocations\", 1, call.callCount);\n    }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "\n     * Tests the implementation of initialize().\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 47)",
            "(line 77,col 9)-(line 78,col 22)",
            "(line 79,col 9)-(line 79,col 64)",
            "(line 80,col 9)-(line 80,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.TestCallable.call()",
        "snippet": "        public Integer call() throws Exception {\n            callCount++;\n            return RESULT;\n        }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\n         * Records this invocation and returns the test result.\n         ",
        "child_ranges": [
            "(line 95,col 13)-(line 95,col 24)",
            "(line 96,col 13)-(line 96,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        initializer = new MultiBackgroundInitializer();\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 22)",
            "(line 41,col 9)-(line 41,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.checkChild(org.apache.commons.lang3.concurrent.BackgroundInitializer<?>, java.util.concurrent.ExecutorService)",
        "snippet": "    private void checkChild(BackgroundInitializer<?> child,\n            ExecutorService expExec) throws ConcurrentException {\n        ChildBackgroundInitializer cinit = (ChildBackgroundInitializer) child;\n        Integer result = cinit.get();\n        assertEquals(\"Wrong result\", 1, result.intValue());\n        assertEquals(\"Wrong number of executions\", 1, cinit.initializeCalls);\n        if (expExec != null) {\n            assertEquals(\"Wrong executor service\", expExec,\n                    cinit.currentExecutor);\n        }\n    }",
        "begin_line": 53,
        "end_line": 63,
        "comment": "\n     * Tests whether a child initializer has been executed. Optionally the\n     * expected executor service can be checked, too.\n     *\n     * @param child the child initializer\n     * @param expExec the expected executor service (null if the executor should\n     * not be checked)\n     * @throws ConcurrentException if an error occurs\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 78)",
            "(line 56,col 9)-(line 56,col 37)",
            "(line 57,col 9)-(line 57,col 59)",
            "(line 58,col 9)-(line 58,col 77)",
            "(line 59,col 9)-(line 62,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerNullName()",
        "snippet": "    public void testAddInitializerNullName() {\n        try {\n            initializer.addInitializer(null, new ChildBackgroundInitializer());\n            fail(\"Null name not detected!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 69,
        "end_line": 76,
        "comment": "\n     * Tests addInitializer() if a null name is passed in. This should cause an\n     * exception.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 75,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerNullInit()",
        "snippet": "    public void testAddInitializerNullInit() {\n        try {\n            initializer.addInitializer(CHILD_INIT, null);\n            fail(\"Could add null initializer!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 82,
        "end_line": 89,
        "comment": "\n     * Tests addInitializer() if a null initializer is passed in. This should\n     * cause an exception.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 88,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNoChildren()",
        "snippet": "    public void testInitializeNoChildren() throws ConcurrentException {\n        assertTrue(\"Wrong result of start()\", initializer.start());\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n                .get();\n        assertTrue(\"Got child initializers\", res.initializerNames().isEmpty());\n        assertTrue(\"Executor not shutdown\", initializer.getActiveExecutor()\n                .isShutdown());\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "\n     * Tests the background processing if there are no child initializers.\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 67)",
            "(line 96,col 9)-(line 97,col 23)",
            "(line 98,col 9)-(line 98,col 79)",
            "(line 99,col 9)-(line 100,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.checkInitialize()",
        "snippet": "    private MultiBackgroundInitializer.MultiBackgroundInitializerResults checkInitialize()\n            throws ConcurrentException {\n        final int count = 5;\n        for (int i = 0; i < count; i++) {\n            initializer.addInitializer(CHILD_INIT + i,\n                    new ChildBackgroundInitializer());\n        }\n        initializer.start();\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n                .get();\n        assertEquals(\"Wrong number of child initializers\", count, res\n                .initializerNames().size());\n        for (int i = 0; i < count; i++) {\n            String key = CHILD_INIT + i;\n            assertTrue(\"Name not found: \" + key, res.initializerNames()\n                    .contains(key));\n            assertEquals(\"Wrong result object\", Integer.valueOf(1), res\n                    .getResultObject(key));\n            assertFalse(\"Exception flag\", res.isException(key));\n            assertNull(\"Got an exception\", res.getException(key));\n            checkChild(res.getInitializer(key), initializer.getActiveExecutor());\n        }\n        return res;\n    }",
        "begin_line": 109,
        "end_line": 132,
        "comment": "\n     * Helper method for testing the initialize() method. This method can\n     * operate with both an external and a temporary executor service.\n     *\n     * @return the result object produced by the initializer\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 28)",
            "(line 112,col 9)-(line 115,col 9)",
            "(line 116,col 9)-(line 116,col 28)",
            "(line 117,col 9)-(line 118,col 23)",
            "(line 119,col 9)-(line 120,col 44)",
            "(line 121,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeTempExec()",
        "snippet": "    public void testInitializeTempExec() throws ConcurrentException {\n        checkInitialize();\n        assertTrue(\"Executor not shutdown\", initializer.getActiveExecutor()\n                .isShutdown());\n    }",
        "begin_line": 137,
        "end_line": 141,
        "comment": "\n     * Tests background processing if a temporary executor is used.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 26)",
            "(line 139,col 9)-(line 140,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeExternalExec()",
        "snippet": "    public void testInitializeExternalExec() throws ConcurrentException {\n        ExecutorService exec = Executors.newCachedThreadPool();\n        try {\n            initializer = new MultiBackgroundInitializer(exec);\n            checkInitialize();\n            assertEquals(\"Wrong executor\", exec, initializer\n                    .getActiveExecutor());\n            assertFalse(\"Executor was shutdown\", exec.isShutdown());\n        } finally {\n            exec.shutdown();\n        }\n    }",
        "begin_line": 146,
        "end_line": 157,
        "comment": "\n     * Tests background processing if an external executor service is provided.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 63)",
            "(line 148,col 9)-(line 156,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeChildWithExecutor()",
        "snippet": "    public void testInitializeChildWithExecutor() throws ConcurrentException {\n        final String initExec = \"childInitializerWithExecutor\";\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        try {\n            ChildBackgroundInitializer c1 = new ChildBackgroundInitializer();\n            ChildBackgroundInitializer c2 = new ChildBackgroundInitializer();\n            c2.setExternalExecutor(exec);\n            initializer.addInitializer(CHILD_INIT, c1);\n            initializer.addInitializer(initExec, c2);\n            initializer.start();\n            initializer.get();\n            checkChild(c1, initializer.getActiveExecutor());\n            checkChild(c2, exec);\n        } finally {\n            exec.shutdown();\n        }\n    }",
        "begin_line": 163,
        "end_line": 179,
        "comment": "\n     * Tests the behavior of initialize() if a child initializer has a specific\n     * executor service. Then this service should not be overridden.\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 63)",
            "(line 165,col 9)-(line 165,col 67)",
            "(line 166,col 9)-(line 178,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerAfterStart()",
        "snippet": "    public void testAddInitializerAfterStart() throws ConcurrentException {\n        initializer.start();\n        try {\n            initializer.addInitializer(CHILD_INIT,\n                    new ChildBackgroundInitializer());\n            fail(\"Could add initializer after start()!\");\n        } catch (IllegalStateException istex) {\n            initializer.get();\n        }\n    }",
        "begin_line": 185,
        "end_line": 194,
        "comment": "\n     * Tries to add another child initializer after the start() method has been\n     * called. This should not be allowed.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 28)",
            "(line 187,col 9)-(line 193,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetInitializerUnknown()",
        "snippet": "    public void testResultGetInitializerUnknown() throws ConcurrentException {\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n        try {\n            res.getInitializer(\"unknown\");\n            fail(\"Could obtain unknown child initializer!\");\n        } catch (NoSuchElementException nex) {\n            // ok\n        }\n    }",
        "begin_line": 200,
        "end_line": 208,
        "comment": "\n     * Tries to query an unknown child initializer from the results object. This\n     * should cause an exception.\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 93)",
            "(line 202,col 9)-(line 207,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetResultObjectUnknown()",
        "snippet": "    public void testResultGetResultObjectUnknown() throws ConcurrentException {\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n        try {\n            res.getResultObject(\"unknown\");\n            fail(\"Could obtain results from unknown child initializer!\");\n        } catch (NoSuchElementException nex) {\n            // ok\n        }\n    }",
        "begin_line": 214,
        "end_line": 222,
        "comment": "\n     * Tries to query the results of an unknown child initializer from the\n     * results object. This should cause an exception.\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 93)",
            "(line 216,col 9)-(line 221,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetExceptionUnknown()",
        "snippet": "    public void testResultGetExceptionUnknown() throws ConcurrentException {\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n        try {\n            res.getException(\"unknown\");\n            fail(\"Could obtain exception from unknown child initializer!\");\n        } catch (NoSuchElementException nex) {\n            // ok\n        }\n    }",
        "begin_line": 228,
        "end_line": 236,
        "comment": "\n     * Tries to query the exception of an unknown child initializer from the\n     * results object. This should cause an exception.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 93)",
            "(line 230,col 9)-(line 235,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultIsExceptionUnknown()",
        "snippet": "    public void testResultIsExceptionUnknown() throws ConcurrentException {\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n        try {\n            res.isException(\"unknown\");\n            fail(\"Could obtain exception status from unknown child initializer!\");\n        } catch (NoSuchElementException nex) {\n            // ok\n        }\n    }",
        "begin_line": 242,
        "end_line": 250,
        "comment": "\n     * Tries to query the exception flag of an unknown child initializer from\n     * the results object. This should cause an exception.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 93)",
            "(line 244,col 9)-(line 249,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultInitializerNamesModify()",
        "snippet": "    public void testResultInitializerNamesModify() throws ConcurrentException {\n        checkInitialize();\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n                .get();\n        Iterator<String> it = res.initializerNames().iterator();\n        it.next();\n        try {\n            it.remove();\n            fail(\"Could modify set with initializer names!\");\n        } catch (UnsupportedOperationException uex) {\n            // ok\n        }\n    }",
        "begin_line": 255,
        "end_line": 267,
        "comment": "\n     * Tests that the set with the names of the initializers cannot be modified.\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 26)",
            "(line 257,col 9)-(line 258,col 23)",
            "(line 259,col 9)-(line 259,col 64)",
            "(line 260,col 9)-(line 260,col 18)",
            "(line 261,col 9)-(line 266,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeRuntimeEx()",
        "snippet": "    public void testInitializeRuntimeEx() {\n        ChildBackgroundInitializer child = new ChildBackgroundInitializer();\n        child.ex = new RuntimeException();\n        initializer.addInitializer(CHILD_INIT, child);\n        initializer.start();\n        try {\n            initializer.get();\n            fail(\"Runtime exception not thrown!\");\n        } catch (Exception ex) {\n            assertEquals(\"Wrong exception\", child.ex, ex);\n        }\n    }",
        "begin_line": 273,
        "end_line": 284,
        "comment": "\n     * Tests the behavior of the initializer if one of the child initializers\n     * throws a runtime exception.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 76)",
            "(line 275,col 9)-(line 275,col 42)",
            "(line 276,col 9)-(line 276,col 54)",
            "(line 277,col 9)-(line 277,col 28)",
            "(line 278,col 9)-(line 283,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeEx()",
        "snippet": "    public void testInitializeEx() throws ConcurrentException {\n        ChildBackgroundInitializer child = new ChildBackgroundInitializer();\n        child.ex = new Exception();\n        initializer.addInitializer(CHILD_INIT, child);\n        initializer.start();\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n                .get();\n        assertTrue(\"No exception flag\", res.isException(CHILD_INIT));\n        assertNull(\"Got a results object\", res.getResultObject(CHILD_INIT));\n        ConcurrentException cex = res.getException(CHILD_INIT);\n        assertEquals(\"Wrong cause\", child.ex, cex.getCause());\n    }",
        "begin_line": 290,
        "end_line": 301,
        "comment": "\n     * Tests the behavior of the initializer if one of the child initializers\n     * throws a checked exception.\n     ",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 76)",
            "(line 292,col 9)-(line 292,col 35)",
            "(line 293,col 9)-(line 293,col 54)",
            "(line 294,col 9)-(line 294,col 28)",
            "(line 295,col 9)-(line 296,col 23)",
            "(line 297,col 9)-(line 297,col 69)",
            "(line 298,col 9)-(line 298,col 76)",
            "(line 299,col 9)-(line 299,col 63)",
            "(line 300,col 9)-(line 300,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNested()",
        "snippet": "    public void testInitializeNested() throws ConcurrentException {\n        final String nameMulti = \"multiChildInitializer\";\n        initializer\n                .addInitializer(CHILD_INIT, new ChildBackgroundInitializer());\n        MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer();\n        final int count = 3;\n        for (int i = 0; i < count; i++) {\n            mi2\n                    .addInitializer(CHILD_INIT + i,\n                            new ChildBackgroundInitializer());\n        }\n        initializer.addInitializer(nameMulti, mi2);\n        initializer.start();\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n                .get();\n        ExecutorService exec = initializer.getActiveExecutor();\n        checkChild(res.getInitializer(CHILD_INIT), exec);\n        MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res\n                .getResultObject(nameMulti);\n        assertEquals(\"Wrong number of initializers\", count, res2\n                .initializerNames().size());\n        for (int i = 0; i < count; i++) {\n            checkChild(res2.getInitializer(CHILD_INIT + i), exec);\n        }\n        assertTrue(\"Executor not shutdown\", exec.isShutdown());\n    }",
        "begin_line": 307,
        "end_line": 332,
        "comment": "\n     * Tests whether MultiBackgroundInitializers can be combined in a nested\n     * way.\n     ",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 57)",
            "(line 309,col 9)-(line 310,col 78)",
            "(line 311,col 9)-(line 311,col 74)",
            "(line 312,col 9)-(line 312,col 28)",
            "(line 313,col 9)-(line 317,col 9)",
            "(line 318,col 9)-(line 318,col 51)",
            "(line 319,col 9)-(line 319,col 28)",
            "(line 320,col 9)-(line 321,col 23)",
            "(line 322,col 9)-(line 322,col 63)",
            "(line 323,col 9)-(line 323,col 57)",
            "(line 324,col 9)-(line 325,col 44)",
            "(line 326,col 9)-(line 327,col 44)",
            "(line 328,col 9)-(line 330,col 9)",
            "(line 331,col 9)-(line 331,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.ChildBackgroundInitializer.initialize()",
        "snippet": "        @Override\n        protected Integer initialize() throws Exception {\n            currentExecutor = getActiveExecutor();\n            initializeCalls++;\n\n            if (ex != null) {\n                throw ex;\n            }\n\n            return initializeCalls;\n        }",
        "begin_line": 352,
        "end_line": 362,
        "comment": "\n         * Records this invocation. Optionally throws an exception.\n         ",
        "child_ranges": [
            "(line 354,col 13)-(line 354,col 50)",
            "(line 355,col 13)-(line 355,col 30)",
            "(line 357,col 13)-(line 359,col 13)",
            "(line 361,col 13)-(line 361,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInit()",
        "snippet": "    @Test\n    public void testInit() {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        EasyMock.replay(service);\n        TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,\n                LIMIT);\n        EasyMock.verify(service);\n        assertEquals(\"Wrong service\", service, semaphore.getExecutorService());\n        assertEquals(\"Wrong period\", PERIOD, semaphore.getPeriod());\n        assertEquals(\"Wrong unit\", UNIT, semaphore.getUnit());\n        assertEquals(\"Statistic available\", 0, semaphore\n                .getLastAcquiresPerPeriod());\n        assertEquals(\"Average available\", 0.0, semaphore\n                .getAverageCallsPerPeriod(), .05);\n        assertFalse(\"Already shutdown\", semaphore.isShutdown());\n        assertEquals(\"Wrong limit\", LIMIT, semaphore.getLimit());\n    }",
        "begin_line": 53,
        "end_line": 70,
        "comment": "\n     * Tests creating a new instance.\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 56,col 60)",
            "(line 57,col 9)-(line 57,col 33)",
            "(line 58,col 9)-(line 59,col 23)",
            "(line 60,col 9)-(line 60,col 33)",
            "(line 61,col 9)-(line 61,col 79)",
            "(line 62,col 9)-(line 62,col 68)",
            "(line 63,col 9)-(line 63,col 62)",
            "(line 64,col 9)-(line 65,col 45)",
            "(line 66,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 64)",
            "(line 69,col 9)-(line 69,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInitInvalidPeriod()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInitInvalidPeriod() {\n        new TimedSemaphore(0L, UNIT, LIMIT);\n    }",
        "begin_line": 76,
        "end_line": 79,
        "comment": "\n     * Tries to create an instance with a negative period. This should cause an\n     * exception.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInitDefaultService()",
        "snippet": "    @Test\n    public void testInitDefaultService() {\n        TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT);\n        ScheduledThreadPoolExecutor exec = (ScheduledThreadPoolExecutor) semaphore\n                .getExecutorService();\n        assertFalse(\"Wrong periodic task policy\", exec\n                .getContinueExistingPeriodicTasksAfterShutdownPolicy());\n        assertFalse(\"Wrong delayed task policy\", exec\n                .getExecuteExistingDelayedTasksAfterShutdownPolicy());\n        assertFalse(\"Already shutdown\", exec.isShutdown());\n        semaphore.shutdown();\n    }",
        "begin_line": 85,
        "end_line": 96,
        "comment": "\n     * Tests whether a default executor service is created if no service is\n     * provided.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 75)",
            "(line 88,col 9)-(line 89,col 38)",
            "(line 90,col 9)-(line 91,col 72)",
            "(line 92,col 9)-(line 93,col 70)",
            "(line 94,col 9)-(line 94,col 59)",
            "(line 95,col 9)-(line 95,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testStartTimer()",
        "snippet": "    @Test\n    public void testStartTimer() throws InterruptedException {\n        TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD,\n                UNIT, LIMIT);\n        ScheduledFuture<?> future = semaphore.startTimer();\n        assertNotNull(\"No future returned\", future);\n        Thread.sleep(PERIOD);\n        final int trials = 10;\n        int count = 0;\n        do {\n            Thread.sleep(PERIOD);\n            if (count++ > trials) {\n                fail(\"endOfPeriod() not called!\");\n            }\n        } while (semaphore.getPeriodEnds() <= 0);\n        semaphore.shutdown();\n    }",
        "begin_line": 101,
        "end_line": 117,
        "comment": "\n     * Tests starting the timer.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 104,col 29)",
            "(line 105,col 9)-(line 105,col 59)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 29)",
            "(line 108,col 9)-(line 108,col 30)",
            "(line 109,col 9)-(line 109,col 22)",
            "(line 110,col 9)-(line 115,col 49)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownOwnExecutor()",
        "snippet": "    @Test\n    public void testShutdownOwnExecutor() {\n        TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT);\n        semaphore.shutdown();\n        assertTrue(\"Not shutdown\", semaphore.isShutdown());\n        assertTrue(\"Executor not shutdown\", semaphore.getExecutorService()\n                .isShutdown());\n    }",
        "begin_line": 123,
        "end_line": 130,
        "comment": "\n     * Tests the shutdown() method if the executor belongs to the semaphore. In\n     * this case it has to be shut down.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 75)",
            "(line 126,col 9)-(line 126,col 29)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 129,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorNoTask()",
        "snippet": "    @Test\n    public void testShutdownSharedExecutorNoTask() {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        EasyMock.replay(service);\n        TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,\n                LIMIT);\n        semaphore.shutdown();\n        assertTrue(\"Not shutdown\", semaphore.isShutdown());\n        EasyMock.verify(service);\n    }",
        "begin_line": 136,
        "end_line": 146,
        "comment": "\n     * Tests the shutdown() method for a shared executor service before a task\n     * was started. This should do pretty much nothing.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 139,col 60)",
            "(line 140,col 9)-(line 140,col 33)",
            "(line 141,col 9)-(line 142,col 23)",
            "(line 143,col 9)-(line 143,col 29)",
            "(line 144,col 9)-(line 144,col 59)",
            "(line 145,col 9)-(line 145,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.prepareStartTimer(java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledFuture<?>)",
        "snippet": "    private void prepareStartTimer(ScheduledExecutorService service,\n            ScheduledFuture<?> future) {\n        service.scheduleAtFixedRate((Runnable) EasyMock.anyObject(), EasyMock\n                .eq(PERIOD), EasyMock.eq(PERIOD), EasyMock.eq(UNIT));\n        EasyMock.expectLastCall().andReturn(future);\n    }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "\n     * Prepares an executor service mock to expect the start of the timer.\n     *\n     * @param service the mock\n     * @param future the future\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 157,col 69)",
            "(line 158,col 9)-(line 158,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorTask()",
        "snippet": "    @Test\n    public void testShutdownSharedExecutorTask() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);\n        EasyMock.replay(service, future);\n        TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,\n                PERIOD, UNIT, LIMIT);\n        semaphore.acquire();\n        semaphore.shutdown();\n        assertTrue(\"Not shutdown\", semaphore.isShutdown());\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 165,
        "end_line": 179,
        "comment": "\n     * Tests the shutdown() method for a shared executor after the task was\n     * started. In this case the task must be canceled.\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 79)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 87)",
            "(line 172,col 9)-(line 172,col 41)",
            "(line 173,col 9)-(line 174,col 37)",
            "(line 175,col 9)-(line 175,col 28)",
            "(line 176,col 9)-(line 176,col 29)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownMultipleTimes()",
        "snippet": "    @Test\n    public void testShutdownMultipleTimes() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);\n        EasyMock.replay(service, future);\n        TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,\n                PERIOD, UNIT, LIMIT);\n        semaphore.acquire();\n        for (int i = 0; i < 10; i++) {\n            semaphore.shutdown();\n        }\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 184,
        "end_line": 199,
        "comment": "\n     * Tests multiple invocations of the shutdown() method.\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 187,col 60)",
            "(line 188,col 9)-(line 188,col 79)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 190,col 9)-(line 190,col 87)",
            "(line 191,col 9)-(line 191,col 41)",
            "(line 192,col 9)-(line 193,col 37)",
            "(line 194,col 9)-(line 194,col 28)",
            "(line 195,col 9)-(line 197,col 9)",
            "(line 198,col 9)-(line 198,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireLimit()",
        "snippet": "    @Test\n    public void testAcquireLimit() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.replay(service, future);\n        final int count = 10;\n        CountDownLatch latch = new CountDownLatch(count - 1);\n        TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1);\n        SemaphoreThread t = new SemaphoreThread(semaphore, latch, count,\n                count - 1);\n        semaphore.setLimit(count - 1);\n\n        // start a thread that calls the semaphore count times\n        t.start();\n        latch.await();\n        // now the semaphore's limit should be reached and the thread blocked\n        assertEquals(\"Wrong semaphore count\", count - 1, semaphore\n                .getAcquireCount());\n\n        // this wakes up the thread, it should call the semaphore once more\n        semaphore.endOfPeriod();\n        t.join();\n        assertEquals(\"Wrong semaphore count (2)\", 1, semaphore\n                .getAcquireCount());\n        assertEquals(\"Wrong acquire() count\", count - 1, semaphore\n                .getLastAcquiresPerPeriod());\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 204,
        "end_line": 233,
        "comment": "\n     * Tests the acquire() method if a limit is set.\n     ",
        "child_ranges": [
            "(line 206,col 9)-(line 207,col 60)",
            "(line 208,col 9)-(line 208,col 79)",
            "(line 209,col 9)-(line 209,col 43)",
            "(line 210,col 9)-(line 210,col 41)",
            "(line 211,col 9)-(line 211,col 29)",
            "(line 212,col 9)-(line 212,col 61)",
            "(line 213,col 9)-(line 213,col 80)",
            "(line 214,col 9)-(line 215,col 27)",
            "(line 216,col 9)-(line 216,col 38)",
            "(line 219,col 9)-(line 219,col 18)",
            "(line 220,col 9)-(line 220,col 22)",
            "(line 222,col 9)-(line 223,col 36)",
            "(line 226,col 9)-(line 226,col 32)",
            "(line 227,col 9)-(line 227,col 17)",
            "(line 228,col 9)-(line 229,col 36)",
            "(line 230,col 9)-(line 231,col 45)",
            "(line 232,col 9)-(line 232,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireMultipleThreads()",
        "snippet": "    @Test\n    public void testAcquireMultipleThreads() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.replay(service, future);\n        TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,\n                PERIOD, UNIT, 1);\n        semaphore.latch = new CountDownLatch(1);\n        final int count = 10;\n        SemaphoreThread[] threads = new SemaphoreThread[count];\n        for (int i = 0; i < count; i++) {\n            threads[i] = new SemaphoreThread(semaphore, null, 1, 0);\n            threads[i].start();\n        }\n        for (int i = 0; i < count; i++) {\n            semaphore.latch.await();\n            assertEquals(\"Wrong count\", 1, semaphore.getAcquireCount());\n            semaphore.latch = new CountDownLatch(1);\n            semaphore.endOfPeriod();\n            assertEquals(\"Wrong acquire count\", 1, semaphore\n                    .getLastAcquiresPerPeriod());\n        }\n        for (int i = 0; i < count; i++) {\n            threads[i].join();\n        }\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 241,
        "end_line": 269,
        "comment": "\n     * Tests the acquire() method if more threads are involved than the limit.\n     * This method starts a number of threads that all invoke the semaphore. The\n     * semaphore's limit is set to 1, so in each period only a single thread can\n     * acquire the semaphore.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 244,col 60)",
            "(line 245,col 9)-(line 245,col 79)",
            "(line 246,col 9)-(line 246,col 43)",
            "(line 247,col 9)-(line 247,col 41)",
            "(line 248,col 9)-(line 249,col 33)",
            "(line 250,col 9)-(line 250,col 48)",
            "(line 251,col 9)-(line 251,col 29)",
            "(line 252,col 9)-(line 252,col 63)",
            "(line 253,col 9)-(line 256,col 9)",
            "(line 257,col 9)-(line 264,col 9)",
            "(line 265,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 268,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireNoLimit()",
        "snippet": "    @Test\n    public void testAcquireNoLimit() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.replay(service, future);\n        TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,\n                PERIOD, UNIT, TimedSemaphore.NO_LIMIT);\n        final int count = 1000;\n        CountDownLatch latch = new CountDownLatch(count);\n        SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count);\n        t.start();\n        latch.await();\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 276,
        "end_line": 291,
        "comment": "\n     * Tests the acquire() method if no limit is set. A test thread is started\n     * that calls the semaphore a large number of times. Even if the semaphore's\n     * period does not end, the thread should never block.\n     ",
        "child_ranges": [
            "(line 278,col 9)-(line 279,col 60)",
            "(line 280,col 9)-(line 280,col 79)",
            "(line 281,col 9)-(line 281,col 43)",
            "(line 282,col 9)-(line 282,col 41)",
            "(line 283,col 9)-(line 284,col 55)",
            "(line 285,col 9)-(line 285,col 31)",
            "(line 286,col 9)-(line 286,col 57)",
            "(line 287,col 9)-(line 287,col 80)",
            "(line 288,col 9)-(line 288,col 18)",
            "(line 289,col 9)-(line 289,col 22)",
            "(line 290,col 9)-(line 290,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testPassAfterShutdown()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testPassAfterShutdown() throws InterruptedException {\n        TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT);\n        semaphore.shutdown();\n        semaphore.acquire();\n    }",
        "begin_line": 296,
        "end_line": 301,
        "comment": "\n     * Tries to call acquire() after shutdown(). This should cause an exception.\n     ",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 75)",
            "(line 299,col 9)-(line 299,col 29)",
            "(line 300,col 9)-(line 300,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireMultiplePeriods()",
        "snippet": "    @Test\n    public void testAcquireMultiplePeriods() throws InterruptedException {\n        final int count = 1000;\n        TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(\n                PERIOD / 10, TimeUnit.MILLISECONDS, 1);\n        semaphore.setLimit(count / 4);\n        CountDownLatch latch = new CountDownLatch(count);\n        SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count);\n        t.start();\n        latch.await();\n        semaphore.shutdown();\n        assertTrue(\"End of period not reached\", semaphore.getPeriodEnds() > 0);\n    }",
        "begin_line": 309,
        "end_line": 321,
        "comment": "\n     * Tests a bigger number of invocations that span multiple periods. The\n     * period is set to a very short time. A background thread calls the\n     * semaphore a large number of times. While it runs at last one end of a\n     * period should be reached.\n     ",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 31)",
            "(line 312,col 9)-(line 313,col 55)",
            "(line 314,col 9)-(line 314,col 38)",
            "(line 315,col 9)-(line 315,col 57)",
            "(line 316,col 9)-(line 316,col 80)",
            "(line 317,col 9)-(line 317,col 18)",
            "(line 318,col 9)-(line 318,col 22)",
            "(line 319,col 9)-(line 319,col 29)",
            "(line 320,col 9)-(line 320,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAverageCallsPerPeriod()",
        "snippet": "    @Test\n    public void testGetAverageCallsPerPeriod() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.replay(service, future);\n        TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,\n                LIMIT);\n        semaphore.acquire();\n        semaphore.endOfPeriod();\n        assertEquals(\"Wrong average (1)\", 1.0, semaphore\n                .getAverageCallsPerPeriod(), .005);\n        semaphore.acquire();\n        semaphore.acquire();\n        semaphore.endOfPeriod();\n        assertEquals(\"Wrong average (2)\", 1.5, semaphore\n                .getAverageCallsPerPeriod(), .005);\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 326,
        "end_line": 345,
        "comment": "\n     * Tests the methods for statistics.\n     ",
        "child_ranges": [
            "(line 328,col 9)-(line 329,col 60)",
            "(line 330,col 9)-(line 330,col 79)",
            "(line 331,col 9)-(line 331,col 43)",
            "(line 332,col 9)-(line 332,col 41)",
            "(line 333,col 9)-(line 334,col 23)",
            "(line 335,col 9)-(line 335,col 28)",
            "(line 336,col 9)-(line 336,col 32)",
            "(line 337,col 9)-(line 338,col 51)",
            "(line 339,col 9)-(line 339,col 28)",
            "(line 340,col 9)-(line 340,col 28)",
            "(line 341,col 9)-(line 341,col 32)",
            "(line 342,col 9)-(line 343,col 51)",
            "(line 344,col 9)-(line 344,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAvailablePermits()",
        "snippet": "    @Test\n    public void testGetAvailablePermits() throws InterruptedException {\n        ScheduledExecutorService service = EasyMock\n                .createMock(ScheduledExecutorService.class);\n        ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\n        prepareStartTimer(service, future);\n        EasyMock.replay(service, future);\n        TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,\n                LIMIT);\n        for (int i = 0; i < LIMIT; i++) {\n            assertEquals(\"Wrong available count at \" + i, LIMIT - i, semaphore\n                    .getAvailablePermits());\n            semaphore.acquire();\n        }\n        semaphore.endOfPeriod();\n        assertEquals(\"Wrong available count in new period\", LIMIT, semaphore\n                .getAvailablePermits());\n        EasyMock.verify(service, future);\n    }",
        "begin_line": 350,
        "end_line": 368,
        "comment": "\n     * Tests whether the available non-blocking calls can be queried.\n     ",
        "child_ranges": [
            "(line 352,col 9)-(line 353,col 60)",
            "(line 354,col 9)-(line 354,col 79)",
            "(line 355,col 9)-(line 355,col 43)",
            "(line 356,col 9)-(line 356,col 41)",
            "(line 357,col 9)-(line 358,col 23)",
            "(line 359,col 9)-(line 363,col 9)",
            "(line 364,col 9)-(line 364,col 32)",
            "(line 365,col 9)-(line 366,col 40)",
            "(line 367,col 9)-(line 367,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.TimedSemaphoreTestImpl(long, java.util.concurrent.TimeUnit, int)",
        "snippet": "        public TimedSemaphoreTestImpl(long timePeriod, TimeUnit timeUnit,\n                int limit) {\n            super(timePeriod, timeUnit, limit);\n        }",
        "begin_line": 384,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 386,col 13)-(line 386,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.TimedSemaphoreTestImpl(java.util.concurrent.ScheduledExecutorService, long, java.util.concurrent.TimeUnit, int)",
        "snippet": "        public TimedSemaphoreTestImpl(ScheduledExecutorService service,\n                long timePeriod, TimeUnit timeUnit, int limit) {\n            super(service, timePeriod, timeUnit, limit);\n        }",
        "begin_line": 389,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 391,col 13)-(line 391,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.getPeriodEnds()",
        "snippet": "        public int getPeriodEnds() {\n            synchronized (this) {\n                return periodEnds;\n            }\n        }",
        "begin_line": 399,
        "end_line": 403,
        "comment": "\n         * Returns the number of invocations of the endOfPeriod() method.\n         *\n         * @return the endOfPeriod() invocations\n         ",
        "child_ranges": [
            "(line 400,col 13)-(line 402,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.acquire()",
        "snippet": "        @Override\n        public void acquire() throws InterruptedException {\n            super.acquire();\n            if (latch != null) {\n                latch.countDown();\n            }\n        }",
        "begin_line": 408,
        "end_line": 414,
        "comment": "\n         * Invokes the latch if one is set.\n         ",
        "child_ranges": [
            "(line 410,col 13)-(line 410,col 28)",
            "(line 411,col 13)-(line 413,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.endOfPeriod()",
        "snippet": "        @Override\n        protected void endOfPeriod() {\n            super.endOfPeriod();\n            synchronized (this) {\n                periodEnds++;\n            }\n        }",
        "begin_line": 419,
        "end_line": 425,
        "comment": "\n         * Counts the number of invocations.\n         ",
        "child_ranges": [
            "(line 421,col 13)-(line 421,col 32)",
            "(line 422,col 13)-(line 424,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.startTimer()",
        "snippet": "        @Override\n        protected ScheduledFuture<?> startTimer() {\n            return (schedFuture != null) ? schedFuture : super.startTimer();\n        }",
        "begin_line": 430,
        "end_line": 433,
        "comment": "\n         * Either returns the mock future or calls the super method.\n         ",
        "child_ranges": [
            "(line 432,col 13)-(line 432,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.SemaphoreThread.SemaphoreThread(org.apache.commons.lang3.concurrent.TimedSemaphore, java.util.concurrent.CountDownLatch, int, int)",
        "snippet": "        public SemaphoreThread(TimedSemaphore b, CountDownLatch l, int c, int lc) {\n            semaphore = b;\n            latch = l;\n            count = c;\n            latchCount = lc;\n        }",
        "begin_line": 454,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 455,col 13)-(line 455,col 26)",
            "(line 456,col 13)-(line 456,col 22)",
            "(line 457,col 13)-(line 457,col 22)",
            "(line 458,col 13)-(line 458,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
        "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.SemaphoreThread.run()",
        "snippet": "        @Override\n        public void run() {\n            try {\n                for (int i = 0; i < count; i++) {\n                    semaphore.acquire();\n\n                    if (i < latchCount) {\n                        latch.countDown();\n                    }\n                }\n            } catch (InterruptedException iex) {\n                Thread.currentThread().interrupt();\n            }\n        }",
        "begin_line": 466,
        "end_line": 479,
        "comment": "\n         * Calls acquire() on the semaphore for the specified number of times.\n         * Optionally the latch will also be triggered to synchronize with the\n         * main test thread.\n         ",
        "child_ranges": [
            "(line 468,col 13)-(line 478,col 13)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConcurrentExceptionCauseUnchecked()",
        "snippet": "    public void testConcurrentExceptionCauseUnchecked() {\n        try {\n            new ConcurrentException(new RuntimeException());\n            fail(\"Could create ConcurrentException with unchecked cause!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 34,
        "end_line": 41,
        "comment": "\n     * Tests creating a ConcurrentException with a runtime exception as cause.\n     ",
        "child_ranges": [
            "(line 35,col 9)-(line 40,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConcurrentExceptionCauseError()",
        "snippet": "    public void testConcurrentExceptionCauseError() {\n        try {\n            new ConcurrentException(\"An error\", new Error());\n            fail(\"Could create ConcurrentException with an error cause!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 46,
        "end_line": 53,
        "comment": "\n     * Tests creating a ConcurrentException with an error as cause.\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 52,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConcurrentExceptionCauseNull()",
        "snippet": "    public void testConcurrentExceptionCauseNull() {\n        try {\n            new ConcurrentException(null);\n            fail(\"Could create ConcurrentException with null cause!\");\n        } catch (IllegalArgumentException iex) {\n            // ok\n        }\n    }",
        "begin_line": 58,
        "end_line": 65,
        "comment": "\n     * Tests creating a ConcurrentException with null as cause.\n     ",
        "child_ranges": [
            "(line 59,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testExtractCauseNull()",
        "snippet": "    public void testExtractCauseNull() {\n        assertNull(\"Non null result\", ConcurrentUtils.extractCause(null));\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Tests extractCause() for a null exception.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testExtractCauseNullCause()",
        "snippet": "    public void testExtractCauseNullCause() {\n        assertNull(\"Non null result\", ConcurrentUtils\n                .extractCause(new ExecutionException(\"Test\", null)));\n    }",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\n     * Tests extractCause() if the cause of the passed in exception is null.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 79,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testExtractCauseError()",
        "snippet": "    public void testExtractCauseError() {\n        Error err = new AssertionError(\"Test\");\n        try {\n            ConcurrentUtils.extractCause(new ExecutionException(err));\n            fail(\"Error not thrown!\");\n        } catch (Error e) {\n            assertEquals(\"Wrong error\", err, e);\n        }\n    }",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\n     * Tests extractCause() if the cause is an error.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 47)",
            "(line 87,col 9)-(line 92,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testExtractCauseUnchecked()",
        "snippet": "    public void testExtractCauseUnchecked() {\n        RuntimeException rex = new RuntimeException(\"Test\");\n        try {\n            ConcurrentUtils.extractCause(new ExecutionException(rex));\n            fail(\"Runtime exception not thrown!\");\n        } catch (RuntimeException r) {\n            assertEquals(\"Wrong exception\", rex, r);\n        }\n    }",
        "begin_line": 98,
        "end_line": 106,
        "comment": "\n     * Tests extractCause() if the cause is an unchecked exception.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testExtractCauseChecked()",
        "snippet": "    public void testExtractCauseChecked() {\n        Exception ex = new Exception(\"Test\");\n        ConcurrentException cex = ConcurrentUtils\n                .extractCause(new ExecutionException(ex));\n        assertSame(\"Wrong cause\", ex, cex.getCause());\n    }",
        "begin_line": 111,
        "end_line": 116,
        "comment": "\n     * Tests extractCause() if the cause is a checked exception.\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 45)",
            "(line 113,col 9)-(line 114,col 58)",
            "(line 115,col 9)-(line 115,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testHandleCauseError()",
        "snippet": "    public void testHandleCauseError() throws ConcurrentException {\n        Error err = new AssertionError(\"Test\");\n        try {\n            ConcurrentUtils.handleCause(new ExecutionException(err));\n            fail(\"Error not thrown!\");\n        } catch (Error e) {\n            assertEquals(\"Wrong error\", err, e);\n        }\n    }",
        "begin_line": 121,
        "end_line": 129,
        "comment": "\n     * Tests handleCause() if the cause is an error.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 47)",
            "(line 123,col 9)-(line 128,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testHandleCauseUnchecked()",
        "snippet": "    public void testHandleCauseUnchecked() throws ConcurrentException {\n        RuntimeException rex = new RuntimeException(\"Test\");\n        try {\n            ConcurrentUtils.handleCause(new ExecutionException(rex));\n            fail(\"Runtime exception not thrown!\");\n        } catch (RuntimeException r) {\n            assertEquals(\"Wrong exception\", rex, r);\n        }\n    }",
        "begin_line": 134,
        "end_line": 142,
        "comment": "\n     * Tests handleCause() if the cause is an unchecked exception.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 60)",
            "(line 136,col 9)-(line 141,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testHandleCauseChecked()",
        "snippet": "    public void testHandleCauseChecked() {\n        Exception ex = new Exception(\"Test\");\n        try {\n            ConcurrentUtils.handleCause(new ExecutionException(ex));\n            fail(\"ConcurrentException not thrown!\");\n        } catch (ConcurrentException cex) {\n            assertEquals(\"Wrong cause\", ex, cex.getCause());\n        }\n    }",
        "begin_line": 147,
        "end_line": 155,
        "comment": "\n     * Tests handleCause() if the cause is a checked exception.\n     ",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 45)",
            "(line 149,col 9)-(line 154,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testHandleCauseNull()",
        "snippet": "    public void testHandleCauseNull() throws ConcurrentException {\n        ConcurrentUtils.handleCause(null);\n        ConcurrentUtils.handleCause(new ExecutionException(\"Test\", null));\n    }",
        "begin_line": 162,
        "end_line": 165,
        "comment": "\n     * Tests handleCause() for a null parameter or a null cause. In this case\n     * the method should do nothing. We can only test that no exception is\n     * thrown.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConstantFuture_Integer()",
        "snippet": "    public void testConstantFuture_Integer() throws Exception {\n        Integer value = new Integer(5);\n        Future<Integer> test = ConcurrentUtils.constantFuture(value);\n        assertEquals(true, test.isDone());\n        assertSame(value, test.get());\n        assertSame(value, test.get(1000, TimeUnit.SECONDS));\n        assertSame(value, test.get(1000, null));\n        assertEquals(false, test.isCancelled());\n        assertEquals(false, test.cancel(true));\n        assertEquals(false, test.cancel(false));\n    }",
        "begin_line": 171,
        "end_line": 181,
        "comment": "\n     * Tests constant future.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 39)",
            "(line 173,col 9)-(line 173,col 69)",
            "(line 174,col 9)-(line 174,col 42)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 47)",
            "(line 180,col 9)-(line 180,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java",
        "signature": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testConstantFuture_null()",
        "snippet": "    public void testConstantFuture_null() throws Exception {\n        Integer value = null;\n        Future<Integer> test = ConcurrentUtils.constantFuture(value);\n        assertEquals(true, test.isDone());\n        assertSame(value, test.get());\n        assertSame(value, test.get(1000, TimeUnit.SECONDS));\n        assertSame(value, test.get(1000, null));\n        assertEquals(false, test.isCancelled());\n        assertEquals(false, test.cancel(true));\n        assertEquals(false, test.cancel(false));\n    }",
        "begin_line": 186,
        "end_line": 196,
        "comment": "\n     * Tests constant future.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 29)",
            "(line 188,col 9)-(line 188,col 69)",
            "(line 189,col 9)-(line 189,col 42)",
            "(line 190,col 9)-(line 190,col 38)",
            "(line 191,col 9)-(line 191,col 60)",
            "(line 192,col 9)-(line 192,col 48)",
            "(line 193,col 9)-(line 193,col 48)",
            "(line 194,col 9)-(line 194,col 47)",
            "(line 195,col 9)-(line 195,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.checkInitialize(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.BackgroundInitializerTestImpl)",
        "snippet": "    private void checkInitialize(BackgroundInitializerTestImpl init) {\n        try {\n            Integer result = init.get();\n            assertEquals(\"Wrong result\", 1, result.intValue());\n            assertEquals(\"Wrong number of invocations\", 1, init.initializeCalls);\n            assertNotNull(\"No future\", init.getFuture());\n        } catch (ConcurrentException cex) {\n            fail(\"Unexpected exception: \" + cex);\n        }\n    }",
        "begin_line": 34,
        "end_line": 43,
        "comment": "\n     * Helper method for checking whether the initialize() method was correctly\n     * called. start() must already have been invoked.\n     *\n     * @param init the initializer to test\n     ",
        "child_ranges": [
            "(line 35,col 9)-(line 42,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testInitialize()",
        "snippet": "    public void testInitialize() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        init.start();\n        checkInitialize(init);\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "\n     * Tests whether initialize() is invoked.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 81)",
            "(line 50,col 9)-(line 50,col 21)",
            "(line 51,col 9)-(line 51,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorBeforeStart()",
        "snippet": "    public void testGetActiveExecutorBeforeStart() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        assertNull(\"Got an executor\", init.getActiveExecutor());\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "\n     * Tries to obtain the executor before start(). It should not have been\n     * initialized yet.\n     ",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 81)",
            "(line 60,col 9)-(line 60,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorExternal()",
        "snippet": "    public void testGetActiveExecutorExternal() {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        try {\n            BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(\n                    exec);\n            init.start();\n            assertSame(\"Wrong executor\", exec, init.getActiveExecutor());\n            checkInitialize(init);\n        } finally {\n            exec.shutdown();\n        }\n    }",
        "begin_line": 66,
        "end_line": 77,
        "comment": "\n     * Tests whether an external executor is correctly detected.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 67)",
            "(line 68,col 9)-(line 76,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorTemp()",
        "snippet": "    public void testGetActiveExecutorTemp() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        init.start();\n        assertNotNull(\"No active executor\", init.getActiveExecutor());\n        checkInitialize(init);\n    }",
        "begin_line": 82,
        "end_line": 87,
        "comment": "\n     * Tests getActiveExecutor() for a temporary executor.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 81)",
            "(line 84,col 9)-(line 84,col 21)",
            "(line 85,col 9)-(line 85,col 70)",
            "(line 86,col 9)-(line 86,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testInitializeTempExecutor()",
        "snippet": "    public void testInitializeTempExecutor() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        assertTrue(\"Wrong result of start()\", init.start());\n        checkInitialize(init);\n        assertTrue(\"Executor not shutdown\", init.getActiveExecutor()\n                .isShutdown());\n    }",
        "begin_line": 93,
        "end_line": 99,
        "comment": "\n     * Tests the execution of the background task if a temporary executor has to\n     * be created.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 81)",
            "(line 95,col 9)-(line 95,col 60)",
            "(line 96,col 9)-(line 96,col 30)",
            "(line 97,col 9)-(line 98,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutor()",
        "snippet": "    public void testSetExternalExecutor() throws Exception {\n        ExecutorService exec = Executors.newCachedThreadPool();\n        try {\n            BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n            init.setExternalExecutor(exec);\n            assertEquals(\"Wrong executor service\", exec, init\n                    .getExternalExecutor());\n            assertTrue(\"Wrong result of start()\", init.start());\n            assertSame(\"Wrong active executor\", exec, init.getActiveExecutor());\n            checkInitialize(init);\n            assertFalse(\"Executor was shutdown\", exec.isShutdown());\n        } finally {\n            exec.shutdown();\n        }\n    }",
        "begin_line": 105,
        "end_line": 119,
        "comment": "\n     * Tests whether an external executor can be set using the\n     * setExternalExecutor() method.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 63)",
            "(line 107,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutorAfterStart()",
        "snippet": "    public void testSetExternalExecutorAfterStart() throws ConcurrentException {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        init.start();\n        try {\n            init.setExternalExecutor(Executors.newSingleThreadExecutor());\n            fail(\"Could set executor after start()!\");\n        } catch (IllegalStateException istex) {\n            init.get();\n        }\n    }",
        "begin_line": 124,
        "end_line": 133,
        "comment": "\n     * Tests that setting an executor after start() causes an exception.\n     ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 81)",
            "(line 126,col 9)-(line 126,col 21)",
            "(line 127,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testStartMultipleTimes()",
        "snippet": "    public void testStartMultipleTimes() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        assertTrue(\"Wrong result for start()\", init.start());\n        for (int i = 0; i < 10; i++) {\n            assertFalse(\"Could start again\", init.start());\n        }\n        checkInitialize(init);\n    }",
        "begin_line": 139,
        "end_line": 146,
        "comment": "\n     * Tests invoking start() multiple times. Only the first invocation should\n     * have an effect.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 81)",
            "(line 141,col 9)-(line 141,col 61)",
            "(line 142,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetBeforeStart()",
        "snippet": "    public void testGetBeforeStart() throws ConcurrentException {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        try {\n            init.get();\n            fail(\"Could call get() before start()!\");\n        } catch (IllegalStateException istex) {\n            // ok\n        }\n    }",
        "begin_line": 151,
        "end_line": 159,
        "comment": "\n     * Tests calling get() before start(). This should cause an exception.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 81)",
            "(line 153,col 9)-(line 158,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetRuntimeException()",
        "snippet": "    public void testGetRuntimeException() throws Exception {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        RuntimeException rex = new RuntimeException();\n        init.ex = rex;\n        init.start();\n        try {\n            init.get();\n            fail(\"Exception not thrown!\");\n        } catch (Exception ex) {\n            assertEquals(\"Runtime exception not thrown\", rex, ex);\n        }\n    }",
        "begin_line": 165,
        "end_line": 176,
        "comment": "\n     * Tests the get() method if background processing causes a runtime\n     * exception.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 81)",
            "(line 167,col 9)-(line 167,col 54)",
            "(line 168,col 9)-(line 168,col 22)",
            "(line 169,col 9)-(line 169,col 21)",
            "(line 170,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetCheckedException()",
        "snippet": "    public void testGetCheckedException() throws Exception {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        Exception ex = new Exception();\n        init.ex = ex;\n        init.start();\n        try {\n            init.get();\n            fail(\"Exception not thrown!\");\n        } catch (ConcurrentException cex) {\n            assertEquals(\"Exception not thrown\", ex, cex.getCause());\n        }\n    }",
        "begin_line": 182,
        "end_line": 193,
        "comment": "\n     * Tests the get() method if background processing causes a checked\n     * exception.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 81)",
            "(line 184,col 9)-(line 184,col 39)",
            "(line 185,col 9)-(line 185,col 21)",
            "(line 186,col 9)-(line 186,col 21)",
            "(line 187,col 9)-(line 192,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetInterruptedException()",
        "snippet": "    public void testGetInterruptedException() throws Exception {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(\n                exec);\n        final CountDownLatch latch1 = new CountDownLatch(1);\n        init.shouldSleep = true;\n        init.start();\n        final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>();\n        Thread getThread = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    init.get();\n                } catch (ConcurrentException cex) {\n                    if (cex.getCause() instanceof InterruptedException) {\n                        iex.set((InterruptedException) cex.getCause());\n                    }\n                } finally {\n                    assertTrue(\"Thread not interrupted\", isInterrupted());\n                    latch1.countDown();\n                }\n            }\n        };\n        getThread.start();\n        getThread.interrupt();\n        latch1.await();\n        exec.shutdownNow();\n        exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n        assertNotNull(\"No interrupted exception\", iex.get());\n    }",
        "begin_line": 198,
        "end_line": 227,
        "comment": "\n     * Tests the get() method if waiting for the initialization is interrupted.\n     ",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 67)",
            "(line 200,col 9)-(line 201,col 22)",
            "(line 202,col 9)-(line 202,col 60)",
            "(line 203,col 9)-(line 203,col 32)",
            "(line 204,col 9)-(line 204,col 21)",
            "(line 205,col 9)-(line 205,col 102)",
            "(line 206,col 9)-(line 220,col 10)",
            "(line 221,col 9)-(line 221,col 26)",
            "(line 222,col 9)-(line 222,col 30)",
            "(line 223,col 9)-(line 223,col 23)",
            "(line 224,col 9)-(line 224,col 27)",
            "(line 225,col 9)-(line 225,col 69)",
            "(line 226,col 9)-(line 226,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.Anonymous-60d8240b-6bdb-422f-ac95-d728015f4a82.run()",
        "snippet": "            @Override\n            public void run() {\n                try {\n                    init.get();\n                } catch (ConcurrentException cex) {\n                    if (cex.getCause() instanceof InterruptedException) {\n                        iex.set((InterruptedException) cex.getCause());\n                    }\n                } finally {\n                    assertTrue(\"Thread not interrupted\", isInterrupted());\n                    latch1.countDown();\n                }\n            }",
        "begin_line": 207,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 209,col 17)-(line 218,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedFalse()",
        "snippet": "    public void testIsStartedFalse() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        assertFalse(\"Already started\", init.isStarted());\n    }",
        "begin_line": 232,
        "end_line": 235,
        "comment": "\n     * Tests isStarted() before start() was called.\n     ",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 81)",
            "(line 234,col 9)-(line 234,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedTrue()",
        "snippet": "    public void testIsStartedTrue() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        init.start();\n        assertTrue(\"Not started\", init.isStarted());\n    }",
        "begin_line": 240,
        "end_line": 244,
        "comment": "\n     * Tests isStarted() after start().\n     ",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 81)",
            "(line 242,col 9)-(line 242,col 21)",
            "(line 243,col 9)-(line 243,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedAfterGet()",
        "snippet": "    public void testIsStartedAfterGet() {\n        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n        init.start();\n        checkInitialize(init);\n        assertTrue(\"Not started\", init.isStarted());\n    }",
        "begin_line": 249,
        "end_line": 254,
        "comment": "\n     * Tests isStarted() after the background task has finished.\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 81)",
            "(line 251,col 9)-(line 251,col 21)",
            "(line 252,col 9)-(line 252,col 30)",
            "(line 253,col 9)-(line 253,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.BackgroundInitializerTestImpl.BackgroundInitializerTestImpl()",
        "snippet": "        public BackgroundInitializerTestImpl() {\n            super();\n        }",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 272,col 13)-(line 272,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.BackgroundInitializerTestImpl.BackgroundInitializerTestImpl(java.util.concurrent.ExecutorService)",
        "snippet": "        public BackgroundInitializerTestImpl(ExecutorService exec) {\n            super(exec);\n        }",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 276,col 13)-(line 276,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java",
        "signature": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest.BackgroundInitializerTestImpl.initialize()",
        "snippet": "        @Override\n        protected Integer initialize() throws Exception {\n            if (ex != null) {\n                throw ex;\n            }\n            if (shouldSleep) {\n                Thread.sleep(60000L);\n            }\n            return ++initializeCalls;\n        }",
        "begin_line": 283,
        "end_line": 292,
        "comment": "\n         * Records this invocation. Optionally throws an exception or sleeps a\n         * while.\n         ",
        "child_ranges": [
            "(line 285,col 13)-(line 287,col 13)",
            "(line 288,col 13)-(line 290,col 13)",
            "(line 291,col 13)-(line 291,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.bar()",
        "snippet": "        public static String bar() {\n            return \"bar()\";\n        }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 13)-(line 40,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.bar(int)",
        "snippet": "        public static String bar(int i) {\n            return \"bar(int)\";\n        }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 13)-(line 44,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.bar(java.lang.Integer)",
        "snippet": "        public static String bar(Integer i) {\n            return \"bar(Integer)\";\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.bar(double)",
        "snippet": "        public static String bar(double d) {\n            return \"bar(double)\";\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.bar(java.lang.String)",
        "snippet": "        public static String bar(String s) {\n            return \"bar(String)\";\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.bar(java.lang.Object)",
        "snippet": "        public static String bar(Object o) {\n            return \"bar(Object)\";\n        }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 13)-(line 60,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.foo()",
        "snippet": "        public String foo() {\n            return \"foo()\";\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.foo(int)",
        "snippet": "        public String foo(int i) {\n            return \"foo(int)\";\n        }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 13)-(line 68,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.foo(java.lang.Integer)",
        "snippet": "        public String foo(Integer i) {\n            return \"foo(Integer)\";\n        }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 13)-(line 72,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.foo(double)",
        "snippet": "        public String foo(double d) {\n            return \"foo(double)\";\n        }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 13)-(line 76,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.foo(java.lang.String)",
        "snippet": "        public String foo(String s) {\n            return \"foo(String)\";\n        }",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 13)-(line 80,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestBean.foo(java.lang.Object)",
        "snippet": "        public String foo(Object o) {\n            return \"foo(Object)\";\n        }",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 13)-(line 84,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestMutable.getValue()",
        "snippet": "        public Object getValue() {\n            return null;\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.TestMutable.setValue(java.lang.Object)",
        "snippet": "        public void setValue(Object value) {\n        }",
        "begin_line": 93,
        "end_line": 94,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.MethodUtilsTest(java.lang.String)",
        "snippet": "    public MethodUtilsTest(String name) {\n        super(name);\n        classCache = new HashMap<Class<?>, Class<?>[]>();\n    }",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 20)",
            "(line 102,col 9)-(line 102,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        testBean = new TestBean();\n        classCache.clear();\n    }",
        "begin_line": 105,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 22)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 109,col 9)-(line 109,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() throws Exception {\n        assertNotNull(MethodUtils.class.newInstance());\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod()",
        "snippet": "    public void testInvokeMethod() throws Exception {\n        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n                ArrayUtils.EMPTY_CLASS_ARRAY));\n        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n                (Class[]) null));\n        assertEquals(\"foo(String)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                \"\"));\n        assertEquals(\"foo(Object)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                new Object()));\n        assertEquals(\"foo(Object)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                Boolean.TRUE));\n        assertEquals(\"foo(Integer)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                NumberUtils.INTEGER_ONE));\n        assertEquals(\"foo(int)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                NumberUtils.BYTE_ONE));\n        assertEquals(\"foo(double)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                NumberUtils.LONG_ONE));\n        assertEquals(\"foo(double)\", MethodUtils.invokeMethod(testBean, \"foo\",\n                NumberUtils.DOUBLE_ONE));\n    }",
        "begin_line": 116,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 118,col 47)",
            "(line 119,col 9)-(line 120,col 33)",
            "(line 121,col 9)-(line 122,col 21)",
            "(line 123,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 126,col 31)",
            "(line 127,col 9)-(line 128,col 42)",
            "(line 129,col 9)-(line 130,col 39)",
            "(line 131,col 9)-(line 132,col 39)",
            "(line 133,col 9)-(line 134,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactMethod()",
        "snippet": "    public void testInvokeExactMethod() throws Exception {\n        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n                ArrayUtils.EMPTY_CLASS_ARRAY));\n        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n                (Class[]) null));\n        assertEquals(\"foo(String)\", MethodUtils.invokeExactMethod(testBean,\n                \"foo\", \"\"));\n        assertEquals(\"foo(Object)\", MethodUtils.invokeExactMethod(testBean,\n                \"foo\", new Object()));\n        assertEquals(\"foo(Integer)\", MethodUtils.invokeExactMethod(testBean,\n                \"foo\", NumberUtils.INTEGER_ONE));\n        assertEquals(\"foo(double)\", MethodUtils.invokeExactMethod(testBean,\n                \"foo\", new Object[] { NumberUtils.DOUBLE_ONE },\n                new Class[] { Double.TYPE }));\n\n        try {\n            MethodUtils\n                    .invokeExactMethod(testBean, \"foo\", NumberUtils.BYTE_ONE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n        try {\n            MethodUtils\n                    .invokeExactMethod(testBean, \"foo\", NumberUtils.LONG_ONE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n        try {\n            MethodUtils.invokeExactMethod(testBean, \"foo\", Boolean.TRUE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n    }",
        "begin_line": 137,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 139,col 47)",
            "(line 140,col 9)-(line 141,col 33)",
            "(line 142,col 9)-(line 143,col 28)",
            "(line 144,col 9)-(line 145,col 38)",
            "(line 146,col 9)-(line 147,col 49)",
            "(line 148,col 9)-(line 150,col 46)",
            "(line 152,col 9)-(line 157,col 9)",
            "(line 158,col 9)-(line 163,col 9)",
            "(line 164,col 9)-(line 168,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod()",
        "snippet": "    public void testInvokeStaticMethod() throws Exception {\n        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n                \"bar\", ArrayUtils.EMPTY_CLASS_ARRAY));\n        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n                \"bar\", (Class[]) null));\n        assertEquals(\"bar(String)\", MethodUtils.invokeStaticMethod(\n                TestBean.class, \"bar\", \"\"));\n        assertEquals(\"bar(Object)\", MethodUtils.invokeStaticMethod(\n                TestBean.class, \"bar\", new Object()));\n        assertEquals(\"bar(Object)\", MethodUtils.invokeStaticMethod(\n                TestBean.class, \"bar\", Boolean.TRUE));\n        assertEquals(\"bar(Integer)\", MethodUtils.invokeStaticMethod(\n                TestBean.class, \"bar\", NumberUtils.INTEGER_ONE));\n        assertEquals(\"bar(int)\", MethodUtils.invokeStaticMethod(TestBean.class,\n                \"bar\", NumberUtils.BYTE_ONE));\n        assertEquals(\"bar(double)\", MethodUtils.invokeStaticMethod(\n                TestBean.class, \"bar\", NumberUtils.LONG_ONE));\n        assertEquals(\"bar(double)\", MethodUtils.invokeStaticMethod(\n                TestBean.class, \"bar\", NumberUtils.DOUBLE_ONE));\n    }",
        "begin_line": 171,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 173,col 54)",
            "(line 174,col 9)-(line 175,col 40)",
            "(line 176,col 9)-(line 177,col 44)",
            "(line 178,col 9)-(line 179,col 54)",
            "(line 180,col 9)-(line 181,col 54)",
            "(line 182,col 9)-(line 183,col 65)",
            "(line 184,col 9)-(line 185,col 46)",
            "(line 186,col 9)-(line 187,col 62)",
            "(line 188,col 9)-(line 189,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactStaticMethod()",
        "snippet": "    public void testInvokeExactStaticMethod() throws Exception {\n        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n                \"bar\", ArrayUtils.EMPTY_CLASS_ARRAY));\n        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n                \"bar\", (Class[]) null));\n        assertEquals(\"bar(String)\", MethodUtils.invokeExactStaticMethod(\n                TestBean.class, \"bar\", \"\"));\n        assertEquals(\"bar(Object)\", MethodUtils.invokeExactStaticMethod(\n                TestBean.class, \"bar\", new Object()));\n        assertEquals(\"bar(Integer)\", MethodUtils.invokeExactStaticMethod(\n                TestBean.class, \"bar\", NumberUtils.INTEGER_ONE));\n        assertEquals(\"bar(double)\", MethodUtils.invokeExactStaticMethod(\n                TestBean.class, \"bar\", new Object[] { NumberUtils.DOUBLE_ONE },\n                new Class[] { Double.TYPE }));\n\n        try {\n            MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\",\n                    NumberUtils.BYTE_ONE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n        try {\n            MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\",\n                    NumberUtils.LONG_ONE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n        try {\n            MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\",\n                    Boolean.TRUE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n    }",
        "begin_line": 192,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 194,col 54)",
            "(line 195,col 9)-(line 196,col 40)",
            "(line 197,col 9)-(line 198,col 44)",
            "(line 199,col 9)-(line 200,col 54)",
            "(line 201,col 9)-(line 202,col 65)",
            "(line 203,col 9)-(line 205,col 46)",
            "(line 207,col 9)-(line 212,col 9)",
            "(line 213,col 9)-(line 218,col 9)",
            "(line 219,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleInterfaceMethod()",
        "snippet": "    public void testGetAccessibleInterfaceMethod() throws Exception {\n\n        Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n        for (int i = 0; i < p.length; i++) {\n            Method method = TestMutable.class.getMethod(\"getValue\", p[i]);\n            Method accessibleMethod = MethodUtils.getAccessibleMethod(method);\n            assertNotSame(accessibleMethod, method);\n            assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\n        }\n    }",
        "begin_line": 227,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 64)",
            "(line 230,col 9)-(line 235,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleInterfaceMethodFromDescription()",
        "snippet": "    public void testGetAccessibleInterfaceMethodFromDescription()\n            throws Exception {\n        Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n        for (int i = 0; i < p.length; i++) {\n            Method accessibleMethod = MethodUtils.getAccessibleMethod(\n                    TestMutable.class, \"getValue\", p[i]);\n            assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\n        }\n    }",
        "begin_line": 238,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 64)",
            "(line 241,col 9)-(line 245,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessiblePublicMethod()",
        "snippet": "    public void testGetAccessiblePublicMethod() throws Exception {\n        assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n                MutableObject.class.getMethod(\"getValue\",\n                        ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());\n    }",
        "begin_line": 248,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 251,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessiblePublicMethodFromDescription()",
        "snippet": "    public void testGetAccessiblePublicMethodFromDescription() throws Exception {\n        assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n                MutableObject.class, \"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY)\n                .getDeclaringClass());\n    }",
        "begin_line": 254,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 257,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod()",
        "snippet": "    public void testGetMatchingAccessibleMethod() throws Exception {\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                null, ArrayUtils.EMPTY_CLASS_ARRAY);\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(String.class), singletonArray(String.class));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Object.class), singletonArray(Object.class));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Boolean.class), singletonArray(Object.class));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Byte.class), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Short.class), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Short.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Character.class), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Character.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Integer.class), singletonArray(Integer.class));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Long.class), singletonArray(Double.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Long.TYPE), singletonArray(Double.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Float.class), singletonArray(Double.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Float.TYPE), singletonArray(Double.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Double.class), singletonArray(Double.TYPE));\n        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n                singletonArray(Double.TYPE), singletonArray(Double.TYPE));\n    }",
        "begin_line": 260,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 262,col 76)",
            "(line 263,col 9)-(line 264,col 52)",
            "(line 265,col 9)-(line 266,col 76)",
            "(line 267,col 9)-(line 268,col 76)",
            "(line 269,col 9)-(line 270,col 77)",
            "(line 271,col 9)-(line 272,col 74)",
            "(line 273,col 9)-(line 274,col 73)",
            "(line 275,col 9)-(line 276,col 75)",
            "(line 277,col 9)-(line 278,col 74)",
            "(line 279,col 9)-(line 280,col 79)",
            "(line 281,col 9)-(line 282,col 78)",
            "(line 283,col 9)-(line 284,col 78)",
            "(line 285,col 9)-(line 286,col 76)",
            "(line 287,col 9)-(line 288,col 73)",
            "(line 289,col 9)-(line 290,col 72)",
            "(line 291,col 9)-(line 292,col 74)",
            "(line 293,col 9)-(line 294,col 73)",
            "(line 295,col 9)-(line 296,col 75)",
            "(line 297,col 9)-(line 298,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.expectMatchingAccessibleMethodParameterTypes(java.lang.Class<?>, java.lang.String, java.lang.Class<?>[], java.lang.Class<?>[])",
        "snippet": "    private void expectMatchingAccessibleMethodParameterTypes(Class<?> cls,\n            String methodName, Class<?>[] requestTypes, Class<?>[] actualTypes) {\n        Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,\n                requestTypes);\n        assertTrue(toString(m.getParameterTypes()) + \" not equals \"\n                + toString(actualTypes), Arrays.equals(actualTypes, m\n                .getParameterTypes()));\n    }",
        "begin_line": 301,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 304,col 30)",
            "(line 305,col 9)-(line 307,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.toString(java.lang.Class<?>[])",
        "snippet": "    private String toString(Class<?>[] c) {\n        return Arrays.asList(c).toString();\n    }",
        "begin_line": 310,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.MethodUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.MethodUtilsTest.singletonArray(java.lang.Class<?>)",
        "snippet": "    private Class<?>[] singletonArray(Class<?> c) {\n        Class<?>[] result = classCache.get(c);\n        if (result == null) {\n            result = new Class[] { c };\n            classCache.put(c, result);\n        }\n        return result;\n    }",
        "begin_line": 314,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 319,col 9)",
            "(line 320,col 9)-(line 320,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        stringParentField = GenericTypeHolder.class.getDeclaredField(\"stringParent\");\n        integerParentField = GenericTypeHolder.class.getDeclaredField(\"integerParent\");\n        foosField = GenericTypeHolder.class.getDeclaredField(\"foos\");\n        barParentsField = GenericTypeHolder.class.getDeclaredField(\"barParents\");\n        genericParentT = GenericParent.class.getTypeParameters()[0];\n        listType = List.class.getTypeParameters()[0];\n        iterableType = Iterable.class.getTypeParameters()[0];\n    }",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 85)",
            "(line 46,col 9)-(line 46,col 87)",
            "(line 47,col 9)-(line 47,col 69)",
            "(line 48,col 9)-(line 48,col 81)",
            "(line 49,col 9)-(line 49,col 68)",
            "(line 50,col 9)-(line 50,col 53)",
            "(line 51,col 9)-(line 51,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawTypeClass()",
        "snippet": "    @Test\n    public void testGetRawTypeClass() throws Exception {\n        assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawTypeParameterizedType()",
        "snippet": "    @Test\n    public void testGetRawTypeParameterizedType() throws Exception {\n        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n                stringParentField.getGenericType()));\n        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n                integerParentField.getGenericType()));\n        assertEquals(List.class, TypeUtils.getRawType(GenericTypeHolder.class, foosField\n                .getGenericType()));\n    }",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 62,col 53)",
            "(line 63,col 9)-(line 64,col 54)",
            "(line 65,col 9)-(line 66,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawTypeTypeVariable()",
        "snippet": "    @Test\n    public void testGetRawTypeTypeVariable() throws Exception {\n        assertEquals(String.class, TypeUtils.getRawType(StringParameterizedChild.class,\n                genericParentT));\n        assertEquals(String.class, TypeUtils.getRawType(stringParentField.getGenericType(),\n                genericParentT));\n        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), iterableType));\n        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), listType));\n    }",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 72,col 33)",
            "(line 73,col 9)-(line 74,col 33)",
            "(line 75,col 9)-(line 75,col 96)",
            "(line 76,col 9)-(line 76,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawTypeUnresolvableTypeVariable()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testGetRawTypeUnresolvableTypeVariable() {\n        TypeUtils.getRawType(GenericParent.class, genericParentT);\n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawTypeGenericArray()",
        "snippet": "    @Test\n    public void testGetRawTypeGenericArray() throws Exception {\n        assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class,\n                barParentsField.getGenericType()));\n    }",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 87,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.TestBean()",
        "snippet": "        public TestBean() {\n            toString = \"()\";\n        }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 13)-(line 39,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.TestBean(int)",
        "snippet": "        public TestBean(int i) {\n            toString = \"(int)\";\n        }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 13)-(line 43,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.TestBean(java.lang.Integer)",
        "snippet": "        public TestBean(Integer i) {\n            toString = \"(Integer)\";\n        }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 13)-(line 47,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.TestBean(double)",
        "snippet": "        public TestBean(double d) {\n            toString = \"(double)\";\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.TestBean(java.lang.String)",
        "snippet": "        public TestBean(String s) {\n            toString = \"(String)\";\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.TestBean(java.lang.Object)",
        "snippet": "        public TestBean(Object o) {\n            toString = \"(Object)\";\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.TestBean.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return toString;\n        }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.PrivateClass.PrivateClass()",
        "snippet": "        @SuppressWarnings(\"unused\")\n        public PrivateClass() {\n        }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.ConstructorUtilsTest(java.lang.String)",
        "snippet": "    public ConstructorUtilsTest(String name) {\n        super(name);\n        classCache = new HashMap<Class<?>, Class<?>[]>();\n    }",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)",
            "(line 78,col 9)-(line 78,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        classCache.clear();\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 22)",
            "(line 84,col 9)-(line 84,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() throws Exception {\n        assertNotNull(MethodUtils.class.newInstance());\n    }",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor()",
        "snippet": "    public void testInvokeConstructor() throws Exception {\n        assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class,\n                ArrayUtils.EMPTY_CLASS_ARRAY).toString());\n        assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class,\n                (Class[]) null).toString());\n        assertEquals(\"(String)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, \"\").toString());\n        assertEquals(\"(Object)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, new Object()).toString());\n        assertEquals(\"(Object)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, Boolean.TRUE).toString());\n        assertEquals(\"(Integer)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, NumberUtils.INTEGER_ONE).toString());\n        assertEquals(\"(int)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, NumberUtils.BYTE_ONE).toString());\n        assertEquals(\"(double)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, NumberUtils.LONG_ONE).toString());\n        assertEquals(\"(double)\", ConstructorUtils.invokeConstructor(\n                TestBean.class, NumberUtils.DOUBLE_ONE).toString());\n    }",
        "begin_line": 91,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 93,col 58)",
            "(line 94,col 9)-(line 95,col 44)",
            "(line 96,col 9)-(line 97,col 48)",
            "(line 98,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 103,col 69)",
            "(line 104,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 107,col 66)",
            "(line 108,col 9)-(line 109,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor()",
        "snippet": "    public void testInvokeExactConstructor() throws Exception {\n        assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(\n                TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY).toString());\n        assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(\n                TestBean.class, (Class[]) null).toString());\n        assertEquals(\"(String)\", ConstructorUtils.invokeExactConstructor(\n                TestBean.class, \"\").toString());\n        assertEquals(\"(Object)\", ConstructorUtils.invokeExactConstructor(\n                TestBean.class, new Object()).toString());\n        assertEquals(\"(Integer)\", ConstructorUtils.invokeExactConstructor(\n                TestBean.class, NumberUtils.INTEGER_ONE).toString());\n        assertEquals(\"(double)\", ConstructorUtils.invokeExactConstructor(\n                TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE },\n                new Class[] { Double.TYPE }).toString());\n\n        try {\n            ConstructorUtils.invokeExactConstructor(TestBean.class,\n                    NumberUtils.BYTE_ONE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n        try {\n            ConstructorUtils.invokeExactConstructor(TestBean.class,\n                    NumberUtils.LONG_ONE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n        try {\n            ConstructorUtils.invokeExactConstructor(TestBean.class,\n                    Boolean.TRUE);\n            fail(\"should throw NoSuchMethodException\");\n        } catch (NoSuchMethodException e) {\n        }\n    }",
        "begin_line": 112,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 114,col 74)",
            "(line 115,col 9)-(line 116,col 60)",
            "(line 117,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 120,col 58)",
            "(line 121,col 9)-(line 122,col 69)",
            "(line 123,col 9)-(line 125,col 57)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 138,col 9)",
            "(line 139,col 9)-(line 144,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor()",
        "snippet": "    public void testGetAccessibleConstructor() throws Exception {\n        assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class\n                .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n        assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class\n                .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n    }",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 149,col 64)",
            "(line 150,col 9)-(line 151,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructorFromDescription()",
        "snippet": "    public void testGetAccessibleConstructorFromDescription() throws Exception {\n        assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,\n                ArrayUtils.EMPTY_CLASS_ARRAY));\n        assertNull(ConstructorUtils.getAccessibleConstructor(\n                PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));\n    }",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 156,col 47)",
            "(line 157,col 9)-(line 158,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod()",
        "snippet": "    public void testGetMatchingAccessibleMethod() throws Exception {\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null,\n                ArrayUtils.EMPTY_CLASS_ARRAY);\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(String.class), singletonArray(String.class));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Object.class), singletonArray(Object.class));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Boolean.class), singletonArray(Object.class));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Byte.class), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Short.class), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Short.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Character.class), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Character.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Integer.class), singletonArray(Integer.class));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Long.class), singletonArray(Double.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Long.TYPE), singletonArray(Double.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Float.class), singletonArray(Double.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Float.TYPE), singletonArray(Double.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Double.class), singletonArray(Double.TYPE));\n        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                singletonArray(Double.TYPE), singletonArray(Double.TYPE));\n    }",
        "begin_line": 161,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 163,col 76)",
            "(line 164,col 9)-(line 165,col 46)",
            "(line 166,col 9)-(line 167,col 76)",
            "(line 168,col 9)-(line 169,col 76)",
            "(line 170,col 9)-(line 171,col 77)",
            "(line 172,col 9)-(line 173,col 74)",
            "(line 174,col 9)-(line 175,col 73)",
            "(line 176,col 9)-(line 177,col 75)",
            "(line 178,col 9)-(line 179,col 74)",
            "(line 180,col 9)-(line 181,col 79)",
            "(line 182,col 9)-(line 183,col 78)",
            "(line 184,col 9)-(line 185,col 78)",
            "(line 186,col 9)-(line 187,col 76)",
            "(line 188,col 9)-(line 189,col 73)",
            "(line 190,col 9)-(line 191,col 72)",
            "(line 192,col 9)-(line 193,col 74)",
            "(line 194,col 9)-(line 195,col 73)",
            "(line 196,col 9)-(line 197,col 75)",
            "(line 198,col 9)-(line 199,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.expectMatchingAccessibleConstructorParameterTypes(java.lang.Class<?>, java.lang.Class<?>[], java.lang.Class<?>[])",
        "snippet": "    private void expectMatchingAccessibleConstructorParameterTypes(Class<?> cls,\n            Class<?>[] requestTypes, Class<?>[] actualTypes) {\n        Constructor<?> c = ConstructorUtils.getMatchingAccessibleConstructor(cls,\n                requestTypes);\n        assertTrue(toString(c.getParameterTypes()) + \" not equals \"\n                + toString(actualTypes), Arrays.equals(actualTypes, c\n                .getParameterTypes()));\n    }",
        "begin_line": 202,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 205,col 30)",
            "(line 206,col 9)-(line 208,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.toString(java.lang.Class<?>[])",
        "snippet": "    private String toString(Class<?>[] c) {\n        return Arrays.asList(c).toString();\n    }",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.ConstructorUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.ConstructorUtilsTest.singletonArray(java.lang.Class<?>)",
        "snippet": "    private Class<?>[] singletonArray(Class<?> c) {\n        Class<?>[] result = classCache.get(c);\n        if (result == null) {\n            result = new Class[] { c };\n            classCache.put(c, result);\n        }\n        return result;\n    }",
        "begin_line": 215,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 46)",
            "(line 217,col 9)-(line 220,col 9)",
            "(line 221,col 9)-(line 221,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        StaticContainer.reset();\n        publicChild = new PublicChild();\n        publiclyShadowedChild = new PubliclyShadowedChild();\n        privatelyShadowedChild = new PrivatelyShadowedChild();\n    }",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 22)",
            "(line 53,col 9)-(line 53,col 32)",
            "(line 54,col 9)-(line 54,col 40)",
            "(line 55,col 9)-(line 55,col 60)",
            "(line 56,col 9)-(line 56,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField()",
        "snippet": "    public void testGetField() {\n        assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, \"VALUE\").getDeclaringClass());\n        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\").getDeclaringClass());\n        assertNull(FieldUtils.getField(PublicChild.class, \"b\"));\n        assertNull(FieldUtils.getField(PublicChild.class, \"i\"));\n        assertNull(FieldUtils.getField(PublicChild.class, \"d\"));\n        assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, \"VALUE\").getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"s\")\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"b\")\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"i\")\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"d\")\n                .getDeclaringClass());\n        assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"VALUE\").getDeclaringClass());\n        assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, \"s\").getDeclaringClass());\n        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"b\"));\n        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"i\"));\n        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"d\"));\n    }",
        "begin_line": 59,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 101)",
            "(line 61,col 9)-(line 61,col 99)",
            "(line 62,col 9)-(line 62,col 64)",
            "(line 63,col 9)-(line 63,col 64)",
            "(line 64,col 9)-(line 64,col 64)",
            "(line 65,col 9)-(line 65,col 111)",
            "(line 66,col 9)-(line 67,col 38)",
            "(line 68,col 9)-(line 69,col 38)",
            "(line 70,col 9)-(line 71,col 38)",
            "(line 72,col 9)-(line 73,col 38)",
            "(line 74,col 9)-(line 74,col 112)",
            "(line 75,col 9)-(line 75,col 110)",
            "(line 76,col 9)-(line 76,col 75)",
            "(line 77,col 9)-(line 77,col 75)",
            "(line 78,col 9)-(line 78,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccess()",
        "snippet": "    public void testGetFieldForceAccess() {\n        assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, \"VALUE\", true).getDeclaringClass());\n        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\", true).getDeclaringClass());\n        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"b\", true).getDeclaringClass());\n        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"i\", true).getDeclaringClass());\n        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"d\", true).getDeclaringClass());\n        assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, \"VALUE\", true).getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"s\", true)\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"b\", true)\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"i\", true)\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"d\", true)\n                .getDeclaringClass());\n        assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"VALUE\", true).getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"s\", true)\n                .getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"b\", true)\n                .getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"i\", true)\n                .getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"d\", true)\n                .getDeclaringClass());\n    }",
        "begin_line": 81,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 115)",
            "(line 83,col 9)-(line 83,col 105)",
            "(line 84,col 9)-(line 84,col 105)",
            "(line 85,col 9)-(line 85,col 105)",
            "(line 86,col 9)-(line 86,col 105)",
            "(line 87,col 9)-(line 87,col 117)",
            "(line 88,col 9)-(line 89,col 38)",
            "(line 90,col 9)-(line 91,col 38)",
            "(line 92,col 9)-(line 93,col 38)",
            "(line 94,col 9)-(line 95,col 38)",
            "(line 96,col 9)-(line 96,col 118)",
            "(line 97,col 9)-(line 98,col 38)",
            "(line 99,col 9)-(line 100,col 38)",
            "(line 101,col 9)-(line 102,col 38)",
            "(line 103,col 9)-(line 104,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredField()",
        "snippet": "    public void testGetDeclaredField() {\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\"));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\"));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"b\"));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"i\"));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"d\"));\n        assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"VALUE\"));\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"s\")\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"b\")\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"i\")\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"d\")\n                .getDeclaringClass());\n        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"VALUE\"));\n        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"s\"));\n        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\"));\n        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\"));\n        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\"));\n    }",
        "begin_line": 107,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 76)",
            "(line 109,col 9)-(line 109,col 72)",
            "(line 110,col 9)-(line 110,col 72)",
            "(line 111,col 9)-(line 111,col 72)",
            "(line 112,col 9)-(line 112,col 72)",
            "(line 113,col 9)-(line 113,col 86)",
            "(line 114,col 9)-(line 115,col 38)",
            "(line 116,col 9)-(line 117,col 38)",
            "(line 118,col 9)-(line 119,col 38)",
            "(line 120,col 9)-(line 121,col 38)",
            "(line 122,col 9)-(line 122,col 87)",
            "(line 123,col 9)-(line 123,col 83)",
            "(line 124,col 9)-(line 124,col 83)",
            "(line 125,col 9)-(line 125,col 83)",
            "(line 126,col 9)-(line 126,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccess()",
        "snippet": "    public void testGetDeclaredFieldForceAccess() {\n        assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\", true)\n                .getDeclaringClass());\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\", true));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"b\", true));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"i\", true));\n        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"d\", true));\n        assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"VALUE\", true));\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"s\", true)\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"b\", true)\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"i\", true)\n                .getDeclaringClass());\n        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"d\", true)\n                .getDeclaringClass());\n        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"VALUE\", true));\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"s\", true)\n                .getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\", true)\n                .getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\", true)\n                .getDeclaringClass());\n        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\", true)\n                .getDeclaringClass());\n    }",
        "begin_line": 129,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 131,col 38)",
            "(line 132,col 9)-(line 132,col 78)",
            "(line 133,col 9)-(line 133,col 78)",
            "(line 134,col 9)-(line 134,col 78)",
            "(line 135,col 9)-(line 135,col 78)",
            "(line 136,col 9)-(line 136,col 92)",
            "(line 137,col 9)-(line 138,col 38)",
            "(line 139,col 9)-(line 140,col 38)",
            "(line 141,col 9)-(line 142,col 38)",
            "(line 143,col 9)-(line 144,col 38)",
            "(line 145,col 9)-(line 145,col 93)",
            "(line 146,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 149,col 38)",
            "(line 150,col 9)-(line 151,col 38)",
            "(line 152,col 9)-(line 153,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField()",
        "snippet": "    public void testReadStaticField() throws Exception {\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n    }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess()",
        "snippet": "    public void testReadStaticFieldForceAccess() throws Exception {\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, \"VALUE\")));\n    }",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 101)",
            "(line 162,col 9)-(line 162,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField()",
        "snippet": "    public void testReadNamedStaticField() throws Exception {\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\"));\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\"));\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, \"VALUE\"));\n    }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 80)",
            "(line 167,col 9)-(line 167,col 98)",
            "(line 168,col 9)-(line 168,col 99)",
            "(line 169,col 9)-(line 169,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess()",
        "snippet": "    public void testReadNamedStaticFieldForceAccess() throws Exception {\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\", true));\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\n        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\n        assertEquals(\"child\", FieldUtils.readStaticField(PublicChild.class, \"VALUE\", true));\n    }",
        "begin_line": 172,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 86)",
            "(line 174,col 9)-(line 174,col 104)",
            "(line 175,col 9)-(line 175,col 105)",
            "(line 176,col 9)-(line 176,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticField()",
        "snippet": "    public void testReadDeclaredNamedStaticField() throws Exception {\n        assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\"));\n        try {\n            assertEquals(\"child\", FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, \"VALUE\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 179,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 88)",
            "(line 181,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 198,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticFieldForceAccess()",
        "snippet": "    public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception {\n        assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\", true));\n        assertEquals(\"child\", FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\", true));\n        try {\n            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 201,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 94)",
            "(line 203,col 9)-(line 203,col 100)",
            "(line 204,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 215,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField()",
        "snippet": "    public void testReadField() throws Exception {\n        Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\n        assertEquals(\"s\", FieldUtils.readField(parentS, publicChild));\n        assertEquals(\"s\", FieldUtils.readField(parentS, publiclyShadowedChild));\n        assertEquals(\"s\", FieldUtils.readField(parentS, privatelyShadowedChild));\n        Field parentB = FieldUtils.getDeclaredField(parentClass, \"b\", true);\n        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));\n        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));\n        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));\n        Field parentI = FieldUtils.getDeclaredField(parentClass, \"i\", true);\n        assertEquals(I0, FieldUtils.readField(parentI, publicChild));\n        assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));\n        assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));\n        Field parentD = FieldUtils.getDeclaredField(parentClass, \"d\", true);\n        assertEquals(D0, FieldUtils.readField(parentD, publicChild));\n        assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));\n        assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));\n    }",
        "begin_line": 218,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 70)",
            "(line 220,col 9)-(line 220,col 70)",
            "(line 221,col 9)-(line 221,col 80)",
            "(line 222,col 9)-(line 222,col 81)",
            "(line 223,col 9)-(line 223,col 76)",
            "(line 224,col 9)-(line 224,col 80)",
            "(line 225,col 9)-(line 225,col 90)",
            "(line 226,col 9)-(line 226,col 91)",
            "(line 227,col 9)-(line 227,col 76)",
            "(line 228,col 9)-(line 228,col 69)",
            "(line 229,col 9)-(line 229,col 79)",
            "(line 230,col 9)-(line 230,col 80)",
            "(line 231,col 9)-(line 231,col 76)",
            "(line 232,col 9)-(line 232,col 69)",
            "(line 233,col 9)-(line 233,col 79)",
            "(line 234,col 9)-(line 234,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadFieldForceAccess()",
        "snippet": "    public void testReadFieldForceAccess() throws Exception {\n        Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\n        parentS.setAccessible(false);\n        assertEquals(\"s\", FieldUtils.readField(parentS, publicChild, true));\n        assertEquals(\"s\", FieldUtils.readField(parentS, publiclyShadowedChild, true));\n        assertEquals(\"s\", FieldUtils.readField(parentS, privatelyShadowedChild, true));\n        Field parentB = FieldUtils.getDeclaredField(parentClass, \"b\", true);\n        parentB.setAccessible(false);\n        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));\n        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));\n        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));\n        Field parentI = FieldUtils.getDeclaredField(parentClass, \"i\", true);\n        parentI.setAccessible(false);\n        assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));\n        assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));\n        assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));\n        Field parentD = FieldUtils.getDeclaredField(parentClass, \"d\", true);\n        parentD.setAccessible(false);\n        assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));\n        assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));\n        assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));\n    }",
        "begin_line": 237,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 70)",
            "(line 239,col 9)-(line 239,col 37)",
            "(line 240,col 9)-(line 240,col 76)",
            "(line 241,col 9)-(line 241,col 86)",
            "(line 242,col 9)-(line 242,col 87)",
            "(line 243,col 9)-(line 243,col 76)",
            "(line 244,col 9)-(line 244,col 37)",
            "(line 245,col 9)-(line 245,col 86)",
            "(line 246,col 9)-(line 246,col 96)",
            "(line 247,col 9)-(line 247,col 97)",
            "(line 248,col 9)-(line 248,col 76)",
            "(line 249,col 9)-(line 249,col 37)",
            "(line 250,col 9)-(line 250,col 75)",
            "(line 251,col 9)-(line 251,col 85)",
            "(line 252,col 9)-(line 252,col 86)",
            "(line 253,col 9)-(line 253,col 76)",
            "(line 254,col 9)-(line 254,col 37)",
            "(line 255,col 9)-(line 255,col 75)",
            "(line 256,col 9)-(line 256,col 85)",
            "(line 257,col 9)-(line 257,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField()",
        "snippet": "    public void testReadNamedField() throws Exception {\n        assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\"));\n        assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n        assertEquals(\"s\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\n        try {\n            assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, \"b\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\n        try {\n            assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(I0, FieldUtils.readField(publicChild, \"i\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, \"i\"));\n        try {\n            assertEquals(I0, FieldUtils.readField(privatelyShadowedChild, \"i\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(D0, FieldUtils.readField(publicChild, \"d\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\"));\n        try {\n            assertEquals(D0, FieldUtils.readField(privatelyShadowedChild, \"d\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 260,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 66)",
            "(line 262,col 9)-(line 262,col 77)",
            "(line 263,col 9)-(line 263,col 77)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 85)",
            "(line 271,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 282,col 9)",
            "(line 283,col 9)-(line 283,col 75)",
            "(line 284,col 9)-(line 289,col 9)",
            "(line 290,col 9)-(line 295,col 9)",
            "(line 296,col 9)-(line 296,col 75)",
            "(line 297,col 9)-(line 302,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess()",
        "snippet": "    public void testReadNamedFieldForceAccess() throws Exception {\n        assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\", true));\n        assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n        assertEquals(\"ss\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\n        assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, \"b\", true));\n        assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\n        assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\n        assertEquals(I0, FieldUtils.readField(publicChild, \"i\", true));\n        assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n        assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n        assertEquals(D0, FieldUtils.readField(publicChild, \"d\", true));\n        assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n        assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n    }",
        "begin_line": 305,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 72)",
            "(line 307,col 9)-(line 307,col 83)",
            "(line 308,col 9)-(line 308,col 84)",
            "(line 309,col 9)-(line 309,col 82)",
            "(line 310,col 9)-(line 310,col 91)",
            "(line 311,col 9)-(line 311,col 92)",
            "(line 312,col 9)-(line 312,col 71)",
            "(line 313,col 9)-(line 313,col 81)",
            "(line 314,col 9)-(line 314,col 82)",
            "(line 315,col 9)-(line 315,col 71)",
            "(line 316,col 9)-(line 316,col 81)",
            "(line 317,col 9)-(line 317,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField()",
        "snippet": "    public void testReadDeclaredNamedField() throws Exception {\n        try {\n            assertEquals(\"s\", FieldUtils.readDeclaredField(publicChild, \"s\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(\"ss\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\n        try {\n            assertEquals(\"s\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, \"b\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\n        try {\n            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(I0, FieldUtils.readDeclaredField(publicChild, \"i\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n        try {\n            assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            assertEquals(D0, FieldUtils.readDeclaredField(publicChild, \"d\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n        try {\n            assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\"));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 320,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 326,col 9)",
            "(line 327,col 9)-(line 327,col 85)",
            "(line 328,col 9)-(line 333,col 9)",
            "(line 334,col 9)-(line 339,col 9)",
            "(line 340,col 9)-(line 340,col 93)",
            "(line 341,col 9)-(line 346,col 9)",
            "(line 347,col 9)-(line 352,col 9)",
            "(line 353,col 9)-(line 353,col 83)",
            "(line 354,col 9)-(line 359,col 9)",
            "(line 360,col 9)-(line 365,col 9)",
            "(line 366,col 9)-(line 366,col 83)",
            "(line 367,col 9)-(line 372,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess()",
        "snippet": "    public void testReadDeclaredNamedFieldForceAccess() throws Exception {\n        try {\n            assertEquals(\"s\", FieldUtils.readDeclaredField(publicChild, \"s\", true));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(\"ss\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\n        assertEquals(\"ss\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\n        try {\n            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, \"b\", true));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\n        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\n        try {\n            assertEquals(I0, FieldUtils.readDeclaredField(publicChild, \"i\", true));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n        assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n        try {\n            assertEquals(D0, FieldUtils.readDeclaredField(publicChild, \"d\", true));\n            fail(\"expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n        assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n    }",
        "begin_line": 375,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 376,col 9)-(line 381,col 9)",
            "(line 382,col 9)-(line 382,col 91)",
            "(line 383,col 9)-(line 383,col 92)",
            "(line 384,col 9)-(line 389,col 9)",
            "(line 390,col 9)-(line 390,col 99)",
            "(line 391,col 9)-(line 391,col 100)",
            "(line 392,col 9)-(line 397,col 9)",
            "(line 398,col 9)-(line 398,col 89)",
            "(line 399,col 9)-(line 399,col 90)",
            "(line 400,col 9)-(line 405,col 9)",
            "(line 406,col 9)-(line 406,col 89)",
            "(line 407,col 9)-(line 407,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticField()",
        "snippet": "    public void testWriteStaticField() throws Exception {\n        Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\n        FieldUtils.writeStaticField(field, \"new\");\n        assertEquals(\"new\", StaticContainer.mutablePublic);\n        field = StaticContainer.class.getDeclaredField(\"mutableProtected\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"mutablePackage\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"mutablePrivate\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PUBLIC\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PROTECTED\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n    }",
        "begin_line": 410,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 78)",
            "(line 412,col 9)-(line 412,col 50)",
            "(line 413,col 9)-(line 413,col 59)",
            "(line 414,col 9)-(line 414,col 75)",
            "(line 415,col 9)-(line 420,col 9)",
            "(line 421,col 9)-(line 421,col 73)",
            "(line 422,col 9)-(line 427,col 9)",
            "(line 428,col 9)-(line 428,col 73)",
            "(line 429,col 9)-(line 434,col 9)",
            "(line 435,col 9)-(line 435,col 75)",
            "(line 436,col 9)-(line 441,col 9)",
            "(line 442,col 9)-(line 442,col 78)",
            "(line 443,col 9)-(line 448,col 9)",
            "(line 449,col 9)-(line 449,col 76)",
            "(line 450,col 9)-(line 455,col 9)",
            "(line 456,col 9)-(line 456,col 76)",
            "(line 457,col 9)-(line 462,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticFieldForceAccess()",
        "snippet": "    public void testWriteStaticFieldForceAccess() throws Exception {\n        Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\n        FieldUtils.writeStaticField(field, \"new\", true);\n        assertEquals(\"new\", StaticContainer.mutablePublic);\n        field = StaticContainer.class.getDeclaredField(\"mutableProtected\");\n        FieldUtils.writeStaticField(field, \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutableProtected());\n        field = StaticContainer.class.getDeclaredField(\"mutablePackage\");\n        FieldUtils.writeStaticField(field, \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutablePackage());\n        field = StaticContainer.class.getDeclaredField(\"mutablePrivate\");\n        FieldUtils.writeStaticField(field, \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutablePrivate());\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PUBLIC\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PROTECTED\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE\");\n        try {\n            FieldUtils.writeStaticField(field, \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n    }",
        "begin_line": 465,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 466,col 9)-(line 466,col 78)",
            "(line 467,col 9)-(line 467,col 56)",
            "(line 468,col 9)-(line 468,col 59)",
            "(line 469,col 9)-(line 469,col 75)",
            "(line 470,col 9)-(line 470,col 56)",
            "(line 471,col 9)-(line 471,col 67)",
            "(line 472,col 9)-(line 472,col 73)",
            "(line 473,col 9)-(line 473,col 56)",
            "(line 474,col 9)-(line 474,col 65)",
            "(line 475,col 9)-(line 475,col 73)",
            "(line 476,col 9)-(line 476,col 56)",
            "(line 477,col 9)-(line 477,col 65)",
            "(line 478,col 9)-(line 478,col 75)",
            "(line 479,col 9)-(line 484,col 9)",
            "(line 485,col 9)-(line 485,col 78)",
            "(line 486,col 9)-(line 491,col 9)",
            "(line 492,col 9)-(line 492,col 76)",
            "(line 493,col 9)-(line 498,col 9)",
            "(line 499,col 9)-(line 499,col 76)",
            "(line 500,col 9)-(line 505,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticField()",
        "snippet": "    public void testWriteNamedStaticField() throws Exception {\n        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\");\n        assertEquals(\"new\", StaticContainer.mutablePublic);\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"mutableProtected\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePackage\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePrivate\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PUBLIC\", \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PROTECTED\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PACKAGE\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PRIVATE\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 508,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 509,col 9)-(line 509,col 88)",
            "(line 510,col 9)-(line 510,col 59)",
            "(line 511,col 9)-(line 516,col 9)",
            "(line 517,col 9)-(line 522,col 9)",
            "(line 523,col 9)-(line 528,col 9)",
            "(line 529,col 9)-(line 534,col 9)",
            "(line 535,col 9)-(line 540,col 9)",
            "(line 541,col 9)-(line 546,col 9)",
            "(line 547,col 9)-(line 552,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticFieldForceAccess()",
        "snippet": "    public void testWriteNamedStaticFieldForceAccess() throws Exception {\n        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.mutablePublic);\n        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutableProtected\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutableProtected());\n        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePackage\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutablePackage());\n        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePrivate\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutablePrivate());\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PUBLIC\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PROTECTED\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PACKAGE\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PRIVATE\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n    }",
        "begin_line": 555,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 556,col 9)-(line 556,col 94)",
            "(line 557,col 9)-(line 557,col 59)",
            "(line 558,col 9)-(line 558,col 97)",
            "(line 559,col 9)-(line 559,col 67)",
            "(line 560,col 9)-(line 560,col 95)",
            "(line 561,col 9)-(line 561,col 65)",
            "(line 562,col 9)-(line 562,col 95)",
            "(line 563,col 9)-(line 563,col 65)",
            "(line 564,col 9)-(line 569,col 9)",
            "(line 570,col 9)-(line 575,col 9)",
            "(line 576,col 9)-(line 581,col 9)",
            "(line 582,col 9)-(line 587,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField()",
        "snippet": "    public void testWriteDeclaredNamedStaticField() throws Exception {\n        FieldUtils.writeStaticField(StaticContainer.class, \"mutablePublic\", \"new\");\n        assertEquals(\"new\", StaticContainer.mutablePublic);\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutableProtected\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePackage\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePrivate\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PUBLIC\", \"new\");\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PROTECTED\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PACKAGE\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PRIVATE\", \"new\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 590,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 83)",
            "(line 592,col 9)-(line 592,col 59)",
            "(line 593,col 9)-(line 598,col 9)",
            "(line 599,col 9)-(line 604,col 9)",
            "(line 605,col 9)-(line 610,col 9)",
            "(line 611,col 9)-(line 616,col 9)",
            "(line 617,col 9)-(line 622,col 9)",
            "(line 623,col 9)-(line 628,col 9)",
            "(line 629,col 9)-(line 634,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticFieldForceAccess()",
        "snippet": "    public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception {\n        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePublic\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.mutablePublic);\n        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutableProtected\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutableProtected());\n        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePackage\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutablePackage());\n        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePrivate\", \"new\", true);\n        assertEquals(\"new\", StaticContainer.getMutablePrivate());\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PUBLIC\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PROTECTED\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PACKAGE\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PRIVATE\", \"new\", true);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n    }",
        "begin_line": 637,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 97)",
            "(line 639,col 9)-(line 639,col 59)",
            "(line 640,col 9)-(line 640,col 100)",
            "(line 641,col 9)-(line 641,col 67)",
            "(line 642,col 9)-(line 642,col 98)",
            "(line 643,col 9)-(line 643,col 65)",
            "(line 644,col 9)-(line 644,col 98)",
            "(line 645,col 9)-(line 645,col 65)",
            "(line 646,col 9)-(line 651,col 9)",
            "(line 652,col 9)-(line 657,col 9)",
            "(line 658,col 9)-(line 663,col 9)",
            "(line 664,col 9)-(line 669,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteField()",
        "snippet": "    public void testWriteField() throws Exception {\n        Field field = parentClass.getDeclaredField(\"s\");\n        FieldUtils.writeField(field, publicChild, \"S\");\n        assertEquals(\"S\", field.get(publicChild));\n        field = parentClass.getDeclaredField(\"b\");\n        try {\n            FieldUtils.writeField(field, publicChild, Boolean.TRUE);\n            fail(\"Expected IllegalAccessException\");\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = parentClass.getDeclaredField(\"i\");\n        try {\n            FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE));\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n        field = parentClass.getDeclaredField(\"d\");\n        try {\n            FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE));\n        } catch (IllegalAccessException e) {\n            // pass\n        }\n    }",
        "begin_line": 672,
        "end_line": 695,
        "comment": "",
        "child_ranges": [
            "(line 673,col 9)-(line 673,col 56)",
            "(line 674,col 9)-(line 674,col 55)",
            "(line 675,col 9)-(line 675,col 50)",
            "(line 676,col 9)-(line 676,col 50)",
            "(line 677,col 9)-(line 682,col 9)",
            "(line 683,col 9)-(line 683,col 50)",
            "(line 684,col 9)-(line 688,col 9)",
            "(line 689,col 9)-(line 689,col 50)",
            "(line 690,col 9)-(line 694,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteFieldForceAccess()",
        "snippet": "    public void testWriteFieldForceAccess() throws Exception {\n        Field field = parentClass.getDeclaredField(\"s\");\n        FieldUtils.writeField(field, publicChild, \"S\", true);\n        assertEquals(\"S\", field.get(publicChild));\n        field = parentClass.getDeclaredField(\"b\");\n        FieldUtils.writeField(field, publicChild, Boolean.TRUE, true);\n        assertEquals(Boolean.TRUE, field.get(publicChild));\n        field = parentClass.getDeclaredField(\"i\");\n        FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE), true);\n        assertEquals(new Integer(Integer.MAX_VALUE), field.get(publicChild));\n        field = parentClass.getDeclaredField(\"d\");\n        FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);\n        assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));\n    }",
        "begin_line": 697,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 698,col 9)-(line 698,col 56)",
            "(line 699,col 9)-(line 699,col 61)",
            "(line 700,col 9)-(line 700,col 50)",
            "(line 701,col 9)-(line 701,col 50)",
            "(line 702,col 9)-(line 702,col 70)",
            "(line 703,col 9)-(line 703,col 59)",
            "(line 704,col 9)-(line 704,col 50)",
            "(line 705,col 9)-(line 705,col 88)",
            "(line 706,col 9)-(line 706,col 77)",
            "(line 707,col 9)-(line 707,col 50)",
            "(line 708,col 9)-(line 708,col 86)",
            "(line 709,col 9)-(line 709,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedField()",
        "snippet": "    public void testWriteNamedField() throws Exception {\n        FieldUtils.writeField(publicChild, \"s\", \"S\");\n        assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\"));\n        try {\n            FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeField(publicChild, \"i\", new Integer(1));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeField(publicChild, \"d\", new Double(1.0));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n\n        FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\");\n        assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n        FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE);\n        assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\n        FieldUtils.writeField(publiclyShadowedChild, \"i\", new Integer(0));\n        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, \"i\"));\n        FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0));\n        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\"));\n\n        FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\");\n        assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\n        try {\n            FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.TRUE);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeField(privatelyShadowedChild, \"i\", new Integer(1));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(1.0));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 712,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 53)",
            "(line 714,col 9)-(line 714,col 66)",
            "(line 715,col 9)-(line 720,col 9)",
            "(line 721,col 9)-(line 726,col 9)",
            "(line 727,col 9)-(line 732,col 9)",
            "(line 734,col 9)-(line 734,col 63)",
            "(line 735,col 9)-(line 735,col 76)",
            "(line 736,col 9)-(line 736,col 73)",
            "(line 737,col 9)-(line 737,col 86)",
            "(line 738,col 9)-(line 738,col 74)",
            "(line 739,col 9)-(line 739,col 87)",
            "(line 740,col 9)-(line 740,col 75)",
            "(line 741,col 9)-(line 741,col 88)",
            "(line 743,col 9)-(line 743,col 64)",
            "(line 744,col 9)-(line 744,col 77)",
            "(line 745,col 9)-(line 750,col 9)",
            "(line 751,col 9)-(line 756,col 9)",
            "(line 757,col 9)-(line 762,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedFieldForceAccess()",
        "snippet": "    public void testWriteNamedFieldForceAccess() throws Exception {\n        FieldUtils.writeField(publicChild, \"s\", \"S\", true);\n        assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\", true));\n        FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE, true);\n        assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, \"b\", true));\n        FieldUtils.writeField(publicChild, \"i\", new Integer(1), true);\n        assertEquals(new Integer(1), FieldUtils.readField(publicChild, \"i\", true));\n        FieldUtils.writeField(publicChild, \"d\", new Double(1.0), true);\n        assertEquals(new Double(1.0), FieldUtils.readField(publicChild, \"d\", true));\n\n        FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\", true);\n        assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n        FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\n        assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\n        FieldUtils.writeField(publiclyShadowedChild, \"i\", new Integer(0), true);\n        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n        FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n\n        FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\", true);\n        assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\n        FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\n        assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\n        FieldUtils.writeField(privatelyShadowedChild, \"i\", new Integer(0), true);\n        assertEquals(new Integer(0), FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n        FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n        assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n    }",
        "begin_line": 765,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 766,col 9)-(line 766,col 59)",
            "(line 767,col 9)-(line 767,col 72)",
            "(line 768,col 9)-(line 768,col 68)",
            "(line 769,col 9)-(line 769,col 81)",
            "(line 770,col 9)-(line 770,col 70)",
            "(line 771,col 9)-(line 771,col 83)",
            "(line 772,col 9)-(line 772,col 71)",
            "(line 773,col 9)-(line 773,col 84)",
            "(line 775,col 9)-(line 775,col 69)",
            "(line 776,col 9)-(line 776,col 82)",
            "(line 777,col 9)-(line 777,col 79)",
            "(line 778,col 9)-(line 778,col 92)",
            "(line 779,col 9)-(line 779,col 80)",
            "(line 780,col 9)-(line 780,col 93)",
            "(line 781,col 9)-(line 781,col 81)",
            "(line 782,col 9)-(line 782,col 94)",
            "(line 784,col 9)-(line 784,col 70)",
            "(line 785,col 9)-(line 785,col 83)",
            "(line 786,col 9)-(line 786,col 80)",
            "(line 787,col 9)-(line 787,col 93)",
            "(line 788,col 9)-(line 788,col 81)",
            "(line 789,col 9)-(line 789,col 94)",
            "(line 790,col 9)-(line 790,col 82)",
            "(line 791,col 9)-(line 791,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedField()",
        "snippet": "    public void testWriteDeclaredNamedField() throws Exception {\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"b\", Boolean.TRUE);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"i\", new Integer(1));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"d\", new Double(1.0));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"s\", \"S\");\n        assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE);\n        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", new Integer(0));\n        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0));\n        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n\n        try {\n            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.TRUE);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", new Integer(1));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(1.0));\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 794,
        "end_line": 853,
        "comment": "",
        "child_ranges": [
            "(line 795,col 9)-(line 800,col 9)",
            "(line 801,col 9)-(line 806,col 9)",
            "(line 807,col 9)-(line 812,col 9)",
            "(line 813,col 9)-(line 818,col 9)",
            "(line 820,col 9)-(line 820,col 71)",
            "(line 821,col 9)-(line 821,col 84)",
            "(line 822,col 9)-(line 822,col 81)",
            "(line 823,col 9)-(line 823,col 94)",
            "(line 824,col 9)-(line 824,col 82)",
            "(line 825,col 9)-(line 825,col 95)",
            "(line 826,col 9)-(line 826,col 83)",
            "(line 827,col 9)-(line 827,col 96)",
            "(line 829,col 9)-(line 834,col 9)",
            "(line 835,col 9)-(line 840,col 9)",
            "(line 841,col 9)-(line 846,col 9)",
            "(line 847,col 9)-(line 852,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedFieldForceAccess()",
        "snippet": "    public void testWriteDeclaredNamedFieldForceAccess() throws Exception {\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\", true);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"b\", Boolean.TRUE, true);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"i\", new Integer(1), true);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n        try {\n            FieldUtils.writeDeclaredField(publicChild, \"d\", new Double(1.0), true);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"s\", \"S\", true);\n        assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\n        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", new Integer(0), true);\n        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n\n        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\", true);\n        assertEquals(\"S\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\n        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\n        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\n        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", new Integer(0), true);\n        assertEquals(new Integer(0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n    }",
        "begin_line": 855,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 856,col 9)-(line 861,col 9)",
            "(line 862,col 9)-(line 867,col 9)",
            "(line 868,col 9)-(line 873,col 9)",
            "(line 874,col 9)-(line 879,col 9)",
            "(line 881,col 9)-(line 881,col 77)",
            "(line 882,col 9)-(line 882,col 90)",
            "(line 883,col 9)-(line 883,col 87)",
            "(line 884,col 9)-(line 884,col 100)",
            "(line 885,col 9)-(line 885,col 88)",
            "(line 886,col 9)-(line 886,col 101)",
            "(line 887,col 9)-(line 887,col 89)",
            "(line 888,col 9)-(line 888,col 102)",
            "(line 890,col 9)-(line 890,col 78)",
            "(line 891,col 9)-(line 891,col 91)",
            "(line 892,col 9)-(line 892,col 88)",
            "(line 893,col 9)-(line 893,col 101)",
            "(line 894,col 9)-(line 894,col 89)",
            "(line 895,col 9)-(line 895,col 102)",
            "(line 896,col 9)-(line 896,col 90)",
            "(line 897,col 9)-(line 897,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.FieldUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig()",
        "snippet": "    public void testAmbig() {\n        try {\n            FieldUtils.getField(Ambig.class, \"VALUE\");\n            fail(\"should have failed on interface field ambiguity\");\n        } catch (IllegalArgumentException e) {\n            // pass\n        }\n    }",
        "begin_line": 900,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 901,col 9)-(line 906,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.testbed.StaticContainer",
        "child_classes": [
            "org.apache.commons.lang3.reflect.testbed.StaticContainerChild"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java",
        "signature": "org.apache.commons.lang3.reflect.testbed.StaticContainer.reset()",
        "snippet": "    public static void reset() {\n        mutablePublic = null;\n        mutableProtected = null;\n        mutablePackage = null;\n        mutablePrivate = null;\n    }",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 29)",
            "(line 37,col 9)-(line 37,col 32)",
            "(line 38,col 9)-(line 38,col 30)",
            "(line 39,col 9)-(line 39,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.testbed.StaticContainer",
        "child_classes": [
            "org.apache.commons.lang3.reflect.testbed.StaticContainerChild"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java",
        "signature": "org.apache.commons.lang3.reflect.testbed.StaticContainer.getMutableProtected()",
        "snippet": "    public static Object getMutableProtected() {\n        return mutableProtected;\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.testbed.StaticContainer",
        "child_classes": [
            "org.apache.commons.lang3.reflect.testbed.StaticContainerChild"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java",
        "signature": "org.apache.commons.lang3.reflect.testbed.StaticContainer.getMutablePackage()",
        "snippet": "    public static Object getMutablePackage() {\n        return mutablePackage;\n    }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.testbed.StaticContainer",
        "child_classes": [
            "org.apache.commons.lang3.reflect.testbed.StaticContainerChild"
        ],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java",
        "signature": "org.apache.commons.lang3.reflect.testbed.StaticContainer.getMutablePrivate()",
        "snippet": "    public static Object getMutablePrivate() {\n        return mutablePrivate;\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.MutableFloatTest(java.lang.String)",
        "snippet": "    public MutableFloatTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n        \n        assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);\n        \n        assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);\n        assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\n\n        assertEquals(2f, new MutableDouble(\"2.0\").floatValue(), 0.0001f);\n\n        try {\n            new MutableFloat((Number)null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 67)",
            "(line 37,col 9)-(line 37,col 69)",
            "(line 39,col 9)-(line 39,col 80)",
            "(line 40,col 9)-(line 40,col 87)",
            "(line 42,col 9)-(line 42,col 73)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableFloat mutNum = new MutableFloat(0f);\n        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n        assertEquals(new Float(0), new MutableFloat().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1f, mutNum.floatValue(), 0.0001f);\n        assertEquals(new Float(1f), mutNum.getValue());\n        \n        mutNum.setValue(new Float(2f));\n        assertEquals(2f, mutNum.floatValue(), 0.0001f);\n        assertEquals(new Float(2f), mutNum.getValue());\n        \n        mutNum.setValue(new MutableFloat(3f));\n        assertEquals(3f, mutNum.floatValue(), 0.0001f);\n        assertEquals(new Float(3f), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 57)",
            "(line 52,col 9)-(line 52,col 67)",
            "(line 53,col 9)-(line 53,col 66)",
            "(line 55,col 9)-(line 55,col 27)",
            "(line 56,col 9)-(line 56,col 55)",
            "(line 57,col 9)-(line 57,col 55)",
            "(line 59,col 9)-(line 59,col 39)",
            "(line 60,col 9)-(line 60,col 55)",
            "(line 61,col 9)-(line 61,col 55)",
            "(line 63,col 9)-(line 63,col 46)",
            "(line 64,col 9)-(line 64,col 55)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 69,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testNanInfinite()",
        "snippet": "    public void testNanInfinite() {\n        MutableFloat mutNum = new MutableFloat(Float.NaN);\n        assertEquals(true, mutNum.isNaN());\n        \n        mutNum = new MutableFloat(Float.POSITIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n        \n        mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n    }",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 58)",
            "(line 74,col 9)-(line 74,col 43)",
            "(line 76,col 9)-(line 76,col 59)",
            "(line 77,col 9)-(line 77,col 48)",
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableFloat mutNumA = new MutableFloat(0f);\n        final MutableFloat mutNumB = new MutableFloat(0f);\n        final MutableFloat mutNumC = new MutableFloat(1f);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Float(0f)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 58)",
            "(line 85,col 9)-(line 85,col 58)",
            "(line 86,col 9)-(line 86,col 58)",
            "(line 88,col 9)-(line 88,col 52)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 52)",
            "(line 95,col 9)-(line 95,col 50)",
            "(line 96,col 9)-(line 96,col 59)",
            "(line 97,col 9)-(line 97,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableFloat mutNumA = new MutableFloat(0f);\n        final MutableFloat mutNumB = new MutableFloat(0f);\n        final MutableFloat mutNumC = new MutableFloat(1f);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());\n    }",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 102,col 58)",
            "(line 103,col 9)-(line 103,col 58)",
            "(line 105,col 9)-(line 105,col 69)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableFloat mutNum = new MutableFloat(0f);\n\n        assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));\n        assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));\n        assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 111,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 57)",
            "(line 114,col 9)-(line 114,col 64)",
            "(line 115,col 9)-(line 115,col 66)",
            "(line 116,col 9)-(line 116,col 65)",
            "(line 117,col 9)-(line 120,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableFloat mutNum = new MutableFloat(1.7F);\n        \n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1.7, mutNum.doubleValue(), 0.00001 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 123,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 53)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 53)",
            "(line 129,col 9)-(line 129,col 55)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 131,col 9)-(line 131,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testToFloat()",
        "snippet": "    public void testToFloat() {\n        assertEquals(new Float(0f), new MutableFloat(0f).toFloat());\n        assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());\n    }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 68)",
            "(line 136,col 9)-(line 136,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 50)",
            "(line 141,col 9)-(line 141,col 27)",
            "(line 143,col 9)-(line 143,col 43)",
            "(line 144,col 9)-(line 144,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 147,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 50)",
            "(line 149,col 9)-(line 149,col 27)",
            "(line 151,col 9)-(line 151,col 43)",
            "(line 152,col 9)-(line 152,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.add(1.1f);\n        \n        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 50)",
            "(line 157,col 9)-(line 157,col 25)",
            "(line 159,col 9)-(line 159,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.add(new Float(1.1f));\n        \n        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 50)",
            "(line 164,col 9)-(line 164,col 36)",
            "(line 166,col 9)-(line 166,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.subtract(0.9f);\n        \n        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 169,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 50)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 173,col 9)-(line 173,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableFloat mutNum = new MutableFloat(1);\n        mutNum.subtract(new Float(0.9f));\n        \n        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n    }",
        "begin_line": 176,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 50)",
            "(line 178,col 9)-(line 178,col 41)",
            "(line 180,col 9)-(line 180,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableFloatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableFloatTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0.0\", new MutableFloat(0f).toString());\n        assertEquals(\"10.0\", new MutableFloat(10f).toString());\n        assertEquals(\"-123.0\", new MutableFloat(-123f).toString());\n    }",
        "begin_line": 183,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 61)",
            "(line 185,col 9)-(line 185,col 63)",
            "(line 186,col 9)-(line 186,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.MutableByteTest(java.lang.String)",
        "snippet": "    public MutableByteTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals((byte) 0, new MutableByte().byteValue());\n        \n        assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());\n        \n        assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());\n        assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\n\n        assertEquals((byte) 2, new MutableByte(\"2\").byteValue());\n\n        try {\n            new MutableByte((Number)null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 62)",
            "(line 37,col 9)-(line 37,col 70)",
            "(line 39,col 9)-(line 39,col 84)",
            "(line 40,col 9)-(line 40,col 87)",
            "(line 42,col 9)-(line 42,col 65)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableByte mutNum = new MutableByte((byte) 0);\n        assertEquals((byte) 0, new MutableByte().byteValue());\n        assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());\n        \n        mutNum.setValue((byte) 1);\n        assertEquals((byte) 1, mutNum.byteValue());\n        assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());\n        \n        mutNum.setValue(Byte.valueOf((byte) 2));\n        assertEquals((byte) 2, mutNum.byteValue());\n        assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableByte((byte) 3));\n        assertEquals((byte) 3, mutNum.byteValue());\n        assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 61)",
            "(line 52,col 9)-(line 52,col 62)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 55,col 9)-(line 55,col 34)",
            "(line 56,col 9)-(line 56,col 51)",
            "(line 57,col 9)-(line 57,col 64)",
            "(line 59,col 9)-(line 59,col 48)",
            "(line 60,col 9)-(line 60,col 51)",
            "(line 61,col 9)-(line 61,col 64)",
            "(line 63,col 9)-(line 63,col 51)",
            "(line 64,col 9)-(line 64,col 51)",
            "(line 65,col 9)-(line 65,col 64)",
            "(line 66,col 9)-(line 69,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableByte mutNumA = new MutableByte((byte) 0);\n        final MutableByte mutNumB = new MutableByte((byte) 0);\n        final MutableByte mutNumC = new MutableByte((byte) 1);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(Byte.valueOf((byte) 0)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 72,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 62)",
            "(line 74,col 9)-(line 74,col 62)",
            "(line 75,col 9)-(line 75,col 62)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 52)",
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 52)",
            "(line 81,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 50)",
            "(line 85,col 9)-(line 85,col 68)",
            "(line 86,col 9)-(line 86,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableByte mutNumA = new MutableByte((byte) 0);\n        final MutableByte mutNumB = new MutableByte((byte) 0);\n        final MutableByte mutNumC = new MutableByte((byte) 1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 62)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 62)",
            "(line 94,col 9)-(line 94,col 69)",
            "(line 95,col 9)-(line 95,col 69)",
            "(line 96,col 9)-(line 96,col 70)",
            "(line 97,col 9)-(line 97,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableByte mutNum = new MutableByte((byte) 0);\n\n        assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));\n        assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));\n        assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 100,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 61)",
            "(line 103,col 9)-(line 103,col 76)",
            "(line 104,col 9)-(line 104,col 78)",
            "(line 105,col 9)-(line 105,col 77)",
            "(line 106,col 9)-(line 109,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableByte mutNum = new MutableByte( (byte) 1 );\n        \n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 57)",
            "(line 115,col 9)-(line 115,col 53)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 53)",
            "(line 118,col 9)-(line 118,col 55)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testToByte()",
        "snippet": "    public void testToByte() {\n        assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());\n        assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 81)",
            "(line 125,col 9)-(line 125,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 128,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 55)",
            "(line 130,col 9)-(line 130,col 27)",
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 136,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 55)",
            "(line 138,col 9)-(line 138,col 27)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.add((byte)1);\n        \n        assertEquals((byte) 2, mutNum.byteValue());\n    }",
        "begin_line": 144,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 55)",
            "(line 146,col 9)-(line 146,col 28)",
            "(line 148,col 9)-(line 148,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.add(new Integer(1));\n        \n        assertEquals((byte) 2, mutNum.byteValue());\n    }",
        "begin_line": 151,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 55)",
            "(line 153,col 9)-(line 153,col 35)",
            "(line 155,col 9)-(line 155,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.subtract((byte) 1);\n        \n        assertEquals((byte) 0, mutNum.byteValue());\n    }",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 55)",
            "(line 160,col 9)-(line 160,col 34)",
            "(line 162,col 9)-(line 162,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableByte mutNum = new MutableByte((byte) 1);\n        mutNum.subtract(new Integer(1));\n        \n        assertEquals((byte) 0, mutNum.byteValue());\n    }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 55)",
            "(line 167,col 9)-(line 167,col 40)",
            "(line 169,col 9)-(line 169,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableByteTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableByteTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableByte((byte) 0).toString());\n        assertEquals(\"10\", new MutableByte((byte) 10).toString());\n        assertEquals(\"-123\", new MutableByte((byte) -123).toString());\n    }",
        "begin_line": 172,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 64)",
            "(line 174,col 9)-(line 174,col 66)",
            "(line 175,col 9)-(line 175,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.MutableIntTest(java.lang.String)",
        "snippet": "    public MutableIntTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0, new MutableInt().intValue());\n        \n        assertEquals(1, new MutableInt(1).intValue());\n        \n        assertEquals(2, new MutableInt(new Integer(2)).intValue());\n        assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\n\n        assertEquals(2, new MutableInt(\"2\").intValue());\n\n        try {\n            new MutableInt((Number)null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 53)",
            "(line 37,col 9)-(line 37,col 54)",
            "(line 39,col 9)-(line 39,col 67)",
            "(line 40,col 9)-(line 40,col 71)",
            "(line 42,col 9)-(line 42,col 56)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableInt mutNum = new MutableInt(0);\n        assertEquals(0, new MutableInt().intValue());\n        assertEquals(new Integer(0), new MutableInt().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1, mutNum.intValue());\n        assertEquals(new Integer(1), mutNum.getValue());\n        \n        mutNum.setValue(new Integer(2));\n        assertEquals(2, mutNum.intValue());\n        assertEquals(new Integer(2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableLong(3));\n        assertEquals(3, mutNum.intValue());\n        assertEquals(new Integer(3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 52)",
            "(line 52,col 9)-(line 52,col 53)",
            "(line 53,col 9)-(line 53,col 66)",
            "(line 55,col 9)-(line 55,col 27)",
            "(line 56,col 9)-(line 56,col 43)",
            "(line 57,col 9)-(line 57,col 56)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 60,col 43)",
            "(line 61,col 9)-(line 61,col 56)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 43)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 66,col 9)-(line 69,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testEquals()",
        "snippet": "    public void testEquals() {\n        this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));\n        // Should Numbers be supported? GaryG July-21-2005.\n        //this.testEquals(mutNumA, new Integer(0), mutNumC);\n    }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testEquals(java.lang.Number, java.lang.Number, java.lang.Number)",
        "snippet": "    void testEquals(final Number numA, final Number numB, final Number numC) {\n        assertEquals(true, numA.equals(numA));\n        assertEquals(true, numA.equals(numB));\n        assertEquals(true, numB.equals(numA));\n        assertEquals(true, numB.equals(numB));\n        assertEquals(false, numA.equals(numC));\n        assertEquals(false, numB.equals(numC));\n        assertEquals(true, numC.equals(numC));\n        assertEquals(false, numA.equals(null));\n        assertEquals(false, numA.equals(new Integer(0)));\n        assertEquals(false, numA.equals(\"0\"));\n    }",
        "begin_line": 83,
        "end_line": 94,
        "comment": "\n     * @param numA must not be a 0 Integer; must not equal numC.\n     * @param numB must equal numA; must not equal numC.\n     * @param numC must not equal numA; must not equal numC.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 46)",
            "(line 85,col 9)-(line 85,col 46)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 47)",
            "(line 89,col 9)-(line 89,col 47)",
            "(line 90,col 9)-(line 90,col 46)",
            "(line 91,col 9)-(line 91,col 47)",
            "(line 92,col 9)-(line 92,col 57)",
            "(line 93,col 9)-(line 93,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableInt mutNumA = new MutableInt(0);\n        final MutableInt mutNumB = new MutableInt(0);\n        final MutableInt mutNumC = new MutableInt(1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());\n    }",
        "begin_line": 96,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 53)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 101,col 9)-(line 101,col 69)",
            "(line 102,col 9)-(line 102,col 69)",
            "(line 103,col 9)-(line 103,col 70)",
            "(line 104,col 9)-(line 104,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableInt mutNum = new MutableInt(0);\n\n        assertEquals(0, mutNum.compareTo(new MutableInt(0)));\n        assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));\n        assertEquals(-1, mutNum.compareTo(new MutableInt(1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 107,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 52)",
            "(line 110,col 9)-(line 110,col 61)",
            "(line 111,col 9)-(line 111,col 63)",
            "(line 112,col 9)-(line 112,col 62)",
            "(line 113,col 9)-(line 116,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableInt mutNum = new MutableInt(1);\n        \n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 119,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 46)",
            "(line 122,col 9)-(line 122,col 53)",
            "(line 123,col 9)-(line 123,col 55)",
            "(line 124,col 9)-(line 124,col 53)",
            "(line 125,col 9)-(line 125,col 53)",
            "(line 126,col 9)-(line 126,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testToInteger()",
        "snippet": "    public void testToInteger() {\n        assertEquals(new Integer(0), new MutableInt(0).toInteger());\n        assertEquals(new Integer(123), new MutableInt(123).toInteger());\n    }",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 68)",
            "(line 131,col 9)-(line 131,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 134,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 27)",
            "(line 138,col 9)-(line 138,col 43)",
            "(line 139,col 9)-(line 139,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 46)",
            "(line 144,col 9)-(line 144,col 27)",
            "(line 146,col 9)-(line 146,col 43)",
            "(line 147,col 9)-(line 147,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.add(1);\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 46)",
            "(line 152,col 9)-(line 152,col 22)",
            "(line 154,col 9)-(line 154,col 43)",
            "(line 155,col 9)-(line 155,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.add(new Integer(1));\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 46)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 162,col 9)-(line 162,col 43)",
            "(line 163,col 9)-(line 163,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.subtract(1);\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 166,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 46)",
            "(line 168,col 9)-(line 168,col 27)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableInt mutNum = new MutableInt(1);\n        mutNum.subtract(new Integer(1));\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 46)",
            "(line 176,col 9)-(line 176,col 40)",
            "(line 178,col 9)-(line 178,col 43)",
            "(line 179,col 9)-(line 179,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableIntTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableIntTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableInt(0).toString());\n        assertEquals(\"10\", new MutableInt(10).toString());\n        assertEquals(\"-123\", new MutableInt(-123).toString());\n    }",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 56)",
            "(line 184,col 9)-(line 184,col 58)",
            "(line 185,col 9)-(line 185,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.MutableShortTest(java.lang.String)",
        "snippet": "    public MutableShortTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals((short) 0, new MutableShort().shortValue());\n        \n        assertEquals((short) 1, new MutableShort((short) 1).shortValue());\n        \n        assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());\n        assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\n\n        assertEquals((short) 2, new MutableShort(\"2\").shortValue());\n\n        try {\n            new MutableShort((Number)null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 65)",
            "(line 37,col 9)-(line 37,col 74)",
            "(line 39,col 9)-(line 39,col 85)",
            "(line 40,col 9)-(line 40,col 92)",
            "(line 42,col 9)-(line 42,col 68)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableShort mutNum = new MutableShort((short) 0);\n        assertEquals((short) 0, new MutableShort().shortValue());\n        assertEquals(new Short((short) 0), new MutableShort().getValue());\n        \n        mutNum.setValue((short) 1);\n        assertEquals((short) 1, mutNum.shortValue());\n        assertEquals(new Short((short) 1), mutNum.getValue());\n        \n        mutNum.setValue(new Short((short) 2));\n        assertEquals((short) 2, mutNum.shortValue());\n        assertEquals(new Short((short) 2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableShort((short) 3));\n        assertEquals((short) 3, mutNum.shortValue());\n        assertEquals(new Short((short) 3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 64)",
            "(line 52,col 9)-(line 52,col 65)",
            "(line 53,col 9)-(line 53,col 74)",
            "(line 55,col 9)-(line 55,col 35)",
            "(line 56,col 9)-(line 56,col 53)",
            "(line 57,col 9)-(line 57,col 62)",
            "(line 59,col 9)-(line 59,col 46)",
            "(line 60,col 9)-(line 60,col 53)",
            "(line 61,col 9)-(line 61,col 62)",
            "(line 63,col 9)-(line 63,col 53)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 65,col 62)",
            "(line 66,col 9)-(line 69,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableShort mutNumA = new MutableShort((short) 0);\n        final MutableShort mutNumB = new MutableShort((short) 0);\n        final MutableShort mutNumC = new MutableShort((short) 1);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Short((short) 0)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 72,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 65)",
            "(line 74,col 9)-(line 74,col 65)",
            "(line 75,col 9)-(line 75,col 65)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 52)",
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 52)",
            "(line 81,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 50)",
            "(line 85,col 9)-(line 85,col 66)",
            "(line 86,col 9)-(line 86,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableShort mutNumA = new MutableShort((short) 0);\n        final MutableShort mutNumB = new MutableShort((short) 0);\n        final MutableShort mutNumC = new MutableShort((short) 1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 65)",
            "(line 94,col 9)-(line 94,col 69)",
            "(line 95,col 9)-(line 95,col 69)",
            "(line 96,col 9)-(line 96,col 70)",
            "(line 97,col 9)-(line 97,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableShort mutNum = new MutableShort((short) 0);\n\n        assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));\n        assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));\n        assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 100,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 64)",
            "(line 103,col 9)-(line 103,col 79)",
            "(line 104,col 9)-(line 104,col 81)",
            "(line 105,col 9)-(line 105,col 80)",
            "(line 106,col 9)-(line 109,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableShort mutNum = new MutableShort( (short) 1 );\n        \n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 60)",
            "(line 115,col 9)-(line 115,col 53)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 53)",
            "(line 118,col 9)-(line 118,col 55)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testToShort()",
        "snippet": "    public void testToShort() {\n        assertEquals(new Short((short) 0), new MutableShort((short) 0).toShort());\n        assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 82)",
            "(line 125,col 9)-(line 125,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 128,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 58)",
            "(line 130,col 9)-(line 130,col 27)",
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 136,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 58)",
            "(line 138,col 9)-(line 138,col 27)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.add((short) 1);\n        \n        assertEquals((short) 2, mutNum.shortValue());\n    }",
        "begin_line": 144,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 58)",
            "(line 146,col 9)-(line 146,col 30)",
            "(line 148,col 9)-(line 148,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.add(new Short((short) 1));\n        \n        assertEquals((short) 2, mutNum.shortValue());\n    }",
        "begin_line": 151,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 58)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 155,col 9)-(line 155,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.subtract((short) 1);\n        \n        assertEquals((short) 0, mutNum.shortValue());\n    }",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 58)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 162,col 9)-(line 162,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableShort mutNum = new MutableShort((short) 1);\n        mutNum.subtract(new Short((short) 1));\n        \n        assertEquals((short) 0, mutNum.shortValue());\n    }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 58)",
            "(line 167,col 9)-(line 167,col 46)",
            "(line 169,col 9)-(line 169,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableShortTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableShortTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableShort((short) 0).toString());\n        assertEquals(\"10\", new MutableShort((short) 10).toString());\n        assertEquals(\"-123\", new MutableShort((short) -123).toString());\n    }",
        "begin_line": 172,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 66)",
            "(line 174,col 9)-(line 174,col 68)",
            "(line 175,col 9)-(line 175,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableObjectTest.MutableObjectTest(java.lang.String)",
        "snippet": "    public MutableObjectTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableObjectTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(null, new MutableObject<String>().getValue());\n        \n        Integer i = new Integer(6);\n        assertSame(i, new MutableObject<Integer>(i).getValue());\n        assertSame(\"HI\", new MutableObject<String>(\"HI\").getValue());\n        assertSame(null, new MutableObject<Object>(null).getValue());\n    }",
        "begin_line": 34,
        "end_line": 41,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 67)",
            "(line 37,col 9)-(line 37,col 35)",
            "(line 38,col 9)-(line 38,col 64)",
            "(line 39,col 9)-(line 39,col 69)",
            "(line 40,col 9)-(line 40,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableObjectTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableObject<String> mutNum = new MutableObject<String>();\n        assertEquals(null, new MutableObject<Object>().getValue());\n        \n        mutNum.setValue(\"HELLO\");\n        assertSame(\"HELLO\", mutNum.getValue());\n        \n        mutNum.setValue(null);\n        assertSame(null, mutNum.getValue());\n    }",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 73)",
            "(line 45,col 9)-(line 45,col 67)",
            "(line 47,col 9)-(line 47,col 33)",
            "(line 48,col 9)-(line 48,col 47)",
            "(line 50,col 9)-(line 50,col 30)",
            "(line 51,col 9)-(line 51,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableObjectTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n        final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n        final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n        final MutableObject<String> mutNumD = new MutableObject<String>(null);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(mutNumD));\n        assertEquals(true, mutNumD.equals(mutNumD));\n        \n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Object()));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 54,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 81)",
            "(line 56,col 9)-(line 56,col 81)",
            "(line 57,col 9)-(line 57,col 80)",
            "(line 58,col 9)-(line 58,col 78)",
            "(line 60,col 9)-(line 60,col 52)",
            "(line 61,col 9)-(line 61,col 52)",
            "(line 62,col 9)-(line 62,col 52)",
            "(line 63,col 9)-(line 63,col 52)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 66,col 52)",
            "(line 67,col 9)-(line 67,col 53)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 58)",
            "(line 72,col 9)-(line 72,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableObjectTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n        final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n        final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n        final MutableObject<String> mutNumD = new MutableObject<String>(null);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());\n        assertEquals(true, mutNumA.hashCode() == \"ALPHA\".hashCode());\n        assertEquals(0, mutNumD.hashCode());\n    }",
        "begin_line": 75,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 81)",
            "(line 77,col 9)-(line 77,col 81)",
            "(line 78,col 9)-(line 78,col 80)",
            "(line 79,col 9)-(line 79,col 78)",
            "(line 81,col 9)-(line 81,col 69)",
            "(line 82,col 9)-(line 82,col 69)",
            "(line 83,col 9)-(line 83,col 70)",
            "(line 84,col 9)-(line 84,col 70)",
            "(line 85,col 9)-(line 85,col 69)",
            "(line 86,col 9)-(line 86,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableObjectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableObjectTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"HI\", new MutableObject<String>(\"HI\").toString());\n        assertEquals(\"10.0\", new MutableObject<Double>(new Double(10)).toString());\n        assertEquals(\"null\", new MutableObject<Object>(null).toString());\n    }",
        "begin_line": 89,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 71)",
            "(line 91,col 9)-(line 91,col 83)",
            "(line 92,col 9)-(line 92,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.MutableBooleanTest(java.lang.String)",
        "snippet": "    public MutableBooleanTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableBoolean mutBool = new MutableBoolean(false);\n\n        assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));\n        assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));\n        mutBool.setValue(true);\n        assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));\n        assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));\n\n        try {\n            mutBool.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }",
        "begin_line": 36,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 65)",
            "(line 39,col 9)-(line 39,col 70)",
            "(line 40,col 9)-(line 40,col 70)",
            "(line 41,col 9)-(line 41,col 31)",
            "(line 42,col 9)-(line 42,col 71)",
            "(line 43,col 9)-(line 43,col 69)",
            "(line 45,col 9)-(line 49,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(false, new MutableBoolean().booleanValue());\n\n        assertEquals(true, new MutableBoolean(true).booleanValue());\n        assertEquals(false, new MutableBoolean(false).booleanValue());\n\n        assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());\n        assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());\n\n        try {\n            new MutableBoolean(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }",
        "begin_line": 53,
        "end_line": 67,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 65)",
            "(line 56,col 9)-(line 56,col 68)",
            "(line 57,col 9)-(line 57,col 70)",
            "(line 59,col 9)-(line 59,col 76)",
            "(line 60,col 9)-(line 60,col 78)",
            "(line 62,col 9)-(line 66,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableBoolean mutBoolA = new MutableBoolean(false);\n        final MutableBoolean mutBoolB = new MutableBoolean(false);\n        final MutableBoolean mutBoolC = new MutableBoolean(true);\n\n        assertEquals(true, mutBoolA.equals(mutBoolA));\n        assertEquals(true, mutBoolA.equals(mutBoolB));\n        assertEquals(true, mutBoolB.equals(mutBoolA));\n        assertEquals(true, mutBoolB.equals(mutBoolB));\n        assertEquals(false, mutBoolA.equals(mutBoolC));\n        assertEquals(false, mutBoolB.equals(mutBoolC));\n        assertEquals(true, mutBoolC.equals(mutBoolC));\n        assertEquals(false, mutBoolA.equals(null));\n        assertEquals(false, mutBoolA.equals(Boolean.FALSE));\n        assertEquals(false, mutBoolA.equals(\"false\"));\n    }",
        "begin_line": 69,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 66)",
            "(line 71,col 9)-(line 71,col 66)",
            "(line 72,col 9)-(line 72,col 65)",
            "(line 74,col 9)-(line 74,col 54)",
            "(line 75,col 9)-(line 75,col 54)",
            "(line 76,col 9)-(line 76,col 54)",
            "(line 77,col 9)-(line 77,col 54)",
            "(line 78,col 9)-(line 78,col 55)",
            "(line 79,col 9)-(line 79,col 55)",
            "(line 80,col 9)-(line 80,col 54)",
            "(line 81,col 9)-(line 81,col 51)",
            "(line 82,col 9)-(line 82,col 60)",
            "(line 83,col 9)-(line 83,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        assertEquals(false, new MutableBoolean().booleanValue());\n        assertEquals(Boolean.FALSE, new MutableBoolean().getValue());\n        \n        final MutableBoolean mutBool = new MutableBoolean(false);\n        assertEquals(Boolean.FALSE, mutBool.toBoolean());\n        assertEquals(false, mutBool.booleanValue());\n        assertEquals(true, mutBool.isFalse());\n        assertEquals(false, mutBool.isTrue());\n\n        mutBool.setValue(Boolean.TRUE);\n        assertEquals(Boolean.TRUE, mutBool.toBoolean());\n        assertEquals(true, mutBool.booleanValue());\n        assertEquals(false, mutBool.isFalse());\n        assertEquals(true, mutBool.isTrue());\n\n        mutBool.setValue(false);\n        assertEquals(false, mutBool.booleanValue());\n\n        mutBool.setValue(true);\n        assertEquals(true, mutBool.booleanValue());\n\n        try {\n            mutBool.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }",
        "begin_line": 86,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 65)",
            "(line 88,col 9)-(line 88,col 69)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 52)",
            "(line 93,col 9)-(line 93,col 46)",
            "(line 94,col 9)-(line 94,col 46)",
            "(line 96,col 9)-(line 96,col 39)",
            "(line 97,col 9)-(line 97,col 56)",
            "(line 98,col 9)-(line 98,col 51)",
            "(line 99,col 9)-(line 99,col 47)",
            "(line 100,col 9)-(line 100,col 45)",
            "(line 102,col 9)-(line 102,col 32)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 51)",
            "(line 108,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableBoolean mutBoolA = new MutableBoolean(false);\n        final MutableBoolean mutBoolB = new MutableBoolean(false);\n        final MutableBoolean mutBoolC = new MutableBoolean(true);\n\n        assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());\n        assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());\n        assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());\n        assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());\n        assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());\n    }",
        "begin_line": 115,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 66)",
            "(line 117,col 9)-(line 117,col 66)",
            "(line 118,col 9)-(line 118,col 65)",
            "(line 120,col 9)-(line 120,col 71)",
            "(line 121,col 9)-(line 121,col 71)",
            "(line 122,col 9)-(line 122,col 72)",
            "(line 123,col 9)-(line 123,col 76)",
            "(line 124,col 9)-(line 124,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableBooleanTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableBooleanTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());\n        assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());\n    }",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 85)",
            "(line 129,col 9)-(line 129,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.MutableLongTest(java.lang.String)",
        "snippet": "    public MutableLongTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0, new MutableLong().longValue());\n        \n        assertEquals(1, new MutableLong(1).longValue());\n        \n        assertEquals(2, new MutableLong(new Long(2)).longValue());\n        assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\n\n        assertEquals(2, new MutableLong(\"2\").longValue());\n\n        try {\n            new MutableLong((Number)null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 55)",
            "(line 37,col 9)-(line 37,col 56)",
            "(line 39,col 9)-(line 39,col 66)",
            "(line 40,col 9)-(line 40,col 73)",
            "(line 42,col 9)-(line 42,col 58)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableLong mutNum = new MutableLong(0);\n        assertEquals(0, new MutableLong().longValue());\n        assertEquals(new Long(0), new MutableLong().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1, mutNum.longValue());\n        assertEquals(new Long(1), mutNum.getValue());\n        \n        mutNum.setValue(new Long(2));\n        assertEquals(2, mutNum.longValue());\n        assertEquals(new Long(2), mutNum.getValue());\n        \n        mutNum.setValue(new MutableLong(3));\n        assertEquals(3, mutNum.longValue());\n        assertEquals(new Long(3), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 54)",
            "(line 52,col 9)-(line 52,col 55)",
            "(line 53,col 9)-(line 53,col 64)",
            "(line 55,col 9)-(line 55,col 27)",
            "(line 56,col 9)-(line 56,col 44)",
            "(line 57,col 9)-(line 57,col 53)",
            "(line 59,col 9)-(line 59,col 37)",
            "(line 60,col 9)-(line 60,col 44)",
            "(line 61,col 9)-(line 61,col 53)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 44)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 69,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableLong mutNumA = new MutableLong(0);\n        final MutableLong mutNumB = new MutableLong(0);\n        final MutableLong mutNumC = new MutableLong(1);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Long(0)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 72,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 55)",
            "(line 74,col 9)-(line 74,col 55)",
            "(line 75,col 9)-(line 75,col 55)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 52)",
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 52)",
            "(line 81,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 50)",
            "(line 85,col 9)-(line 85,col 57)",
            "(line 86,col 9)-(line 86,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableLong mutNumA = new MutableLong(0);\n        final MutableLong mutNumB = new MutableLong(0);\n        final MutableLong mutNumC = new MutableLong(1);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 55)",
            "(line 91,col 9)-(line 91,col 55)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 94,col 9)-(line 94,col 69)",
            "(line 95,col 9)-(line 95,col 69)",
            "(line 96,col 9)-(line 96,col 70)",
            "(line 97,col 9)-(line 97,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableLong mutNum = new MutableLong(0);\n\n        assertEquals(0, mutNum.compareTo(new MutableLong(0)));\n        assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));\n        assertEquals(-1, mutNum.compareTo(new MutableLong(1)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 100,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 54)",
            "(line 103,col 9)-(line 103,col 62)",
            "(line 104,col 9)-(line 104,col 64)",
            "(line 105,col 9)-(line 105,col 63)",
            "(line 106,col 9)-(line 109,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableLong mutNum = new MutableLong(1L);\n\n        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 49)",
            "(line 115,col 9)-(line 115,col 53)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 53)",
            "(line 118,col 9)-(line 118,col 55)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 120,col 9)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testToLong()",
        "snippet": "    public void testToLong() {\n        assertEquals(new Long(0L), new MutableLong(0L).toLong());\n        assertEquals(new Long(123L), new MutableLong(123L).toLong());\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 65)",
            "(line 125,col 9)-(line 125,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 128,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 48)",
            "(line 130,col 9)-(line 130,col 27)",
            "(line 132,col 9)-(line 132,col 43)",
            "(line 133,col 9)-(line 133,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 136,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 48)",
            "(line 138,col 9)-(line 138,col 27)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.add(1);\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 144,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 48)",
            "(line 146,col 9)-(line 146,col 22)",
            "(line 148,col 9)-(line 148,col 43)",
            "(line 149,col 9)-(line 149,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.add(new Long(1));\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 152,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 48)",
            "(line 154,col 9)-(line 154,col 32)",
            "(line 156,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.subtract(1);\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 48)",
            "(line 162,col 9)-(line 162,col 27)",
            "(line 164,col 9)-(line 164,col 43)",
            "(line 165,col 9)-(line 165,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableLong mutNum = new MutableLong(1);\n        mutNum.subtract(new Long(1));\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 168,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 48)",
            "(line 170,col 9)-(line 170,col 37)",
            "(line 172,col 9)-(line 172,col 43)",
            "(line 173,col 9)-(line 173,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableLongTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableLongTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0\", new MutableLong(0).toString());\n        assertEquals(\"10\", new MutableLong(10).toString());\n        assertEquals(\"-123\", new MutableLong(-123).toString());\n    }",
        "begin_line": 176,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 178,col 59)",
            "(line 179,col 9)-(line 179,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.MutableDoubleTest(java.lang.String)",
        "snippet": "    public MutableDoubleTest(String testName) {\n        super(testName);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n        \n        assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);\n        \n        assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);\n        assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\n        \n        assertEquals(2d, new MutableDouble(\"2.0\").doubleValue(), 0.0001d);\n\n        try {\n            new MutableDouble((Number)null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": " ----------------------------------------------------------------",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 69)",
            "(line 37,col 9)-(line 37,col 71)",
            "(line 39,col 9)-(line 39,col 83)",
            "(line 40,col 9)-(line 40,col 90)",
            "(line 42,col 9)-(line 42,col 74)",
            "(line 44,col 9)-(line 47,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testGetSet()",
        "snippet": "    public void testGetSet() {\n        final MutableDouble mutNum = new MutableDouble(0d);\n        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n        assertEquals(new Double(0), new MutableDouble().getValue());\n        \n        mutNum.setValue(1);\n        assertEquals(1d, mutNum.doubleValue(), 0.0001d);\n        assertEquals(new Double(1d), mutNum.getValue());\n        \n        mutNum.setValue(new Double(2d));\n        assertEquals(2d, mutNum.doubleValue(), 0.0001d);\n        assertEquals(new Double(2d), mutNum.getValue());\n        \n        mutNum.setValue(new MutableDouble(3d));\n        assertEquals(3d, mutNum.doubleValue(), 0.0001d);\n        assertEquals(new Double(3d), mutNum.getValue());\n        try {\n            mutNum.setValue(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 59)",
            "(line 52,col 9)-(line 52,col 69)",
            "(line 53,col 9)-(line 53,col 68)",
            "(line 55,col 9)-(line 55,col 27)",
            "(line 56,col 9)-(line 56,col 56)",
            "(line 57,col 9)-(line 57,col 56)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 60,col 56)",
            "(line 61,col 9)-(line 61,col 56)",
            "(line 63,col 9)-(line 63,col 47)",
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 66,col 9)-(line 69,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testNanInfinite()",
        "snippet": "    public void testNanInfinite() {\n        MutableDouble mutNum = new MutableDouble(Double.NaN);\n        assertEquals(true, mutNum.isNaN());\n        \n        mutNum = new MutableDouble(Double.POSITIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n        \n        mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);\n        assertEquals(true, mutNum.isInfinite());\n    }",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 61)",
            "(line 74,col 9)-(line 74,col 43)",
            "(line 76,col 9)-(line 76,col 61)",
            "(line 77,col 9)-(line 77,col 48)",
            "(line 79,col 9)-(line 79,col 61)",
            "(line 80,col 9)-(line 80,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testEquals()",
        "snippet": "    public void testEquals() {\n        final MutableDouble mutNumA = new MutableDouble(0d);\n        final MutableDouble mutNumB = new MutableDouble(0d);\n        final MutableDouble mutNumC = new MutableDouble(1d);\n\n        assertEquals(true, mutNumA.equals(mutNumA));\n        assertEquals(true, mutNumA.equals(mutNumB));\n        assertEquals(true, mutNumB.equals(mutNumA));\n        assertEquals(true, mutNumB.equals(mutNumB));\n        assertEquals(false, mutNumA.equals(mutNumC));\n        assertEquals(false, mutNumB.equals(mutNumC));\n        assertEquals(true, mutNumC.equals(mutNumC));\n        assertEquals(false, mutNumA.equals(null));\n        assertEquals(false, mutNumA.equals(new Double(0d)));\n        assertEquals(false, mutNumA.equals(\"0\"));\n    }",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 60)",
            "(line 85,col 9)-(line 85,col 60)",
            "(line 86,col 9)-(line 86,col 60)",
            "(line 88,col 9)-(line 88,col 52)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 53)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 52)",
            "(line 95,col 9)-(line 95,col 50)",
            "(line 96,col 9)-(line 96,col 60)",
            "(line 97,col 9)-(line 97,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        final MutableDouble mutNumA = new MutableDouble(0d);\n        final MutableDouble mutNumB = new MutableDouble(0d);\n        final MutableDouble mutNumC = new MutableDouble(1d);\n\n        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n        assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());\n    }",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 60)",
            "(line 102,col 9)-(line 102,col 60)",
            "(line 103,col 9)-(line 103,col 60)",
            "(line 105,col 9)-(line 105,col 69)",
            "(line 106,col 9)-(line 106,col 69)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        final MutableDouble mutNum = new MutableDouble(0d);\n\n        assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));\n        assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));\n        assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));\n        try {\n            mutNum.compareTo(null);\n            fail();\n        } catch (NullPointerException ex) {}\n    }",
        "begin_line": 111,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 59)",
            "(line 114,col 9)-(line 114,col 65)",
            "(line 115,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 66)",
            "(line 117,col 9)-(line 120,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testPrimitiveValues()",
        "snippet": "    public void testPrimitiveValues() {\n        MutableDouble mutNum = new MutableDouble(1.7);\n        \n        assertEquals( 1.7F, mutNum.floatValue(), 0 );\n        assertEquals( 1.7, mutNum.doubleValue(), 0 );\n        assertEquals( (byte) 1, mutNum.byteValue() );\n        assertEquals( (short) 1, mutNum.shortValue() );\n        assertEquals( 1, mutNum.intValue() );\n        assertEquals( 1L, mutNum.longValue() );\n    }",
        "begin_line": 123,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 54)",
            "(line 126,col 9)-(line 126,col 53)",
            "(line 127,col 9)-(line 127,col 53)",
            "(line 128,col 9)-(line 128,col 53)",
            "(line 129,col 9)-(line 129,col 55)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 131,col 9)-(line 131,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testToDouble()",
        "snippet": "    public void testToDouble() {\n        assertEquals(new Double(0d), new MutableDouble(0d).toDouble());\n        assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());\n    }",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 71)",
            "(line 136,col 9)-(line 136,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testIncrement()",
        "snippet": "    public void testIncrement() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.increment();\n        \n        assertEquals(2, mutNum.intValue());\n        assertEquals(2L, mutNum.longValue());\n    }",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 52)",
            "(line 141,col 9)-(line 141,col 27)",
            "(line 143,col 9)-(line 143,col 43)",
            "(line 144,col 9)-(line 144,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testDecrement()",
        "snippet": "    public void testDecrement() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.decrement();\n        \n        assertEquals(0, mutNum.intValue());\n        assertEquals(0L, mutNum.longValue());\n    }",
        "begin_line": 147,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 52)",
            "(line 149,col 9)-(line 149,col 27)",
            "(line 151,col 9)-(line 151,col 43)",
            "(line 152,col 9)-(line 152,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testAddValuePrimitive()",
        "snippet": "    public void testAddValuePrimitive() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.add(1.1d);\n        \n        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 52)",
            "(line 157,col 9)-(line 157,col 25)",
            "(line 159,col 9)-(line 159,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testAddValueObject()",
        "snippet": "    public void testAddValueObject() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.add(new Double(1.1d));\n        \n        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 52)",
            "(line 164,col 9)-(line 164,col 37)",
            "(line 166,col 9)-(line 166,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testSubtractValuePrimitive()",
        "snippet": "    public void testSubtractValuePrimitive() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.subtract(0.9d);\n        \n        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 169,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 52)",
            "(line 171,col 9)-(line 171,col 30)",
            "(line 173,col 9)-(line 173,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testSubtractValueObject()",
        "snippet": "    public void testSubtractValueObject() {\n        MutableDouble mutNum = new MutableDouble(1);\n        mutNum.subtract(new Double(0.9d));\n        \n        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n    }",
        "begin_line": 176,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 42)",
            "(line 180,col 9)-(line 180,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.mutable.MutableDoubleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java",
        "signature": "org.apache.commons.lang3.mutable.MutableDoubleTest.testToString()",
        "snippet": "    public void testToString() {\n        assertEquals(\"0.0\", new MutableDouble(0d).toString());\n        assertEquals(\"10.0\", new MutableDouble(10d).toString());\n        assertEquals(\"-123.0\", new MutableDouble(-123d).toString());\n    }",
        "begin_line": 183,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 62)",
            "(line 185,col 9)-(line 185,col 64)",
            "(line 186,col 9)-(line 186,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.FractionTest(java.lang.String)",
        "snippet": "    public FractionTest(String name) {\n        super(name);\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testConstants()",
        "snippet": "    public void testConstants() {\n        assertEquals(0, Fraction.ZERO.getNumerator());\n        assertEquals(1, Fraction.ZERO.getDenominator());\n        \n        assertEquals(1, Fraction.ONE.getNumerator());\n        assertEquals(1, Fraction.ONE.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_HALF.getNumerator());\n        assertEquals(2, Fraction.ONE_HALF.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_THIRD.getNumerator());\n        assertEquals(3, Fraction.ONE_THIRD.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\n        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\n        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\n        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\n        \n        assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n    }",
        "begin_line": 40,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 56)",
            "(line 44,col 9)-(line 44,col 53)",
            "(line 45,col 9)-(line 45,col 55)",
            "(line 47,col 9)-(line 47,col 58)",
            "(line 48,col 9)-(line 48,col 60)",
            "(line 50,col 9)-(line 50,col 59)",
            "(line 51,col 9)-(line 51,col 61)",
            "(line 53,col 9)-(line 53,col 60)",
            "(line 54,col 9)-(line 54,col 62)",
            "(line 56,col 9)-(line 56,col 61)",
            "(line 57,col 9)-(line 57,col 63)",
            "(line 59,col 9)-(line 59,col 62)",
            "(line 60,col 9)-(line 60,col 64)",
            "(line 62,col 9)-(line 62,col 64)",
            "(line 63,col 9)-(line 63,col 66)",
            "(line 65,col 9)-(line 65,col 59)",
            "(line 66,col 9)-(line 66,col 61)",
            "(line 68,col 9)-(line 68,col 60)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 64)",
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_int_int()",
        "snippet": "    public void testFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(23, 345);\n        assertEquals(23, f.getNumerator());\n        assertEquals(345, f.getDenominator());\n        \n        // improper\n        f = Fraction.getFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getFraction(-6, 10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(6, -10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(-6, -10);\n        assertEquals(6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large: can't represent as unsimplified fraction, although\n        try {\n            f = Fraction.getFraction(4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 78,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 26)",
            "(line 82,col 9)-(line 82,col 39)",
            "(line 83,col 9)-(line 83,col 42)",
            "(line 84,col 9)-(line 84,col 44)",
            "(line 86,col 9)-(line 86,col 39)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 44)",
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 42)",
            "(line 93,col 9)-(line 93,col 44)",
            "(line 95,col 9)-(line 95,col 39)",
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 44)",
            "(line 99,col 9)-(line 99,col 42)",
            "(line 100,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 46)",
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 44)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 111,col 45)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 43)",
            "(line 115,col 9)-(line 115,col 45)",
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 122,col 9)-(line 125,col 43)",
            "(line 127,col 9)-(line 130,col 43)",
            "(line 132,col 9)-(line 135,col 43)",
            "(line 138,col 9)-(line 141,col 43)",
            "(line 142,col 9)-(line 145,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_int_int_int()",
        "snippet": "    public void testFactory_int_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 0, 2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 1, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1, 2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negatives\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // negative whole\n        f = Fraction.getFraction(-1, 6, 10);\n        assertEquals(-16, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(-1, -6, 10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(-1, 6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(0, 1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(1, 2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); \n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large\n        f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);\n        assertEquals(-Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        try {\n            // negative denominators not allowed in this constructor.\n            f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 148,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 26)",
            "(line 152,col 9)-(line 152,col 42)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 156,col 9)-(line 156,col 42)",
            "(line 157,col 9)-(line 157,col 42)",
            "(line 158,col 9)-(line 158,col 44)",
            "(line 160,col 9)-(line 160,col 42)",
            "(line 161,col 9)-(line 161,col 42)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 170,col 9)-(line 173,col 43)",
            "(line 175,col 9)-(line 178,col 43)",
            "(line 180,col 9)-(line 183,col 43)",
            "(line 186,col 9)-(line 186,col 44)",
            "(line 187,col 9)-(line 187,col 44)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 190,col 9)-(line 193,col 43)",
            "(line 195,col 9)-(line 198,col 43)",
            "(line 200,col 9)-(line 203,col 43)",
            "(line 206,col 9)-(line 209,col 43)",
            "(line 211,col 9)-(line 214,col 43)",
            "(line 216,col 9)-(line 219,col 43)",
            "(line 221,col 9)-(line 224,col 43)",
            "(line 226,col 9)-(line 229,col 43)",
            "(line 232,col 9)-(line 232,col 59)",
            "(line 233,col 9)-(line 233,col 59)",
            "(line 234,col 9)-(line 234,col 60)",
            "(line 236,col 9)-(line 240,col 43)",
            "(line 241,col 9)-(line 244,col 43)",
            "(line 245,col 9)-(line 248,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int()",
        "snippet": "    public void testReducedFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}      \n    }",
        "begin_line": 250,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 26)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 42)",
            "(line 256,col 9)-(line 256,col 44)",
            "(line 259,col 9)-(line 259,col 46)",
            "(line 260,col 9)-(line 260,col 42)",
            "(line 261,col 9)-(line 261,col 44)",
            "(line 263,col 9)-(line 263,col 46)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 265,col 9)-(line 265,col 44)",
            "(line 268,col 9)-(line 268,col 47)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 270,col 9)-(line 270,col 44)",
            "(line 273,col 9)-(line 273,col 48)",
            "(line 274,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 44)",
            "(line 277,col 9)-(line 277,col 48)",
            "(line 278,col 9)-(line 278,col 43)",
            "(line 279,col 9)-(line 279,col 44)",
            "(line 281,col 9)-(line 281,col 49)",
            "(line 282,col 9)-(line 282,col 42)",
            "(line 283,col 9)-(line 283,col 44)",
            "(line 286,col 9)-(line 289,col 43)",
            "(line 291,col 9)-(line 294,col 43)",
            "(line 296,col 9)-(line 299,col 43)",
            "(line 302,col 9)-(line 302,col 46)",
            "(line 303,col 9)-(line 303,col 42)",
            "(line 304,col 9)-(line 304,col 44)",
            "(line 306,col 9)-(line 306,col 46)",
            "(line 307,col 9)-(line 307,col 42)",
            "(line 308,col 9)-(line 308,col 44)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 42)",
            "(line 312,col 9)-(line 312,col 44)",
            "(line 314,col 9)-(line 314,col 48)",
            "(line 315,col 9)-(line 315,col 42)",
            "(line 316,col 9)-(line 316,col 44)",
            "(line 318,col 9)-(line 318,col 49)",
            "(line 319,col 9)-(line 319,col 43)",
            "(line 320,col 9)-(line 320,col 44)",
            "(line 324,col 9)-(line 324,col 63)",
            "(line 325,col 9)-(line 325,col 42)",
            "(line 326,col 9)-(line 326,col 67)",
            "(line 329,col 9)-(line 332,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_double()",
        "snippet": "    public void testFactory_double() {\n        Fraction f = null;\n        \n        try {\n            f = Fraction.getFraction(Double.NaN);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.POSITIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero\n        f = Fraction.getFraction(0.0d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one\n        f = Fraction.getFraction(1.0d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one half\n        f = Fraction.getFraction(0.5d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negative\n        f = Fraction.getFraction(-0.875d);\n        assertEquals(-7, f.getNumerator());\n        assertEquals(8, f.getDenominator());\n        \n        // over 1\n        f = Fraction.getFraction(1.25d);\n        assertEquals(5, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        // two thirds\n        f = Fraction.getFraction(0.66666d);\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        // small\n        f = Fraction.getFraction(1.0d/10001d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        Fraction f2 = null;\n        for (int i = 1; i <= 100; i++) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n        // save time by skipping some tests!  (\n        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n    }",
        "begin_line": 335,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 26)",
            "(line 338,col 9)-(line 341,col 43)",
            "(line 343,col 9)-(line 346,col 43)",
            "(line 348,col 9)-(line 351,col 43)",
            "(line 353,col 9)-(line 356,col 43)",
            "(line 359,col 9)-(line 359,col 39)",
            "(line 360,col 9)-(line 360,col 42)",
            "(line 361,col 9)-(line 361,col 44)",
            "(line 364,col 9)-(line 364,col 39)",
            "(line 365,col 9)-(line 365,col 42)",
            "(line 366,col 9)-(line 366,col 44)",
            "(line 369,col 9)-(line 369,col 39)",
            "(line 370,col 9)-(line 370,col 42)",
            "(line 371,col 9)-(line 371,col 44)",
            "(line 374,col 9)-(line 374,col 42)",
            "(line 375,col 9)-(line 375,col 43)",
            "(line 376,col 9)-(line 376,col 44)",
            "(line 379,col 9)-(line 379,col 40)",
            "(line 380,col 9)-(line 380,col 42)",
            "(line 381,col 9)-(line 381,col 44)",
            "(line 384,col 9)-(line 384,col 43)",
            "(line 385,col 9)-(line 385,col 42)",
            "(line 386,col 9)-(line 386,col 44)",
            "(line 389,col 9)-(line 389,col 46)",
            "(line 390,col 9)-(line 390,col 42)",
            "(line 391,col 9)-(line 391,col 44)",
            "(line 394,col 9)-(line 394,col 27)",
            "(line 395,col 9)-(line 407,col 9)",
            "(line 409,col 9)-(line 421,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String()",
        "snippet": "    public void testFactory_String() {\n        try {\n            Fraction.getFraction(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n    }",
        "begin_line": 424,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 428,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String_double()",
        "snippet": "    public void testFactory_String_double() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0.0\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.66666\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2.3R\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2147483648\"); // too big\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\".\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }",
        "begin_line": 432,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 26)",
            "(line 435,col 9)-(line 435,col 40)",
            "(line 436,col 9)-(line 436,col 42)",
            "(line 437,col 9)-(line 437,col 44)",
            "(line 439,col 9)-(line 439,col 40)",
            "(line 440,col 9)-(line 440,col 42)",
            "(line 441,col 9)-(line 441,col 44)",
            "(line 443,col 9)-(line 443,col 40)",
            "(line 444,col 9)-(line 444,col 42)",
            "(line 445,col 9)-(line 445,col 44)",
            "(line 447,col 9)-(line 447,col 44)",
            "(line 448,col 9)-(line 448,col 42)",
            "(line 449,col 9)-(line 449,col 44)",
            "(line 451,col 9)-(line 454,col 45)",
            "(line 456,col 9)-(line 459,col 45)",
            "(line 461,col 9)-(line 464,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String_proper()",
        "snippet": "    public void testFactory_String_proper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0 0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 1/5\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7 1/2\");\n        assertEquals(15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 2/4\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-7 1/2\");\n        assertEquals(-15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-1 2/4\");\n        assertEquals(-6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"a 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 b/4\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n\n        try {\n            f = Fraction.getFraction(\" 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\" \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }",
        "begin_line": 467,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 468,col 9)-(line 468,col 26)",
            "(line 470,col 9)-(line 470,col 42)",
            "(line 471,col 9)-(line 471,col 42)",
            "(line 472,col 9)-(line 472,col 44)",
            "(line 474,col 9)-(line 474,col 42)",
            "(line 475,col 9)-(line 475,col 42)",
            "(line 476,col 9)-(line 476,col 44)",
            "(line 478,col 9)-(line 478,col 42)",
            "(line 479,col 9)-(line 479,col 43)",
            "(line 480,col 9)-(line 480,col 44)",
            "(line 482,col 9)-(line 482,col 42)",
            "(line 483,col 9)-(line 483,col 42)",
            "(line 484,col 9)-(line 484,col 44)",
            "(line 486,col 9)-(line 486,col 43)",
            "(line 487,col 9)-(line 487,col 44)",
            "(line 488,col 9)-(line 488,col 44)",
            "(line 490,col 9)-(line 490,col 43)",
            "(line 491,col 9)-(line 491,col 43)",
            "(line 492,col 9)-(line 492,col 44)",
            "(line 494,col 9)-(line 497,col 45)",
            "(line 499,col 9)-(line 502,col 45)",
            "(line 504,col 9)-(line 507,col 45)",
            "(line 509,col 9)-(line 512,col 45)",
            "(line 514,col 9)-(line 517,col 45)",
            "(line 519,col 9)-(line 522,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String_improper()",
        "snippet": "    public void testFactory_String_improper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/3\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7/3\");\n        assertEquals(7, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/4\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2/d\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2e/3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }",
        "begin_line": 525,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 26)",
            "(line 528,col 9)-(line 528,col 40)",
            "(line 529,col 9)-(line 529,col 42)",
            "(line 530,col 9)-(line 530,col 44)",
            "(line 532,col 9)-(line 532,col 40)",
            "(line 533,col 9)-(line 533,col 42)",
            "(line 534,col 9)-(line 534,col 44)",
            "(line 536,col 9)-(line 536,col 40)",
            "(line 537,col 9)-(line 537,col 42)",
            "(line 538,col 9)-(line 538,col 44)",
            "(line 540,col 9)-(line 540,col 40)",
            "(line 541,col 9)-(line 541,col 42)",
            "(line 542,col 9)-(line 542,col 44)",
            "(line 544,col 9)-(line 544,col 40)",
            "(line 545,col 9)-(line 545,col 42)",
            "(line 546,col 9)-(line 546,col 44)",
            "(line 548,col 9)-(line 548,col 40)",
            "(line 549,col 9)-(line 549,col 42)",
            "(line 550,col 9)-(line 550,col 44)",
            "(line 552,col 9)-(line 555,col 45)",
            "(line 557,col 9)-(line 560,col 45)",
            "(line 562,col 9)-(line 565,col 45)",
            "(line 567,col 9)-(line 570,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testGets()",
        "snippet": "    public void testGets() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5, 6);\n        assertEquals(23, f.getNumerator());\n        assertEquals(3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(-3, 5, 6);\n        assertEquals(-23, f.getNumerator());\n        assertEquals(-3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(Integer.MIN_VALUE, f.getProperWhole());\n        assertEquals(0, f.getProperNumerator());\n        assertEquals(1, f.getDenominator());\n    }",
        "begin_line": 573,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 574,col 9)-(line 574,col 26)",
            "(line 576,col 9)-(line 576,col 42)",
            "(line 577,col 9)-(line 577,col 43)",
            "(line 578,col 9)-(line 578,col 44)",
            "(line 579,col 9)-(line 579,col 48)",
            "(line 580,col 9)-(line 580,col 44)",
            "(line 582,col 9)-(line 582,col 43)",
            "(line 583,col 9)-(line 583,col 44)",
            "(line 584,col 9)-(line 584,col 45)",
            "(line 585,col 9)-(line 585,col 48)",
            "(line 586,col 9)-(line 586,col 44)",
            "(line 588,col 9)-(line 588,col 58)",
            "(line 589,col 9)-(line 589,col 58)",
            "(line 590,col 9)-(line 590,col 60)",
            "(line 591,col 9)-(line 591,col 48)",
            "(line 592,col 9)-(line 592,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testConversions()",
        "snippet": "    public void testConversions() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 7, 8);\n        assertEquals(3, f.intValue());\n        assertEquals(3L, f.longValue());\n        assertEquals(3.875f, f.floatValue(), 0.00001f);\n        assertEquals(3.875d, f.doubleValue(), 0.00001d);\n    }",
        "begin_line": 595,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 596,col 26)",
            "(line 598,col 9)-(line 598,col 42)",
            "(line 599,col 9)-(line 599,col 38)",
            "(line 600,col 9)-(line 600,col 40)",
            "(line 601,col 9)-(line 601,col 55)",
            "(line 602,col 9)-(line 602,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testReduce()",
        "snippet": "    public void testReduce() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(result, Fraction.ZERO);\n    }",
        "begin_line": 605,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 606,col 9)-(line 606,col 26)",
            "(line 608,col 9)-(line 608,col 41)",
            "(line 609,col 9)-(line 609,col 37)",
            "(line 610,col 9)-(line 610,col 47)",
            "(line 611,col 9)-(line 611,col 49)",
            "(line 613,col 9)-(line 613,col 41)",
            "(line 614,col 9)-(line 614,col 28)",
            "(line 615,col 9)-(line 615,col 47)",
            "(line 616,col 9)-(line 616,col 49)",
            "(line 618,col 9)-(line 618,col 40)",
            "(line 619,col 9)-(line 619,col 28)",
            "(line 620,col 9)-(line 620,col 48)",
            "(line 621,col 9)-(line 621,col 49)",
            "(line 623,col 9)-(line 623,col 40)",
            "(line 624,col 9)-(line 624,col 28)",
            "(line 625,col 9)-(line 625,col 48)",
            "(line 626,col 9)-(line 626,col 49)",
            "(line 627,col 9)-(line 627,col 30)",
            "(line 629,col 9)-(line 629,col 39)",
            "(line 630,col 9)-(line 630,col 28)",
            "(line 631,col 9)-(line 631,col 47)",
            "(line 632,col 9)-(line 632,col 49)",
            "(line 633,col 9)-(line 633,col 30)",
            "(line 635,col 9)-(line 635,col 39)",
            "(line 636,col 9)-(line 636,col 28)",
            "(line 637,col 9)-(line 637,col 47)",
            "(line 638,col 9)-(line 638,col 49)",
            "(line 639,col 9)-(line 639,col 30)",
            "(line 641,col 9)-(line 641,col 41)",
            "(line 642,col 9)-(line 642,col 28)",
            "(line 643,col 9)-(line 643,col 47)",
            "(line 644,col 9)-(line 644,col 49)",
            "(line 645,col 9)-(line 645,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testInvert()",
        "snippet": "    public void testInvert() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.invert();\n        assertEquals(75, f.getNumerator());\n        assertEquals(50, f.getDenominator());\n        \n        f = Fraction.getFraction(4, 3);\n        f = f.invert();\n        assertEquals(3, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(-15, 47);\n        f = f.invert();\n        assertEquals(-47, f.getNumerator());\n        assertEquals(15, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 3);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // large values\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.invert();\n        assertEquals(1, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }",
        "begin_line": 648,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 26)",
            "(line 651,col 9)-(line 651,col 41)",
            "(line 652,col 9)-(line 652,col 23)",
            "(line 653,col 9)-(line 653,col 43)",
            "(line 654,col 9)-(line 654,col 45)",
            "(line 656,col 9)-(line 656,col 39)",
            "(line 657,col 9)-(line 657,col 23)",
            "(line 658,col 9)-(line 658,col 42)",
            "(line 659,col 9)-(line 659,col 44)",
            "(line 661,col 9)-(line 661,col 42)",
            "(line 662,col 9)-(line 662,col 23)",
            "(line 663,col 9)-(line 663,col 44)",
            "(line 664,col 9)-(line 664,col 45)",
            "(line 666,col 9)-(line 666,col 39)",
            "(line 667,col 9)-(line 670,col 43)",
            "(line 673,col 9)-(line 673,col 55)",
            "(line 674,col 9)-(line 677,col 43)",
            "(line 679,col 9)-(line 679,col 55)",
            "(line 680,col 9)-(line 680,col 23)",
            "(line 681,col 9)-(line 681,col 42)",
            "(line 682,col 9)-(line 682,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testNegate()",
        "snippet": "    public void testNegate() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.negate();\n        assertEquals(-50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.negate();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        // large values\n        f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 685,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 686,col 9)-(line 686,col 26)",
            "(line 688,col 9)-(line 688,col 41)",
            "(line 689,col 9)-(line 689,col 23)",
            "(line 690,col 9)-(line 690,col 44)",
            "(line 691,col 9)-(line 691,col 45)",
            "(line 693,col 9)-(line 693,col 42)",
            "(line 694,col 9)-(line 694,col 23)",
            "(line 695,col 9)-(line 695,col 43)",
            "(line 696,col 9)-(line 696,col 45)",
            "(line 699,col 9)-(line 699,col 73)",
            "(line 700,col 9)-(line 700,col 23)",
            "(line 701,col 9)-(line 701,col 60)",
            "(line 702,col 9)-(line 702,col 60)",
            "(line 704,col 9)-(line 704,col 55)",
            "(line 705,col 9)-(line 708,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testAbs()",
        "snippet": "    public void testAbs() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, -1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.abs();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 711,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 26)",
            "(line 714,col 9)-(line 714,col 41)",
            "(line 715,col 9)-(line 715,col 20)",
            "(line 716,col 9)-(line 716,col 43)",
            "(line 717,col 9)-(line 717,col 45)",
            "(line 719,col 9)-(line 719,col 42)",
            "(line 720,col 9)-(line 720,col 20)",
            "(line 721,col 9)-(line 721,col 43)",
            "(line 722,col 9)-(line 722,col 45)",
            "(line 724,col 9)-(line 724,col 55)",
            "(line 725,col 9)-(line 725,col 20)",
            "(line 726,col 9)-(line 726,col 58)",
            "(line 727,col 9)-(line 727,col 44)",
            "(line 729,col 9)-(line 729,col 56)",
            "(line 730,col 9)-(line 730,col 20)",
            "(line 731,col 9)-(line 731,col 58)",
            "(line 732,col 9)-(line 732,col 44)",
            "(line 734,col 9)-(line 734,col 55)",
            "(line 735,col 9)-(line 738,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testPow()",
        "snippet": "    public void testPow() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(3, 5);\n        assertSame(f, f.pow(1));\n        assertEquals(f, f.pow(1));\n\n        f = Fraction.getFraction(3, 5);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-1);\n        assertEquals(5, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // check unreduced fractions stay that way.\n        f = Fraction.getFraction(6, 10);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(6, 10);\n        assertEquals(f, f.pow(1));\n        assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));\n\n        f = Fraction.getFraction(6, 10);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-1);\n        assertEquals(10, f.getNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // zero to any positive power is still zero.\n        f = Fraction.getFraction(0, 1231);\n        f = f.pow(1);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1231, f.getDenominator());\n        f = f.pow(2);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        // zero to negative powers should throw an exception\n        try {\n            f = f.pow(-1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = f.pow(Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // one to any power is still one.\n        f = Fraction.getFraction(1, 1);\n        f = f.pow(0);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(-1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MAX_VALUE);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MIN_VALUE);\n        assertEquals(f, Fraction.ONE);\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // Numerator growing too negative during the pow operation.\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.pow(3);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(65536, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 741,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 742,col 26)",
            "(line 744,col 9)-(line 744,col 39)",
            "(line 745,col 9)-(line 745,col 45)",
            "(line 747,col 9)-(line 747,col 39)",
            "(line 748,col 9)-(line 748,col 32)",
            "(line 749,col 9)-(line 749,col 34)",
            "(line 751,col 9)-(line 751,col 39)",
            "(line 752,col 9)-(line 752,col 21)",
            "(line 753,col 9)-(line 753,col 42)",
            "(line 754,col 9)-(line 754,col 45)",
            "(line 756,col 9)-(line 756,col 39)",
            "(line 757,col 9)-(line 757,col 21)",
            "(line 758,col 9)-(line 758,col 43)",
            "(line 759,col 9)-(line 759,col 46)",
            "(line 761,col 9)-(line 761,col 39)",
            "(line 762,col 9)-(line 762,col 22)",
            "(line 763,col 9)-(line 763,col 42)",
            "(line 764,col 9)-(line 764,col 44)",
            "(line 766,col 9)-(line 766,col 39)",
            "(line 767,col 9)-(line 767,col 22)",
            "(line 768,col 9)-(line 768,col 43)",
            "(line 769,col 9)-(line 769,col 44)",
            "(line 772,col 9)-(line 772,col 40)",
            "(line 773,col 9)-(line 773,col 45)",
            "(line 775,col 9)-(line 775,col 40)",
            "(line 776,col 9)-(line 776,col 34)",
            "(line 777,col 9)-(line 777,col 64)",
            "(line 779,col 9)-(line 779,col 40)",
            "(line 780,col 9)-(line 780,col 21)",
            "(line 781,col 9)-(line 781,col 42)",
            "(line 782,col 9)-(line 782,col 45)",
            "(line 784,col 9)-(line 784,col 40)",
            "(line 785,col 9)-(line 785,col 21)",
            "(line 786,col 9)-(line 786,col 43)",
            "(line 787,col 9)-(line 787,col 46)",
            "(line 789,col 9)-(line 789,col 40)",
            "(line 790,col 9)-(line 790,col 22)",
            "(line 791,col 9)-(line 791,col 43)",
            "(line 792,col 9)-(line 792,col 44)",
            "(line 794,col 9)-(line 794,col 40)",
            "(line 795,col 9)-(line 795,col 22)",
            "(line 796,col 9)-(line 796,col 43)",
            "(line 797,col 9)-(line 797,col 44)",
            "(line 800,col 9)-(line 800,col 42)",
            "(line 801,col 9)-(line 801,col 21)",
            "(line 802,col 9)-(line 802,col 50)",
            "(line 803,col 9)-(line 803,col 42)",
            "(line 804,col 9)-(line 804,col 47)",
            "(line 805,col 9)-(line 805,col 21)",
            "(line 806,col 9)-(line 806,col 50)",
            "(line 807,col 9)-(line 807,col 42)",
            "(line 808,col 9)-(line 808,col 44)",
            "(line 811,col 9)-(line 814,col 43)",
            "(line 815,col 9)-(line 818,col 43)",
            "(line 821,col 9)-(line 821,col 39)",
            "(line 822,col 9)-(line 822,col 21)",
            "(line 823,col 9)-(line 823,col 38)",
            "(line 824,col 9)-(line 824,col 21)",
            "(line 825,col 9)-(line 825,col 38)",
            "(line 826,col 9)-(line 826,col 22)",
            "(line 827,col 9)-(line 827,col 38)",
            "(line 828,col 9)-(line 828,col 37)",
            "(line 829,col 9)-(line 829,col 38)",
            "(line 830,col 9)-(line 830,col 37)",
            "(line 831,col 9)-(line 831,col 38)",
            "(line 833,col 9)-(line 833,col 55)",
            "(line 834,col 9)-(line 837,col 43)",
            "(line 840,col 9)-(line 840,col 55)",
            "(line 841,col 9)-(line 844,col 43)",
            "(line 846,col 9)-(line 846,col 43)",
            "(line 847,col 9)-(line 850,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testAdd()",
        "snippet": "    public void testAdd() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.add(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.add(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.add(f2);\n        assertEquals(-1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.add(f2);\n        assertEquals(11, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 8);\n        f2 = Fraction.getFraction(1, 6);\n        f = f1.add(f2);\n        assertEquals(13, f.getNumerator());\n        assertEquals(24, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertSame(f2, f);\n        f = f2.add(f1);\n        assertSame(f2, f);\n        \n        f1 = Fraction.getFraction(-1, 13*13*2*2);\n        f2 = Fraction.getFraction(-2, 13*17*2);\n        f = f1.add(f2);\n        assertEquals(13*13*17*2*2, f.getDenominator());\n        assertEquals(-17 - 2*13*2, f.getNumerator());\n        \n        try {\n            f.add(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.add(f2);\n        assertEquals(52451, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD;\n        f = f1.add(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 853,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 854,col 9)-(line 854,col 26)",
            "(line 855,col 9)-(line 855,col 27)",
            "(line 856,col 9)-(line 856,col 27)",
            "(line 858,col 9)-(line 858,col 40)",
            "(line 859,col 9)-(line 859,col 40)",
            "(line 860,col 9)-(line 860,col 23)",
            "(line 861,col 9)-(line 861,col 42)",
            "(line 862,col 9)-(line 862,col 44)",
            "(line 864,col 9)-(line 864,col 40)",
            "(line 865,col 9)-(line 865,col 40)",
            "(line 866,col 9)-(line 866,col 23)",
            "(line 867,col 9)-(line 867,col 42)",
            "(line 868,col 9)-(line 868,col 44)",
            "(line 870,col 9)-(line 870,col 40)",
            "(line 871,col 9)-(line 871,col 40)",
            "(line 872,col 9)-(line 872,col 23)",
            "(line 873,col 9)-(line 873,col 42)",
            "(line 874,col 9)-(line 874,col 44)",
            "(line 876,col 9)-(line 876,col 40)",
            "(line 877,col 9)-(line 877,col 41)",
            "(line 878,col 9)-(line 878,col 23)",
            "(line 879,col 9)-(line 879,col 43)",
            "(line 880,col 9)-(line 880,col 44)",
            "(line 882,col 9)-(line 882,col 60)",
            "(line 883,col 9)-(line 883,col 26)",
            "(line 884,col 9)-(line 884,col 23)",
            "(line 885,col 9)-(line 885,col 58)",
            "(line 886,col 9)-(line 886,col 44)",
            "(line 888,col 9)-(line 888,col 40)",
            "(line 889,col 9)-(line 889,col 40)",
            "(line 890,col 9)-(line 890,col 23)",
            "(line 891,col 9)-(line 891,col 43)",
            "(line 892,col 9)-(line 892,col 45)",
            "(line 894,col 9)-(line 894,col 40)",
            "(line 895,col 9)-(line 895,col 40)",
            "(line 896,col 9)-(line 896,col 23)",
            "(line 897,col 9)-(line 897,col 43)",
            "(line 898,col 9)-(line 898,col 45)",
            "(line 900,col 9)-(line 900,col 40)",
            "(line 901,col 9)-(line 901,col 40)",
            "(line 902,col 9)-(line 902,col 23)",
            "(line 903,col 9)-(line 903,col 26)",
            "(line 904,col 9)-(line 904,col 23)",
            "(line 905,col 9)-(line 905,col 26)",
            "(line 907,col 9)-(line 907,col 49)",
            "(line 908,col 9)-(line 908,col 47)",
            "(line 909,col 9)-(line 909,col 23)",
            "(line 910,col 9)-(line 910,col 55)",
            "(line 911,col 9)-(line 911,col 53)",
            "(line 913,col 9)-(line 916,col 48)",
            "(line 920,col 9)-(line 920,col 45)",
            "(line 921,col 9)-(line 921,col 43)",
            "(line 922,col 9)-(line 922,col 23)",
            "(line 923,col 9)-(line 923,col 46)",
            "(line 924,col 9)-(line 924,col 53)",
            "(line 926,col 9)-(line 926,col 56)",
            "(line 927,col 9)-(line 927,col 32)",
            "(line 928,col 9)-(line 928,col 23)",
            "(line 929,col 9)-(line 929,col 60)",
            "(line 930,col 9)-(line 930,col 44)",
            "(line 932,col 9)-(line 932,col 60)",
            "(line 933,col 9)-(line 933,col 26)",
            "(line 934,col 9)-(line 934,col 23)",
            "(line 935,col 9)-(line 935,col 58)",
            "(line 936,col 9)-(line 936,col 44)",
            "(line 938,col 9)-(line 941,col 43)",
            "(line 944,col 9)-(line 944,col 56)",
            "(line 945,col 9)-(line 945,col 40)",
            "(line 946,col 9)-(line 949,col 43)",
            "(line 951,col 9)-(line 955,col 43)",
            "(line 957,col 9)-(line 961,col 43)",
            "(line 963,col 9)-(line 963,col 44)",
            "(line 964,col 9)-(line 964,col 43)",
            "(line 965,col 9)-(line 968,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testSubtract()",
        "snippet": "    public void testSubtract() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.subtract(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(7, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.subtract(f2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(7, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(4, 5);\n        f = f1.subtract(f2);\n        assertEquals(-4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f2.subtract(f1);\n        assertSame(f2, f);\n        \n        try {\n            f.subtract(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.subtract(f2);\n        assertEquals(-13085, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD.negate();\n        f = f1.subtract(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            fail(\"expecting ArithmeticException\");  //should overflow\n        } catch (ArithmeticException ex) {}\n            \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 971,
        "end_line": 1081,
        "comment": "",
        "child_ranges": [
            "(line 972,col 9)-(line 972,col 26)",
            "(line 973,col 9)-(line 973,col 27)",
            "(line 974,col 9)-(line 974,col 27)",
            "(line 976,col 9)-(line 976,col 40)",
            "(line 977,col 9)-(line 977,col 40)",
            "(line 978,col 9)-(line 978,col 28)",
            "(line 979,col 9)-(line 979,col 42)",
            "(line 980,col 9)-(line 980,col 44)",
            "(line 982,col 9)-(line 982,col 40)",
            "(line 983,col 9)-(line 983,col 40)",
            "(line 984,col 9)-(line 984,col 28)",
            "(line 985,col 9)-(line 985,col 42)",
            "(line 986,col 9)-(line 986,col 44)",
            "(line 988,col 9)-(line 988,col 40)",
            "(line 989,col 9)-(line 989,col 40)",
            "(line 990,col 9)-(line 990,col 28)",
            "(line 991,col 9)-(line 991,col 42)",
            "(line 992,col 9)-(line 992,col 44)",
            "(line 994,col 9)-(line 994,col 40)",
            "(line 995,col 9)-(line 995,col 41)",
            "(line 996,col 9)-(line 996,col 28)",
            "(line 997,col 9)-(line 997,col 42)",
            "(line 998,col 9)-(line 998,col 44)",
            "(line 1000,col 9)-(line 1000,col 40)",
            "(line 1001,col 9)-(line 1001,col 40)",
            "(line 1002,col 9)-(line 1002,col 28)",
            "(line 1003,col 9)-(line 1003,col 43)",
            "(line 1004,col 9)-(line 1004,col 44)",
            "(line 1006,col 9)-(line 1006,col 40)",
            "(line 1007,col 9)-(line 1007,col 41)",
            "(line 1008,col 9)-(line 1008,col 28)",
            "(line 1009,col 9)-(line 1009,col 42)",
            "(line 1010,col 9)-(line 1010,col 44)",
            "(line 1012,col 9)-(line 1012,col 40)",
            "(line 1013,col 9)-(line 1013,col 40)",
            "(line 1014,col 9)-(line 1014,col 28)",
            "(line 1015,col 9)-(line 1015,col 42)",
            "(line 1016,col 9)-(line 1016,col 45)",
            "(line 1018,col 9)-(line 1018,col 40)",
            "(line 1019,col 9)-(line 1019,col 40)",
            "(line 1020,col 9)-(line 1020,col 28)",
            "(line 1021,col 9)-(line 1021,col 26)",
            "(line 1023,col 9)-(line 1026,col 48)",
            "(line 1030,col 9)-(line 1030,col 45)",
            "(line 1031,col 9)-(line 1031,col 43)",
            "(line 1032,col 9)-(line 1032,col 28)",
            "(line 1033,col 9)-(line 1033,col 47)",
            "(line 1034,col 9)-(line 1034,col 53)",
            "(line 1036,col 9)-(line 1036,col 56)",
            "(line 1037,col 9)-(line 1037,col 41)",
            "(line 1038,col 9)-(line 1038,col 28)",
            "(line 1039,col 9)-(line 1039,col 60)",
            "(line 1040,col 9)-(line 1040,col 44)",
            "(line 1042,col 9)-(line 1042,col 56)",
            "(line 1043,col 9)-(line 1043,col 26)",
            "(line 1044,col 9)-(line 1044,col 28)",
            "(line 1045,col 9)-(line 1045,col 60)",
            "(line 1046,col 9)-(line 1046,col 44)",
            "(line 1048,col 9)-(line 1053,col 43)",
            "(line 1056,col 9)-(line 1056,col 56)",
            "(line 1057,col 9)-(line 1057,col 39)",
            "(line 1058,col 9)-(line 1061,col 43)",
            "(line 1063,col 9)-(line 1067,col 43)",
            "(line 1069,col 9)-(line 1073,col 43)",
            "(line 1075,col 9)-(line 1075,col 44)",
            "(line 1076,col 9)-(line 1076,col 43)",
            "(line 1077,col 9)-(line 1080,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testMultiply()",
        "snippet": "    public void testMultiply() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(6, 10);\n        f2 = Fraction.getFraction(6, 10);\n        f = f1.multiplyBy(f2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        f = f.multiplyBy(f2);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(-3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.multiplyBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.multiplyBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.multiplyBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiplyBy(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 1083,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1084,col 9)-(line 1084,col 26)",
            "(line 1085,col 9)-(line 1085,col 27)",
            "(line 1086,col 9)-(line 1086,col 27)",
            "(line 1088,col 9)-(line 1088,col 40)",
            "(line 1089,col 9)-(line 1089,col 40)",
            "(line 1090,col 9)-(line 1090,col 30)",
            "(line 1091,col 9)-(line 1091,col 42)",
            "(line 1092,col 9)-(line 1092,col 45)",
            "(line 1094,col 9)-(line 1094,col 41)",
            "(line 1095,col 9)-(line 1095,col 41)",
            "(line 1096,col 9)-(line 1096,col 30)",
            "(line 1097,col 9)-(line 1097,col 42)",
            "(line 1098,col 9)-(line 1098,col 45)",
            "(line 1099,col 9)-(line 1099,col 29)",
            "(line 1100,col 9)-(line 1100,col 43)",
            "(line 1101,col 9)-(line 1101,col 46)",
            "(line 1103,col 9)-(line 1103,col 40)",
            "(line 1104,col 9)-(line 1104,col 41)",
            "(line 1105,col 9)-(line 1105,col 30)",
            "(line 1106,col 9)-(line 1106,col 43)",
            "(line 1107,col 9)-(line 1107,col 45)",
            "(line 1109,col 9)-(line 1109,col 41)",
            "(line 1110,col 9)-(line 1110,col 41)",
            "(line 1111,col 9)-(line 1111,col 30)",
            "(line 1112,col 9)-(line 1112,col 42)",
            "(line 1113,col 9)-(line 1113,col 45)",
            "(line 1116,col 9)-(line 1116,col 40)",
            "(line 1117,col 9)-(line 1117,col 40)",
            "(line 1118,col 9)-(line 1118,col 30)",
            "(line 1119,col 9)-(line 1119,col 37)",
            "(line 1121,col 9)-(line 1121,col 40)",
            "(line 1122,col 9)-(line 1122,col 26)",
            "(line 1123,col 9)-(line 1123,col 30)",
            "(line 1124,col 9)-(line 1124,col 42)",
            "(line 1125,col 9)-(line 1125,col 44)",
            "(line 1127,col 9)-(line 1127,col 56)",
            "(line 1128,col 9)-(line 1128,col 72)",
            "(line 1129,col 9)-(line 1129,col 30)",
            "(line 1130,col 9)-(line 1130,col 58)",
            "(line 1131,col 9)-(line 1131,col 44)",
            "(line 1133,col 9)-(line 1136,col 48)",
            "(line 1138,col 9)-(line 1142,col 43)",
            "(line 1144,col 9)-(line 1148,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testDivide()",
        "snippet": "    public void testDivide() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.divideBy(f2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.ZERO;\n        try {\n            f = f1.divideBy(f2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.divideBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divideBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f1);  \n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.divideBy(null);\n            fail(\"IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }",
        "begin_line": 1151,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1152,col 9)-(line 1152,col 26)",
            "(line 1153,col 9)-(line 1153,col 27)",
            "(line 1154,col 9)-(line 1154,col 27)",
            "(line 1156,col 9)-(line 1156,col 40)",
            "(line 1157,col 9)-(line 1157,col 40)",
            "(line 1158,col 9)-(line 1158,col 28)",
            "(line 1159,col 9)-(line 1159,col 42)",
            "(line 1160,col 9)-(line 1160,col 44)",
            "(line 1162,col 9)-(line 1162,col 40)",
            "(line 1163,col 9)-(line 1163,col 27)",
            "(line 1164,col 9)-(line 1167,col 43)",
            "(line 1169,col 9)-(line 1169,col 40)",
            "(line 1170,col 9)-(line 1170,col 40)",
            "(line 1171,col 9)-(line 1171,col 28)",
            "(line 1172,col 9)-(line 1172,col 37)",
            "(line 1174,col 9)-(line 1174,col 40)",
            "(line 1175,col 9)-(line 1175,col 26)",
            "(line 1176,col 9)-(line 1176,col 28)",
            "(line 1177,col 9)-(line 1177,col 42)",
            "(line 1178,col 9)-(line 1178,col 44)",
            "(line 1180,col 9)-(line 1180,col 56)",
            "(line 1181,col 9)-(line 1181,col 28)",
            "(line 1182,col 9)-(line 1182,col 42)",
            "(line 1183,col 9)-(line 1183,col 44)",
            "(line 1185,col 9)-(line 1185,col 72)",
            "(line 1186,col 9)-(line 1186,col 56)",
            "(line 1187,col 9)-(line 1187,col 28)",
            "(line 1188,col 9)-(line 1188,col 58)",
            "(line 1189,col 9)-(line 1189,col 44)",
            "(line 1191,col 9)-(line 1194,col 48)",
            "(line 1196,col 9)-(line 1200,col 43)",
            "(line 1201,col 9)-(line 1205,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testEquals()",
        "snippet": "    public void testEquals() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertEquals(false, f1.equals(null));\n        assertEquals(false, f1.equals(new Object()));\n        assertEquals(false, f1.equals(new Integer(6)));\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        assertEquals(false, f1.equals(f2));\n        assertEquals(true, f1.equals(f1));\n        assertEquals(true, f2.equals(f2));\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertEquals(true, f1.equals(f2));\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertEquals(false, f1.equals(f2));\n    }",
        "begin_line": 1208,
        "end_line": 1228,
        "comment": "",
        "child_ranges": [
            "(line 1209,col 9)-(line 1209,col 27)",
            "(line 1210,col 9)-(line 1210,col 27)",
            "(line 1212,col 9)-(line 1212,col 40)",
            "(line 1213,col 9)-(line 1213,col 45)",
            "(line 1214,col 9)-(line 1214,col 53)",
            "(line 1215,col 9)-(line 1215,col 55)",
            "(line 1217,col 9)-(line 1217,col 40)",
            "(line 1218,col 9)-(line 1218,col 40)",
            "(line 1219,col 9)-(line 1219,col 43)",
            "(line 1220,col 9)-(line 1220,col 42)",
            "(line 1221,col 9)-(line 1221,col 42)",
            "(line 1223,col 9)-(line 1223,col 40)",
            "(line 1224,col 9)-(line 1224,col 42)",
            "(line 1226,col 9)-(line 1226,col 41)",
            "(line 1227,col 9)-(line 1227,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Fraction f1 = Fraction.getFraction(3, 5);\n        Fraction f2 = Fraction.getFraction(3, 5);\n        \n        assertTrue(f1.hashCode() == f2.hashCode());\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.hashCode() != f2.hashCode());\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.hashCode() != f2.hashCode());\n    }",
        "begin_line": 1230,
        "end_line": 1241,
        "comment": "",
        "child_ranges": [
            "(line 1231,col 9)-(line 1231,col 49)",
            "(line 1232,col 9)-(line 1232,col 49)",
            "(line 1234,col 9)-(line 1234,col 51)",
            "(line 1236,col 9)-(line 1236,col 40)",
            "(line 1237,col 9)-(line 1237,col 51)",
            "(line 1239,col 9)-(line 1239,col 41)",
            "(line 1240,col 9)-(line 1240,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f1) == 0);\n        \n        try {\n            f1.compareTo(null);\n            fail(\"expecting NullPointerException\");\n        } catch (NullPointerException ex) {}\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(4, 5);\n        assertTrue(f1.compareTo(f2) < 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n        f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n    }",
        "begin_line": 1243,
        "end_line": 1275,
        "comment": "",
        "child_ranges": [
            "(line 1244,col 9)-(line 1244,col 27)",
            "(line 1245,col 9)-(line 1245,col 27)",
            "(line 1247,col 9)-(line 1247,col 40)",
            "(line 1248,col 9)-(line 1248,col 42)",
            "(line 1250,col 9)-(line 1253,col 44)",
            "(line 1255,col 9)-(line 1255,col 40)",
            "(line 1256,col 9)-(line 1256,col 41)",
            "(line 1257,col 9)-(line 1257,col 42)",
            "(line 1259,col 9)-(line 1259,col 40)",
            "(line 1260,col 9)-(line 1260,col 41)",
            "(line 1261,col 9)-(line 1261,col 42)",
            "(line 1263,col 9)-(line 1263,col 40)",
            "(line 1264,col 9)-(line 1264,col 42)",
            "(line 1265,col 9)-(line 1265,col 42)",
            "(line 1267,col 9)-(line 1267,col 41)",
            "(line 1268,col 9)-(line 1268,col 42)",
            "(line 1269,col 9)-(line 1269,col 42)",
            "(line 1271,col 9)-(line 1271,col 60)",
            "(line 1272,col 9)-(line 1272,col 41)",
            "(line 1273,col 9)-(line 1273,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testToString()",
        "snippet": "    public void testToString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"7/5\", f.toString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"4/2\", f.toString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0/2\", f.toString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"2/2\", f.toString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648/1\", f.toString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-2147483648/2147483647\", f.toString());\n    }",
        "begin_line": 1277,
        "end_line": 1302,
        "comment": "",
        "child_ranges": [
            "(line 1278,col 9)-(line 1278,col 26)",
            "(line 1280,col 9)-(line 1280,col 39)",
            "(line 1281,col 9)-(line 1281,col 34)",
            "(line 1282,col 9)-(line 1282,col 33)",
            "(line 1283,col 9)-(line 1283,col 38)",
            "(line 1285,col 9)-(line 1285,col 39)",
            "(line 1286,col 9)-(line 1286,col 42)",
            "(line 1288,col 9)-(line 1288,col 39)",
            "(line 1289,col 9)-(line 1289,col 42)",
            "(line 1291,col 9)-(line 1291,col 39)",
            "(line 1292,col 9)-(line 1292,col 42)",
            "(line 1294,col 9)-(line 1294,col 39)",
            "(line 1295,col 9)-(line 1295,col 42)",
            "(line 1297,col 9)-(line 1297,col 58)",
            "(line 1298,col 9)-(line 1298,col 52)",
            "(line 1300,col 9)-(line 1300,col 59)",
            "(line 1301,col 9)-(line 1301,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testToProperString()",
        "snippet": "    public void testToProperString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toProperString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toProperString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"1 2/5\", f.toProperString());        \n        \n        f = Fraction.getFraction(14, 10);\n        assertEquals(\"1 4/10\", f.toProperString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"2\", f.toProperString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0\", f.toProperString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"1\", f.toProperString());        \n        \n        f = Fraction.getFraction(-7, 5);\n        assertEquals(\"-1 2/5\", f.toProperString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648\", f.toProperString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-1 1/2147483647\", f.toProperString());\n\n        assertEquals(\"-1\", Fraction.getFraction(-1).toProperString());\n    }",
        "begin_line": 1304,
        "end_line": 1337,
        "comment": "",
        "child_ranges": [
            "(line 1305,col 9)-(line 1305,col 26)",
            "(line 1307,col 9)-(line 1307,col 39)",
            "(line 1308,col 9)-(line 1308,col 40)",
            "(line 1309,col 9)-(line 1309,col 33)",
            "(line 1310,col 9)-(line 1310,col 44)",
            "(line 1312,col 9)-(line 1312,col 39)",
            "(line 1313,col 9)-(line 1313,col 50)",
            "(line 1315,col 9)-(line 1315,col 41)",
            "(line 1316,col 9)-(line 1316,col 51)",
            "(line 1318,col 9)-(line 1318,col 39)",
            "(line 1319,col 9)-(line 1319,col 46)",
            "(line 1321,col 9)-(line 1321,col 39)",
            "(line 1322,col 9)-(line 1322,col 46)",
            "(line 1324,col 9)-(line 1324,col 39)",
            "(line 1325,col 9)-(line 1325,col 46)",
            "(line 1327,col 9)-(line 1327,col 40)",
            "(line 1328,col 9)-(line 1328,col 51)",
            "(line 1330,col 9)-(line 1330,col 58)",
            "(line 1331,col 9)-(line 1331,col 56)",
            "(line 1333,col 9)-(line 1333,col 59)",
            "(line 1334,col 9)-(line 1334,col 60)",
            "(line 1336,col 9)-(line 1336,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.IEEE754rUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381()",
        "snippet": "    public void testLang381() {\n        assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);\n        assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);\n        assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));\n        assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);\n        assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);\n        assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));\n\n        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertEquals(42.0, IEEE754rUtils.max(a), 0.01);\n        assertEquals(1.2, IEEE754rUtils.min(a), 0.01);\n\n        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertEquals(42.0, IEEE754rUtils.max(b), 0.01);\n        assertEquals(1.2, IEEE754rUtils.min(b), 0.01);\n\n        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);\n        assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);\n\n        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);\n        assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);\n    }",
        "begin_line": 28,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 73)",
            "(line 30,col 9)-(line 30,col 73)",
            "(line 31,col 9)-(line 31,col 88)",
            "(line 32,col 9)-(line 32,col 75)",
            "(line 33,col 9)-(line 33,col 75)",
            "(line 34,col 9)-(line 34,col 84)",
            "(line 36,col 9)-(line 36,col 83)",
            "(line 37,col 9)-(line 37,col 55)",
            "(line 38,col 9)-(line 38,col 54)",
            "(line 40,col 9)-(line 40,col 95)",
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 54)",
            "(line 44,col 9)-(line 44,col 84)",
            "(line 45,col 9)-(line 45,col 56)",
            "(line 46,col 9)-(line 46,col 57)",
            "(line 48,col 9)-(line 48,col 95)",
            "(line 49,col 9)-(line 49,col 56)",
            "(line 50,col 9)-(line 50,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.IEEE754rUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.IEEE754rUtilsTest.testEnforceExceptions()",
        "snippet": "    public void testEnforceExceptions() {\n        try {\n            IEEE754rUtils.min( (float[]) null);\n            fail(\"IllegalArgumentException expected for null input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.min(new float[0]);\n            fail(\"IllegalArgumentException expected for empty input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.max( (float[]) null);\n            fail(\"IllegalArgumentException expected for null input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.max(new float[0]);\n            fail(\"IllegalArgumentException expected for empty input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.min( (double[]) null);\n            fail(\"IllegalArgumentException expected for null input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.min(new double[0]);\n            fail(\"IllegalArgumentException expected for empty input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.max( (double[]) null);\n            fail(\"IllegalArgumentException expected for null input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n        try {\n            IEEE754rUtils.max(new double[0]);\n            fail(\"IllegalArgumentException expected for empty input\");\n        } catch(IllegalArgumentException iae) { /* expected */ }\n\n    }",
        "begin_line": 53,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 57,col 64)",
            "(line 59,col 9)-(line 62,col 64)",
            "(line 64,col 9)-(line 67,col 64)",
            "(line 69,col 9)-(line 72,col 64)",
            "(line 74,col 9)-(line 77,col 64)",
            "(line 79,col 9)-(line 82,col 64)",
            "(line 84,col 9)-(line 87,col 64)",
            "(line 89,col 9)-(line 92,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.IEEE754rUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.IEEE754rUtilsTest.testConstructorExists()",
        "snippet": "    public void testConstructorExists() {\n        new IEEE754rUtils();\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.NumberUtilsTest(java.lang.String)",
        "snippet": "    public NumberUtilsTest(String name) {\n        super(name);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new NumberUtils());\n        Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));\n    }",
        "begin_line": 47,
        "end_line": 54,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 41)",
            "(line 49,col 9)-(line 49,col 76)",
            "(line 50,col 9)-(line 50,col 37)",
            "(line 51,col 9)-(line 51,col 70)",
            "(line 52,col 9)-(line 52,col 80)",
            "(line 53,col 9)-(line 53,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToIntString()",
        "snippet": "    public void testToIntString() {\n        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n    }",
        "begin_line": 61,
        "end_line": 66,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String)}.\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 82)",
            "(line 63,col 9)-(line 63,col 76)",
            "(line 64,col 9)-(line 64,col 70)",
            "(line 65,col 9)-(line 65,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToIntStringI()",
        "snippet": "    public void testToIntStringI() {\n        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n    }",
        "begin_line": 71,
        "end_line": 74,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 89)",
            "(line 73,col 9)-(line 73,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToLongString()",
        "snippet": "    public void testToLongString() {\n        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n    }",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String)}.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 85)",
            "(line 81,col 9)-(line 81,col 79)",
            "(line 82,col 9)-(line 82,col 78)",
            "(line 83,col 9)-(line 83,col 78)",
            "(line 84,col 9)-(line 84,col 109)",
            "(line 85,col 9)-(line 85,col 109)",
            "(line 86,col 9)-(line 86,col 73)",
            "(line 87,col 9)-(line 87,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToLongStringL()",
        "snippet": "    public void testToLongStringL() {\n        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String, long)}.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 94)",
            "(line 95,col 9)-(line 95,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString()",
        "snippet": "    public void testToFloatString() {\n        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n    }",
        "begin_line": 101,
        "end_line": 109,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String)}.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 91)",
            "(line 103,col 9)-(line 103,col 89)",
            "(line 104,col 9)-(line 104,col 83)",
            "(line 105,col 9)-(line 105,col 115)",
            "(line 106,col 9)-(line 106,col 114)",
            "(line 107,col 9)-(line 107,col 77)",
            "(line 108,col 9)-(line 108,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF()",
        "snippet": "    public void testToFloatStringF() {\n        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n    }",
        "begin_line": 114,
        "end_line": 117,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String, float)}.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 99)",
            "(line 116,col 9)-(line 116,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString()",
        "snippet": "    public void testStringToDoubleString() {\n        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n    }",
        "begin_line": 122,
        "end_line": 130,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String)}.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 93)",
            "(line 124,col 9)-(line 124,col 91)",
            "(line 125,col 9)-(line 125,col 85)",
            "(line 126,col 9)-(line 126,col 119)",
            "(line 127,col 9)-(line 127,col 119)",
            "(line 128,col 9)-(line 128,col 79)",
            "(line 129,col 9)-(line 129,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD()",
        "snippet": "    public void testStringToDoubleStringD() {\n        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n    }",
        "begin_line": 135,
        "end_line": 138,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String, double)}.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 101)",
            "(line 137,col 9)-(line 137,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToByteString()",
        "snippet": "    public void testToByteString() {\n        assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n        assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n        assertTrue(\"toByte(empty) failed\", NumberUtils.toByte(\"\") == 0);\n        assertTrue(\"toByte(null) failed\", NumberUtils.toByte(null) == 0);\n    }",
        "begin_line": 143,
        "end_line": 148,
        "comment": "\n     * Test for {@link NumberUtils#toByte(String)}.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 80)",
            "(line 145,col 9)-(line 145,col 78)",
            "(line 146,col 9)-(line 146,col 72)",
            "(line 147,col 9)-(line 147,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToByteStringI()",
        "snippet": "    public void testToByteStringI() {\n        assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n        assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n    }",
        "begin_line": 153,
        "end_line": 156,
        "comment": "\n     * Test for {@link NumberUtils#toByte(String, byte)}.\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 95)",
            "(line 155,col 9)-(line 155,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToShortString()",
        "snippet": "    public void testToShortString() {\n        assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n        assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n        assertTrue(\"toShort(empty) failed\", NumberUtils.toShort(\"\") == 0);\n        assertTrue(\"toShort(null) failed\", NumberUtils.toShort(null) == 0);\n    }",
        "begin_line": 161,
        "end_line": 166,
        "comment": "\n     * Test for {@link NumberUtils#toShort(String)}.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 86)",
            "(line 163,col 9)-(line 163,col 80)",
            "(line 164,col 9)-(line 164,col 74)",
            "(line 165,col 9)-(line 165,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToShortStringI()",
        "snippet": "    public void testToShortStringI() {\n        assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n        assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n    }",
        "begin_line": 171,
        "end_line": 174,
        "comment": "\n     * Test for {@link NumberUtils#toShort(String, short)}.\n     ",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 103)",
            "(line 173,col 9)-(line 173,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber()",
        "snippet": "    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n    }",
        "begin_line": 176,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 111)",
            "(line 179,col 9)-(line 179,col 111)",
            "(line 180,col 9)-(line 180,col 113)",
            "(line 181,col 9)-(line 181,col 113)",
            "(line 182,col 9)-(line 182,col 112)",
            "(line 183,col 9)-(line 183,col 112)",
            "(line 184,col 9)-(line 185,col 41)",
            "(line 186,col 9)-(line 186,col 107)",
            "(line 187,col 9)-(line 187,col 107)",
            "(line 188,col 9)-(line 188,col 113)",
            "(line 189,col 9)-(line 189,col 113)",
            "(line 190,col 9)-(line 190,col 109)",
            "(line 191,col 9)-(line 191,col 112)",
            "(line 192,col 9)-(line 192,col 115)",
            "(line 193,col 9)-(line 193,col 112)",
            "(line 194,col 9)-(line 194,col 117)",
            "(line 195,col 9)-(line 195,col 117)",
            "(line 196,col 9)-(line 196,col 88)",
            "(line 197,col 9)-(line 198,col 56)",
            "(line 201,col 9)-(line 204,col 9)",
            "(line 205,col 9)-(line 206,col 63)",
            "(line 207,col 9)-(line 208,col 57)",
            "(line 209,col 9)-(line 210,col 54)",
            "(line 213,col 9)-(line 213,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloat()",
        "snippet": "    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n        this.testCreateFloatFailure(\"\");\n        this.testCreateFloatFailure(\" \");\n        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 216,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 107)",
            "(line 218,col 9)-(line 218,col 86)",
            "(line 219,col 9)-(line 219,col 40)",
            "(line 220,col 9)-(line 220,col 41)",
            "(line 221,col 9)-(line 221,col 50)",
            "(line 223,col 9)-(line 223,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String)",
        "snippet": "    protected void testCreateFloatFailure(String str) {\n        try {\n            Float value = NumberUtils.createFloat(str);\n            fail(\"createFloat(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 226,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 232,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble()",
        "snippet": "    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n        this.testCreateDoubleFailure(\"\");\n        this.testCreateDoubleFailure(\" \");\n        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 235,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 110)",
            "(line 237,col 9)-(line 237,col 88)",
            "(line 238,col 9)-(line 238,col 41)",
            "(line 239,col 9)-(line 239,col 42)",
            "(line 240,col 9)-(line 240,col 51)",
            "(line 242,col 9)-(line 242,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String)",
        "snippet": "    protected void testCreateDoubleFailure(String str) {\n        try {\n            Double value = NumberUtils.createDouble(str);\n            fail(\"createDouble(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 245,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 251,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateInteger()",
        "snippet": "    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n        this.testCreateIntegerFailure(\"\");\n        this.testCreateIntegerFailure(\" \");\n        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 254,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 111)",
            "(line 256,col 9)-(line 256,col 90)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 52)",
            "(line 261,col 9)-(line 261,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateIntegerFailure(String str) {\n        try {\n            Integer value = NumberUtils.createInteger(str);\n            fail(\"createInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 264,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 270,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong()",
        "snippet": "    public void testCreateLong() {\n        assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n        this.testCreateLongFailure(\"\");\n        this.testCreateLongFailure(\" \");\n        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 273,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 102)",
            "(line 275,col 9)-(line 275,col 84)",
            "(line 276,col 9)-(line 276,col 39)",
            "(line 277,col 9)-(line 277,col 40)",
            "(line 278,col 9)-(line 278,col 49)",
            "(line 280,col 9)-(line 280,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongFailure(java.lang.String)",
        "snippet": "    protected void testCreateLongFailure(String str) {\n        try {\n            Long value = NumberUtils.createLong(str);\n            fail(\"createLong(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 283,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 289,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n        this.testCreateBigIntegerFailure(\"\");\n        this.testCreateBigIntegerFailure(\" \");\n        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 292,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 120)",
            "(line 294,col 9)-(line 294,col 96)",
            "(line 295,col 9)-(line 295,col 45)",
            "(line 296,col 9)-(line 296,col 46)",
            "(line 297,col 9)-(line 297,col 55)",
            "(line 299,col 9)-(line 299,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigIntegerFailure(String str) {\n        try {\n            BigInteger value = NumberUtils.createBigInteger(str);\n            fail(\"createBigInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 302,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 308,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n        this.testCreateBigDecimalFailure(\"\");\n        this.testCreateBigDecimalFailure(\" \");\n        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }",
        "begin_line": 311,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 122)",
            "(line 313,col 9)-(line 313,col 96)",
            "(line 314,col 9)-(line 314,col 45)",
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 316,col 55)",
            "(line 318,col 9)-(line 318,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigDecimalFailure(String str) {\n        try {\n            BigDecimal value = NumberUtils.createBigDecimal(str);\n            fail(\"createBigDecimal(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }",
        "begin_line": 321,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 327,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong()",
        "snippet": "    public void testMinLong() {\n        final long[] l = null;\n        try {\n            NumberUtils.min(l);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new long[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(long[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new long[] { 5 }));\n\n        assertEquals(\n            \"min(long[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new long[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 332,
        "end_line": 356,
        "comment": " ----------------------------------------------------------------------",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 30)",
            "(line 334,col 9)-(line 337,col 48)",
            "(line 339,col 9)-(line 342,col 48)",
            "(line 344,col 9)-(line 347,col 47)",
            "(line 349,col 9)-(line 352,col 50)",
            "(line 354,col 9)-(line 354,col 77)",
            "(line 355,col 9)-(line 355,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt()",
        "snippet": "    public void testMinInt() {\n        final int[] i = null;\n        try {\n            NumberUtils.min(i);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new int[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(int[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new int[] { 5 }));\n\n        assertEquals(\n            \"min(int[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new int[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 358,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 29)",
            "(line 360,col 9)-(line 363,col 48)",
            "(line 365,col 9)-(line 368,col 48)",
            "(line 370,col 9)-(line 373,col 46)",
            "(line 375,col 9)-(line 378,col 49)",
            "(line 380,col 9)-(line 380,col 76)",
            "(line 381,col 9)-(line 381,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort()",
        "snippet": "    public void testMinShort() {\n        final short[] s = null;\n        try {\n            NumberUtils.min(s);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new short[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(short[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new short[] { 5 }));\n\n        assertEquals(\n            \"min(short[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new short[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 384,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 31)",
            "(line 386,col 9)-(line 389,col 48)",
            "(line 391,col 9)-(line 394,col 48)",
            "(line 396,col 9)-(line 399,col 48)",
            "(line 401,col 9)-(line 404,col 51)",
            "(line 406,col 9)-(line 406,col 78)",
            "(line 407,col 9)-(line 407,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte()",
        "snippet": "    public void testMinByte() {\n        final byte[] b = null;\n        try {\n            NumberUtils.min(b);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new byte[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new byte[] { 5 }));\n\n        assertEquals(\n            \"min(byte[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new byte[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n    }",
        "begin_line": 410,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 30)",
            "(line 412,col 9)-(line 415,col 48)",
            "(line 417,col 9)-(line 420,col 48)",
            "(line 422,col 9)-(line 425,col 47)",
            "(line 427,col 9)-(line 430,col 50)",
            "(line 432,col 9)-(line 432,col 77)",
            "(line 433,col 9)-(line 433,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble()",
        "snippet": "    public void testMinDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.min(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(double[]) failed for array length 1\",\n            5.12,\n            NumberUtils.min(new double[] { 5.12 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 2\",\n            6.23,\n            NumberUtils.min(new double[] { 6.23, 9.34 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 5\",\n            -10.45,\n            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n            0);\n        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n    }",
        "begin_line": 436,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 32)",
            "(line 438,col 9)-(line 441,col 48)",
            "(line 443,col 9)-(line 446,col 48)",
            "(line 448,col 9)-(line 452,col 15)",
            "(line 454,col 9)-(line 458,col 15)",
            "(line 460,col 9)-(line 464,col 15)",
            "(line 465,col 9)-(line 465,col 87)",
            "(line 466,col 9)-(line 466,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat()",
        "snippet": "    public void testMinFloat() {\n        final float[] f = null;\n        try {\n            NumberUtils.min(f);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new float[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(float[]) failed for array length 1\",\n            5.9f,\n            NumberUtils.min(new float[] { 5.9f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 2\",\n            6.8f,\n            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 5\",\n            -10.6f,\n            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n            0);\n        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n    }",
        "begin_line": 469,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 31)",
            "(line 471,col 9)-(line 474,col 48)",
            "(line 476,col 9)-(line 479,col 48)",
            "(line 481,col 9)-(line 485,col 15)",
            "(line 487,col 9)-(line 491,col 15)",
            "(line 493,col 9)-(line 497,col 15)",
            "(line 498,col 9)-(line 498,col 87)",
            "(line 499,col 9)-(line 499,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong()",
        "snippet": "    public void testMaxLong() {\n        final long[] l = null;\n        try {\n            NumberUtils.max(l);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new long[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(long[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new long[] { 5 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new long[] { 6, 9 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 502,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 503,col 30)",
            "(line 504,col 9)-(line 507,col 48)",
            "(line 509,col 9)-(line 512,col 48)",
            "(line 514,col 9)-(line 517,col 47)",
            "(line 519,col 9)-(line 522,col 50)",
            "(line 524,col 9)-(line 527,col 63)",
            "(line 528,col 9)-(line 528,col 76)",
            "(line 529,col 9)-(line 529,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt()",
        "snippet": "    public void testMaxInt() {\n        final int[] i = null;\n        try {\n            NumberUtils.max(i);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new int[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(int[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new int[] { 5 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new int[] { 6, 9 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 532,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 29)",
            "(line 534,col 9)-(line 537,col 48)",
            "(line 539,col 9)-(line 542,col 48)",
            "(line 544,col 9)-(line 547,col 46)",
            "(line 549,col 9)-(line 552,col 49)",
            "(line 554,col 9)-(line 557,col 62)",
            "(line 558,col 9)-(line 558,col 75)",
            "(line 559,col 9)-(line 559,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort()",
        "snippet": "    public void testMaxShort() {\n        final short[] s = null;\n        try {\n            NumberUtils.max(s);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new short[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(short[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new short[] { 5 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new short[] { 6, 9 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 562,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 563,col 9)-(line 563,col 31)",
            "(line 564,col 9)-(line 567,col 48)",
            "(line 569,col 9)-(line 572,col 48)",
            "(line 574,col 9)-(line 577,col 48)",
            "(line 579,col 9)-(line 582,col 51)",
            "(line 584,col 9)-(line 587,col 64)",
            "(line 588,col 9)-(line 588,col 77)",
            "(line 589,col 9)-(line 589,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte()",
        "snippet": "    public void testMaxByte() {\n        final byte[] b = null;\n        try {\n            NumberUtils.max(b);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new byte[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new byte[] { 5 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new byte[] { 6, 9 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n    }",
        "begin_line": 592,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 593,col 9)-(line 593,col 30)",
            "(line 594,col 9)-(line 597,col 48)",
            "(line 599,col 9)-(line 602,col 48)",
            "(line 604,col 9)-(line 607,col 47)",
            "(line 609,col 9)-(line 612,col 50)",
            "(line 614,col 9)-(line 617,col 63)",
            "(line 618,col 9)-(line 618,col 76)",
            "(line 619,col 9)-(line 619,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble()",
        "snippet": "    public void testMaxDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.max(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(double[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new double[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n    }",
        "begin_line": 622,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 32)",
            "(line 624,col 9)-(line 627,col 48)",
            "(line 629,col 9)-(line 632,col 48)",
            "(line 634,col 9)-(line 638,col 15)",
            "(line 640,col 9)-(line 644,col 15)",
            "(line 646,col 9)-(line 650,col 15)",
            "(line 651,col 9)-(line 651,col 86)",
            "(line 652,col 9)-(line 652,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat()",
        "snippet": "    public void testMaxFloat() {\n        final float[] f = null;\n        try {\n            NumberUtils.max(f);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new float[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(float[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new float[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n    }",
        "begin_line": 655,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 656,col 9)-(line 656,col 31)",
            "(line 657,col 9)-(line 660,col 48)",
            "(line 662,col 9)-(line 665,col 48)",
            "(line 667,col 9)-(line 671,col 15)",
            "(line 673,col 9)-(line 677,col 15)",
            "(line 679,col 9)-(line 683,col 15)",
            "(line 684,col 9)-(line 684,col 86)",
            "(line 685,col 9)-(line 685,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumLong()",
        "snippet": "    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n    }",
        "begin_line": 688,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 689,col 9)-(line 689,col 116)",
            "(line 690,col 9)-(line 690,col 115)",
            "(line 691,col 9)-(line 691,col 116)",
            "(line 692,col 9)-(line 692,col 111)",
            "(line 693,col 9)-(line 693,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumInt()",
        "snippet": "    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n    }",
        "begin_line": 696,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 107)",
            "(line 698,col 9)-(line 698,col 107)",
            "(line 699,col 9)-(line 699,col 107)",
            "(line 700,col 9)-(line 700,col 103)",
            "(line 701,col 9)-(line 701,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort()",
        "snippet": "    public void testMinimumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }",
        "begin_line": 704,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 705,col 9)-(line 705,col 25)",
            "(line 706,col 9)-(line 706,col 29)",
            "(line 707,col 9)-(line 707,col 30)",
            "(line 708,col 9)-(line 708,col 98)",
            "(line 709,col 9)-(line 709,col 98)",
            "(line 710,col 9)-(line 710,col 98)",
            "(line 711,col 9)-(line 711,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumByte()",
        "snippet": "    public void testMinimumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }",
        "begin_line": 714,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 715,col 9)-(line 715,col 23)",
            "(line 716,col 9)-(line 716,col 27)",
            "(line 717,col 9)-(line 717,col 28)",
            "(line 718,col 9)-(line 718,col 95)",
            "(line 719,col 9)-(line 719,col 95)",
            "(line 720,col 9)-(line 720,col 95)",
            "(line 721,col 9)-(line 721,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumDouble()",
        "snippet": "    public void testMinimumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n    }",
        "begin_line": 724,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 725,col 9)-(line 725,col 26)",
            "(line 726,col 9)-(line 726,col 30)",
            "(line 727,col 9)-(line 727,col 31)",
            "(line 728,col 9)-(line 728,col 67)",
            "(line 729,col 9)-(line 729,col 67)",
            "(line 730,col 9)-(line 730,col 67)",
            "(line 731,col 9)-(line 731,col 66)",
            "(line 732,col 9)-(line 732,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumFloat()",
        "snippet": "    public void testMinimumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n    }",
        "begin_line": 735,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 736,col 9)-(line 736,col 26)",
            "(line 737,col 9)-(line 737,col 30)",
            "(line 738,col 9)-(line 738,col 31)",
            "(line 739,col 9)-(line 739,col 68)",
            "(line 740,col 9)-(line 740,col 68)",
            "(line 741,col 9)-(line 741,col 68)",
            "(line 742,col 9)-(line 742,col 67)",
            "(line 743,col 9)-(line 743,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong()",
        "snippet": "    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n    }",
        "begin_line": 746,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 116)",
            "(line 748,col 9)-(line 748,col 116)",
            "(line 749,col 9)-(line 749,col 116)",
            "(line 750,col 9)-(line 750,col 111)",
            "(line 751,col 9)-(line 751,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumInt()",
        "snippet": "    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n    }",
        "begin_line": 754,
        "end_line": 760,
        "comment": "",
        "child_ranges": [
            "(line 755,col 9)-(line 755,col 107)",
            "(line 756,col 9)-(line 756,col 107)",
            "(line 757,col 9)-(line 757,col 107)",
            "(line 758,col 9)-(line 758,col 103)",
            "(line 759,col 9)-(line 759,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort()",
        "snippet": "    public void testMaximumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }",
        "begin_line": 762,
        "end_line": 770,
        "comment": "",
        "child_ranges": [
            "(line 763,col 9)-(line 763,col 25)",
            "(line 764,col 9)-(line 764,col 29)",
            "(line 765,col 9)-(line 765,col 30)",
            "(line 766,col 9)-(line 766,col 99)",
            "(line 767,col 9)-(line 767,col 99)",
            "(line 768,col 9)-(line 768,col 99)",
            "(line 769,col 9)-(line 769,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumByte()",
        "snippet": "    public void testMaximumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }",
        "begin_line": 772,
        "end_line": 780,
        "comment": "",
        "child_ranges": [
            "(line 773,col 9)-(line 773,col 23)",
            "(line 774,col 9)-(line 774,col 27)",
            "(line 775,col 9)-(line 775,col 28)",
            "(line 776,col 9)-(line 776,col 96)",
            "(line 777,col 9)-(line 777,col 96)",
            "(line 778,col 9)-(line 778,col 96)",
            "(line 779,col 9)-(line 779,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumDouble()",
        "snippet": "    public void testMaximumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n    }",
        "begin_line": 782,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 783,col 9)-(line 783,col 26)",
            "(line 784,col 9)-(line 784,col 30)",
            "(line 785,col 9)-(line 785,col 31)",
            "(line 786,col 9)-(line 786,col 68)",
            "(line 787,col 9)-(line 787,col 68)",
            "(line 788,col 9)-(line 788,col 68)",
            "(line 789,col 9)-(line 789,col 66)",
            "(line 790,col 9)-(line 790,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumFloat()",
        "snippet": "    public void testMaximumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n    }",
        "begin_line": 793,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 794,col 9)-(line 794,col 26)",
            "(line 795,col 9)-(line 795,col 30)",
            "(line 796,col 9)-(line 796,col 31)",
            "(line 797,col 9)-(line 797,col 69)",
            "(line 798,col 9)-(line 798,col 69)",
            "(line 799,col 9)-(line 799,col 69)",
            "(line 800,col 9)-(line 800,col 67)",
            "(line 801,col 9)-(line 801,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCompareDouble()",
        "snippet": "    public void testCompareDouble() {\n        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(1.2d, 1.2d) == 0);\n        assertTrue(Double.compare(1.2d, 0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -1.2d) == +1);\n        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(0.0d, 0.0d) == 0);\n        assertTrue(Double.compare(0.0d, -0.0d) == +1);\n        assertTrue(Double.compare(0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(-0.0d, 0.0d) == -1);\n        assertTrue(Double.compare(-0.0d, -0.0d) == 0);\n        assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-1.2d, 1.2d) == -1);\n        assertTrue(Double.compare(-1.2d, 0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }",
        "begin_line": 805,
        "end_line": 895,
        "comment": " Testing JDK against old Lang functionality",
        "child_ranges": [
            "(line 806,col 9)-(line 806,col 64)",
            "(line 807,col 9)-(line 807,col 79)",
            "(line 808,col 9)-(line 808,col 71)",
            "(line 809,col 9)-(line 809,col 59)",
            "(line 810,col 9)-(line 810,col 59)",
            "(line 811,col 9)-(line 811,col 60)",
            "(line 812,col 9)-(line 812,col 60)",
            "(line 813,col 9)-(line 813,col 72)",
            "(line 814,col 9)-(line 814,col 79)",
            "(line 816,col 9)-(line 816,col 79)",
            "(line 817,col 9)-(line 817,col 92)",
            "(line 818,col 9)-(line 818,col 85)",
            "(line 819,col 9)-(line 819,col 73)",
            "(line 820,col 9)-(line 820,col 73)",
            "(line 821,col 9)-(line 821,col 74)",
            "(line 822,col 9)-(line 822,col 74)",
            "(line 823,col 9)-(line 823,col 86)",
            "(line 824,col 9)-(line 824,col 93)",
            "(line 826,col 9)-(line 826,col 71)",
            "(line 827,col 9)-(line 827,col 85)",
            "(line 828,col 9)-(line 828,col 76)",
            "(line 829,col 9)-(line 829,col 65)",
            "(line 830,col 9)-(line 830,col 65)",
            "(line 831,col 9)-(line 831,col 66)",
            "(line 832,col 9)-(line 832,col 66)",
            "(line 833,col 9)-(line 833,col 78)",
            "(line 834,col 9)-(line 834,col 85)",
            "(line 836,col 9)-(line 836,col 59)",
            "(line 837,col 9)-(line 837,col 73)",
            "(line 838,col 9)-(line 838,col 65)",
            "(line 839,col 9)-(line 839,col 52)",
            "(line 840,col 9)-(line 840,col 53)",
            "(line 841,col 9)-(line 841,col 54)",
            "(line 842,col 9)-(line 842,col 54)",
            "(line 843,col 9)-(line 843,col 66)",
            "(line 844,col 9)-(line 844,col 73)",
            "(line 846,col 9)-(line 846,col 59)",
            "(line 847,col 9)-(line 847,col 73)",
            "(line 848,col 9)-(line 848,col 65)",
            "(line 849,col 9)-(line 849,col 53)",
            "(line 850,col 9)-(line 850,col 52)",
            "(line 851,col 9)-(line 851,col 54)",
            "(line 852,col 9)-(line 852,col 54)",
            "(line 853,col 9)-(line 853,col 66)",
            "(line 854,col 9)-(line 854,col 73)",
            "(line 856,col 9)-(line 856,col 60)",
            "(line 857,col 9)-(line 857,col 74)",
            "(line 858,col 9)-(line 858,col 66)",
            "(line 859,col 9)-(line 859,col 54)",
            "(line 860,col 9)-(line 860,col 54)",
            "(line 861,col 9)-(line 861,col 54)",
            "(line 862,col 9)-(line 862,col 55)",
            "(line 863,col 9)-(line 863,col 67)",
            "(line 864,col 9)-(line 864,col 74)",
            "(line 866,col 9)-(line 866,col 60)",
            "(line 867,col 9)-(line 867,col 74)",
            "(line 868,col 9)-(line 868,col 66)",
            "(line 869,col 9)-(line 869,col 54)",
            "(line 870,col 9)-(line 870,col 54)",
            "(line 871,col 9)-(line 871,col 55)",
            "(line 872,col 9)-(line 872,col 54)",
            "(line 873,col 9)-(line 873,col 67)",
            "(line 874,col 9)-(line 874,col 74)",
            "(line 876,col 9)-(line 876,col 72)",
            "(line 877,col 9)-(line 877,col 86)",
            "(line 878,col 9)-(line 878,col 78)",
            "(line 879,col 9)-(line 879,col 66)",
            "(line 880,col 9)-(line 880,col 66)",
            "(line 881,col 9)-(line 881,col 67)",
            "(line 882,col 9)-(line 882,col 67)",
            "(line 883,col 9)-(line 883,col 78)",
            "(line 884,col 9)-(line 884,col 86)",
            "(line 886,col 9)-(line 886,col 79)",
            "(line 887,col 9)-(line 887,col 93)",
            "(line 888,col 9)-(line 888,col 85)",
            "(line 889,col 9)-(line 889,col 73)",
            "(line 890,col 9)-(line 890,col 73)",
            "(line 891,col 9)-(line 891,col 74)",
            "(line 892,col 9)-(line 892,col 74)",
            "(line 893,col 9)-(line 893,col 86)",
            "(line 894,col 9)-(line 894,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCompareFloat()",
        "snippet": "    public void testCompareFloat() {\n        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(1.2f, 1.2f) == 0);\n        assertTrue(Float.compare(1.2f, 0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -1.2f) == +1);\n        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(0.0f, 0.0f) == 0);\n        assertTrue(Float.compare(0.0f, -0.0f) == +1);\n        assertTrue(Float.compare(0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(-0.0f, 0.0f) == -1);\n        assertTrue(Float.compare(-0.0f, -0.0f) == 0);\n        assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-1.2f, 1.2f) == -1);\n        assertTrue(Float.compare(-1.2f, 0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }",
        "begin_line": 897,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 898,col 9)-(line 898,col 61)",
            "(line 899,col 9)-(line 899,col 76)",
            "(line 900,col 9)-(line 900,col 68)",
            "(line 901,col 9)-(line 901,col 57)",
            "(line 902,col 9)-(line 902,col 57)",
            "(line 903,col 9)-(line 903,col 58)",
            "(line 904,col 9)-(line 904,col 58)",
            "(line 905,col 9)-(line 905,col 69)",
            "(line 906,col 9)-(line 906,col 76)",
            "(line 908,col 9)-(line 908,col 76)",
            "(line 909,col 9)-(line 909,col 89)",
            "(line 910,col 9)-(line 910,col 82)",
            "(line 911,col 9)-(line 911,col 71)",
            "(line 912,col 9)-(line 912,col 71)",
            "(line 913,col 9)-(line 913,col 72)",
            "(line 914,col 9)-(line 914,col 72)",
            "(line 915,col 9)-(line 915,col 83)",
            "(line 916,col 9)-(line 916,col 90)",
            "(line 918,col 9)-(line 918,col 68)",
            "(line 919,col 9)-(line 919,col 82)",
            "(line 920,col 9)-(line 920,col 73)",
            "(line 921,col 9)-(line 921,col 63)",
            "(line 922,col 9)-(line 922,col 63)",
            "(line 923,col 9)-(line 923,col 64)",
            "(line 924,col 9)-(line 924,col 64)",
            "(line 925,col 9)-(line 925,col 75)",
            "(line 926,col 9)-(line 926,col 82)",
            "(line 928,col 9)-(line 928,col 57)",
            "(line 929,col 9)-(line 929,col 71)",
            "(line 930,col 9)-(line 930,col 63)",
            "(line 931,col 9)-(line 931,col 51)",
            "(line 932,col 9)-(line 932,col 52)",
            "(line 933,col 9)-(line 933,col 53)",
            "(line 934,col 9)-(line 934,col 53)",
            "(line 935,col 9)-(line 935,col 64)",
            "(line 936,col 9)-(line 936,col 71)",
            "(line 938,col 9)-(line 938,col 57)",
            "(line 939,col 9)-(line 939,col 71)",
            "(line 940,col 9)-(line 940,col 63)",
            "(line 941,col 9)-(line 941,col 52)",
            "(line 942,col 9)-(line 942,col 51)",
            "(line 943,col 9)-(line 943,col 53)",
            "(line 944,col 9)-(line 944,col 53)",
            "(line 945,col 9)-(line 945,col 64)",
            "(line 946,col 9)-(line 946,col 71)",
            "(line 948,col 9)-(line 948,col 58)",
            "(line 949,col 9)-(line 949,col 72)",
            "(line 950,col 9)-(line 950,col 64)",
            "(line 951,col 9)-(line 951,col 53)",
            "(line 952,col 9)-(line 952,col 53)",
            "(line 953,col 9)-(line 953,col 53)",
            "(line 954,col 9)-(line 954,col 54)",
            "(line 955,col 9)-(line 955,col 65)",
            "(line 956,col 9)-(line 956,col 72)",
            "(line 958,col 9)-(line 958,col 58)",
            "(line 959,col 9)-(line 959,col 72)",
            "(line 960,col 9)-(line 960,col 64)",
            "(line 961,col 9)-(line 961,col 53)",
            "(line 962,col 9)-(line 962,col 53)",
            "(line 963,col 9)-(line 963,col 54)",
            "(line 964,col 9)-(line 964,col 53)",
            "(line 965,col 9)-(line 965,col 65)",
            "(line 966,col 9)-(line 966,col 72)",
            "(line 968,col 9)-(line 968,col 69)",
            "(line 969,col 9)-(line 969,col 83)",
            "(line 970,col 9)-(line 970,col 75)",
            "(line 971,col 9)-(line 971,col 64)",
            "(line 972,col 9)-(line 972,col 64)",
            "(line 973,col 9)-(line 973,col 65)",
            "(line 974,col 9)-(line 974,col 65)",
            "(line 975,col 9)-(line 975,col 75)",
            "(line 976,col 9)-(line 976,col 83)",
            "(line 978,col 9)-(line 978,col 76)",
            "(line 979,col 9)-(line 979,col 90)",
            "(line 980,col 9)-(line 980,col 82)",
            "(line 981,col 9)-(line 981,col 71)",
            "(line 982,col 9)-(line 982,col 71)",
            "(line 983,col 9)-(line 983,col 72)",
            "(line 984,col 9)-(line 984,col 72)",
            "(line 985,col 9)-(line 985,col 83)",
            "(line 986,col 9)-(line 986,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits()",
        "snippet": "    public void testIsDigits() {\n        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n    }",
        "begin_line": 989,
        "end_line": 996,
        "comment": "",
        "child_ranges": [
            "(line 990,col 9)-(line 990,col 81)",
            "(line 991,col 9)-(line 991,col 77)",
            "(line 992,col 9)-(line 992,col 85)",
            "(line 993,col 9)-(line 993,col 93)",
            "(line 994,col 9)-(line 994,col 90)",
            "(line 995,col 9)-(line 995,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber()",
        "snippet": "    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n    }",
        "begin_line": 1002,
        "end_line": 1139,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 1003,col 9)-(line 1003,col 29)",
            "(line 1004,col 9)-(line 1004,col 75)",
            "(line 1005,col 9)-(line 1005,col 93)",
            "(line 1006,col 9)-(line 1006,col 23)",
            "(line 1007,col 9)-(line 1007,col 75)",
            "(line 1008,col 9)-(line 1008,col 93)",
            "(line 1009,col 9)-(line 1009,col 23)",
            "(line 1010,col 9)-(line 1010,col 75)",
            "(line 1011,col 9)-(line 1011,col 93)",
            "(line 1012,col 9)-(line 1012,col 23)",
            "(line 1013,col 9)-(line 1013,col 75)",
            "(line 1014,col 9)-(line 1014,col 93)",
            "(line 1015,col 9)-(line 1015,col 24)",
            "(line 1016,col 9)-(line 1016,col 75)",
            "(line 1017,col 9)-(line 1017,col 93)",
            "(line 1018,col 9)-(line 1018,col 24)",
            "(line 1019,col 9)-(line 1019,col 75)",
            "(line 1020,col 9)-(line 1020,col 93)",
            "(line 1021,col 9)-(line 1021,col 24)",
            "(line 1022,col 9)-(line 1022,col 75)",
            "(line 1023,col 9)-(line 1023,col 93)",
            "(line 1024,col 9)-(line 1024,col 22)",
            "(line 1025,col 9)-(line 1025,col 75)",
            "(line 1026,col 9)-(line 1026,col 93)",
            "(line 1027,col 9)-(line 1027,col 24)",
            "(line 1028,col 9)-(line 1028,col 75)",
            "(line 1029,col 9)-(line 1029,col 93)",
            "(line 1030,col 9)-(line 1030,col 24)",
            "(line 1031,col 9)-(line 1031,col 76)",
            "(line 1032,col 9)-(line 1032,col 94)",
            "(line 1033,col 9)-(line 1033,col 24)",
            "(line 1034,col 9)-(line 1034,col 76)",
            "(line 1035,col 9)-(line 1035,col 94)",
            "(line 1036,col 9)-(line 1036,col 18)",
            "(line 1037,col 9)-(line 1037,col 76)",
            "(line 1038,col 9)-(line 1038,col 94)",
            "(line 1039,col 9)-(line 1039,col 19)",
            "(line 1040,col 9)-(line 1040,col 76)",
            "(line 1041,col 9)-(line 1041,col 94)",
            "(line 1042,col 9)-(line 1042,col 22)",
            "(line 1043,col 9)-(line 1043,col 76)",
            "(line 1044,col 9)-(line 1044,col 94)",
            "(line 1045,col 9)-(line 1045,col 23)",
            "(line 1046,col 9)-(line 1046,col 76)",
            "(line 1047,col 9)-(line 1047,col 94)",
            "(line 1048,col 9)-(line 1048,col 25)",
            "(line 1049,col 9)-(line 1049,col 76)",
            "(line 1050,col 9)-(line 1050,col 94)",
            "(line 1051,col 9)-(line 1051,col 20)",
            "(line 1052,col 9)-(line 1052,col 76)",
            "(line 1053,col 9)-(line 1053,col 94)",
            "(line 1054,col 9)-(line 1054,col 26)",
            "(line 1055,col 9)-(line 1055,col 76)",
            "(line 1056,col 9)-(line 1056,col 94)",
            "(line 1057,col 9)-(line 1057,col 25)",
            "(line 1058,col 9)-(line 1058,col 76)",
            "(line 1059,col 9)-(line 1059,col 94)",
            "(line 1060,col 9)-(line 1060,col 23)",
            "(line 1061,col 9)-(line 1061,col 76)",
            "(line 1062,col 9)-(line 1062,col 94)",
            "(line 1063,col 9)-(line 1063,col 19)",
            "(line 1064,col 9)-(line 1064,col 80)",
            "(line 1065,col 9)-(line 1065,col 98)",
            "(line 1066,col 9)-(line 1066,col 17)",
            "(line 1067,col 9)-(line 1067,col 80)",
            "(line 1068,col 9)-(line 1068,col 98)",
            "(line 1069,col 9)-(line 1069,col 22)",
            "(line 1070,col 9)-(line 1070,col 80)",
            "(line 1071,col 9)-(line 1071,col 98)",
            "(line 1072,col 9)-(line 1072,col 22)",
            "(line 1073,col 9)-(line 1073,col 80)",
            "(line 1074,col 9)-(line 1074,col 98)",
            "(line 1075,col 9)-(line 1075,col 22)",
            "(line 1076,col 9)-(line 1076,col 80)",
            "(line 1077,col 9)-(line 1077,col 98)",
            "(line 1078,col 9)-(line 1078,col 27)",
            "(line 1079,col 9)-(line 1079,col 80)",
            "(line 1080,col 9)-(line 1080,col 98)",
            "(line 1081,col 9)-(line 1081,col 26)",
            "(line 1082,col 9)-(line 1082,col 80)",
            "(line 1083,col 9)-(line 1083,col 98)",
            "(line 1084,col 9)-(line 1084,col 21)",
            "(line 1085,col 9)-(line 1085,col 80)",
            "(line 1086,col 9)-(line 1086,col 98)",
            "(line 1087,col 9)-(line 1087,col 24)",
            "(line 1088,col 9)-(line 1088,col 80)",
            "(line 1089,col 9)-(line 1089,col 98)",
            "(line 1090,col 9)-(line 1090,col 18)",
            "(line 1091,col 9)-(line 1091,col 81)",
            "(line 1092,col 9)-(line 1092,col 99)",
            "(line 1093,col 9)-(line 1093,col 25)",
            "(line 1094,col 9)-(line 1094,col 81)",
            "(line 1095,col 9)-(line 1095,col 99)",
            "(line 1096,col 9)-(line 1096,col 25)",
            "(line 1097,col 9)-(line 1097,col 81)",
            "(line 1098,col 9)-(line 1098,col 99)",
            "(line 1099,col 9)-(line 1099,col 24)",
            "(line 1100,col 9)-(line 1100,col 81)",
            "(line 1101,col 9)-(line 1101,col 99)",
            "(line 1102,col 9)-(line 1102,col 24)",
            "(line 1103,col 9)-(line 1103,col 81)",
            "(line 1104,col 9)-(line 1104,col 99)",
            "(line 1105,col 9)-(line 1105,col 20)",
            "(line 1106,col 9)-(line 1106,col 81)",
            "(line 1107,col 9)-(line 1107,col 99)",
            "(line 1108,col 9)-(line 1108,col 19)",
            "(line 1109,col 9)-(line 1109,col 81)",
            "(line 1110,col 9)-(line 1110,col 99)",
            "(line 1111,col 9)-(line 1111,col 18)",
            "(line 1112,col 9)-(line 1112,col 81)",
            "(line 1113,col 9)-(line 1113,col 99)",
            "(line 1114,col 9)-(line 1114,col 20)",
            "(line 1115,col 9)-(line 1115,col 81)",
            "(line 1116,col 9)-(line 1116,col 99)",
            "(line 1117,col 9)-(line 1117,col 20)",
            "(line 1118,col 9)-(line 1118,col 81)",
            "(line 1119,col 9)-(line 1119,col 99)",
            "(line 1120,col 9)-(line 1120,col 22)",
            "(line 1121,col 9)-(line 1121,col 81)",
            "(line 1122,col 9)-(line 1122,col 99)",
            "(line 1123,col 9)-(line 1123,col 22)",
            "(line 1124,col 9)-(line 1124,col 81)",
            "(line 1125,col 9)-(line 1125,col 99)",
            "(line 1126,col 9)-(line 1126,col 22)",
            "(line 1127,col 9)-(line 1127,col 81)",
            "(line 1128,col 9)-(line 1128,col 99)",
            "(line 1129,col 9)-(line 1129,col 22)",
            "(line 1130,col 9)-(line 1130,col 81)",
            "(line 1131,col 9)-(line 1131,col 99)",
            "(line 1132,col 9)-(line 1132,col 22)",
            "(line 1133,col 9)-(line 1133,col 81)",
            "(line 1134,col 9)-(line 1134,col 99)",
            "(line 1137,col 9)-(line 1137,col 19)",
            "(line 1138,col 9)-(line 1138,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }",
        "begin_line": 1141,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1142,col 9)-(line 1150,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testConstants()",
        "snippet": "    @SuppressWarnings(\"cast\") // suppress instanceof warning check\n    public void testConstants() {\n        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n        \n        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n    }",
        "begin_line": 1153,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 9)-(line 1155,col 58)",
            "(line 1156,col 9)-(line 1156,col 57)",
            "(line 1157,col 9)-(line 1157,col 63)",
            "(line 1158,col 9)-(line 1158,col 64)",
            "(line 1159,col 9)-(line 1159,col 63)",
            "(line 1160,col 9)-(line 1160,col 69)",
            "(line 1161,col 9)-(line 1161,col 60)",
            "(line 1162,col 9)-(line 1162,col 59)",
            "(line 1163,col 9)-(line 1163,col 65)",
            "(line 1164,col 9)-(line 1164,col 58)",
            "(line 1165,col 9)-(line 1165,col 57)",
            "(line 1166,col 9)-(line 1166,col 63)",
            "(line 1167,col 9)-(line 1167,col 62)",
            "(line 1168,col 9)-(line 1168,col 61)",
            "(line 1169,col 9)-(line 1169,col 67)",
            "(line 1170,col 9)-(line 1170,col 60)",
            "(line 1171,col 9)-(line 1171,col 59)",
            "(line 1172,col 9)-(line 1172,col 65)",
            "(line 1174,col 9)-(line 1174,col 59)",
            "(line 1175,col 9)-(line 1175,col 58)",
            "(line 1176,col 9)-(line 1176,col 65)",
            "(line 1177,col 9)-(line 1177,col 61)",
            "(line 1178,col 9)-(line 1178,col 60)",
            "(line 1179,col 9)-(line 1179,col 67)",
            "(line 1180,col 9)-(line 1180,col 61)",
            "(line 1181,col 9)-(line 1181,col 60)",
            "(line 1182,col 9)-(line 1182,col 67)",
            "(line 1183,col 9)-(line 1183,col 59)",
            "(line 1184,col 9)-(line 1184,col 58)",
            "(line 1185,col 9)-(line 1185,col 65)",
            "(line 1186,col 9)-(line 1186,col 66)",
            "(line 1187,col 9)-(line 1187,col 65)",
            "(line 1188,col 9)-(line 1188,col 72)",
            "(line 1189,col 9)-(line 1189,col 64)",
            "(line 1190,col 9)-(line 1190,col 63)",
            "(line 1191,col 9)-(line 1191,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testLang300()",
        "snippet": "    public void testLang300() {\n        NumberUtils.createNumber(\"-1l\");\n        NumberUtils.createNumber(\"01l\");\n        NumberUtils.createNumber(\"1l\");\n    }",
        "begin_line": 1194,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 9)-(line 1195,col 40)",
            "(line 1196,col 9)-(line 1196,col 40)",
            "(line 1197,col 9)-(line 1197,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testLang381()",
        "snippet": "    public void testLang381() {\n        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\n\n        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(a)));\n        assertTrue(Double.isNaN(NumberUtils.min(a)));\n\n        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(b)));\n        assertTrue(Double.isNaN(NumberUtils.min(b)));\n\n        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(aF)));\n\n        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(bF)));\n    }",
        "begin_line": 1200,
        "end_line": 1219,
        "comment": "",
        "child_ranges": [
            "(line 1201,col 9)-(line 1201,col 72)",
            "(line 1202,col 9)-(line 1202,col 72)",
            "(line 1203,col 9)-(line 1203,col 72)",
            "(line 1204,col 9)-(line 1204,col 72)",
            "(line 1206,col 9)-(line 1206,col 83)",
            "(line 1207,col 9)-(line 1207,col 53)",
            "(line 1208,col 9)-(line 1208,col 53)",
            "(line 1210,col 9)-(line 1210,col 95)",
            "(line 1211,col 9)-(line 1211,col 53)",
            "(line 1212,col 9)-(line 1212,col 53)",
            "(line 1214,col 9)-(line 1214,col 84)",
            "(line 1215,col 9)-(line 1215,col 53)",
            "(line 1217,col 9)-(line 1217,col 95)",
            "(line 1218,col 9)-(line 1218,col 53)"
        ]
    }
]