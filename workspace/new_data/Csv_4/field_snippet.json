[
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.BACKSPACE",
        "snippet": "    static final char BACKSPACE = '\\b';",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.COMMA",
        "snippet": "    static final char COMMA = ',';",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.COMMENT",
        "snippet": "    static final char COMMENT = '#';",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n     * Starts a comment, the remainder of the line is the comment.\n     "
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.CR",
        "snippet": "    static final char CR = '\\r';",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR",
        "snippet": "    static final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.BACKSLASH",
        "snippet": "    static final char BACKSLASH = '\\\\';",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.FF",
        "snippet": "    static final char FF = '\\f';",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.LF",
        "snippet": "    static final char LF = '\\n';",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.SP",
        "snippet": "    static final char SP = ' ';",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.TAB",
        "snippet": "    static final char TAB = '\\t';",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.EMPTY",
        "snippet": "    static final String EMPTY = \"\";",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.END_OF_STREAM",
        "snippet": "    static final int END_OF_STREAM = -1;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " The end of stream symbol "
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.UNDEFINED",
        "snippet": "    static final int UNDEFINED = -2;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Undefined state for the lookahead char "
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.CRLF",
        "snippet": "    static final String CRLF = \"\\r\\n\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": " According to RFC 4180, line breaks are delimited by CRLF "
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.LINE_SEPARATOR",
        "snippet": "    static final String LINE_SEPARATOR = \"\\u2028\";",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * Unicode line separator.\n     "
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.PARAGRAPH_SEPARATOR",
        "snippet": "    static final String PARAGRAPH_SEPARATOR = \"\\u2029\";",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n     * Unicode paragraph separator.\n     "
    },
    {
        "class_name": "org.apache.commons.csv.Constants",
        "src_path": "src/main/java/org/apache/commons/csv/Constants.java",
        "signature": "org.apache.commons.csv.Constants.NEXT_LINE",
        "snippet": "    static final String NEXT_LINE = \"\\u0085\";",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n     * Unicode next line.\n     "
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.format",
        "snippet": "    private final CSVFormat format;",
        "begin_line": 206,
        "end_line": 206,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.headerMap",
        "snippet": "    private final Map<String, Integer> headerMap;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " A mapping of column names to column indices "
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.lexer",
        "snippet": "    private final Lexer lexer;",
        "begin_line": 211,
        "end_line": 211,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.record",
        "snippet": "    private final List<String> record = new ArrayList<String>();",
        "begin_line": 214,
        "end_line": 214,
        "comment": " A record buffer for getRecord(). Grows as necessary and is reused. "
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.recordNumber",
        "snippet": "    private long recordNumber;",
        "begin_line": 216,
        "end_line": 216,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.reusableToken",
        "snippet": "    private final Token reusableToken = new Token();",
        "begin_line": 218,
        "end_line": 218,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVParser",
        "src_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "signature": "org.apache.commons.csv.CSVParser.current",
        "snippet": "            private CSVRecord current;",
        "begin_line": 368,
        "end_line": 368,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Token",
        "src_path": "src/main/java/org/apache/commons/csv/Token.java",
        "signature": "org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH",
        "snippet": "    private static final int INITIAL_TOKEN_LENGTH = 50;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " length of the initial token (content-)buffer "
    },
    {
        "class_name": "org.apache.commons.csv.Token",
        "src_path": "src/main/java/org/apache/commons/csv/Token.java",
        "signature": "org.apache.commons.csv.Token.type",
        "snippet": "    Token.Type type = INVALID;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Token type "
    },
    {
        "class_name": "org.apache.commons.csv.Token",
        "src_path": "src/main/java/org/apache/commons/csv/Token.java",
        "signature": "org.apache.commons.csv.Token.content",
        "snippet": "    final StringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The content buffer. "
    },
    {
        "class_name": "org.apache.commons.csv.Token",
        "src_path": "src/main/java/org/apache/commons/csv/Token.java",
        "signature": "org.apache.commons.csv.Token.isReady",
        "snippet": "    boolean isReady;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Token ready flag: indicates a valid token with content (ready for the parser). "
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 147,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.delimiter",
        "snippet": "    private final char delimiter;",
        "begin_line": 149,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.quoteChar",
        "snippet": "    private final Character quoteChar; // null if quoting is disabled",
        "begin_line": 150,
        "end_line": 150,
        "comment": " null if quoting is disabled"
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.quotePolicy",
        "snippet": "    private final Quote quotePolicy;",
        "begin_line": 151,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.commentStart",
        "snippet": "    private final Character commentStart; // null if commenting is disabled",
        "begin_line": 152,
        "end_line": 152,
        "comment": " null if commenting is disabled"
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.escape",
        "snippet": "    private final Character escape; // null if escaping is disabled",
        "begin_line": 153,
        "end_line": 153,
        "comment": " null if escaping is disabled"
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces",
        "snippet": "    private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Should leading/trailing spaces be ignored around values?"
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.ignoreEmptyLines",
        "snippet": "    private final boolean ignoreEmptyLines;",
        "begin_line": 155,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.recordSeparator",
        "snippet": "    private final String recordSeparator; // for outputs",
        "begin_line": 156,
        "end_line": 156,
        "comment": " for outputs"
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.nullString",
        "snippet": "    private final String nullString; // the string to be used for null values",
        "begin_line": 157,
        "end_line": 157,
        "comment": " the string to be used for null values"
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.header",
        "snippet": "    private final String[] header;",
        "begin_line": 158,
        "end_line": 158,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.skipHeaderRecord",
        "snippet": "    private final boolean skipHeaderRecord;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.DEFAULT",
        "snippet": "    public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false);",
        "begin_line": 174,
        "end_line": 175,
        "comment": "\n     * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.\n     * <h3>RFC 4180:</h3>\n     * <ul>\n     * <li>withDelimiter(',')</li>\n     * <li>withQuoteChar('\"')</li>\n     * <li>withRecordSeparator(CRLF)</li>\n     * </ul>\n     * <h3>Additional:</h3>\n     * <ul>\n     * <li>withIgnoreEmptyLines(true)</li>\n     * </ul>\n     "
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.RFC4180",
        "snippet": "    public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
        "begin_line": 186,
        "end_line": 186,
        "comment": "\n     * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     * <h3>RFC 4180:</h3>\n     * <ul>\n     * <li>withDelimiter(',')</li>\n     * <li>withQuoteChar('\"')</li>\n     * <li>withRecordSeparator(CRLF)</li>\n     * </ul>\n     "
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.EXCEL",
        "snippet": "    public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\n     * Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n     * locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n     * <p/>\n     * For example for parsing or generating a CSV file on a French system the following format will be used:\n     *\n     * <pre>\n     * CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n     * </pre>\n     * Settings are:\n     * <ul>\n     * <li>withDelimiter(',')</li>\n     * <li>withQuoteChar('\"')</li>\n     * <li>withRecordSeparator(CRLF)</li>\n     * </ul>\n     * Note: this is currently the same as RFC4180\n     "
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.TDF",
        "snippet": "    public static final CSVFormat TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true);",
        "begin_line": 208,
        "end_line": 211,
        "comment": " Tab-delimited format, with quote; leading and trailing spaces ignored. "
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormat",
        "src_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
        "signature": "org.apache.commons.csv.CSVFormat.MYSQL",
        "snippet": "    public static final CSVFormat MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuoteChar(null)\n            .withRecordSeparator(LF);",
        "begin_line": 221,
        "end_line": 227,
        "comment": "\n     * Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n     * a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n     * are escaped with '\\'.\n     *\n     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n     *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n     "
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecord",
        "src_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
        "signature": "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY",
        "snippet": "    private static final String[] EMPTY_STRING_ARRAY = new String[0];",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecord",
        "src_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
        "signature": "org.apache.commons.csv.CSVRecord.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecord",
        "src_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
        "signature": "org.apache.commons.csv.CSVRecord.comment",
        "snippet": "    private final String comment;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The accumulated comments (if any) "
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecord",
        "src_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
        "signature": "org.apache.commons.csv.CSVRecord.mapping",
        "snippet": "    private final Map<String, Integer> mapping;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " The column name to index mapping. "
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecord",
        "src_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
        "signature": "org.apache.commons.csv.CSVRecord.recordNumber",
        "snippet": "    private final long recordNumber;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The record number. "
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecord",
        "src_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
        "signature": "org.apache.commons.csv.CSVRecord.values",
        "snippet": "    private final String[] values;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The values of the record "
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.DISABLED",
        "snippet": "    private static final char DISABLED = '\\ufffe';",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it\n     * won't be confused with an EOF signal (-1), and because the Unicode value {@code FFFE} would be encoded as two\n     * chars (using surrogates) and thus there should never be a collision with a real text char.\n     "
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.delimiter",
        "snippet": "    private final char delimiter;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.escape",
        "snippet": "    private final char escape;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.quoteChar",
        "snippet": "    private final char quoteChar;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.commentStart",
        "snippet": "    private final char commentStart;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces",
        "snippet": "    private final boolean ignoreSurroundingSpaces;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.ignoreEmptyLines",
        "snippet": "    private final boolean ignoreEmptyLines;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.Lexer",
        "src_path": "src/main/java/org/apache/commons/csv/Lexer.java",
        "signature": "org.apache.commons.csv.Lexer.in",
        "snippet": "    private final ExtendedBufferedReader in;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The input stream "
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "src_path": "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.lastChar",
        "snippet": "    private int lastChar = UNDEFINED;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " The last char returned "
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "src_path": "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.eolCounter",
        "snippet": "    private long eolCounter = 0;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The count of EOLs (CR/LF/CRLF) seen so far "
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "src_path": "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.closed",
        "snippet": "    private boolean closed;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinter",
        "src_path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
        "signature": "org.apache.commons.csv.CSVPrinter.out",
        "snippet": "    private final Appendable out;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " The place that the values get written. "
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinter",
        "src_path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
        "signature": "org.apache.commons.csv.CSVPrinter.format",
        "snippet": "    private final CSVFormat format;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinter",
        "src_path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
        "signature": "org.apache.commons.csv.CSVPrinter.newRecord",
        "snippet": "    private boolean newRecord = true;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " True if we just began a new record. "
    }
]