[
    {
        "class_name": "org.apache.commons.csv.CSVFileParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFileParserTest.java",
        "signature": "org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest(java.io.File)",
        "snippet": "    public CSVFileParserTest(final File file) throws FileNotFoundException\n    {\n       this.testName = file.getName();\n       this.testData = new BufferedReader(new FileReader(file));\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 8)-(line 57,col 38)",
            "(line 58,col 8)-(line 58,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFileParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFileParserTest.java",
        "signature": "org.apache.commons.csv.CSVFileParserTest.readTestData()",
        "snippet": "    private String readTestData() throws IOException {\n        String line;\n        do {\n            line = testData.readLine();\n        } while (line != null && line.startsWith(\"#\"));\n        return line;\n    }",
        "begin_line": 61,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 20)",
            "(line 63,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFileParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFileParserTest.java",
        "signature": "org.apache.commons.csv.CSVFileParserTest.generateData()",
        "snippet": "    @Parameters\n    public static Collection<Object[]> generateData()\n    {\n        final List<Object[]> list = new ArrayList<Object[]>();\n\n        final FilenameFilter filenameFilter = new FilenameFilter() {\n            public boolean accept(final File dir, final String name) {\n                return name.startsWith(\"test\") && name.endsWith(\".txt\");\n            }\n        };\n        final File[] files = BASE.listFiles(filenameFilter);\n        for(final File f : files){\n            list.add(new Object[]{f});\n        }\n        return list;\n    }",
        "begin_line": 69,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)",
            "(line 74,col 9)-(line 78,col 10)",
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 82,col 9)",
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFileParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFileParserTest.java",
        "signature": "org.apache.commons.csv.CSVFileParserTest.Anonymous-3d3be894-1028-4e48-839f-e682a4a8fe15.accept(java.io.File, java.lang.String)",
        "snippet": "            public boolean accept(final File dir, final String name) {\n                return name.startsWith(\"test\") && name.endsWith(\".txt\");\n            }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 17)-(line 76,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFileParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFileParserTest.java",
        "signature": "org.apache.commons.csv.CSVFileParserTest.testCSVFile()",
        "snippet": "    @Test\n    public void testCSVFile() throws Exception {\n        String line = readTestData();\n        assertNotNull(\"file must contain config line\", line);\n        final String[] split = line.split(\" \");\n        assertTrue(testName+\" require 1 param\", split.length >= 1);\n         // first line starts with csv data file name\n        CSVFormat format = CSVFormat.newFormat(',').withQuoteChar('\"');\n        boolean checkComments = false;\n        for(int i=1; i < split.length; i++) {\n            final String option = split[i];\n            final String[] option_parts = option.split(\"=\",2);\n            if (\"IgnoreEmpty\".equalsIgnoreCase(option_parts[0])){\n                format = format.withIgnoreEmptyLines(Boolean.parseBoolean(option_parts[1]));\n            } else if (\"IgnoreSpaces\".equalsIgnoreCase(option_parts[0])) {\n                format = format.withIgnoreSurroundingSpaces(Boolean.parseBoolean(option_parts[1]));\n            } else if (\"CommentStart\".equalsIgnoreCase(option_parts[0])) {\n                format = format.withCommentStart(option_parts[1].charAt(0));\n            } else if (\"CheckComments\".equalsIgnoreCase(option_parts[0])) {\n                checkComments = true;\n            } else {\n                fail(testName+\" unexpected option: \"+option);\n            }\n        }\n        line = readTestData(); // get string version of format\n        assertEquals(testName+\" Expected format \", line, format.toString());\n\n        // Now parse the file and compare against the expected results\n        // We use a buffered reader internally so no need to create one here.\n        final CSVParser parser = CSVParser.parse(new File(BASE, split[0]), format);\n        for(final CSVRecord record : parser) {\n            String parsed = record.toString();\n            if (checkComments) {\n                final String comment = record.getComment().replace(\"\\n\", \"\\\\n\");\n                if (comment != null) {\n                    parsed += \"#\" + comment;\n                }\n            }\n            final int count = record.size();\n            assertEquals(testName, readTestData(), count+\":\"+parsed);\n        }\n    }",
        "begin_line": 86,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 37)",
            "(line 89,col 9)-(line 89,col 61)",
            "(line 90,col 9)-(line 90,col 47)",
            "(line 91,col 9)-(line 91,col 67)",
            "(line 93,col 9)-(line 93,col 71)",
            "(line 94,col 9)-(line 94,col 38)",
            "(line 95,col 9)-(line 109,col 9)",
            "(line 110,col 9)-(line 110,col 30)",
            "(line 111,col 9)-(line 111,col 76)",
            "(line 115,col 9)-(line 115,col 83)",
            "(line 116,col 9)-(line 126,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFileParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFileParserTest.java",
        "signature": "org.apache.commons.csv.CSVFileParserTest.testCSVUrl()",
        "snippet": "    @Test\n    public void testCSVUrl() {}",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "org.apache.commons.csv.TokenMatchers.hasType(org.apache.commons.csv.Token.Type)",
        "snippet": "    public static Matcher<Token> hasType(final Token.Type expectedType) {\n        return new TypeSafeDiagnosingMatcher<Token>() {\n\n            public void describeTo(final Description description) {\n                description.appendText(\"token has type \");\n                description.appendValue(expectedType);\n            }\n\n            @Override\n            protected boolean matchesSafely(final Token item,\n                    final Description mismatchDescription) {\n                mismatchDescription.appendText(\"token type is \");\n                mismatchDescription.appendValue(item.type);\n                return item.type == expectedType;\n            }\n        };\n    }",
        "begin_line": 30,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 45,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "describeTo(Description)",
        "snippet": "            public void describeTo(final Description description) {\n                description.appendText(\"token has type \");\n                description.appendValue(expectedType);\n            }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 17)-(line 34,col 58)",
            "(line 35,col 17)-(line 35,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "matchesSafely(Token, Description)",
        "snippet": "            @Override\n            protected boolean matchesSafely(final Token item,\n                    final Description mismatchDescription) {\n                mismatchDescription.appendText(\"token type is \");\n                mismatchDescription.appendValue(item.type);\n                return item.type == expectedType;\n            }",
        "begin_line": 38,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 17)-(line 41,col 65)",
            "(line 42,col 17)-(line 42,col 59)",
            "(line 43,col 17)-(line 43,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "org.apache.commons.csv.TokenMatchers.hasContent(java.lang.String)",
        "snippet": "    public static Matcher<Token> hasContent(final String expectedContent) {\n        return new TypeSafeDiagnosingMatcher<Token>() {\n\n            public void describeTo(final Description description) {\n                description.appendText(\"token has content \");\n                description.appendValue(expectedContent);\n            }\n\n            @Override\n            protected boolean matchesSafely(final Token item,\n                    final Description mismatchDescription) {\n                mismatchDescription.appendText(\"token content is \");\n                mismatchDescription.appendValue(item.content.toString());\n                return expectedContent.equals(item.content.toString());\n            }\n        };\n    }",
        "begin_line": 48,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 63,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "describeTo(Description)",
        "snippet": "            public void describeTo(final Description description) {\n                description.appendText(\"token has content \");\n                description.appendValue(expectedContent);\n            }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 17)-(line 52,col 61)",
            "(line 53,col 17)-(line 53,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "matchesSafely(Token, Description)",
        "snippet": "            @Override\n            protected boolean matchesSafely(final Token item,\n                    final Description mismatchDescription) {\n                mismatchDescription.appendText(\"token content is \");\n                mismatchDescription.appendValue(item.content.toString());\n                return expectedContent.equals(item.content.toString());\n            }",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 17)-(line 59,col 68)",
            "(line 60,col 17)-(line 60,col 73)",
            "(line 61,col 17)-(line 61,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "org.apache.commons.csv.TokenMatchers.isReady()",
        "snippet": "    public static Matcher<Token> isReady() {\n        return new TypeSafeDiagnosingMatcher<Token>() {\n\n            public void describeTo(final Description description) {\n                description.appendText(\"token is ready \");\n            }\n\n            @Override\n            protected boolean matchesSafely(final Token item,\n                    final Description mismatchDescription) {\n                mismatchDescription.appendText(\"token is not ready \");\n                return item.isReady;\n            }\n        };\n    }",
        "begin_line": 66,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 79,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "describeTo(Description)",
        "snippet": "            public void describeTo(final Description description) {\n                description.appendText(\"token is ready \");\n            }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 17)-(line 70,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "matchesSafely(Token, Description)",
        "snippet": "            @Override\n            protected boolean matchesSafely(final Token item,\n                    final Description mismatchDescription) {\n                mismatchDescription.appendText(\"token is not ready \");\n                return item.isReady;\n            }",
        "begin_line": 73,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 76,col 17)-(line 76,col 70)",
            "(line 77,col 17)-(line 77,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchers",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchers.java",
        "signature": "org.apache.commons.csv.TokenMatchers.matches(org.apache.commons.csv.Token.Type, java.lang.String)",
        "snippet": "    public static Matcher<Token> matches(final Token.Type expectedType, final String expectedContent) {\n        return allOf(hasType(expectedType), hasContent(expectedContent));\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.FercGovTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/FercGovTest.java",
        "signature": "org.apache.commons.csv.FercGovTest.testContractFile()",
        "snippet": "    @Test\n    public void testContractFile() {}",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.csv.FercGovTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/FercGovTest.java",
        "signature": "org.apache.commons.csv.FercGovTest.testTransactionFile()",
        "snippet": "    @Test\n    public void testTransactionFile() {}",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchersTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchersTest.java",
        "signature": "org.apache.commons.csv.TokenMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        token = new Token();\n        token.type = Token.Type.TOKEN;\n        token.isReady = true;\n        token.content.append(\"content\");\n    }",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 28)",
            "(line 36,col 9)-(line 36,col 38)",
            "(line 37,col 9)-(line 37,col 29)",
            "(line 38,col 9)-(line 38,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchersTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchersTest.java",
        "signature": "org.apache.commons.csv.TokenMatchersTest.testHasType()",
        "snippet": "    @Test\n    public void testHasType() {\n        assertFalse(hasType(Token.Type.COMMENT).matches(token));\n        assertFalse(hasType(Token.Type.EOF).matches(token));\n        assertFalse(hasType(Token.Type.EORECORD).matches(token));\n        assertTrue(hasType(Token.Type.TOKEN).matches(token));\n    }",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 64)",
            "(line 44,col 9)-(line 44,col 60)",
            "(line 45,col 9)-(line 45,col 65)",
            "(line 46,col 9)-(line 46,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchersTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchersTest.java",
        "signature": "org.apache.commons.csv.TokenMatchersTest.testHasContent()",
        "snippet": "    @Test\n    public void testHasContent() {\n        assertFalse(hasContent(\"This is not the token's content\").matches(token));\n        assertTrue(hasContent(\"content\").matches(token));\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 82)",
            "(line 52,col 9)-(line 52,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchersTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchersTest.java",
        "signature": "org.apache.commons.csv.TokenMatchersTest.testIsReady()",
        "snippet": "    @Test\n    public void testIsReady() {\n        assertTrue(isReady().matches(token));\n        token.isReady = false;\n        assertFalse(isReady().matches(token));\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 45)",
            "(line 58,col 9)-(line 58,col 30)",
            "(line 59,col 9)-(line 59,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.TokenMatchersTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/TokenMatchersTest.java",
        "signature": "org.apache.commons.csv.TokenMatchersTest.testMatches()",
        "snippet": "    @Test\n    public void testMatches() {\n        assertTrue(matches(Token.Type.TOKEN, \"content\").matches(token));\n        assertFalse(matches(Token.Type.EOF, \"content\").matches(token));\n        assertFalse(matches(Token.Type.TOKEN, \"not the content\").matches(token));\n        assertFalse(matches(Token.Type.EORECORD, \"not the content\").matches(token));\n    }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 72)",
            "(line 65,col 9)-(line 65,col 71)",
            "(line 66,col 9)-(line 66,col 81)",
            "(line 67,col 9)-(line 67,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()",
        "snippet": "    @Test\n    public void testEmptyInput() throws Exception {\n        final ExtendedBufferedReader br = getBufferedReader(\"\");\n        assertEquals(END_OF_STREAM, br.read());\n        assertEquals(END_OF_STREAM, br.lookAhead());\n        assertEquals(END_OF_STREAM, br.getLastChar());\n        assertNull(br.readLine());\n        assertEquals(0, br.read(new char[10], 0, 0));\n    }",
        "begin_line": 37,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 64)",
            "(line 40,col 9)-(line 40,col 47)",
            "(line 41,col 9)-(line 41,col 52)",
            "(line 42,col 9)-(line 42,col 54)",
            "(line 43,col 9)-(line 43,col 34)",
            "(line 44,col 9)-(line 44,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()",
        "snippet": "    @Test\n    public void testReadLookahead1() throws Exception {\n        final ExtendedBufferedReader br = getBufferedReader(\"1\\n2\\r3\\n\");\n        assertEquals(0, br.getCurrentLineNumber());\n        assertEquals('1', br.lookAhead());\n        assertEquals(UNDEFINED, br.getLastChar());\n        assertEquals(0, br.getCurrentLineNumber());\n        assertEquals('1', br.read()); // Start line 1\n        assertEquals('1', br.getLastChar());\n\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('\\n', br.lookAhead());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('1', br.getLastChar());\n        assertEquals('\\n', br.read());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('\\n', br.getLastChar());\n        assertEquals(1, br.getCurrentLineNumber());\n\n        assertEquals('2', br.lookAhead());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('\\n', br.getLastChar());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('2', br.read()); // Start line 2\n        assertEquals(2, br.getCurrentLineNumber());\n        assertEquals('2', br.getLastChar());\n\n        assertEquals('\\r', br.lookAhead());\n        assertEquals(2, br.getCurrentLineNumber());\n        assertEquals('2', br.getLastChar());\n        assertEquals('\\r', br.read());\n        assertEquals('\\r', br.getLastChar());\n        assertEquals(2, br.getCurrentLineNumber());\n\n        assertEquals('3', br.lookAhead());\n        assertEquals('\\r', br.getLastChar());\n        assertEquals('3', br.read()); // Start line 3\n        assertEquals('3', br.getLastChar());\n        assertEquals(3, br.getCurrentLineNumber());\n\n        assertEquals('\\n', br.lookAhead());\n        assertEquals(3, br.getCurrentLineNumber());\n        assertEquals('3', br.getLastChar());\n        assertEquals('\\n', br.read());\n        assertEquals(3, br.getCurrentLineNumber());\n        assertEquals('\\n', br.getLastChar());\n        assertEquals(3, br.getCurrentLineNumber());\n\n        assertEquals(END_OF_STREAM, br.lookAhead());\n        assertEquals('\\n', br.getLastChar());\n        assertEquals(END_OF_STREAM, br.read());\n        assertEquals(END_OF_STREAM, br.getLastChar());\n        assertEquals(END_OF_STREAM, br.read());\n        assertEquals(END_OF_STREAM, br.lookAhead());\n        assertEquals(3, br.getCurrentLineNumber());\n\n    }",
        "begin_line": 47,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 73)",
            "(line 50,col 9)-(line 50,col 51)",
            "(line 51,col 9)-(line 51,col 42)",
            "(line 52,col 9)-(line 52,col 50)",
            "(line 53,col 9)-(line 53,col 51)",
            "(line 54,col 9)-(line 54,col 37)",
            "(line 55,col 9)-(line 55,col 44)",
            "(line 57,col 9)-(line 57,col 51)",
            "(line 58,col 9)-(line 58,col 43)",
            "(line 59,col 9)-(line 59,col 51)",
            "(line 60,col 9)-(line 60,col 44)",
            "(line 61,col 9)-(line 61,col 38)",
            "(line 62,col 9)-(line 62,col 51)",
            "(line 63,col 9)-(line 63,col 45)",
            "(line 64,col 9)-(line 64,col 51)",
            "(line 66,col 9)-(line 66,col 42)",
            "(line 67,col 9)-(line 67,col 51)",
            "(line 68,col 9)-(line 68,col 45)",
            "(line 69,col 9)-(line 69,col 51)",
            "(line 70,col 9)-(line 70,col 37)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 44)",
            "(line 74,col 9)-(line 74,col 43)",
            "(line 75,col 9)-(line 75,col 51)",
            "(line 76,col 9)-(line 76,col 44)",
            "(line 77,col 9)-(line 77,col 38)",
            "(line 78,col 9)-(line 78,col 45)",
            "(line 79,col 9)-(line 79,col 51)",
            "(line 81,col 9)-(line 81,col 42)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 37)",
            "(line 84,col 9)-(line 84,col 44)",
            "(line 85,col 9)-(line 85,col 51)",
            "(line 87,col 9)-(line 87,col 43)",
            "(line 88,col 9)-(line 88,col 51)",
            "(line 89,col 9)-(line 89,col 44)",
            "(line 90,col 9)-(line 90,col 38)",
            "(line 91,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 92,col 45)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 47)",
            "(line 98,col 9)-(line 98,col 54)",
            "(line 99,col 9)-(line 99,col 47)",
            "(line 100,col 9)-(line 100,col 52)",
            "(line 101,col 9)-(line 101,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()",
        "snippet": "    @Test\n    public void testReadLookahead2() throws Exception {\n        final char[] ref = new char[5];\n        final char[] res = new char[5];\n\n        final ExtendedBufferedReader br = getBufferedReader(\"abcdefg\");\n        ref[0] = 'a';\n        ref[1] = 'b';\n        ref[2] = 'c';\n        assertEquals(3, br.read(res, 0, 3));\n        assertArrayEquals(ref, res);\n        assertEquals('c', br.getLastChar());\n\n        assertEquals('d', br.lookAhead());\n        ref[4] = 'd';\n        assertEquals(1, br.read(res, 4, 1));\n        assertArrayEquals(ref, res);\n        assertEquals('d', br.getLastChar());\n    }",
        "begin_line": 105,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 39)",
            "(line 108,col 9)-(line 108,col 39)",
            "(line 110,col 9)-(line 110,col 71)",
            "(line 111,col 9)-(line 111,col 21)",
            "(line 112,col 9)-(line 112,col 21)",
            "(line 113,col 9)-(line 113,col 21)",
            "(line 114,col 9)-(line 114,col 44)",
            "(line 115,col 9)-(line 115,col 36)",
            "(line 116,col 9)-(line 116,col 44)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 21)",
            "(line 120,col 9)-(line 120,col 44)",
            "(line 121,col 9)-(line 121,col 36)",
            "(line 122,col 9)-(line 122,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()",
        "snippet": "    @Test\n    public void testReadLine() throws Exception {\n        ExtendedBufferedReader br = getBufferedReader(\"\");\n        assertNull(br.readLine());\n\n        br = getBufferedReader(\"\\n\");\n        assertEquals(\"\",br.readLine());\n        assertNull(br.readLine());\n\n        br = getBufferedReader(\"foo\\n\\nhello\");\n        assertEquals(0, br.getCurrentLineNumber());\n        assertEquals(\"foo\",br.readLine());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals(\"\",br.readLine());\n        assertEquals(2, br.getCurrentLineNumber());\n        assertEquals(\"hello\",br.readLine());\n        assertEquals(3, br.getCurrentLineNumber());\n        assertNull(br.readLine());\n        assertEquals(3, br.getCurrentLineNumber());\n\n        br = getBufferedReader(\"foo\\n\\nhello\");\n        assertEquals('f', br.read());\n        assertEquals('o', br.lookAhead());\n        assertEquals(\"oo\",br.readLine());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('\\n', br.lookAhead());\n        assertEquals(\"\",br.readLine());\n        assertEquals(2, br.getCurrentLineNumber());\n        assertEquals('h', br.lookAhead());\n        assertEquals(\"hello\",br.readLine());\n        assertNull(br.readLine());\n        assertEquals(3, br.getCurrentLineNumber());\n\n\n        br = getBufferedReader(\"foo\\rbaar\\r\\nfoo\");\n        assertEquals(\"foo\",br.readLine());\n        assertEquals('b', br.lookAhead());\n        assertEquals(\"baar\",br.readLine());\n        assertEquals('f', br.lookAhead());\n        assertEquals(\"foo\",br.readLine());\n        assertNull(br.readLine());\n    }",
        "begin_line": 125,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 58)",
            "(line 128,col 9)-(line 128,col 34)",
            "(line 130,col 9)-(line 130,col 37)",
            "(line 131,col 9)-(line 131,col 39)",
            "(line 132,col 9)-(line 132,col 34)",
            "(line 134,col 9)-(line 134,col 47)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 137,col 51)",
            "(line 138,col 9)-(line 138,col 39)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 44)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 142,col 34)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 145,col 9)-(line 145,col 47)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 42)",
            "(line 148,col 9)-(line 148,col 41)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 150,col 9)-(line 150,col 43)",
            "(line 151,col 9)-(line 151,col 39)",
            "(line 152,col 9)-(line 152,col 51)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 159,col 9)-(line 159,col 51)",
            "(line 160,col 9)-(line 160,col 42)",
            "(line 161,col 9)-(line 161,col 42)",
            "(line 162,col 9)-(line 162,col 43)",
            "(line 163,col 9)-(line 163,col 42)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()",
        "snippet": "    @Test\n    public void testReadChar() throws Exception {\n        final String LF=\"\\n\"; final String CR=\"\\r\"; final String CRLF=CR+LF; final String LFCR=LF+CR;// easier to read the string below\n        final String test=\"a\" + LF + \"b\" + CR + \"c\" + LF + LF + \"d\" + CR + CR + \"e\" + LFCR + \"f \"+ CRLF;\n        //                EOL        eol        EOL  EOL        eol  eol        EOL+CR        EOL\n        final int EOLeolct = 9;\n        ExtendedBufferedReader br;\n\n        br = getBufferedReader(test);\n        assertEquals(0, br.getCurrentLineNumber());\n        while (br.readLine() != null) {\n            // consume all\n        }\n        assertEquals(EOLeolct, br.getCurrentLineNumber());\n\n        br = getBufferedReader(test);\n        assertEquals(0, br.getCurrentLineNumber());\n        while (br.read() != -1) {\n            // consume all\n        }\n        assertEquals(EOLeolct, br.getCurrentLineNumber());\n\n        br = getBufferedReader(test);\n        assertEquals(0, br.getCurrentLineNumber());\n        final char[] buff = new char[10];\n        while (br.read(buff, 0, 3) != -1) {\n            // consume all\n        }\n        assertEquals(EOLeolct, br.getCurrentLineNumber());\n    }",
        "begin_line": 172,
        "end_line": 201,
        "comment": "\n     * Test to illustrate  https://issues.apache.org/jira/browse/CSV-75\n     *\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 29)",
            "(line 174,col 31)-(line 174,col 51)",
            "(line 174,col 53)-(line 174,col 76)",
            "(line 174,col 78)-(line 174,col 101)",
            "(line 175,col 9)-(line 175,col 104)",
            "(line 177,col 9)-(line 177,col 31)",
            "(line 178,col 9)-(line 178,col 34)",
            "(line 180,col 9)-(line 180,col 37)",
            "(line 181,col 9)-(line 181,col 51)",
            "(line 182,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 185,col 58)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 51)",
            "(line 189,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 58)",
            "(line 194,col 9)-(line 194,col 37)",
            "(line 195,col 9)-(line 195,col 51)",
            "(line 196,col 9)-(line 196,col 41)",
            "(line 197,col 9)-(line 199,col 9)",
            "(line 200,col 9)-(line 200,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.ExtendedBufferedReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java",
        "signature": "org.apache.commons.csv.ExtendedBufferedReaderTest.getBufferedReader(java.lang.String)",
        "snippet": "    private ExtendedBufferedReader getBufferedReader(final String s) {\n        return new ExtendedBufferedReader(new StringReader(s));\n    }",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetLine()",
        "snippet": "    @Test\n    public void testGetLine() throws IOException {\n        final CSVParser parser = CSVParser.parse(CSVINPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n        for (final String[] re : RESULT) {\n            assertArrayEquals(re, parser.nextRecord().values());\n        }\n\n        assertNull(parser.nextRecord());\n    }",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 112)",
            "(line 77,col 9)-(line 79,col 9)",
            "(line 81,col 9)-(line 81,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetRecords()",
        "snippet": "    @Test\n    public void testGetRecords() throws IOException {\n        final CSVParser parser = CSVParser.parse(CSVINPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(RESULT.length, records.size());\n        assertTrue(records.size() > 0);\n        for (int i = 0; i < RESULT.length; i++) {\n            assertArrayEquals(RESULT[i], records.get(i).values());\n        }\n    }",
        "begin_line": 84,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 112)",
            "(line 87,col 9)-(line 87,col 60)",
            "(line 88,col 9)-(line 88,col 52)",
            "(line 89,col 9)-(line 89,col 39)",
            "(line 90,col 9)-(line 92,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testExcelFormat1()",
        "snippet": "    @Test\n    public void testExcelFormat1() throws IOException {\n        final String code =\n                \"value1,value2,value3,value4\\r\\na,b,c,d\\r\\n  x,,,\"\n                        + \"\\r\\n\\r\\n\\\"\\\"\\\"hello\\\"\\\"\\\",\\\"  \\\"\\\"world\\\"\\\"\\\",\\\"abc\\ndef\\\",\\r\\n\";\n        final String[][] res = {\n                {\"value1\", \"value2\", \"value3\", \"value4\"},\n                {\"a\", \"b\", \"c\", \"d\"},\n                {\"  x\", \"\", \"\", \"\"},\n                {\"\"},\n                {\"\\\"hello\\\"\", \"  \\\"world\\\"\", \"abc\\ndef\", \"\"}\n        };\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(res.length, records.size());\n        assertTrue(records.size() > 0);\n        for (int i = 0; i < res.length; i++) {\n            assertArrayEquals(res[i], records.get(i).values());\n        }\n    }",
        "begin_line": 95,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 99,col 92)",
            "(line 100,col 9)-(line 106,col 10)",
            "(line 107,col 9)-(line 107,col 72)",
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 109,col 49)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testExcelFormat2()",
        "snippet": "    @Test\n    public void testExcelFormat2() throws Exception {\n        final String code = \"foo,baar\\r\\n\\r\\nhello,\\r\\n\\r\\nworld,\\r\\n\";\n        final String[][] res = {\n                {\"foo\", \"baar\"},\n                {\"\"},\n                {\"hello\", \"\"},\n                {\"\"},\n                {\"world\", \"\"}\n        };\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(res.length, records.size());\n        assertTrue(records.size() > 0);\n        for (int i = 0; i < res.length; i++) {\n            assertArrayEquals(res[i], records.get(i).values());\n        }\n    }",
        "begin_line": 116,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 71)",
            "(line 119,col 9)-(line 125,col 10)",
            "(line 126,col 9)-(line 126,col 72)",
            "(line 127,col 9)-(line 127,col 60)",
            "(line 128,col 9)-(line 128,col 49)",
            "(line 129,col 9)-(line 129,col 39)",
            "(line 130,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel()",
        "snippet": "    @Test\n    public void testEndOfFileBehaviourExcel() throws Exception {\n        final String[] codes = {\n                \"hello,\\r\\n\\r\\nworld,\\r\\n\",\n                \"hello,\\r\\n\\r\\nworld,\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\\r\\n\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\",\n                \"hello,\\r\\n\\r\\nworld,\\n\",\n                \"hello,\\r\\n\\r\\nworld,\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\\n\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\"\n        };\n        final String[][] res = {\n                {\"hello\", \"\"},\n                {\"\"},  // Excel format does not ignore empty lines\n                {\"world\", \"\"}\n        };\n\n        for (final String code : codes) {\n            final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n            final List<CSVRecord> records = parser.getRecords();\n            assertEquals(res.length, records.size());\n            assertTrue(records.size() > 0);\n            for (int i = 0; i < res.length; i++) {\n                assertArrayEquals(res[i], records.get(i).values());\n            }\n        }\n    }",
        "begin_line": 135,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 146,col 10)",
            "(line 147,col 9)-(line 151,col 10)",
            "(line 153,col 9)-(line 161,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()",
        "snippet": "    @Test\n    public void testEndOfFileBehaviorCSV() throws Exception {\n        final String[] codes = {\n                \"hello,\\r\\n\\r\\nworld,\\r\\n\",\n                \"hello,\\r\\n\\r\\nworld,\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\\r\\n\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\",\n                \"hello,\\r\\n\\r\\nworld,\\n\",\n                \"hello,\\r\\n\\r\\nworld,\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\\n\",\n                \"hello,\\r\\n\\r\\nworld,\\\"\\\"\"\n        };\n        final String[][] res = {\n                {\"hello\", \"\"},  // CSV format ignores empty lines\n                {\"world\", \"\"}\n        };\n        for (final String code : codes) {\n            final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n            final List<CSVRecord> records = parser.getRecords();\n            assertEquals(res.length, records.size());\n            assertTrue(records.size() > 0);\n            for (int i = 0; i < res.length; i++) {\n                assertArrayEquals(res[i], records.get(i).values());\n            }\n        }\n    }",
        "begin_line": 164,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 175,col 10)",
            "(line 176,col 9)-(line 179,col 10)",
            "(line 180,col 9)-(line 188,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel()",
        "snippet": "    @Test\n    public void testEmptyLineBehaviourExcel() throws Exception {\n        final String[] codes = {\n                \"hello,\\r\\n\\r\\n\\r\\n\",\n                \"hello,\\n\\n\\n\",\n                \"hello,\\\"\\\"\\r\\n\\r\\n\\r\\n\",\n                \"hello,\\\"\\\"\\n\\n\\n\"\n        };\n        final String[][] res = {\n                {\"hello\", \"\"},\n                {\"\"},  // Excel format does not ignore empty lines\n                {\"\"}\n        };\n        for (final String code : codes) {\n            final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n            final List<CSVRecord> records = parser.getRecords();\n            assertEquals(res.length, records.size());\n            assertTrue(records.size() > 0);\n            for (int i = 0; i < res.length; i++) {\n                assertArrayEquals(res[i], records.get(i).values());\n            }\n        }\n    }",
        "begin_line": 191,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 198,col 10)",
            "(line 199,col 9)-(line 203,col 10)",
            "(line 204,col 9)-(line 212,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV()",
        "snippet": "    @Test\n    public void testEmptyLineBehaviourCSV() throws Exception {\n        final String[] codes = {\n                \"hello,\\r\\n\\r\\n\\r\\n\",\n                \"hello,\\n\\n\\n\",\n                \"hello,\\\"\\\"\\r\\n\\r\\n\\r\\n\",\n                \"hello,\\\"\\\"\\n\\n\\n\"\n        };\n        final String[][] res = {\n                {\"hello\", \"\"}  // CSV format ignores empty lines\n        };\n        for (final String code : codes) {\n            final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n            final List<CSVRecord> records = parser.getRecords();\n            assertEquals(res.length, records.size());\n            assertTrue(records.size() > 0);\n            for (int i = 0; i < res.length; i++) {\n                assertArrayEquals(res[i], records.get(i).values());\n            }\n        }\n    }",
        "begin_line": 215,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 222,col 10)",
            "(line 223,col 9)-(line 225,col 10)",
            "(line 226,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testEmptyFile()",
        "snippet": "    @Test\n    public void testEmptyFile() throws Exception {\n        final CSVParser parser = CSVParser.parse(\"\", CSVFormat.DEFAULT);\n        assertNull(parser.nextRecord());\n    }",
        "begin_line": 237,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 72)",
            "(line 240,col 9)-(line 240,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testCSV57()",
        "snippet": "    @Test\n    public void testCSV57() throws Exception {\n        final CSVParser parser = CSVParser.parse(\"\", CSVFormat.DEFAULT);\n        final List<CSVRecord> list = parser.getRecords();\n        assertNotNull(list);\n        assertEquals(0, list.size());\n    }",
        "begin_line": 243,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 72)",
            "(line 246,col 9)-(line 246,col 57)",
            "(line 247,col 9)-(line 247,col 28)",
            "(line 248,col 9)-(line 248,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()",
        "snippet": "    @Test\n    @Ignore\n    public void testBackslashEscapingOld() throws IOException {\n        final String code =\n                \"one,two,three\\n\"\n                        + \"on\\\\\\\"e,two\\n\"\n                        + \"on\\\"e,two\\n\"\n                        + \"one,\\\"tw\\\\\\\"o\\\"\\n\"\n                        + \"one,\\\"t\\\\,wo\\\"\\n\"\n                        + \"one,two,\\\"th,ree\\\"\\n\"\n                        + \"\\\"a\\\\\\\\\\\"\\n\"\n                        + \"a\\\\,b\\n\"\n                        + \"\\\"a\\\\\\\\,b\\\"\";\n        final String[][] res = {\n                {\"one\", \"two\", \"three\"},\n                {\"on\\\\\\\"e\", \"two\"},\n                {\"on\\\"e\", \"two\"},\n                {\"one\", \"tw\\\"o\"},\n                {\"one\", \"t\\\\,wo\"},  // backslash in quotes only escapes a delimiter (\",\")\n                {\"one\", \"two\", \"th,ree\"},\n                {\"a\\\\\\\\\"},     // backslash in quotes only escapes a delimiter (\",\")\n                {\"a\\\\\", \"b\"},  // a backslash must be returnd\n                {\"a\\\\\\\\,b\"}    // backslash in quotes only escapes a delimiter (\",\")\n        };\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(res.length, records.size());\n        assertTrue(records.size() > 0);\n        for (int i = 0; i < res.length; i++) {\n            assertArrayEquals(res[i], records.get(i).values());\n        }\n    }",
        "begin_line": 251,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 263,col 40)",
            "(line 264,col 9)-(line 274,col 10)",
            "(line 275,col 9)-(line 275,col 74)",
            "(line 276,col 9)-(line 276,col 60)",
            "(line 277,col 9)-(line 277,col 49)",
            "(line 278,col 9)-(line 278,col 39)",
            "(line 279,col 9)-(line 281,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()",
        "snippet": "    @Test\n    public void testBackslashEscaping() throws IOException {\n\n        // To avoid confusion over the need for escaping chars in java code,\n        // We will test with a forward slash as the escape char, and a single\n        // quote as the encapsulator.\n\n        final String code =\n                \"one,two,three\\n\" // 0\n                        + \"'',''\\n\"       // 1) empty encapsulators\n                        + \"/',/'\\n\"       // 2) single encapsulators\n                        + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n                        + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n                        + \"/,,/,\\n\"       // 5) separator escaped\n                        + \"//,//\\n\"       // 6) escape escaped\n                        + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n                        + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n                        + \"9,   /\\n   \\n\"  // escaped newline\n                        + \"\";\n        final String[][] res = {\n                {\"one\", \"two\", \"three\"}, // 0\n                {\"\", \"\"},                // 1\n                {\"'\", \"'\"},              // 2\n                {\"'\", \"'\"},              // 3\n                {\"'\", \"'\"},              // 4\n                {\",\", \",\"},              // 5\n                {\"/\", \"/\"},              // 6\n                {\"/\", \"/\"},              // 7\n                {\"   8   \", \"   \\\"quoted \\\"\\\" /\\\" / string\\\"   \"},\n                {\"9\", \"   \\n   \"},\n        };\n\n\n        final CSVFormat format = CSVFormat.newFormat(',').withQuoteChar('\\'')\n                               .withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines(true);\n\n        final CSVParser parser = CSVParser.parse(code, format);\n        final List<CSVRecord> records = parser.getRecords();\n        assertTrue(records.size() > 0);\n\n        Utils.compare(\"Records do not match expected result\", res, records);\n    }",
        "begin_line": 284,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 302,col 29)",
            "(line 303,col 9)-(line 314,col 10)",
            "(line 317,col 9)-(line 318,col 101)",
            "(line 320,col 9)-(line 320,col 63)",
            "(line 321,col 9)-(line 321,col 60)",
            "(line 322,col 9)-(line 322,col 39)",
            "(line 324,col 9)-(line 324,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()",
        "snippet": "    @Test\n    public void testBackslashEscaping2() throws IOException {\n\n        // To avoid confusion over the need for escaping chars in java code,\n        // We will test with a forward slash as the escape char, and a single\n        // quote as the encapsulator.\n\n        final String code = \"\"\n                + \" , , \\n\"           // 1)\n                + \" \\t ,  , \\n\"       // 2)\n                + \" // , /, , /,\\n\"   // 3)\n                + \"\";\n        final String[][] res = {\n                {\" \", \" \", \" \"},         // 1\n                {\" \\t \", \"  \", \" \"},     // 2\n                {\" / \", \" , \", \" ,\"},    // 3\n        };\n\n\n        final CSVFormat format = CSVFormat.newFormat(',')\n                .withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines(true);\n\n        final CSVParser parser = CSVParser.parse(code, format);\n        final List<CSVRecord> records = parser.getRecords();\n        assertTrue(records.size() > 0);\n\n        Utils.compare(\"\", res, records);\n    }",
        "begin_line": 327,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 338,col 21)",
            "(line 339,col 9)-(line 343,col 10)",
            "(line 346,col 9)-(line 347,col 86)",
            "(line 349,col 9)-(line 349,col 63)",
            "(line 350,col 9)-(line 350,col 60)",
            "(line 351,col 9)-(line 351,col 39)",
            "(line 353,col 9)-(line 353,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testDefaultFormat()",
        "snippet": "    @Test\n    public void testDefaultFormat() throws IOException {\n        final String code = \"\"\n                + \"a,b#\\n\"           // 1)\n                + \"\\\"\\n\\\",\\\" \\\",#\\n\"   // 2)\n                + \"#,\\\"\\\"\\n\"         // 3)\n                + \"# Final comment\\n\"// 4)\n                ;\n        final String[][] res = {\n                {\"a\", \"b#\"},\n                {\"\\n\", \" \", \"#\"},\n                {\"#\", \"\"},\n                {\"# Final comment\"}\n        };\n\n        CSVFormat format = CSVFormat.DEFAULT;\n        assertFalse(format.isCommentingEnabled());\n\n        CSVParser parser = CSVParser.parse(code, format);\n        List<CSVRecord> records = parser.getRecords();\n        assertTrue(records.size() > 0);\n\n        Utils.compare(\"Failed to parse without comments\", res, records);\n\n        final String[][] res_comments = {\n                {\"a\", \"b#\"},\n                {\"\\n\", \" \", \"#\"},\n        };\n\n        format = CSVFormat.DEFAULT.withCommentStart('#');\n        parser = CSVParser.parse(code, format);\n        records = parser.getRecords();\n\n        Utils.compare(\"Failed to parse with comments\", res_comments, records);\n    }",
        "begin_line": 356,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 363,col 17)",
            "(line 364,col 9)-(line 369,col 10)",
            "(line 371,col 9)-(line 371,col 45)",
            "(line 372,col 9)-(line 372,col 50)",
            "(line 374,col 9)-(line 374,col 57)",
            "(line 375,col 9)-(line 375,col 54)",
            "(line 376,col 9)-(line 376,col 39)",
            "(line 378,col 9)-(line 378,col 72)",
            "(line 380,col 9)-(line 383,col 10)",
            "(line 385,col 9)-(line 385,col 57)",
            "(line 386,col 9)-(line 386,col 47)",
            "(line 387,col 9)-(line 387,col 38)",
            "(line 389,col 9)-(line 389,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()",
        "snippet": "    @Test\n    public void testCarriageReturnLineFeedEndings() throws IOException {\n        final String code = \"foo\\r\\nbaar,\\r\\nhello,world\\r\\n,kanu\";\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(4, records.size());\n    }",
        "begin_line": 392,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 67)",
            "(line 395,col 9)-(line 395,col 74)",
            "(line 396,col 9)-(line 396,col 60)",
            "(line 397,col 9)-(line 397,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testClose()",
        "snippet": "    @Test(expected = NoSuchElementException.class)\n    public void testClose() throws Exception {\n        final Reader in = new StringReader(\"# comment\\na,b,c\\n1,2,3\\nx,y,z\");\n        final CSVParser parser = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in);\n        final Iterator<CSVRecord> records = parser.iterator();\n        assertTrue(records.hasNext());\n        parser.close();\n        assertFalse(records.hasNext());\n        records.next();\n    }",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 77)",
            "(line 403,col 9)-(line 403,col 96)",
            "(line 404,col 9)-(line 404,col 62)",
            "(line 405,col 9)-(line 405,col 38)",
            "(line 406,col 9)-(line 406,col 23)",
            "(line 407,col 9)-(line 407,col 39)",
            "(line 408,col 9)-(line 408,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()",
        "snippet": "    @Test\n    public void testCarriageReturnEndings() throws IOException {\n        final String code = \"foo\\rbaar,\\rhello,world\\r,kanu\";\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(4, records.size());\n    }",
        "begin_line": 411,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 61)",
            "(line 414,col 9)-(line 414,col 74)",
            "(line 415,col 9)-(line 415,col 60)",
            "(line 416,col 9)-(line 416,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()",
        "snippet": "    @Test\n    public void testLineFeedEndings() throws IOException {\n        final String code = \"foo\\nbaar,\\nhello,world\\n,kanu\";\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(4, records.size());\n    }",
        "begin_line": 419,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 421,col 9)-(line 421,col 61)",
            "(line 422,col 9)-(line 422,col 74)",
            "(line 423,col 9)-(line 423,col 60)",
            "(line 424,col 9)-(line 424,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()",
        "snippet": "    @Test\n    public void testIgnoreEmptyLines() throws IOException {\n        final String code = \"\\nfoo,baar\\n\\r\\n,\\n\\n,world\\r\\n\\n\";\n        //String code = \"world\\r\\n\\n\";\n        //String code = \"foo;baar\\r\\n\\r\\nhello;\\r\\n\\r\\nworld;\\r\\n\";\n        final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n        final List<CSVRecord> records = parser.getRecords();\n        assertEquals(3, records.size());\n    }",
        "begin_line": 427,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 64)",
            "(line 432,col 9)-(line 432,col 74)",
            "(line 433,col 9)-(line 433,col 60)",
            "(line 434,col 9)-(line 434,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testForEach()",
        "snippet": "    @Test\n    public void testForEach() throws Exception {\n        final List<CSVRecord> records = new ArrayList<CSVRecord>();\n\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n\n        for (final CSVRecord record : CSVFormat.DEFAULT.parse(in)) {\n            records.add(record);\n        }\n\n        assertEquals(3, records.size());\n        assertArrayEquals(new String[]{\"a\", \"b\", \"c\"}, records.get(0).values());\n        assertArrayEquals(new String[]{\"1\", \"2\", \"3\"}, records.get(1).values());\n        assertArrayEquals(new String[]{\"x\", \"y\", \"z\"}, records.get(2).values());\n    }",
        "begin_line": 437,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 67)",
            "(line 441,col 9)-(line 441,col 66)",
            "(line 443,col 9)-(line 445,col 9)",
            "(line 447,col 9)-(line 447,col 40)",
            "(line 448,col 9)-(line 448,col 80)",
            "(line 449,col 9)-(line 449,col 80)",
            "(line 450,col 9)-(line 450,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testRoundtrip()",
        "snippet": "    @Test\n    public void testRoundtrip() throws Exception {\n        final StringWriter out = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT);\n        final String input = \"a,b,c\\r\\n1,2,3\\r\\nx,y,z\\r\\n\";\n        for (final CSVRecord record : CSVParser.parse(input, CSVFormat.DEFAULT)) {\n            printer.printRecord(record);\n        }\n        assertEquals(input, out.toString());\n        printer.close();\n    }",
        "begin_line": 453,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 455,col 9)-(line 455,col 52)",
            "(line 456,col 9)-(line 456,col 74)",
            "(line 457,col 9)-(line 457,col 59)",
            "(line 458,col 9)-(line 460,col 9)",
            "(line 461,col 9)-(line 461,col 44)",
            "(line 462,col 9)-(line 462,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testIterator()",
        "snippet": "    @Test\n    public void testIterator() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n\n        final Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator();\n\n        assertTrue(iterator.hasNext());\n        try {\n            iterator.remove();\n            fail(\"expected UnsupportedOperationException\");\n        } catch (final UnsupportedOperationException expected) {\n            // expected\n        }\n        assertArrayEquals(new String[]{\"a\", \"b\", \"c\"}, iterator.next().values());\n        assertArrayEquals(new String[]{\"1\", \"2\", \"3\"}, iterator.next().values());\n        assertTrue(iterator.hasNext());\n        assertTrue(iterator.hasNext());\n        assertTrue(iterator.hasNext());\n        assertArrayEquals(new String[]{\"x\", \"y\", \"z\"}, iterator.next().values());\n        assertFalse(iterator.hasNext());\n\n        try {\n            iterator.next();\n            fail(\"NoSuchElementException expected\");\n        } catch (final NoSuchElementException e) {\n            // expected\n        }\n    }",
        "begin_line": 465,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 467,col 9)-(line 467,col 66)",
            "(line 469,col 9)-(line 469,col 84)",
            "(line 471,col 9)-(line 471,col 39)",
            "(line 472,col 9)-(line 477,col 9)",
            "(line 478,col 9)-(line 478,col 81)",
            "(line 479,col 9)-(line 479,col 81)",
            "(line 480,col 9)-(line 480,col 39)",
            "(line 481,col 9)-(line 481,col 39)",
            "(line 482,col 9)-(line 482,col 39)",
            "(line 483,col 9)-(line 483,col 81)",
            "(line 484,col 9)-(line 484,col 40)",
            "(line 486,col 9)-(line 491,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testMultipleIterators()",
        "snippet": "    @Test // TODO this may lead to strange behavior, throw an exception if iterator() has already been called?\n    public void testMultipleIterators() throws Exception {\n        CSVParser parser = CSVParser.parse(\"a,b,c\" + CR + \"d,e,f\", CSVFormat.DEFAULT);\n\n        Iterator<CSVRecord> itr1 = parser.iterator();\n        Iterator<CSVRecord> itr2 = parser.iterator();\n\n        CSVRecord first = itr1.next();\n        assertEquals(\"a\", first.get(0));\n        assertEquals(\"b\", first.get(1));\n        assertEquals(\"c\", first.get(2));\n\n        CSVRecord second = itr2.next();\n        assertEquals(\"d\", second.get(0));\n        assertEquals(\"e\", second.get(1));\n        assertEquals(\"f\", second.get(2));\n    }",
        "begin_line": 494,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 86)",
            "(line 498,col 9)-(line 498,col 53)",
            "(line 499,col 9)-(line 499,col 53)",
            "(line 501,col 9)-(line 501,col 38)",
            "(line 502,col 9)-(line 502,col 40)",
            "(line 503,col 9)-(line 503,col 40)",
            "(line 504,col 9)-(line 504,col 40)",
            "(line 506,col 9)-(line 506,col 39)",
            "(line 507,col 9)-(line 507,col 41)",
            "(line 508,col 9)-(line 508,col 41)",
            "(line 509,col 9)-(line 509,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testHeader()",
        "snippet": "    @Test\n    public void testHeader() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n\n        for (int i = 0; i < 2; i++) {\n            assertTrue(records.hasNext());\n            final CSVRecord record = records.next();\n            assertEquals(record.get(0), record.get(\"a\"));\n            assertEquals(record.get(1), record.get(\"b\"));\n            assertEquals(record.get(2), record.get(\"c\"));\n        }\n\n        assertFalse(records.hasNext());\n    }",
        "begin_line": 512,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 66)",
            "(line 516,col 9)-(line 516,col 96)",
            "(line 518,col 9)-(line 524,col 9)",
            "(line 526,col 9)-(line 526,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()",
        "snippet": "    @Test\n    public void testSkipSetHeader() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"a\", \"b\", \"c\").withSkipHeaderRecord(true)\n                .parse(in).iterator();\n        final CSVRecord record = records.next();\n        assertEquals(\"1\", record.get(\"a\"));\n        assertEquals(\"2\", record.get(\"b\"));\n        assertEquals(\"3\", record.get(\"c\"));\n    }",
        "begin_line": 529,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 66)",
            "(line 532,col 9)-(line 533,col 38)",
            "(line 534,col 9)-(line 534,col 48)",
            "(line 535,col 9)-(line 535,col 43)",
            "(line 536,col 9)-(line 536,col 43)",
            "(line 537,col 9)-(line 537,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()",
        "snippet": "    @Test\n    public void testSkipAutoHeader() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n        final CSVRecord record = records.next();\n        assertEquals(\"1\", record.get(\"a\"));\n        assertEquals(\"2\", record.get(\"b\"));\n        assertEquals(\"3\", record.get(\"c\"));\n    }",
        "begin_line": 540,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 542,col 9)-(line 542,col 66)",
            "(line 543,col 9)-(line 543,col 96)",
            "(line 544,col 9)-(line 544,col 48)",
            "(line 545,col 9)-(line 545,col 43)",
            "(line 546,col 9)-(line 546,col 43)",
            "(line 547,col 9)-(line 547,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testHeaderComment()",
        "snippet": "    @Test\n    public void testHeaderComment() throws Exception {\n        final Reader in = new StringReader(\"# comment\\na,b,c\\n1,2,3\\nx,y,z\");\n\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in).iterator();\n\n        for (int i = 0; i < 2; i++) {\n            assertTrue(records.hasNext());\n            final CSVRecord record = records.next();\n            assertEquals(record.get(0), record.get(\"a\"));\n            assertEquals(record.get(1), record.get(\"b\"));\n            assertEquals(record.get(2), record.get(\"c\"));\n        }\n\n        assertFalse(records.hasNext());\n    }",
        "begin_line": 550,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 77)",
            "(line 554,col 9)-(line 554,col 118)",
            "(line 556,col 9)-(line 562,col 9)",
            "(line 564,col 9)-(line 564,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testProvidedHeader()",
        "snippet": "    @Test\n    public void testProvidedHeader() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\").parse(in).iterator();\n\n        for (int i = 0; i < 3; i++) {\n            assertTrue(records.hasNext());\n            final CSVRecord record = records.next();\n            assertTrue(record.isMapped(\"A\"));\n            assertTrue(record.isMapped(\"B\"));\n            assertTrue(record.isMapped(\"C\"));\n            assertFalse(record.isMapped(\"NOT MAPPED\"));\n            assertEquals(record.get(0), record.get(\"A\"));\n            assertEquals(record.get(1), record.get(\"B\"));\n            assertEquals(record.get(2), record.get(\"C\"));\n        }\n\n        assertFalse(records.hasNext());\n    }",
        "begin_line": 567,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 569,col 9)-(line 569,col 66)",
            "(line 571,col 9)-(line 571,col 109)",
            "(line 573,col 9)-(line 583,col 9)",
            "(line 585,col 9)-(line 585,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()",
        "snippet": "    @Test\n    public void testProvidedHeaderAuto() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n\n        for (int i = 0; i < 2; i++) {\n            assertTrue(records.hasNext());\n            final CSVRecord record = records.next();\n            assertTrue(record.isMapped(\"a\"));\n            assertTrue(record.isMapped(\"b\"));\n            assertTrue(record.isMapped(\"c\"));\n            assertFalse(record.isMapped(\"NOT MAPPED\"));\n            assertEquals(record.get(0), record.get(\"a\"));\n            assertEquals(record.get(1), record.get(\"b\"));\n            assertEquals(record.get(2), record.get(\"c\"));\n        }\n\n        assertFalse(records.hasNext());\n    }",
        "begin_line": 588,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 66)",
            "(line 592,col 9)-(line 592,col 96)",
            "(line 594,col 9)-(line 604,col 9)",
            "(line 606,col 9)-(line 606,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()",
        "snippet": "    @Test\n    public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception {\n        final Reader in = new StringReader(\"a,b,c\\n1,2\\nx,y,z\");\n        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\").withSkipHeaderRecord(true)\n                .parse(in).iterator();\n        CSVRecord record;\n\n        // 1st record\n        record = records.next();\n        assertTrue(record.isMapped(\"A\"));\n        assertTrue(record.isMapped(\"B\"));\n        assertTrue(record.isMapped(\"C\"));\n        assertTrue(record.isSet(\"A\"));\n        assertTrue(record.isSet(\"B\"));\n        assertFalse(record.isSet(\"C\"));\n        assertEquals(\"1\", record.get(\"A\"));\n        assertEquals(\"2\", record.get(\"B\"));\n        assertFalse(record.isConsistent());\n\n        // 2nd record\n        record = records.next();\n        assertTrue(record.isMapped(\"A\"));\n        assertTrue(record.isMapped(\"B\"));\n        assertTrue(record.isMapped(\"C\"));\n        assertTrue(record.isSet(\"A\"));\n        assertTrue(record.isSet(\"B\"));\n        assertTrue(record.isSet(\"C\"));\n        assertEquals(\"x\", record.get(\"A\"));\n        assertEquals(\"y\", record.get(\"B\"));\n        assertEquals(\"z\", record.get(\"C\"));\n        assertTrue(record.isConsistent());\n\n        assertFalse(records.hasNext());\n    }",
        "begin_line": 609,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 64)",
            "(line 612,col 9)-(line 613,col 38)",
            "(line 614,col 9)-(line 614,col 25)",
            "(line 617,col 9)-(line 617,col 32)",
            "(line 618,col 9)-(line 618,col 41)",
            "(line 619,col 9)-(line 619,col 41)",
            "(line 620,col 9)-(line 620,col 41)",
            "(line 621,col 9)-(line 621,col 38)",
            "(line 622,col 9)-(line 622,col 38)",
            "(line 623,col 9)-(line 623,col 39)",
            "(line 624,col 9)-(line 624,col 43)",
            "(line 625,col 9)-(line 625,col 43)",
            "(line 626,col 9)-(line 626,col 43)",
            "(line 629,col 9)-(line 629,col 32)",
            "(line 630,col 9)-(line 630,col 41)",
            "(line 631,col 9)-(line 631,col 41)",
            "(line 632,col 9)-(line 632,col 41)",
            "(line 633,col 9)-(line 633,col 38)",
            "(line 634,col 9)-(line 634,col 38)",
            "(line 635,col 9)-(line 635,col 38)",
            "(line 636,col 9)-(line 636,col 43)",
            "(line 637,col 9)-(line 637,col 43)",
            "(line 638,col 9)-(line 638,col 43)",
            "(line 639,col 9)-(line 639,col 42)",
            "(line 641,col 9)-(line 641,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()",
        "snippet": "    @Test\n    public void testGetHeaderMap() throws Exception {\n        final CSVParser parser = CSVParser.parse(\"a,b,c\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\"));\n        final Map<String, Integer> headerMap = parser.getHeaderMap();\n        final Iterator<String> columnNames = headerMap.keySet().iterator();\n        // Headers are iterated in column order.\n        Assert.assertEquals(\"A\", columnNames.next());\n        Assert.assertEquals(\"B\", columnNames.next());\n        Assert.assertEquals(\"C\", columnNames.next());\n        final Iterator<CSVRecord> records = parser.iterator();\n\n        // Parse to make sure getHeaderMap did not have a side-effect.\n        for (int i = 0; i < 3; i++) {\n            assertTrue(records.hasNext());\n            final CSVRecord record = records.next();\n            assertEquals(record.get(0), record.get(\"A\"));\n            assertEquals(record.get(1), record.get(\"B\"));\n            assertEquals(record.get(2), record.get(\"C\"));\n        }\n\n        assertFalse(records.hasNext());\n    }",
        "begin_line": 644,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 646,col 9)-(line 646,col 117)",
            "(line 647,col 9)-(line 647,col 69)",
            "(line 648,col 9)-(line 648,col 75)",
            "(line 650,col 9)-(line 650,col 53)",
            "(line 651,col 9)-(line 651,col 53)",
            "(line 652,col 9)-(line 652,col 53)",
            "(line 653,col 9)-(line 653,col 62)",
            "(line 656,col 9)-(line 662,col 9)",
            "(line 664,col 9)-(line 664,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()",
        "snippet": "    @Test\n    public void testNoHeaderMap() throws Exception {\n        final CSVParser parser = CSVParser.parse(\"a,b,c\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT);\n        Assert.assertNull(parser.getHeaderMap());\n    }",
        "begin_line": 667,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 91)",
            "(line 670,col 9)-(line 670,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()",
        "snippet": "    @Test\n    public void testGetLineNumberWithLF() throws Exception {\n        this.validateLineNumbers(String.valueOf(LF));\n    }",
        "begin_line": 673,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 675,col 9)-(line 675,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()",
        "snippet": "    @Test\n    public void testGetLineNumberWithCRLF() throws Exception {\n        this.validateLineNumbers(CRLF);\n    }",
        "begin_line": 678,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()",
        "snippet": "    @Test\n    public void testGetLineNumberWithCR() throws Exception {\n        this.validateLineNumbers(String.valueOf(CR));\n    }",
        "begin_line": 683,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 685,col 9)-(line 685,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()",
        "snippet": "    @Test\n    public void testGetRecordNumberWithLF() throws Exception {\n        this.validateRecordNumbers(String.valueOf(LF));\n    }",
        "begin_line": 688,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 690,col 9)-(line 690,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()",
        "snippet": "    @Test\n    public void testGetRecordWithMultiLineValues() throws Exception {\n        final CSVParser parser = CSVParser.parse(\"\\\"a\\r\\n1\\\",\\\"a\\r\\n2\\\"\" + CRLF + \"\\\"b\\r\\n1\\\",\\\"b\\r\\n2\\\"\" + CRLF + \"\\\"c\\r\\n1\\\",\\\"c\\r\\n2\\\"\",\n                CSVFormat.DEFAULT.withRecordSeparator(CRLF));\n        CSVRecord record;\n        assertEquals(0, parser.getRecordNumber());\n        assertEquals(0, parser.getCurrentLineNumber());\n        assertNotNull(record = parser.nextRecord());\n        assertEquals(3, parser.getCurrentLineNumber());\n        assertEquals(1, record.getRecordNumber());\n        assertEquals(1, parser.getRecordNumber());\n        assertNotNull(record = parser.nextRecord());\n        assertEquals(6, parser.getCurrentLineNumber());\n        assertEquals(2, record.getRecordNumber());\n        assertEquals(2, parser.getRecordNumber());\n        assertNotNull(record = parser.nextRecord());\n        assertEquals(8, parser.getCurrentLineNumber());\n        assertEquals(3, record.getRecordNumber());\n        assertEquals(3, parser.getRecordNumber());\n        assertNull(record = parser.nextRecord());\n        assertEquals(8, parser.getCurrentLineNumber());\n        assertEquals(3, parser.getRecordNumber());\n    }",
        "begin_line": 693,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 695,col 9)-(line 696,col 61)",
            "(line 697,col 9)-(line 697,col 25)",
            "(line 698,col 9)-(line 698,col 50)",
            "(line 699,col 9)-(line 699,col 55)",
            "(line 700,col 9)-(line 700,col 52)",
            "(line 701,col 9)-(line 701,col 55)",
            "(line 702,col 9)-(line 702,col 50)",
            "(line 703,col 9)-(line 703,col 50)",
            "(line 704,col 9)-(line 704,col 52)",
            "(line 705,col 9)-(line 705,col 55)",
            "(line 706,col 9)-(line 706,col 50)",
            "(line 707,col 9)-(line 707,col 50)",
            "(line 708,col 9)-(line 708,col 52)",
            "(line 709,col 9)-(line 709,col 55)",
            "(line 710,col 9)-(line 710,col 50)",
            "(line 711,col 9)-(line 711,col 50)",
            "(line 712,col 9)-(line 712,col 49)",
            "(line 713,col 9)-(line 713,col 55)",
            "(line 714,col 9)-(line 714,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()",
        "snippet": "    @Test\n    public void testGetRecordNumberWithCRLF() throws Exception {\n        this.validateRecordNumbers(CRLF);\n    }",
        "begin_line": 717,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 719,col 9)-(line 719,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()",
        "snippet": "    @Test\n    public void testGetRecordNumberWithCR() throws Exception {\n        this.validateRecordNumbers(String.valueOf(CR));\n    }",
        "begin_line": 722,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 724,col 9)-(line 724,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testInvalidFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidFormat() throws Exception {\n        final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR);\n        new CSVParser(null, invalidFormat).close();\n    }",
        "begin_line": 727,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 729,col 9)-(line 729,col 76)",
            "(line 730,col 9)-(line 730,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParseNullFileFormat() throws Exception {\n        CSVParser.parse((File) null, CSVFormat.DEFAULT);\n    }",
        "begin_line": 733,
        "end_line": 736,
        "comment": "",
        "child_ranges": [
            "(line 735,col 9)-(line 735,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParseFileNullFormat() throws Exception {\n        CSVParser.parse(new File(\"\"), null);\n    }",
        "begin_line": 738,
        "end_line": 741,
        "comment": "",
        "child_ranges": [
            "(line 740,col 9)-(line 740,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParseNullStringFormat() throws Exception {\n        CSVParser.parse((String) null, CSVFormat.DEFAULT);\n    }",
        "begin_line": 743,
        "end_line": 746,
        "comment": "",
        "child_ranges": [
            "(line 745,col 9)-(line 745,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParseStringNullFormat() throws Exception {\n        CSVParser.parse(\"csv data\", null);\n    }",
        "begin_line": 748,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 750,col 9)-(line 750,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParseNullUrlCharsetFormat() throws Exception {\n        CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT);\n    }",
        "begin_line": 753,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 755,col 9)-(line 755,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParserUrlNullCharsetFormat() throws Exception {\n        CSVParser.parse(new URL(\"http://commons.apache.org\"), null, CSVFormat.DEFAULT);\n    }",
        "begin_line": 758,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 760,col 9)-(line 760,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testParseUrlCharsetNullFormat() throws Exception {\n        CSVParser.parse(new URL(\"http://commons.apache.org\"), Charset.defaultCharset(), null);\n    }",
        "begin_line": 763,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testNewCSVParserNullReaderFormat() throws Exception {\n        new CSVParser(null, CSVFormat.DEFAULT);\n    }",
        "begin_line": 768,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 770,col 9)-(line 770,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testNewCSVParserReaderNullFormat() throws Exception {\n        new CSVParser(new StringReader(\"\"), null);\n    }",
        "begin_line": 773,
        "end_line": 776,
        "comment": "",
        "child_ranges": [
            "(line 775,col 9)-(line 775,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(java.lang.String)",
        "snippet": "    private void validateRecordNumbers(final String lineSeparator) throws IOException {\n        final CSVParser parser = CSVParser.parse(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator));\n        CSVRecord record;\n        assertEquals(0, parser.getRecordNumber());\n        assertNotNull(record = parser.nextRecord());\n        assertEquals(1, record.getRecordNumber());\n        assertEquals(1, parser.getRecordNumber());\n        assertNotNull(record = parser.nextRecord());\n        assertEquals(2, record.getRecordNumber());\n        assertEquals(2, parser.getRecordNumber());\n        assertNotNull(record = parser.nextRecord());\n        assertEquals(3, record.getRecordNumber());\n        assertEquals(3, parser.getRecordNumber());\n        assertNull(record = parser.nextRecord());\n        assertEquals(3, parser.getRecordNumber());\n    }",
        "begin_line": 778,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 779,col 9)-(line 779,col 152)",
            "(line 780,col 9)-(line 780,col 25)",
            "(line 781,col 9)-(line 781,col 50)",
            "(line 782,col 9)-(line 782,col 52)",
            "(line 783,col 9)-(line 783,col 50)",
            "(line 784,col 9)-(line 784,col 50)",
            "(line 785,col 9)-(line 785,col 52)",
            "(line 786,col 9)-(line 786,col 50)",
            "(line 787,col 9)-(line 787,col 50)",
            "(line 788,col 9)-(line 788,col 52)",
            "(line 789,col 9)-(line 789,col 50)",
            "(line 790,col 9)-(line 790,col 50)",
            "(line 791,col 9)-(line 791,col 49)",
            "(line 792,col 9)-(line 792,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "signature": "org.apache.commons.csv.CSVParserTest.validateLineNumbers(java.lang.String)",
        "snippet": "    private void validateLineNumbers(final String lineSeparator) throws IOException {\n        final CSVParser parser = CSVParser.parse(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator));\n        assertEquals(0, parser.getCurrentLineNumber());\n        assertNotNull(parser.nextRecord());\n        assertEquals(1, parser.getCurrentLineNumber());\n        assertNotNull(parser.nextRecord());\n        assertEquals(2, parser.getCurrentLineNumber());\n        assertNotNull(parser.nextRecord());\n        // Still 2 because the last line is does not have EOL chars\n        assertEquals(2, parser.getCurrentLineNumber());\n        assertNull(parser.nextRecord());\n        // Still 2 because the last line is does not have EOL chars\n        assertEquals(2, parser.getCurrentLineNumber());\n    }",
        "begin_line": 795,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 152)",
            "(line 797,col 9)-(line 797,col 55)",
            "(line 798,col 9)-(line 798,col 43)",
            "(line 799,col 9)-(line 799,col 55)",
            "(line 800,col 9)-(line 800,col 43)",
            "(line 801,col 9)-(line 801,col 55)",
            "(line 802,col 9)-(line 802,col 43)",
            "(line 804,col 9)-(line 804,col 55)",
            "(line 805,col 9)-(line 805,col 40)",
            "(line 807,col 9)-(line 807,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.Utils",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/Utils.java",
        "signature": "org.apache.commons.csv.Utils.Utils()",
        "snippet": "    private Utils() {\n    }",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.csv.Utils",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/Utils.java",
        "signature": "org.apache.commons.csv.Utils.compare(java.lang.String, java.lang.String[][], java.util.List<org.apache.commons.csv.CSVRecord>)",
        "snippet": "    public static void compare(final String message, final String[][] expected, final List<CSVRecord> actual) {\n        Assert.assertEquals(message+\"  - outer array size\", expected.length, actual.size());\n        for(int i = 0; i < expected.length; i++) {\n            Assert.assertArrayEquals(message+\" (entry \"+i+\")\",expected[i], actual.get(i).values());\n        }\n    }",
        "begin_line": 42,
        "end_line": 47,
        "comment": "\n     * Checks if the 2d array has the same contents as the list of records.\n     *\n     * @param message the message to be displayed\n     * @param expected the 2d array of expected results\n     * @param actual the List of {@link CSVRecord} entries, each containing an array of values\n     ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 92)",
            "(line 44,col 9)-(line 46,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        values = new String[] { \"first\", \"second\", \"third\" };\n        record = new CSVRecord(values, null, null, 0);\n        header = new HashMap<String, Integer>();\n        header.put(\"first\", Integer.valueOf(0));\n        header.put(\"second\", Integer.valueOf(1));\n        header.put(\"third\", Integer.valueOf(2));\n        recordWithHeader = new CSVRecord(values, header, null, 0);\n    }",
        "begin_line": 38,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 61)",
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 48)",
            "(line 43,col 9)-(line 43,col 48)",
            "(line 44,col 9)-(line 44,col 49)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 46,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetInt()",
        "snippet": "    @Test\n    public void testGetInt() {\n        assertEquals(values[0], record.get(0));\n        assertEquals(values[1], record.get(1));\n        assertEquals(values[2], record.get(2));\n    }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 47)",
            "(line 52,col 9)-(line 52,col 47)",
            "(line 53,col 9)-(line 53,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetString()",
        "snippet": "    @Test\n    public void testGetString() {\n        assertEquals(values[0], recordWithHeader.get(\"first\"));\n        assertEquals(values[1], recordWithHeader.get(\"second\"));\n        assertEquals(values[2], recordWithHeader.get(\"third\"));\n    }",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 63)",
            "(line 59,col 9)-(line 59,col 64)",
            "(line 60,col 9)-(line 60,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testGetStringNoHeader() {\n        record.get(\"first\");\n    }",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testGetStringInconsistentRecord() {\n        header.put(\"fourth\", Integer.valueOf(4));\n        recordWithHeader.get(\"fourth\");\n    }",
        "begin_line": 68,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 49)",
            "(line 71,col 9)-(line 71,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testGetUnmappedName() {\n        assertNull(recordWithHeader.get(\"fourth\"));\n    }",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testGetUnmappedEnum() {\n        assertNull(recordWithHeader.get(EnumFixture.UNKNOWN_COLUMN));\n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()",
        "snippet": "    @Test(expected = ArrayIndexOutOfBoundsException.class)\n    public void testGetUnmappedNegativeInt() {\n        assertNull(recordWithHeader.get(Integer.MIN_VALUE));\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()",
        "snippet": "    @Test(expected = ArrayIndexOutOfBoundsException.class)\n    public void testGetUnmappedPositiveInt() {\n        assertNull(recordWithHeader.get(Integer.MAX_VALUE));\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testIsConsistent()",
        "snippet": "    @Test\n    public void testIsConsistent() {\n        assertTrue(record.isConsistent());\n        assertTrue(recordWithHeader.isConsistent());\n\n        header.put(\"fourth\", Integer.valueOf(4));\n        assertFalse(recordWithHeader.isConsistent());\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 52)",
            "(line 99,col 9)-(line 99,col 49)",
            "(line 100,col 9)-(line 100,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testIsMapped()",
        "snippet": "    @Test\n    public void testIsMapped() {\n        assertFalse(record.isMapped(\"first\"));\n        assertTrue(recordWithHeader.isMapped(\"first\"));\n        assertFalse(recordWithHeader.isMapped(\"fourth\"));\n    }",
        "begin_line": 103,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 46)",
            "(line 106,col 9)-(line 106,col 55)",
            "(line 107,col 9)-(line 107,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testIsSet()",
        "snippet": "    @Test\n    public void testIsSet() {\n        assertFalse(record.isSet(\"first\"));\n        assertTrue(recordWithHeader.isSet(\"first\"));\n        assertFalse(recordWithHeader.isSet(\"fourth\"));\n    }",
        "begin_line": 110,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 43)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVRecordTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
        "signature": "org.apache.commons.csv.CSVRecordTest.testIterator()",
        "snippet": "    @Test\n    public void testIterator() {\n        int i = 0;\n        for (String value : record) {\n            assertEquals(values[i], value);\n            i++;\n        }\n    }",
        "begin_line": 117,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 18)",
            "(line 120,col 9)-(line 123,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.AssertionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/AssertionsTest.java",
        "signature": "org.apache.commons.csv.AssertionsTest.testNotNull()",
        "snippet": "    @Test\n    public void testNotNull() throws Exception {\n        Assertions.notNull(new Object(), \"object\");\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.AssertionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/AssertionsTest.java",
        "signature": "org.apache.commons.csv.AssertionsTest.testNotNullNull()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testNotNullNull() throws Exception {\n        Assertions.notNull(null, \"object\");\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.main(java.lang.String[])",
        "snippet": "    public static void main(final String [] args) throws Exception {\n        if (BIG_FILE.exists()) {\n            System.out.println(String.format(\"Found test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));\n        } else {\n            System.out.println(\"Decompressing test fixture \" + BIG_FILE + \"...\");\n            final InputStream input = new GZIPInputStream(new FileInputStream(\"src/test/resources/perf/worldcitiespop.txt.gz\"));\n            final OutputStream output = new FileOutputStream(BIG_FILE);\n            IOUtils.copy(input, output);\n            System.out.println(String.format(\"Decompressed test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));\n        }\n        final int argc = args.length;\n        String tests[];\n        if (argc > 0) {\n            max=Integer.parseInt(args[0]);\n        }\n        if (argc > 1) {\n            tests = new String[argc-1];\n            for (int i = 1; i < argc; i++) {\n                tests[i-1]=args[i];\n            }\n        } else {\n            tests=new String[]{\"file\", \"split\", \"extb\", \"exts\", \"csv\", \"lexreset\", \"lexnew\"};\n        }\n        for(final String p : PROPS) {\n            System.out.println(p+\"=\"+System.getProperty(p));\n        }\n        System.out.println(\"Max count: \"+max+\"\\n\");\n\n        for(final String test : tests) {\n            if (\"file\".equals(test)) {\n                testReadBigFile(false);\n            } else if (\"split\".equals(test)) {\n                testReadBigFile(true);\n            } else if (\"csv\".equals(test)) {\n                testParseCommonsCSV();\n            } else if (\"lexreset\".equals(test)) {\n                testCSVLexer(false, test);\n            } else if (\"lexnew\".equals(test)) {\n                testCSVLexer(true, test);\n            } else if (test.startsWith(\"CSVLexer\")) {\n                testCSVLexer(false, test);\n            } else if (\"extb\".equals(test)) {\n                testExtendedBuffer(false);\n            } else if (\"exts\".equals(test)) {\n                testExtendedBuffer(true);\n            } else {\n                System.out.println(\"Invalid test name: \"+test);\n            }\n        }\n    }",
        "begin_line": 71,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 80,col 9)",
            "(line 81,col 9)-(line 81,col 37)",
            "(line 82,col 9)-(line 82,col 23)",
            "(line 83,col 9)-(line 85,col 9)",
            "(line 86,col 9)-(line 93,col 9)",
            "(line 94,col 9)-(line 96,col 9)",
            "(line 97,col 9)-(line 97,col 51)",
            "(line 99,col 9)-(line 119,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.getReader()",
        "snippet": "    private static BufferedReader getReader() throws IOException {\n        return new BufferedReader(new FileReader(BIG_FILE));\n    }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.Stats.Stats(int, int)",
        "snippet": "        Stats(final int c, final int f) {\n            count=c;\n            fields=f;\n        }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 131,col 13)-(line 131,col 20)",
            "(line 132,col 13)-(line 132,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.show(java.lang.String, org.apache.commons.csv.PerformanceTest.Stats, long)",
        "snippet": "    private static void show(final String msg, final Stats s, final long start) {\n        final long elapsed = System.currentTimeMillis() - start;\n        System.out.printf(\"%-20s: %5dms \" + s.count + \" lines \"+ s.fields + \" fields%n\",msg,elapsed);\n        elapsedTimes[num++]=elapsed;\n    }",
        "begin_line": 137,
        "end_line": 141,
        "comment": " Display end stats; store elapsed for average",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 64)",
            "(line 139,col 9)-(line 139,col 101)",
            "(line 140,col 9)-(line 140,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.show()",
        "snippet": "    private static void show(){\n        long tot = 0;\n        if (num > 1) {\n            for(int i=1; i < num; i++) { // skip first test\n                tot += elapsedTimes[i];\n            }\n            System.out.printf(\"%-20s: %5dms%n%n\", \"Average(not first)\", tot/(num-1));\n        }\n        num=0; // ready for next set\n    }",
        "begin_line": 144,
        "end_line": 153,
        "comment": " calculate and show average",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 21)",
            "(line 146,col 9)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)",
        "snippet": "    private static void testReadBigFile(final boolean split) throws Exception {\n       for (int i = 0; i < max; i++) {\n           final BufferedReader in = getReader();\n           final long t0 = System.currentTimeMillis();\n           final Stats s = readAll(in, split);\n           in.close();\n           show(split?\"file+split\":\"file\", s, t0);\n       }\n       show();\n   }",
        "begin_line": 155,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 156,col 8)-(line 162,col 8)",
            "(line 163,col 8)-(line 163,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.readAll(java.io.BufferedReader, boolean)",
        "snippet": "   private static Stats readAll(final BufferedReader in, final boolean split) throws IOException {\n       int count = 0;\n       int fields = 0;\n       String record;\n       while ((record=in.readLine()) != null) {\n           count++;\n           fields+= split ? record.split(\",\").length : 1;\n       }\n       return new Stats(count, fields);\n   }",
        "begin_line": 166,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 167,col 8)-(line 167,col 21)",
            "(line 168,col 8)-(line 168,col 22)",
            "(line 169,col 8)-(line 169,col 21)",
            "(line 170,col 8)-(line 173,col 8)",
            "(line 174,col 8)-(line 174,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)",
        "snippet": "   private static void testExtendedBuffer(final boolean makeString) throws Exception {\n       for (int i = 0; i < max; i++) {\n           final ExtendedBufferedReader in = new ExtendedBufferedReader(getReader());\n           final long t0 = System.currentTimeMillis();\n           int read;\n           int fields = 0;\n           int lines = 0;\n           if (makeString) {\n               StringBuilder sb = new StringBuilder();\n               while((read=in.read()) != -1) {\n                   sb.append((char)read);\n                   if (read == ',') { // count delimiters\n                       sb.toString();\n                       sb = new StringBuilder();\n                       fields++;\n                   } else if (read == '\\n') {\n                       sb.toString();\n                       sb = new StringBuilder();\n                       lines++;\n                   }\n               }\n           } else {\n               while((read=in.read()) != -1) {\n                   if (read == ',') { // count delimiters\n                       fields++;\n                   } else if (read == '\\n') {\n                       lines++;\n                   }\n               }\n           }\n           fields += lines; // EOL is a delimiter too\n           in.close();\n           show(\"Extended\"+(makeString?\" toString\":\"\"), new Stats(lines, fields), t0);\n       }\n       show();\n   }",
        "begin_line": 177,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 178,col 8)-(line 210,col 8)",
            "(line 211,col 8)-(line 211,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()",
        "snippet": "   private static void testParseCommonsCSV() throws Exception {\n       for (int i = 0; i < max; i++) {\n           final BufferedReader reader = getReader();\n           final CSVParser parser = new CSVParser(reader, format);\n           final long t0 = System.currentTimeMillis();\n           final Stats s = iterate(parser);\n           reader.close();\n           show(\"CSV\", s, t0);\n       }\n       show();\n   }",
        "begin_line": 214,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 215,col 8)-(line 222,col 8)",
            "(line 223,col 8)-(line 223,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.getLexerCtor(java.lang.String)",
        "snippet": "   private static Constructor<Lexer> getLexerCtor(final String clazz) throws Exception {\n       @SuppressWarnings(\"unchecked\")\n       final Class<Lexer> lexer = (Class<Lexer>) Class.forName(\"org.apache.commons.csv.\" + clazz);\n       return lexer.getConstructor(new Class<?>[]{CSVFormat.class, ExtendedBufferedReader.class});\n   }",
        "begin_line": 227,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 228,col 8)-(line 229,col 98)",
            "(line 230,col 8)-(line 230,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean, java.lang.String)",
        "snippet": "   private static void testCSVLexer(final boolean newToken, final String test) throws Exception {\n       Token token = new Token();\n       String dynamic = \"\";\n       for (int i = 0; i < max; i++) {\n           final ExtendedBufferedReader input = new ExtendedBufferedReader(getReader());\n           Lexer lexer = null;\n           if (test.startsWith(\"CSVLexer\")) {\n               dynamic=\"!\";\n               lexer = getLexerCtor(test).newInstance(new Object[]{format, input});\n           } else {\n               lexer = new Lexer(format, input);\n           }\n           int count = 0;\n           int fields = 0;\n           final long t0 = System.currentTimeMillis();\n           do {\n               if (newToken) {\n                   token = new Token();\n               } else {\n                   token.reset();\n               }\n               lexer.nextToken(token);\n               switch(token.type) {\n               case EOF:\n                   break;\n               case EORECORD:\n                   fields++;\n                   count++;\n                   break;\n               case INVALID:\n                   throw new IOException(\"invalid parse sequence <\"+token.content.toString()+\">\");\n               case TOKEN:\n                   fields++;\n                   break;\n                case COMMENT: // not really expecting these\n                    break;\n              }\n\n           } while (!token.type.equals(Token.Type.EOF));\n           final Stats s = new Stats(count, fields);\n           input.close();\n           show(lexer.getClass().getSimpleName()+dynamic+\" \"+(newToken ? \"new\" : \"reset\"), s, t0);\n       }\n       show();\n   }",
        "begin_line": 233,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 234,col 8)-(line 234,col 33)",
            "(line 235,col 8)-(line 235,col 27)",
            "(line 236,col 8)-(line 275,col 8)",
            "(line 276,col 8)-(line 276,col 14)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/PerformanceTest.java",
        "signature": "org.apache.commons.csv.PerformanceTest.iterate(java.lang.Iterable<org.apache.commons.csv.CSVRecord>)",
        "snippet": "   private static Stats iterate(final Iterable<CSVRecord> it) {\n       int count = 0;\n       int fields = 0;\n       for (final CSVRecord record : it) {\n           count++;\n           fields+=record.size();\n       }\n       return new Stats(count, fields);\n   }",
        "begin_line": 279,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 280,col 8)-(line 280,col 21)",
            "(line 281,col 8)-(line 281,col 22)",
            "(line 282,col 8)-(line 285,col 8)",
            "(line 286,col 8)-(line 286,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        formatWithEscaping = CSVFormat.DEFAULT.withEscape('\\\\');\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.getLexer(java.lang.String, org.apache.commons.csv.CSVFormat)",
        "snippet": "    private Lexer getLexer(final String input, final CSVFormat format) {\n        return new Lexer(format, new ExtendedBufferedReader(new StringReader(input)));\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()",
        "snippet": "    @Test\n    public void testSurroundingSpacesAreDeleted() throws IOException {\n        final String code = \"noSpaces,  leadingSpaces,trailingSpaces  ,  surroundingSpaces  ,  ,,\";\n        final Lexer parser = getLexer(code, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"noSpaces\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"leadingSpaces\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"trailingSpaces\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"surroundingSpaces\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n    }",
        "begin_line": 59,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 99)",
            "(line 62,col 9)-(line 62,col 97)",
            "(line 63,col 9)-(line 63,col 78)",
            "(line 64,col 9)-(line 64,col 83)",
            "(line 65,col 9)-(line 65,col 84)",
            "(line 66,col 9)-(line 66,col 87)",
            "(line 67,col 9)-(line 67,col 70)",
            "(line 68,col 9)-(line 68,col 70)",
            "(line 69,col 9)-(line 69,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()",
        "snippet": "    @Test\n    public void testSurroundingTabsAreDeleted() throws IOException {\n        final String code = \"noTabs,\\tleadingTab,trailingTab\\t,\\tsurroundingTabs\\t,\\t\\t,,\";\n        final Lexer parser = getLexer(code, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"noTabs\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"leadingTab\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"trailingTab\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"surroundingTabs\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n    }",
        "begin_line": 72,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 91)",
            "(line 75,col 9)-(line 75,col 97)",
            "(line 76,col 9)-(line 76,col 76)",
            "(line 77,col 9)-(line 77,col 80)",
            "(line 78,col 9)-(line 78,col 81)",
            "(line 79,col 9)-(line 79,col 85)",
            "(line 80,col 9)-(line 80,col 70)",
            "(line 81,col 9)-(line 81,col 70)",
            "(line 82,col 9)-(line 82,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()",
        "snippet": "    @Test\n    public void testIgnoreEmptyLines() throws IOException {\n        final String code =\n                \"first,line,\\n\"+\n                \"\\n\"+\n                \"\\n\"+\n                \"second,line\\n\"+\n                \"\\n\"+\n                \"\\n\"+\n                \"third line \\n\"+\n                \"\\n\"+\n                \"\\n\"+\n                \"last, line \\n\"+\n                \"\\n\"+\n                \"\\n\"+\n                \"\\n\";\n        final CSVFormat format = CSVFormat.DEFAULT.withIgnoreEmptyLines(true);\n        final Lexer parser = getLexer(code, format);\n\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"first\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"second\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"line\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"third line \"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"last\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \" line \"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n    }",
        "begin_line": 85,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 100,col 21)",
            "(line 101,col 9)-(line 101,col 78)",
            "(line 102,col 9)-(line 102,col 52)",
            "(line 104,col 9)-(line 104,col 75)",
            "(line 105,col 9)-(line 105,col 74)",
            "(line 106,col 9)-(line 106,col 73)",
            "(line 107,col 9)-(line 107,col 76)",
            "(line 108,col 9)-(line 108,col 77)",
            "(line 109,col 9)-(line 109,col 84)",
            "(line 110,col 9)-(line 110,col 74)",
            "(line 111,col 9)-(line 111,col 79)",
            "(line 112,col 9)-(line 112,col 68)",
            "(line 113,col 9)-(line 113,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testComments()",
        "snippet": "    @Test\n    public void testComments() throws IOException {\n        final String code =\n                \"first,line,\\n\"+\n                \"second,line,tokenWith#no-comment\\n\"+\n                \"# comment line \\n\"+\n                \"third,line,#no-comment\\n\"+\n                \"# penultimate comment\\n\"+\n                \"# Final comment\\n\";\n        final CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#');\n        final Lexer parser = getLexer(code, format);\n\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"first\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"second\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"tokenWith#no-comment\"));\n        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"comment line\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"third\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"line\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"#no-comment\"));\n        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"penultimate comment\"));\n        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"Final comment\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n    }",
        "begin_line": 116,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 124,col 36)",
            "(line 125,col 9)-(line 125,col 73)",
            "(line 126,col 9)-(line 126,col 52)",
            "(line 128,col 9)-(line 128,col 75)",
            "(line 129,col 9)-(line 129,col 74)",
            "(line 130,col 9)-(line 130,col 73)",
            "(line 131,col 9)-(line 131,col 76)",
            "(line 132,col 9)-(line 132,col 74)",
            "(line 133,col 9)-(line 133,col 93)",
            "(line 134,col 9)-(line 134,col 84)",
            "(line 135,col 9)-(line 135,col 75)",
            "(line 136,col 9)-(line 136,col 74)",
            "(line 137,col 9)-(line 137,col 84)",
            "(line 138,col 9)-(line 138,col 91)",
            "(line 139,col 9)-(line 139,col 85)",
            "(line 140,col 9)-(line 140,col 68)",
            "(line 141,col 9)-(line 141,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()",
        "snippet": "    @Test\n    public void testCommentsAndEmptyLines() throws IOException {\n        final String code =\n                \"1,2,3,\\n\"+                // 1\n                \"\\n\"+                      // 1b\n                \"\\n\"+                      // 1c\n                \"a,b x,c#no-comment\\n\"+    // 2\n                \"#foo\\n\"+                  // 3\n                \"\\n\"+                      // 4\n                \"\\n\"+                      // 4b\n                \"d,e,#no-comment\\n\"+       // 5\n                \"\\n\"+                      // 5b\n                \"\\n\"+                      // 5c\n                \"# penultimate comment\\n\"+ // 6\n                \"\\n\"+                      // 6b\n                \"\\n\"+                      // 6c\n                \"# Final comment\\n\";       // 7\n        final CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#').withIgnoreEmptyLines(false);\n        assertFalse(\"Should not ignore empty lines\", format.getIgnoreEmptyLines());\n\n        final Lexer parser = getLexer(code, format);\n\n\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"1\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"2\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"3\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1b\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 1c\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"b x\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"c#no-comment\")); // 2\n        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"foo\"));           // 3\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 4\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 4b\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"d\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"e\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"#no-comment\"));  // 5\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 5b\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 5c\n        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"penultimate comment\"));              // 6\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 6b\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"\"));             // 6c\n        assertThat(parser.nextToken(new Token()), matches(COMMENT, \"Final comment\"));              // 7\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n\n    }",
        "begin_line": 144,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 160,col 36)",
            "(line 161,col 9)-(line 161,col 101)",
            "(line 162,col 9)-(line 162,col 83)",
            "(line 164,col 9)-(line 164,col 52)",
            "(line 167,col 9)-(line 167,col 71)",
            "(line 168,col 9)-(line 168,col 71)",
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 73)",
            "(line 171,col 9)-(line 171,col 73)",
            "(line 172,col 9)-(line 172,col 73)",
            "(line 173,col 9)-(line 173,col 71)",
            "(line 174,col 9)-(line 174,col 73)",
            "(line 175,col 9)-(line 175,col 85)",
            "(line 176,col 9)-(line 176,col 75)",
            "(line 177,col 9)-(line 177,col 73)",
            "(line 178,col 9)-(line 178,col 73)",
            "(line 179,col 9)-(line 179,col 71)",
            "(line 180,col 9)-(line 180,col 71)",
            "(line 181,col 9)-(line 181,col 84)",
            "(line 182,col 9)-(line 182,col 73)",
            "(line 183,col 9)-(line 183,col 73)",
            "(line 184,col 9)-(line 184,col 91)",
            "(line 185,col 9)-(line 185,col 73)",
            "(line 186,col 9)-(line 186,col 73)",
            "(line 187,col 9)-(line 187,col 85)",
            "(line 188,col 9)-(line 188,col 68)",
            "(line 189,col 9)-(line 189,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()",
        "snippet": "    @Test\n    public void testBackslashWithoutEscaping() throws IOException {\n        /* file: a,\\,,b\n        *       \\,,\n        */\n        final String code = \"a,\\\\,,b\\\\\\n\\\\,,\";\n        final CSVFormat format = CSVFormat.DEFAULT;\n        assertFalse(format.isEscaping());\n        final Lexer parser = getLexer(code, format);\n\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        // an unquoted single backslash is not an escape char\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\\\\\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\\\\\"));\n        // an unquoted single backslash is not an escape char\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\\\\\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n    }",
        "begin_line": 194,
        "end_line": 213,
        "comment": " simple token with escaping not enabled",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 46)",
            "(line 200,col 9)-(line 200,col 51)",
            "(line 201,col 9)-(line 201,col 41)",
            "(line 202,col 9)-(line 202,col 52)",
            "(line 204,col 9)-(line 204,col 71)",
            "(line 206,col 9)-(line 206,col 72)",
            "(line 207,col 9)-(line 207,col 70)",
            "(line 208,col 9)-(line 208,col 76)",
            "(line 210,col 9)-(line 210,col 72)",
            "(line 211,col 9)-(line 211,col 70)",
            "(line 212,col 9)-(line 212,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()",
        "snippet": "    @Test\n    public void testBackslashWithEscaping() throws IOException {\n        /* file: a,\\,,b\n        *       \\,,\n        */\n        final String code = \"a,\\\\,,b\\\\\\\\\\n\\\\,,\\\\\\nc,d\\\\\\r\\ne\";\n        final CSVFormat format = formatWithEscaping.withIgnoreEmptyLines(false);\n        assertTrue(format.isEscaping());\n        final Lexer parser = getLexer(code, format);\n\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \",\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\\\\\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \",\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\\nc\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"d\\r\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"e\"));\n    }",
        "begin_line": 216,
        "end_line": 233,
        "comment": " simple token with escaping enabled",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 62)",
            "(line 222,col 9)-(line 222,col 80)",
            "(line 223,col 9)-(line 223,col 40)",
            "(line 224,col 9)-(line 224,col 52)",
            "(line 226,col 9)-(line 226,col 71)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 228,col 9)-(line 228,col 76)",
            "(line 229,col 9)-(line 229,col 71)",
            "(line 230,col 9)-(line 230,col 73)",
            "(line 231,col 9)-(line 231,col 76)",
            "(line 232,col 9)-(line 232,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testNextToken4()",
        "snippet": "    @Test\n    public void testNextToken4() throws IOException {\n        /* file:  a,\"foo\",b\n        *        a,   \" foo\",b\n        *        a,\"foo \"   ,b     // whitespace after closing encapsulator\n        *        a,  \" foo \" ,b\n        */\n        final String code = \"a,\\\"foo\\\",b\\na,   \\\" foo\\\",b\\na,\\\"foo \\\"  ,b\\na,  \\\" foo \\\"  ,b\";\n        final Lexer parser = getLexer(code, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"foo\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \" foo\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"foo \"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \" foo \"));\n//      assertTokenEquals(EORECORD, \"b\", parser.nextToken(new Token()));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"b\"));\n    }",
        "begin_line": 236,
        "end_line": 258,
        "comment": " encapsulator tokenizer (single line)",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 94)",
            "(line 244,col 9)-(line 244,col 97)",
            "(line 245,col 9)-(line 245,col 71)",
            "(line 246,col 9)-(line 246,col 73)",
            "(line 247,col 9)-(line 247,col 74)",
            "(line 248,col 9)-(line 248,col 71)",
            "(line 249,col 9)-(line 249,col 74)",
            "(line 250,col 9)-(line 250,col 74)",
            "(line 251,col 9)-(line 251,col 71)",
            "(line 252,col 9)-(line 252,col 74)",
            "(line 253,col 9)-(line 253,col 74)",
            "(line 254,col 9)-(line 254,col 71)",
            "(line 255,col 9)-(line 255,col 75)",
            "(line 257,col 9)-(line 257,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testNextToken5()",
        "snippet": "    @Test\n    public void testNextToken5() throws IOException {\n        final String code = \"a,\\\"foo\\n\\\",b\\n\\\"foo\\n  baar ,,,\\\"\\n\\\"\\n\\t \\n\\\"\";\n        final Lexer parser = getLexer(code, CSVFormat.DEFAULT);\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"foo\\n\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"foo\\n  baar ,,,\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"\\n\\t \\n\"));\n\n    }",
        "begin_line": 261,
        "end_line": 271,
        "comment": " encapsulator tokenizer (multi line, delimiter in string)",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 78)",
            "(line 264,col 9)-(line 264,col 63)",
            "(line 265,col 9)-(line 265,col 71)",
            "(line 266,col 9)-(line 266,col 75)",
            "(line 267,col 9)-(line 267,col 74)",
            "(line 268,col 9)-(line 268,col 88)",
            "(line 269,col 9)-(line 269,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testNextToken6()",
        "snippet": "    @Test\n    public void testNextToken6() throws IOException {\n        /* file: a;'b and \\' more\n        *       '\n        *       !comment;;;;\n        *       ;;\n        */\n        final String code = \"a;'b and '' more\\n'\\n!comment;;;;\\n;;\";\n        final CSVFormat format = CSVFormat.DEFAULT.withQuoteChar('\\'').withCommentStart('!').withDelimiter(';');\n        final Lexer parser = getLexer(code, format);\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"a\"));\n        assertThat(parser.nextToken(new Token()), matches(EORECORD, \"b and ' more\\n\"));\n    }",
        "begin_line": 274,
        "end_line": 286,
        "comment": " change delimiters, comment, encapsulater",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 68)",
            "(line 282,col 9)-(line 282,col 112)",
            "(line 283,col 9)-(line 283,col 52)",
            "(line 284,col 9)-(line 284,col 71)",
            "(line 285,col 9)-(line 285,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()",
        "snippet": "    @Test\n    public void testDelimiterIsWhitespace() throws IOException {\n        final String code = \"one\\ttwo\\t\\tfour \\t five\\t six\";\n        final Lexer parser = getLexer(code, CSVFormat.TDF);\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"one\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"two\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"four\"));\n        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"five\"));\n        assertThat(parser.nextToken(new Token()), matches(EOF, \"six\"));\n    }",
        "begin_line": 289,
        "end_line": 299,
        "comment": " From CSV-1",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 61)",
            "(line 292,col 9)-(line 292,col 59)",
            "(line 293,col 9)-(line 293,col 73)",
            "(line 294,col 9)-(line 294,col 73)",
            "(line 295,col 9)-(line 295,col 70)",
            "(line 296,col 9)-(line 296,col 74)",
            "(line 297,col 9)-(line 297,col 74)",
            "(line 298,col 9)-(line 298,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedCR()",
        "snippet": "    @Test\n    public void testEscapedCR() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\\" + CR + \"Escaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + CR + \"Escaped\"));\n    }",
        "begin_line": 301,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 89)",
            "(line 304,col 9)-(line 304,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testCR()",
        "snippet": "    @Test\n    public void testCR() throws Exception {\n        final Lexer lexer = getLexer(\"character\" + CR + \"NotEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\"));\n        assertThat(lexer.nextToken(new Token()), hasContent(\"NotEscaped\"));\n    }",
        "begin_line": 307,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 90)",
            "(line 310,col 9)-(line 310,col 74)",
            "(line 311,col 9)-(line 311,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedLF()",
        "snippet": "    @Test\n    public void testEscapedLF() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\\" + LF + \"Escaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + LF + \"Escaped\"));\n    }",
        "begin_line": 314,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 89)",
            "(line 317,col 9)-(line 317,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testLF()",
        "snippet": "    @Test\n    public void testLF() throws Exception {\n        final Lexer lexer = getLexer(\"character\" + LF + \"NotEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\"));\n        assertThat(lexer.nextToken(new Token()), hasContent(\"NotEscaped\"));\n    }",
        "begin_line": 320,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 90)",
            "(line 323,col 9)-(line 323,col 74)",
            "(line 324,col 9)-(line 324,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedTab()",
        "snippet": "    @Test // TODO is this correct? Do we expect <esc>TAB to be unescaped?\n    public void testEscapedTab() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\\" + TAB + \"Escaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + TAB + \"Escaped\"));\n    }",
        "begin_line": 327,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 90)",
            "(line 330,col 9)-(line 330,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testTab()",
        "snippet": "    @Test\n    public void testTab() throws Exception {\n        final Lexer lexer = getLexer(\"character\" + TAB + \"NotEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + TAB + \"NotEscaped\"));\n    }",
        "begin_line": 333,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 91)",
            "(line 336,col 9)-(line 336,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedBackspace()",
        "snippet": "    @Test // TODO is this correct? Do we expect <esc>BACKSPACE to be unescaped?\n    public void testEscapedBackspace() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\\" + BACKSPACE + \"Escaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + BACKSPACE + \"Escaped\"));\n    }",
        "begin_line": 339,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 96)",
            "(line 342,col 9)-(line 342,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testBackspace()",
        "snippet": "    @Test\n    public void testBackspace() throws Exception {\n        final Lexer lexer = getLexer(\"character\" + BACKSPACE + \"NotEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + BACKSPACE + \"NotEscaped\"));\n    }",
        "begin_line": 345,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 97)",
            "(line 348,col 9)-(line 348,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedFF()",
        "snippet": "    @Test // TODO is this correct? Do we expect <esc>FF to be unescaped?\n    public void testEscapedFF() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\\" + FF + \"Escaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + FF + \"Escaped\"));\n    }",
        "begin_line": 351,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 89)",
            "(line 354,col 9)-(line 354,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testFF()",
        "snippet": "    @Test\n    public void testFF() throws Exception {\n        final Lexer lexer = getLexer(\"character\" + FF + \"NotEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + FF + \"NotEscaped\"));\n    }",
        "begin_line": 357,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 90)",
            "(line 360,col 9)-(line 360,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()",
        "snippet": "    @Test\n    public void testEscapedMySqlNullValue() throws Exception {\n        // MySQL uses \\N to symbolize null values. We have to restore this\n        final Lexer lexer = getLexer(\"character\\\\NEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\\\\NEscaped\"));\n    }",
        "begin_line": 363,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 366,col 9)-(line 366,col 80)",
            "(line 367,col 9)-(line 367,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedCharacter()",
        "snippet": "    @Test\n    public void testEscapedCharacter() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\aEscaped\", formatWithEscaping);\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\\\\aEscaped\"));\n    }",
        "begin_line": 370,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 80)",
            "(line 373,col 9)-(line 373,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()",
        "snippet": "    @Test\n    public void testEscapedControlCharacter() throws Exception {\n        // we are explicitly using an escape different from \\ here\n        final Lexer lexer = getLexer(\"character!rEscaped\", CSVFormat.DEFAULT.withEscape('!'));\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + CR + \"Escaped\"));\n    }",
        "begin_line": 376,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 94)",
            "(line 380,col 9)-(line 380,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()",
        "snippet": "    @Test\n    public void testEscapedControlCharacter2() throws Exception {\n        final Lexer lexer = getLexer(\"character\\\\rEscaped\", CSVFormat.DEFAULT.withEscape('\\\\'));\n        assertThat(lexer.nextToken(new Token()), hasContent(\"character\" + CR + \"Escaped\"));\n    }",
        "begin_line": 383,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 96)",
            "(line 386,col 9)-(line 386,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.LexerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/LexerTest.java",
        "signature": "org.apache.commons.csv.LexerTest.testEscapingAtEOF()",
        "snippet": "    @Test(expected = IOException.class)\n    public void testEscapingAtEOF() throws Exception {\n        final String code = \"escaping at EOF is evil\\\\\";\n        final Lexer lexer = getLexer(code, formatWithEscaping);\n\n        lexer.nextToken(new Token());\n    }",
        "begin_line": 389,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 56)",
            "(line 392,col 9)-(line 392,col 63)",
            "(line 394,col 9)-(line 394,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.assertNotEquals(java.lang.Object, java.lang.Object)",
        "snippet": "    private static void assertNotEquals(final Object right, final Object left) {\n        assertFalse(right.equals(left));\n        assertFalse(left.equals(right));\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 40)",
            "(line 47,col 9)-(line 47,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testDelimiterSameAsCommentStartThrowsException() {\n        CSVFormat.DEFAULT.withDelimiter('!').withCommentStart('!').validate();\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testDelimiterSameAsEscapeThrowsException() {\n        CSVFormat.DEFAULT.withDelimiter('!').withEscape('!').validate();\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testDuplicateHeaderElements() {\n        CSVFormat.DEFAULT.withHeader(\"A\", \"A\").validate();\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEquals()",
        "snippet": "    @Test\n    public void testEquals() {\n        final CSVFormat right = CSVFormat.DEFAULT;\n        final CSVFormat left = copy(right);\n\n        assertFalse(right.equals(null));\n        assertFalse(right.equals(\"A String Instance\"));\n\n        assertEquals(right, right);\n        assertEquals(right, left);\n        assertEquals(left, right);\n\n        assertEquals(right.hashCode(), right.hashCode());\n        assertEquals(right.hashCode(), left.hashCode());\n    }",
        "begin_line": 65,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 43)",
            "(line 70,col 9)-(line 70,col 40)",
            "(line 71,col 9)-(line 71,col 55)",
            "(line 73,col 9)-(line 73,col 35)",
            "(line 74,col 9)-(line 74,col 34)",
            "(line 75,col 9)-(line 75,col 34)",
            "(line 77,col 9)-(line 77,col 57)",
            "(line 78,col 9)-(line 78,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()",
        "snippet": "    @Test\n    public void testEqualsCommentStart() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withQuoteChar('\"')\n                .withCommentStart('#')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withCommentStart('!');\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 81,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 86,col 44)",
            "(line 87,col 9)-(line 88,col 39)",
            "(line 90,col 9)-(line 90,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()",
        "snippet": "    @Test\n    public void testEqualsDelimiter() {\n        final CSVFormat right = CSVFormat.newFormat('!');\n        final CSVFormat left = CSVFormat.newFormat('?');\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 93,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 57)",
            "(line 96,col 9)-(line 96,col 56)",
            "(line 98,col 9)-(line 98,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()",
        "snippet": "    @Test\n    public void testEqualsEscape() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withQuoteChar('\"')\n                .withCommentStart('#')\n                .withEscape('+')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withEscape('!');\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 101,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 107,col 44)",
            "(line 108,col 9)-(line 109,col 33)",
            "(line 111,col 9)-(line 111,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()",
        "snippet": "    @Test\n    public void testEqualsHeader() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withRecordSeparator('*')\n                .withCommentStart('#')\n                .withEscape('+')\n                .withHeader(\"One\", \"Two\", \"Three\")\n                .withIgnoreEmptyLines(true)\n                .withIgnoreSurroundingSpaces(true)\n                .withQuoteChar('\"')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withHeader(\"Three\", \"Two\", \"One\");\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 114,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 124,col 44)",
            "(line 125,col 9)-(line 126,col 51)",
            "(line 128,col 9)-(line 128,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()",
        "snippet": "    @Test\n    public void testEqualsIgnoreEmptyLines() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withCommentStart('#')\n                .withEscape('+')\n                .withIgnoreEmptyLines(true)\n                .withIgnoreSurroundingSpaces(true)\n                .withQuoteChar('\"')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withIgnoreEmptyLines(false);\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 131,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 139,col 44)",
            "(line 140,col 9)-(line 141,col 45)",
            "(line 143,col 9)-(line 143,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()",
        "snippet": "    @Test\n    public void testEqualsIgnoreSurroundingSpaces() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withCommentStart('#')\n                .withEscape('+')\n                .withIgnoreSurroundingSpaces(true)\n                .withQuoteChar('\"')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withIgnoreSurroundingSpaces(false);\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 146,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 155,col 52)",
            "(line 157,col 9)-(line 157,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()",
        "snippet": "    @Test\n    public void testEqualsQuoteChar() {\n        final CSVFormat right = CSVFormat.newFormat('\\'').withQuoteChar('\"');\n        final CSVFormat left = right.withQuoteChar('!');\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 77)",
            "(line 163,col 9)-(line 163,col 56)",
            "(line 165,col 9)-(line 165,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()",
        "snippet": "    @Test\n    public void testEqualsQuotePolicy() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withQuoteChar('\"')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withQuotePolicy(Quote.MINIMAL);\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 168,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 172,col 44)",
            "(line 173,col 9)-(line 174,col 48)",
            "(line 176,col 9)-(line 176,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()",
        "snippet": "    @Test\n    public void testEqualsRecordSeparator() {\n        final CSVFormat right = CSVFormat.newFormat('\\'')\n                .withRecordSeparator('*')\n                .withCommentStart('#')\n                .withEscape('+')\n                .withIgnoreEmptyLines(true)\n                .withIgnoreSurroundingSpaces(true)\n                .withQuoteChar('\"')\n                .withQuotePolicy(Quote.ALL);\n        final CSVFormat left = right\n                .withRecordSeparator('!');\n\n        assertNotEquals(right, left);\n    }",
        "begin_line": 179,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 188,col 44)",
            "(line 189,col 9)-(line 190,col 42)",
            "(line 192,col 9)-(line 192,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testEscapeSameAsCommentStartThrowsException() {\n        CSVFormat.DEFAULT.withEscape('!').withCommentStart('!').validate();\n    }",
        "begin_line": 195,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testEscapeSameAsCommentStartThrowsExceptionForWrapperType() {\n        // Cannot assume that callers won't use different Character objects\n        CSVFormat.DEFAULT.withEscape(new Character('!')).withCommentStart(new Character('!')).validate();\n    }",
        "begin_line": 200,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testFormat()",
        "snippet": "    @Test\n    public void testFormat() {\n        final CSVFormat format = CSVFormat.DEFAULT;\n\n        assertEquals(\"\", format.format());\n        assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n        assertEquals(\"\\\"x,y\\\",z\", format.format(\"x,y\", \"z\"));\n    }",
        "begin_line": 206,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 51)",
            "(line 210,col 9)-(line 210,col 42)",
            "(line 211,col 9)-(line 211,col 60)",
            "(line 212,col 9)-(line 212,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testGetHeader()",
        "snippet": "    @Test\n    public void testGetHeader() throws Exception {\n        final String[] header = new String[]{\"one\", \"two\", \"three\"};\n        final CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header);\n        // getHeader() makes a copy of the header array.\n        final String[] headerCopy = formatWithHeader.getHeader();\n        headerCopy[0] = \"A\";\n        headerCopy[1] = \"B\";\n        headerCopy[2] = \"C\";\n        assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy));\n        assertNotSame(formatWithHeader.getHeader(), headerCopy);\n    }",
        "begin_line": 215,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 68)",
            "(line 218,col 9)-(line 218,col 80)",
            "(line 220,col 9)-(line 220,col 65)",
            "(line 221,col 9)-(line 221,col 28)",
            "(line 222,col 9)-(line 222,col 28)",
            "(line 223,col 9)-(line 223,col 28)",
            "(line 224,col 9)-(line 224,col 77)",
            "(line 225,col 9)-(line 225,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testQuoteCharSameAsCommentStartThrowsException() {\n        CSVFormat.DEFAULT.withQuoteChar('!').withCommentStart('!').validate();\n    }",
        "begin_line": 228,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType() {\n        // Cannot assume that callers won't use different Character objects\n        CSVFormat.DEFAULT.withQuoteChar(new Character('!')).withCommentStart('!').validate();\n    }",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testQuoteCharSameAsDelimiterThrowsException() {\n        CSVFormat.DEFAULT.withQuoteChar('!').withDelimiter('!').validate();\n    }",
        "begin_line": 239,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testQuotePolicyNoneWithoutEscapeThrowsException() {\n        CSVFormat.newFormat('!').withQuotePolicy(Quote.NONE).validate();\n    }",
        "begin_line": 244,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testRFC4180()",
        "snippet": "    @Test\n    public void testRFC4180() {\n        assertEquals(null, RFC4180.getCommentStart());\n        assertEquals(',', RFC4180.getDelimiter());\n        assertEquals(null, RFC4180.getEscape());\n        assertFalse(RFC4180.getIgnoreEmptyLines());\n        assertEquals(Character.valueOf('\"'), RFC4180.getQuoteChar());\n        assertEquals(null, RFC4180.getQuotePolicy());\n        assertEquals(\"\\r\\n\", RFC4180.getRecordSeparator());\n    }",
        "begin_line": 249,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 54)",
            "(line 252,col 9)-(line 252,col 50)",
            "(line 253,col 9)-(line 253,col 48)",
            "(line 254,col 9)-(line 254,col 51)",
            "(line 255,col 9)-(line 255,col 69)",
            "(line 256,col 9)-(line 256,col 53)",
            "(line 257,col 9)-(line 257,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testSerialization()",
        "snippet": "    @SuppressWarnings(\"boxing\") // no need to worry about boxing here\n    @Test\n    public void testSerialization() throws Exception {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n        final ObjectOutputStream oos = new ObjectOutputStream(out);\n        oos.writeObject(CSVFormat.DEFAULT);\n        oos.flush();\n        oos.close();\n\n        final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n        final CSVFormat format = (CSVFormat) in.readObject();\n\n        assertNotNull(format);\n        assertEquals(\"delimiter\", CSVFormat.DEFAULT.getDelimiter(), format.getDelimiter());\n        assertEquals(\"encapsulator\", CSVFormat.DEFAULT.getQuoteChar(), format.getQuoteChar());\n        assertEquals(\"comment start\", CSVFormat.DEFAULT.getCommentStart(), format.getCommentStart());\n        assertEquals(\"line separator\", CSVFormat.DEFAULT.getRecordSeparator(), format.getRecordSeparator());\n        assertEquals(\"escape\", CSVFormat.DEFAULT.getEscape(), format.getEscape());\n        assertEquals(\"trim\", CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces());\n        assertEquals(\"empty lines\", CSVFormat.DEFAULT.getIgnoreEmptyLines(), format.getIgnoreEmptyLines());\n    }",
        "begin_line": 260,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 70)",
            "(line 265,col 9)-(line 265,col 67)",
            "(line 266,col 9)-(line 266,col 43)",
            "(line 267,col 9)-(line 267,col 20)",
            "(line 268,col 9)-(line 268,col 20)",
            "(line 270,col 9)-(line 270,col 104)",
            "(line 271,col 9)-(line 271,col 61)",
            "(line 273,col 9)-(line 273,col 30)",
            "(line 274,col 9)-(line 274,col 91)",
            "(line 275,col 9)-(line 275,col 94)",
            "(line 276,col 9)-(line 276,col 101)",
            "(line 277,col 9)-(line 277,col 108)",
            "(line 278,col 9)-(line 278,col 82)",
            "(line 279,col 9)-(line 279,col 114)",
            "(line 280,col 9)-(line 280,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithCommentStart()",
        "snippet": "    @Test\n    public void testWithCommentStart() throws Exception {\n        final CSVFormat formatWithCommentStart = CSVFormat.DEFAULT.withCommentStart('#');\n        assertEquals( Character.valueOf('#'), formatWithCommentStart.getCommentStart());\n    }",
        "begin_line": 283,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 89)",
            "(line 286,col 9)-(line 286,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testWithCommentStartCRThrowsException() {\n        CSVFormat.DEFAULT.withCommentStart(CR).validate();\n    }",
        "begin_line": 289,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithDelimiter()",
        "snippet": "    @Test\n    public void testWithDelimiter() throws Exception {\n        final CSVFormat formatWithDelimiter = CSVFormat.DEFAULT.withDelimiter('!');\n        assertEquals('!', formatWithDelimiter.getDelimiter());\n    }",
        "begin_line": 294,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 83)",
            "(line 297,col 9)-(line 297,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testWithDelimiterLFThrowsException() {\n        CSVFormat.DEFAULT.withDelimiter(LF).validate();\n    }",
        "begin_line": 300,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithEscape()",
        "snippet": "    @Test\n    public void testWithEscape() throws Exception {\n        final CSVFormat formatWithEscape = CSVFormat.DEFAULT.withEscape('&');\n        assertEquals(Character.valueOf('&'), formatWithEscape.getEscape());\n    }",
        "begin_line": 305,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 77)",
            "(line 308,col 9)-(line 308,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testWithEscapeCRThrowsExceptions() {\n        CSVFormat.DEFAULT.withEscape(CR).validate();\n    }",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithHeader()",
        "snippet": "    @Test\n    public void testWithHeader() throws Exception {\n        final String[] header = new String[]{\"one\", \"two\", \"three\"};\n        // withHeader() makes a copy of the header array.\n        final CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header);\n        assertArrayEquals(header, formatWithHeader.getHeader());\n        assertNotSame(header, formatWithHeader.getHeader());\n        header[0] = \"A\";\n        header[1] = \"B\";\n        header[2] = \"C\";\n        assertFalse(Arrays.equals(formatWithHeader.getHeader(), header));\n    }",
        "begin_line": 316,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 68)",
            "(line 320,col 9)-(line 320,col 80)",
            "(line 321,col 9)-(line 321,col 64)",
            "(line 322,col 9)-(line 322,col 60)",
            "(line 323,col 9)-(line 323,col 24)",
            "(line 324,col 9)-(line 324,col 24)",
            "(line 325,col 9)-(line 325,col 24)",
            "(line 326,col 9)-(line 326,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()",
        "snippet": "    @Test\n    public void testWithIgnoreEmptyLines() throws Exception {\n        assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());\n        assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines());\n    }",
        "begin_line": 329,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 89)",
            "(line 332,col 9)-(line 332,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()",
        "snippet": "    @Test\n    public void testWithIgnoreSurround() throws Exception {\n        assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces());\n        assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true).getIgnoreSurroundingSpaces());\n    }",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 103)",
            "(line 338,col 9)-(line 338,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithNullString()",
        "snippet": "    @Test\n    public void testWithNullString() throws Exception {\n        final CSVFormat formatWithNullString = CSVFormat.DEFAULT.withNullString(\"null\");\n        assertEquals(\"null\", formatWithNullString.getNullString());\n    }",
        "begin_line": 341,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 88)",
            "(line 344,col 9)-(line 344,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()",
        "snippet": "    @Test\n    public void testWithQuoteChar() throws Exception {\n        final CSVFormat formatWithQuoteChar = CSVFormat.DEFAULT.withQuoteChar('\"');\n        assertEquals(Character.valueOf('\"'), formatWithQuoteChar.getQuoteChar());\n    }",
        "begin_line": 347,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 83)",
            "(line 350,col 9)-(line 350,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testWithQuoteLFThrowsException() {\n        CSVFormat.DEFAULT.withQuoteChar(LF).validate();\n    }",
        "begin_line": 353,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()",
        "snippet": "    @Test\n    public void testWithQuotePolicy() throws Exception {\n        final CSVFormat formatWithQuotePolicy = CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL);\n        assertEquals(Quote.ALL, formatWithQuotePolicy.getQuotePolicy());\n    }",
        "begin_line": 358,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 93)",
            "(line 361,col 9)-(line 361,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator()",
        "snippet": "    @Test\n    public void testWithRecordSeparator() throws Exception {\n        final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator('!');\n        assertEquals(\"!\", formatWithRecordSeparator.getRecordSeparator());\n    }",
        "begin_line": 364,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 366,col 9)-(line 366,col 95)",
            "(line 367,col 9)-(line 367,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
        "signature": "org.apache.commons.csv.CSVFormatTest.copy(org.apache.commons.csv.CSVFormat)",
        "snippet": "    private static CSVFormat copy(final CSVFormat format) {\n        return format.withDelimiter(format.getDelimiter());\n    }",
        "begin_line": 370,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.printable(java.lang.String)",
        "snippet": "    private static String printable(final String s) {\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            final char ch = s.charAt(i);\n            if (ch <= ' ' || ch >= 128) {\n                sb.append(\"(\").append((int) ch).append(\")\");\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }",
        "begin_line": 47,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 57,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.doOneRandom(org.apache.commons.csv.CSVFormat)",
        "snippet": "    private void doOneRandom(final CSVFormat format) throws Exception {\n        final Random r = new Random();\n\n        final int nLines = r.nextInt(4) + 1;\n        final int nCol = r.nextInt(3) + 1;\n        // nLines=1;nCol=2;\n        final String[][] lines = new String[nLines][];\n        for (int i = 0; i < nLines; i++) {\n            final String[] line = new String[nCol];\n            lines[i] = line;\n            for (int j = 0; j < nCol; j++) {\n                line[j] = randStr();\n            }\n        }\n\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, format);\n\n        for (int i = 0; i < nLines; i++) {\n            // for (int j=0; j<lines[i].length; j++) System.out.println(\"### VALUE=:\" + printable(lines[i][j]));\n            printer.printRecord((Object[])lines[i]);\n        }\n\n        printer.flush();\n        printer.close();\n        final String result = sw.toString();\n        // System.out.println(\"### :\" + printable(result));\n\n        final CSVParser parser = CSVParser.parse(result, format);\n        final List<CSVRecord> parseResult = parser.getRecords();\n\n        Utils.compare(\"Printer output :\" + printable(result), lines, parseResult);\n    }",
        "begin_line": 60,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 38)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 42)",
            "(line 66,col 9)-(line 66,col 54)",
            "(line 67,col 9)-(line 73,col 9)",
            "(line 75,col 9)-(line 75,col 51)",
            "(line 76,col 9)-(line 76,col 62)",
            "(line 78,col 9)-(line 81,col 9)",
            "(line 83,col 9)-(line 83,col 24)",
            "(line 84,col 9)-(line 84,col 24)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 64)",
            "(line 91,col 9)-(line 91,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.doRandom(org.apache.commons.csv.CSVFormat, int)",
        "snippet": "    private void doRandom(final CSVFormat format, final int iter) throws Exception {\n        for (int i = 0; i < iter; i++) {\n            doOneRandom(format);\n        }\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.randStr()",
        "snippet": "    private String randStr() {\n        final Random r = new Random();\n\n        final int sz = r.nextInt(20);\n        // sz = r.nextInt(3);\n        final char[] buf = new char[sz];\n        for (int i = 0; i < sz; i++) {\n            // stick in special chars with greater frequency\n            char ch;\n            final int what = r.nextInt(20);\n            switch (what) {\n                case 0:\n                    ch = '\\r';\n                    break;\n                case 1:\n                    ch = '\\n';\n                    break;\n                case 2:\n                    ch = '\\t';\n                    break;\n                case 3:\n                    ch = '\\f';\n                    break;\n                case 4:\n                    ch = ' ';\n                    break;\n                case 5:\n                    ch = ',';\n                    break;\n                case 6:\n                    ch = '\"';\n                    break;\n                case 7:\n                    ch = '\\'';\n                    break;\n                case 8:\n                    ch = '\\\\';\n                    break;\n                default:\n                    ch = (char) r.nextInt(300);\n                    break;\n                // default: ch = 'a'; break;\n            }\n            buf[i] = ch;\n        }\n        return new String(buf);\n    }",
        "begin_line": 100,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 38)",
            "(line 103,col 9)-(line 103,col 37)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 106,col 9)-(line 144,col 9)",
            "(line 145,col 9)-(line 145,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()",
        "snippet": "    @Test\n    public void testDisabledComment() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printComment(\"This is a comment\");\n\n        assertEquals(\"\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 148,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 73)",
            "(line 152,col 9)-(line 152,col 50)",
            "(line 154,col 9)-(line 154,col 40)",
            "(line 155,col 9)-(line 155,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()",
        "snippet": "    @Test\n    public void testExcelPrintAllArrayOfArrays() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n        printer.printRecords(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } });\n        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 158,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 51)",
            "(line 161,col 9)-(line 161,col 71)",
            "(line 162,col 9)-(line 162,col 88)",
            "(line 163,col 9)-(line 163,col 99)",
            "(line 164,col 9)-(line 164,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()",
        "snippet": "    @Test\n    public void testExcelPrintAllArrayOfLists() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n        printer.printRecords(new List[] { Arrays.asList(\"r1c1\", \"r1c2\"), Arrays.asList(\"r2c1\", \"r2c2\") });\n        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 167,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 71)",
            "(line 171,col 9)-(line 171,col 106)",
            "(line 172,col 9)-(line 172,col 99)",
            "(line 173,col 9)-(line 173,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()",
        "snippet": "    @Test\n    public void testExcelPrintAllIterableOfArrays() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n        printer.printRecords(Arrays.asList(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } }));\n        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 176,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 51)",
            "(line 179,col 9)-(line 179,col 71)",
            "(line 180,col 9)-(line 180,col 103)",
            "(line 181,col 9)-(line 181,col 99)",
            "(line 182,col 9)-(line 182,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()",
        "snippet": "    @Test\n    public void testExcelPrintAllIterableOfLists() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(\"r1c1\", \"r1c2\"),\n                Arrays.asList(\"r2c1\", \"r2c2\") }));\n        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 185,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 51)",
            "(line 188,col 9)-(line 188,col 71)",
            "(line 189,col 9)-(line 190,col 50)",
            "(line 191,col 9)-(line 191,col 99)",
            "(line 192,col 9)-(line 192,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()",
        "snippet": "    @Test\n    public void testExcelPrinter1() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n        printer.printRecord(\"a\", \"b\");\n        assertEquals(\"a,b\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 195,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 51)",
            "(line 198,col 9)-(line 198,col 71)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 61)",
            "(line 201,col 9)-(line 201,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()",
        "snippet": "    @Test\n    public void testExcelPrinter2() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n        printer.printRecord(\"a,b\", \"b\");\n        assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 204,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 51)",
            "(line 207,col 9)-(line 207,col 71)",
            "(line 208,col 9)-(line 208,col 40)",
            "(line 209,col 9)-(line 209,col 67)",
            "(line 210,col 9)-(line 210,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()",
        "snippet": "    @Test\n    public void testJdbcPrinter() throws IOException, ClassNotFoundException, SQLException {\n        final StringWriter sw = new StringWriter();\n        Class.forName(\"org.h2.Driver\");\n        final Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:my_test;\", \"sa\", \"\");\n        try {\n            final Statement stmt = connection.createStatement();\n            stmt.execute(\"CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))\");\n            stmt.execute(\"insert into TEST values(1, 'r1')\");\n            stmt.execute(\"insert into TEST values(2, 'r2')\");\n            final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n            printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n            assertEquals(\"1,r1\" + recordSeparator + \"2,r2\" + recordSeparator, sw.toString());\n            printer.close();\n        } finally {\n            connection.close();\n        }\n    }",
        "begin_line": 213,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 51)",
            "(line 216,col 9)-(line 216,col 39)",
            "(line 217,col 9)-(line 217,col 100)",
            "(line 218,col 9)-(line 229,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()",
        "snippet": "    @Test\n    public void testMultiLineComment() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n        printer.printComment(\"This is a comment\\non multiple lines\");\n\n        assertEquals(\"# This is a comment\" + recordSeparator + \"# on multiple lines\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 232,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 51)",
            "(line 235,col 9)-(line 235,col 95)",
            "(line 236,col 9)-(line 236,col 69)",
            "(line 238,col 9)-(line 238,col 119)",
            "(line 239,col 9)-(line 239,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter1()",
        "snippet": "    @Test\n    public void testPrinter1() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a\", \"b\");\n        assertEquals(\"a,b\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 242,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 51)",
            "(line 245,col 9)-(line 245,col 73)",
            "(line 246,col 9)-(line 246,col 38)",
            "(line 247,col 9)-(line 247,col 61)",
            "(line 248,col 9)-(line 248,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter2()",
        "snippet": "    @Test\n    public void testPrinter2() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a,b\", \"b\");\n        assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 251,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 51)",
            "(line 254,col 9)-(line 254,col 73)",
            "(line 255,col 9)-(line 255,col 40)",
            "(line 256,col 9)-(line 256,col 67)",
            "(line 257,col 9)-(line 257,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter3()",
        "snippet": "    @Test\n    public void testPrinter3() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a, b\", \"b \");\n        assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 260,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 51)",
            "(line 263,col 9)-(line 263,col 73)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 265,col 9)-(line 265,col 73)",
            "(line 266,col 9)-(line 266,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter4()",
        "snippet": "    @Test\n    public void testPrinter4() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a\", \"b\\\"c\");\n        assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 269,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 272,col 73)",
            "(line 273,col 9)-(line 273,col 41)",
            "(line 274,col 9)-(line 274,col 70)",
            "(line 275,col 9)-(line 275,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter5()",
        "snippet": "    @Test\n    public void testPrinter5() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a\", \"b\\nc\");\n        assertEquals(\"a,\\\"b\\nc\\\"\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 278,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 51)",
            "(line 281,col 9)-(line 281,col 73)",
            "(line 282,col 9)-(line 282,col 41)",
            "(line 283,col 9)-(line 283,col 68)",
            "(line 284,col 9)-(line 284,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter6()",
        "snippet": "    @Test\n    public void testPrinter6() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a\", \"b\\r\\nc\");\n        assertEquals(\"a,\\\"b\\r\\nc\\\"\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 287,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 51)",
            "(line 290,col 9)-(line 290,col 73)",
            "(line 291,col 9)-(line 291,col 43)",
            "(line 292,col 9)-(line 292,col 70)",
            "(line 293,col 9)-(line 293,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrinter7()",
        "snippet": "    @Test\n    public void testPrinter7() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a\", \"b\\\\c\");\n        assertEquals(\"a,b\\\\c\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 296,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 51)",
            "(line 299,col 9)-(line 299,col 73)",
            "(line 300,col 9)-(line 300,col 41)",
            "(line 301,col 9)-(line 301,col 64)",
            "(line 302,col 9)-(line 302,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()",
        "snippet": "    @Test\n    public void testPrintNullValues() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n        printer.printRecord(\"a\", null, \"b\");\n        assertEquals(\"a,,b\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 305,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 51)",
            "(line 308,col 9)-(line 308,col 73)",
            "(line 309,col 9)-(line 309,col 44)",
            "(line 310,col 9)-(line 310,col 62)",
            "(line 311,col 9)-(line 311,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()",
        "snippet": "    @Test\n    public void testPrintCustomNullValues() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withNullString(\"NULL\"));\n        printer.printRecord(\"a\", null, \"b\");\n        assertEquals(\"a,NULL,b\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 314,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 51)",
            "(line 317,col 9)-(line 317,col 96)",
            "(line 318,col 9)-(line 318,col 44)",
            "(line 319,col 9)-(line 319,col 66)",
            "(line 320,col 9)-(line 320,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()",
        "snippet": "    @Test\n    public void testParseCustomNullValues() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVFormat format = CSVFormat.DEFAULT.withNullString(\"NULL\");\n        final CSVPrinter printer = new CSVPrinter(sw, format);\n        printer.printRecord(\"a\", null, \"b\");\n        printer.close();\n        final String csvString = sw.toString();\n        assertEquals(\"a,NULL,b\" + recordSeparator, csvString);\n        final Iterable<CSVRecord> iterable = format.parse(new StringReader(csvString));\n        final Iterator<CSVRecord> iterator = iterable.iterator();\n        final CSVRecord record = iterator.next();\n        assertEquals(\"a\", record.get(0));\n        assertEquals(null, record.get(1));\n        assertEquals(\"b\", record.get(2));\n        assertFalse(iterator.hasNext());\n    }",
        "begin_line": 323,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 51)",
            "(line 326,col 9)-(line 326,col 74)",
            "(line 327,col 9)-(line 327,col 62)",
            "(line 328,col 9)-(line 328,col 44)",
            "(line 329,col 9)-(line 329,col 24)",
            "(line 330,col 9)-(line 330,col 47)",
            "(line 331,col 9)-(line 331,col 62)",
            "(line 332,col 9)-(line 332,col 87)",
            "(line 333,col 9)-(line 333,col 65)",
            "(line 334,col 9)-(line 334,col 49)",
            "(line 335,col 9)-(line 335,col 41)",
            "(line 336,col 9)-(line 336,col 42)",
            "(line 337,col 9)-(line 337,col 41)",
            "(line 338,col 9)-(line 338,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()",
        "snippet": "    @Test\n    public void testQuoteAll() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));\n        printer.printRecord(\"a\", \"b\\nc\", \"d\");\n        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 341,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 51)",
            "(line 344,col 9)-(line 344,col 100)",
            "(line 345,col 9)-(line 345,col 46)",
            "(line 346,col 9)-(line 346,col 78)",
            "(line 347,col 9)-(line 347,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()",
        "snippet": "    @Test\n    public void testQuoteNonNumeric() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.NON_NUMERIC));\n        printer.printRecord(\"a\", \"b\\nc\", Integer.valueOf(1));\n        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",1\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 350,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 51)",
            "(line 353,col 9)-(line 353,col 108)",
            "(line 354,col 9)-(line 354,col 61)",
            "(line 355,col 9)-(line 355,col 74)",
            "(line 356,col 9)-(line 356,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testRandom()",
        "snippet": "    @Test\n    public void testRandom() throws Exception {\n        final int iter = 10000;\n        doRandom(CSVFormat.DEFAULT, iter);\n        doRandom(CSVFormat.EXCEL, iter);\n        doRandom(CSVFormat.MYSQL, iter);\n    }",
        "begin_line": 359,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 361,col 9)-(line 361,col 31)",
            "(line 362,col 9)-(line 362,col 42)",
            "(line 363,col 9)-(line 363,col 40)",
            "(line 364,col 9)-(line 364,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()",
        "snippet": "    @Test\n    public void testPlainQuoted() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\\''));\n        printer.print(\"abc\");\n        assertEquals(\"abc\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 367,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 51)",
            "(line 370,col 9)-(line 370,col 93)",
            "(line 371,col 9)-(line 371,col 29)",
            "(line 372,col 9)-(line 372,col 43)",
            "(line 373,col 9)-(line 373,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()",
        "snippet": "    @Test\n    public void testSingleLineComment() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n        printer.printComment(\"This is a comment\");\n\n        assertEquals(\"# This is a comment\" + recordSeparator, sw.toString());\n        printer.close();\n    }",
        "begin_line": 376,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 51)",
            "(line 379,col 9)-(line 379,col 95)",
            "(line 380,col 9)-(line 380,col 50)",
            "(line 382,col 9)-(line 382,col 77)",
            "(line 383,col 9)-(line 383,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()",
        "snippet": "    @Test\n    public void testSingleQuoteQuoted() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\\''));\n        printer.print(\"a'b'c\");\n        printer.print(\"xyz\");\n        assertEquals(\"'a''b''c',xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 386,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 51)",
            "(line 389,col 9)-(line 389,col 93)",
            "(line 390,col 9)-(line 390,col 31)",
            "(line 391,col 9)-(line 391,col 29)",
            "(line 392,col 9)-(line 392,col 53)",
            "(line 393,col 9)-(line 393,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()",
        "snippet": "    @Test\n    public void testDelimeterQuoted() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\\''));\n        printer.print(\"a,b,c\");\n        printer.print(\"xyz\");\n        assertEquals(\"'a,b,c',xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 396,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 51)",
            "(line 399,col 9)-(line 399,col 93)",
            "(line 400,col 9)-(line 400,col 31)",
            "(line 401,col 9)-(line 401,col 29)",
            "(line 402,col 9)-(line 402,col 51)",
            "(line 403,col 9)-(line 403,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE()",
        "snippet": "    @Test\n    public void testDelimeterQuoteNONE() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVFormat format = CSVFormat.DEFAULT.withEscape('!').withQuotePolicy(Quote.NONE);\n        final CSVPrinter printer = new CSVPrinter(sw, format);\n        printer.print(\"a,b,c\");\n        printer.print(\"xyz\");\n        assertEquals(\"a!,b!,c,xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 406,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 51)",
            "(line 409,col 9)-(line 409,col 95)",
            "(line 410,col 9)-(line 410,col 62)",
            "(line 411,col 9)-(line 411,col 31)",
            "(line 412,col 9)-(line 412,col 29)",
            "(line 413,col 9)-(line 413,col 51)",
            "(line 414,col 9)-(line 414,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testEOLQuoted()",
        "snippet": "    @Test\n    public void testEOLQuoted() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar('\\''));\n        printer.print(\"a\\rb\\nc\");\n        printer.print(\"x\\by\\fz\");\n        assertEquals(\"'a\\rb\\nc',x\\by\\fz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 417,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 51)",
            "(line 420,col 9)-(line 420,col 93)",
            "(line 421,col 9)-(line 421,col 33)",
            "(line 422,col 9)-(line 422,col 33)",
            "(line 423,col 9)-(line 423,col 57)",
            "(line 424,col 9)-(line 424,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()",
        "snippet": "    @Test\n    public void testPlainEscaped() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null).withEscape('!'));\n        printer.print(\"abc\");\n        printer.print(\"xyz\");\n        assertEquals(\"abc,xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 427,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 51)",
            "(line 430,col 9)-(line 430,col 109)",
            "(line 431,col 9)-(line 431,col 29)",
            "(line 432,col 9)-(line 432,col 29)",
            "(line 433,col 9)-(line 433,col 47)",
            "(line 434,col 9)-(line 434,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()",
        "snippet": "    @Test\n    public void testDelimiterEscaped() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape('!').withQuoteChar(null));\n        printer.print(\"a,b,c\");\n        printer.print(\"xyz\");\n        assertEquals(\"a!,b!,c,xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 51)",
            "(line 440,col 9)-(line 440,col 109)",
            "(line 441,col 9)-(line 441,col 31)",
            "(line 442,col 9)-(line 442,col 29)",
            "(line 443,col 9)-(line 443,col 51)",
            "(line 444,col 9)-(line 444,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testEOLEscaped()",
        "snippet": "    @Test\n    public void testEOLEscaped() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null).withEscape('!'));\n        printer.print(\"a\\rb\\nc\");\n        printer.print(\"x\\fy\\bz\");\n        assertEquals(\"a!rb!nc,x\\fy\\bz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 447,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 51)",
            "(line 450,col 9)-(line 450,col 109)",
            "(line 451,col 9)-(line 451,col 33)",
            "(line 452,col 9)-(line 452,col 33)",
            "(line 453,col 9)-(line 453,col 55)",
            "(line 454,col 9)-(line 454,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()",
        "snippet": "    @Test\n    public void testPlainPlain() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null));\n        printer.print(\"abc\");\n        printer.print(\"xyz\");\n        assertEquals(\"abc,xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 457,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 51)",
            "(line 460,col 9)-(line 460,col 93)",
            "(line 461,col 9)-(line 461,col 29)",
            "(line 462,col 9)-(line 462,col 29)",
            "(line 463,col 9)-(line 463,col 47)",
            "(line 464,col 9)-(line 464,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()",
        "snippet": "    @Test\n    public void testDelimiterPlain() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null));\n        printer.print(\"a,b,c\");\n        printer.print(\"xyz\");\n        assertEquals(\"a,b,c,xyz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 467,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 51)",
            "(line 470,col 9)-(line 470,col 93)",
            "(line 471,col 9)-(line 471,col 31)",
            "(line 472,col 9)-(line 472,col 29)",
            "(line 473,col 9)-(line 473,col 49)",
            "(line 474,col 9)-(line 474,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testEOLPlain()",
        "snippet": "    @Test\n    public void testEOLPlain() throws IOException {\n        final StringWriter sw = new StringWriter();\n        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null));\n        printer.print(\"a\\rb\\nc\");\n        printer.print(\"x\\fy\\bz\");\n        assertEquals(\"a\\rb\\nc,x\\fy\\bz\", sw.toString());\n        printer.close();\n    }",
        "begin_line": 477,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 51)",
            "(line 480,col 9)-(line 480,col 93)",
            "(line 481,col 9)-(line 481,col 33)",
            "(line 482,col 9)-(line 482,col 33)",
            "(line 483,col 9)-(line 483,col 55)",
            "(line 484,col 9)-(line 484,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidFormat() throws Exception {\n        final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR);\n        new CSVPrinter(new StringWriter(), invalidFormat).close();\n    }",
        "begin_line": 487,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 76)",
            "(line 490,col 9)-(line 490,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testNewCSVPrinterNullAppendableFormat() throws Exception {\n        new CSVPrinter(null, CSVFormat.DEFAULT);\n    }",
        "begin_line": 493,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 495,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.CSVPrinterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "signature": "org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testNewCsvPrinterAppendableNullFormat() throws Exception {\n        new CSVPrinter(new StringWriter(), null);\n    }",
        "begin_line": 498,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 500,col 9)-(line 500,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.setUpClass()",
        "snippet": "    @BeforeClass\n    public static void setUpClass() throws FileNotFoundException, IOException {\n        if (BIG_FILE.exists()) {\n            System.out.println(String.format(\"Found test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));\n            return;\n        }\n        System.out.println(\"Decompressing test fixture \" + BIG_FILE + \"...\");\n        final InputStream input = new GZIPInputStream(new FileInputStream(\"src/test/resources/perf/worldcitiespop.txt.gz\"));\n        final OutputStream output = new FileOutputStream(BIG_FILE);\n        IOUtils.copy(input, output);\n        System.out.println(String.format(\"Decompressed test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));\n    }",
        "begin_line": 51,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 57,col 77)",
            "(line 58,col 9)-(line 58,col 124)",
            "(line 59,col 9)-(line 59,col 67)",
            "(line 60,col 9)-(line 60,col 36)",
            "(line 61,col 9)-(line 61,col 115)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.getBufferedReader()",
        "snippet": "    private BufferedReader getBufferedReader() throws IOException {\n        return new BufferedReader(new FileReader(BIG_FILE));\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.parse(java.io.Reader, boolean)",
        "snippet": "    private long parse(final Reader in, final boolean traverseColumns) throws IOException {\n        final CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false);\n        long recordCount = 0;\n        for (final CSVRecord record : format.parse(in)) {\n            recordCount++;\n            if (traverseColumns) {\n                for (final String value : record) {\n                    // do nothing for now\n                }\n            }\n        }\n        return recordCount;\n    }",
        "begin_line": 68,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 86)",
            "(line 70,col 9)-(line 70,col 29)",
            "(line 71,col 9)-(line 78,col 9)",
            "(line 79,col 9)-(line 79,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.println(java.lang.String)",
        "snippet": "    private void println(final String s) {\n        System.out.println(s);\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.readAll(java.io.BufferedReader)",
        "snippet": "    private long readAll(final BufferedReader in) throws IOException {\n        long count = 0;\n        while (in.readLine() != null) {\n            count++;\n        }\n        return count;\n    }",
        "begin_line": 86,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 23)",
            "(line 88,col 9)-(line 90,col 9)",
            "(line 91,col 9)-(line 91,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)",
        "snippet": "    public long testParseBigFile(final boolean traverseColumns) throws Exception {\n        final long startMillis = System.currentTimeMillis();\n        final long count = this.parse(this.getBufferedReader(), traverseColumns);\n        final long totalMillis = System.currentTimeMillis() - startMillis;\n        this.println(String.format(\"File parsed in %,d milliseconds with Commons CSV: %,d lines.\", totalMillis, count));\n        return totalMillis;\n    }",
        "begin_line": 94,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 60)",
            "(line 96,col 9)-(line 96,col 81)",
            "(line 97,col 9)-(line 97,col 74)",
            "(line 98,col 9)-(line 98,col 120)",
            "(line 99,col 9)-(line 99,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()",
        "snippet": "    @Test\n    public void testParseBigFileRepeat() throws Exception {\n        long bestTime = Long.MAX_VALUE;\n        for (int i = 0; i < this.max; i++) {\n            bestTime = Math.min(this.testParseBigFile(false), bestTime);\n        }\n        this.println(String.format(\"Best time out of %,d is %,d milliseconds.\", this.max, bestTime));\n    }",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 39)",
            "(line 105,col 9)-(line 107,col 9)",
            "(line 108,col 9)-(line 108,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.csv.perf.PerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/csv/perf/PerformanceTest.java",
        "signature": "org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()",
        "snippet": "    @Test\n    public void testReadBigFile() throws Exception {\n        long bestTime = Long.MAX_VALUE;\n        for (int i = 0; i < this.max; i++) {\n            final BufferedReader in = this.getBufferedReader();\n            final long startMillis = System.currentTimeMillis();\n            long count = 0;\n            try {\n                count = this.readAll(in);\n            } finally {\n                in.close();\n            }\n            final long totalMillis = System.currentTimeMillis() - startMillis;\n            bestTime = Math.min(totalMillis, bestTime);\n            this.println(String.format(\"File read in %,d milliseconds: %,d lines.\", totalMillis, count));\n        }\n        this.println(String.format(\"Best time out of %,d is %,d milliseconds.\", this.max, bestTime));\n    }",
        "begin_line": 111,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 127,col 101)"
        ]
    }
]