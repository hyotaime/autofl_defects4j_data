[
    {
        "class_name": "org.mockitointegration.NoJUnitDependenciesTest",
        "child_classes": [],
        "src_path": "test/org/mockitointegration/NoJUnitDependenciesTest.java",
        "signature": "org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit___ByteBuddy()",
        "snippet": "    @Test\n    public void pure_mockito_should_not_depend_JUnit___ByteBuddy() throws Exception {\n        Assume.assumeTrue(\"ByteBuddyMockMaker\".equals(Plugins.getMockMaker().getClass().getSimpleName()));\n\n        ClassLoader classLoader_without_JUnit = ClassLoaders.excludingClassLoader()\n                .withCodeSourceUrlOf(\n                        Mockito.class,\n                        Matcher.class,\n                        ByteBuddy.class,\n                        Objenesis.class\n                )\n                .without(\"junit\", \"org.junit\")\n                .build();\n\n        Set<String> pureMockitoAPIClasses = ClassLoaders.in(classLoader_without_JUnit).omit(\"runners\", \"junit\", \"JUnit\").listOwnedClasses();\n\n        for (String pureMockitoAPIClass : pureMockitoAPIClasses) {\n            checkDependency(classLoader_without_JUnit, pureMockitoAPIClass);\n        }\n    }",
        "begin_line": 15,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 106)",
            "(line 19,col 9)-(line 27,col 25)",
            "(line 29,col 9)-(line 29,col 140)",
            "(line 31,col 9)-(line 33,col 9)"
        ]
    },
    {
        "class_name": "org.mockitointegration.NoJUnitDependenciesTest",
        "child_classes": [],
        "src_path": "test/org/mockitointegration/NoJUnitDependenciesTest.java",
        "signature": "org.mockitointegration.NoJUnitDependenciesTest.checkDependency(java.lang.ClassLoader, java.lang.String)",
        "snippet": "    private void checkDependency(ClassLoader classLoader_without_JUnit, String pureMockitoAPIClass) throws ClassNotFoundException {\n        try {\n            Class.forName(pureMockitoAPIClass, true, classLoader_without_JUnit);\n        } catch (Throwable e) {\n            throw new AssertionError(String.format(\"'%s' has some dependency to JUnit\", pureMockitoAPIClass), e);\n        }\n    }",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 41,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.booleanReturningMethod()",
        "snippet": "    boolean booleanReturningMethod();",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.booleanObjectReturningMethod()",
        "snippet": "    Boolean booleanObjectReturningMethod();",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.byteReturningMethod()",
        "snippet": "    byte byteReturningMethod();",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.byteObjectReturningMethod()",
        "snippet": "    Byte byteObjectReturningMethod();",
        "begin_line": 23,
        "end_line": 23,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.shortReturningMethod()",
        "snippet": "    short shortReturningMethod();",
        "begin_line": 25,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.shortObjectReturningMethod()",
        "snippet": "    Short shortObjectReturningMethod();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.charReturningMethod()",
        "snippet": "    char charReturningMethod();",
        "begin_line": 29,
        "end_line": 29,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.charObjectReturningMethod()",
        "snippet": "    Character charObjectReturningMethod();",
        "begin_line": 31,
        "end_line": 31,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.intReturningMethod()",
        "snippet": "    int intReturningMethod();",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.integerReturningMethod()",
        "snippet": "    Integer integerReturningMethod();",
        "begin_line": 35,
        "end_line": 35,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.longReturningMethod()",
        "snippet": "    long longReturningMethod();",
        "begin_line": 37,
        "end_line": 37,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.longObjectReturningMethod()",
        "snippet": "    Long longObjectReturningMethod();",
        "begin_line": 39,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.floatReturningMethod()",
        "snippet": "    float floatReturningMethod();",
        "begin_line": 41,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.floatObjectReturningMethod()",
        "snippet": "    Float floatObjectReturningMethod();",
        "begin_line": 43,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.doubleReturningMethod()",
        "snippet": "    double doubleReturningMethod();",
        "begin_line": 45,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.doubleObjectReturningMethod()",
        "snippet": "    Double doubleObjectReturningMethod();",
        "begin_line": 47,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.objectReturningMethod(java.lang.Object...)",
        "snippet": "    Object objectReturningMethod(Object ... objects);",
        "begin_line": 49,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.objectReturningMethodNoArgs()",
        "snippet": "    Object objectReturningMethodNoArgs();",
        "begin_line": 51,
        "end_line": 51,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(boolean)",
        "snippet": "    String oneArg(boolean value);",
        "begin_line": 53,
        "end_line": 53,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Boolean)",
        "snippet": "    String oneArg(Boolean value);",
        "begin_line": 55,
        "end_line": 55,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forBoolean(java.lang.Boolean)",
        "snippet": "    String forBoolean(Boolean value);",
        "begin_line": 57,
        "end_line": 57,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(byte)",
        "snippet": "    String oneArg(byte value);",
        "begin_line": 59,
        "end_line": 59,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Byte)",
        "snippet": "    String oneArg(Byte value);",
        "begin_line": 61,
        "end_line": 61,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forByte(java.lang.Byte)",
        "snippet": "    String forByte(Byte value);",
        "begin_line": 63,
        "end_line": 63,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(short)",
        "snippet": "    String oneArg(short value);",
        "begin_line": 65,
        "end_line": 65,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Short)",
        "snippet": "    String oneArg(Short value);",
        "begin_line": 67,
        "end_line": 67,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forShort(java.lang.Short)",
        "snippet": "    String forShort(Short value);",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(char)",
        "snippet": "    String oneArg(char value);",
        "begin_line": 71,
        "end_line": 71,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Character)",
        "snippet": "    String oneArg(Character value);",
        "begin_line": 73,
        "end_line": 73,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forCharacter(java.lang.Character)",
        "snippet": "    String forCharacter(Character value);",
        "begin_line": 75,
        "end_line": 75,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(int)",
        "snippet": "    String oneArg(int value);",
        "begin_line": 77,
        "end_line": 77,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Integer)",
        "snippet": "    String oneArg(Integer value);",
        "begin_line": 79,
        "end_line": 79,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forInteger(java.lang.Integer)",
        "snippet": "    String forInteger(Integer value);",
        "begin_line": 81,
        "end_line": 81,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(long)",
        "snippet": "    String oneArg(long value);",
        "begin_line": 83,
        "end_line": 83,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Long)",
        "snippet": "    String oneArg(Long value);",
        "begin_line": 85,
        "end_line": 85,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forLong(java.lang.Long)",
        "snippet": "    String forLong(Long value);",
        "begin_line": 87,
        "end_line": 87,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(float)",
        "snippet": "    String oneArg(float value);",
        "begin_line": 89,
        "end_line": 89,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Float)",
        "snippet": "    String oneArg(Float value);",
        "begin_line": 91,
        "end_line": 91,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forFloat(java.lang.Float)",
        "snippet": "    String forFloat(Float value);",
        "begin_line": 93,
        "end_line": 93,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(double)",
        "snippet": "    String oneArg(double value);",
        "begin_line": 95,
        "end_line": 95,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Double)",
        "snippet": "    String oneArg(Double value);",
        "begin_line": 97,
        "end_line": 97,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forDouble(java.lang.Double)",
        "snippet": "    String forDouble(Double value);",
        "begin_line": 99,
        "end_line": 99,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.Object)",
        "snippet": "    String oneArg(Object value);",
        "begin_line": 101,
        "end_line": 101,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArg(java.lang.String)",
        "snippet": "    String oneArg(String value);",
        "begin_line": 103,
        "end_line": 103,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.throwsNothing(boolean)",
        "snippet": "    String throwsNothing(boolean value);",
        "begin_line": 105,
        "end_line": 105,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.throwsIOException(int)",
        "snippet": "    String throwsIOException(int count) throws IOException;",
        "begin_line": 107,
        "end_line": 107,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.throwsError(int)",
        "snippet": "    String throwsError(int count);",
        "begin_line": 109,
        "end_line": 109,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod()",
        "snippet": "    String simpleMethod();",
        "begin_line": 111,
        "end_line": 111,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.differentMethod()",
        "snippet": "    String differentMethod();",
        "begin_line": 113,
        "end_line": 113,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.differentMethod(java.lang.String)",
        "snippet": "    String differentMethod(String argument);",
        "begin_line": 115,
        "end_line": 115,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.otherMethod()",
        "snippet": "    String otherMethod();",
        "begin_line": 117,
        "end_line": 117,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String)",
        "snippet": "    String simpleMethod(String argument);",
        "begin_line": 119,
        "end_line": 119,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.util.Collection<?>)",
        "snippet": "    String simpleMethod(Collection<?> collection);",
        "begin_line": 121,
        "end_line": 121,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.Object)",
        "snippet": "    String simpleMethod(Object argument);",
        "begin_line": 123,
        "end_line": 123,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(int)",
        "snippet": "    String simpleMethod(int argument);",
        "begin_line": 125,
        "end_line": 125,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String, java.lang.Integer)",
        "snippet": "    String simpleMethod(String argOne, Integer argTwo);",
        "begin_line": 127,
        "end_line": 127,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)",
        "snippet": "    String simpleMethod(String one, Integer two, Integer three, Integer four, Integer five);",
        "begin_line": 129,
        "end_line": 129,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.simpleMethod(java.lang.String, java.lang.String[])",
        "snippet": "    String simpleMethod(String one, String[] two);",
        "begin_line": 131,
        "end_line": 131,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.threeArgumentMethod(int, java.lang.Object, java.lang.String)",
        "snippet": "    Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);",
        "begin_line": 133,
        "end_line": 133,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.twoArgumentMethod(int, int)",
        "snippet": "    void twoArgumentMethod(int one, int two);",
        "begin_line": 135,
        "end_line": 135,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.arrayMethod(java.lang.String[])",
        "snippet": "    void arrayMethod(String[] strings);",
        "begin_line": 137,
        "end_line": 137,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(boolean[])",
        "snippet": "    String oneArray(boolean[] array);",
        "begin_line": 139,
        "end_line": 139,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(byte[])",
        "snippet": "    String oneArray(byte[] array);",
        "begin_line": 141,
        "end_line": 141,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(char[])",
        "snippet": "    String oneArray(char[] array);",
        "begin_line": 143,
        "end_line": 143,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(double[])",
        "snippet": "    String oneArray(double[] array);",
        "begin_line": 145,
        "end_line": 145,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(float[])",
        "snippet": "    String oneArray(float[] array);",
        "begin_line": 147,
        "end_line": 147,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(int[])",
        "snippet": "    String oneArray(int[] array);",
        "begin_line": 149,
        "end_line": 149,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(long[])",
        "snippet": "    String oneArray(long[] array);",
        "begin_line": 151,
        "end_line": 151,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(short[])",
        "snippet": "    String oneArray(short[] array);",
        "begin_line": 153,
        "end_line": 153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(java.lang.Object[])",
        "snippet": "    String oneArray(Object[] array);",
        "begin_line": 155,
        "end_line": 155,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.canThrowException()",
        "snippet": "    String canThrowException() throws CharacterCodingException; ",
        "begin_line": 157,
        "end_line": 157,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.oneArray(java.lang.String[])",
        "snippet": "    String oneArray(String[] array);",
        "begin_line": 159,
        "end_line": 159,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargsString(int, java.lang.String...)",
        "snippet": "    void varargsString(int i, String... string);",
        "begin_line": 161,
        "end_line": 161,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargsObject(int, java.lang.Object...)",
        "snippet": "    Object varargsObject(int i, Object... object);",
        "begin_line": 163,
        "end_line": 163,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargsbyte(byte...)",
        "snippet": "    void varargsbyte(byte... bytes);",
        "begin_line": 165,
        "end_line": 165,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargs(java.lang.Object...)",
        "snippet": "    int varargs(Object ... object);",
        "begin_line": 167,
        "end_line": 167,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargsReturningString(java.lang.Object...)",
        "snippet": "    String varargsReturningString(Object ... object);",
        "begin_line": 169,
        "end_line": 169,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.varargs(java.lang.String...)",
        "snippet": "    int varargs(String ... string);",
        "begin_line": 171,
        "end_line": 171,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.mixedVarargs(java.lang.Object, java.lang.String...)",
        "snippet": "    void mixedVarargs(Object i, String ... string);",
        "begin_line": 173,
        "end_line": 173,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.listReturningMethod(java.lang.Object...)",
        "snippet": "    List<String> listReturningMethod(Object ... objects);",
        "begin_line": 175,
        "end_line": 175,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.linkedListReturningMethod()",
        "snippet": "    LinkedList<String> linkedListReturningMethod();",
        "begin_line": 177,
        "end_line": 177,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.toString()",
        "snippet": "    String toString();",
        "begin_line": 179,
        "end_line": 179,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.toString(java.lang.String)",
        "snippet": "    String toString(String foo);",
        "begin_line": 181,
        "end_line": 181,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.voidMethod()",
        "snippet": "    void voidMethod();",
        "begin_line": 183,
        "end_line": 183,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forList(java.util.List<java.lang.String>)",
        "snippet": "    String forList(List<String> list);",
        "begin_line": 185,
        "end_line": 185,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forSet(java.util.Set<java.lang.String>)",
        "snippet": "    String forSet(Set<String> anySet);",
        "begin_line": 187,
        "end_line": 187,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forMap(java.util.Map<java.lang.String, java.lang.String>)",
        "snippet": "    String forMap(Map<String, String> map);",
        "begin_line": 189,
        "end_line": 189,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forCollection(java.util.Collection<java.lang.String>)",
        "snippet": "    String forCollection(Collection<String> collection);",
        "begin_line": 191,
        "end_line": 191,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.arrayReturningMethod()",
        "snippet": "    Object[] arrayReturningMethod();",
        "begin_line": 193,
        "end_line": 193,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.iMethodsReturningMethod()",
        "snippet": "    IMethods iMethodsReturningMethod();",
        "begin_line": 195,
        "end_line": 195,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.stringReturningMethod()",
        "snippet": "    String stringReturningMethod();",
        "begin_line": 197,
        "end_line": 197,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.objectArgMethod(java.lang.Object)",
        "snippet": "    Object objectArgMethod(Object str);",
        "begin_line": 199,
        "end_line": 199,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.listArgMethod(java.util.List<java.lang.String>)",
        "snippet": "    Object listArgMethod(List<String> list);",
        "begin_line": 201,
        "end_line": 201,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.collectionArgMethod(java.util.Collection<java.lang.String>)",
        "snippet": "    Object collectionArgMethod(Collection<String> collection);",
        "begin_line": 203,
        "end_line": 203,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.setArgMethod(java.util.Set<java.lang.String>)",
        "snippet": "    Object setArgMethod(Set<String> set);",
        "begin_line": 205,
        "end_line": 205,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.longArg(long)",
        "snippet": "    void longArg(long longArg);",
        "begin_line": 207,
        "end_line": 207,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.intArgumentMethod(int)",
        "snippet": "    void intArgumentMethod(int i);",
        "begin_line": 209,
        "end_line": 209,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.intArgumentReturningInt(int)",
        "snippet": "    int intArgumentReturningInt(int i);",
        "begin_line": 211,
        "end_line": 211,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.equals(java.lang.String)",
        "snippet": "    boolean equals(String str);",
        "begin_line": 213,
        "end_line": 213,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.equals()",
        "snippet": "    boolean equals();",
        "begin_line": 215,
        "end_line": 215,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.hashCode(java.lang.String)",
        "snippet": "    int hashCode(String str);",
        "begin_line": 217,
        "end_line": 217,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.toIntPrimitive(java.lang.Integer)",
        "snippet": "    int toIntPrimitive(Integer i);",
        "begin_line": 219,
        "end_line": 219,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.toIntWrapper(int)",
        "snippet": "    Integer toIntWrapper(int i);",
        "begin_line": 221,
        "end_line": 221,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.IMethods",
        "child_classes": [
            "org.mockitousage.MethodsImpl"
        ],
        "src_path": "test/org/mockitousage/IMethods.java",
        "signature": "org.mockitousage.IMethods.forObject(java.lang.Object)",
        "snippet": "    String forObject(Object object);",
        "begin_line": 223,
        "end_line": 223,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        importLogDao = Mockito.mock(ImportLogDao.class);\n        importHandler = Mockito.mock(IImportHandler.class);\n        importManager = new ImportManager(importLogDao);\n    }",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 56)",
            "(line 33,col 9)-(line 33,col 59)",
            "(line 34,col 9)-(line 34,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.shouldIncludeInitialLog()",
        "snippet": "    @Test\n    public void shouldIncludeInitialLog() {\n        //given\n        int importType = 0;\n        Date currentDate = new GregorianCalendar(2009, 10, 12).getTime();\n\n        ImportLogBean initialLog = new ImportLogBean(currentDate, importType);\n        initialLog.setStatus(1);\n\n        given(importLogDao.anyImportRunningOrRunnedToday(importType, currentDate)).willReturn(false);\n        willAnswer(byCheckingLogEquals(initialLog)).given(importLogDao).include(any(ImportLogBean.class));\n\n        //when\n        importManager.startImportProcess(importType, currentDate);\n\n        //then\n        verify(importLogDao).include(any(ImportLogBean.class));\n    }",
        "begin_line": 37,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 27)",
            "(line 41,col 9)-(line 41,col 73)",
            "(line 43,col 9)-(line 43,col 78)",
            "(line 44,col 9)-(line 44,col 32)",
            "(line 46,col 9)-(line 46,col 101)",
            "(line 47,col 9)-(line 47,col 106)",
            "(line 50,col 9)-(line 50,col 66)",
            "(line 53,col 9)-(line 53,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.shouldAlterFinalLog()",
        "snippet": "    @Test\n    public void shouldAlterFinalLog() {\n        //given\n        int importType = 0;\n        Date currentDate = new GregorianCalendar(2009, 10, 12).getTime();\n\n        ImportLogBean finalLog = new ImportLogBean(currentDate, importType);\n        finalLog.setStatus(9);\n\n        given(importLogDao.anyImportRunningOrRunnedToday(importType, currentDate)).willReturn(false);\n        willAnswer(byCheckingLogEquals(finalLog)).given(importLogDao).alter(any(ImportLogBean.class));\n\n        //when\n        importManager.startImportProcess(importType, currentDate);\n\n        //then\n        verify(importLogDao).alter(any(ImportLogBean.class));\n    }",
        "begin_line": 56,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 27)",
            "(line 60,col 9)-(line 60,col 73)",
            "(line 62,col 9)-(line 62,col 76)",
            "(line 63,col 9)-(line 63,col 30)",
            "(line 65,col 9)-(line 65,col 101)",
            "(line 66,col 9)-(line 66,col 102)",
            "(line 69,col 9)-(line 69,col 66)",
            "(line 72,col 9)-(line 72,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.byCheckingLogEquals(org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean)",
        "snippet": "    private Answer byCheckingLogEquals(final ImportLogBean status) {\n        return new Answer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                ImportLogBean bean = (ImportLogBean) invocation.getArguments()[0];\n                assertEquals(status, bean);\n                return null;\n            }\n        };\n    }",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 82,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.Anonymous-f4a1e43f-860a-40dc-9ba9-dab136ae63de.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) throws Throwable {\n                ImportLogBean bean = (ImportLogBean) invocation.getArguments()[0];\n                assertEquals(status, bean);\n                return null;\n            }",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 78,col 17)-(line 78,col 82)",
            "(line 79,col 17)-(line 79,col 43)",
            "(line 80,col 17)-(line 80,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportManager.ImportManager(org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogDao)",
        "snippet": "        public ImportManager(ImportLogDao pImportLogDao) {\n            super();\n            importLogDao = pImportLogDao;\n        }",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 13)-(line 88,col 20)",
            "(line 89,col 13)-(line 89,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportManager.startImportProcess(int, java.util.Date)",
        "snippet": "        public void startImportProcess(int importType, Date date) {\n            ImportLogBean importLogBean = null;\n\n            try {\n                importLogBean = createResume(importType, date);\n                if (isOkToImport(importType, date)) {\n                    // get the right handler\n                    //importLogBean = ImportHandlerFactory.singleton().getImportHandler(importType).processImport(importLogBean);\n                    // 2 = ok\n                    importLogBean.setStatus(2);\n                } else {\n                    // 5 = failed - is there a running process\n                    importLogBean.setStatus(9);\n                }\n            } catch (Exception e) {\n                // 9 = failed - exception\n                if (importLogBean != null)\n                    importLogBean.setStatus(9);\n            } finally {\n                if (importLogBean != null)\n                    finalizeResume(importLogBean);\n            }\n        }",
        "begin_line": 94,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 95,col 13)-(line 95,col 47)",
            "(line 97,col 13)-(line 115,col 13)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportManager.isOkToImport(int, java.util.Date)",
        "snippet": "        private boolean isOkToImport(int importType, Date date) {\n            return importLogDao.anyImportRunningOrRunnedToday(importType, date);\n        }",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 13)-(line 119,col 80)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportManager.createResume(int, java.util.Date)",
        "snippet": "        private ImportLogBean createResume(int importType, Date date) {\n            ImportLogBean importLogBean = new ImportLogBean(date,\n                    importType);\n            // 1 = running\n            importLogBean.setStatus(1);\n            importLogDao.include(importLogBean);\n            return importLogBean;\n        }",
        "begin_line": 122,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 123,col 13)-(line 124,col 32)",
            "(line 126,col 13)-(line 126,col 39)",
            "(line 127,col 13)-(line 127,col 48)",
            "(line 128,col 13)-(line 128,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportManager.finalizeResume(org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean)",
        "snippet": "        private void finalizeResume(ImportLogBean importLogBean) {\n            importLogDao.alter(importLogBean);\n        }",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 13)-(line 132,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogDao.anyImportRunningOrRunnedToday(int, java.util.Date)",
        "snippet": "        public boolean anyImportRunningOrRunnedToday(int importType, Date currentDate);",
        "begin_line": 137,
        "end_line": 137,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogDao.include(org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean)",
        "snippet": "        void include(ImportLogBean importLogBean);",
        "begin_line": 139,
        "end_line": 139,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogDao.alter(org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean)",
        "snippet": "        void alter(ImportLogBean importLogBean);",
        "begin_line": 141,
        "end_line": 141,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean.ImportLogBean(java.util.Date, int)",
        "snippet": "        public ImportLogBean(Date currentDate, int importType) {\n            this.currentDate = currentDate;\n            this.importType = importType;\n        }",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 153,col 13)-(line 153,col 43)",
            "(line 154,col 13)-(line 154,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean.setStatus(int)",
        "snippet": "        public void setStatus(int status) {\n            this.status = status;\n        }",
        "begin_line": 157,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 13)-(line 158,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (!(o instanceof ImportLogBean)) return false;\n\n            ImportLogBean that = (ImportLogBean) o;\n\n            if (importType != that.importType) return false;\n            if (status != that.status) return false;\n            if (currentDate != null ? !currentDate.equals(that.currentDate) : that.currentDate != null) return false;\n\n            return true;\n        }",
        "begin_line": 161,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 163,col 13)-(line 163,col 39)",
            "(line 164,col 13)-(line 164,col 60)",
            "(line 166,col 13)-(line 166,col 51)",
            "(line 168,col 13)-(line 168,col 60)",
            "(line 169,col 13)-(line 169,col 52)",
            "(line 170,col 13)-(line 170,col 117)",
            "(line 172,col 13)-(line 172,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java",
        "signature": "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest.ImportLogBean.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            int result = currentDate != null ? currentDate.hashCode() : 0;\n            result = 31 * result + importType;\n            result = 31 * result + status;\n            return result;\n        }",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 177,col 13)-(line 177,col 74)",
            "(line 178,col 13)-(line 178,col 46)",
            "(line 179,col 13)-(line 179,col 42)",
            "(line 180,col 13)-(line 180,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.booleanReturningMethod()",
        "snippet": "    public boolean booleanReturningMethod() {\n        return false;\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.booleanObjectReturningMethod()",
        "snippet": "    public Boolean booleanObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.byteReturningMethod()",
        "snippet": "    public byte byteReturningMethod() {\n        return 0;\n    }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.byteObjectReturningMethod()",
        "snippet": "    public Byte byteObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.shortReturningMethod()",
        "snippet": "    public short shortReturningMethod() {\n        return 0;\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.shortObjectReturningMethod()",
        "snippet": "    public Short shortObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.charReturningMethod()",
        "snippet": "    public char charReturningMethod() {\n        return 0;\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.charObjectReturningMethod()",
        "snippet": "    public Character charObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.intReturningMethod()",
        "snippet": "    public int intReturningMethod() {\n        return 0;\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.integerReturningMethod()",
        "snippet": "    public Integer integerReturningMethod() {\n        return null;\n    }",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.longReturningMethod()",
        "snippet": "    public long longReturningMethod() {\n        return 0;\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.longObjectReturningMethod()",
        "snippet": "    public Long longObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.floatReturningMethod()",
        "snippet": "    public float floatReturningMethod() {\n        return 0;\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.floatObjectReturningMethod()",
        "snippet": "    public Float floatObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.doubleReturningMethod()",
        "snippet": "    public double doubleReturningMethod() {\n        return 0;\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.doubleObjectReturningMethod()",
        "snippet": "    public Double doubleObjectReturningMethod() {\n        return null;\n    }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.objectReturningMethod(java.lang.Object...)",
        "snippet": "    public Object objectReturningMethod(Object... objects) {\n        return null;\n    }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.objectReturningMethodNoArgs()",
        "snippet": "    public Object objectReturningMethodNoArgs() {\n        return null;\n    }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(boolean)",
        "snippet": "    public String oneArg(boolean value) {\n        return null;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Boolean)",
        "snippet": "    public String oneArg(Boolean value) {\n        return null;\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forBoolean(java.lang.Boolean)",
        "snippet": "    public String forBoolean(Boolean value) {\n        return null;\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(byte)",
        "snippet": "    public String oneArg(byte value) {\n        return null;\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Byte)",
        "snippet": "    public String oneArg(Byte value) {\n        return null;\n    }",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forByte(java.lang.Byte)",
        "snippet": "    public String forByte(Byte value) {\n        return null;\n    }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(short)",
        "snippet": "    public String oneArg(short value) {\n        return null;\n    }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Short)",
        "snippet": "    public String oneArg(Short value) {\n        return null;\n    }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forShort(java.lang.Short)",
        "snippet": "    public String forShort(Short value) {\n        return null;\n    }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(char)",
        "snippet": "    public String oneArg(char value) {\n        return null;\n    }",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Character)",
        "snippet": "    public String oneArg(Character value) {\n        return null;\n    }",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forCharacter(java.lang.Character)",
        "snippet": "    public String forCharacter(Character value) {\n        return null;\n    }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(int)",
        "snippet": "    public String oneArg(int value) {\n        return null;\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Integer)",
        "snippet": "    public String oneArg(Integer value) {\n        return null;\n    }",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forInteger(java.lang.Integer)",
        "snippet": "    public String forInteger(Integer value) {\n        return null;\n    }",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(long)",
        "snippet": "    public String oneArg(long value) {\n        return null;\n    }",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Long)",
        "snippet": "    public String oneArg(Long value) {\n        return null;\n    }",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forLong(java.lang.Long)",
        "snippet": "    public String forLong(Long value) {\n        return null;\n    }",
        "begin_line": 156,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(float)",
        "snippet": "    public String oneArg(float value) {\n        return null;\n    }",
        "begin_line": 160,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Float)",
        "snippet": "    public String oneArg(Float value) {\n        return null;\n    }",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forFloat(java.lang.Float)",
        "snippet": "    public String forFloat(Float value) {\n        return null;\n    }",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(double)",
        "snippet": "    public String oneArg(double value) {\n        return null;\n    }",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Double)",
        "snippet": "    public String oneArg(Double value) {\n        return null;\n    }",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forDouble(java.lang.Double)",
        "snippet": "    public String forDouble(Double value) {\n        return null;\n    }",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.Object)",
        "snippet": "    public String oneArg(Object value) {\n        return null;\n    }",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArg(java.lang.String)",
        "snippet": "    public String oneArg(String value) {\n        return null;\n    }",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.throwsNothing(boolean)",
        "snippet": "    public String throwsNothing(boolean value) {\n        return null;\n    }",
        "begin_line": 192,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.throwsIOException(int)",
        "snippet": "    public String throwsIOException(int count) throws IOException {\n        return null;\n    }",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.throwsError(int)",
        "snippet": "    public String throwsError(int count) {\n        return null;\n    }",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod()",
        "snippet": "    public String simpleMethod() {\n        return null;\n    }",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.differentMethod()",
        "snippet": "    public String differentMethod() {\n        return null;\n    }",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.differentMethod(java.lang.String)",
        "snippet": "    public String differentMethod(String argument) {\n        return null;\n    }",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.otherMethod()",
        "snippet": "    public String otherMethod() {\n        return null;\n    }",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(java.lang.String)",
        "snippet": "    public String simpleMethod(String argument) {\n        return null;\n    }",
        "begin_line": 220,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(java.util.Collection<?>)",
        "snippet": "    public String simpleMethod(Collection<?> collection) {\n        return null;\n    }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 9)-(line 225,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(java.lang.Object)",
        "snippet": "    public String simpleMethod(Object argument) {\n        return null;\n    }",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(int)",
        "snippet": "    public String simpleMethod(int argument) {\n        return null;\n    }",
        "begin_line": 232,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(java.lang.String, java.lang.Integer)",
        "snippet": "    public String simpleMethod(String argOne, Integer argTwo) {\n        return null;\n    }",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)",
        "snippet": "    public String simpleMethod(String one, Integer two, Integer three, Integer four, Integer five) {\n        return null;\n    }",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.simpleMethod(java.lang.String, java.lang.String[])",
        "snippet": "    public String simpleMethod(String one, String[] two) {\n        return null;\n    }",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.threeArgumentMethod(int, java.lang.Object, java.lang.String)",
        "snippet": "    public Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree) {\n        return null;\n    }",
        "begin_line": 248,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.twoArgumentMethod(int, int)",
        "snippet": "    public void twoArgumentMethod(int one, int two) {\n      \n    }",
        "begin_line": 252,
        "end_line": 254,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.arrayMethod(java.lang.String[])",
        "snippet": "    public void arrayMethod(String[] strings) {\n      \n    }",
        "begin_line": 256,
        "end_line": 258,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(boolean[])",
        "snippet": "    public String oneArray(boolean[] array) {\n        return null;\n    }",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(byte[])",
        "snippet": "    public String oneArray(byte[] array) {\n        return null;\n    }",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(char[])",
        "snippet": "    public String oneArray(char[] array) {\n        return null;\n    }",
        "begin_line": 268,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(double[])",
        "snippet": "    public String oneArray(double[] array) {\n        return null;\n    }",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(float[])",
        "snippet": "    public String oneArray(float[] array) {\n        return null;\n    }",
        "begin_line": 276,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(int[])",
        "snippet": "    public String oneArray(int[] array) {\n        return null;\n    }",
        "begin_line": 280,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(long[])",
        "snippet": "    public String oneArray(long[] array) {\n        return null;\n    }",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(short[])",
        "snippet": "    public String oneArray(short[] array) {\n        return null;\n    }",
        "begin_line": 288,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(java.lang.Object[])",
        "snippet": "    public String oneArray(Object[] array) {\n        return null;\n    }",
        "begin_line": 292,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.canThrowException()",
        "snippet": "    public String canThrowException() throws CharacterCodingException {\n        return null;\n    }",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.oneArray(java.lang.String[])",
        "snippet": "    public String oneArray(String[] array) {\n        return null;\n    }",
        "begin_line": 300,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.varargsString(int, java.lang.String...)",
        "snippet": "    public void varargsString(int i, String... string) {\n      \n    }",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.varargsObject(int, java.lang.Object...)",
        "snippet": "    public Object varargsObject(int i, Object... object) {\n        return null;\n    }",
        "begin_line": 308,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.varargs(java.lang.Object...)",
        "snippet": "    public int varargs(Object... object) {\n        return -1;\n    }",
        "begin_line": 312,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 18)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.varargsReturningString(java.lang.Object...)",
        "snippet": "    public String varargsReturningString(Object... object) {\n        return null;\n    }",
        "begin_line": 316,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.varargs(java.lang.String...)",
        "snippet": "    public int varargs(String... string) {\n        return -1;\n    }",
        "begin_line": 320,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 18)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.mixedVarargs(java.lang.Object, java.lang.String...)",
        "snippet": "    public void mixedVarargs(Object i, String... string) {\n    }",
        "begin_line": 324,
        "end_line": 325,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.varargsbyte(byte...)",
        "snippet": "    public void varargsbyte(byte... bytes) {\n    }",
        "begin_line": 327,
        "end_line": 328,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.listReturningMethod(java.lang.Object...)",
        "snippet": "    public List<String> listReturningMethod(Object... objects) {\n        return null;\n    }",
        "begin_line": 330,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.linkedListReturningMethod()",
        "snippet": "    public LinkedList<String> linkedListReturningMethod() {\n        return null;\n    }",
        "begin_line": 334,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.toString(java.lang.String)",
        "snippet": "    public String toString(String foo) {\n        return null;\n    }",
        "begin_line": 338,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.voidMethod()",
        "snippet": "    public void voidMethod() {\n      \n    }",
        "begin_line": 342,
        "end_line": 344,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forList(java.util.List<java.lang.String>)",
        "snippet": "    public String forList(List<String> list) {\n        return null;\n    }",
        "begin_line": 346,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forSet(java.util.Set<java.lang.String>)",
        "snippet": "    public String forSet(Set<String> anySet) {\n        return null;\n    }",
        "begin_line": 350,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forMap(java.util.Map<java.lang.String, java.lang.String>)",
        "snippet": "    public String forMap(Map<String, String> map) {\n        return null;\n    }",
        "begin_line": 354,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forCollection(java.util.Collection<java.lang.String>)",
        "snippet": "    public String forCollection(Collection<String> collection) {\n        return null;\n    }",
        "begin_line": 358,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.arrayReturningMethod()",
        "snippet": "    public Object[] arrayReturningMethod() {\n        return new Object[0];\n    }",
        "begin_line": 362,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.iMethodsReturningMethod()",
        "snippet": "    public IMethods iMethodsReturningMethod() {\n        return null;\n    }",
        "begin_line": 366,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 367,col 9)-(line 367,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.stringReturningMethod()",
        "snippet": "    public String stringReturningMethod() {\n        return null;\n    }",
        "begin_line": 370,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.objectArgMethod(java.lang.Object)",
        "snippet": "    public Object objectArgMethod(Object str) {\n        return null;\n    }",
        "begin_line": 374,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.listArgMethod(java.util.List<java.lang.String>)",
        "snippet": "    public Object listArgMethod(List<String> list) {\n        return null;\n    }",
        "begin_line": 378,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.collectionArgMethod(java.util.Collection<java.lang.String>)",
        "snippet": "    public Object collectionArgMethod(Collection<String> collection) {\n        return null;\n    }",
        "begin_line": 382,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 383,col 9)-(line 383,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.setArgMethod(java.util.Set<java.lang.String>)",
        "snippet": "    public Object setArgMethod(Set<String> set) {\n        return null;\n    }",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.longArg(long)",
        "snippet": "    public void longArg(long longArg) {\n      \n    }",
        "begin_line": 390,
        "end_line": 392,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.intArgumentMethod(int)",
        "snippet": "    public void intArgumentMethod(int i) {\n      \n    }",
        "begin_line": 394,
        "end_line": 396,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.intArgumentReturningInt(int)",
        "snippet": "    public int intArgumentReturningInt(int i) {\n        return 0;\n    }",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.equals(java.lang.String)",
        "snippet": "    public boolean equals(String str) {\n        return false;\n    }",
        "begin_line": 402,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.equals()",
        "snippet": "    public boolean equals() {\n        return false;\n    }",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.hashCode(java.lang.String)",
        "snippet": "    public int hashCode(String str) {\n        return 0;\n    }",
        "begin_line": 410,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.toIntPrimitive(java.lang.Integer)",
        "snippet": "    public int toIntPrimitive(Integer i) {\n        return 0;\n    }",
        "begin_line": 414,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.toIntWrapper(int)",
        "snippet": "    public Integer toIntWrapper(int i) {\n        return null;\n    }",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.MethodsImpl",
        "child_classes": [],
        "src_path": "test/org/mockitousage/MethodsImpl.java",
        "signature": "org.mockitousage.MethodsImpl.forObject(java.lang.Object)",
        "snippet": "    public String forObject(Object object) {\n        return null;\n    }",
        "begin_line": 422,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Foo.doSomeThing()",
        "snippet": "        int doSomeThing() {\n            return 0;\n        }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 13)-(line 19,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Foo.getStuff()",
        "snippet": "        protected String getStuff() {\n            return \"foo\";\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Boo.withLong(long)",
        "snippet": "        final public Object withLong(long y) {\n                         return \"\";\n        }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 26)-(line 29,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.Boo.foo()",
        "snippet": "        public Object foo() {\n                   return \"\";\n        }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 20)-(line 33,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.spyInAction()",
        "snippet": "    @Test\n    public void spyInAction() {\n\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.PlaygroundTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/PlaygroundTest.java",
        "signature": "org.mockitousage.PlaygroundTest.partialMockInAction()",
        "snippet": "    @Test\n    public void partialMockInAction() {\n//        mock = mock(Foo.class, withSettings() \n//            .defaultBehavior(CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, withSettings() \n//            .defaultMockAnswer(CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, withSettings() \n//            .defaultAnswer(CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, CALLS_REAL_METHODS);\n\n//        mock = mock(Foo.class, withSettings() \n//            .defaultBehavior(CALLS_REAL_METHODS)\n//            .createUsingDefaultConstructor();\n//        \n//        mock = mock(Foo.class, withSettings() \n//            .defaultBehavior(CALLS_REAL_METHODS)\n//            .createPassingArguments(\"some arg\", 1);\n//\n//        spy = spy(Foo.class, \"some arg\", 1);\n//        \n//            .withName(\"foo\")\n//            .withDefaultBehavior(RETURNS_SMART_NULLS)\n//            .withInterfaces(Bar.class);\n//        \n//        mock = mock(Foo.class)\n//            .name(\"foo\")\n//            .defaultBehavior(RETURNS_SMART_NULLS)\n//            .interfaces(Bar.class);\n//        \n//        mock = mock(Foo.class)\n//            .named(\"foo\")\n//            .byDefault(RETURNS_SMART_NULLS)\n//            .alsoImplements(Bar.class, Bar2.class);\n//        \n//        mock = mock(Foo.class)\n//            hasName(\"foo\");\n        \n//        when(mock.getStuff()).thenReturn(\"aha!\");\n//        when(mock.doSomeThing()).thenCallRealMethod();\n//\n        \n//        mock.doSomeThing();\n    }",
        "begin_line": 45,
        "end_line": 90,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.internal.debugging.LocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/debugging/LocationImplTest.java",
        "signature": "org.mockitousage.internal.debugging.LocationImplTest.shouldLocationNotContainGetStackTraceMethod()",
        "snippet": "    @Test\n    public void shouldLocationNotContainGetStackTraceMethod() {\n        assertContains(\"shouldLocationNotContainGetStackTraceMethod\", new LocationImpl().toString());\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 101)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.debugging.LocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/debugging/LocationImplTest.java",
        "signature": "org.mockitousage.internal.debugging.LocationImplTest.shouldBeSafeInCaseForSomeReasonFilteredStackTraceIsEmpty()",
        "snippet": "    @Test\n    public void shouldBeSafeInCaseForSomeReasonFilteredStackTraceIsEmpty() {\n        //given\n        StackTraceFilter filterReturningEmptyArray = new StackTraceFilter() {\n            @Override\n            public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n                return new StackTraceElement[0];\n            }\n        };\n\n        //when\n        String loc = new LocationImpl(filterReturningEmptyArray).toString();\n\n        //then\n        assertEquals(\"-> at <<unknown line>>\", loc);\n    }",
        "begin_line": 20,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 28,col 10)",
            "(line 31,col 9)-(line 31,col 76)",
            "(line 34,col 9)-(line 34,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.debugging.LocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/debugging/LocationImplTest.java",
        "signature": "org.mockitousage.internal.debugging.LocationImplTest.Anonymous-feb1496f-6798-4e08-a9f3-b93bcbdb223e.filter(java.lang.StackTraceElement[], boolean)",
        "snippet": "            @Override\n            public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n                return new StackTraceElement[0];\n            }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 17)-(line 26,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/CleanTraceRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest.keepStackTracesClean()",
        "snippet": "    @Before\n    public void keepStackTracesClean() {\n        makeStackTracesClean();\n    }",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/CleanTraceRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest.Foo.throwSomething()",
        "snippet": "        public String throwSomething() {\n            throw new RuntimeException();\n        }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 13)-(line 24,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/CleanTraceRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest.shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows()",
        "snippet": "    @Test\n    public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {\n        //given\n        CleanTraceRealMethod realMethod = new CleanTraceRealMethod(new RealMethod() {\n            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().throwSomething();\n            }});\n        \n        //when\n        try {\n            realMethod.invoke(null, null);\n            fail();\n        //then\n        } catch (Exception e) {\n            assertThat(e, hasMethodInStackTraceAt(0, \"throwSomething\"));\n            assertThat(e, hasMethodInStackTraceAt(1, \"invoke\"));\n            assertThat(e, hasMethodInStackTraceAt(2, \"shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows\"));\n        }\n    }",
        "begin_line": 28,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 34,col 16)",
            "(line 37,col 9)-(line 45,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/internal/invocation/realmethod/CleanTraceRealMethodTest.java",
        "signature": "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest.Anonymous-1dd88d91-d510-47ee-9a24-a5b1a789ad94.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().throwSomething();\n            }});",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 17)-(line 33,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.performance.LoadsOfMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/performance/LoadsOfMocksTest.java",
        "signature": "org.mockitousage.performance.LoadsOfMocksTest.testSomething()",
        "snippet": "    @Ignore(\"Use it for performance checks\")\n    @Test\n    public void testSomething() {\n        List mocks = new LinkedList();\n        for (int i = 0; i < 50000; i++) {\n            System.out.println(\"Mock no: \" + i);\n            IMethods mock = mock(IMethods.class);\n            mocks.add(mock);\n            \n            when(mock.simpleMethod(1)).thenReturn(\"one\");\n            when(mock.simpleMethod(2)).thenReturn(\"two\");\n            \n            assertEquals(\"one\", mock.simpleMethod(1));\n            assertEquals(\"two\", mock.simpleMethod(2));\n            \n            verify(mock).simpleMethod(1);\n            verify(mock).simpleMethod(2);\n        }\n    }",
        "begin_line": 21,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 38)",
            "(line 25,col 9)-(line 38,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.performance.StubOnlyAvoidMemoryConsumptionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/performance/StubOnlyAvoidMemoryConsumptionTest.java",
        "signature": "org.mockitousage.performance.StubOnlyAvoidMemoryConsumptionTest.using_stub_only_wont_thrown_an_OutOfMemoryError()",
        "snippet": "    @Test\n    public void using_stub_only_wont_thrown_an_OutOfMemoryError() {\n        Object obj = mock(Object.class, withSettings().stubOnly());\n        when(obj.toString()).thenReturn(\"asdf\");\n\n        for (int i = 0; i < 1000000; i++) {\n            obj.toString();\n        }\n    }",
        "begin_line": 12,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 67)",
            "(line 15,col 9)-(line 15,col 48)",
            "(line 17,col 9)-(line 19,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.performance.StubOnlyAvoidMemoryConsumptionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/performance/StubOnlyAvoidMemoryConsumptionTest.java",
        "signature": "org.mockitousage.performance.StubOnlyAvoidMemoryConsumptionTest.without_stub_only_mocks_will_store_invocations_leading_to_an_OutOfMemoryError()",
        "snippet": "    @Test\n    @Ignore(\"ignored because it will detonate our test suite with an OOM for real\")\n    public void without_stub_only_mocks_will_store_invocations_leading_to_an_OutOfMemoryError() {\n        Object obj = mock(Object.class, withSettings());\n        when(obj.toString()).thenReturn(\"asdf\");\n\n        for (int i = 0; i < 1000000; i++) {\n            obj.toString();\n        }\n    }",
        "begin_line": 22,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 56)",
            "(line 26,col 9)-(line 26,col 48)",
            "(line 28,col 9)-(line 30,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.updateNumberOfArticles(java.lang.String, int)",
        "snippet": "    public void updateNumberOfArticles(String newspaper, int articles) {\n    }",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.updateNumberOfPolishArticles(java.lang.String, int)",
        "snippet": "    public void updateNumberOfPolishArticles(String newspaper, int polishArticles) {\n    }",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.updateNumberOfEnglishArticles(java.lang.String, int)",
        "snippet": "    public void updateNumberOfEnglishArticles(String newspaper, int i) {\n    }",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "org.mockitousage.examples.use.ArticleDatabase.getArticlesFor(java.lang.String)",
        "snippet": "    public List<Article> getArticlesFor(String string) {\n        return null;\n    }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleDatabase",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleDatabase.java",
        "signature": "save(Article)",
        "snippet": "    public void save(Article article) {\n    }",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "org.mockitousage.examples.use.ArticleCalculator.countArticles(java.lang.String)",
        "snippet": "    int countArticles(String newspaper);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "org.mockitousage.examples.use.ArticleCalculator.countArticlesInPolish(java.lang.String)",
        "snippet": "    int countArticlesInPolish(String newspaper);",
        "begin_line": 10,
        "end_line": 10,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "countNumberOfRelatedArticles(Article)",
        "snippet": "    int countNumberOfRelatedArticles(Article article);",
        "begin_line": 11,
        "end_line": 11,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleCalculator",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleCalculator.java",
        "signature": "org.mockitousage.examples.use.ArticleCalculator.countAllArticles(java.lang.String...)",
        "snippet": "    int countAllArticles(String ... publications);",
        "begin_line": 12,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleManager",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleManager.java",
        "signature": "ArticleManager(ArticleCalculator, ArticleDatabase)",
        "snippet": "    public ArticleManager(ArticleCalculator calculator, ArticleDatabase database) {\n        this.calculator = calculator;\n        this.database = database;\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 37)",
            "(line 17,col 9)-(line 17,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleManager",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleManager.java",
        "signature": "org.mockitousage.examples.use.ArticleManager.updateArticleCounters(java.lang.String)",
        "snippet": "    public void updateArticleCounters(String newspaper) {\n        int articles = calculator.countArticles(newspaper);\n        int polishArticles = calculator.countArticlesInPolish(newspaper);\n        \n        database.updateNumberOfArticles(newspaper, articles);\n        database.updateNumberOfPolishArticles(newspaper, polishArticles);\n        database.updateNumberOfEnglishArticles(newspaper, articles - polishArticles);\n    }",
        "begin_line": 20,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 59)",
            "(line 22,col 9)-(line 22,col 73)",
            "(line 24,col 9)-(line 24,col 61)",
            "(line 25,col 9)-(line 25,col 73)",
            "(line 26,col 9)-(line 26,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ArticleManager",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ArticleManager.java",
        "signature": "org.mockitousage.examples.use.ArticleManager.updateRelatedArticlesCounters(java.lang.String)",
        "snippet": "    public void updateRelatedArticlesCounters(String newspaper) {\n        List<Article> articles = database.getArticlesFor(\"Guardian\");\n        for (Article article : articles) {\n            int numberOfRelatedArticles = calculator.countNumberOfRelatedArticles(article);\n            article.setNumberOfRelatedArticles(numberOfRelatedArticles);\n            database.save(article);\n        }\n    }",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 69)",
            "(line 31,col 9)-(line 35,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        articleManager = new ArticleManager(mockCalculator, mockDatabase);\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerCountsArticlesAndSavesThemInTheDatabase()",
        "snippet": "    @Test\n    public void managerCountsArticlesAndSavesThemInTheDatabase() {\n        when(mockCalculator.countArticles(\"Guardian\")).thenReturn(12);\n        when(mockCalculator.countArticlesInPolish(anyString())).thenReturn(5);\n\n        articleManager.updateArticleCounters(\"Guardian\");\n        \n        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 12);\n        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 5);\n        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 7);\n    }",
        "begin_line": 33,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 70)",
            "(line 36,col 9)-(line 36,col 78)",
            "(line 38,col 9)-(line 38,col 57)",
            "(line 40,col 9)-(line 40,col 68)",
            "(line 41,col 9)-(line 41,col 73)",
            "(line 42,col 9)-(line 42,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerCountsArticlesUsingCalculator()",
        "snippet": "    @Test\n    public void managerCountsArticlesUsingCalculator() {\n        articleManager.updateArticleCounters(\"Guardian\");\n\n        verify(mockCalculator).countArticles(\"Guardian\");\n        verify(mockCalculator).countArticlesInPolish(\"Guardian\");\n    }",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 57)",
            "(line 49,col 9)-(line 49,col 57)",
            "(line 50,col 9)-(line 50,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerSavesArticlesInTheDatabase()",
        "snippet": "    @Test\n    public void managerSavesArticlesInTheDatabase() {\n        articleManager.updateArticleCounters(\"Guardian\");\n\n        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 0);\n        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 0);\n        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 0);\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 57)",
            "(line 57,col 9)-(line 57,col 67)",
            "(line 58,col 9)-(line 58,col 73)",
            "(line 59,col 9)-(line 59,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.managerUpdatesNumberOfRelatedArticles()",
        "snippet": "    @Test\n    public void managerUpdatesNumberOfRelatedArticles() {\n        Article articleOne = new Article();\n        Article articleTwo = new Article();\n        Article articleThree = new Article();\n        \n        when(mockCalculator.countNumberOfRelatedArticles(articleOne)).thenReturn(1);\n        when(mockCalculator.countNumberOfRelatedArticles(articleTwo)).thenReturn(12);\n        when(mockCalculator.countNumberOfRelatedArticles(articleThree)).thenReturn(0);\n        \n        when(mockDatabase.getArticlesFor(\"Guardian\")).thenReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n        \n        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n\n        verify(mockDatabase).save(articleOne);\n        verify(mockDatabase).save(articleTwo);\n        verify(mockDatabase).save(articleThree);\n    }",
        "begin_line": 62,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 43)",
            "(line 65,col 9)-(line 65,col 43)",
            "(line 66,col 9)-(line 66,col 45)",
            "(line 68,col 9)-(line 68,col 84)",
            "(line 69,col 9)-(line 69,col 85)",
            "(line 70,col 9)-(line 70,col 86)",
            "(line 72,col 9)-(line 72,col 118)",
            "(line 74,col 9)-(line 74,col 65)",
            "(line 76,col 9)-(line 76,col 46)",
            "(line 77,col 9)-(line 77,col 46)",
            "(line 78,col 9)-(line 78,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.ExampleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/ExampleTest.java",
        "signature": "org.mockitousage.examples.use.ExampleTest.shouldPersistRecalculatedArticle()",
        "snippet": "    @Test\n    public void shouldPersistRecalculatedArticle() {\n        Article articleOne = new Article();\n        Article articleTwo = new Article();\n        \n        when(mockCalculator.countNumberOfRelatedArticles(articleOne)).thenReturn(1);\n        when(mockCalculator.countNumberOfRelatedArticles(articleTwo)).thenReturn(12);\n        \n        when(mockDatabase.getArticlesFor(\"Guardian\")).thenReturn(Arrays.asList(articleOne, articleTwo)); \n        \n        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n\n        InOrder inOrder = inOrder(mockDatabase, mockCalculator);\n        \n        inOrder.verify(mockCalculator).countNumberOfRelatedArticles((Article) anyObject());\n        inOrder.verify(mockDatabase, atLeastOnce()).save((Article) anyObject());\n    }",
        "begin_line": 81,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 43)",
            "(line 84,col 9)-(line 84,col 43)",
            "(line 86,col 9)-(line 86,col 84)",
            "(line 87,col 9)-(line 87,col 85)",
            "(line 89,col 9)-(line 89,col 104)",
            "(line 91,col 9)-(line 91,col 65)",
            "(line 93,col 9)-(line 93,col 64)",
            "(line 95,col 9)-(line 95,col 91)",
            "(line 96,col 9)-(line 96,col 80)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.Article",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/Article.java",
        "signature": "org.mockitousage.examples.use.Article.getNumberOfRelatedArticles()",
        "snippet": "    public int getNumberOfRelatedArticles() {\n        return numberOfRelatedArticles;\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "child_ranges": [
            "(line 13,col 9)-(line 13,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.examples.use.Article",
        "child_classes": [],
        "src_path": "test/org/mockitousage/examples/use/Article.java",
        "signature": "org.mockitousage.examples.use.Article.setNumberOfRelatedArticles(int)",
        "snippet": "    public void setNumberOfRelatedArticles(int numberOfRelatedArticles) {\n        this.numberOfRelatedArticles = numberOfRelatedArticles;\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest.shouldPrintInvocationsWhenStubbingNotUsed()",
        "snippet": "    @Test(expected = ArgumentsAreDifferent.class)\n    public void shouldPrintInvocationsWhenStubbingNotUsed() throws Exception {\n        //given\n        performStubbing();\n        //when\n        businessLogicWithAsking(\"arg\");\n        //then\n        verify(mockTwo).doSomething(\"foo\");\n    }",
        "begin_line": 19,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 26)",
            "(line 24,col 9)-(line 24,col 39)",
            "(line 26,col 9)-(line 26,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest.performStubbing()",
        "snippet": "    private void performStubbing() {\n        given(mock.giveMeSomeString(\"different arg\")).willReturn(\"foo\");\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest.businessLogicWithAsking(java.lang.String)",
        "snippet": "    private void businessLogicWithAsking(String name) {\n        String out = mock.giveMeSomeString(name);\n        businessLogicWithTelling(out);\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 49)",
            "(line 35,col 9)-(line 35,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest.businessLogicWithTelling(java.lang.String)",
        "snippet": "    private void businessLogicWithTelling(String out) {\n        mockTwo.doSomething(out);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest.printInvocations()",
        "snippet": "    @After\n    public void printInvocations() {\n        String log = NewMockito.debug().printInvocations(mock, mockTwo);\n        //asking\n        assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n        assertContains(\".businessLogicWithAsking(\", log);\n        //telling\n        assertContains(\"doSomething(null)\", log);\n        assertContains(\".businessLogicWithTelling(\", log);\n        //stubbing\n        assertContains(\"giveMeSomeString(\\\"different arg\\\")\", log);\n        assertContains(\".performStubbing(\", log);\n    }",
        "begin_line": 42,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 72)",
            "(line 46,col 9)-(line 46,col 57)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 49,col 9)-(line 49,col 49)",
            "(line 50,col 9)-(line 50,col 58)",
            "(line 52,col 9)-(line 52,col 67)",
            "(line 53,col 9)-(line 53,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.NewMockito",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/NewMockito.java",
        "signature": "org.mockitousage.debugging.NewMockito.debug()",
        "snippet": "    public static MockitoDebugger debug() {\n        return new MockitoDebuggerImpl();\n    }",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.Foo",
        "child_classes": [
            "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest"
        ],
        "src_path": "test/org/mockitousage/debugging/Foo.java",
        "signature": "org.mockitousage.debugging.Foo.giveMeSomeString(java.lang.String)",
        "snippet": "    String giveMeSomeString(String param);",
        "begin_line": 8,
        "end_line": 8,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.debugging.Foo",
        "child_classes": [
            "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest"
        ],
        "src_path": "test/org/mockitousage/debugging/Foo.java",
        "signature": "org.mockitousage.debugging.Foo.doSomething(java.lang.String)",
        "snippet": "    void doSomething(String param);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest.shouldPrintInvocationsWhenStubbingNotUsed()",
        "snippet": "    @Test\n    public void shouldPrintInvocationsWhenStubbingNotUsed() throws Exception {\n        //given\n        performStubbing();\n        //when\n        businessLogicWithAsking(\"arg\");\n        //then\n        verify(mockTwo).doSomething(\"foo\");\n    }",
        "begin_line": 19,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 26)",
            "(line 24,col 9)-(line 24,col 39)",
            "(line 26,col 9)-(line 26,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest.performStubbing()",
        "snippet": "    private void performStubbing() {\n        given(mock.giveMeSomeString(\"arg\")).willReturn(\"foo\");\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest.businessLogicWithAsking(java.lang.String)",
        "snippet": "    private void businessLogicWithAsking(String name) {\n        String out = mock.giveMeSomeString(name);\n        businessLogicWithTelling(out);\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 49)",
            "(line 35,col 9)-(line 35,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest.businessLogicWithTelling(java.lang.String)",
        "snippet": "    private void businessLogicWithTelling(String out) {\n        mockTwo.doSomething(out);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest.printInvocations()",
        "snippet": "    @After\n    public void printInvocations() {\n        String log = NewMockito.debug().printInvocations(mock, mockTwo);\n        //asking\n        assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n        assertContains(\".businessLogicWithAsking(\", log);\n        //telling\n        assertContains(\"doSomething(\\\"foo\\\")\", log);\n        assertContains(\".businessLogicWithTelling(\", log);\n        //stubbing\n        assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n        assertContains(\".performStubbing(\", log);\n    }",
        "begin_line": 42,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 72)",
            "(line 46,col 9)-(line 46,col 57)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 49,col 9)-(line 49,col 52)",
            "(line 50,col 9)-(line 50,col 58)",
            "(line 52,col 9)-(line 52,col 57)",
            "(line 53,col 9)-(line 53,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/PrintingInvocationsDetectsUnusedStubTest.java",
        "signature": "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest.shouldDetectUnusedStubbingWhenPrinting()",
        "snippet": "    @Test\n    public void shouldDetectUnusedStubbingWhenPrinting() throws Exception {\n        //given\n        given(mock.giveMeSomeString(\"different arg\")).willReturn(\"foo\");\n        mock.giveMeSomeString(\"arg\");\n\n        //when\n        String log = NewMockito.debug().printInvocations(mock, mockTwo);\n\n        //then\n        assertContainsIgnoringCase(\"unused\", log);\n    }",
        "begin_line": 18,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 72)",
            "(line 22,col 9)-(line 22,col 37)",
            "(line 25,col 9)-(line 25,col 72)",
            "(line 28,col 9)-(line 28,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.InvocationListenerCallbackTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/InvocationListenerCallbackTest.java",
        "signature": "org.mockitousage.debugging.InvocationListenerCallbackTest.should_call_single_listener_when_mock_return_normally()",
        "snippet": "    @Test\n    public void should_call_single_listener_when_mock_return_normally() throws Exception {\n        // given\n        Foo foo = mock(Foo.class, withSettings().invocationListeners(listener1));\n        willReturn(\"basil\").given(foo).giveMeSomeString(\"herb\");\n\n        // when\n        foo.giveMeSomeString(\"herb\");\n\n        // then\n        assertThatHasBeenNotified(listener1, \"basil\", getClass().getSimpleName());\n    }",
        "begin_line": 31,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 81)",
            "(line 35,col 9)-(line 35,col 64)",
            "(line 38,col 9)-(line 38,col 37)",
            "(line 41,col 9)-(line 41,col 82)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.InvocationListenerCallbackTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/InvocationListenerCallbackTest.java",
        "signature": "org.mockitousage.debugging.InvocationListenerCallbackTest.should_call_all_listener_when_mock_return_normally()",
        "snippet": "    @Test\n    public void should_call_all_listener_when_mock_return_normally() throws Exception {\n        // given\n        Foo foo = mock(Foo.class, withSettings().invocationListeners(listener1, listener2));\n        given(foo.giveMeSomeString(\"herb\")).willReturn(\"rosemary\");\n\n        // when\n        foo.giveMeSomeString(\"herb\");\n\n        // then\n        assertThatHasBeenNotified(listener1, \"rosemary\", getClass().getSimpleName());\n        assertThatHasBeenNotified(listener2, \"rosemary\", getClass().getSimpleName());\n    }",
        "begin_line": 44,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 92)",
            "(line 48,col 9)-(line 48,col 67)",
            "(line 51,col 9)-(line 51,col 37)",
            "(line 54,col 9)-(line 54,col 85)",
            "(line 55,col 9)-(line 55,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.InvocationListenerCallbackTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/InvocationListenerCallbackTest.java",
        "signature": "org.mockitousage.debugging.InvocationListenerCallbackTest.should_call_all_listener_when_mock_throws_exception()",
        "snippet": "    @Test\n    public void should_call_all_listener_when_mock_throws_exception() throws Exception {\n        // given\n        InvocationListener listener1 = mock(InvocationListener.class, \"listener1\");\n        InvocationListener listener2 = mock(InvocationListener.class, \"listener2\");\n        Foo foo = mock(Foo.class, withSettings().invocationListeners(listener1, listener2));\n        doThrow(new OvenNotWorking()).when(foo).doSomething(\"cook\");\n\n        // when\n        try {\n            foo.doSomething(\"cook\");\n            fail(\"Exception expected.\");\n        } catch (OvenNotWorking actualException) {\n            // then\n            InOrder orderedVerify = inOrder(listener1, listener2);\n            orderedVerify.verify(listener1).reportInvocation(any(MethodInvocationReport.class));\n            orderedVerify.verify(listener2).reportInvocation(any(MethodInvocationReport.class));\n        }\n    }",
        "begin_line": 59,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 83)",
            "(line 63,col 9)-(line 63,col 83)",
            "(line 64,col 9)-(line 64,col 92)",
            "(line 65,col 9)-(line 65,col 68)",
            "(line 68,col 9)-(line 76,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.InvocationListenerCallbackTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/InvocationListenerCallbackTest.java",
        "signature": "org.mockitousage.debugging.InvocationListenerCallbackTest.assertThatHasBeenNotified(org.mockitousage.debugging.InvocationListenerCallbackTest.RememberingListener, java.lang.Object, java.lang.String)",
        "snippet": "    private void assertThatHasBeenNotified(RememberingListener listener, Object returned, String location) {\n        assertThat(listener.returnValue).isEqualTo(returned);\n        assertThat(listener.invocation).isNotNull();\n        assertThat(listener.locationOfStubbing).contains(getClass().getSimpleName());\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 61)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.InvocationListenerCallbackTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/InvocationListenerCallbackTest.java",
        "signature": "org.mockitousage.debugging.InvocationListenerCallbackTest.RememberingListener.reportInvocation(org.mockito.listeners.MethodInvocationReport)",
        "snippet": "        public void reportInvocation(MethodInvocationReport mcr) {\n            this.invocation = mcr.getInvocation();\n            this.returnValue = mcr.getReturnedValue();\n            this.locationOfStubbing = mcr.getLocationOfStubbing();\n        }",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 93,col 13)-(line 93,col 50)",
            "(line 94,col 13)-(line 94,col 54)",
            "(line 95,col 13)-(line 95,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        original = System.out;\n        output = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(output));\n    }",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 30)",
            "(line 44,col 9)-(line 44,col 45)",
            "(line 45,col 9)-(line 45,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() {\n        System.setOut(original);\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.shouldNotPrintInvocationOnMockWithoutSetting()",
        "snippet": "    @Test\n    public void shouldNotPrintInvocationOnMockWithoutSetting() {\n        // given\n        Foo foo = mock(Foo.class, withSettings().verboseLogging());\n\n        // when\n        foo.giveMeSomeString(\"Klipsch\");\n        unrelatedMock.unrelatedMethod(\"Apple\");\n\n        // then\n        Assertions.assertThat(printed())\n                .doesNotContain(mockName(unrelatedMock))\n                .doesNotContain(\"unrelatedMethod\")\n                .doesNotContain(\"Apple\");\n    }",
        "begin_line": 53,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 67)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 60,col 47)",
            "(line 63,col 9)-(line 66,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.shouldPrintUnstubbedInvocationOnMockToStdOut()",
        "snippet": "    @Test\n    public void shouldPrintUnstubbedInvocationOnMockToStdOut() {\n        // given\n        Foo foo = mock(Foo.class, withSettings().verboseLogging());\n\n        // when\n        foo.doSomething(\"Klipsch\");\n\n        // then\n        Assertions.assertThat(printed())\n                .contains(getClass().getName())\n                .contains(mockName(foo))\n                .contains(\"doSomething\")\n                .contains(\"Klipsch\");\n    }",
        "begin_line": 69,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 67)",
            "(line 75,col 9)-(line 75,col 35)",
            "(line 78,col 9)-(line 82,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.shouldPrintStubbedInvocationOnMockToStdOut()",
        "snippet": "    @Test\n    public void shouldPrintStubbedInvocationOnMockToStdOut() {\n        // given\n        Foo foo = mock(Foo.class, withSettings().verboseLogging());\n        given(foo.giveMeSomeString(\"Klipsch\")).willReturn(\"earbuds\");\n\n        // when\n        foo.giveMeSomeString(\"Klipsch\");\n\n        // then\n        Assertions.assertThat(printed())\n                .contains(getClass().getName())\n                .contains(mockName(foo))\n                .contains(\"giveMeSomeString\")\n                .contains(\"Klipsch\")\n                .contains(\"earbuds\");\n    }",
        "begin_line": 85,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 67)",
            "(line 89,col 9)-(line 89,col 69)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 95,col 9)-(line 100,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.shouldPrintThrowingInvocationOnMockToStdOut()",
        "snippet": "    @Test\n    public void shouldPrintThrowingInvocationOnMockToStdOut() {\n        // given\n        Foo foo = mock(Foo.class, withSettings().verboseLogging());\n        doThrow(new ThirdPartyException()).when(foo).doSomething(\"Klipsch\");\n\n        try {\n            // when\n            foo.doSomething(\"Klipsch\");\n            fail(\"Exception excepted.\");\n        } catch (ThirdPartyException e) {\n            // then\n            Assertions.assertThat(printed())\n                    .contains(getClass().getName())\n                    .contains(mockName(foo))\n                    .contains(\"doSomething\")\n                    .contains(\"Klipsch\")\n                    .contains(ThirdPartyException.class.getName());\n        }\n    }",
        "begin_line": 103,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 67)",
            "(line 107,col 9)-(line 107,col 76)",
            "(line 109,col 9)-(line 121,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.shouldPrintRealInvocationOnSpyToStdOut()",
        "snippet": "    @Test\n    public void shouldPrintRealInvocationOnSpyToStdOut() {\n        // given\n        FooImpl fooSpy = mock(FooImpl.class,\n                withSettings().spiedInstance(new FooImpl()).verboseLogging());\n        doCallRealMethod().when(fooSpy).doSomething(\"Klipsch\");\n        \n        // when\n        fooSpy.doSomething(\"Klipsch\");\n        \n        // then\n        Assertions.assertThat(printed())\n                .contains(getClass().getName())\n                .contains(mockName(fooSpy))\n                .contains(\"doSomething\")\n                .contains(\"Klipsch\");\n    }",
        "begin_line": 124,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 128,col 78)",
            "(line 129,col 9)-(line 129,col 63)",
            "(line 132,col 9)-(line 132,col 38)",
            "(line 135,col 9)-(line 139,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.usage()",
        "snippet": "    @Test\n    public void usage() {\n        // given\n        Foo foo = mock(Foo.class, withSettings().verboseLogging());\n        given(foo.giveMeSomeString(\"Apple\")).willReturn(\n                \"earbuds\");\n\n        // when\n        foo.giveMeSomeString(\"Shure\");\n        foo.giveMeSomeString(\"Apple\");\n        foo.doSomething(\"Klipsch\");\n    }",
        "begin_line": 142,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 67)",
            "(line 146,col 9)-(line 147,col 27)",
            "(line 150,col 9)-(line 150,col 38)",
            "(line 151,col 9)-(line 151,col 38)",
            "(line 152,col 9)-(line 152,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.printed()",
        "snippet": "    private String printed() {\n        return output.toString();\n    }",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.mockName(java.lang.Object)",
        "snippet": "    private String mockName(Object mock) {\n        return new MockUtil().getMockName(mock).toString();\n    }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.UnrelatedClass.unrelatedMethod(java.lang.String)",
        "snippet": "        void unrelatedMethod(String anotherStringValue) {\n        }",
        "begin_line": 164,
        "end_line": 165,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.FooImpl.giveMeSomeString(java.lang.String)",
        "snippet": "        public String giveMeSomeString(String param) {\n            return null;\n        }",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 13)-(line 178,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java",
        "signature": "org.mockitousage.debugging.VerboseLoggingOfInvocationsOnMockTest.FooImpl.doSomething(java.lang.String)",
        "snippet": "        public void doSomething(String param) {\n        }",
        "begin_line": 181,
        "end_line": 182,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MockAccessTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockAccessTest.java",
        "signature": "org.mockitousage.basicapi.MockAccessTest.shouldAllowStubbedMockReferenceAccess()",
        "snippet": "    @Test\n    public void shouldAllowStubbedMockReferenceAccess() throws Exception {\n        Set expectedMock = mock(Set.class);\n\n        Set returnedMock = when(expectedMock.isEmpty()).thenReturn(false).getMock();\n\n        assertEquals(expectedMock, returnedMock);\n    }",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 43)",
            "(line 22,col 9)-(line 22,col 84)",
            "(line 24,col 9)-(line 24,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockAccessTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockAccessTest.java",
        "signature": "org.mockitousage.basicapi.MockAccessTest.stubbedMockShouldWorkAsUsual()",
        "snippet": "    @Test\n    public void stubbedMockShouldWorkAsUsual() throws Exception {\n        Set returnedMock = when(mock(Set.class).isEmpty()).thenReturn(false, true).getMock();\n\n        assertEquals(false, returnedMock.isEmpty());\n        assertEquals(true, returnedMock.isEmpty());\n    }",
        "begin_line": 27,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 93)",
            "(line 31,col 9)-(line 31,col 52)",
            "(line 32,col 9)-(line 32,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_allow_throws_exception_to_be_serializable()",
        "snippet": "    @Test\n    public void should_allow_throws_exception_to_be_serializable() throws Exception {\n        // given\n        when(barMock.doSomething()).thenAnswer(new ThrowsException(new RuntimeException()));\n\n        //when-serialize then-deserialize\n        serializeAndBack(barMock);\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 92)",
            "(line 59,col 9)-(line 59,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_allow_mock_to_be_serializable()",
        "snippet": "    @Test\n    public void should_allow_mock_to_be_serializable() throws Exception {\n        // when-serialize then-deserialize\n        serializeAndBack(imethodsMock);\n    }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_allow_mock_and_boolean_value_to_serializable()",
        "snippet": "    @Test\n    public void should_allow_mock_and_boolean_value_to_serializable() throws Exception {\n        // given\n        when(imethodsMock.booleanReturningMethod()).thenReturn(true);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertTrue(readObject.booleanReturningMethod());\n    }",
        "begin_line": 68,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 69)",
            "(line 74,col 9)-(line 74,col 71)",
            "(line 77,col 9)-(line 77,col 74)",
            "(line 78,col 9)-(line 78,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_allow_mock_and_string_value_to_be_serializable()",
        "snippet": "    @Test\n    public void should_allow_mock_and_string_value_to_be_serializable() throws Exception {\n        // given\n        String value = \"value\";\n        when(imethodsMock.stringReturningMethod()).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.stringReturningMethod());\n    }",
        "begin_line": 81,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 31)",
            "(line 85,col 9)-(line 85,col 69)",
            "(line 88,col 9)-(line 88,col 71)",
            "(line 91,col 9)-(line 91,col 74)",
            "(line 92,col 9)-(line 92,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_all_mock_and_serializable_value_to_be_serialized()",
        "snippet": "    @Test\n    public void should_all_mock_and_serializable_value_to_be_serialized() throws Exception {\n        // given\n        List<?> value = Collections.emptyList();\n        when(imethodsMock.objectReturningMethodNoArgs()).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.objectReturningMethodNoArgs());\n    }",
        "begin_line": 95,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 48)",
            "(line 99,col 9)-(line 99,col 75)",
            "(line 102,col 9)-(line 102,col 71)",
            "(line 105,col 9)-(line 105,col 74)",
            "(line 106,col 9)-(line 106,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_method_call_with_parameters_that_are_serializable()",
        "snippet": "    @Test\n    public void should_serialize_method_call_with_parameters_that_are_serializable() throws Exception {\n        List<?> value = Collections.emptyList();\n        when(imethodsMock.objectArgMethod(value)).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.objectArgMethod(value));\n    }",
        "begin_line": 109,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 48)",
            "(line 112,col 9)-(line 112,col 68)",
            "(line 115,col 9)-(line 115,col 71)",
            "(line 118,col 9)-(line 118,col 74)",
            "(line 119,col 9)-(line 119,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_method_calls_using_any_string_matcher()",
        "snippet": "    @Test\n    public void should_serialize_method_calls_using_any_string_matcher() throws Exception {\n        List<?> value = Collections.emptyList();\n        when(imethodsMock.objectArgMethod(anyString())).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.objectArgMethod(\"\"));\n    }",
        "begin_line": 122,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 48)",
            "(line 125,col 9)-(line 125,col 74)",
            "(line 128,col 9)-(line 128,col 71)",
            "(line 131,col 9)-(line 131,col 74)",
            "(line 132,col 9)-(line 132,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_verify_called_n_times_for_serialized_mock()",
        "snippet": "    @Test\n    public void should_verify_called_n_times_for_serialized_mock() throws Exception {\n        List<?> value = Collections.emptyList();\n        when(imethodsMock.objectArgMethod(anyString())).thenReturn(value);\n        imethodsMock.objectArgMethod(\"\");\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        verify(readObject, times(1)).objectArgMethod(\"\");\n    }",
        "begin_line": 135,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 48)",
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 142,col 9)-(line 142,col 71)",
            "(line 145,col 9)-(line 145,col 74)",
            "(line 146,col 9)-(line 146,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_verify_even_if_some_methods_called_after_serialization()",
        "snippet": "    @Test\n    public void should_verify_even_if_some_methods_called_after_serialization() throws Exception {\n\n        // when\n        imethodsMock.simpleMethod(1);\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        readObject.simpleMethod(1);\n\n        // then\n        verify(readObject, times(2)).simpleMethod(1);\n\n        //this test is working because it seems that java serialization mechanism replaces all instances\n        //of serialized object in the object graph (if there are any)\n    }",
        "begin_line": 149,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 37)",
            "(line 154,col 9)-(line 154,col 71)",
            "(line 155,col 9)-(line 155,col 74)",
            "(line 156,col 9)-(line 156,col 35)",
            "(line 159,col 9)-(line 159,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.Bar.doSomething()",
        "snippet": "        public Foo doSomething() {\n            return foo;\n        }",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 169,col 13)-(line 169,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.Foo.Foo()",
        "snippet": "        Foo() {\n            bar = new Bar();\n            bar.foo = this;\n        }",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 176,col 13)-(line 176,col 28)",
            "(line 177,col 13)-(line 177,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialization_work()",
        "snippet": "    @Test\n    public void should_serialization_work() {}",
        "begin_line": 181,
        "end_line": 182,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_stub_even_if_some_methods_called_after_serialization()",
        "snippet": "    @Test\n    public void should_stub_even_if_some_methods_called_after_serialization() throws Exception {\n        //given\n        // when\n        when(imethodsMock.simpleMethod(1)).thenReturn(\"foo\");\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        when(readObject.simpleMethod(2)).thenReturn(\"bar\");\n\n        // then\n        assertEquals(\"foo\", readObject.simpleMethod(1));\n        assertEquals(\"bar\", readObject.simpleMethod(2));\n    }",
        "begin_line": 194,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 61)",
            "(line 199,col 9)-(line 199,col 71)",
            "(line 200,col 9)-(line 200,col 74)",
            "(line 201,col 9)-(line 201,col 59)",
            "(line 204,col 9)-(line 204,col 56)",
            "(line 205,col 9)-(line 205,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_verify_call_order_for_serialized_mock()",
        "snippet": "    @Test\n    public void should_verify_call_order_for_serialized_mock() throws Exception {\n        imethodsMock.arrayReturningMethod();\n        imethodsMock2.arrayReturningMethod();\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n        ByteArrayOutputStream serialized2 = serializeMock(imethodsMock2);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        IMethods readObject2 = deserializeMock(serialized2, IMethods.class);\n        InOrder inOrder = inOrder(readObject, readObject2);\n        inOrder.verify(readObject).arrayReturningMethod();\n        inOrder.verify(readObject2).arrayReturningMethod();\n    }",
        "begin_line": 208,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 44)",
            "(line 211,col 9)-(line 211,col 45)",
            "(line 214,col 9)-(line 214,col 71)",
            "(line 215,col 9)-(line 215,col 73)",
            "(line 218,col 9)-(line 218,col 74)",
            "(line 219,col 9)-(line 219,col 76)",
            "(line 220,col 9)-(line 220,col 59)",
            "(line 221,col 9)-(line 221,col 58)",
            "(line 222,col 9)-(line 222,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_remember_interactions_for_serialized_mock()",
        "snippet": "    @Test\n    public void should_remember_interactions_for_serialized_mock() throws Exception {\n        List<?> value = Collections.emptyList();\n        when(imethodsMock.objectArgMethod(anyString())).thenReturn(value);\n        imethodsMock.objectArgMethod(\"happened\");\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        verify(readObject, never()).objectArgMethod(\"never happened\");\n    }",
        "begin_line": 225,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 48)",
            "(line 228,col 9)-(line 228,col 74)",
            "(line 229,col 9)-(line 229,col 49)",
            "(line 232,col 9)-(line 232,col 71)",
            "(line 235,col 9)-(line 235,col 74)",
            "(line 236,col 9)-(line 236,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_with_stubbing_callback()",
        "snippet": "    @Test\n    public void should_serialize_with_stubbing_callback() throws Exception {\n\n        // given\n        CustomAnswersMustImplementSerializableForSerializationToWork answer = \n            new CustomAnswersMustImplementSerializableForSerializationToWork();\n        answer.string = \"return value\";\n        when(imethodsMock.objectArgMethod(anyString())).thenAnswer(answer);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(imethodsMock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(answer.string, readObject.objectArgMethod(\"\"));\n    }",
        "begin_line": 239,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 244,col 79)",
            "(line 245,col 9)-(line 245,col 39)",
            "(line 246,col 9)-(line 246,col 75)",
            "(line 249,col 9)-(line 249,col 71)",
            "(line 252,col 9)-(line 252,col 74)",
            "(line 253,col 9)-(line 253,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.CustomAnswersMustImplementSerializableForSerializationToWork.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "        public Object answer(InvocationOnMock invocation) throws Throwable {\n            invocation.getArguments();\n            invocation.getMock();\n            return string;\n        }",
        "begin_line": 259,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 260,col 13)-(line 260,col 38)",
            "(line 261,col 13)-(line 261,col 33)",
            "(line 262,col 13)-(line 262,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_with_real_object_spy()",
        "snippet": "    @Test\n    public void should_serialize_with_real_object_spy() throws Exception {\n        // given\n        List<Object> list = new ArrayList<Object>();\n        List<Object> spy = mock(ArrayList.class, withSettings()\n                        .spiedInstance(list)\n                        .defaultAnswer(CALLS_REAL_METHODS)\n                        .serializable());\n        when(spy.size()).thenReturn(100);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(spy);\n\n        // then\n        List<?> readObject = deserializeMock(serialized, List.class);\n        assertEquals(100, readObject.size());\n    }",
        "begin_line": 266,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 52)",
            "(line 270,col 9)-(line 273,col 41)",
            "(line 274,col 9)-(line 274,col 41)",
            "(line 277,col 9)-(line 277,col 62)",
            "(line 280,col 9)-(line 280,col 69)",
            "(line 281,col 9)-(line 281,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_object_mock()",
        "snippet": "    @Test\n    public void should_serialize_object_mock() {}",
        "begin_line": 284,
        "end_line": 285,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_real_partial_mock()",
        "snippet": "    @Test\n    public void should_serialize_real_partial_mock() {}",
        "begin_line": 296,
        "end_line": 297,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_already_serializable_class()",
        "snippet": "    @Test\n    public void should_serialize_already_serializable_class() throws Exception {\n        // given\n        when(alreadySerializableMock.toString()).thenReturn(\"foo\");\n\n        // when\n        alreadySerializableMock = serializeAndBack(alreadySerializableMock);\n\n        // then\n        assertEquals(\"foo\", alreadySerializableMock.toString());\n    }",
        "begin_line": 314,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 67)",
            "(line 320,col 9)-(line 320,col 76)",
            "(line 323,col 9)-(line 323,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_be_serialize_and_have_extra_interfaces()",
        "snippet": "    @Test\n    public void should_be_serialize_and_have_extra_interfaces() throws Exception {\n        //then\n        Assertions.assertThat((Object) serializeAndBack((List) imethodsWithExtraInterfacesMock))\n                .isInstanceOf(List.class)\n                .isInstanceOf(IMethods.class);\n    }",
        "begin_line": 326,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 331,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.NotSerializableAndNoDefaultConstructor.NotSerializableAndNoDefaultConstructor(java.util.Observable)",
        "snippet": "        NotSerializableAndNoDefaultConstructor(Observable o) { super(); }",
        "begin_line": 337,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 337,col 64)-(line 337,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_fail_when_serializable_used_with_type_that_dont_implements_Serializable_and_dont_declare_a_no_arg_constructor()",
        "snippet": "    @Test\n    public void should_fail_when_serializable_used_with_type_that_dont_implements_Serializable_and_dont_declare_a_no_arg_constructor() throws Exception {\n        try {\n            FailTestClass testClass = new FailTestClass();\n            MockitoAnnotations.initMocks(testClass);\n            serializeAndBack(testClass.notSerializableAndNoDefaultConstructor);\n            fail(\"should have thrown an exception to say the object is not serializable\");\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(NotSerializableAndNoDefaultConstructor.class.getSimpleName())\n                    .contains(\"serializable()\")\n                    .contains(\"implement Serializable\")\n                    .contains(\"no-arg constructor\");\n        }\n    }",
        "begin_line": 345,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 358,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.SerializableAndNoDefaultConstructor.SerializableAndNoDefaultConstructor(java.util.Observable)",
        "snippet": "        SerializableAndNoDefaultConstructor(Observable o) { super(); }",
        "begin_line": 364,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 364,col 61)-(line 364,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_be_able_to_serialize_type_that_implements_Serializable_but_but_dont_declare_a_no_arg_constructor()",
        "snippet": "    @Test\n    public void should_be_able_to_serialize_type_that_implements_Serializable_but_but_dont_declare_a_no_arg_constructor() throws Exception {\n        TestClassThatHoldValidField testClass = new TestClassThatHoldValidField();\n        MockitoAnnotations.initMocks(testClass);\n\n        serializeAndBack(testClass.serializableAndNoDefaultConstructor);\n    }",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 82)",
            "(line 375,col 9)-(line 375,col 48)",
            "(line 377,col 9)-(line 377,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_allow_throws_exception_to_be_serializable()",
        "snippet": "    @Test\n    public void should_allow_throws_exception_to_be_serializable() throws Exception {\n        // given\n        Bar mock = mock(Bar.class, new ThrowsException(new RuntimeException()));\n        // when-serialize then-deserialize\n        serializeAndBack(mock);\n    }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 80)",
            "(line 52,col 9)-(line 52,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_allow_method_delegation()",
        "snippet": "    @Test\n    public void should_allow_method_delegation() throws Exception {\n        // given\n        Bar barMock = mock(Bar.class, withSettings().serializable());\n        Foo fooMock = mock(Foo.class);\n        when(barMock.doSomething()).thenAnswer(new ThrowsException(new RuntimeException()));\n\n        //when-serialize then-deserialize\n        serializeAndBack(barMock);\n    }",
        "begin_line": 55,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 69)",
            "(line 59,col 9)-(line 59,col 38)",
            "(line 60,col 9)-(line 60,col 92)",
            "(line 63,col 9)-(line 63,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_allow_mock_to_be_serializable()",
        "snippet": "    @Test\n    public void should_allow_mock_to_be_serializable() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n\n        // when-serialize then-deserialize\n        serializeAndBack(mock);\n    }",
        "begin_line": 66,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 76)",
            "(line 72,col 9)-(line 72,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_allow_mock_and_boolean_value_to_serializable()",
        "snippet": "    @Test\n    public void should_allow_mock_and_boolean_value_to_serializable() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        when(mock.booleanReturningMethod()).thenReturn(true);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertTrue(readObject.booleanReturningMethod());\n    }",
        "begin_line": 75,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 76)",
            "(line 79,col 9)-(line 79,col 61)",
            "(line 82,col 9)-(line 82,col 63)",
            "(line 85,col 9)-(line 85,col 74)",
            "(line 86,col 9)-(line 86,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_allow_mock_and_string_value_to_be_serializable()",
        "snippet": "    @Test\n    public void should_allow_mock_and_string_value_to_be_serializable() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        String value = \"value\";\n        when(mock.stringReturningMethod()).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.stringReturningMethod());\n    }",
        "begin_line": 89,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 76)",
            "(line 93,col 9)-(line 93,col 31)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 97,col 9)-(line 97,col 63)",
            "(line 100,col 9)-(line 100,col 74)",
            "(line 101,col 9)-(line 101,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_all_mock_and_serializable_value_to_be_serialized()",
        "snippet": "    @Test\n    public void should_all_mock_and_serializable_value_to_be_serialized() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        List<?> value = Collections.emptyList();\n        when(mock.objectReturningMethodNoArgs()).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.objectReturningMethodNoArgs());\n    }",
        "begin_line": 104,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 76)",
            "(line 108,col 9)-(line 108,col 48)",
            "(line 109,col 9)-(line 109,col 67)",
            "(line 112,col 9)-(line 112,col 63)",
            "(line 115,col 9)-(line 115,col 74)",
            "(line 116,col 9)-(line 116,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_method_call_with_parameters_that_are_serializable()",
        "snippet": "    @Test\n    public void should_serialize_method_call_with_parameters_that_are_serializable() throws Exception {\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        List<?> value = Collections.emptyList();\n        when(mock.objectArgMethod(value)).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.objectArgMethod(value));\n    }",
        "begin_line": 119,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 76)",
            "(line 122,col 9)-(line 122,col 48)",
            "(line 123,col 9)-(line 123,col 60)",
            "(line 126,col 9)-(line 126,col 63)",
            "(line 129,col 9)-(line 129,col 74)",
            "(line 130,col 9)-(line 130,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_method_calls_using_any_string_matcher()",
        "snippet": "    @Test\n    public void should_serialize_method_calls_using_any_string_matcher() throws Exception {\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        List<?> value = Collections.emptyList();\n        when(mock.objectArgMethod(anyString())).thenReturn(value);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(value, readObject.objectArgMethod(\"\"));\n    }",
        "begin_line": 133,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 76)",
            "(line 136,col 9)-(line 136,col 48)",
            "(line 137,col 9)-(line 137,col 66)",
            "(line 140,col 9)-(line 140,col 63)",
            "(line 143,col 9)-(line 143,col 74)",
            "(line 144,col 9)-(line 144,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_verify_called_n_times_for_serialized_mock()",
        "snippet": "    @Test\n    public void should_verify_called_n_times_for_serialized_mock() throws Exception {\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        List<?> value = Collections.emptyList();\n        when(mock.objectArgMethod(anyString())).thenReturn(value);\n        mock.objectArgMethod(\"\");\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        verify(readObject, times(1)).objectArgMethod(\"\");\n    }",
        "begin_line": 147,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 76)",
            "(line 150,col 9)-(line 150,col 48)",
            "(line 151,col 9)-(line 151,col 66)",
            "(line 152,col 9)-(line 152,col 33)",
            "(line 155,col 9)-(line 155,col 63)",
            "(line 158,col 9)-(line 158,col 74)",
            "(line 159,col 9)-(line 159,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_verify_even_if_some_methods_called_after_serialization()",
        "snippet": "    @Test\n    public void should_verify_even_if_some_methods_called_after_serialization() throws Exception {\n        //given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n\n        // when\n        mock.simpleMethod(1);\n        ByteArrayOutputStream serialized = serializeMock(mock);\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        readObject.simpleMethod(1);\n\n        // then\n        verify(readObject, times(2)).simpleMethod(1);\n\n        //this test is working because it seems that java serialization mechanism replaces all instances\n        //of serialized object in the object graph (if there are any)\n    }",
        "begin_line": 162,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 76)",
            "(line 168,col 9)-(line 168,col 29)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 74)",
            "(line 171,col 9)-(line 171,col 35)",
            "(line 174,col 9)-(line 174,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.Bar.doSomething()",
        "snippet": "        public Foo doSomething() {\n            return foo;\n        }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 13)-(line 184,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.Foo.Foo()",
        "snippet": "        Foo() {\n            bar = new Bar();\n            bar.foo = this;\n        }",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 191,col 13)-(line 191,col 28)",
            "(line 192,col 13)-(line 192,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialization_work()",
        "snippet": "    @Test\n    public void should_serialization_work() throws Exception {\n        //given\n        Foo foo = new Foo();\n        //when\n        foo = serializeAndBack(foo);\n        //then\n        assertSame(foo, foo.bar.foo);\n    }",
        "begin_line": 196,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 28)",
            "(line 201,col 9)-(line 201,col 36)",
            "(line 203,col 9)-(line 203,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_stub_even_if_some_methods_called_after_serialization()",
        "snippet": "    @Test\n    public void should_stub_even_if_some_methods_called_after_serialization() throws Exception {\n        //given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n\n        // when\n        when(mock.simpleMethod(1)).thenReturn(\"foo\");\n        ByteArrayOutputStream serialized = serializeMock(mock);\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        when(readObject.simpleMethod(2)).thenReturn(\"bar\");\n\n        // then\n        assertEquals(\"foo\", readObject.simpleMethod(1));\n        assertEquals(\"bar\", readObject.simpleMethod(2));\n    }",
        "begin_line": 206,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 76)",
            "(line 212,col 9)-(line 212,col 53)",
            "(line 213,col 9)-(line 213,col 63)",
            "(line 214,col 9)-(line 214,col 74)",
            "(line 215,col 9)-(line 215,col 59)",
            "(line 218,col 9)-(line 218,col 56)",
            "(line 219,col 9)-(line 219,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_verify_call_order_for_serialized_mock()",
        "snippet": "    @Test\n    public void should_verify_call_order_for_serialized_mock() throws Exception {\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        IMethods mock2 = mock(IMethods.class, withSettings().serializable());\n        mock.arrayReturningMethod();\n        mock2.arrayReturningMethod();\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n        ByteArrayOutputStream serialized2 = serializeMock(mock2);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        IMethods readObject2 = deserializeMock(serialized2, IMethods.class);\n        InOrder inOrder = inOrder(readObject, readObject2);\n        inOrder.verify(readObject).arrayReturningMethod();\n        inOrder.verify(readObject2).arrayReturningMethod();\n    }",
        "begin_line": 222,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 76)",
            "(line 225,col 9)-(line 225,col 77)",
            "(line 226,col 9)-(line 226,col 36)",
            "(line 227,col 9)-(line 227,col 37)",
            "(line 230,col 9)-(line 230,col 63)",
            "(line 231,col 9)-(line 231,col 65)",
            "(line 234,col 9)-(line 234,col 74)",
            "(line 235,col 9)-(line 235,col 76)",
            "(line 236,col 9)-(line 236,col 59)",
            "(line 237,col 9)-(line 237,col 58)",
            "(line 238,col 9)-(line 238,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_remember_interactions_for_serialized_mock()",
        "snippet": "    @Test\n    public void should_remember_interactions_for_serialized_mock() throws Exception {\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        List<?> value = Collections.emptyList();\n        when(mock.objectArgMethod(anyString())).thenReturn(value);\n        mock.objectArgMethod(\"happened\");\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        verify(readObject, never()).objectArgMethod(\"never happened\");\n    }",
        "begin_line": 241,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 76)",
            "(line 244,col 9)-(line 244,col 48)",
            "(line 245,col 9)-(line 245,col 66)",
            "(line 246,col 9)-(line 246,col 41)",
            "(line 249,col 9)-(line 249,col 63)",
            "(line 252,col 9)-(line 252,col 74)",
            "(line 253,col 9)-(line 253,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_with_stubbing_callback()",
        "snippet": "    @Test\n    public void should_serialize_with_stubbing_callback() throws Exception {\n\n        // given\n        IMethods mock = mock(IMethods.class, withSettings().serializable());\n        CustomAnswersMustImplementSerializableForSerializationToWork answer =\n                new CustomAnswersMustImplementSerializableForSerializationToWork();\n        answer.string = \"return value\";\n        when(mock.objectArgMethod(anyString())).thenAnswer(answer);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(mock);\n\n        // then\n        IMethods readObject = deserializeMock(serialized, IMethods.class);\n        assertEquals(answer.string, readObject.objectArgMethod(\"\"));\n    }",
        "begin_line": 256,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 76)",
            "(line 261,col 9)-(line 262,col 83)",
            "(line 263,col 9)-(line 263,col 39)",
            "(line 264,col 9)-(line 264,col 67)",
            "(line 267,col 9)-(line 267,col 63)",
            "(line 270,col 9)-(line 270,col 74)",
            "(line 271,col 9)-(line 271,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.CustomAnswersMustImplementSerializableForSerializationToWork.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "        public Object answer(InvocationOnMock invocation) throws Throwable {\n            invocation.getArguments();\n            invocation.getMock();\n            return string;\n        }",
        "begin_line": 277,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 278,col 13)-(line 278,col 38)",
            "(line 279,col 13)-(line 279,col 33)",
            "(line 280,col 13)-(line 280,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_with_real_object_spy()",
        "snippet": "    @Test\n    public void should_serialize_with_real_object_spy() throws Exception {\n        // given\n        List<Object> list = new ArrayList<Object>();\n        List<Object> spy = mock(ArrayList.class, withSettings()\n                .spiedInstance(list)\n                .defaultAnswer(CALLS_REAL_METHODS)\n                .serializable());\n        when(spy.size()).thenReturn(100);\n\n        // when\n        ByteArrayOutputStream serialized = serializeMock(spy);\n\n        // then\n        List<?> readObject = deserializeMock(serialized, List.class);\n        assertEquals(100, readObject.size());\n    }",
        "begin_line": 284,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 52)",
            "(line 288,col 9)-(line 291,col 33)",
            "(line 292,col 9)-(line 292,col 41)",
            "(line 295,col 9)-(line 295,col 62)",
            "(line 298,col 9)-(line 298,col 69)",
            "(line 299,col 9)-(line 299,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_object_mock()",
        "snippet": "    @Test\n    public void should_serialize_object_mock() {}",
        "begin_line": 302,
        "end_line": 303,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_real_partial_mock()",
        "snippet": "    @Test\n    public void should_serialize_real_partial_mock() {}",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_serialize_already_serializable_class()",
        "snippet": "    @Test\n    public void should_serialize_already_serializable_class() throws Exception {\n        // given\n        AlreadySerializable mock = mock(AlreadySerializable.class, withSettings().serializable());\n        when(mock.toString()).thenReturn(\"foo\");\n\n        // when\n        mock = serializeAndBack(mock);\n\n        // then\n        assertEquals(\"foo\", mock.toString());\n    }",
        "begin_line": 336,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 98)",
            "(line 340,col 9)-(line 340,col 48)",
            "(line 343,col 9)-(line 343,col 38)",
            "(line 346,col 9)-(line 346,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_be_serialize_and_have_extra_interfaces()",
        "snippet": "    @Test\n    public void should_be_serialize_and_have_extra_interfaces() throws Exception {\n        //when\n        IMethods mock = mock(IMethods.class, withSettings().serializable().extraInterfaces(List.class));\n        IMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());\n\n        //then\n        Assertions.assertThat((Object) serializeAndBack((List) mock))\n                .isInstanceOf(List.class)\n                .isInstanceOf(IMethods.class);\n        Assertions.assertThat((Object) serializeAndBack((List) mockTwo))\n                .isInstanceOf(List.class)\n                .isInstanceOf(IMethods.class);\n    }",
        "begin_line": 349,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 104)",
            "(line 353,col 9)-(line 353,col 107)",
            "(line 356,col 9)-(line 358,col 46)",
            "(line 359,col 9)-(line 361,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.NotSerializableAndNoDefaultConstructor.NotSerializableAndNoDefaultConstructor(java.util.Observable)",
        "snippet": "        NotSerializableAndNoDefaultConstructor(Observable o) { super(); }",
        "begin_line": 367,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 367,col 64)-(line 367,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_fail_when_serializable_used_with_type_that_dont_implements_Serializable_and_dont_declare_a_no_arg_constructor()",
        "snippet": "    @Test\n    public void should_fail_when_serializable_used_with_type_that_dont_implements_Serializable_and_dont_declare_a_no_arg_constructor() throws Exception {\n        try {\n            serializeAndBack(mock(NotSerializableAndNoDefaultConstructor.class, withSettings().serializable()));\n            fail(\"should have thrown an exception to say the object is not serializable\");\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(NotSerializableAndNoDefaultConstructor.class.getSimpleName())\n                    .contains(\"serializable()\")\n                    .contains(\"implement Serializable\")\n                    .contains(\"no-arg constructor\");\n        }\n    }",
        "begin_line": 370,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 381,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.SerializableAndNoDefaultConstructor.SerializableAndNoDefaultConstructor(java.util.Observable)",
        "snippet": "        SerializableAndNoDefaultConstructor(Observable o) { super(); }",
        "begin_line": 387,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 387,col 61)-(line 387,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.should_be_able_to_serialize_type_that_implements_Serializable_but_but_dont_declare_a_no_arg_constructor()",
        "snippet": "    @Test\n    public void should_be_able_to_serialize_type_that_implements_Serializable_but_but_dont_declare_a_no_arg_constructor() throws Exception {\n        serializeAndBack(mock(SerializableAndNoDefaultConstructor.class));\n    }",
        "begin_line": 390,
        "end_line": 393,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.AClassWithPrivateNoArgConstructor.AClassWithPrivateNoArgConstructor()",
        "snippet": "        private AClassWithPrivateNoArgConstructor() {}",
        "begin_line": 398,
        "end_line": 398,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.AClassWithPrivateNoArgConstructor.returningSomething()",
        "snippet": "        List returningSomething() { return Collections.emptyList(); }",
        "begin_line": 399,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 399,col 37)-(line 399,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.private_constructor_currently_not_supported_at_the_moment_at_deserialization_time()",
        "snippet": "    @Test\n    public void private_constructor_currently_not_supported_at_the_moment_at_deserialization_time() throws Exception {\n        // given\n        AClassWithPrivateNoArgConstructor mockWithPrivateConstructor = Mockito.mock(\n                AClassWithPrivateNoArgConstructor.class,\n                Mockito.withSettings().serializable()\n        );\n\n        try {\n            // when\n            SimpleSerializationUtil.serializeAndBack(mockWithPrivateConstructor);\n            fail(\"should have thrown an ObjectStreamException or a subclass of it\");\n        } catch (ObjectStreamException e) {\n            // then\n            Assertions.assertThat(e.toString()).contains(\"no valid constructor\");\n        }\n    }",
        "begin_line": 402,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 408,col 10)",
            "(line 410,col 9)-(line 417,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksSerializationTest.java",
        "signature": "org.mockitousage.basicapi.MocksSerializationTest.BUG_ISSUE_399_try_some_mocks_with_current_answers()",
        "snippet": "    @Test\n    public void BUG_ISSUE_399_try_some_mocks_with_current_answers() throws Exception {\n        IMethods iMethods = mock(IMethods.class, withSettings().serializable().defaultAnswer(RETURNS_DEEP_STUBS));\n\n        when(iMethods.iMethodsReturningMethod().linkedListReturningMethod().contains(anyString())).thenReturn(false);\n\n        serializeAndBack(iMethods);\n    }",
        "begin_line": 421,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 114)",
            "(line 425,col 9)-(line 425,col 117)",
            "(line 427,col 9)-(line 427,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldProvideMockyImplementationOfToString()",
        "snippet": "    @Test\n    public void shouldProvideMockyImplementationOfToString() {\n        DummyClass dummyClass = Mockito.mock(DummyClass.class);\n        assertEquals(\"Mock for DummyClass, hashCode: \" + dummyClass.hashCode(), dummyClass.toString());\n        DummyInterface dummyInterface = Mockito.mock(DummyInterface.class);\n        assertEquals(\"Mock for DummyInterface, hashCode: \" + dummyInterface.hashCode(), dummyInterface.toString());\n    }",
        "begin_line": 19,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 63)",
            "(line 22,col 9)-(line 22,col 103)",
            "(line 23,col 9)-(line 23,col 75)",
            "(line 24,col 9)-(line 24,col 115)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldReplaceObjectMethods()",
        "snippet": "    @Test\n    public void shouldReplaceObjectMethods() {}",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldReplaceObjectMethodsWhenOverridden()",
        "snippet": "    @Test\n    public void shouldReplaceObjectMethodsWhenOverridden() {}",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.ObjectMethodsOverridden.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            throw new RuntimeException(\"Should not be called. MethodInterceptorFilter provides implementation\");\n        }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 112)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.ObjectMethodsOverridden.hashCode()",
        "snippet": "        public int hashCode() {\n            throw new RuntimeException(\"Should not be called. MethodInterceptorFilter provides implementation\");\n        }",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 13)-(line 64,col 112)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java",
        "signature": "org.mockitousage.basicapi.ReplacingObjectMethodsTest.ObjectMethodsOverridden.toString()",
        "snippet": "        public String toString() {\n            throw new RuntimeException(\"Should not be called. MethodInterceptorFilter provides implementation\");\n        }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 13)-(line 67,col 112)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingDetailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingDetailsTest.java",
        "signature": "org.mockitousage.basicapi.MockingDetailsTest.should_know_spy()",
        "snippet": "    @Test\n    public void should_know_spy(){\n        assertTrue(mockingDetails(annotatedSpy).isMock());\n        assertTrue(mockingDetails(spy( new TestClass())).isMock());\n        assertTrue(mockingDetails(spy(TestClass.class)).isMock());\n        assertTrue(mockingDetails(mock(TestClass.class, withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS))).isMock());\n\n        assertTrue(mockingDetails(annotatedSpy).isSpy());\n        assertTrue(mockingDetails(spy( new TestClass())).isSpy());\n        assertTrue(mockingDetails(spy(TestClass.class)).isSpy());\n        assertTrue(mockingDetails(mock(TestClass.class, withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS))).isSpy());\n    }",
        "begin_line": 22,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 58)",
            "(line 25,col 9)-(line 25,col 67)",
            "(line 26,col 9)-(line 26,col 66)",
            "(line 27,col 9)-(line 27,col 125)",
            "(line 29,col 9)-(line 29,col 57)",
            "(line 30,col 9)-(line 30,col 66)",
            "(line 31,col 9)-(line 31,col 65)",
            "(line 32,col 9)-(line 32,col 124)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingDetailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingDetailsTest.java",
        "signature": "org.mockitousage.basicapi.MockingDetailsTest.should_know_mock()",
        "snippet": "    @Test\n    public void should_know_mock(){\n        assertTrue(mockingDetails(annotatedMock).isMock());\n        assertTrue(mockingDetails(mock(TestClass.class)).isMock());\n\n        assertFalse(mockingDetails(annotatedMock).isSpy());\n        assertFalse(mockingDetails(mock(TestClass.class)).isSpy());\n    }",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 59)",
            "(line 38,col 9)-(line 38,col 67)",
            "(line 40,col 9)-(line 40,col 59)",
            "(line 41,col 9)-(line 41,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingDetailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingDetailsTest.java",
        "signature": "org.mockitousage.basicapi.MockingDetailsTest.should_handle_non_mocks()",
        "snippet": "    @Test\n    public void should_handle_non_mocks() {\n        assertFalse(mockingDetails(\"non mock\").isSpy());\n        assertFalse(mockingDetails(\"non mock\").isMock());\n\n        assertFalse(mockingDetails(null).isSpy());\n        assertFalse(mockingDetails(null).isMock());\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 56)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 49,col 9)-(line 49,col 50)",
            "(line 50,col 9)-(line 50,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldCreateMockWhenConstructorIsPrivate()",
        "snippet": "    @Test\n    public void shouldCreateMockWhenConstructorIsPrivate() {\n        assertNotNull(Mockito.mock(HasPrivateConstructor.class));\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldCombineMockNameAndSmartNulls()",
        "snippet": "    @Test\n    public void shouldCombineMockNameAndSmartNulls() {\n        //given\n        IMethods mock = mock(IMethods.class, withSettings()\n            .defaultAnswer(RETURNS_SMART_NULLS)\n            .name(\"great mockie\"));    \n        \n        //when\n        IMethods smartNull = mock.iMethodsReturningMethod();\n        String name = mock.toString();\n        \n        //then\n        assertContains(\"great mockie\", name);\n        //and\n        try {\n            smartNull.simpleMethod();\n            fail();\n        } catch(SmartNullPointerException e) {}\n    }",
        "begin_line": 32,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 37,col 35)",
            "(line 40,col 9)-(line 40,col 60)",
            "(line 41,col 9)-(line 41,col 38)",
            "(line 44,col 9)-(line 44,col 45)",
            "(line 46,col 9)-(line 49,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldCombineMockNameAndExtraInterfaces()",
        "snippet": "    @Test\n    public void shouldCombineMockNameAndExtraInterfaces() {}",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldSpecifyMockNameViaSettings()",
        "snippet": "    @Test\n    public void shouldSpecifyMockNameViaSettings() {\n        //given\n        IMethods mock = mock(IMethods.class, withSettings().name(\"great mockie\"));\n\n        //when\n        String name = mock.toString();\n        \n        //then\n        assertContains(\"great mockie\", name);\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 82)",
            "(line 77,col 9)-(line 77,col 38)",
            "(line 80,col 9)-(line 80,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldScreamWhenSpyCreatedWithWrongType()",
        "snippet": "    @Test\n    public void shouldScreamWhenSpyCreatedWithWrongType() {\n        //given\n        List list = new LinkedList();\n        try {\n            //when\n            mock(List.class, withSettings().spiedInstance(list));\n            fail();\n            //then\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 83,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 37)",
            "(line 87,col 9)-(line 92,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldAllowCreatingSpiesWithCorrectType()",
        "snippet": "    @Test\n    public void shouldAllowCreatingSpiesWithCorrectType() {\n        List list = new LinkedList();\n        mock(LinkedList.class, withSettings().spiedInstance(list));\n    }",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 98,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MocksCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MocksCreationTest.java",
        "signature": "org.mockitousage.basicapi.MocksCreationTest.shouldAllowInlineMockCreation()",
        "snippet": "    @Test\n    public void shouldAllowInlineMockCreation() throws Exception {\n        when(mock(Set.class).isEmpty()).thenReturn(false);\n    }",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ObjectsSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ObjectsSerializationTest.java",
        "signature": "org.mockitousage.basicapi.ObjectsSerializationTest.Foo.Foo()",
        "snippet": "        Foo() {\n            bar = new Bar();\n            bar.foo = this;\n        }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 13)-(line 31,col 28)",
            "(line 32,col 13)-(line 32,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ObjectsSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ObjectsSerializationTest.java",
        "signature": "org.mockitousage.basicapi.ObjectsSerializationTest.shouldSerializationWork()",
        "snippet": "    @Test\n    public void shouldSerializationWork() throws Exception {\n        //given\n        Foo foo = new Foo();\n        //when\n        foo = serializeAndBack(foo);\n        //then\n        assertSame(foo, foo.bar.foo);\n    }",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 28)",
            "(line 41,col 9)-(line 41,col 36)",
            "(line 43,col 9)-(line 43,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withStringVarargs(int, java.lang.String...)",
        "snippet": "        void withStringVarargs(int value, String... s);",
        "begin_line": 23,
        "end_line": 23,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withStringVarargsReturningString(int, java.lang.String...)",
        "snippet": "        String withStringVarargsReturningString(int value, String... s);",
        "begin_line": 24,
        "end_line": 24,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withObjectVarargs(int, java.lang.Object...)",
        "snippet": "        void withObjectVarargs(int value, Object... o);",
        "begin_line": 25,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.withBooleanVarargs(int, boolean...)",
        "snippet": "        boolean withBooleanVarargs(int value, boolean... b);",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.IVarArgs.foo(java.lang.Object...)",
        "snippet": "        int foo(Object ... objects);",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubStringVarargs()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void shouldStubStringVarargs() {\n        when(mock.withStringVarargsReturningString(1)).thenReturn(\"1\");\n        when(mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\")).thenReturn(\"2\");\n        \n        RuntimeException expected = new RuntimeException();\n        stubVoid(mock).toThrow(expected).on().withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n\n        assertEquals(\"1\", mock.withStringVarargsReturningString(1));\n        assertEquals(null, mock.withStringVarargsReturningString(2));\n        \n        assertEquals(\"2\", mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\"));\n        assertEquals(null, mock.withStringVarargsReturningString(2, \"1\", \"2\"));\n        assertEquals(null, mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\", \"4\"));\n        assertEquals(null, mock.withStringVarargsReturningString(2, \"1\", \"2\", \"9999\"));\n        \n        mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"9999\");\n        mock.withStringVarargs(9999, \"1\", \"2\", \"3\", \"4\");\n        \n        try {\n            mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n            fail();\n        } catch (Exception e) {\n            assertEquals(expected, e);\n        }\n    }",
        "begin_line": 32,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 71)",
            "(line 36,col 9)-(line 36,col 86)",
            "(line 38,col 9)-(line 38,col 59)",
            "(line 39,col 9)-(line 39,col 87)",
            "(line 41,col 9)-(line 41,col 68)",
            "(line 42,col 9)-(line 42,col 69)",
            "(line 44,col 9)-(line 44,col 83)",
            "(line 45,col 9)-(line 45,col 79)",
            "(line 46,col 9)-(line 46,col 89)",
            "(line 47,col 9)-(line 47,col 87)",
            "(line 49,col 9)-(line 49,col 57)",
            "(line 50,col 9)-(line 50,col 57)",
            "(line 52,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubBooleanVarargs()",
        "snippet": "    @Test\n    public void shouldStubBooleanVarargs() {\n        when(mock.withBooleanVarargs(1)).thenReturn(true);\n        when(mock.withBooleanVarargs(1, true, false)).thenReturn(true);\n        \n        assertEquals(true, mock.withBooleanVarargs(1));\n        assertEquals(false, mock.withBooleanVarargs(9999));\n        \n        assertEquals(true, mock.withBooleanVarargs(1, true, false));\n        assertEquals(false, mock.withBooleanVarargs(1, true, false, true));\n        assertEquals(false, mock.withBooleanVarargs(2, true, false));\n        assertEquals(false, mock.withBooleanVarargs(1, true));\n        assertEquals(false, mock.withBooleanVarargs(1, false, false));\n    }",
        "begin_line": 60,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 58)",
            "(line 63,col 9)-(line 63,col 71)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 59)",
            "(line 68,col 9)-(line 68,col 68)",
            "(line 69,col 9)-(line 69,col 75)",
            "(line 70,col 9)-(line 70,col 69)",
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyStringVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyStringVarargs() {\n        mock.withStringVarargs(1);\n        mock.withStringVarargs(2, \"1\", \"2\", \"3\");\n        mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n\n        verify(mock).withStringVarargs(1);\n        verify(mock).withStringVarargs(2, \"1\", \"2\", \"3\");\n        try {\n            verify(mock).withStringVarargs(2, \"1\", \"2\", \"79\", \"4\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n    }",
        "begin_line": 75,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 34)",
            "(line 78,col 9)-(line 78,col 49)",
            "(line 79,col 9)-(line 79,col 54)",
            "(line 81,col 9)-(line 81,col 42)",
            "(line 82,col 9)-(line 82,col 57)",
            "(line 83,col 9)-(line 86,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyObjectVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyObjectVarargs() {\n        mock.withObjectVarargs(1);\n        mock.withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n        mock.withObjectVarargs(3, new Integer(1));\n\n        verify(mock).withObjectVarargs(1);\n        verify(mock).withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 89,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 80)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 95,col 9)-(line 95,col 42)",
            "(line 96,col 9)-(line 96,col 88)",
            "(line 97,col 9)-(line 100,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyBooleanVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyBooleanVarargs() {\n        mock.withBooleanVarargs(1);\n        mock.withBooleanVarargs(2, true, false, true);\n        mock.withBooleanVarargs(3, true, true, true);\n\n        verify(mock).withBooleanVarargs(1);\n        verify(mock).withBooleanVarargs(2, true, false, true);\n        try {\n            verify(mock).withBooleanVarargs(3, true, true, true, true);\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n    }",
        "begin_line": 103,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 106,col 54)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 109,col 9)-(line 109,col 43)",
            "(line 110,col 9)-(line 110,col 62)",
            "(line 111,col 9)-(line 114,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithAnyObject()",
        "snippet": "    @Test\n    public void shouldVerifyWithAnyObject() {\n        Foo foo = Mockito.mock(Foo.class);\n        foo.varArgs(\"\");        \n        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n        Mockito.verify(foo).varArgs((String) Mockito.anyObject());\n    }   ",
        "begin_line": 117,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 42)",
            "(line 120,col 9)-(line 120,col 24)",
            "(line 121,col 9)-(line 121,col 68)",
            "(line 122,col 9)-(line 122,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithNullVarArgArray()",
        "snippet": "    @Test\n    public void shouldVerifyWithNullVarArgArray() {\n        Foo foo = Mockito.mock(Foo.class);\n        foo.varArgs((String[]) null);    \n        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n        Mockito.verify(foo).varArgs((String[]) null);\n    }  ",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 42)",
            "(line 128,col 9)-(line 128,col 37)",
            "(line 129,col 9)-(line 129,col 68)",
            "(line 130,col 9)-(line 130,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.Foo.varArgs(java.lang.String...)",
        "snippet": "        public void varArgs(String... args) {}       ",
        "begin_line": 134,
        "end_line": 134,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.MixedVarargs.doSomething(java.lang.String, java.lang.String...)",
        "snippet": "        String doSomething(String one, String... varargs);",
        "begin_line": 138,
        "end_line": 138,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.MixedVarargs.doSomething(java.lang.String, java.lang.String, java.lang.String...)",
        "snippet": "        String doSomething(String one, String two, String... varargs);",
        "begin_line": 139,
        "end_line": 139,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubCorrectlyWhenMixedVarargsUsed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    //See bug #31\n    public void shouldStubCorrectlyWhenMixedVarargsUsed() {\n        MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n        when(mixedVarargs.doSomething(\"hello\", (String[])null)).thenReturn(\"hello\");\n        when(mixedVarargs.doSomething(\"goodbye\", (String[])null)).thenReturn(\"goodbye\");\n\n        String result = mixedVarargs.doSomething(\"hello\",(String[]) null);\n        assertEquals(\"hello\", result);\n        \n        verify(mixedVarargs).doSomething(\"hello\", (String[])null);\n    }",
        "begin_line": 142,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 61)",
            "(line 147,col 9)-(line 147,col 84)",
            "(line 148,col 9)-(line 148,col 88)",
            "(line 150,col 9)-(line 150,col 74)",
            "(line 151,col 9)-(line 151,col 38)",
            "(line 153,col 9)-(line 153,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed() {\n        MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n        when(mixedVarargs.doSomething(\"one\", \"two\", (String[])null)).thenReturn(\"hello\");\n        when(mixedVarargs.doSomething(\"1\", \"2\", (String[])null)).thenReturn(\"goodbye\");\n\n        String result = mixedVarargs.doSomething(\"one\", \"two\", (String[])null);\n        assertEquals(\"hello\", result);\n    }",
        "begin_line": 156,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 61)",
            "(line 160,col 9)-(line 160,col 89)",
            "(line 161,col 9)-(line 161,col 87)",
            "(line 163,col 9)-(line 163,col 79)",
            "(line 164,col 9)-(line 164,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.UsingVarargsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/UsingVarargsTest.java",
        "signature": "org.mockitousage.basicapi.UsingVarargsTest.shouldMatchEasilyEmptyVararg()",
        "snippet": "    @Test\n    //See bug #157\n    public void shouldMatchEasilyEmptyVararg() throws Exception {\n        //when\n        when(mock.foo(anyVararg())).thenReturn(-1);\n\n        //then\n        assertEquals(-1, mock.foo());\n    } ",
        "begin_line": 167,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 51)",
            "(line 174,col 9)-(line 174,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_allow_multiple_interfaces()",
        "snippet": "    @Test\n    public void should_allow_multiple_interfaces() {\n        //when\n        Foo mock = mock(Foo.class, withSettings().extraInterfaces(IFoo.class, IBar.class));\n        \n        //then\n        assertThat(mock).isInstanceOf(IFoo.class);\n        assertThat(mock).isInstanceOf(IBar.class);\n    }",
        "begin_line": 25,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 91)",
            "(line 31,col 9)-(line 31,col 50)",
            "(line 32,col 9)-(line 32,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_scream_when_null_passed_instead_of_an_interface()",
        "snippet": "    @Test\n    public void should_scream_when_null_passed_instead_of_an_interface() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces(IFoo.class, null));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertThat(e.getMessage()).contains(\"extraInterfaces() does not accept null parameters\");\n        }\n    }",
        "begin_line": 35,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_scream_when_no_args_passed()",
        "snippet": "    @Test\n    public void should_scream_when_no_args_passed() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces());\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertThat(e.getMessage()).contains(\"extraInterfaces() requires at least one interface\");\n        }\n    }",
        "begin_line": 47,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 56,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_scream_when_null_passed_instead_of_an_array()",
        "snippet": "    @Test\n    public void should_scream_when_null_passed_instead_of_an_array() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces((Class[]) null));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertThat(e.getMessage()).contains(\"extraInterfaces() requires at least one interface\");\n        }\n    }",
        "begin_line": 59,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 68,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_scream_when_non_interface_passed()",
        "snippet": "    @Test\n    public void should_scream_when_non_interface_passed() {\n        try {\n            //when\n            mock(Foo.class, withSettings().extraInterfaces(Foo.class));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertThat(e.getMessage()).contains(\"Foo which is not an interface\");\n        }\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 80,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_scream_when_the_same_interfaces_passed()",
        "snippet": "    @Test\n    public void should_scream_when_the_same_interfaces_passed() {\n        try {\n            //when\n            mock(IMethods.class, withSettings().extraInterfaces(IMethods.class));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertThat(e.getMessage()).contains(\"You mocked following type: IMethods\");\n        }\n    }",
        "begin_line": 83,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 92,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.MockingMultipleInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java",
        "signature": "org.mockitousage.basicapi.MockingMultipleInterfacesTest.should_mock_class_with_interfaces_of_different_class_loader_AND_different_classpaths()",
        "snippet": "    @Test\n    public void should_mock_class_with_interfaces_of_different_class_loader_AND_different_classpaths() throws ClassNotFoundException {\n        // Note : if classes are in the same classpath, SearchingClassLoader can find the class/classes and load them in the first matching classloader\n        Class<?> interface1 = inMemoryClassLoader()\n                .withClassDefinition(\"test.Interface1\", makeMarkerInterface(\"test.Interface1\"))\n                .build()\n                .loadClass(\"test.Interface1\");\n        Class<?> interface2 = inMemoryClassLoader()\n                .withClassDefinition(\"test.Interface2\", makeMarkerInterface(\"test.Interface2\"))\n                .build()\n                .loadClass(\"test.Interface2\");\n\n        Object mocked = mock(interface1, withSettings().extraInterfaces(interface2));\n        assertThat(interface2.isInstance(mocked)).describedAs(\"mock should be assignable from interface2 type\").isTrue();\n    }",
        "begin_line": 96,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 102,col 46)",
            "(line 103,col 9)-(line 106,col 46)",
            "(line 108,col 9)-(line 108,col 85)",
            "(line 109,col 9)-(line 109,col 121)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldResetOngoingStubbingSoThatMoreMeaningfulExceptionsAreRaised()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingSoThatMoreMeaningfulExceptionsAreRaised() {\n        mock(IMethods.class);\n        mock.booleanReturningMethod();\n        reset(mock);\n        try {\n            when(null).thenReturn(\"anything\");\n            fail();\n        } catch (MissingMethodInvocationException e) {\n        }\n    }",
        "begin_line": 23,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 29)",
            "(line 26,col 9)-(line 26,col 38)",
            "(line 27,col 9)-(line 27,col 20)",
            "(line 28,col 9)-(line 32,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.resettingNonMockIsSafe()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void resettingNonMockIsSafe() {\n        reset(\"\");\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 18)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.resettingNullIsSafe()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void resettingNullIsSafe() {\n        reset(new Object[] {null});\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldRemoveAllStubbing()",
        "snippet": "    @Test\n    public void shouldRemoveAllStubbing() throws Exception {\n        when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);\n        when(mock.objectReturningMethod(200)).thenReturn(200);\n        reset(mock);\n        assertNull(mock.objectReturningMethod(200));\n        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 77)",
            "(line 48,col 9)-(line 48,col 62)",
            "(line 49,col 9)-(line 49,col 20)",
            "(line 50,col 9)-(line 50,col 52)",
            "(line 51,col 9)-(line 51,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldRemoveAllInteractions()",
        "snippet": "    @Test\n    public void shouldRemoveAllInteractions() throws Exception {\n        mock.simpleMethod(1);\n        reset(mock);\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 29)",
            "(line 57,col 9)-(line 57,col 20)",
            "(line 58,col 9)-(line 58,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldRemoveStubbingToString()",
        "snippet": "    @Test\n    public void shouldRemoveStubbingToString() throws Exception {\n        IMethods mockTwo = mock(IMethods.class);\n        when(mockTwo.toString()).thenReturn(\"test\");\n        reset(mockTwo);\n        assertContains(\"Mock for IMethods\", mockTwo.toString());\n    }",
        "begin_line": 61,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 48)",
            "(line 64,col 9)-(line 64,col 52)",
            "(line 65,col 9)-(line 65,col 23)",
            "(line 66,col 9)-(line 66,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldStubbingNotBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingNotBeTreatedAsInteraction() {\n        when(mock.simpleMethod(\"one\")).thenThrow(new RuntimeException());\n        doThrow(new RuntimeException()).when(mock).simpleMethod(\"two\");\n        reset(mock);\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 73)",
            "(line 72,col 9)-(line 72,col 71)",
            "(line 73,col 9)-(line 73,col 20)",
            "(line 74,col 9)-(line 74,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldNotAffectMockName()",
        "snippet": "    @Test\n    public void shouldNotAffectMockName() {\n        IMethods mock = mock(IMethods.class, \"mockie\");\n        IMethods mockTwo = mock(IMethods.class);\n        reset(mock);\n        assertContains(\"Mock for IMethods\", \"\" + mockTwo);\n        assertEquals(\"mockie\", \"\" + mock);\n    }",
        "begin_line": 77,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 55)",
            "(line 80,col 9)-(line 80,col 48)",
            "(line 81,col 9)-(line 81,col 20)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldResetMultipleMocks()",
        "snippet": "    @Test\n    public void shouldResetMultipleMocks() {\n        mock.simpleMethod();\n        mockTwo.simpleMethod();\n        reset(mock, mockTwo);\n        verifyNoMoreInteractions(mock, mockTwo);\n    }",
        "begin_line": 86,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 28)",
            "(line 89,col 9)-(line 89,col 31)",
            "(line 90,col 9)-(line 90,col 29)",
            "(line 91,col 9)-(line 91,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldValidateStateWhenResetting()",
        "snippet": "    @Test\n    public void shouldValidateStateWhenResetting() {\n        //invalid verify:\n        verify(mock);\n        \n        try {\n            reset(mockTwo);\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 21)",
            "(line 99,col 9)-(line 102,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.basicapi.ResetTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/basicapi/ResetTest.java",
        "signature": "org.mockitousage.basicapi.ResetTest.shouldMaintainPreviousDefaultAnswer()",
        "snippet": "    @Test\n    public void shouldMaintainPreviousDefaultAnswer() {\n        //given\n        mock = mock(IMethods.class, RETURNS_MOCKS);\n        //when\n        reset(mock);\n        //then\n        assertNotNull(mock.iMethodsReturningMethod());\n    }",
        "begin_line": 105,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 51)",
            "(line 110,col 9)-(line 110,col 20)",
            "(line 112,col 9)-(line 112,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Boo.withLong(long)",
        "snippet": "        public void withLong(long x) {\n        }",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Boo.withLongAndInt(long, int)",
        "snippet": "        public void withLongAndInt(long x, int y) {\n        }",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotReportArgumentTypesWhenToStringIsTheSame()",
        "snippet": "    @Test\n    public void shouldNotReportArgumentTypesWhenToStringIsTheSame() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLong(100);\n        \n        try {\n            //when\n            verify(boo).withLong(eq(100));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLong((Integer) 100);\", e.getMessage());\n            assertContains(\"withLong((Long) 100);\", e.getMessage());\n        }\n    }",
        "begin_line": 26,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 34)",
            "(line 30,col 9)-(line 30,col 26)",
            "(line 32,col 9)-(line 40,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch()",
        "snippet": "    @Test\n    public void shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLongAndInt(100, 200);\n        \n        try {\n            //when\n            verify(boo).withLongAndInt(eq(100), eq(200));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLongAndInt((Integer) 100, 200)\", e.getMessage());\n            assertContains(\"withLongAndInt((Long) 100, 200)\", e.getMessage());\n        }\n    }",
        "begin_line": 43,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 34)",
            "(line 47,col 9)-(line 47,col 37)",
            "(line 49,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent()",
        "snippet": "    @Test\n    public void shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLongAndInt(100, 200);\n        \n        try {\n            //when\n            verify(boo).withLongAndInt(eq(100), any(Integer.class));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLongAndInt((Long) 100, 200)\", e.getMessage());\n            assertContains(\"withLongAndInt((Integer) 100, <any>\", e.getMessage());\n        }\n    }",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 34)",
            "(line 64,col 9)-(line 64,col 37)",
            "(line 66,col 9)-(line 74,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotShowTypesWhenArgumentValueIsDifferent()",
        "snippet": "    @Test\n    public void shouldNotShowTypesWhenArgumentValueIsDifferent() throws Exception {\n        //given\n        Boo boo = mock(Boo.class);\n        boo.withLongAndInt(100, 200);\n        \n        try {\n            //when\n            verify(boo).withLongAndInt(eq(100L), eq(230));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"withLongAndInt(100, 200)\", e.getMessage());\n            assertContains(\"withLongAndInt(100, 230)\", e.getMessage());\n        }\n    }",
        "begin_line": 77,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 34)",
            "(line 81,col 9)-(line 81,col 37)",
            "(line 83,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.Foo(int)",
        "snippet": "        public Foo(int x) {\n            this.x = x;\n        }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 13)-(line 99,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj) {\n            return x == ((Foo) obj).x;\n        }",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 13)-(line 103,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 13)-(line 107,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.Foo.toString()",
        "snippet": "        public String toString() {\n            return \"foo\";\n        }",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 13)-(line 111,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java",
        "signature": "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult()",
        "snippet": "    @Test\n    public void shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult() throws Exception {\n        //given\n        IMethods mock = mock(IMethods.class);\n        mock.simpleMethod(new Foo(10));\n        \n        try {\n            //when\n            verify(mock).simpleMethod(new Foo(20));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            //then\n            assertContains(\"simpleMethod(foo)\", e.getMessage());\n        }\n    }",
        "begin_line": 115,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 39)",
            "(line 121,col 9)-(line 128,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtLeastXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtLeastXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtLeastXVerificationTest.shouldVerifyAtLeastXTimes()",
        "snippet": "    @Test\n    public void shouldVerifyAtLeastXTimes() throws Exception {\n        //when\n        mock.clear();\n        mock.clear();\n        mock.clear();\n\n        //then\n        verify(mock, atLeast(2)).clear();\n    }",
        "begin_line": 22,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 21)",
            "(line 26,col 9)-(line 26,col 21)",
            "(line 27,col 9)-(line 27,col 21)",
            "(line 30,col 9)-(line 30,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtLeastXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtLeastXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtLeastXVerificationTest.shouldFailVerifiationAtLeastXTimes()",
        "snippet": "    @Test\n    public void shouldFailVerifiationAtLeastXTimes() throws Exception {\n        mock.add(\"one\");\n        verify(mock, atLeast(1)).add(anyString());\n\n        try {\n            verify(mock, atLeast(2)).add(anyString());\n            fail();\n        } catch (MockitoAssertionError e) {}\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 24)",
            "(line 36,col 9)-(line 36,col 50)",
            "(line 38,col 9)-(line 41,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtLeastXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtLeastXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtLeastXVerificationTest.shouldAllowAtLeastZeroForTheSakeOfVerifyNoMoreInteractionsSometimes()",
        "snippet": "    @Test\n    public void shouldAllowAtLeastZeroForTheSakeOfVerifyNoMoreInteractionsSometimes() throws Exception {\n        //when\n        mock.add(\"one\");\n        mock.clear();\n\n        //then\n        verify(mock, atLeast(0)).add(\"one\");\n        verify(mock, atLeast(0)).clear();\n\n        verifyNoMoreInteractions(mock);        \n    }",
        "begin_line": 44,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 24)",
            "(line 48,col 9)-(line 48,col 21)",
            "(line 51,col 9)-(line 51,col 44)",
            "(line 52,col 9)-(line 52,col 41)",
            "(line 54,col 9)-(line 54,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        one = Mockito.mock(IMethods.class);\n        two = Mockito.mock(IMethods.class);\n        three = Mockito.mock(IMethods.class);\n        \n        one.simpleMethod(1);\n        one.simpleMethod(11);\n        two.simpleMethod(2);\n        two.simpleMethod(2);\n        three.simpleMethod(3);\n        \n        inOrder = inOrder(one, two, three);\n    }",
        "begin_line": 27,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 43)",
            "(line 30,col 9)-(line 30,col 43)",
            "(line 31,col 9)-(line 31,col 45)",
            "(line 33,col 9)-(line 33,col 28)",
            "(line 34,col 9)-(line 34,col 29)",
            "(line 35,col 9)-(line 35,col 28)",
            "(line 36,col 9)-(line 36,col 28)",
            "(line 37,col 9)-(line 37,col 30)",
            "(line 39,col 9)-(line 39,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowBothWantedAndPrevious()",
        "snippet": "    @Test\n    public void shouldPrintVerificationInOrderErrorAndShowBothWantedAndPrevious() {\n        inOrder.verify(one).simpleMethod(1);\n        inOrder.verify(two, atLeastOnce()).simpleMethod(2);\n        \n        try {\n            inOrder.verify(one, atLeastOnce()).simpleMethod(11);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String expected = \n                    \"\\n\" +\n                    \"Verification in order failure\" +\n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(11);\" +\n                    \"\\n\" +\n                    \"-> at \"; \n            \n            assertContains(expected, e.getMessage());\n            \n            String expectedCause = \n                \"\\n\" +\n                \"Wanted anywhere AFTER following interaction:\" +\n                \"\\n\" +\n                \"iMethods.simpleMethod(2);\" +\n                \"\\n\" +\n                \"-> at \";\n            \n            assertContains(expectedCause, e.getMessage());\n        }\n    }  ",
        "begin_line": 42,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 44)",
            "(line 45,col 9)-(line 45,col 59)",
            "(line 47,col 9)-(line 72,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowWantedOnly()",
        "snippet": "    @Test\n    public void shouldPrintVerificationInOrderErrorAndShowWantedOnly() {\n        try {\n            inOrder.verify(one).differentMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            String expected = \n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.differentMethod();\" +\n                    \"\\n\" +\n                    \"-> at\"; \n            \n            assertContains(expected, e.getMessage());\n        }\n    } ",
        "begin_line": 75,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 90,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowWantedAndActual()",
        "snippet": "    @Test\n    public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {\n        try {\n            inOrder.verify(one).simpleMethod(999);\n            fail();\n        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {           \n            assertContains(\"has different arguments\", e.getMessage());\n        }\n    }",
        "begin_line": 93,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 100,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldNotSayArgumentsAreDifferent()",
        "snippet": "    @Test\n    public void shouldNotSayArgumentsAreDifferent() {\n        //this is the last invocation so any next verification in order should simply say wanted but not invoked\n        inOrder.verify(three).simpleMethod(3);\n        try {\n            inOrder.verify(one).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"Wanted but not invoked\", e.getMessage());\n        }\n    } ",
        "begin_line": 103,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintMethodThatWasNotInvoked()",
        "snippet": "    @Test\n    public void shouldPrintMethodThatWasNotInvoked() {\n        inOrder.verify(one).simpleMethod(1);\n        inOrder.verify(one).simpleMethod(11);\n        inOrder.verify(two, times(2)).simpleMethod(2);\n        inOrder.verify(three).simpleMethod(3);\n        try {\n            inOrder.verify(three).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage = \n                    \"\\n\" +\n                    \"Verification in order failure\" +\n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(999);\"; \n            assertContains(expectedMessage, actualMessage);     \n        }\n    }   ",
        "begin_line": 115,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 44)",
            "(line 118,col 9)-(line 118,col 45)",
            "(line 119,col 9)-(line 119,col 54)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 121,col 9)-(line 134,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintTooManyInvocations()",
        "snippet": "    @Test\n    public void shouldPrintTooManyInvocations() {\n        inOrder.verify(one).simpleMethod(1);\n        inOrder.verify(one).simpleMethod(11);\n        try {\n            inOrder.verify(two, times(1)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage = \n                    \"\\n\" +\n                    \"Verification in order failure:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(2);\" +\n                    \"\\n\" +\n                    \"Wanted 1 time:\" +\n                    \"\\n\" +\n                    \"-> at\"; \n            assertContains(expectedMessage, actualMessage);      \n\n            String expectedCause =\n                \"\\n\" +\n                \"But was 2 times. Undesired invocation:\" +\n                \"\\n\" +\n                \"-> at\";\n            assertContains(expectedCause, e.getMessage());\n        }\n    }  ",
        "begin_line": 137,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 44)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 163,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintTooLittleInvocations()",
        "snippet": "    @Test\n    public void shouldPrintTooLittleInvocations() {\n        two.simpleMethod(2);\n        \n        inOrder.verify(one, atLeastOnce()).simpleMethod(anyInt());\n        inOrder.verify(two, times(2)).simpleMethod(2);\n        inOrder.verify(three, atLeastOnce()).simpleMethod(3);\n        \n        try {\n            inOrder.verify(two, times(2)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage = \n                    \"\\n\" +\n                    \"Verification in order failure:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod(2);\" +\n                    \"\\n\" +\n                    \"Wanted 2 times:\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedMessage, actualMessage);\n            \n            String expectedCause = \n                \"\\n\" +\n                \"But was 1 time:\" +\n                \"\\n\" +\n                \"-> at\";\n            \n            assertContains(expectedCause, e.getMessage());\n        }\n    }   ",
        "begin_line": 166,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 28)",
            "(line 170,col 9)-(line 170,col 66)",
            "(line 171,col 9)-(line 171,col 54)",
            "(line 172,col 9)-(line 172,col 61)",
            "(line 174,col 9)-(line 197,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest.shouldVerifyUsingMatchers()",
        "snippet": "    @Test\n    public void shouldVerifyUsingMatchers() throws Exception {\n        List list = Mockito.mock(List.class);\n        HashMap map = Mockito.mock(HashMap.class);\n        \n        list.add(\"test\");\n        list.add(1, \"test two\");\n        \n        map.put(\"test\", 100);\n        map.put(\"test two\", 200);\n        \n        verify(list).add(anyObject());\n        verify(list).add(anyInt(), eq(\"test two\"));\n        \n        verify(map, times(2)).put(anyObject(), anyObject());\n        verify(map).put(eq(\"test two\"), eq(200));\n        \n        verifyNoMoreInteractions(list, map);\n    }",
        "begin_line": 23,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 45)",
            "(line 26,col 9)-(line 26,col 50)",
            "(line 28,col 9)-(line 28,col 25)",
            "(line 29,col 9)-(line 29,col 32)",
            "(line 31,col 9)-(line 31,col 29)",
            "(line 32,col 9)-(line 32,col 33)",
            "(line 34,col 9)-(line 34,col 38)",
            "(line 35,col 9)-(line 35,col 51)",
            "(line 37,col 9)-(line 37,col 60)",
            "(line 38,col 9)-(line 38,col 49)",
            "(line 40,col 9)-(line 40,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest.shouldVerifyMultipleMocks()",
        "snippet": "    @Test\n    public void shouldVerifyMultipleMocks() throws Exception {\n        List list = mock(List.class);\n        Map map = mock(Map.class);\n        Set set = mock(Set.class);\n\n        list.add(\"one\");\n        list.add(\"one\");\n        list.add(\"two\");\n        \n        map.put(\"one\", 1);\n        map.put(\"one\", 1);\n        \n        verify(list, times(2)).add(\"one\");\n        verify(list, times(1)).add(\"two\");\n        verify(list, times(0)).add(\"three\");\n        \n        verify(map, times(2)).put(anyObject(), anyInt());\n        \n        verifyNoMoreInteractions(list, map);\n        verifyZeroInteractions(set);\n    }",
        "begin_line": 43,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 37)",
            "(line 46,col 9)-(line 46,col 34)",
            "(line 47,col 9)-(line 47,col 34)",
            "(line 49,col 9)-(line 49,col 24)",
            "(line 50,col 9)-(line 50,col 24)",
            "(line 51,col 9)-(line 51,col 24)",
            "(line 53,col 9)-(line 53,col 26)",
            "(line 54,col 9)-(line 54,col 26)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 42)",
            "(line 58,col 9)-(line 58,col 44)",
            "(line 60,col 9)-(line 60,col 57)",
            "(line 62,col 9)-(line 62,col 44)",
            "(line 63,col 9)-(line 63,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldVerifyAtMostXTimes()",
        "snippet": "    @Test\n    public void shouldVerifyAtMostXTimes() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        verify(mock, atMost(2)).clear();\n        verify(mock, atMost(3)).clear();\n        \n        try {\n            verify(mock, atMost(1)).clear();\n            fail();\n        } catch (MockitoAssertionError e) {}\n    }",
        "begin_line": 26,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 21)",
            "(line 29,col 9)-(line 29,col 21)",
            "(line 31,col 9)-(line 31,col 40)",
            "(line 32,col 9)-(line 32,col 40)",
            "(line 34,col 9)-(line 37,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldWorkWithArgumentMatchers()",
        "snippet": "    @Test\n    public void shouldWorkWithArgumentMatchers() throws Exception {\n        mock.add(\"one\");\n        verify(mock, atMost(5)).add(anyString());\n        \n        try {\n            verify(mock, atMost(0)).add(anyString());\n            fail();\n        } catch (MockitoAssertionError e) {}\n    }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 24)",
            "(line 43,col 9)-(line 43,col 49)",
            "(line 45,col 9)-(line 48,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldNotAllowNegativeNumber()",
        "snippet": "    @Test\n    public void shouldNotAllowNegativeNumber() throws Exception {\n        try {\n            verify(mock, atMost(-1)).clear();\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Negative value is not allowed here\", e.getMessage());\n        }\n    }",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 58,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldPrintDecentMessage()",
        "snippet": "    @Test\n    public void shouldPrintDecentMessage() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        try {\n            verify(mock, atMost(1)).clear();\n            fail();\n        } catch (MockitoAssertionError e) {\n            assertEquals(\"\\nWanted at most 1 time but was 2\", e.getMessage());\n        }\n    }",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 21)",
            "(line 64,col 9)-(line 64,col 21)",
            "(line 66,col 9)-(line 71,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldNotAllowInOrderMode()",
        "snippet": "    @Test\n    public void shouldNotAllowInOrderMode() throws Exception {\n        mock.clear();\n        InOrder inOrder = inOrder(mock);\n        \n        try {\n            inOrder.verify(mock, atMost(1)).clear();\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"AtMost is not implemented to work with InOrder\", e.getMessage());\n        }\n    }",
        "begin_line": 74,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 21)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 79,col 9)-(line 84,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldMarkInteractionsAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkInteractionsAsVerified() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        verify(mock, atMost(3)).clear();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 87,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 21)",
            "(line 90,col 9)-(line 90,col 21)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.shouldDetectUnverifiedInMarkInteractionsAsVerified()",
        "snippet": "    @Test\n    public void shouldDetectUnverifiedInMarkInteractionsAsVerified() throws Exception {\n        mock.clear();\n        mock.clear();\n        undesiredInteraction();\n        \n        verify(mock, atMost(3)).clear();\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch(NoInteractionsWanted e) {\n            assertContains(\"undesiredInteraction(\", e.getMessage());\n        }\n    }",
        "begin_line": 96,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 21)",
            "(line 99,col 9)-(line 99,col 21)",
            "(line 100,col 9)-(line 100,col 31)",
            "(line 102,col 9)-(line 102,col 40)",
            "(line 103,col 9)-(line 108,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.AtMostXVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/AtMostXVerificationTest.java",
        "signature": "org.mockitousage.verification.AtMostXVerificationTest.undesiredInteraction()",
        "snippet": "    private void undesiredInteraction() {\n        mock.add(\"\");\n    }",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() throws Exception {\n        mock.clear();\n        verify(mock).clear();\n\n        mock.add(\"test\");\n        verify(mock).add(\"test\");\n\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 26,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 21)",
            "(line 29,col 9)-(line 29,col 29)",
            "(line 31,col 9)-(line 31,col 25)",
            "(line 32,col 9)-(line 32,col 33)",
            "(line 34,col 9)-(line 34,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldFailVerification()",
        "snippet": "    @Test(expected=WantedButNotInvoked.class)\n    public void shouldFailVerification() throws Exception {\n        verify(mock).clear();\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldFailVerificationOnMethodArgument()",
        "snippet": "    @Test\n    public void shouldFailVerificationOnMethodArgument() throws Exception {\n        mock.clear();\n        mock.add(\"foo\");\n\n        verify(mock).clear();\n        try {\n            verify(mock).add(\"bar\");\n            fail();\n        } catch (AssertionError expected) {}\n    }",
        "begin_line": 42,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 21)",
            "(line 45,col 9)-(line 45,col 24)",
            "(line 47,col 9)-(line 47,col 29)",
            "(line 48,col 9)-(line 51,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldFailOnWrongMethod()",
        "snippet": "    @Test\n    public void shouldFailOnWrongMethod() throws Exception {\n        mock.clear();\n        mock.clear();\n        \n        mockTwo.add(\"add\");\n\n        verify(mock, atLeastOnce()).clear();\n        verify(mockTwo, atLeastOnce()).add(\"add\");\n        try {\n            verify(mockTwo, atLeastOnce()).add(\"foo\");\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 21)",
            "(line 57,col 9)-(line 57,col 21)",
            "(line 59,col 9)-(line 59,col 27)",
            "(line 61,col 9)-(line 61,col 44)",
            "(line 62,col 9)-(line 62,col 50)",
            "(line 63,col 9)-(line 66,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldDetectRedundantInvocation()",
        "snippet": "    @Test\n    public void shouldDetectRedundantInvocation() throws Exception {\n        mock.clear();\n        mock.add(\"foo\");\n        mock.add(\"bar\");\n\n        verify(mock).clear();\n        verify(mock).add(\"foo\");\n\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 69,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 21)",
            "(line 72,col 9)-(line 72,col 24)",
            "(line 73,col 9)-(line 73,col 24)",
            "(line 75,col 9)-(line 75,col 29)",
            "(line 76,col 9)-(line 76,col 32)",
            "(line 78,col 9)-(line 81,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldDetectWhenInvokedMoreThanOnce()",
        "snippet": "    @Test\n    public void shouldDetectWhenInvokedMoreThanOnce() throws Exception {\n        mock.add(\"foo\");\n        mock.clear();\n        mock.clear();\n        \n        verify(mock).add(\"foo\");\n\n        try {\n            verify(mock).clear();\n            fail();\n        } catch (TooManyActualInvocations e) {}\n    }",
        "begin_line": 84,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 24)",
            "(line 87,col 9)-(line 87,col 21)",
            "(line 88,col 9)-(line 88,col 21)",
            "(line 90,col 9)-(line 90,col 32)",
            "(line 92,col 9)-(line 95,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldVerifyStubbedMethods()",
        "snippet": "    @Test\n    public void shouldVerifyStubbedMethods() throws Exception {\n        when(mock.add(\"test\")).thenReturn(Boolean.FALSE);\n        \n        mock.add(\"test\");\n        \n        verify(mock).add(\"test\");\n    }",
        "begin_line": 98,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 57)",
            "(line 102,col 9)-(line 102,col 25)",
            "(line 104,col 9)-(line 104,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationTest.shouldDetectWhenOverloadedMethodCalled()",
        "snippet": "    @Test\n    public void shouldDetectWhenOverloadedMethodCalled() throws Exception {\n        IMethods mockThree = mock(IMethods.class);\n        \n        mockThree.varargs((Object[]) new Object[] {});\n        try {\n            verify(mockThree).varargs((String[]) new String[] {});\n            fail();\n        } catch(WantedButNotInvoked e) {}\n    }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 50)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 113,col 9)-(line 116,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationExcludingStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationExcludingStubsTest.java",
        "signature": "org.mockitousage.verification.VerificationExcludingStubsTest.shouldAllowToExcludeStubsForVerification()",
        "snippet": "    @Test\n    public void shouldAllowToExcludeStubsForVerification() throws Exception {\n        //given\n        when(mock.simpleMethod()).thenReturn(\"foo\");\n\n        //when\n        String stubbed = mock.simpleMethod(); //irrelevant call because it is stubbing\n        mock.objectArgMethod(stubbed);\n\n        //then\n        verify(mock).objectArgMethod(\"foo\");\n\n        //verifyNoMoreInteractions fails:\n        try { verifyNoMoreInteractions(mock); fail(); } catch (NoInteractionsWanted e) {};\n        \n        //but it works when stubs are ignored:\n        ignoreStubs(mock);\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 23,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 52)",
            "(line 29,col 9)-(line 29,col 45)",
            "(line 30,col 9)-(line 30,col 38)",
            "(line 33,col 9)-(line 33,col 44)",
            "(line 36,col 9)-(line 36,col 89)",
            "(line 36,col 90)-(line 36,col 90)",
            "(line 39,col 9)-(line 39,col 26)",
            "(line 40,col 9)-(line 40,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationExcludingStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationExcludingStubsTest.java",
        "signature": "org.mockitousage.verification.VerificationExcludingStubsTest.shouldExcludeFromVerificationInOrder()",
        "snippet": "    @Test\n    public void shouldExcludeFromVerificationInOrder() throws Exception {\n        //given\n        when(mock.simpleMethod()).thenReturn(\"foo\");\n\n        //when\n        mock.objectArgMethod(\"1\");\n        mock.objectArgMethod(\"2\");\n        mock.simpleMethod(); //calling the stub\n\n        //then\n        InOrder inOrder = inOrder(ignoreStubs(mock));\n        inOrder.verify(mock).objectArgMethod(\"1\");\n        inOrder.verify(mock).objectArgMethod(\"2\");\n        inOrder.verifyNoMoreInteractions();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 43,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 52)",
            "(line 49,col 9)-(line 49,col 34)",
            "(line 50,col 9)-(line 50,col 34)",
            "(line 51,col 9)-(line 51,col 28)",
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 50)",
            "(line 56,col 9)-(line 56,col 50)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 58,col 9)-(line 58,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationExcludingStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationExcludingStubsTest.java",
        "signature": "org.mockitousage.verification.VerificationExcludingStubsTest.shouldIgnoringStubsDetectNulls()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void shouldIgnoringStubsDetectNulls() throws Exception {\n        ignoreStubs(mock, null);\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationExcludingStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationExcludingStubsTest.java",
        "signature": "org.mockitousage.verification.VerificationExcludingStubsTest.shouldIgnoringStubsDetectNonMocks()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void shouldIgnoringStubsDetectNonMocks() throws Exception {\n        ignoreStubs(mock, new Object());\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n\n        mockOne.simpleMethod(1);\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockThree.simpleMethod(4);\n\n        inOrder = inOrder(mockOne, mockThree);\n    }",
        "begin_line": 26,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 39)",
            "(line 29,col 9)-(line 29,col 39)",
            "(line 30,col 9)-(line 30,col 41)",
            "(line 32,col 9)-(line 32,col 32)",
            "(line 33,col 9)-(line 33,col 32)",
            "(line 34,col 9)-(line 34,col 32)",
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 34)",
            "(line 38,col 9)-(line 38,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldMixVerificationInOrderAndOrdinaryVerification()",
        "snippet": "    @Test\n    public void shouldMixVerificationInOrderAndOrdinaryVerification() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockThree).simpleMethod(4);\n        verify(mockTwo).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 63)",
            "(line 44,col 9)-(line 44,col 50)",
            "(line 45,col 9)-(line 45,col 50)",
            "(line 46,col 9)-(line 46,col 40)",
            "(line 48,col 9)-(line 48,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowOrdinarilyVerifyingMockPassedToInOrderObject()",
        "snippet": "    @Test\n    public void shouldAllowOrdinarilyVerifyingMockPassedToInOrderObject() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n\n        verify(mockThree).simpleMethod(3);\n        verify(mockThree).simpleMethod(4);\n        verify(mockTwo).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 63)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 40)",
            "(line 59,col 9)-(line 59,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowRedundantVerifications()",
        "snippet": "    @Test\n    public void shouldAllowRedundantVerifications() {\n        verify(mockOne, atLeastOnce()).simpleMethod(1);\n        verify(mockTwo).simpleMethod(2);\n        verify(mockThree).simpleMethod(3);\n        verify(mockThree).simpleMethod(4);\n        \n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockThree).simpleMethod(4);\n        \n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 62,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 55)",
            "(line 65,col 9)-(line 65,col 40)",
            "(line 66,col 9)-(line 66,col 42)",
            "(line 67,col 9)-(line 67,col 42)",
            "(line 69,col 9)-(line 69,col 63)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 50)",
            "(line 73,col 9)-(line 73,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldFailOnNoMoreInteractions() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockThree).simpleMethod(4);\n        \n        try {\n            verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 76,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 63)",
            "(line 79,col 9)-(line 79,col 50)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 82,col 9)-(line 85,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnNoMoreInteractionsOnMockVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldFailOnNoMoreInteractionsOnMockVerifiedInOrder() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        verify(mockTwo).simpleMethod(2);\n        \n        try {\n            verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 88,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 63)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 40)",
            "(line 94,col 9)-(line 97,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowOneMethodVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldAllowOneMethodVerifiedInOrder() {\n        verify(mockTwo).simpleMethod(2);\n        verify(mockOne, atLeastOnce()).simpleMethod(1);\n\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n    }",
        "begin_line": 100,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 40)",
            "(line 103,col 9)-(line 103,col 55)",
            "(line 105,col 9)-(line 105,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnLastInvocationTooEarly()",
        "snippet": "    @Test\n    public void shouldFailOnLastInvocationTooEarly() {\n        inOrder.verify(mockThree).simpleMethod(4);\n        \n        verify(mockThree).simpleMethod(4);\n        verify(mockTwo).simpleMethod(2);\n        \n        try {\n            inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 108,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 50)",
            "(line 112,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 115,col 9)-(line 118,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldScreamWhenUnfamiliarMockPassedToInOrderObject()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldScreamWhenUnfamiliarMockPassedToInOrderObject() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(1);\n    } ",
        "begin_line": 121,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldUseEqualsToVerifyMethodArguments()",
        "snippet": "    @Test\n    public void shouldUseEqualsToVerifyMethodArguments() {\n        mockOne = mock(IMethods.class);\n        \n        String textOne = \"test\";\n        String textTwo = new String(textOne);\n        \n        assertEquals(textOne, textTwo);\n        assertNotSame(textOne, textTwo);\n        \n        mockOne.simpleMethod(textOne);\n        mockOne.simpleMethod(textTwo);\n        \n        verify(mockOne, times(2)).simpleMethod(textOne);\n        \n        inOrder = inOrder(mockOne);\n        inOrder.verify(mockOne, times(2)).simpleMethod(textOne);\n    } ",
        "begin_line": 126,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 39)",
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 45)",
            "(line 133,col 9)-(line 133,col 39)",
            "(line 134,col 9)-(line 134,col 40)",
            "(line 136,col 9)-(line 136,col 38)",
            "(line 137,col 9)-(line 137,col 38)",
            "(line 139,col 9)-(line 139,col 56)",
            "(line 141,col 9)-(line 141,col 35)",
            "(line 142,col 9)-(line 142,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldUseEqualsToVerifyMethodVarargs()",
        "snippet": "    @Test\n    public void shouldUseEqualsToVerifyMethodVarargs() {\n        mockOne = mock(IMethods.class);\n        \n        String textOne = \"test\";\n        String textTwo = new String(textOne);\n        \n        assertEquals(textOne, textTwo);\n        assertNotSame(textOne, textTwo);\n        \n        mockOne.varargsObject(1, textOne, textOne);\n        mockOne.varargsObject(1, textTwo, textTwo);\n        \n        verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n        \n        inOrder = inOrder(mockOne);\n        inOrder.verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n    } ",
        "begin_line": 145,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 39)",
            "(line 149,col 9)-(line 149,col 32)",
            "(line 150,col 9)-(line 150,col 45)",
            "(line 152,col 9)-(line 152,col 39)",
            "(line 153,col 9)-(line 153,col 40)",
            "(line 155,col 9)-(line 155,col 51)",
            "(line 156,col 9)-(line 156,col 51)",
            "(line 158,col 9)-(line 158,col 69)",
            "(line 160,col 9)-(line 160,col 35)",
            "(line 161,col 9)-(line 161,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(LinkedList.class);\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectTooLittleActualInvocations()",
        "snippet": "    @Test\n    public void shouldDetectTooLittleActualInvocations() throws Exception {\n        mock.clear();\n        mock.clear();\n\n        verify(mock, times(2)).clear();\n        try {\n            verify(mock, times(100)).clear();\n            fail();\n        } catch (TooLittleActualInvocations e) {\n            assertContains(\"Wanted 100 times\", e.getMessage());\n            assertContains(\"was 2\", e.getMessage());\n        }\n    }",
        "begin_line": 32,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 21)",
            "(line 35,col 9)-(line 35,col 21)",
            "(line 37,col 9)-(line 37,col 39)",
            "(line 38,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldDetectTooManyActualInvocations() throws Exception {\n        mock.clear();\n        mock.clear();\n\n        verify(mock, times(2)).clear();\n        try {\n            verify(mock, times(1)).clear();\n            fail();\n        } catch (TooManyActualInvocations e) {\n            assertContains(\"Wanted 1 time\", e.getMessage());\n            assertContains(\"was 2 times\", e.getMessage());\n        }\n    }",
        "begin_line": 47,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 21)",
            "(line 50,col 9)-(line 50,col 21)",
            "(line 52,col 9)-(line 52,col 39)",
            "(line 53,col 9)-(line 59,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectActualInvocationsCountIsMoreThanZero()",
        "snippet": "    @Test\n    public void shouldDetectActualInvocationsCountIsMoreThanZero() throws Exception {\n        verify(mock, times(0)).clear();\n        try {\n            verify(mock, times(15)).clear();\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 39)",
            "(line 65,col 9)-(line 68,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectActuallyCalledOnce()",
        "snippet": "    @Test\n    public void shouldDetectActuallyCalledOnce() throws Exception {\n        mock.clear();\n\n        try {\n            verify(mock, times(0)).clear();\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertContains(\"Never wanted here\", e.getMessage());\n        }\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 21)",
            "(line 75,col 9)-(line 80,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldPassWhenMethodsActuallyNotCalled()",
        "snippet": "    @Test\n    public void shouldPassWhenMethodsActuallyNotCalled() throws Exception {\n        verify(mock, times(0)).clear();\n        verify(mock, times(0)).add(\"yes, I wasn't called\");\n    }",
        "begin_line": 83,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 39)",
            "(line 86,col 9)-(line 86,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldNotCountInStubbedInvocations()",
        "snippet": "    @Test\n    public void shouldNotCountInStubbedInvocations() throws Exception {\n        when(mock.add(\"test\")).thenReturn(false);\n        when(mock.add(\"test\")).thenReturn(true);\n\n        mock.add(\"test\");\n        mock.add(\"test\");\n\n        verify(mock, times(2)).add(\"test\");\n    }",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 49)",
            "(line 92,col 9)-(line 92,col 48)",
            "(line 94,col 9)-(line 94,col 25)",
            "(line 95,col 9)-(line 95,col 25)",
            "(line 97,col 9)-(line 97,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldAllowVerifyingInteractionNeverHappened()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInteractionNeverHappened() throws Exception {\n        mock.add(\"one\");\n\n        verify(mock, never()).add(\"two\");\n        verify(mock, never()).clear();\n        \n        try {\n            verify(mock, never()).add(\"one\");\n            fail();\n        } catch (NeverWantedButInvoked e) {}\n    }",
        "begin_line": 100,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 24)",
            "(line 104,col 9)-(line 104,col 41)",
            "(line 105,col 9)-(line 105,col 38)",
            "(line 107,col 9)-(line 110,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java",
        "signature": "org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldAllowVerifyingInteractionNeverHappenedInOrder()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInteractionNeverHappenedInOrder() throws Exception {\n        mock.add(\"one\");\n        mock.add(\"two\");\n\n        InOrder inOrder = inOrder(mock);\n        \n        inOrder.verify(mock, never()).add(\"xxx\");\n        inOrder.verify(mock).add(\"one\");\n        inOrder.verify(mock, never()).add(\"one\");\n        \n        try {\n            inOrder.verify(mock, never()).add(\"two\");\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 113,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 24)",
            "(line 116,col 9)-(line 116,col 24)",
            "(line 118,col 9)-(line 118,col 40)",
            "(line 120,col 9)-(line 120,col 49)",
            "(line 121,col 9)-(line 121,col 40)",
            "(line 122,col 9)-(line 122,col 49)",
            "(line 124,col 9)-(line 127,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(LinkedList.class);\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldStubbingNotRegisterRedundantInteractions()",
        "snippet": "    @Test\n    public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {\n        when(mock.add(\"one\")).thenReturn(true);\n        when(mock.add(\"two\")).thenReturn(true);\n\n        mock.add(\"one\");\n        \n        verify(mock).add(\"one\");\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 47)",
            "(line 33,col 9)-(line 33,col 47)",
            "(line 35,col 9)-(line 35,col 24)",
            "(line 37,col 9)-(line 37,col 32)",
            "(line 38,col 9)-(line 38,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyWhenWantedNumberOfInvocationsUsed()",
        "snippet": "    @Test\n    public void shouldVerifyWhenWantedNumberOfInvocationsUsed() throws Exception {\n        mock.add(\"one\");\n        mock.add(\"one\");\n        mock.add(\"one\");\n        \n        verify(mock, times(3)).add(\"one\");\n        \n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 41,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 24)",
            "(line 44,col 9)-(line 44,col 24)",
            "(line 45,col 9)-(line 45,col 24)",
            "(line 47,col 9)-(line 47,col 42)",
            "(line 49,col 9)-(line 49,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyNoInteractionsAsManyTimesAsYouWant()",
        "snippet": "    @Test\n    public void shouldVerifyNoInteractionsAsManyTimesAsYouWant() throws Exception {\n        verifyNoMoreInteractions(mock);\n        verifyNoMoreInteractions(mock);\n        \n        verifyZeroInteractions(mock);\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 39)",
            "(line 55,col 9)-(line 55,col 39)",
            "(line 57,col 9)-(line 57,col 37)",
            "(line 58,col 9)-(line 58,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldFailZeroInteractionsVerification()",
        "snippet": "    @Test\n    public void shouldFailZeroInteractionsVerification() throws Exception {\n        mock.clear();\n        \n        try {\n            verifyZeroInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 61,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 21)",
            "(line 65,col 9)-(line 68,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldFailNoMoreInteractionsVerification()",
        "snippet": "    @Test\n    public void shouldFailNoMoreInteractionsVerification() throws Exception {\n        mock.clear();\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 21)",
            "(line 75,col 9)-(line 78,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldPrintAllInvocationsWhenVerifyingNoMoreInvocations()",
        "snippet": "    @Test\n    public void shouldPrintAllInvocationsWhenVerifyingNoMoreInvocations() throws Exception {\n        mock.add(1);\n        mock.add(2);\n        mock.clear();\n        \n        verify(mock).add(2);\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            assertContains(\"list of all invocations\", e.getMessage());\n        }\n    }",
        "begin_line": 81,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)",
            "(line 84,col 9)-(line 84,col 20)",
            "(line 85,col 9)-(line 85,col 21)",
            "(line 87,col 9)-(line 87,col 28)",
            "(line 88,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldNotContainAllInvocationsWhenSingleUnwantedFound()",
        "snippet": "    @Test\n    public void shouldNotContainAllInvocationsWhenSingleUnwantedFound() throws Exception {\n        mock.add(1);\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            assertNotContains(\"list of all invocations\", e.getMessage());\n        }\n    }    ",
        "begin_line": 96,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)",
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyOneMockButFailOnOther()",
        "snippet": "    @Test\n    public void shouldVerifyOneMockButFailOnOther() throws Exception {\n        List list = mock(List.class);\n        Map map = mock(Map.class);\n\n        list.add(\"one\");\n        list.add(\"one\");\n        \n        map.put(\"one\", 1);\n        \n        verify(list, times(2)).add(\"one\");\n        \n        verifyNoMoreInteractions(list);\n        try {\n            verifyZeroInteractions(map);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 37)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 113,col 9)-(line 113,col 24)",
            "(line 114,col 9)-(line 114,col 24)",
            "(line 116,col 9)-(line 116,col 26)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 120,col 9)-(line 120,col 39)",
            "(line 121,col 9)-(line 124,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java",
        "signature": "org.mockitousage.verification.NoMoreInteractionsVerificationTest.verifyNoMoreInteractionsShouldScreamWhenNullPassed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void verifyNoMoreInteractionsShouldScreamWhenNullPassed() throws Exception {\n        verifyNoMoreInteractions((Object[])null);\n    }",
        "begin_line": 127,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailWhenMethodNotCalled()",
        "snippet": "    @Test\n    public void shouldFailWhenMethodNotCalled() {}",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailWhenMethodCalledTooFewTimes()",
        "snippet": "    @Test\n    public void shouldFailWhenMethodCalledTooFewTimes() {}",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailWhenSingleMethodCallsAreOutOfSequence()",
        "snippet": "    @Test\n    public void shouldFailWhenSingleMethodCallsAreOutOfSequence() {}",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailWhenDifferentMethodCallsAreOutOfSequence()",
        "snippet": "    @Test\n    public void shouldFailWhenDifferentMethodCallsAreOutOfSequence() {}",
        "begin_line": 95,
        "end_line": 96,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailWhenMethodCallsOnDifferentMocksAreOutOfSequence()",
        "snippet": "    @Test\n    public void shouldFailWhenMethodCallsOnDifferentMocksAreOutOfSequence() {}",
        "begin_line": 118,
        "end_line": 119,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldAllowSequentialCallsToCallsForSingleMethod()",
        "snippet": "    @Test\n    public void shouldAllowSequentialCallsToCallsForSingleMethod(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 1 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(2)).oneArg( 2 );\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifyNoMoreInteractions(mockOne);\n        verifier.verifyNoMoreInteractions();\n\n        // Then - no exception thrown\n    }",
        "begin_line": 142,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 28)",
            "(line 146,col 9)-(line 146,col 28)",
            "(line 147,col 9)-(line 147,col 28)",
            "(line 148,col 9)-(line 148,col 28)",
            "(line 150,col 9)-(line 150,col 46)",
            "(line 153,col 9)-(line 153,col 56)",
            "(line 154,col 9)-(line 154,col 56)",
            "(line 155,col 9)-(line 155,col 56)",
            "(line 156,col 9)-(line 156,col 42)",
            "(line 157,col 9)-(line 157,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldAllowSequentialCallsToCallsForDifferentMethods()",
        "snippet": "    @Test\n    public void shouldAllowSequentialCallsToCallsForDifferentMethods(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.voidMethod();\n        mockOne.voidMethod();\n        mockOne.oneArg( 1 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(2)).voidMethod();\n        verifier.verify( mockOne, calls(1)).oneArg(1);\n        verifyNoMoreInteractions(mockOne);\n        verifier.verifyNoMoreInteractions();\n\n        // Then - no exception thrown\n    }",
        "begin_line": 162,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 28)",
            "(line 166,col 9)-(line 166,col 29)",
            "(line 167,col 9)-(line 167,col 29)",
            "(line 168,col 9)-(line 168,col 28)",
            "(line 170,col 9)-(line 170,col 46)",
            "(line 173,col 9)-(line 173,col 56)",
            "(line 174,col 9)-(line 174,col 57)",
            "(line 175,col 9)-(line 175,col 54)",
            "(line 176,col 9)-(line 176,col 42)",
            "(line 177,col 9)-(line 177,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldAllowSequentialCallsToCallsForMethodsOnDifferentMocks()",
        "snippet": "    @Test\n    public void shouldAllowSequentialCallsToCallsForMethodsOnDifferentMocks(){\n        // Given\n        mockOne.voidMethod();\n        mockTwo.voidMethod();\n        mockTwo.voidMethod();\n        mockOne.voidMethod();\n\n        InOrder verifier = inOrder( mockOne, mockTwo );\n\n        // When\n        verifier.verify( mockOne, calls(1)).voidMethod();\n        verifier.verify( mockTwo, calls(2)).voidMethod();\n        verifier.verify( mockOne, calls(1)).voidMethod();\n        verifyNoMoreInteractions(mockOne);\n        verifyNoMoreInteractions(mockTwo);\n        verifier.verifyNoMoreInteractions();\n\n        // Then - no exception thrown\n    }",
        "begin_line": 182,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 29)",
            "(line 186,col 9)-(line 186,col 29)",
            "(line 187,col 9)-(line 187,col 29)",
            "(line 188,col 9)-(line 188,col 29)",
            "(line 190,col 9)-(line 190,col 55)",
            "(line 193,col 9)-(line 193,col 57)",
            "(line 194,col 9)-(line 194,col 57)",
            "(line 195,col 9)-(line 195,col 57)",
            "(line 196,col 9)-(line 196,col 42)",
            "(line 197,col 9)-(line 197,col 42)",
            "(line 198,col 9)-(line 198,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldAllowFewerCallsForSingleMethod()",
        "snippet": "    @Test\n    public void shouldAllowFewerCallsForSingleMethod(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n\n        // Then - no exception thrown\n    }",
        "begin_line": 204,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 28)",
            "(line 208,col 9)-(line 208,col 28)",
            "(line 209,col 9)-(line 209,col 28)",
            "(line 210,col 9)-(line 210,col 28)",
            "(line 211,col 9)-(line 211,col 28)",
            "(line 213,col 9)-(line 213,col 46)",
            "(line 216,col 9)-(line 216,col 56)",
            "(line 217,col 9)-(line 217,col 56)",
            "(line 218,col 9)-(line 218,col 56)",
            "(line 219,col 9)-(line 219,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldNotVerifySkippedCallsWhenFewerCallsForSingleMethod()",
        "snippet": "    @Test\n    public void shouldNotVerifySkippedCallsWhenFewerCallsForSingleMethod() {}",
        "begin_line": 224,
        "end_line": 225,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForSingleMethod()",
        "snippet": "    @Test\n    public void shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForSingleMethod() {}",
        "begin_line": 248,
        "end_line": 249,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldAllowFewerCallsForDifferentMethods()",
        "snippet": "    @Test\n    public void shouldAllowFewerCallsForDifferentMethods(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.voidMethod();\n        mockOne.voidMethod();\n        mockOne.oneArg( 1 );\n        mockOne.voidMethod();\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(1)).voidMethod();\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(1)).voidMethod();\n\n        // Then - no exception thrown\n    }",
        "begin_line": 271,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 28)",
            "(line 275,col 9)-(line 275,col 29)",
            "(line 276,col 9)-(line 276,col 29)",
            "(line 277,col 9)-(line 277,col 28)",
            "(line 278,col 9)-(line 278,col 29)",
            "(line 280,col 9)-(line 280,col 46)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 284,col 9)-(line 284,col 57)",
            "(line 285,col 9)-(line 285,col 56)",
            "(line 286,col 9)-(line 286,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldNotVerifySkippedCallsWhenFewerCallsForDifferentMethods()",
        "snippet": "    @Test\n    public void shouldNotVerifySkippedCallsWhenFewerCallsForDifferentMethods() {}",
        "begin_line": 291,
        "end_line": 292,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForDifferentMethods()",
        "snippet": "    @Test\n    public void shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForDifferentMethods() {}",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldAllowFewerCallsForMethodsOnDifferentMocks()",
        "snippet": "    @Test\n    public void shouldAllowFewerCallsForMethodsOnDifferentMocks(){\n        // Given\n        mockOne.voidMethod();\n        mockTwo.voidMethod();\n        mockTwo.voidMethod();\n        mockOne.voidMethod();\n        mockTwo.voidMethod();\n\n        InOrder verifier = inOrder( mockOne, mockTwo );\n\n        // When\n        verifier.verify( mockOne, calls(1)).voidMethod();\n        verifier.verify( mockTwo, calls(1)).voidMethod();\n        verifier.verify( mockOne, calls(1)).voidMethod();\n        verifier.verify( mockTwo, calls(1)).voidMethod();\n\n        // Then - no exception thrown\n    }",
        "begin_line": 338,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 29)",
            "(line 342,col 9)-(line 342,col 29)",
            "(line 343,col 9)-(line 343,col 29)",
            "(line 344,col 9)-(line 344,col 29)",
            "(line 345,col 9)-(line 345,col 29)",
            "(line 347,col 9)-(line 347,col 55)",
            "(line 350,col 9)-(line 350,col 57)",
            "(line 351,col 9)-(line 351,col 57)",
            "(line 352,col 9)-(line 352,col 57)",
            "(line 353,col 9)-(line 353,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldNotVerifySkippedCallsWhenFewerCallsForMethodsOnDifferentMocks()",
        "snippet": "    @Test\n    public void shouldNotVerifySkippedCallsWhenFewerCallsForMethodsOnDifferentMocks() {}",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForMethodsOnDifferentMocks()",
        "snippet": "    @Test\n    public void shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForMethodsOnDifferentMocks() {}",
        "begin_line": 382,
        "end_line": 383,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldVerifyWithCallsAfterUseOfTimes()",
        "snippet": "    @Test\n    public void shouldVerifyWithCallsAfterUseOfTimes(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 1 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, times(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(2)).oneArg( 2 );\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n\n        // Then - no exception thrown\n    }",
        "begin_line": 405,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 28)",
            "(line 409,col 9)-(line 409,col 28)",
            "(line 410,col 9)-(line 410,col 28)",
            "(line 411,col 9)-(line 411,col 28)",
            "(line 413,col 9)-(line 413,col 46)",
            "(line 416,col 9)-(line 416,col 56)",
            "(line 417,col 9)-(line 417,col 56)",
            "(line 418,col 9)-(line 418,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldVerifyWithCallsAfterUseOfAtLeast()",
        "snippet": "    @Test\n    public void shouldVerifyWithCallsAfterUseOfAtLeast(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 2 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, atLeast(1)).oneArg( 1 );\n        verifier.verify( mockOne, calls(2)).oneArg( 2 );\n\n        // Then - no exception thrown\n    }",
        "begin_line": 423,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 28)",
            "(line 427,col 9)-(line 427,col 28)",
            "(line 428,col 9)-(line 428,col 28)",
            "(line 430,col 9)-(line 430,col 46)",
            "(line 433,col 9)-(line 433,col 58)",
            "(line 434,col 9)-(line 434,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldVerifyWithTimesAfterUseOfCalls()",
        "snippet": "    @Test\n    public void shouldVerifyWithTimesAfterUseOfCalls(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 1 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, times(2)).oneArg( 2 );\n        verifier.verify( mockOne, times(1)).oneArg( 1 );\n\n        // Then - no exception thrown\n    }",
        "begin_line": 439,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 28)",
            "(line 443,col 9)-(line 443,col 28)",
            "(line 444,col 9)-(line 444,col 28)",
            "(line 445,col 9)-(line 445,col 28)",
            "(line 447,col 9)-(line 447,col 46)",
            "(line 450,col 9)-(line 450,col 56)",
            "(line 451,col 9)-(line 451,col 56)",
            "(line 452,col 9)-(line 452,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldVerifyWithAtLeastAfterUseOfCalls()",
        "snippet": "    @Test\n    public void shouldVerifyWithAtLeastAfterUseOfCalls(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 2 );\n        mockOne.oneArg( 1 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, atLeast(1)).oneArg( 2 );\n        verifier.verify( mockOne, atLeast(1)).oneArg( 1 );\n\n        // Then - no exception thrown\n    }",
        "begin_line": 457,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 460,col 9)-(line 460,col 28)",
            "(line 461,col 9)-(line 461,col 28)",
            "(line 462,col 9)-(line 462,col 28)",
            "(line 463,col 9)-(line 463,col 28)",
            "(line 465,col 9)-(line 465,col 46)",
            "(line 468,col 9)-(line 468,col 56)",
            "(line 469,col 9)-(line 469,col 58)",
            "(line 470,col 9)-(line 470,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldVerifyWithTimesAfterCallsInSameChunk()",
        "snippet": "    @Test\n    public void shouldVerifyWithTimesAfterCallsInSameChunk(){\n        // Given\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 1 );\n        mockOne.oneArg( 1 );\n\n        InOrder verifier = inOrder( mockOne );\n\n        // When\n        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n        verifier.verify( mockOne, times(2)).oneArg( 1 );\n        verifier.verifyNoMoreInteractions();\n\n        // Then - no exception thrown\n    }",
        "begin_line": 475,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 478,col 9)-(line 478,col 28)",
            "(line 479,col 9)-(line 479,col 28)",
            "(line 480,col 9)-(line 480,col 28)",
            "(line 482,col 9)-(line 482,col 46)",
            "(line 485,col 9)-(line 485,col 56)",
            "(line 486,col 9)-(line 486,col 56)",
            "(line 487,col 9)-(line 487,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailToCreateCallsWithZeroArgument()",
        "snippet": "    @Test\n    public void shouldFailToCreateCallsWithZeroArgument(){\n        // Given\n        InOrder verifier = inOrder( mockOne );\n        exceptionRule.expect( MockitoException.class );\n        exceptionRule.expectMessage( \"Negative and zero values are not allowed here\" );\n\n        // When\n        verifier.verify( mockOne, calls(0)).voidMethod();\n\n        // Then - expected exception thrown\n    }",
        "begin_line": 492,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 495,col 46)",
            "(line 496,col 9)-(line 496,col 55)",
            "(line 497,col 9)-(line 497,col 87)",
            "(line 500,col 9)-(line 500,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailToCreateCallsWithNegativeArgument()",
        "snippet": "    @Test\n    public void shouldFailToCreateCallsWithNegativeArgument(){\n        // Given\n        InOrder verifier = inOrder( mockOne );\n        exceptionRule.expect( MockitoException.class );\n        exceptionRule.expectMessage( \"Negative and zero values are not allowed here\" );\n\n        // When\n        verifier.verify( mockOne, calls(-1)).voidMethod();\n\n        // Then - expected exception thrown\n    }",
        "begin_line": 505,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 46)",
            "(line 509,col 9)-(line 509,col 55)",
            "(line 510,col 9)-(line 510,col 87)",
            "(line 513,col 9)-(line 513,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderWithCallsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderWithCallsTest.shouldFailToCreateCallsForNonInOrderVerification()",
        "snippet": "    @Test\n    public void shouldFailToCreateCallsForNonInOrderVerification(){\n        // Given\n        mockOne.voidMethod();\n        exceptionRule.expect( MockitoException.class );\n        exceptionRule.expectMessage( \"calls is only intended to work with InOrder\" );\n\n        // When\n        verify( mockOne, calls(1)).voidMethod();\n\n        // Then - expected exception thrown\n    }",
        "begin_line": 518,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 29)",
            "(line 522,col 9)-(line 522,col 55)",
            "(line 523,col 9)-(line 523,col 85)",
            "(line 526,col 9)-(line 526,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = Mockito.mock(IMethods.class, \"iMethods\");\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_name()",
        "snippet": "    @Test\n    public void should_print_method_name() {\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage =\n                    \"\\n\" +\n                    \"Wanted but not invoked:\" +\n                    \"\\n\" +\n                    \"iMethods.simpleMethod();\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedMessage, actualMessage);\n        }\n    }",
        "begin_line": 39,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 54,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.Foo.toString()",
        "snippet": "        public String toString() {\n            return \"foo\";\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_name_and_arguments()",
        "snippet": "    @Test\n    public void should_print_method_name_and_arguments() {\n        try {\n            verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"iMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\", e.getMessage());\n        }\n    }",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 70,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_actual_and_wanted_in_line()",
        "snippet": "    @Test\n    public void should_print_actual_and_wanted_in_line() {\n        mock.varargs(1, 2);\n\n        try {\n            verify(mock).varargs(1, 1000);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            String wanted =\n                    \"\\n\" +\n                    \"Argument(s) are different! Wanted:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(1, 1000);\";\n\n            assertContains(wanted, e.getMessage());\n\n            String actual =\n                    \"\\n\" +\n                    \"Actual invocation has different arguments:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(1, 2);\";\n\n            assertContains(actual, e.getMessage());\n        }\n    }",
        "begin_line": 73,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 27)",
            "(line 77,col 9)-(line 96,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_actual_and_wanted_in_multiple_lines()",
        "snippet": "    @Test\n    public void should_print_actual_and_wanted_in_multiple_lines() {\n        mock.varargs(\"this is very long string\", \"this is another very long string\");\n\n        try {\n            verify(mock).varargs(\"x\", \"y\", \"z\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            String wanted =\n                    \"\\n\" +\n                    \"Argument(s) are different! Wanted:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(\" +\n                    \"\\n\" +\n                    \"    \\\"x\\\",\" +\n                    \"\\n\" +\n                    \"    \\\"y\\\",\" +\n                    \"\\n\" +\n                    \"    \\\"z\\\"\" +\n                    \"\\n\" +\n                    \");\";\n\n            assertContains(wanted, e.getMessage());\n\n            String actual =\n                    \"\\n\" +\n                    \"Actual invocation has different arguments:\" +\n                    \"\\n\" +\n                    \"iMethods.varargs(\" +\n                    \"\\n\" +\n                    \"    \\\"this is very long string\\\",\" +\n                    \"\\n\" +\n                    \"    \\\"this is another very long string\\\"\" +\n                    \"\\n\" +\n                    \");\";\n\n            assertContains(actual, e.getMessage());\n        }\n    }",
        "begin_line": 99,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 85)",
            "(line 103,col 9)-(line 136,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_actual_and_wanted_when_actual_method_name_and_wanted_method_name_are_the_same()",
        "snippet": "    @Test\n    public void should_print_actual_and_wanted_when_actual_method_name_and_wanted_method_name_are_the_same() {\n        mock.simpleMethod();\n\n        try {\n            verify(mock).simpleMethod(10);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"simpleMethod(10)\", e.getMessage());\n            assertContains(\"simpleMethod()\", e.getMessage());\n        }\n    }",
        "begin_line": 139,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 28)",
            "(line 143,col 9)-(line 149,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_actual_and_unverified_wanted_when_the_difference_is_about_arguments()",
        "snippet": "    @Test\n    public void should_print_actual_and_unverified_wanted_when_the_difference_is_about_arguments() {\n        mock.twoArgumentMethod(1, 1);\n        mock.twoArgumentMethod(2, 2);\n\n        verify(mock).twoArgumentMethod(1, 1);\n        try {\n            verify(mock).twoArgumentMethod(2, 1000);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"(2, 1000)\", e.getMessage());\n            assertContains(\"(2, 2)\", e.getMessage());\n        }\n    }",
        "begin_line": 152,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 37)",
            "(line 155,col 9)-(line 155,col 37)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 164,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_first_unexpected_invocation()",
        "snippet": "    @Test\n    public void should_print_first_unexpected_invocation() {\n        mock.oneArg(true);\n        mock.oneArg(false);\n        mock.threeArgumentMethod(1, \"2\", \"3\");\n\n        verify(mock).oneArg(true);\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            String expectedMessage =\n                    \"\\n\" +\n                    \"No interactions wanted here:\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedMessage, e.getMessage());\n\n            String expectedCause =\n                    \"\\n\" +\n                    \"But found this interaction on mock '\" + mock + \"':\" +\n                    \"\\n\" +\n                    \"-> at\";\n            assertContains(expectedCause, e.getMessage());\n        }\n    }",
        "begin_line": 167,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 26)",
            "(line 170,col 9)-(line 170,col 27)",
            "(line 171,col 9)-(line 171,col 46)",
            "(line 173,col 9)-(line 173,col 34)",
            "(line 174,col 9)-(line 191,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_first_unexpected_invocation_when_verifying_zero_interactions()",
        "snippet": "    @Test\n    public void should_print_first_unexpected_invocation_when_verifying_zero_interactions() {\n        mock.twoArgumentMethod(1, 2);\n        mock.threeArgumentMethod(1, \"2\", \"3\");\n\n        try {\n            verifyZeroInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            String expected =\n                    \"\\n\" +\n                    \"No interactions wanted here:\" +\n                    \"\\n\" +\n                    \"-> at\";\n\n            assertContains(expected, e.getMessage());\n\n            String expectedCause =\n                \"\\n\" +\n                \"But found this interaction on mock '\" + mock + \"':\" +\n                \"\\n\" +\n                \"-> at\";\n\n            assertContains(expectedCause, e.getMessage());\n        }\n    }",
        "begin_line": 194,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 37)",
            "(line 197,col 9)-(line 197,col 46)",
            "(line 199,col 9)-(line 218,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_name_when_verifying_at_least_once()",
        "snippet": "    @Test\n    public void should_print_method_name_when_verifying_at_least_once() throws Exception {\n        try {\n            verify(mock, atLeastOnce()).twoArgumentMethod(1, 2);\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"twoArgumentMethod(1, 2)\", e.getMessage());\n        }\n    }",
        "begin_line": 221,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 228,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_when_matcher_used()",
        "snippet": "    @Test\n    public void should_print_method_when_matcher_used() throws Exception {\n        try {\n            verify(mock, atLeastOnce()).twoArgumentMethod(anyInt(), eq(100));\n            fail();\n        } catch (WantedButNotInvoked e) {\n            String actualMessage = e.getMessage();\n            String expectedMessage =\n                \"\\n\" +\n                \"Wanted but not invoked:\" +\n                \"\\n\" +\n                \"iMethods.twoArgumentMethod(\\n\" +\n                \"    isA(java.lang.Integer),\\n\" +\n                \"    100\\n\" +\n                \");\";\n            assertContains(expectedMessage, actualMessage);\n        }\n    }",
        "begin_line": 231,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 247,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_when_missing_invocation_with_array_matcher()",
        "snippet": "    @Test\n    public void should_print_method_when_missing_invocation_with_array_matcher() {\n        mock.oneArray(new boolean[] { true, false, false });\n\n        try {\n            verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"[false, false, false]\", e.getMessage());\n            assertContains(\"[true, false, false]\", e.getMessage());\n        }\n    }",
        "begin_line": 250,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 252,col 9)-(line 252,col 60)",
            "(line 254,col 9)-(line 260,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_when_missing_invocation_with_vararg_matcher()",
        "snippet": "    @Test\n    public void should_print_method_when_missing_invocation_with_vararg_matcher() {\n        mock.varargsString(10, \"xxx\", \"yyy\", \"zzz\");\n\n        try {\n            verify(mock).varargsString(10, \"111\", \"222\", \"333\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"111\", e.getMessage());\n            assertContains(\"\\\"xxx\\\"\", e.getMessage());\n        }\n    }",
        "begin_line": 263,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 52)",
            "(line 267,col 9)-(line 273,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_when_missing_invocation_with_matcher()",
        "snippet": "    @Test\n    public void should_print_method_when_missing_invocation_with_matcher() {\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod(matches(\"burrito from Exmouth\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"matches(\\\"burrito from Exmouth\\\")\", e.getMessage());\n            assertContains(\"\\\"foo\\\"\", e.getMessage());\n        }\n    }",
        "begin_line": 276,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 33)",
            "(line 280,col 9)-(line 286,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_null_arguments()",
        "snippet": "    @Test\n    public void should_print_null_arguments() throws Exception {\n        mock.simpleMethod(null, (Integer) null);\n        try {\n            verify(mock).simpleMethod(\"test\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"simpleMethod(null, null);\", e.getMessage());\n        }\n    }",
        "begin_line": 289,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 48)",
            "(line 292,col 9)-(line 297,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_say_never_wanted_but_invoked()",
        "snippet": "    @Test\n    public void should_say_never_wanted_but_invoked() throws Exception {\n        mock.simpleMethod(1);\n\n        verify(mock, never()).simpleMethod(2);\n        try {\n            verify(mock, never()).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertContains(\"Never wanted here:\", e.getMessage());\n            assertContains(\"But invoked here:\", e.getMessage());\n        }\n    }",
        "begin_line": 300,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 29)",
            "(line 304,col 9)-(line 304,col 46)",
            "(line 305,col 9)-(line 311,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_show_right_actual_method()",
        "snippet": "    @Test\n    public void should_show_right_actual_method() throws Exception {\n        mock.simpleMethod(9191);\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod(\"bar\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"bar\", e.getMessage());\n            assertContains(\"foo\", e.getMessage());\n        }\n    }",
        "begin_line": 314,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 32)",
            "(line 317,col 9)-(line 317,col 33)",
            "(line 319,col 9)-(line 325,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_field_name_when_annotations_used()",
        "snippet": "    @Test\n    public void should_print_field_name_when_annotations_used() throws Exception {\n        iHavefunkyName.simpleMethod(10);\n\n        try {\n            verify(iHavefunkyName).simpleMethod(20);\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"iHavefunkyName.simpleMethod(20)\", e.getMessage());\n            assertContains(\"iHavefunkyName.simpleMethod(10)\", e.getMessage());\n        }\n    }",
        "begin_line": 330,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 40)",
            "(line 334,col 9)-(line 340,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_interactions_on_mock_when_ordinary_verification_fail()",
        "snippet": "    @Test\n    public void should_print_interactions_on_mock_when_ordinary_verification_fail() throws Exception {\n        mock.otherMethod();\n        mock.booleanReturningMethod();\n\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n//            assertContains(\"\")\n        }\n    }",
        "begin_line": 343,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 27)",
            "(line 346,col 9)-(line 346,col 38)",
            "(line 348,col 9)-(line 353,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_never_break_method_string_when_no_args_in_method()",
        "snippet": "    @Test\n    public void should_never_break_method_string_when_no_args_in_method() throws Exception {\n        try {\n            verify(veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock).simpleMethod();\n            fail();\n        } catch(WantedButNotInvoked e) {\n            assertContains(\"veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock.simpleMethod()\", e.getMessage());\n        }\n    }",
        "begin_line": 358,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 365,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_name_and_arguments_of_other_interactions_with_different_methods()",
        "snippet": "    @Test\n    public void should_print_method_name_and_arguments_of_other_interactions_with_different_methods() throws Exception {\n        try {\n            mock.arrayMethod(new String[] {\"a\", \"b\", \"c\"});\n            mock.forByte((byte) 25);\n\n            verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n            fail();\n        } catch (WantedButNotInvoked e) {\n            System.out.println(e);\n            assertContains(\"iMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\", e.getMessage());\n            assertContains(\"iMethods.arrayMethod([\\\"a\\\", \\\"b\\\", \\\"c\\\"])\", e.getMessage());\n            assertContains(\"iMethods.forByte(25)\", e.getMessage());\n        }\n    }",
        "begin_line": 368,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 381,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.should_print_method_name_and_arguments_of_other_interactions_of_same_method()",
        "snippet": "    @Test\n    @Ignore(\"issue 380 related\")\n    public void should_print_method_name_and_arguments_of_other_interactions_of_same_method() throws Exception {\n        try {\n            mock.forByte((byte) 25);\n            mock.forByte((byte) 12);\n\n            verify(mock).forByte((byte) 42);\n            fail();\n        } catch (WantedButNotInvoked e) {\n            System.out.println(e);\n            assertContains(\"iMethods.forByte(42)\", e.getMessage());\n            assertContains(\"iMethods.forByte(25)\", e.getMessage());\n            assertContains(\"iMethods.forByte(12)\", e.getMessage());\n        }\n    }",
        "begin_line": 384,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 398,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.test1()",
        "snippet": "    @Test\n    @Ignore(\"issue 380 related\")\n    public void test1() {\n        AnInterface m = Mockito.mock(AnInterface.class);\n\n        for (int i = 1; i <= 2; i++) {\n            m.foo(i);\n        }\n\n        verify(m).foo(1);\n        verify(m).foo(2);\n        verify(m).foo(3); // XXX: doesn't mention the parameters of foo(1) and foo(2)\n        verify(m).foo(4);\n    }",
        "begin_line": 401,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 56)",
            "(line 406,col 9)-(line 408,col 9)",
            "(line 410,col 9)-(line 410,col 25)",
            "(line 411,col 9)-(line 411,col 25)",
            "(line 412,col 9)-(line 412,col 25)",
            "(line 413,col 9)-(line 413,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.test2()",
        "snippet": "    @Test\n    @Ignore(\"issue 380 related\")\n    public void test2() {\n        AnInterface m = Mockito.mock(AnInterface.class);\n\n        for (int i = 1; i <= 4; i++) {\n            m.foo(i);\n        }\n\n        verify(m).foo(1);\n        verify(m).foo(2);\n        verify(m).foo(5); // XXX: doesn't mention foo(4) at all\n    }",
        "begin_line": 416,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 56)",
            "(line 421,col 9)-(line 423,col 9)",
            "(line 425,col 9)-(line 425,col 25)",
            "(line 426,col 9)-(line 426,col 25)",
            "(line 427,col 9)-(line 427,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.AnInterface.foo(int)",
        "snippet": "        void foo(int i);",
        "begin_line": 431,
        "end_line": 431,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldWorkFineIfNoInvocatins()",
        "snippet": "    @Test\n    public void shouldWorkFineIfNoInvocatins() throws Exception {\n        //when\n        InOrder inOrder = inOrder(mock);\n        \n        //then\n        inOrder.verifyNoMoreInteractions();        \n    }",
        "begin_line": 23,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 40)",
            "(line 29,col 9)-(line 29,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldSayNoInteractionsWanted()",
        "snippet": "    @Test\n    public void shouldSayNoInteractionsWanted() throws Exception {\n        //when\n        mock.simpleMethod();\n        \n        //then\n        InOrder inOrder = inOrder(mock);\n        try {\n            inOrder.verifyNoMoreInteractions();\n            fail();\n        } catch(VerificationInOrderFailure e) {\n            assertContains(\"No interactions wanted\", e.getMessage());\n        }\n    }",
        "begin_line": 32,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 28)",
            "(line 38,col 9)-(line 38,col 40)",
            "(line 39,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldVerifyNoMoreInteractionsInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyNoMoreInteractionsInOrder() throws Exception {\n        //when\n        mock.simpleMethod();\n        mock.simpleMethod(10);\n        mock.otherMethod();\n        \n        //then\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).simpleMethod(10);\n        inOrder.verify(mock).otherMethod();\n        inOrder.verifyNoMoreInteractions();        \n    }",
        "begin_line": 47,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 28)",
            "(line 51,col 9)-(line 51,col 30)",
            "(line 52,col 9)-(line 52,col 27)",
            "(line 55,col 9)-(line 55,col 40)",
            "(line 56,col 9)-(line 56,col 46)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 58,col 9)-(line 58,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldVerifyNoMoreInteractionsInOrderWithMultipleMocks()",
        "snippet": "    @Test\n    public void shouldVerifyNoMoreInteractionsInOrderWithMultipleMocks() throws Exception {\n        //when\n        mock.simpleMethod();\n        mock2.simpleMethod();\n        mock.otherMethod();\n        \n        //then\n        InOrder inOrder = inOrder(mock, mock2);\n        inOrder.verify(mock2).simpleMethod();\n        inOrder.verify(mock).otherMethod();\n        inOrder.verifyNoMoreInteractions();        \n    }",
        "begin_line": 61,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 28)",
            "(line 65,col 9)-(line 65,col 29)",
            "(line 66,col 9)-(line 66,col 27)",
            "(line 69,col 9)-(line 69,col 47)",
            "(line 70,col 9)-(line 70,col 45)",
            "(line 71,col 9)-(line 71,col 43)",
            "(line 72,col 9)-(line 72,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldFailToVerifyNoMoreInteractionsInOrder()",
        "snippet": "    @Test\n    public void shouldFailToVerifyNoMoreInteractionsInOrder() throws Exception {\n        //when\n        mock.simpleMethod();\n        mock.simpleMethod(10);\n        mock.otherMethod();\n        \n        //then\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).simpleMethod(10);\n        try {\n            inOrder.verifyNoMoreInteractions();\n            fail();\n        } catch(VerificationInOrderFailure e) {}\n    }",
        "begin_line": 75,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 28)",
            "(line 79,col 9)-(line 79,col 30)",
            "(line 80,col 9)-(line 80,col 27)",
            "(line 83,col 9)-(line 83,col 40)",
            "(line 84,col 9)-(line 84,col 46)",
            "(line 85,col 9)-(line 88,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldFailToVerifyNoMoreInteractionsInOrderWithMultipleMocks()",
        "snippet": "    @Test\n    public void shouldFailToVerifyNoMoreInteractionsInOrderWithMultipleMocks() throws Exception {\n        //when\n        mock.simpleMethod();\n        mock2.simpleMethod();\n        mock.otherMethod();\n        \n        //then\n        InOrder inOrder = inOrder(mock, mock2);\n        inOrder.verify(mock2).simpleMethod();\n        try {\n            inOrder.verifyNoMoreInteractions();\n            fail();\n        } catch(VerificationInOrderFailure e) {}\n    }",
        "begin_line": 91,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 28)",
            "(line 95,col 9)-(line 95,col 29)",
            "(line 96,col 9)-(line 96,col 27)",
            "(line 99,col 9)-(line 99,col 47)",
            "(line 100,col 9)-(line 100,col 45)",
            "(line 101,col 9)-(line 104,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java",
        "signature": "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest.shouldValidateState()",
        "snippet": "    @Test\n    public void shouldValidateState() throws Exception {\n        //when\n        InOrder inOrder = inOrder(mock);\n        verify(mock); // mess up state\n        \n        //then\n        try {\n            inOrder.verifyNoMoreInteractions();\n            fail();\n        } catch(UnfinishedVerificationException e) {}\n    }",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 40)",
            "(line 111,col 9)-(line 111,col 21)",
            "(line 114,col 9)-(line 117,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldVerifyMethodWasInvokedExclusively()",
        "snippet": "    @Test\n    public void shouldVerifyMethodWasInvokedExclusively() {\n        mock.clear();\n        verify(mock, only()).clear();\n    }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 21)",
            "(line 29,col 9)-(line 29,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldVerifyMethodWasInvokedExclusivelyWithMatchersUsage()",
        "snippet": "    @Test\n    public void shouldVerifyMethodWasInvokedExclusivelyWithMatchersUsage() {\n        mock.get(0);\n        verify(mock, only()).get(anyInt());\n    }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)",
            "(line 35,col 9)-(line 35,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldFailIfMethodWasNotInvoked()",
        "snippet": "    @Test\n    public void shouldFailIfMethodWasNotInvoked() {\n        mock.clear();\n        try {\n            verify(mock, only()).get(0);\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 38,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 21)",
            "(line 41,col 9)-(line 44,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldFailIfMethodWasInvokedMoreThanOnce()",
        "snippet": "    @Test\n    public void shouldFailIfMethodWasInvokedMoreThanOnce() {\n        mock.clear();\n        mock.clear();\n        try {\n            verify(mock, only()).clear();\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 21)",
            "(line 50,col 9)-(line 50,col 21)",
            "(line 51,col 9)-(line 54,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldFailIfMethodWasInvokedButWithDifferentArguments()",
        "snippet": "    @Test\n    public void shouldFailIfMethodWasInvokedButWithDifferentArguments() {\n        mock.get(0);\n        mock.get(2);\n        try {\n            verify(mock, only()).get(999);\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 20)",
            "(line 60,col 9)-(line 60,col 20)",
            "(line 61,col 9)-(line 64,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldFailIfExtraMethodWithDifferentArgsFound()",
        "snippet": "    @Test\n    public void shouldFailIfExtraMethodWithDifferentArgsFound() {\n        mock.get(0);\n        mock.get(2);\n        try {\n            verify(mock, only()).get(2);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 20)",
            "(line 70,col 9)-(line 70,col 20)",
            "(line 71,col 9)-(line 74,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OnlyVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OnlyVerificationTest.java",
        "signature": "org.mockitousage.verification.OnlyVerificationTest.shouldVerifyMethodWasInvokedExclusivelyWhenTwoMocksInUse()",
        "snippet": "    @Test\n    public void shouldVerifyMethodWasInvokedExclusivelyWhenTwoMocksInUse() {\n        mock.clear();\n        mock2.get(0);\n        verify(mock, only()).clear();\n        verify(mock2, only()).get(0);\n    }",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 21)",
            "(line 80,col 9)-(line 80,col 21)",
            "(line 81,col 9)-(line 81,col 37)",
            "(line 82,col 9)-(line 82,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest.shouldVerifyActualNumberOfInvocationsSmallerThanWanted()",
        "snippet": "    @Test\n    public void shouldVerifyActualNumberOfInvocationsSmallerThanWanted() throws Exception {\n        mock.clear();\n        mock.clear();\n        mock.clear();\n\n        Mockito.verify(mock, times(3)).clear();\n        try {\n            Mockito.verify(mock, times(100)).clear();\n            fail();\n        } catch (TooLittleActualInvocations e) {\n            assertContains(\"mock.clear();\", e.getMessage());\n            assertContains(\"Wanted 100 times\", e.getMessage());\n            assertContains(\"was 3\", e.getMessage());\n        }\n    }",
        "begin_line": 24,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 21)",
            "(line 27,col 9)-(line 27,col 21)",
            "(line 28,col 9)-(line 28,col 21)",
            "(line 30,col 9)-(line 30,col 47)",
            "(line 31,col 9)-(line 38,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java",
        "signature": "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest.shouldVerifyActualNumberOfInvocationsLargerThanWanted()",
        "snippet": "    @Test\n    public void shouldVerifyActualNumberOfInvocationsLargerThanWanted() throws Exception {\n        mock.clear();\n        mock.clear();\n        mock.clear();\n        mock.clear();\n\n        Mockito.verify(mock, times(4)).clear();\n        try {\n            Mockito.verify(mock, times(1)).clear();\n            fail();\n        } catch (TooManyActualInvocations e) {\n            assertContains(\"mock.clear();\", e.getMessage());\n            assertContains(\"Wanted 1 time\", e.getMessage());\n            assertContains(\"was 4\", e.getMessage());\n        }\n    }",
        "begin_line": 41,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 21)",
            "(line 44,col 9)-(line 44,col 21)",
            "(line 45,col 9)-(line 45,col 21)",
            "(line 46,col 9)-(line 46,col 21)",
            "(line 48,col 9)-(line 48,col 47)",
            "(line 49,col 9)-(line 56,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail()",
        "snippet": "    @Test\n    public void shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {\n        firstInteraction();\n        secondInteraction();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"However, there were other interactions with this mock\", e.getMessage());\n            assertContains(\"firstInteraction(\", e.getMessage());\n            assertContains(\"secondInteraction(\", e.getMessage());\n        }\n    }",
        "begin_line": 21,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 27)",
            "(line 24,col 9)-(line 24,col 28)",
            "(line 26,col 9)-(line 33,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldNotShowAllInteractionsOnDifferentMock()",
        "snippet": "    @Test\n    public void shouldNotShowAllInteractionsOnDifferentMock() throws Exception {\n        differentMockInteraction();\n        firstInteraction();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"firstInteraction(\", e.getMessage());\n            assertNotContains(\"differentMockInteraction(\", e.getMessage());\n        }\n    }",
        "begin_line": 36,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 35)",
            "(line 39,col 9)-(line 39,col 27)",
            "(line 41,col 9)-(line 47,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions()",
        "snippet": "    @Test\n    public void shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions() throws Exception {\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"there were zero interactions with this mock.\", e.getMessage());\n        }\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.differentMockInteraction()",
        "snippet": "    private void differentMockInteraction() {\n        mockTwo.simpleMethod();\n    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.secondInteraction()",
        "snippet": "    private void secondInteraction() {\n        mock.booleanReturningMethod();\n    }",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java",
        "signature": "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.firstInteraction()",
        "snippet": "    private void firstInteraction() {\n        mock.otherMethod();\n    }",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyExactNumberOfInvocationsUsingMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyExactNumberOfInvocationsUsingMatcher() {\n        mock.simpleMethod(1);\n        mock.simpleMethod(2);\n        mock.simpleMethod(3);\n        \n        verify(mock, times(3)).simpleMethod(anyInt());\n    }",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 29)",
            "(line 32,col 9)-(line 32,col 29)",
            "(line 33,col 9)-(line 33,col 29)",
            "(line 35,col 9)-(line 35,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyUsingSameMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyUsingSameMatcher() {\n        Object one = new String(\"1243\");\n        Object two = new String(\"1243\");\n        Object three = new String(\"1243\");\n\n        assertNotSame(one, two);\n        assertEquals(one, two);\n        assertEquals(two, three);\n\n        mock.oneArg(one);\n        mock.oneArg(two);\n        \n        verify(mock).oneArg(same(one));\n        verify(mock, times(2)).oneArg(two);\n        \n        try {\n            verify(mock).oneArg(same(three));\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }  ",
        "begin_line": 38,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 40)",
            "(line 42,col 9)-(line 42,col 42)",
            "(line 44,col 9)-(line 44,col 32)",
            "(line 45,col 9)-(line 45,col 31)",
            "(line 46,col 9)-(line 46,col 33)",
            "(line 48,col 9)-(line 48,col 25)",
            "(line 49,col 9)-(line 49,col 25)",
            "(line 51,col 9)-(line 51,col 39)",
            "(line 52,col 9)-(line 52,col 43)",
            "(line 54,col 9)-(line 57,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationUsingMatchersTest.java",
        "signature": "org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyUsingMixedMatchers()",
        "snippet": "    @Test\n    public void shouldVerifyUsingMixedMatchers() {\n        mock.threeArgumentMethod(11, \"\", \"01234\");\n\n        try {\n            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n\n        mock.threeArgumentMethod(8, new Object(), \"01234\");\n        \n        try {\n            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n        \n        mock.threeArgumentMethod(8, \"\", \"no match\");\n\n        try {\n            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n        \n        mock.threeArgumentMethod(8, \"\", \"123\");\n        \n        verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), Matchers.contains(\"123\"));\n    }",
        "begin_line": 60,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 50)",
            "(line 64,col 9)-(line 67,col 44)",
            "(line 69,col 9)-(line 69,col 59)",
            "(line 71,col 9)-(line 74,col 44)",
            "(line 76,col 9)-(line 76,col 52)",
            "(line 78,col 9)-(line 81,col 44)",
            "(line 83,col 9)-(line 83,col 47)",
            "(line 85,col 9)-(line 85,col 108)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n\n        inOrder = inOrder(mockOne, mockTwo, mockThree);\n\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockTwo.simpleMethod(2);\n        mockOne.simpleMethod(4);\n    }",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 39)",
            "(line 31,col 9)-(line 31,col 39)",
            "(line 32,col 9)-(line 32,col 41)",
            "(line 34,col 9)-(line 34,col 55)",
            "(line 36,col 9)-(line 36,col 32)",
            "(line 37,col 9)-(line 37,col 32)",
            "(line 38,col 9)-(line 38,col 32)",
            "(line 39,col 9)-(line 39,col 34)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 41,col 9)-(line 41,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyInOrder() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 48)",
            "(line 47,col 9)-(line 47,col 58)",
            "(line 48,col 9)-(line 48,col 50)",
            "(line 49,col 9)-(line 49,col 48)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrderUsingAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderUsingAtLeastOnce() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 54,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 63)",
            "(line 57,col 9)-(line 57,col 58)",
            "(line 58,col 9)-(line 58,col 50)",
            "(line 59,col 9)-(line 59,col 48)",
            "(line 60,col 9)-(line 60,col 63)",
            "(line 61,col 9)-(line 61,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrderWhenExpectingSomeInvocationsToBeCalledZeroTimes()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderWhenExpectingSomeInvocationsToBeCalledZeroTimes() {\n        inOrder.verify(mockOne, times(0)).oneArg(false);\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockTwo, times(0)).simpleMethod(22);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        inOrder.verify(mockThree, times(0)).oneArg(false);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 64,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 56)",
            "(line 67,col 9)-(line 67,col 48)",
            "(line 68,col 9)-(line 68,col 58)",
            "(line 69,col 9)-(line 69,col 59)",
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 48)",
            "(line 72,col 9)-(line 72,col 48)",
            "(line 73,col 9)-(line 73,col 58)",
            "(line 74,col 9)-(line 74,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenFirstMockCalledTwice()",
        "snippet": "    @Test\n    public void shouldFailWhenFirstMockCalledTwice() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 77,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 48)",
            "(line 80,col 9)-(line 84,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenLastMockCalledTwice()",
        "snippet": "    @Test\n    public void shouldFailWhenLastMockCalledTwice() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(4);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 87,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 48)",
            "(line 90,col 9)-(line 90,col 58)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 92,col 9)-(line 92,col 48)",
            "(line 93,col 9)-(line 93,col 48)",
            "(line 94,col 9)-(line 98,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseOneInvocationWanted()",
        "snippet": "    @Test(expected = VerificationInOrderFailure.class)\n    public void shouldFailOnFirstMethodBecauseOneInvocationWanted() {\n        inOrder.verify(mockOne, times(0)).simpleMethod(1);\n    }",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseOneInvocationWantedAgain()",
        "snippet": "    @Test(expected = VerificationInOrderFailure.class)\n    public void shouldFailOnFirstMethodBecauseOneInvocationWantedAgain() {\n        inOrder.verify(mockOne, times(2)).simpleMethod(1);\n    }",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseFourInvocationsWanted()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseFourInvocationsWanted() {\n        inOrder.verify(mockOne, times(1)).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 58)",
            "(line 114,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain() {\n        inOrder.verify(mockOne, times(1)).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 121,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 58)",
            "(line 124,col 9)-(line 128,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseOneInvocationWanted()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseOneInvocationWanted() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree, atLeastOnce()).simpleMethod(3);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne, times(0)).simpleMethod(4);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 131,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 63)",
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 63)",
            "(line 137,col 9)-(line 141,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseOneInvocationWantedAgain()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseOneInvocationWantedAgain() {\n        inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree, atLeastOnce()).simpleMethod(3);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne, times(2)).simpleMethod(4);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 144,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 63)",
            "(line 147,col 9)-(line 147,col 58)",
            "(line 148,col 9)-(line 148,col 65)",
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 154,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseDifferentArgsWanted()",
        "snippet": "    @Test(expected = ArgumentsAreDifferent.class)\n    public void shouldFailOnFirstMethodBecauseDifferentArgsWanted() {\n        inOrder.verify(mockOne).simpleMethod(100);\n    }",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseDifferentMethodWanted()",
        "snippet": "    @Test(expected = WantedButNotInvoked.class)\n    public void shouldFailOnFirstMethodBecauseDifferentMethodWanted() {\n        inOrder.verify(mockOne).oneArg(true);\n    }",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseDifferentArgsWanted()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseDifferentArgsWanted() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(2)).simpleMethod(-999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 169,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 48)",
            "(line 172,col 9)-(line 176,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseDifferentMethodWanted()",
        "snippet": "    @Test\n    public void shouldFailOnSecondMethodBecauseDifferentMethodWanted() {\n        inOrder.verify(mockOne, times(1)).simpleMethod(1);\n        try {\n            inOrder.verify(mockTwo, times(2)).oneArg(true);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 179,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 58)",
            "(line 182,col 9)-(line 186,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseDifferentArgsWanted()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseDifferentArgsWanted() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(-666);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 189,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 48)",
            "(line 192,col 9)-(line 192,col 58)",
            "(line 193,col 9)-(line 193,col 50)",
            "(line 194,col 9)-(line 194,col 48)",
            "(line 195,col 9)-(line 199,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseDifferentMethodWanted()",
        "snippet": "    @Test\n    public void shouldFailOnLastMethodBecauseDifferentMethodWanted() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).oneArg(false);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 202,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 48)",
            "(line 205,col 9)-(line 205,col 58)",
            "(line 206,col 9)-(line 206,col 50)",
            "(line 207,col 9)-(line 207,col 48)",
            "(line 208,col 9)-(line 212,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenLastMethodVerifiedFirst()",
        "snippet": "    @Test\n    public void shouldFailWhenLastMethodVerifiedFirst() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 217,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 48)",
            "(line 220,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenMiddleMethodVerifiedFirst()",
        "snippet": "    @Test\n    public void shouldFailWhenMiddleMethodVerifiedFirst() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 227,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 58)",
            "(line 230,col 9)-(line 234,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenMiddleMethodVerifiedFirstInAtLeastOnceMode()",
        "snippet": "    @Test\n    public void shouldFailWhenMiddleMethodVerifiedFirstInAtLeastOnceMode() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n        }\n    }",
        "begin_line": 237,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 63)",
            "(line 240,col 9)-(line 244,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnVerifyNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldFailOnVerifyNoMoreInteractions() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n\n        try {\n            verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n            fail();\n        } catch (NoInteractionsWanted e) {\n        }\n    }",
        "begin_line": 247,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 48)",
            "(line 250,col 9)-(line 250,col 58)",
            "(line 251,col 9)-(line 251,col 50)",
            "(line 252,col 9)-(line 252,col 48)",
            "(line 254,col 9)-(line 258,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnVerifyZeroInteractions()",
        "snippet": "    @Test(expected = NoInteractionsWanted.class)\n    public void shouldFailOnVerifyZeroInteractions() {\n        verifyZeroInteractions(mockOne);\n    }",
        "begin_line": 261,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.BasicVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/BasicVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.BasicVerificationInOrderTest.shouldScreamWhenNullPassed()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected = MockitoException.class)\n    public void shouldScreamWhenNullPassed() {\n        inOrder((Object[])null);\n    }",
        "begin_line": 266,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.after()",
        "snippet": "    @After\n    public void after() {\n        //making sure there are no threading related exceptions\n        assertTrue(exceptions.isEmpty());\n        exceptions.clear();\n    }",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 41)",
            "(line 35,col 9)-(line 35,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldVerifyWithTimeout()",
        "snippet": "    @Test\n    public void shouldVerifyWithTimeout() {}",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldFailVerificationWithTimeout()",
        "snippet": "    @Test\n    public void shouldFailVerificationWithTimeout() {}",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldAllowMixingOtherModesWithTimeout()",
        "snippet": "    @Test\n    public void shouldAllowMixingOtherModesWithTimeout() {}",
        "begin_line": 86,
        "end_line": 87,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldAllowMixingOtherModesWithTimeoutAndFail()",
        "snippet": "    @Test\n    public void shouldAllowMixingOtherModesWithTimeoutAndFail() {}",
        "begin_line": 105,
        "end_line": 106,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldAllowMixingOnlyWithTimeout()",
        "snippet": "    @Test\n    public void shouldAllowMixingOnlyWithTimeout() {}",
        "begin_line": 126,
        "end_line": 127,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldAllowMixingOnlyWithTimeoutAndFail()",
        "snippet": "    @Test\n    public void shouldAllowMixingOnlyWithTimeoutAndFail() {}",
        "begin_line": 142,
        "end_line": 143,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.canIgnoreInvocationsWithJunit()",
        "snippet": "    @Test\n    public void canIgnoreInvocationsWithJunit() {\n        //given\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n                mock.add(\"0\");\n                mock.add(\"1\");\n                VerificationWithTimeoutTest.this.sleep(100);\n                mock.add(\"2\");\n            }\n        };\n\n        //when\n        t1.start();\n\n        //then\n        verify(mock, timeout(200)).add(\"1\");\n        verify(mock, timeout(200)).add(\"2\");\n    }",
        "begin_line": 165,
        "end_line": 184,
        "comment": "\n     * This test is JUnit-specific because the code behaves different if JUnit is used.\n     ",
        "child_ranges": [
            "(line 168,col 9)-(line 176,col 10)",
            "(line 179,col 9)-(line 179,col 19)",
            "(line 182,col 9)-(line 182,col 44)",
            "(line 183,col 9)-(line 183,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.Anonymous-08ca0f7a-8bc2-455c-a816-4ee06aaef811.run()",
        "snippet": "            @Override\n            public void run() {\n                mock.add(\"0\");\n                mock.add(\"1\");\n                VerificationWithTimeoutTest.this.sleep(100);\n                mock.add(\"2\");\n            }",
        "begin_line": 169,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 171,col 17)-(line 171,col 30)",
            "(line 172,col 17)-(line 172,col 30)",
            "(line 173,col 17)-(line 173,col 60)",
            "(line 174,col 17)-(line 174,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.sleep(long)",
        "snippet": "    private void sleep(long milliseconds) {\n        try {\n            Thread.sleep(milliseconds);\n        } catch (InterruptedException ignored) {\n            // we do not need to handle this.\n        }\n    }",
        "begin_line": 186,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 191,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.shouldAllowTimeoutVerificationInOrder()",
        "snippet": "    @Ignore(\"TODO not yet implemented\")\n    @Test\n    public void shouldAllowTimeoutVerificationInOrder() throws Exception {\n        //given\n        Thread t1 = waitAndExerciseMock(20);\n\n        //when\n        t1.start();\n        mock.add(\"foo\");\n\n        //then\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).add(anyString());\n        inOrder.verify(mock, never()).clear();\n        inOrder.verify(mock, timeout(40)).clear();\n    }",
        "begin_line": 195,
        "end_line": 210,
        "comment": "TODO not yet implemented",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 44)",
            "(line 202,col 9)-(line 202,col 19)",
            "(line 203,col 9)-(line 203,col 24)",
            "(line 206,col 9)-(line 206,col 40)",
            "(line 207,col 9)-(line 207,col 46)",
            "(line 208,col 9)-(line 208,col 46)",
            "(line 209,col 9)-(line 209,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.waitAndExerciseMock(int)",
        "snippet": "    private Thread waitAndExerciseMock(final int sleep) {\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(sleep);\n                } catch (InterruptedException e) {\n                    exceptions.add(e);\n                    throw new RuntimeException(e);\n                }\n                mock.clear();\n            }\n        };\n        return t;\n    }",
        "begin_line": 212,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 224,col 10)",
            "(line 225,col 9)-(line 225,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationWithTimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationWithTimeoutTest.java",
        "signature": "org.mockitousage.verification.VerificationWithTimeoutTest.Anonymous-c13de361-8c73-4bb9-b5e7-3c9c3876b3d0.run()",
        "snippet": "            @Override\n            public void run() {\n                try {\n                    Thread.sleep(sleep);\n                } catch (InterruptedException e) {\n                    exceptions.add(e);\n                    throw new RuntimeException(e);\n                }\n                mock.clear();\n            }",
        "begin_line": 214,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 216,col 17)-(line 221,col 17)",
            "(line 222,col 17)-(line 222,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n        \n        inOrder = inOrder(mockOne, mockTwo, mockThree);\n\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockTwo.simpleMethod(2);\n        mockOne.simpleMethod(4);\n    }",
        "begin_line": 30,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 39)",
            "(line 33,col 9)-(line 33,col 39)",
            "(line 34,col 9)-(line 34,col 41)",
            "(line 36,col 9)-(line 36,col 55)",
            "(line 38,col 9)-(line 38,col 32)",
            "(line 39,col 9)-(line 39,col 32)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 41,col 9)-(line 41,col 34)",
            "(line 42,col 9)-(line 42,col 32)",
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderAllInvocations()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAllInvocations() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 46,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 48)",
            "(line 49,col 9)-(line 49,col 58)",
            "(line 50,col 9)-(line 50,col 50)",
            "(line 51,col 9)-(line 51,col 48)",
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderAndBeRelaxed()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAndBeRelaxed() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        \n        verifyNoMoreInteractions(mockThree);\n    }    ",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 58)",
            "(line 59,col 9)-(line 59,col 50)",
            "(line 61,col 9)-(line 61,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowFirstChunkBeforeLastInvocation()",
        "snippet": "    @Test\n    public void shouldAllowFirstChunkBeforeLastInvocation() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        \n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 64,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 58)",
            "(line 67,col 9)-(line 67,col 48)",
            "(line 69,col 9)-(line 72,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowAllChunksBeforeLastInvocation()",
        "snippet": "    @Test\n    public void shouldAllowAllChunksBeforeLastInvocation() {\n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        \n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 58)",
            "(line 78,col 9)-(line 78,col 48)",
            "(line 80,col 9)-(line 80,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyDetectFirstChunkOfInvocationThatExistInManyChunks()",
        "snippet": "    @Test\n    public void shouldVerifyDetectFirstChunkOfInvocationThatExistInManyChunks() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch(NoInteractionsWanted e) {}\n    }  ",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 58)",
            "(line 86,col 9)-(line 86,col 50)",
            "(line 87,col 9)-(line 90,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyDetectAllChunksOfInvocationThatExistInManyChunks()",
        "snippet": "    @Test\n    public void shouldVerifyDetectAllChunksOfInvocationThatExistInManyChunks() {\n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 58)",
            "(line 96,col 9)-(line 96,col 48)",
            "(line 97,col 9)-(line 97,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInteractionsFromAllChunksWhenAtLeastOnceMode()",
        "snippet": "    @Test\n    public void shouldVerifyInteractionsFromAllChunksWhenAtLeastOnceMode() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n        try {\n            inOrder.verify(mockThree).simpleMethod(3);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 100,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 63)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 107,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInteractionsFromFirstChunk()",
        "snippet": "    @Test\n    public void shouldVerifyInteractionsFromFirstChunk() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 110,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 58)",
            "(line 113,col 9)-(line 116,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailVerificationOfNonFirstChunk()",
        "snippet": "    @Test(expected=VerificationInOrderFailure.class)\n    public void shouldFailVerificationOfNonFirstChunk() {\n        inOrder.verify(mockTwo, times(1)).simpleMethod(2);\n    }",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldPassOnCombinationOfTimesAndAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldPassOnCombinationOfTimesAndAtLeastOnce() {\n        mockTwo.simpleMethod(2);\n        \n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 124,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 32)",
            "(line 128,col 9)-(line 128,col 58)",
            "(line 129,col 9)-(line 129,col 63)",
            "(line 130,col 9)-(line 130,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldPassOnEdgyCombinationOfTimesAndAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldPassOnEdgyCombinationOfTimesAndAtLeastOnce() {\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        \n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        \n        verifyNoMoreInteractions(mockThree);\n    }",
        "begin_line": 133,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 32)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 138,col 9)-(line 138,col 50)",
            "(line 139,col 9)-(line 139,col 63)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 142,col 9)-(line 142,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderMockTwoAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockTwoAndThree() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo, mockThree);\n    }     ",
        "begin_line": 145,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 58)",
            "(line 148,col 9)-(line 148,col 50)",
            "(line 149,col 9)-(line 149,col 48)",
            "(line 150,col 9)-(line 150,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderMockOneAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockOneAndThree() {\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockThree);\n    } ",
        "begin_line": 153,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 48)",
            "(line 156,col 9)-(line 156,col 50)",
            "(line 157,col 9)-(line 157,col 48)",
            "(line 158,col 9)-(line 158,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderOnlyTwoInvocations()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderOnlyTwoInvocations() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 58)",
            "(line 164,col 9)-(line 164,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderOnlyMockTwo()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderOnlyMockTwo() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 167,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 58)",
            "(line 170,col 9)-(line 170,col 48)",
            "(line 171,col 9)-(line 171,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyMockTwoCalledTwice()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoCalledTwice() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n    }",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyMockTwoCalledAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoCalledAtLeastOnce() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n    }",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnWrongMethodCalledOnMockTwo()",
        "snippet": "    @Test(expected=WantedButNotInvoked.class)\n    public void shouldFailOnWrongMethodCalledOnMockTwo() {\n        inOrder.verify(mockTwo, atLeastOnce()).differentMethod();\n    }",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowTimesZeroButOnlyInOrder()",
        "snippet": "    @Test\n    public void shouldAllowTimesZeroButOnlyInOrder() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockOne, times(0)).simpleMethod(1);\n        \n        try {\n            verify(mockOne, times(0)).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {}\n    }",
        "begin_line": 189,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 63)",
            "(line 192,col 9)-(line 192,col 58)",
            "(line 194,col 9)-(line 197,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailTimesZeroInOrder()",
        "snippet": "    @Test\n    public void shouldFailTimesZeroInOrder() {\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            inOrder.verify(mockThree, times(0)).simpleMethod(3);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 200,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 58)",
            "(line 203,col 9)-(line 206,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailWhenMockTwoWantedZeroTimes()",
        "snippet": "    @Test(expected=VerificationInOrderFailure.class)\n    public void shouldFailWhenMockTwoWantedZeroTimes() {\n        inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n    }",
        "begin_line": 209,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyLastInvocation()",
        "snippet": "    @Test\n    public void shouldVerifyLastInvocation() {\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifySecondAndLastInvocation()",
        "snippet": "    @Test\n    public void shouldVerifySecondAndLastInvocation() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 219,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 63)",
            "(line 222,col 9)-(line 222,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifySecondAndLastInvocationWhenAtLeastOnceUsed()",
        "snippet": "    @Test\n    public void shouldVerifySecondAndLastInvocationWhenAtLeastOnceUsed() {\n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n    }",
        "begin_line": 225,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 63)",
            "(line 228,col 9)-(line 228,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnLastTwoInvocationsInWrongOrder()",
        "snippet": "    @Test\n    public void shouldFailOnLastTwoInvocationsInWrongOrder() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 231,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 48)",
            "(line 234,col 9)-(line 237,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnLastAndFirstInWrongOrder()",
        "snippet": "    @Test\n    public void shouldFailOnLastAndFirstInWrongOrder() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 240,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 48)",
            "(line 243,col 9)-(line 246,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.RelaxedVerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnWrongMethodAfterLastInvocation()",
        "snippet": "    @Test\n    public void shouldFailOnWrongMethodAfterLastInvocation() {\n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 249,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 48)",
            "(line 252,col 9)-(line 255,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.teardown()",
        "snippet": "    @After\n    public void teardown() {\n        // making sure there are no threading related exceptions\n        assertTrue(exceptions.isEmpty());\n    }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.shouldVerifyNormallyWithSpecificTimes()",
        "snippet": "    @Test\n    public void shouldVerifyNormallyWithSpecificTimes() {}",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.shouldVerifyNormallyWithAtLeast()",
        "snippet": "    @Test\n    public void shouldVerifyNormallyWithAtLeast() {}",
        "begin_line": 53,
        "end_line": 54,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.shouldFailVerificationWithWrongTimes()",
        "snippet": "    @Test\n    public void shouldFailVerificationWithWrongTimes() {}",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.shouldWaitTheFullTimeIfTheTestCouldPass()",
        "snippet": "    @Test\n    public void shouldWaitTheFullTimeIfTheTestCouldPass() throws Exception {\n        // given\n        Thread t = waitAndExerciseMock(50);\n\n        // when\n        t.start();\n\n        // then        \n        long startTime = System.currentTimeMillis();\n        \n        try {\n            verify(mock, after(100).atLeast(2)).clear();\n            fail();\n        } catch (MockitoAssertionError e) {}\n        \n        assertTrue(System.currentTimeMillis() - startTime >= 100);\n    }",
        "begin_line": 86,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 43)",
            "(line 92,col 9)-(line 92,col 18)",
            "(line 95,col 9)-(line 95,col 52)",
            "(line 97,col 9)-(line 100,col 44)",
            "(line 102,col 9)-(line 102,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.shouldStopEarlyIfTestIsDefinitelyFailed()",
        "snippet": "    @Test\n    public void shouldStopEarlyIfTestIsDefinitelyFailed() {}",
        "begin_line": 105,
        "end_line": 106,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.waitAndExerciseMock(int)",
        "snippet": "    private Thread waitAndExerciseMock(final int sleep) {\n        Thread t = new Thread() {\n\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(sleep);\n                } catch (InterruptedException e) {\n                    exceptions.add(e);\n                    throw new RuntimeException(e);\n                }\n                mock.clear();\n            }\n        };\n        return t;\n    }",
        "begin_line": 121,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 134,col 10)",
            "(line 135,col 9)-(line 135,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationAfterDelayTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationAfterDelayTest.java",
        "signature": "org.mockitousage.verification.VerificationAfterDelayTest.Anonymous-4d90d600-0867-4600-bf7a-616ee1565558.run()",
        "snippet": "            @Override\n            public void run() {\n                try {\n                    Thread.sleep(sleep);\n                } catch (InterruptedException e) {\n                    exceptions.add(e);\n                    throw new RuntimeException(e);\n                }\n                mock.clear();\n            }",
        "begin_line": 124,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 126,col 17)-(line 131,col 17)",
            "(line 132,col 17)-(line 132,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n\n        mockOne.simpleMethod(1);\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n        mockThree.simpleMethod(3);\n        mockTwo.simpleMethod(2);\n        mockOne.simpleMethod(4);\n    }",
        "begin_line": 24,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 39)",
            "(line 27,col 9)-(line 27,col 39)",
            "(line 28,col 9)-(line 28,col 41)",
            "(line 30,col 9)-(line 30,col 32)",
            "(line 31,col 9)-(line 31,col 32)",
            "(line 32,col 9)-(line 32,col 32)",
            "(line 33,col 9)-(line 33,col 34)",
            "(line 34,col 9)-(line 34,col 32)",
            "(line 35,col 9)-(line 35,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyAllInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyAllInvocationsInOrder() {\n        InOrder inOrder = inOrder(mockOne, mockTwo, mockThree);\n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n    } ",
        "begin_line": 38,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 63)",
            "(line 41,col 9)-(line 41,col 48)",
            "(line 42,col 9)-(line 42,col 58)",
            "(line 43,col 9)-(line 43,col 50)",
            "(line 44,col 9)-(line 44,col 48)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 46,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyInOrderMockTwoAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockTwoAndThree() {\n        InOrder inOrder = inOrder(mockTwo, mockThree);\n        \n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo, mockThree);\n    }     ",
        "begin_line": 49,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 54)",
            "(line 53,col 9)-(line 53,col 58)",
            "(line 54,col 9)-(line 54,col 50)",
            "(line 55,col 9)-(line 55,col 48)",
            "(line 56,col 9)-(line 56,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyInOrderMockOneAndThree()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMockOneAndThree() {\n        InOrder inOrder = inOrder(mockOne, mockThree);\n        \n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockOne).simpleMethod(4);\n        verifyNoMoreInteractions(mockOne, mockThree);\n    } ",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 54)",
            "(line 63,col 9)-(line 63,col 48)",
            "(line 64,col 9)-(line 64,col 50)",
            "(line 65,col 9)-(line 65,col 48)",
            "(line 66,col 9)-(line 66,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockOneInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyMockOneInOrder() {\n        InOrder inOrder = inOrder(mockOne);\n        \n        inOrder.verify(mockOne).simpleMethod(1);\n        inOrder.verify(mockOne).simpleMethod(4);\n        \n        verifyNoMoreInteractions(mockOne);\n    } ",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 43)",
            "(line 73,col 9)-(line 73,col 48)",
            "(line 74,col 9)-(line 74,col 48)",
            "(line 76,col 9)-(line 76,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockOne()",
        "snippet": "    @Test\n    public void shouldFailVerificationForMockOne() {\n        InOrder inOrder = inOrder(mockOne);\n        \n        inOrder.verify(mockOne).simpleMethod(1);\n        try {\n            inOrder.verify(mockOne).differentMethod();\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    } ",
        "begin_line": 79,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 43)",
            "(line 83,col 9)-(line 83,col 48)",
            "(line 84,col 9)-(line 87,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockOneBecauseOfWrongOrder()",
        "snippet": "    @Test\n    public void shouldFailVerificationForMockOneBecauseOfWrongOrder() {\n        InOrder inOrder = inOrder(mockOne);\n        \n        inOrder.verify(mockOne).simpleMethod(4);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    } ",
        "begin_line": 90,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 43)",
            "(line 94,col 9)-(line 94,col 48)",
            "(line 95,col 9)-(line 98,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwoWhenThreeTimesUsed()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoWhenThreeTimesUsed() {\n        InOrder inOrder = inOrder(mockTwo);\n        \n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockTwo);\n    } ",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 43)",
            "(line 105,col 9)-(line 105,col 58)",
            "(line 107,col 9)-(line 107,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwo()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n        \n        inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n        \n        verifyNoMoreInteractions(mockTwo);\n    } ",
        "begin_line": 110,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 43)",
            "(line 114,col 9)-(line 114,col 63)",
            "(line 116,col 9)-(line 116,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockTwo()",
        "snippet": "    @Test\n    public void shouldFailVerificationForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 119,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 43)",
            "(line 123,col 9)-(line 126,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowNoMoreInvocationsForMockTwo()",
        "snippet": "    @Test\n    public void shouldThrowNoMoreInvocationsForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 129,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 43)",
            "(line 133,col 9)-(line 136,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowTooLittleInvocationsForMockTwo()",
        "snippet": "    @Test\n    public void shouldThrowTooLittleInvocationsForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 139,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 43)",
            "(line 143,col 9)-(line 146,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowTooManyInvocationsForMockTwo()",
        "snippet": "    @Test\n    public void shouldThrowTooManyInvocationsForMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        try {\n            inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 149,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 43)",
            "(line 153,col 9)-(line 156,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldAllowThreeTimesOnMockTwo()",
        "snippet": "    @Test\n    public void shouldAllowThreeTimesOnMockTwo() {\n        InOrder inOrder = inOrder(mockTwo);\n\n        inOrder.verify(mockTwo, times(3)).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo);\n    }",
        "begin_line": 159,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 43)",
            "(line 163,col 9)-(line 163,col 58)",
            "(line 164,col 9)-(line 164,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwoCompletely()",
        "snippet": "    @Test\n    public void shouldVerifyMockTwoCompletely() {\n        InOrder inOrder = inOrder(mockTwo, mockThree);\n\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        inOrder.verify(mockThree).simpleMethod(3);\n        inOrder.verify(mockTwo).simpleMethod(2);\n        verifyNoMoreInteractions(mockTwo, mockThree);\n    }",
        "begin_line": 167,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 54)",
            "(line 171,col 9)-(line 171,col 58)",
            "(line 172,col 9)-(line 172,col 50)",
            "(line 173,col 9)-(line 173,col 48)",
            "(line 174,col 9)-(line 174,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java",
        "signature": "org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldAllowTwoTimesOnMockTwo()",
        "snippet": "    @Test\n    public void shouldAllowTwoTimesOnMockTwo() {\n        InOrder inOrder = inOrder(mockTwo, mockThree);\n\n        inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n        try {\n            verifyNoMoreInteractions(mockTwo);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 177,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 54)",
            "(line 181,col 9)-(line 181,col 58)",
            "(line 182,col 9)-(line 185,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n        mockThree = mock(IMethods.class);\n        \n        inOrder = inOrder(mockOne, mockTwo, mockThree);\n    }",
        "begin_line": 26,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 39)",
            "(line 29,col 9)-(line 29,col 39)",
            "(line 30,col 9)-(line 30,col 41)",
            "(line 32,col 9)-(line 32,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldVerifySingleMockInOrderAndNotInOrder()",
        "snippet": "    @Test\n    public void shouldVerifySingleMockInOrderAndNotInOrder() {\n        mockOne = mock(IMethods.class);\n        inOrder = inOrder(mockOne);\n        \n        mockOne.simpleMethod(1);\n        mockOne.simpleMethod(2);\n        \n        verify(mockOne).simpleMethod(2);\n        verify(mockOne).simpleMethod(1);\n        \n        inOrder.verify(mockOne).simpleMethod(2);\n        try {\n            inOrder.verify(mockOne).simpleMethod(1);\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    } ",
        "begin_line": 35,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 39)",
            "(line 38,col 9)-(line 38,col 35)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 41,col 9)-(line 41,col 32)",
            "(line 43,col 9)-(line 43,col 40)",
            "(line 44,col 9)-(line 44,col 40)",
            "(line 46,col 9)-(line 46,col 48)",
            "(line 47,col 9)-(line 50,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldMessagesPointToProperMethod()",
        "snippet": "    @Test\n    public void shouldMessagesPointToProperMethod() {\n        mockTwo.differentMethod();\n        mockOne.simpleMethod();\n        \n        try {\n            inOrder.verify(mockOne, atLeastOnce()).differentMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"differentMethod()\", e.getMessage());\n        }\n    }",
        "begin_line": 53,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 34)",
            "(line 56,col 9)-(line 56,col 31)",
            "(line 58,col 9)-(line 63,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldVerifyInOrderWhenTwoChunksAreEqual()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderWhenTwoChunksAreEqual() {\n        mockOne.simpleMethod();\n        mockOne.simpleMethod();\n        mockTwo.differentMethod();\n        mockOne.simpleMethod();\n        mockOne.simpleMethod();\n        \n        inOrder.verify(mockOne, times(2)).simpleMethod();\n        inOrder.verify(mockTwo).differentMethod();\n        inOrder.verify(mockOne, times(2)).simpleMethod();\n        try {\n            inOrder.verify(mockOne, atLeastOnce()).simpleMethod();\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 66,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 31)",
            "(line 69,col 9)-(line 69,col 31)",
            "(line 70,col 9)-(line 70,col 34)",
            "(line 71,col 9)-(line 71,col 31)",
            "(line 72,col 9)-(line 72,col 31)",
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 50)",
            "(line 76,col 9)-(line 76,col 57)",
            "(line 77,col 9)-(line 80,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.verification.VerificationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/verification/VerificationInOrderTest.java",
        "signature": "org.mockitousage.verification.VerificationInOrderTest.shouldVerifyInOrderUsingMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderUsingMatcher() {\n        mockOne.simpleMethod(1);\n        mockOne.simpleMethod(2);\n        mockTwo.differentMethod();\n        mockOne.simpleMethod(3);\n        mockOne.simpleMethod(4);\n        \n        verify(mockOne, times(4)).simpleMethod(anyInt());\n        \n        inOrder.verify(mockOne, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).differentMethod();\n        inOrder.verify(mockOne, times(2)).simpleMethod(anyInt());\n        try {\n            inOrder.verify(mockOne, times(3)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 83,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 32)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 32)",
            "(line 89,col 9)-(line 89,col 32)",
            "(line 91,col 9)-(line 91,col 57)",
            "(line 93,col 9)-(line 93,col 65)",
            "(line 94,col 9)-(line 94,col 50)",
            "(line 95,col 9)-(line 95,col 65)",
            "(line 96,col 9)-(line 99,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.AbstractMessage.AbstractMessage()",
        "snippet": "        AbstractMessage() {\n            this.message = \"hey!\";\n        }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 13)-(line 20,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.AbstractMessage.getMessage()",
        "snippet": "        String getMessage() {\n            return message;\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_create_mock_with_constructor()",
        "snippet": "    @Test\n    public void can_create_mock_with_constructor() {\n        Message mock = mock(Message.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n        //the message is a part of state of the mocked type that gets initialized in constructor\n        assertEquals(\"hey!\", mock.getMessage());\n    }",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 110)",
            "(line 34,col 9)-(line 34,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_abstract_classes()",
        "snippet": "    @Test\n    public void can_mock_abstract_classes() {\n        AbstractMessage mock = mock(AbstractMessage.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n        assertEquals(\"hey!\", mock.getMessage());\n    }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 126)",
            "(line 40,col 9)-(line 40,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_spy_abstract_classes()",
        "snippet": "    @Test\n    public void can_spy_abstract_classes() {\n        AbstractMessage mock = spy(AbstractMessage.class);\n        assertEquals(\"hey!\", mock.getMessage());\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 58)",
            "(line 46,col 9)-(line 46,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_inner_classes()",
        "snippet": "    @Test\n    public void can_mock_inner_classes() {\n        InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(this).defaultAnswer(CALLS_REAL_METHODS));\n        assertEquals(\"hey!\", mock.getMessage());\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 136)",
            "(line 52,col 9)-(line 52,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.HasConstructor.HasConstructor(java.lang.String)",
        "snippet": "        HasConstructor(String x) {}",
        "begin_line": 56,
        "end_line": 56,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.exception_message_when_constructor_not_found()",
        "snippet": "    @Test\n    public void exception_message_when_constructor_not_found() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());\n            assertContains(\"0-arg constructor\", e.getCause().getMessage());\n        }\n    }",
        "begin_line": 59,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 69,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.mocking_inner_classes_with_wrong_outer_instance()",
        "snippet": "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());\n            assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());\n        }\n    }",
        "begin_line": 72,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 82,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.mocking_interfaces_with_constructor()",
        "snippet": "    @Test\n    public void mocking_interfaces_with_constructor() {\n        //at the moment this is allowed however we can be more strict if needed\n        //there is not much sense in creating a spy of an interface\n        mock(IMethods.class, withSettings().useConstructor());\n        spy(IMethods.class);\n    }",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 62)",
            "(line 90,col 9)-(line 90,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.prevents_across_jvm_serialization_with_constructor()",
        "snippet": "    @Test\n    public void prevents_across_jvm_serialization_with_constructor() {\n        try {\n            //when\n            mock(AbstractMessage.class, withSettings().useConstructor().serializable(SerializableMode.ACROSS_CLASSLOADERS));\n            //then\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Mocks instantiated with constructor cannot be combined with \" + SerializableMode.ACROSS_CLASSLOADERS + \" serialization mode.\", e.getMessage());\n        }\n    }",
        "begin_line": 93,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.AbstractThing.name()",
        "snippet": "        abstract String name();",
        "begin_line": 106,
        "end_line": 106,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.AbstractThing.fullName()",
        "snippet": "        String fullName() {\n            return \"abstract \" + name();\n        }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 13)-(line 108,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstract_method_returns_default()",
        "snippet": "    @Test\n    public void abstract_method_returns_default() {\n        AbstractThing thing = spy(AbstractThing.class);\n        assertEquals(\"abstract null\", thing.fullName());\n    }",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 115,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstract_method_stubbed()",
        "snippet": "    @Test\n    public void abstract_method_stubbed() {\n        AbstractThing thing = spy(AbstractThing.class);\n        when(thing.name()).thenReturn(\"me\");\n        assertEquals(\"abstract me\", thing.fullName());\n    }",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 44)",
            "(line 122,col 9)-(line 122,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "signature": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.calls_real_interface_method()",
        "snippet": "    @Test\n    public void calls_real_interface_method() {\n        List list = mock(List.class, withSettings().defaultAnswer(CALLS_REAL_METHODS));\n        assertNull(list.get(1));\n    }",
        "begin_line": 125,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 87)",
            "(line 128,col 9)-(line 128,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.packageprotected.MockingPackageProtectedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/packageprotected/MockingPackageProtectedTest.java",
        "signature": "org.mockitousage.packageprotected.MockingPackageProtectedTest.shouldMockPackageProtectedClasses()",
        "snippet": "    @Test\n    public void shouldMockPackageProtectedClasses() {\n        mock(PackageProtected.class);\n        mock(Foo.class);\n        mock(Bar.class);\n    }",
        "begin_line": 19,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 37)",
            "(line 22,col 9)-(line 22,col 24)",
            "(line 23,col 9)-(line 23,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.RuleTestWithParameterConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/RuleTestWithParameterConstructorTest.java",
        "signature": "org.mockitousage.junitrule.RuleTestWithParameterConstructorTest.testInjectMocks()",
        "snippet": "    @Test\n    public void testInjectMocks() throws Exception {\n        assertNotNull(\"Mock created\", injected);\n        assertNotNull(\"Object created\", injectInto);\n        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n\n    }",
        "begin_line": 23,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 48)",
            "(line 26,col 9)-(line 26,col 52)",
            "(line 27,col 9)-(line 27,col 78)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.RuleTestWithParameterConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/RuleTestWithParameterConstructorTest.java",
        "signature": "org.mockitousage.junitrule.RuleTestWithParameterConstructorTest.InjectInto.getInjected()",
        "snippet": "        public Injected getInjected() {\n            return injected;\n        }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 13)-(line 39,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.MockitoJUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/MockitoJUnitRuleTest.java",
        "signature": "org.mockitousage.junitrule.MockitoJUnitRuleTest.testInjectMocks()",
        "snippet": "    @Test\n    public void testInjectMocks() throws Exception {\n        assertNotNull(\"Mock created\", injected);\n        assertNotNull(\"Object created\", injectInto);\n        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 48)",
            "(line 27,col 9)-(line 27,col 52)",
            "(line 28,col 9)-(line 28,col 78)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.MockitoJUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/MockitoJUnitRuleTest.java",
        "signature": "org.mockitousage.junitrule.MockitoJUnitRuleTest.InjectInto.getInjected()",
        "snippet": "        public Injected getInjected() {\n            return injected;\n        }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 13)-(line 39,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.RuleTestWithFactoryMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/RuleTestWithFactoryMethodTest.java",
        "signature": "org.mockitousage.junitrule.RuleTestWithFactoryMethodTest.testInjectMocks()",
        "snippet": "    @Test\n    public void testInjectMocks() throws Exception {\n        assertNotNull(\"Mock created\", injected);\n        assertNotNull(\"Object created\", injectInto);\n        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n\n    }",
        "begin_line": 25,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 48)",
            "(line 28,col 9)-(line 28,col 52)",
            "(line 29,col 9)-(line 29,col 78)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.RuleTestWithFactoryMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/RuleTestWithFactoryMethodTest.java",
        "signature": "org.mockitousage.junitrule.RuleTestWithFactoryMethodTest.InjectInto.getInjected()",
        "snippet": "        public Injected getInjected() {\n            return injected;\n        }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrule.InvalidTargetMockitoJUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrule/InvalidTargetMockitoJUnitRuleTest.java",
        "signature": "org.mockitousage.junitrule.InvalidTargetMockitoJUnitRuleTest.shouldInjectWithInvalidReference()",
        "snippet": "    @Test\n    public void shouldInjectWithInvalidReference() throws Exception {\n        assertNotNull(\"Mock created\", injected);\n        assertNotNull(\"Test object created\", injectInto);\n    }",
        "begin_line": 24,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 48)",
            "(line 27,col 9)-(line 27,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldRequireArgumentsWhenVerifyingNoMoreInteractions()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldRequireArgumentsWhenVerifyingNoMoreInteractions() {\n        verifyNoMoreInteractions();\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldRequireArgumentsWhenVerifyingZeroInteractions()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldRequireArgumentsWhenVerifyingZeroInteractions() {\n        verifyZeroInteractions();\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotCreateInOrderObjectWithoutMocks()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotCreateInOrderObjectWithoutMocks() {\n        inOrder();\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 18)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowVerifyingInOrderUnfamilarMocks()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowVerifyingInOrderUnfamilarMocks() {\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mockTwo).simpleMethod();\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 40)",
            "(line 47,col 9)-(line 47,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldReportMissingMethodInvocationWhenStubbing()",
        "snippet": "    @Test(expected=MissingMethodInvocationException.class)\n    public void shouldReportMissingMethodInvocationWhenStubbing() {\n        when(mock.simpleMethod()).thenReturn(\"this stubbing is required to make sure Stubbable is pulled\");\n        when(\"\".toString()).thenReturn(\"x\");\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 107)",
            "(line 53,col 9)-(line 53,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingInvalidCheckedException()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new Exception());\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullThrowable()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowable() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new Throwable[] {null});\n    }    ",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullThrowableVararg()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowableVararg() throws Exception {\n        when(mock.simpleMethod()).thenThrow((Throwable) null);\n    }    ",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullConsecutiveThrowable()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullConsecutiveThrowable() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new RuntimeException(), null);\n    }    ",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowMockingFinalClasses()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowMockingFinalClasses() throws Exception {\n        mock(FinalClass.class); \n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowMockingPrimitves()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowMockingPrimitves() throws Exception {\n        mock(Integer.TYPE); \n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.ObjectLikeInterface.equals(java.lang.Object)",
        "snippet": "        boolean equals(Object o);",
        "begin_line": 90,
        "end_line": 90,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.ObjectLikeInterface.toString()",
        "snippet": "        String toString();",
        "begin_line": 91,
        "end_line": 91,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.ObjectLikeInterface.hashCode()",
        "snippet": "        int hashCode();",
        "begin_line": 92,
        "end_line": 92,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotMockObjectMethodsOnInterface()",
        "snippet": "    @Test\n    public void shouldNotMockObjectMethodsOnInterface() throws Exception {\n        ObjectLikeInterface inter = mock(ObjectLikeInterface.class);\n        \n        inter.equals(null);\n        inter.toString();\n        inter.hashCode();\n        \n        verifyZeroInteractions(inter);\n    }",
        "begin_line": 95,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 68)",
            "(line 99,col 9)-(line 99,col 27)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 101,col 9)-(line 101,col 25)",
            "(line 103,col 9)-(line 103,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.InvalidUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/InvalidUsageTest.java",
        "signature": "org.mockitousage.misuse.InvalidUsageTest.shouldNotMockObjectMethodsOnClass()",
        "snippet": "    public void shouldNotMockObjectMethodsOnClass() throws Exception {\n        Object clazz = mock(ObjectLikeInterface.class);\n        \n        clazz.equals(null);\n        clazz.toString();\n        clazz.hashCode();\n        \n        verifyZeroInteractions(clazz);\n    }",
        "begin_line": 106,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 55)",
            "(line 109,col 9)-(line 109,col 27)",
            "(line 110,col 9)-(line 110,col 25)",
            "(line 111,col 9)-(line 111,col 25)",
            "(line 113,col 9)-(line 113,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.Foo.finalMethod()",
        "snippet": "        public final String finalMethod() {\n            return null;\n        }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 13)-(line 24,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.tryDescriptiveMessagesOnMisuse()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    public void tryDescriptiveMessagesOnMisuse() {\n        Foo foo = mock(Foo.class);\n        \n//        when(foo.finalMethod()).thenReturn(\"foo\");\n//        doReturn(\"foo\").when(foo).finalMethod();\n//        verify(foo).finalMethod();\n        \n//        doReturn(\"foo\");\n//        doReturn(\"bar\");\n        \n//        verifyNoMoreInteractions();\n//        verifyNoMoreInteractions(null);\n//        verifyNoMoreInteractions(\"\");\n//        verifyZeroInteractions();\n//        verifyZeroInteractions(null);\n//        verifyZeroInteractions(\"\");\n//\n//        inOrder();\n//        inOrder(null);\n//        inOrder(\"test\");\n//        InOrder inOrder = inOrder(mock(List.class));\n//        inOrder.verify(mock).simpleMethod();\n\n//        verify(null);\n//        verify(mock.booleanReturningMethod());\n\n//        verify(mock).varargs(\"test\", anyString());\n\n//        when(\"x\").thenReturn(\"x\");\n\n//        when(mock.simpleMethod());\n//        when(mock.differentMethod()).thenReturn(\"\");\n    } ",
        "begin_line": 28,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenWholeMethodPassedToVerify()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldScreamWhenWholeMethodPassedToVerify() {\n        verify(mock.booleanReturningMethod());\n    }   ",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions() {\n        verifyNoMoreInteractions(mock.byteReturningMethod());\n    }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenInOrderCreatedWithDodgyMock()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldScreamWhenInOrderCreatedWithDodgyMock() {\n        inOrder(\"not a mock\");\n    }",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenInOrderCreatedWithNulls()",
        "snippet": "    @Test(expected=NullInsteadOfMockException.class)\n    public void shouldScreamWhenInOrderCreatedWithNulls() {\n        inOrder(mock, null);\n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamNullPassedToVerify()",
        "snippet": "    @Test(expected=NullInsteadOfMockException.class)\n    public void shouldScreamNullPassedToVerify() {\n        verify(null);\n    }  ",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions()",
        "snippet": "    @Test(expected=NullInsteadOfMockException.class)\n    public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions() {\n        verifyNoMoreInteractions(null, \"blah\");\n    } ",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java",
        "signature": "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenNullPassedToVerifyNoMoreInteractions()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions() {\n        verifyNoMoreInteractions((Object[])null);\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.WithFinal.finalMethod(java.lang.Object)",
        "snippet": "        final Object finalMethod(Object object) {\n            return null;\n        }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 13)-(line 26,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.misplaced_anyObject_argument_matcher()",
        "snippet": "    private void misplaced_anyObject_argument_matcher() {\n        anyObject();\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.misplaced_anyInt_argument_matcher()",
        "snippet": "    private void misplaced_anyInt_argument_matcher() {\n        anyInt();\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.misplaced_anyBoolean_argument_matcher()",
        "snippet": "    private void misplaced_anyBoolean_argument_matcher() {\n        anyBoolean();\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.should_fail_fast_when_argument_matchers_are_abused()",
        "snippet": "    @Test\n    public void should_fail_fast_when_argument_matchers_are_abused() {\n        misplaced_anyObject_argument_matcher();\n        try {\n            mock(IMethods.class);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"Misplaced argument matcher\", e.getMessage());\n        }\n    }",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 47)",
            "(line 52,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.should_report_argument_locations_when_argument_matchers_misused()",
        "snippet": "    @Test\n    public void should_report_argument_locations_when_argument_matchers_misused() {\n        try {\n            Observer observer = mock(Observer.class);\n            \n            misplaced_anyInt_argument_matcher();\n            misplaced_anyObject_argument_matcher();\n            misplaced_anyBoolean_argument_matcher();\n            \n            observer.update(null, null);\n            \n            validateMockitoUsage();\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"DetectingMisusedMatchersTest.misplaced_anyInt_argument_matcher\", e.getMessage());\n            assertContains(\"DetectingMisusedMatchersTest.misplaced_anyObject_argument_matcher\", e.getMessage());\n            assertContains(\"DetectingMisusedMatchersTest.misplaced_anyBoolean_argument_matcher\", e.getMessage());\n        }\n    }",
        "begin_line": 60,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 77,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingMisusedMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java",
        "signature": "org.mockitousage.misuse.DetectingMisusedMatchersTest.shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers()",
        "snippet": "    @Test\n    public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {\n        verify(withFinal).finalMethod(anyObject());\n        try {\n            verify(withFinal);\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 81,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 87,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.RestrictedObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java",
        "signature": "org.mockitousage.misuse.RestrictedObjectMethodsTest.after()",
        "snippet": "    @After\n    public void after() {\n        this.resetState();\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.RestrictedObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java",
        "signature": "org.mockitousage.misuse.RestrictedObjectMethodsTest.shouldScreamWhenVerifyToString()",
        "snippet": "    @Test\n    public void shouldScreamWhenVerifyToString() {\n        try {\n            verify(mock).toString();\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"cannot verify\", e.getMessage());\n        }\n    }",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 36,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.RestrictedObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java",
        "signature": "org.mockitousage.misuse.RestrictedObjectMethodsTest.shouldBeSilentWhenVerifyHashCode()",
        "snippet": "    @Test\n    public void shouldBeSilentWhenVerifyHashCode() {\n        //because it leads to really wierd behavior sometimes\n        //it's because cglib & my code can occasionelly call those methods\n        // and when user has verification started at that time there will be a mess\n        verify(mock).hashCode();\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.RestrictedObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java",
        "signature": "org.mockitousage.misuse.RestrictedObjectMethodsTest.shouldBeSilentWhenVerifyEquals()",
        "snippet": "    @Test\n    public void shouldBeSilentWhenVerifyEquals() {\n        //because it leads to really wierd behavior sometimes\n        //it's because cglib & my code can occasionelly call those methods\n        // and when user has verification started at that time there will be a mess\n        verify(mock).equals(null);\n    }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.RestrictedObjectMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java",
        "signature": "org.mockitousage.misuse.RestrictedObjectMethodsTest.shouldBeSilentWhenVerifyEqualsInOrder()",
        "snippet": "    @Test\n    public void shouldBeSilentWhenVerifyEqualsInOrder() {\n        //because it leads to really wierd behavior sometimes\n        //it's because cglib & my code can occasionelly call those methods\n        // and when user has verification started at that time there will be a mess\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).equals(null);\n    }       ",
        "begin_line": 55,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 40)",
            "(line 61,col 9)-(line 61,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java",
        "signature": "org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldValidateExplicitly()",
        "snippet": "    @Test\n    public void shouldValidateExplicitly() {\n        verify(mock);\n        try {\n            Mockito.validateMockitoUsage();\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 24,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 21)",
            "(line 27,col 9)-(line 30,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java",
        "signature": "org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldDetectUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbing() {\n        when(mock.simpleMethod());\n        try {\n            Mockito.validateMockitoUsage();\n            fail();\n        } catch (UnfinishedStubbingException e) {}\n    }",
        "begin_line": 33,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 39,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java",
        "signature": "org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldDetectMisplacedArgumentMatcher()",
        "snippet": "    @Test\n    public void shouldDetectMisplacedArgumentMatcher() {\n        anyObject();\n        try {\n            Mockito.validateMockitoUsage();\n            fail();\n        } catch (InvalidUseOfMatchersException e) {}\n    }",
        "begin_line": 42,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 20)",
            "(line 45,col 9)-(line 48,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingFinalMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingFinalMethodsTest.java",
        "signature": "org.mockitousage.misuse.DetectingFinalMethodsTest.WithFinal.foo()",
        "snippet": "        final int foo() {\n            return 0;\n        }",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 19,col 13)-(line 19,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingFinalMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingFinalMethodsTest.java",
        "signature": "org.mockitousage.misuse.DetectingFinalMethodsTest.shouldFailWithUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldFailWithUnfinishedVerification() {\n        withFinal = mock(WithFinal.class);\n        verify(withFinal).foo();\n        try {\n            verify(withFinal).foo();\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n    }",
        "begin_line": 25,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 42)",
            "(line 28,col 9)-(line 28,col 32)",
            "(line 29,col 9)-(line 32,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.DetectingFinalMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/DetectingFinalMethodsTest.java",
        "signature": "org.mockitousage.misuse.DetectingFinalMethodsTest.shouldFailWithUnfinishedStubbing()",
        "snippet": "    @Test\n    @Ignore(\"Failed on check out\")\n    public void shouldFailWithUnfinishedStubbing() {\n        withFinal = mock(WithFinal.class);\n        try {\n            when(withFinal.foo()).thenReturn(null);\n            fail();\n        } catch (MissingMethodInvocationException e) {}\n    }",
        "begin_line": 35,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 42)",
            "(line 39,col 9)-(line 42,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.SpyStubbingMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/SpyStubbingMisuseTest.java",
        "signature": "org.mockitousage.misuse.SpyStubbingMisuseTest.nestedWhenTest()",
        "snippet": "    @Test\n    public void nestedWhenTest() {\n        Strategy mfoo = mock(Strategy.class);\n        Sampler mpoo = mock(Sampler.class);\n        Producer out = spy(new Producer(mfoo));\n\n        try {\n            when(out.produce()).thenReturn(mpoo);\n            fail();\n        } catch (WrongTypeOfReturnValue e) {\n            assertThat(e.getMessage()).contains(\"spy\").contains(\"syntax\").contains(\"doReturn|Throw\");\n        }\n    }",
        "begin_line": 16,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 45)",
            "(line 19,col 9)-(line 19,col 43)",
            "(line 20,col 9)-(line 20,col 47)",
            "(line 22,col 9)-(line 27,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.SpyStubbingMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/SpyStubbingMisuseTest.java",
        "signature": "org.mockitousage.misuse.SpyStubbingMisuseTest.Strategy.getSample()",
        "snippet": "        Sample getSample() {\n            return new Sample();\n        }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.SpyStubbingMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/SpyStubbingMisuseTest.java",
        "signature": "org.mockitousage.misuse.SpyStubbingMisuseTest.Sampler.Sampler(org.mockitousage.misuse.SpyStubbingMisuseTest.Strategy)",
        "snippet": "        Sampler(Strategy f) {\n            sample = f.getSample();\n        }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.SpyStubbingMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/SpyStubbingMisuseTest.java",
        "signature": "org.mockitousage.misuse.SpyStubbingMisuseTest.Producer.Producer(org.mockitousage.misuse.SpyStubbingMisuseTest.Strategy)",
        "snippet": "        Producer(Strategy f) {\n            strategy = f;\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.SpyStubbingMisuseTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/SpyStubbingMisuseTest.java",
        "signature": "org.mockitousage.misuse.SpyStubbingMisuseTest.Producer.produce()",
        "snippet": "        Sampler produce() {\n            return new Sampler(strategy);\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnVerify()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnVerify() {\n        // first test\n        mock.booleanReturningMethod();\n        verify(mock).booleanReturningMethod();\n        \n        // second test\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 38)",
            "(line 24,col 9)-(line 24,col 46)",
            "(line 27,col 9)-(line 27,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnInOrder()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnInOrder() {\n        mock.booleanReturningMethod();\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).booleanReturningMethod();\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 38)",
            "(line 33,col 9)-(line 33,col 40)",
            "(line 34,col 9)-(line 34,col 54)",
            "(line 35,col 9)-(line 35,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnDoReturn()",
        "snippet": "    @Test\n    public void shouldResetOngoingStubbingOnDoReturn() {\n        mock.booleanReturningMethod();\n        doReturn(false).when(mock).booleanReturningMethod();\n        assertOngoingStubbingIsReset();\n    }",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 38)",
            "(line 41,col 9)-(line 41,col 60)",
            "(line 42,col 9)-(line 42,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java",
        "signature": "org.mockitousage.misuse.CleaningUpPotentialStubbingTest.assertOngoingStubbingIsReset()",
        "snippet": "    private void assertOngoingStubbingIsReset() {\n        try {\n            //In real, there might be a call to real object or a final method call\n            //I'm modelling it with null\n            when(null).thenReturn(\"anything\");\n            fail();\n        } catch (MissingMethodInvocationException e) {}\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 51,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit45RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit45RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit45RunnerTest.shouldInitMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInitMocksUsingRunner() {\n        list.add(\"test\");\n        verify(list).add(\"test\");\n    }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 25)",
            "(line 29,col 9)-(line 29,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit45RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit45RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit45RunnerTest.shouldInjectMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInjectMocksUsingRunner() {\n        assertNotNull(list);\n        assertSame(list, listDependent.getList());\n    }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 28)",
            "(line 35,col 9)-(line 35,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit45RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit45RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit45RunnerTest.shouldFilterTestMethodsCorrectly()",
        "snippet": "    @Test\n    public void shouldFilterTestMethodsCorrectly() throws Exception{\n        MockitoJUnitRunner runner = new MockitoJUnitRunner(this.getClass());\n\n        runner.filter(methodNameContains(\"shouldInitMocksUsingRunner\"));\n\n        assertEquals(1, runner.testCount());\n    }",
        "begin_line": 38,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 76)",
            "(line 42,col 9)-(line 42,col 72)",
            "(line 44,col 9)-(line 44,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit45RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit45RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit45RunnerTest.ListDependent.getList()",
        "snippet": "        public List getList() {\n            return list;\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit44RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit44RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit44RunnerTest.shouldInitMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInitMocksUsingRunner() {\n        list.add(\"test\");\n        verify(list).add(\"test\");\n    }",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 25)",
            "(line 32,col 9)-(line 32,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit44RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit44RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit44RunnerTest.shouldInjectMocksUsingRunner()",
        "snippet": "    @Test\n    public void shouldInjectMocksUsingRunner() {\n        assertSame(list, listDependent.getList());\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit44RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit44RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit44RunnerTest.shouldFilterTestMethodsCorrectly()",
        "snippet": "    @Test\n    public void shouldFilterTestMethodsCorrectly() throws Exception{\n        MockitoJUnit44Runner runner = new MockitoJUnit44Runner(this.getClass());\n\n        runner.filter(methodNameContains(\"shouldInitMocksUsingRunner\"));\n\n        assertEquals(1, runner.testCount());\n    }",
        "begin_line": 39,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 80)",
            "(line 43,col 9)-(line 43,col 72)",
            "(line 45,col 9)-(line 45,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.JUnit44RunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/JUnit44RunnerTest.java",
        "signature": "org.mockitousage.junitrunner.JUnit44RunnerTest.ListDependent.getList()",
        "snippet": "        public List getList() {\n            return list;\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.NoWarnings.test()",
        "snippet": "        @Test\n        @Ignore\n        public void test() {\n            IMethods mock = mock(IMethods.class);\n            mock.simpleMethod(1);\n            mock.otherMethod();\n            \n            verify(mock).simpleMethod(1);\n            throw new RuntimeException(\"boo\");\n        }",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 49)",
            "(line 34,col 13)-(line 34,col 33)",
            "(line 35,col 13)-(line 35,col 31)",
            "(line 37,col 13)-(line 37,col 41)",
            "(line 38,col 13)-(line 38,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.ContainsWarnings.ContainsWarnings()",
        "snippet": "        public ContainsWarnings() {\n            super(\"test\");\n        }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 13)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.ContainsWarnings.testIgnored()",
        "snippet": "        public void testIgnored() {}",
        "begin_line": 48,
        "end_line": 48,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.ContainsWarnings._test()",
        "snippet": "        public void _test() {\n            IMethods mock = mock(IMethods.class);\n            \n            //some stubbing\n            when(mock.simpleMethod(1)).thenReturn(\"foo\");\n            when(mock.otherMethod()).thenReturn(\"foo\");\n            when(mock.booleanObjectReturningMethod()).thenReturn(false);\n\n            //stub called with different args:\n            String ret = mock.simpleMethod(2);\n\n            //assertion fails due to stub called with different args\n            assertEquals(\"foo\", ret);\n        }",
        "begin_line": 50,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 49)",
            "(line 54,col 13)-(line 54,col 57)",
            "(line 55,col 13)-(line 55,col 55)",
            "(line 56,col 13)-(line 56,col 72)",
            "(line 59,col 13)-(line 59,col 46)",
            "(line 62,col 13)-(line 62,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.cleanStackTraces()",
        "snippet": "    public void cleanStackTraces() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.shouldContainWarnings()",
        "snippet": "    @Test\n    @Ignore\n    public void shouldContainWarnings() throws Exception {\n        //when\n        Result result = new JUnitCore().run(new ContainsWarnings());\n        //then\n        assertEquals(1, result.getFailures().size());\n        Throwable exception = result.getFailures().get(0).getException();\n        assertTrue(exception instanceof ExceptionIncludingMockitoWarnings);        \n    }",
        "begin_line": 70,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 68)",
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 73)",
            "(line 78,col 9)-(line 78,col 75)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java",
        "signature": "org.mockitousage.junitrunner.VerboseMockitoRunnerTest.shouldNotContainWarnings()",
        "snippet": "    @Test\n    @Ignore\n    public void shouldNotContainWarnings() throws Exception {\n        Result result = new JUnitCore().run(NoWarnings.class);\n        assertEquals(1, result.getFailures().size());\n        assertEquals(\"boo\", result.getFailures().get(0).getException().getMessage());\n    }",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 62)",
            "(line 85,col 9)-(line 85,col 53)",
            "(line 86,col 9)-(line 86,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java",
        "signature": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest.cleanStackTraces()",
        "snippet": "    @Before\n    public void cleanStackTraces() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java",
        "signature": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest.shouldLogUnusedStubbingWarningWhenTestFails()",
        "snippet": "    @Test\n    public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {\n        when(mock.simpleMethod(1)).thenReturn(\"foo\");\n        when(mock.otherMethod()).thenReturn(\"foo\");\n        when(mock.booleanObjectReturningMethod()).thenReturn(false);\n\n        //TODO: stubbed with those args here -> stubbed with certain args here \n        String ret = mock.simpleMethod(2);\n\n        assertEquals(\"foo\", ret);\n        //TODO: should show message from actual failure not at the bottom but at least below 'the actual failure is ...'\n    }",
        "begin_line": 30,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 53)",
            "(line 33,col 9)-(line 33,col 51)",
            "(line 34,col 9)-(line 34,col 68)",
            "(line 37,col 9)-(line 37,col 42)",
            "(line 39,col 9)-(line 39,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java",
        "signature": "org.mockitousage.junitrunner.ModellingVerboseMockitoTest.shouldNotLogAnythingWhenNoWarnings()",
        "snippet": "    @Test\n    public void shouldNotLogAnythingWhenNoWarnings() throws Exception {\n        //stub\n        when(mock.simpleMethod()).thenReturn(\"foo\");\n        //use stub:\n        mock.simpleMethod();\n        //verify:\n        verify(mock).simpleMethod();\n        //should be no warnings:\n        fail();\n    }",
        "begin_line": 44,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 52)",
            "(line 49,col 9)-(line 49,col 28)",
            "(line 51,col 9)-(line 51,col 36)",
            "(line 53,col 9)-(line 53,col 15)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.Filters",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/Filters.java",
        "signature": "org.mockitousage.junitrunner.Filters.methodNameContains(java.lang.String)",
        "snippet": "    public static Filter methodNameContains(final String substring) {\n        return new Filter() {\n            @Override\n            public boolean shouldRun(Description description) {\n                return description.getDisplayName().contains(substring);\n            }\n\n            @Override\n            public String describe() {\n                return null;\n            }\n        };\n    }",
        "begin_line": 11,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 22,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.Filters",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/Filters.java",
        "signature": "org.mockitousage.junitrunner.Filters.Anonymous-4f41ef23-dcad-4d3f-a253-1633bbc231b1.shouldRun(org.junit.runner.Description)",
        "snippet": "            @Override\n            public boolean shouldRun(Description description) {\n                return description.getDisplayName().contains(substring);\n            }",
        "begin_line": 13,
        "end_line": 16,
        "comment": "",
        "child_ranges": [
            "(line 15,col 17)-(line 15,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.junitrunner.Filters",
        "child_classes": [],
        "src_path": "test/org/mockitousage/junitrunner/Filters.java",
        "signature": "org.mockitousage.junitrunner.Filters.Anonymous-53859de8-00c8-494b-bd8c-2bb1000b6f84.describe()",
        "snippet": "            @Override\n            public String describe() {\n                return null;\n            }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 17)-(line 20,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        inOrder = inOrder(mock, mockTwo);\n        \n        first();\n        second();\n        third();\n        fourth();\n    }",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 41)",
            "(line 33,col 9)-(line 33,col 16)",
            "(line 34,col 9)-(line 34,col 17)",
            "(line 35,col 9)-(line 35,col 16)",
            "(line 36,col 9)-(line 36,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.first()",
        "snippet": "    private void first() {\n        mock.simpleMethod(1);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.second()",
        "snippet": "    private void second() {\n        mockTwo.simpleMethod(2);\n    }",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.third()",
        "snippet": "    private void third() {\n        mock.simpleMethod(3);\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.fourth()",
        "snippet": "    private void fourth() {\n        mockTwo.simpleMethod(4);\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointStackTraceToPreviousVerified()",
        "snippet": "    @Test\n    public void shouldPointStackTraceToPreviousVerified() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mock).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"fourth(\", e.getMessage());\n        }\n    }",
        "begin_line": 52,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 67)",
            "(line 55,col 9)-(line 55,col 55)",
            "(line 57,col 9)-(line 62,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToThirdMethod()",
        "snippet": "    @Test\n    public void shouldPointToThirdMethod() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"third(\", e.getMessage());\n        }\n    }",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 67)",
            "(line 69,col 9)-(line 74,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToSecondMethod()",
        "snippet": "    @Test\n    public void shouldPointToSecondMethod() {\n        inOrder.verify(mock).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"second(\", e.getMessage());\n        }\n    }",
        "begin_line": 77,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 55)",
            "(line 82,col 9)-(line 87,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToFirstMethodBecauseOfTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToFirstMethodBecauseOfTooManyActualInvocations() {\n        try {\n            inOrder.verify(mock, times(0)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"first(\", e.getMessage());\n        }\n    }    ",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToSecondMethodBecauseOfTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToSecondMethodBecauseOfTooManyActualInvocations() {\n        inOrder.verify(mock).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"second(\", e.getMessage());\n        }\n    }",
        "begin_line": 100,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 52)",
            "(line 104,col 9)-(line 109,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToFourthMethodBecauseOfTooLittleActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToFourthMethodBecauseOfTooLittleActualInvocations() {\n        inOrder.verify(mock).simpleMethod(anyInt());\n        inOrder.verify(mockTwo).simpleMethod(anyInt());\n        inOrder.verify(mock).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(3)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"fourth(\", e.getMessage());\n        }\n    }",
        "begin_line": 112,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 52)",
            "(line 115,col 9)-(line 115,col 55)",
            "(line 116,col 9)-(line 116,col 52)",
            "(line 118,col 9)-(line 123,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.cleanStackTrace()",
        "snippet": "    @Before\n    public void cleanStackTrace() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner()",
        "snippet": "    @Test\n    public void makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner() {\n        //mess up the state:\n        verify(mock);\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayWantedButNotInvoked()",
        "snippet": "    @Test\n    public void shouldSayWantedButNotInvoked() {\n        verify(mock).otherMethod();\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails()",
        "snippet": "    @Test\n    public void shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails() {\n        mock.otherMethod();\n        mock.booleanObjectReturningMethod();\n        \n        verify(mock).simpleMethod();\n    }    ",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 27)",
            "(line 50,col 9)-(line 50,col 44)",
            "(line 52,col 9)-(line 52,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldShowActualAndExpected()",
        "snippet": "    @Test\n    public void shouldShowActualAndExpected() {\n        mock.simpleMethod(\"blah\");\n        verify(mock).simpleMethod();\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 34)",
            "(line 58,col 9)-(line 58,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocations()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocations() {\n        mock.simpleMethod();\n        verify(mock, times(2)).simpleMethod();\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 28)",
            "(line 64,col 9)-(line 64,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooManyInvocations()",
        "snippet": "    @Test\n    public void shouldSayTooManyInvocations() {\n        mock.simpleMethod();\n        mock.simpleMethod();\n        verify(mock, times(1)).simpleMethod();\n    }",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 28)",
            "(line 70,col 9)-(line 70,col 28)",
            "(line 71,col 9)-(line 71,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayWantedButNotInvokedInOrder()",
        "snippet": "    @Test\n    public void shouldSayWantedButNotInvokedInOrder() {\n        mock.simpleMethod();\n        mock.otherMethod();\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).otherMethod();\n        inOrder.verify(mock).simpleMethod();\n    }",
        "begin_line": 74,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 28)",
            "(line 77,col 9)-(line 77,col 27)",
            "(line 78,col 9)-(line 78,col 40)",
            "(line 79,col 9)-(line 79,col 43)",
            "(line 80,col 9)-(line 80,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocationsInOrder() {\n        mock.simpleMethod();\n        mock.otherMethod();\n        mock.otherMethod();\n\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock).simpleMethod();\n        inOrder.verify(mock, times(3)).otherMethod();\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 28)",
            "(line 86,col 9)-(line 86,col 27)",
            "(line 87,col 9)-(line 87,col 27)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooManyInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldSayTooManyInvocationsInOrder() {\n        mock.otherMethod();\n        mock.otherMethod();\n        \n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock, times(1)).otherMethod();\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 27)",
            "(line 97,col 9)-(line 97,col 27)",
            "(line 99,col 9)-(line 99,col 40)",
            "(line 100,col 9)-(line 100,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayNeverWantedButInvokedHere()",
        "snippet": "    @Test\n    public void shouldSayNeverWantedButInvokedHere() {\n        mock.otherMethod();\n        \n        verify(mock, never()).otherMethod();\n    }",
        "begin_line": 103,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 27)",
            "(line 107,col 9)-(line 107,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInAtLeastModeInOrder()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocationsInAtLeastModeInOrder() {\n        mock.simpleMethod();\n\n        InOrder inOrder = inOrder(mock);\n        inOrder.verify(mock, atLeast(2)).simpleMethod();\n    }",
        "begin_line": 110,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 28)",
            "(line 114,col 9)-(line 114,col 40)",
            "(line 115,col 9)-(line 115,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInAtLeastMode()",
        "snippet": "    @Test\n    public void shouldSayTooLittleInvocationsInAtLeastMode() {\n        mock.simpleMethod();\n        \n        verify(mock, atLeast(2)).simpleMethod();\n    }",
        "begin_line": 118,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 28)",
            "(line 122,col 9)-(line 122,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldSayNoMoreInteractions() {\n        mock.simpleMethod();\n        \n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 125,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 28)",
            "(line 129,col 9)-(line 129,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayUnstubbedMethodWasInvokedHere()",
        "snippet": "    @Test\n    public void shouldSayUnstubbedMethodWasInvokedHere() {\n        mock = mock(IMethods.class, RETURNS_SMART_NULLS);\n        \n        IMethods m = mock.iMethodsReturningMethod();\n        \n        m.simpleMethod();\n    }",
        "begin_line": 132,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 57)",
            "(line 136,col 9)-(line 136,col 52)",
            "(line 138,col 9)-(line 138,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldPointOutUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldPointOutUnfinishedStubbing() {\n        when(mock.simpleMethod());\n        \n        verify(mock).simpleMethod();\n    }    ",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 34)",
            "(line 145,col 9)-(line 145,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenMissingMockCall()",
        "snippet": "    @Test\n    public void shouldMentionFinalAndObjectMethodsWhenMissingMockCall() {\n        when(\"\".equals(null)).thenReturn(false);\n    }",
        "begin_line": 148,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenVerifying()",
        "snippet": "    @Test\n    public void shouldMentionFinalAndObjectMethodsWhenVerifying() {\n        verify(mock).equals(null);\n        verify(mock).simpleMethod();\n    }",
        "begin_line": 153,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher()",
        "snippet": "    @Test\n    public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher() {\n        when(mock.equals(anyObject())).thenReturn(false);\n    }",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldShowExampleOfCorrectArgumentCapturing()",
        "snippet": "    @Test\n    public void shouldShowExampleOfCorrectArgumentCapturing() {\n        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);\n        argument.capture();\n        argument.getValue();\n    }",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 80)",
            "(line 167,col 9)-(line 167,col 27)",
            "(line 168,col 9)-(line 168,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenNullPassedInsteadOfAnInterface()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassedInsteadOfAnInterface() {\n        mock(IMethods.class, withSettings().extraInterfaces(List.class, null));\n    }",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenNonInterfacePassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNonInterfacePassed() {\n        mock(IMethods.class, withSettings().extraInterfaces(LinkedList.class));\n    }",
        "begin_line": 176,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraIsTheSame()",
        "snippet": "    @Test\n    public void shouldScreamWhenExtraIsTheSame() {\n        mock(IMethods.class, withSettings().extraInterfaces(IMethods.class));\n    }",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraInterfacesEmpty()",
        "snippet": "    @Test\n    public void shouldScreamWhenExtraInterfacesEmpty() {\n        mock(IMethods.class, withSettings().extraInterfaces());\n    }",
        "begin_line": 186,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraInterfacesIsANullArray()",
        "snippet": "    @Test\n    public void shouldScreamWhenExtraInterfacesIsANullArray() {\n        mock(IMethods.class, withSettings().extraInterfaces((Class[]) null));\n    }",
        "begin_line": 191,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java",
        "signature": "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionSpiesWhenVoidMethodIsToldToReturnValue()",
        "snippet": "    @Test\n    public void shouldMentionSpiesWhenVoidMethodIsToldToReturnValue() {\n        List list = mock(List.class);\n        doReturn(\"foo\").when(list).clear();\n    }",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 37)",
            "(line 199,col 9)-(line 199,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        inOrder = inOrder(mock, mockTwo);\n        \n        firstChunk();\n        secondChunk();\n        thirdChunk();\n        fourthChunk();\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 41)",
            "(line 32,col 9)-(line 32,col 21)",
            "(line 33,col 9)-(line 33,col 22)",
            "(line 34,col 9)-(line 34,col 21)",
            "(line 35,col 9)-(line 35,col 22)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.firstChunk()",
        "snippet": "    private void firstChunk() {\n        mock.simpleMethod(1);\n        mock.simpleMethod(1);\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 29)",
            "(line 40,col 9)-(line 40,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.secondChunk()",
        "snippet": "    private void secondChunk() {\n        mockTwo.simpleMethod(2);\n        mockTwo.simpleMethod(2);\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)",
            "(line 44,col 9)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.thirdChunk()",
        "snippet": "    private void thirdChunk() {\n        mock.simpleMethod(3);\n        mock.simpleMethod(3);\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 29)",
            "(line 48,col 9)-(line 48,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.fourthChunk()",
        "snippet": "    private void fourthChunk() {\n        mockTwo.simpleMethod(4);\n        mockTwo.simpleMethod(4);\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 32)",
            "(line 52,col 9)-(line 52,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointStackTraceToPreviousInvocation()",
        "snippet": "    @Test\n    public void shouldPointStackTraceToPreviousInvocation() {\n        inOrder.verify(mock, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mockTwo, times(2)).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mock).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"secondChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 55,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 62)",
            "(line 58,col 9)-(line 58,col 65)",
            "(line 60,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToThirdInteractionBecauseAtLeastOnceUsed()",
        "snippet": "    @Test\n    public void shouldPointToThirdInteractionBecauseAtLeastOnceUsed() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"thirdChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 68,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 67)",
            "(line 72,col 9)-(line 77,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToThirdChunkWhenTooLittleActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToThirdChunkWhenTooLittleActualInvocations() {\n        inOrder.verify(mock, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mockTwo, times(2)).simpleMethod(anyInt());\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"thirdChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 80,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 62)",
            "(line 83,col 9)-(line 83,col 65)",
            "(line 84,col 9)-(line 84,col 67)",
            "(line 86,col 9)-(line 91,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToFourthChunkBecauseTooManyActualInvocations()",
        "snippet": "    @Test\n    public void shouldPointToFourthChunkBecauseTooManyActualInvocations() {\n        inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());\n        \n        try {\n            inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"fourthChunk(\", e.getMessage());\n        }\n    }",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 67)",
            "(line 98,col 9)-(line 103,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.misplacedArgumentMatcherHere()",
        "snippet": "    private void misplacedArgumentMatcherHere() {\n        anyString();\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 20)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldPointOutMisplacedMatcher()",
        "snippet": "    @Test\n    public void shouldPointOutMisplacedMatcher() {\n        misplacedArgumentMatcherHere();\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertContains(\"-> at \", e.getMessage());\n            assertContains(\"misplacedArgumentMatcherHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 33,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 39)",
            "(line 36,col 9)-(line 42,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.unfinishedStubbingHere()",
        "snippet": "    private void unfinishedStubbingHere() {\n        when(mock.simpleMethod());\n    }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldPointOutUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldPointOutUnfinishedStubbing() {\n        unfinishedStubbingHere();\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (UnfinishedStubbingException e) {\n            assertContains(\"-> at \", e.getMessage());\n            assertContains(\"unfinishedStubbingHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 33)",
            "(line 53,col 9)-(line 59,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldShowWhereIsUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldShowWhereIsUnfinishedVerification() throws Exception {\n        unfinishedVerificationHere();\n        try {\n            mock(IMethods.class);\n            fail();\n        } catch (UnfinishedVerificationException e) {\n            assertContains(\"unfinishedVerificationHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 62,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 37)",
            "(line 65,col 9)-(line 70,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.unfinishedVerificationHere()",
        "snippet": "    private void unfinishedVerificationHere() {\n        verify(mock);\n    }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        super.makeStackTracesClean();\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerify()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceOnVerify() {\n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerify\"));\n        }\n    }",
        "begin_line": 37,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerifyNoMoreInteractions()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceOnVerifyNoMoreInteractions() {\n        mock.oneArg(true);\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyNoMoreInteractions\"));\n        }\n    }",
        "begin_line": 47,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 26)",
            "(line 50,col 9)-(line 55,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerifyZeroInteractions()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceOnVerifyZeroInteractions() {\n        mock.oneArg(true);\n        try {\n            verifyZeroInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyZeroInteractions\"));\n        }\n    }",
        "begin_line": 58,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 26)",
            "(line 61,col 9)-(line 66,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceOnMockitoException()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceOnMockitoException() {\n        verify(mock);\n        try {\n            verify(mock).oneArg(true); \n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceOnMockitoException\"));\n        }\n    }",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 21)",
            "(line 72,col 9)-(line 77,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenVerifyingInOrder()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceWhenVerifyingInOrder() {\n        InOrder inOrder = inOrder(mock);\n        mock.oneArg(true);\n        mock.oneArg(false);\n        \n        inOrder.verify(mock).oneArg(false);\n        try {\n            inOrder.verify(mock).oneArg(true);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenVerifyingInOrder\"));\n        }\n    }",
        "begin_line": 80,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 40)",
            "(line 83,col 9)-(line 83,col 26)",
            "(line 84,col 9)-(line 84,col 27)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 9)-(line 92,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenInOrderThrowsMockitoException()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceWhenInOrderThrowsMockitoException() {\n        try {\n            inOrder();\n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenInOrderThrowsMockitoException\"));\n        }\n    }",
        "begin_line": 95,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenInOrderVerifies()",
        "snippet": "    @Test\n    public void shouldFilterStacktraceWhenInOrderVerifies() {\n        try {\n            InOrder inOrder = inOrder(mock);\n            inOrder.verify(null);\n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenInOrderVerifies\"));\n        }\n    }",
        "begin_line": 105,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceWhenThrowingExceptionFromMockHandler()",
        "snippet": "    @Test\n    public void shouldFilterStackTraceWhenThrowingExceptionFromMockHandler() {\n        try {\n            when(mock.oneArg(true)).thenThrow(new Exception());\n            fail();\n        } catch (MockitoException expected) {\n            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStackTraceWhenThrowingExceptionFromMockHandler\"));\n        }\n    }",
        "begin_line": 116,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 123,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.StackTraceFilteringTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/StackTraceFilteringTest.java",
        "signature": "org.mockitousage.stacktrace.StackTraceFilteringTest.shouldShowProperExceptionStackTrace()",
        "snippet": "    @Test\n    public void shouldShowProperExceptionStackTrace() throws Exception {\n        when(mock.simpleMethod()).thenThrow(new RuntimeException());\n\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {\n            assertThat(e, hasFirstMethodInStackTrace(\"shouldShowProperExceptionStackTrace\"));\n        }\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 68)",
            "(line 130,col 9)-(line 135,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesTest.callMethodOnMock(java.lang.String)",
        "snippet": "    private void callMethodOnMock(String param) {\n        mock.simpleMethod(param);\n    }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesTest.verifyTheMock(int, java.lang.String)",
        "snippet": "    private void verifyTheMock(int times, String param) {\n        verify(mock, times(times)).simpleMethod(param);\n    }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.ClickableStackTracesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/ClickableStackTracesTest.java",
        "signature": "org.mockitousage.stacktrace.ClickableStackTracesTest.shouldShowActualAndExpectedWhenArgumentsAreDifferent()",
        "snippet": "    @Test\n    public void shouldShowActualAndExpectedWhenArgumentsAreDifferent() {\n        callMethodOnMock(\"foo\");\n        try {\n            verifyTheMock(1, \"not foo\");\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"callMethodOnMock(\", e.getMessage());\n            assertContains(\"verifyTheMock(\", e.getMessage());\n        }\n    }",
        "begin_line": 28,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 32)",
            "(line 31,col 9)-(line 37,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        first();\n        second();\n        third();\n        fourth();\n    }",
        "begin_line": 27,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 16)",
            "(line 30,col 9)-(line 30,col 17)",
            "(line 31,col 9)-(line 31,col 16)",
            "(line 32,col 9)-(line 32,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.first()",
        "snippet": "    private void first() {\n        mock.simpleMethod(1);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.second()",
        "snippet": "    private void second() {\n        mockTwo.simpleMethod(2);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.third()",
        "snippet": "    private void third() {\n        mock.simpleMethod(3);\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.fourth()",
        "snippet": "    private void fourth() {\n        mockTwo.simpleMethod(4);\n    }",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.shouldPointToTooManyInvocationsChunkOnError()",
        "snippet": "    @Test\n    public void shouldPointToTooManyInvocationsChunkOnError() {\n        try {\n            verify(mock, times(0)).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertContains(\"first(\", e.getMessage());\n        }\n    }   ",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 55,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java",
        "signature": "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.shouldNotPointStackTracesToRunnersCode()",
        "snippet": "    @Test\n    public void shouldNotPointStackTracesToRunnersCode() {\n        try {\n            verify(mock, times(0)).simpleMethod(1);\n            fail();\n        } catch (NeverWantedButInvoked e) {\n            assertNotContains(\".runners.\", e.getMessage());\n        }\n    }   ",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java",
        "signature": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        one = mock(IMethods.class);\n        two = mock(IMethods.class);\n        three = mock(IMethods.class);\n    }",
        "begin_line": 22,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 35)",
            "(line 25,col 9)-(line 25,col 35)",
            "(line 26,col 9)-(line 26,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java",
        "signature": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldStubUsingMatchers()",
        "snippet": "    @Test\n    public void shouldStubUsingMatchers() {\n        when(one.simpleMethod(2)).thenReturn(\"2\");\n        when(two.simpleMethod(anyString())).thenReturn(\"any\");\n        when(three.simpleMethod(startsWith(\"test\"))).thenThrow(new RuntimeException());\n\n        assertEquals(null, one.simpleMethod(1));\n        assertEquals(\"2\", one.simpleMethod(2));\n        \n        assertEquals(\"any\", two.simpleMethod(\"two\"));\n        assertEquals(\"any\", two.simpleMethod(\"two again\"));\n        \n        assertEquals(null, three.simpleMethod(\"three\"));\n        assertEquals(null, three.simpleMethod(\"three again\"));\n       \n        try {\n            three.simpleMethod(\"test three again\");\n            fail();\n        } catch (RuntimeException e) {}\n    }",
        "begin_line": 29,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 50)",
            "(line 32,col 9)-(line 32,col 62)",
            "(line 33,col 9)-(line 33,col 87)",
            "(line 35,col 9)-(line 35,col 48)",
            "(line 36,col 9)-(line 36,col 47)",
            "(line 38,col 9)-(line 38,col 53)",
            "(line 39,col 9)-(line 39,col 59)",
            "(line 41,col 9)-(line 41,col 56)",
            "(line 42,col 9)-(line 42,col 62)",
            "(line 44,col 9)-(line 47,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java",
        "signature": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void shouldVerifyUsingMatchers() {\n        stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\n        when(three.varargsObject(5, \"first arg\", \"second arg\")).thenReturn(\"stubbed\");\n\n        try {\n            one.oneArg(true);\n            fail();\n        } catch (RuntimeException e) {}\n\n        one.simpleMethod(100);\n        two.simpleMethod(\"test Mockito\");\n        three.varargsObject(10, \"first arg\", \"second arg\");\n        \n        assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n\n        verify(one).oneArg(eq(true));\n        verify(one).simpleMethod(anyInt());\n        verify(two).simpleMethod(startsWith(\"test\"));\n        verify(three).varargsObject(5, \"first arg\", \"second arg\");\n        verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"second\"));\n        \n        verifyNoMoreInteractions(one, two, three);\n        \n        try {\n            verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 72)",
            "(line 54,col 9)-(line 54,col 86)",
            "(line 56,col 9)-(line 59,col 39)",
            "(line 61,col 9)-(line 61,col 30)",
            "(line 62,col 9)-(line 62,col 41)",
            "(line 63,col 9)-(line 63,col 59)",
            "(line 65,col 9)-(line 65,col 83)",
            "(line 67,col 9)-(line 67,col 37)",
            "(line 68,col 9)-(line 68,col 43)",
            "(line 69,col 9)-(line 69,col 53)",
            "(line 70,col 9)-(line 70,col 66)",
            "(line 71,col 9)-(line 71,col 83)",
            "(line 73,col 9)-(line 73,col 50)",
            "(line 75,col 9)-(line 78,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCasting()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCasting() {\n        when(mock.objectArgMethod(any(String.class))).thenReturn(\"string\");\n\n        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n    }",
        "begin_line": 23,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 75)",
            "(line 27,col 9)-(line 27,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldAnyBeActualAliasToAnyObject()",
        "snippet": "    @Test\n    public void shouldAnyBeActualAliasToAnyObject() {\n        mock.simpleMethod((Object) null);\n\n        verify(mock).simpleMethod(anyObject());\n        verify(mock).simpleMethod(any(Object.class));\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 41)",
            "(line 34,col 9)-(line 34,col 47)",
            "(line 35,col 9)-(line 35,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfLists()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfLists() {\n        //Below yields compiler warning:\n        //when(mock.listArgMethod(anyList())).thenReturn(\"list\");\n        when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n\n        assertEquals(\"list\", mock.listArgMethod(new LinkedList<String>()));\n        assertEquals(\"list\", mock.listArgMethod(Collections.<String>emptyList()));\n    }",
        "begin_line": 38,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 77)",
            "(line 44,col 9)-(line 44,col 75)",
            "(line 45,col 9)-(line 45,col 82)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfSets()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfSets() {\n        //Below yields compiler warning:\n        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n        when(mock.setArgMethod(anySetOf(String.class))).thenReturn(\"set\");\n\n        assertEquals(\"set\", mock.setArgMethod(new HashSet<String>()));\n        assertEquals(\"set\", mock.setArgMethod(Collections.<String>emptySet()));\n    }",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 74)",
            "(line 54,col 9)-(line 54,col 70)",
            "(line 55,col 9)-(line 55,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfMaps()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfMaps() {\n        //Below yields compiler warning:\n        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n        when(mock.forMap(anyMapOf(String.class, String.class))).thenReturn(\"map\");\n\n        assertEquals(\"map\", mock.forMap(new HashMap<String, String>()));\n        assertEquals(\"map\", mock.forMap(Collections.<String, String>emptyMap()));\n    }",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 82)",
            "(line 64,col 9)-(line 64,col 72)",
            "(line 65,col 9)-(line 65,col 81)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfCollections()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n        //Below yields compiler warning:\n        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"col\");\n\n        assertEquals(\"col\", mock.collectionArgMethod(new ArrayList<String>()));\n        assertEquals(\"col\", mock.collectionArgMethod(Collections.<String>emptyList()));\n    }",
        "begin_line": 68,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 88)",
            "(line 74,col 9)-(line 74,col 79)",
            "(line 75,col 9)-(line 75,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MoreMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MoreMatchersTest.java",
        "signature": "org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfNullityChecks()",
        "snippet": "    @Test\n    public void shouldHelpOutWithUnnecessaryCastingOfNullityChecks() {\n        when(mock.objectArgMethod(isNull(LinkedList.class))).thenReturn(\"string\");\n        when(mock.objectArgMethod(notNull(LinkedList.class))).thenReturn(\"string\");\n        when(mock.objectArgMethod(isNotNull(LinkedList.class))).thenReturn(\"string\");\n\n        assertEquals(\"string\", mock.objectArgMethod(null));\n        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n    }",
        "begin_line": 78,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 82)",
            "(line 81,col 9)-(line 81,col 83)",
            "(line 82,col 9)-(line 82,col 85)",
            "(line 84,col 9)-(line 84,col 59)",
            "(line 85,col 9)-(line 85,col 60)",
            "(line 86,col 9)-(line 86,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList()",
        "snippet": "    @Test\n    public void shouldAllowAnyList() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));\n        assertEquals(null, mock.forList(null));\n\n        verify(mock, times(1)).forList(anyList());\n    }",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 60)",
            "(line 34,col 9)-(line 34,col 71)",
            "(line 35,col 9)-(line 35,col 47)",
            "(line 37,col 9)-(line 37,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyCollection()",
        "snippet": "    @Test\n    public void shouldAllowAnyCollection() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));\n        assertEquals(null, mock.forCollection(null));\n\n        verify(mock, times(1)).forCollection(anyCollection());\n    }",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 72)",
            "(line 44,col 9)-(line 44,col 77)",
            "(line 45,col 9)-(line 45,col 53)",
            "(line 47,col 9)-(line 47,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap()",
        "snippet": "    @Test\n    public void shouldAllowAnyMap() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));\n        assertEquals(null, mock.forMap(null));\n\n        verify(mock, times(1)).forMap(anyMap());\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 58)",
            "(line 54,col 9)-(line 54,col 76)",
            "(line 55,col 9)-(line 55,col 46)",
            "(line 57,col 9)-(line 57,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.NewMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
        "signature": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnySet()",
        "snippet": "    @Test\n    public void shouldAllowAnySet() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forSet(new HashSet<String>()));\n        assertEquals(null, mock.forSet(null));\n\n        verify(mock, times(1)).forSet(anySet());\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 58)",
            "(line 64,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 46)",
            "(line 67,col 9)-(line 67,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.GenericMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/GenericMatchersTest.java",
        "signature": "org.mockitousage.matchers.GenericMatchersTest.Foo.sort(java.util.List<java.lang.String>)",
        "snippet": "        List<String> sort(List<String> otherList);",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.GenericMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/GenericMatchersTest.java",
        "signature": "org.mockitousage.matchers.GenericMatchersTest.Foo.convertDate(java.util.Date)",
        "snippet": "        String convertDate(Date date);",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.GenericMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/GenericMatchersTest.java",
        "signature": "org.mockitousage.matchers.GenericMatchersTest.shouldCompile()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void shouldCompile() {\n        when(sorter.convertDate(new Date())).thenReturn(\"one\");\n        when(sorter.convertDate((Date) anyObject())).thenReturn(\"two\");\n\n        //following requires warning suppression but allows setting anyList()\n        when(sorter.sort(anyList())).thenReturn(null);\n    }",
        "begin_line": 27,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 63)",
            "(line 31,col 9)-(line 31,col 71)",
            "(line 34,col 9)-(line 34,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.should_detect_wrong_number_of_matchers_when_stubbing()",
        "snippet": "    @Test\n    public void should_detect_wrong_number_of_matchers_when_stubbing() {\n        when(mock.threeArgumentMethod(1, \"2\", \"3\")).thenReturn(null);\n        try {\n            when(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).thenReturn(null);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertThat(e.getMessage())\n                      .contains(\"3 matchers expected\")\n                      .contains(\"1 recorded\");\n        }\n    }",
        "begin_line": 27,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 69)",
            "(line 30,col 9)-(line 37,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.should_detect_stupid_use_of_matchers_when_verifying()",
        "snippet": "    @Test\n    public void should_detect_stupid_use_of_matchers_when_verifying() {\n        mock.oneArg(true);\n        eq(\"that's the stupid way\");\n        eq(\"of using matchers\");\n        try {\n            Mockito.verify(mock).oneArg(true);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertThat(e.getMessage())\n                      .contains(\"Misplaced argument matcher detected here\");\n            e.printStackTrace();\n        }\n    }",
        "begin_line": 40,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 26)",
            "(line 43,col 9)-(line 43,col 36)",
            "(line 44,col 9)-(line 44,col 32)",
            "(line 45,col 9)-(line 52,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.should_not_scream_on_correct_usage()",
        "snippet": "    @Test\n    public void should_not_scream_on_correct_usage() throws Exception {\n        mock.simpleMethod(AdditionalMatchers.not(eq(\"asd\")));\n        mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), eq(\"asd\")));\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 61)",
            "(line 58,col 9)-(line 58,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.should_scream_when_no_matchers_inside_not()",
        "snippet": "    @Test\n    public void should_scream_when_no_matchers_inside_not() {\n        try {\n            mock.simpleMethod(AdditionalMatchers.not(\"jkl\"));\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertThat(e.getMessage())\n                    .contains(\"No matchers found for\")\n                    .containsIgnoringCase(\"Not(?)\");\n        }\n    }",
        "begin_line": 61,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 70,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.should_scream_when_not_enough_matchers_inside_or_AddtionalMatcher()",
        "snippet": "    @Test\n    public void should_scream_when_not_enough_matchers_inside_or_AddtionalMatcher() {\n        try {\n            mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), \"asd\"));\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"inside additional matcher Or(?)\")\n                    .contains(\"2 sub matchers expected\")\n                    .contains(\"1 recorded\");\n        }\n    }",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.InvalidUseOfMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java",
        "signature": "org.mockitousage.matchers.InvalidUseOfMatchersTest.should_scream_when_Matchers_count_dont_match_parameter_count()",
        "snippet": "    @Test\n    public void should_scream_when_Matchers_count_dont_match_parameter_count() {\n        try {\n            mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            assertThat(e.getMessage())\n                      .contains(\"3 matchers expected\")\n                      .contains(\"1 recorded\");\n        }\n    }",
        "begin_line": 86,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 95,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.andOverloaded()",
        "snippet": "    @Test\n    public void andOverloaded() {\n        when(mock.oneArg(and(eq(false), eq(false)))).thenReturn(\"0\");\n        when(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).thenReturn(\"1\");\n        when(mock.oneArg(and(eq('a'), eq('a')))).thenReturn(\"2\");\n        when(mock.oneArg(and(eq((double) 1), eq((double) 1)))).thenReturn(\"3\");\n        when(mock.oneArg(and(eq((float) 1), eq((float) 1)))).thenReturn(\"4\");\n        when(mock.oneArg(and(eq((int) 1), eq((int) 1)))).thenReturn(\"5\");\n        when(mock.oneArg(and(eq((long) 1), eq((long) 1)))).thenReturn(\"6\");\n        when(mock.oneArg(and(eq((short) 1), eq((short) 1)))).thenReturn(\"7\");\n        when(mock.oneArg(and(Matchers.contains(\"a\"), Matchers.contains(\"d\")))).thenReturn(\"8\");\n        when(mock.oneArg(and(isA(Class.class), eq(Object.class)))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArg(false));\n        assertEquals(null, mock.oneArg(true));\n\n        assertEquals(\"1\", mock.oneArg((byte) 1));\n        assertEquals(\"2\", mock.oneArg('a'));\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"4\", mock.oneArg((float) 1));\n        assertEquals(\"5\", mock.oneArg((int) 1));\n        assertEquals(\"6\", mock.oneArg((long) 1));\n        assertEquals(\"7\", mock.oneArg((short) 1));\n\n        assertEquals(\"8\", mock.oneArg(\"abcde\"));\n        assertEquals(null, mock.oneArg(\"aaaaa\"));\n\n        assertEquals(\"9\", mock.oneArg(Object.class));\n    }",
        "begin_line": 35,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 69)",
            "(line 38,col 9)-(line 38,col 75)",
            "(line 39,col 9)-(line 39,col 65)",
            "(line 40,col 9)-(line 40,col 79)",
            "(line 41,col 9)-(line 41,col 77)",
            "(line 42,col 9)-(line 42,col 73)",
            "(line 43,col 9)-(line 43,col 75)",
            "(line 44,col 9)-(line 44,col 77)",
            "(line 45,col 9)-(line 45,col 95)",
            "(line 46,col 9)-(line 46,col 83)",
            "(line 48,col 9)-(line 48,col 46)",
            "(line 49,col 9)-(line 49,col 46)",
            "(line 51,col 9)-(line 51,col 49)",
            "(line 52,col 9)-(line 52,col 44)",
            "(line 53,col 9)-(line 53,col 51)",
            "(line 54,col 9)-(line 54,col 50)",
            "(line 55,col 9)-(line 55,col 48)",
            "(line 56,col 9)-(line 56,col 49)",
            "(line 57,col 9)-(line 57,col 50)",
            "(line 59,col 9)-(line 59,col 48)",
            "(line 60,col 9)-(line 60,col 49)",
            "(line 62,col 9)-(line 62,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.orOverloaded()",
        "snippet": "    @Test\n    public void orOverloaded() {\n        when(mock.oneArg(or(eq(false), eq(true)))).thenReturn(\"0\");\n        when(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).thenReturn(\"1\");\n        when(mock.oneArg(or(eq((char) 1), eq((char) 2)))).thenReturn(\"2\");\n        when(mock.oneArg(or(eq((double) 1), eq((double) 2)))).thenReturn(\"3\");\n        when(mock.oneArg(or(eq((float) 1), eq((float) 2)))).thenReturn(\"4\");\n        when(mock.oneArg(or(eq((int) 1), eq((int) 2)))).thenReturn(\"5\");\n        when(mock.oneArg(or(eq((long) 1), eq((long) 2)))).thenReturn(\"6\");\n        when(mock.oneArg(or(eq((short) 1), eq((short) 2)))).thenReturn(\"7\");\n        when(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).thenReturn(\"8\");\n        when(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArg(true));\n        assertEquals(\"0\", mock.oneArg(false));\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(\"2\", mock.oneArg((char) 1));\n        assertEquals(\"3\", mock.oneArg((double) 2));\n        assertEquals(\"4\", mock.oneArg((float) 1));\n        assertEquals(\"5\", mock.oneArg((int) 2));\n        assertEquals(\"6\", mock.oneArg((long) 1));\n        assertEquals(\"7\", mock.oneArg((short) 1));\n\n        assertEquals(\"8\", mock.oneArg(\"jkl\"));\n        assertEquals(\"8\", mock.oneArg(\"asd\"));\n        assertEquals(null, mock.oneArg(\"asdjkl\"));\n\n        assertEquals(\"9\", mock.oneArg(Object.class));\n        assertEquals(null, mock.oneArg(String.class));\n    }",
        "begin_line": 65,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 67)",
            "(line 68,col 9)-(line 68,col 74)",
            "(line 69,col 9)-(line 69,col 74)",
            "(line 70,col 9)-(line 70,col 78)",
            "(line 71,col 9)-(line 71,col 76)",
            "(line 72,col 9)-(line 72,col 72)",
            "(line 73,col 9)-(line 73,col 74)",
            "(line 74,col 9)-(line 74,col 76)",
            "(line 75,col 9)-(line 75,col 68)",
            "(line 76,col 9)-(line 76,col 85)",
            "(line 78,col 9)-(line 78,col 45)",
            "(line 79,col 9)-(line 79,col 46)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 49)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 50)",
            "(line 85,col 9)-(line 85,col 48)",
            "(line 86,col 9)-(line 86,col 49)",
            "(line 87,col 9)-(line 87,col 50)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 46)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 94,col 9)-(line 94,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.notOverloaded()",
        "snippet": "    @Test\n    public void notOverloaded() {\n        when(mock.oneArg(not(eq(false)))).thenReturn(\"0\");\n        when(mock.oneArg(not(eq((byte) 1)))).thenReturn(\"1\");\n        when(mock.oneArg(not(eq('a')))).thenReturn(\"2\");\n        when(mock.oneArg(not(eq((double) 1)))).thenReturn(\"3\");\n        when(mock.oneArg(not(eq((float) 1)))).thenReturn(\"4\");\n        when(mock.oneArg(not(eq((int) 1)))).thenReturn(\"5\");\n        when(mock.oneArg(not(eq((long) 1)))).thenReturn(\"6\");\n        when(mock.oneArg(not(eq((short) 1)))).thenReturn(\"7\");\n        when(mock.oneArg(not(Matchers.contains(\"a\")))).thenReturn(\"8\");\n        when(mock.oneArg(not(isA(Class.class)))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArg(true));\n        assertEquals(null, mock.oneArg(false));\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(\"2\", mock.oneArg('b'));\n        assertEquals(\"3\", mock.oneArg((double) 2));\n        assertEquals(\"4\", mock.oneArg((float) 2));\n        assertEquals(\"5\", mock.oneArg((int) 2));\n        assertEquals(\"6\", mock.oneArg((long) 2));\n        assertEquals(\"7\", mock.oneArg((short) 2));\n        assertEquals(\"8\", mock.oneArg(\"bcde\"));\n\n        assertEquals(\"9\", mock.oneArg(new Object()));\n        assertEquals(null, mock.oneArg(Class.class));\n    }",
        "begin_line": 97,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 58)",
            "(line 100,col 9)-(line 100,col 61)",
            "(line 101,col 9)-(line 101,col 56)",
            "(line 102,col 9)-(line 102,col 63)",
            "(line 103,col 9)-(line 103,col 62)",
            "(line 104,col 9)-(line 104,col 60)",
            "(line 105,col 9)-(line 105,col 61)",
            "(line 106,col 9)-(line 106,col 62)",
            "(line 107,col 9)-(line 107,col 71)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 110,col 9)-(line 110,col 45)",
            "(line 111,col 9)-(line 111,col 47)",
            "(line 113,col 9)-(line 113,col 49)",
            "(line 114,col 9)-(line 114,col 44)",
            "(line 115,col 9)-(line 115,col 51)",
            "(line 116,col 9)-(line 116,col 50)",
            "(line 117,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 118,col 49)",
            "(line 119,col 9)-(line 119,col 50)",
            "(line 120,col 9)-(line 120,col 47)",
            "(line 122,col 9)-(line 122,col 53)",
            "(line 123,col 9)-(line 123,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessOrEqualOverloaded()",
        "snippet": "    @Test\n    public void lessOrEqualOverloaded() {\n        when(mock.oneArg(leq((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(leq((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(leq((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(leq((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(leq((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(leq((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(leq(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 1));\n        assertEquals(null, mock.oneArg((byte) 2));\n\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"7\", mock.oneArg((short) 0));\n        assertEquals(\"4\", mock.oneArg((float) -5));\n        assertEquals(\"5\", mock.oneArg((int) -2));\n        assertEquals(\"6\", mock.oneArg((long) -3));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"1.1\")));\n    }",
        "begin_line": 126,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 57)",
            "(line 129,col 9)-(line 129,col 59)",
            "(line 130,col 9)-(line 130,col 58)",
            "(line 131,col 9)-(line 131,col 56)",
            "(line 132,col 9)-(line 132,col 57)",
            "(line 133,col 9)-(line 133,col 58)",
            "(line 134,col 9)-(line 134,col 68)",
            "(line 136,col 9)-(line 136,col 49)",
            "(line 137,col 9)-(line 137,col 50)",
            "(line 139,col 9)-(line 139,col 51)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 142,col 49)",
            "(line 143,col 9)-(line 143,col 50)",
            "(line 145,col 9)-(line 145,col 62)",
            "(line 146,col 9)-(line 146,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessThanOverloaded()",
        "snippet": "    @Test\n    public void lessThanOverloaded() {\n        when(mock.oneArg(lt((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(lt((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(lt((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(lt((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(lt((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(lt((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(lt(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 0));\n        assertEquals(null, mock.oneArg((byte) 1));\n\n        assertEquals(\"3\", mock.oneArg((double) 0));\n        assertEquals(\"7\", mock.oneArg((short) 0));\n        assertEquals(\"4\", mock.oneArg((float) -4));\n        assertEquals(\"5\", mock.oneArg((int) -34));\n        assertEquals(\"6\", mock.oneArg((long) -6));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"23\")));\n    }",
        "begin_line": 149,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 56)",
            "(line 152,col 9)-(line 152,col 58)",
            "(line 153,col 9)-(line 153,col 57)",
            "(line 154,col 9)-(line 154,col 55)",
            "(line 155,col 9)-(line 155,col 56)",
            "(line 156,col 9)-(line 156,col 57)",
            "(line 157,col 9)-(line 157,col 67)",
            "(line 159,col 9)-(line 159,col 49)",
            "(line 160,col 9)-(line 160,col 50)",
            "(line 162,col 9)-(line 162,col 51)",
            "(line 163,col 9)-(line 163,col 50)",
            "(line 164,col 9)-(line 164,col 51)",
            "(line 165,col 9)-(line 165,col 50)",
            "(line 166,col 9)-(line 166,col 50)",
            "(line 168,col 9)-(line 168,col 62)",
            "(line 169,col 9)-(line 169,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterOrEqualMatcherOverloaded()",
        "snippet": "    @Test\n    public void greaterOrEqualMatcherOverloaded() {\n        when(mock.oneArg(geq((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(geq((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(geq((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(geq((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(geq((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(geq((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(geq(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(null, mock.oneArg((byte) 0));\n\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"7\", mock.oneArg((short) 2));\n        assertEquals(\"4\", mock.oneArg((float) 3));\n        assertEquals(\"5\", mock.oneArg((int) 4));\n        assertEquals(\"6\", mock.oneArg((long) 5));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.00\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n    }",
        "begin_line": 172,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 57)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 176,col 58)",
            "(line 177,col 9)-(line 177,col 56)",
            "(line 178,col 9)-(line 178,col 57)",
            "(line 179,col 9)-(line 179,col 58)",
            "(line 180,col 9)-(line 180,col 68)",
            "(line 182,col 9)-(line 182,col 49)",
            "(line 183,col 9)-(line 183,col 50)",
            "(line 185,col 9)-(line 185,col 51)",
            "(line 186,col 9)-(line 186,col 50)",
            "(line 187,col 9)-(line 187,col 50)",
            "(line 188,col 9)-(line 188,col 48)",
            "(line 189,col 9)-(line 189,col 49)",
            "(line 191,col 9)-(line 191,col 63)",
            "(line 192,col 9)-(line 192,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterThanMatcherOverloaded()",
        "snippet": "    @Test\n    public void greaterThanMatcherOverloaded() {\n        when(mock.oneArg(gt((byte) 1))).thenReturn(\"1\");\n        when(mock.oneArg(gt((double) 1))).thenReturn(\"3\");\n        when(mock.oneArg(gt((float) 1))).thenReturn(\"4\");\n        when(mock.oneArg(gt((int) 1))).thenReturn(\"5\");\n        when(mock.oneArg(gt((long) 1))).thenReturn(\"6\");\n        when(mock.oneArg(gt((short) 1))).thenReturn(\"7\");\n        when(mock.oneArg(gt(new BigDecimal(\"1\")))).thenReturn(\"8\");\n\n        assertEquals(\"1\", mock.oneArg((byte) 2));\n        assertEquals(null, mock.oneArg((byte) 1));\n\n        assertEquals(\"3\", mock.oneArg((double) 2));\n        assertEquals(\"7\", mock.oneArg((short) 2));\n        assertEquals(\"4\", mock.oneArg((float) 3));\n        assertEquals(\"5\", mock.oneArg((int) 2));\n        assertEquals(\"6\", mock.oneArg((long) 5));\n\n        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n    }",
        "begin_line": 195,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 56)",
            "(line 198,col 9)-(line 198,col 58)",
            "(line 199,col 9)-(line 199,col 57)",
            "(line 200,col 9)-(line 200,col 55)",
            "(line 201,col 9)-(line 201,col 56)",
            "(line 202,col 9)-(line 202,col 57)",
            "(line 203,col 9)-(line 203,col 67)",
            "(line 205,col 9)-(line 205,col 49)",
            "(line 206,col 9)-(line 206,col 50)",
            "(line 208,col 9)-(line 208,col 51)",
            "(line 209,col 9)-(line 209,col 50)",
            "(line 210,col 9)-(line 210,col 50)",
            "(line 211,col 9)-(line 211,col 48)",
            "(line 212,col 9)-(line 212,col 49)",
            "(line 214,col 9)-(line 214,col 62)",
            "(line 215,col 9)-(line 215,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.compareToMatcher()",
        "snippet": "    @Test\n    public void compareToMatcher() {\n        when(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).thenReturn(\"0\");\n\n        assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n        assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n    }",
        "begin_line": 218,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 72)",
            "(line 222,col 9)-(line 222,col 63)",
            "(line 223,col 9)-(line 223,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.anyStringMatcher()",
        "snippet": "    @Test\n    public void anyStringMatcher() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.oneArg(\"\"));\n        assertEquals(\"matched\", mock.oneArg(\"any string\"));\n        assertEquals(null, mock.oneArg((String) null));\n    }",
        "begin_line": 226,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 61)",
            "(line 230,col 9)-(line 230,col 49)",
            "(line 231,col 9)-(line 231,col 59)",
            "(line 232,col 9)-(line 232,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.anyMatcher()",
        "snippet": "    @Test\n    public void anyMatcher() {\n        when(mock.forObject(any())).thenReturn(\"matched\");\n\n        assertEquals(\"matched\", mock.forObject(123));\n        assertEquals(\"matched\", mock.forObject(\"any string\"));\n        assertEquals(\"matched\", mock.forObject(\"any string\"));\n        assertEquals(\"matched\", mock.forObject((Object) null));\n    }",
        "begin_line": 235,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 58)",
            "(line 239,col 9)-(line 239,col 53)",
            "(line 240,col 9)-(line 240,col 62)",
            "(line 241,col 9)-(line 241,col 62)",
            "(line 242,col 9)-(line 242,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.anyXMatcher()",
        "snippet": "    @Test\n    public void anyXMatcher() {\n        when(mock.oneArg(anyBoolean())).thenReturn(\"0\");\n        when(mock.oneArg(anyByte())).thenReturn(\"1\");\n        when(mock.oneArg(anyChar())).thenReturn(\"2\");\n        when(mock.oneArg(anyDouble())).thenReturn(\"3\");\n        when(mock.oneArg(anyFloat())).thenReturn(\"4\");\n        when(mock.oneArg(anyInt())).thenReturn(\"5\");\n        when(mock.oneArg(anyLong())).thenReturn(\"6\");\n        when(mock.oneArg(anyShort())).thenReturn(\"7\");\n        when(mock.oneArg((String) anyObject())).thenReturn(\"8\");\n        when(mock.oneArg(anyObject())).thenReturn(\"9\");\n        \n        assertEquals(\"0\", mock.oneArg(true));\n        assertEquals(\"0\", mock.oneArg(false));\n\n        assertEquals(\"1\", mock.oneArg((byte) 1));\n        assertEquals(\"2\", mock.oneArg((char) 1));\n        assertEquals(\"3\", mock.oneArg((double) 1));\n        assertEquals(\"4\", mock.oneArg((float) 889));\n        assertEquals(\"5\", mock.oneArg((int) 1));\n        assertEquals(\"6\", mock.oneArg((long) 1));\n        assertEquals(\"7\", mock.oneArg((short) 1));\n        assertEquals(\"8\", mock.oneArg(\"Test\"));\n\n        assertEquals(\"9\", mock.oneArg(new Object()));\n        assertEquals(\"9\", mock.oneArg(new HashMap()));\n    }",
        "begin_line": 245,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 56)",
            "(line 248,col 9)-(line 248,col 53)",
            "(line 249,col 9)-(line 249,col 53)",
            "(line 250,col 9)-(line 250,col 55)",
            "(line 251,col 9)-(line 251,col 54)",
            "(line 252,col 9)-(line 252,col 52)",
            "(line 253,col 9)-(line 253,col 53)",
            "(line 254,col 9)-(line 254,col 54)",
            "(line 255,col 9)-(line 255,col 64)",
            "(line 256,col 9)-(line 256,col 55)",
            "(line 258,col 9)-(line 258,col 45)",
            "(line 259,col 9)-(line 259,col 46)",
            "(line 261,col 9)-(line 261,col 49)",
            "(line 262,col 9)-(line 262,col 49)",
            "(line 263,col 9)-(line 263,col 51)",
            "(line 264,col 9)-(line 264,col 52)",
            "(line 265,col 9)-(line 265,col 48)",
            "(line 266,col 9)-(line 266,col 49)",
            "(line 267,col 9)-(line 267,col 50)",
            "(line 268,col 9)-(line 268,col 47)",
            "(line 270,col 9)-(line 270,col 53)",
            "(line 271,col 9)-(line 271,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.shouldArrayEqualsDealWithNullArray()",
        "snippet": "    @Test\n    public void shouldArrayEqualsDealWithNullArray() throws Exception {\n        Object[] nullArray = null;\n        when(mock.oneArray(aryEq(nullArray))).thenReturn(\"null\");\n\n        assertEquals(\"null\", mock.oneArray(nullArray));\n\n        mock = mock(IMethods.class);\n\n        try {\n            verify(mock).oneArray(aryEq(nullArray));\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"oneArray(null)\", e.getMessage());\n        }\n    }",
        "begin_line": 274,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 34)",
            "(line 277,col 9)-(line 277,col 65)",
            "(line 279,col 9)-(line 279,col 55)",
            "(line 281,col 9)-(line 281,col 36)",
            "(line 283,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.shouldUseSmartEqualsForArrays()",
        "snippet": "    @Test\n    public void shouldUseSmartEqualsForArrays() throws Exception {\n        //issue 143\n        mock.arrayMethod(new String[] {\"one\"});\n        verify(mock).arrayMethod(eq(new String[] {\"one\"}));\n        verify(mock).arrayMethod(new String[] {\"one\"});\n    }",
        "begin_line": 291,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 47)",
            "(line 295,col 9)-(line 295,col 59)",
            "(line 296,col 9)-(line 296,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.shouldUseSmartEqualsForPrimitiveArrays()",
        "snippet": "    @Test\n    public void shouldUseSmartEqualsForPrimitiveArrays() throws Exception {\n        //issue 143\n        mock.objectArgMethod(new int[] {1, 2});\n        verify(mock).objectArgMethod(eq(new int[] {1, 2}));\n        verify(mock).objectArgMethod(new int[] {1, 2});\n    }",
        "begin_line": 299,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 47)",
            "(line 303,col 9)-(line 303,col 59)",
            "(line 304,col 9)-(line 304,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments() {        \n        List list = Mockito.mock(List.class);\n        \n        list.add(\"test\"); // testing fix for issue 20\n        list.contains(new Object[] {\"1\"});\n        \n        Mockito.verify(list).contains(new Object[] {\"1\", \"2\", \"3\"});    \n    }",
        "begin_line": 307,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 45)",
            "(line 311,col 9)-(line 311,col 25)",
            "(line 312,col 9)-(line 312,col 42)",
            "(line 314,col 9)-(line 314,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.arrayEqualsMatcher()",
        "snippet": "    @Test\n    public void arrayEqualsMatcher() {\n        when(mock.oneArray(aryEq(new boolean[] { true, false, false }))).thenReturn(\"0\");\n        when(mock.oneArray(aryEq(new byte[] { 1 }))).thenReturn(\"1\");\n        when(mock.oneArray(aryEq(new char[] { 1 }))).thenReturn(\"2\");\n        when(mock.oneArray(aryEq(new double[] { 1 }))).thenReturn(\"3\");\n        when(mock.oneArray(aryEq(new float[] { 1 }))).thenReturn(\"4\");\n        when(mock.oneArray(aryEq(new int[] { 1 }))).thenReturn(\"5\");\n        when(mock.oneArray(aryEq(new long[] { 1 }))).thenReturn(\"6\");\n        when(mock.oneArray(aryEq(new short[] { 1 }))).thenReturn(\"7\");\n        when(mock.oneArray(aryEq(new String[] { \"Test\" }))).thenReturn(\"8\");\n        when(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).thenReturn(\"9\");\n\n        assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n        assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n        assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n        assertEquals(\"3\", mock.oneArray(new double[] { 1 }));\n        assertEquals(\"4\", mock.oneArray(new float[] { 1 }));\n        assertEquals(\"5\", mock.oneArray(new int[] { 1 }));\n        assertEquals(\"6\", mock.oneArray(new long[] { 1 }));\n        assertEquals(\"7\", mock.oneArray(new short[] { 1 }));\n        assertEquals(\"8\", mock.oneArray(new String[] { \"Test\" }));\n        assertEquals(\"9\", mock.oneArray(new Object[] { \"Test\", new Integer(4) }));\n\n        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(999) }));\n        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(4), \"x\" }));\n\n        assertEquals(null, mock.oneArray(new boolean[] { true, false }));\n        assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));\n    }",
        "begin_line": 317,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 89)",
            "(line 320,col 9)-(line 320,col 69)",
            "(line 321,col 9)-(line 321,col 69)",
            "(line 322,col 9)-(line 322,col 71)",
            "(line 323,col 9)-(line 323,col 70)",
            "(line 324,col 9)-(line 324,col 68)",
            "(line 325,col 9)-(line 325,col 69)",
            "(line 326,col 9)-(line 326,col 70)",
            "(line 327,col 9)-(line 327,col 76)",
            "(line 328,col 9)-(line 328,col 92)",
            "(line 330,col 9)-(line 330,col 79)",
            "(line 331,col 9)-(line 331,col 59)",
            "(line 332,col 9)-(line 332,col 59)",
            "(line 333,col 9)-(line 333,col 61)",
            "(line 334,col 9)-(line 334,col 60)",
            "(line 335,col 9)-(line 335,col 58)",
            "(line 336,col 9)-(line 336,col 59)",
            "(line 337,col 9)-(line 337,col 60)",
            "(line 338,col 9)-(line 338,col 66)",
            "(line 339,col 9)-(line 339,col 82)",
            "(line 341,col 9)-(line 341,col 85)",
            "(line 342,col 9)-(line 342,col 88)",
            "(line 344,col 9)-(line 344,col 73)",
            "(line 345,col 9)-(line 345,col 79)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterOrEqualMatcher()",
        "snippet": "    @Test\n    public void greaterOrEqualMatcher() {\n        when(mock.oneArg(geq(7))).thenReturn(\">= 7\");\n        when(mock.oneArg(lt(7))).thenReturn(\"< 7\");\n\n        assertEquals(\">= 7\", mock.oneArg(7));\n        assertEquals(\">= 7\", mock.oneArg(8));\n        assertEquals(\">= 7\", mock.oneArg(9));\n\n        assertEquals(\"< 7\", mock.oneArg(6));\n        assertEquals(\"< 7\", mock.oneArg(6));\n    }",
        "begin_line": 348,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 53)",
            "(line 351,col 9)-(line 351,col 51)",
            "(line 353,col 9)-(line 353,col 45)",
            "(line 354,col 9)-(line 354,col 45)",
            "(line 355,col 9)-(line 355,col 45)",
            "(line 357,col 9)-(line 357,col 44)",
            "(line 358,col 9)-(line 358,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.greaterThanMatcher()",
        "snippet": "    @Test\n    public void greaterThanMatcher() {\n        when(mock.oneArg(gt(7))).thenReturn(\"> 7\");\n        when(mock.oneArg(leq(7))).thenReturn(\"<= 7\");\n\n        assertEquals(\"> 7\", mock.oneArg(8));\n        assertEquals(\"> 7\", mock.oneArg(9));\n        assertEquals(\"> 7\", mock.oneArg(10));\n\n        assertEquals(\"<= 7\", mock.oneArg(7));\n        assertEquals(\"<= 7\", mock.oneArg(6));\n    }",
        "begin_line": 361,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 51)",
            "(line 364,col 9)-(line 364,col 53)",
            "(line 366,col 9)-(line 366,col 44)",
            "(line 367,col 9)-(line 367,col 44)",
            "(line 368,col 9)-(line 368,col 45)",
            "(line 370,col 9)-(line 370,col 45)",
            "(line 371,col 9)-(line 371,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessOrEqualMatcher()",
        "snippet": "    @Test\n    public void lessOrEqualMatcher() {\n        when(mock.oneArg(leq(7))).thenReturn(\"<= 7\");\n        when(mock.oneArg(gt(7))).thenReturn(\"> 7\");\n\n        assertEquals(\"<= 7\", mock.oneArg(7));\n        assertEquals(\"<= 7\", mock.oneArg(6));\n        assertEquals(\"<= 7\", mock.oneArg(5));\n\n        assertEquals(\"> 7\", mock.oneArg(8));\n        assertEquals(\"> 7\", mock.oneArg(9));\n    }",
        "begin_line": 374,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 53)",
            "(line 377,col 9)-(line 377,col 51)",
            "(line 379,col 9)-(line 379,col 45)",
            "(line 380,col 9)-(line 380,col 45)",
            "(line 381,col 9)-(line 381,col 45)",
            "(line 383,col 9)-(line 383,col 44)",
            "(line 384,col 9)-(line 384,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.lessThanMatcher()",
        "snippet": "    @Test\n    public void lessThanMatcher() {\n        when(mock.oneArg(lt(7))).thenReturn(\"< 7\");\n        when(mock.oneArg(geq(7))).thenReturn(\">= 7\");\n\n        assertEquals(\"< 7\", mock.oneArg(5));\n        assertEquals(\"< 7\", mock.oneArg(6));\n        assertEquals(\"< 7\", mock.oneArg(4));\n\n        assertEquals(\">= 7\", mock.oneArg(7));\n        assertEquals(\">= 7\", mock.oneArg(8));\n    }",
        "begin_line": 387,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 51)",
            "(line 390,col 9)-(line 390,col 53)",
            "(line 392,col 9)-(line 392,col 44)",
            "(line 393,col 9)-(line 393,col 44)",
            "(line 394,col 9)-(line 394,col 44)",
            "(line 396,col 9)-(line 396,col 45)",
            "(line 397,col 9)-(line 397,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.orMatcher()",
        "snippet": "    @Test\n    public void orMatcher() {\n        when(mock.oneArg(anyInt())).thenReturn(\"other\");\n        when(mock.oneArg(or(eq(7), eq(9)))).thenReturn(\"7 or 9\");\n\n        assertEquals(\"other\", mock.oneArg(10));\n        assertEquals(\"7 or 9\", mock.oneArg(7));\n        assertEquals(\"7 or 9\", mock.oneArg(9));\n    }",
        "begin_line": 400,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 56)",
            "(line 403,col 9)-(line 403,col 65)",
            "(line 405,col 9)-(line 405,col 47)",
            "(line 406,col 9)-(line 406,col 47)",
            "(line 407,col 9)-(line 407,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.nullMatcher()",
        "snippet": "    @Test\n    public void nullMatcher() {\n        when(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).thenReturn(\"1\");\n        when(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n        assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n    }",
        "begin_line": 410,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 80)",
            "(line 413,col 9)-(line 413,col 85)",
            "(line 415,col 9)-(line 415,col 65)",
            "(line 416,col 9)-(line 416,col 73)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.notNullMatcher()",
        "snippet": "    @Test\n    public void notNullMatcher() {\n        when(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).thenReturn(\"1\");\n        when(mock.threeArgumentMethod(eq(1), not(isNotNull()), eq(\"\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n        assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n    }",
        "begin_line": 419,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 421,col 9)-(line 421,col 81)",
            "(line 422,col 9)-(line 422,col 88)",
            "(line 424,col 9)-(line 424,col 73)",
            "(line 425,col 9)-(line 425,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.findMatcher()",
        "snippet": "    @Test\n    public void findMatcher() {\n        when(mock.oneArg(find(\"([a-z]+)\\\\d\"))).thenReturn(\"1\");\n\n        assertEquals(\"1\", mock.oneArg(\"ab12\"));\n        assertEquals(null, mock.oneArg(\"12345\"));\n        assertEquals(null, mock.oneArg((Object) null));\n    }",
        "begin_line": 428,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 430,col 9)-(line 430,col 63)",
            "(line 432,col 9)-(line 432,col 47)",
            "(line 433,col 9)-(line 433,col 49)",
            "(line 434,col 9)-(line 434,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.matchesMatcher()",
        "snippet": "    @Test\n    public void matchesMatcher() {\n        when(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).thenReturn(\"1\");\n        when(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"a12\"));\n        assertEquals(\"2\", mock.oneArg(\"131\"));\n        assertEquals(null, mock.oneArg(\"blah\"));\n    }",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 67)",
            "(line 440,col 9)-(line 440,col 64)",
            "(line 442,col 9)-(line 442,col 46)",
            "(line 443,col 9)-(line 443,col 46)",
            "(line 444,col 9)-(line 444,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.containsMatcher()",
        "snippet": "    @Test\n    public void containsMatcher() {\n        when(mock.oneArg(Matchers.contains(\"ell\"))).thenReturn(\"1\");\n        when(mock.oneArg(Matchers.contains(\"ld\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"hello\"));\n        assertEquals(\"2\", mock.oneArg(\"world\"));\n        assertEquals(null, mock.oneArg(\"xlx\"));\n    }",
        "begin_line": 447,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 68)",
            "(line 450,col 9)-(line 450,col 67)",
            "(line 452,col 9)-(line 452,col 48)",
            "(line 453,col 9)-(line 453,col 48)",
            "(line 454,col 9)-(line 454,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.startsWithMatcher()",
        "snippet": "    @Test\n    public void startsWithMatcher() {\n        when(mock.oneArg(startsWith(\"ab\"))).thenReturn(\"1\");\n        when(mock.oneArg(startsWith(\"bc\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n        assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n        assertEquals(null, mock.oneArg(\"ba quake\"));\n    }",
        "begin_line": 457,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 60)",
            "(line 460,col 9)-(line 460,col 60)",
            "(line 462,col 9)-(line 462,col 51)",
            "(line 463,col 9)-(line 463,col 51)",
            "(line 464,col 9)-(line 464,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.endsWithMatcher()",
        "snippet": "    @Test\n    public void endsWithMatcher() {\n        when(mock.oneArg(Matchers.endsWith(\"ab\"))).thenReturn(\"1\");\n        when(mock.oneArg(Matchers.endsWith(\"bc\"))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(\"xab\"));\n        assertEquals(\"2\", mock.oneArg(\"xbc\"));\n        assertEquals(null, mock.oneArg(\"ac\"));\n    }",
        "begin_line": 467,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 67)",
            "(line 470,col 9)-(line 470,col 67)",
            "(line 472,col 9)-(line 472,col 46)",
            "(line 473,col 9)-(line 473,col 46)",
            "(line 474,col 9)-(line 474,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.deltaMatcher()",
        "snippet": "    @Test\n    public void deltaMatcher() {\n        when(mock.oneArg(eq(1.0D, 0.1D))).thenReturn(\"1\");\n        when(mock.oneArg(eq(2.0D, 0.1D))).thenReturn(\"2\");\n        when(mock.oneArg(eq(1.0F, 0.1F))).thenReturn(\"3\");\n        when(mock.oneArg(eq(2.0F, 0.1F))).thenReturn(\"4\");\n        when(mock.oneArg(eq(2.0F, 0.1F))).thenReturn(\"4\");\n\n        assertEquals(\"1\", mock.oneArg(1.0));\n        assertEquals(\"1\", mock.oneArg(0.91));\n        assertEquals(\"1\", mock.oneArg(1.09));\n        assertEquals(\"2\", mock.oneArg(2.0));\n\n        assertEquals(\"3\", mock.oneArg(1.0F));\n        assertEquals(\"3\", mock.oneArg(0.91F));\n        assertEquals(\"3\", mock.oneArg(1.09F));\n        assertEquals(\"4\", mock.oneArg(2.1F));\n\n        assertEquals(null, mock.oneArg(2.2F));\n    }",
        "begin_line": 477,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 58)",
            "(line 480,col 9)-(line 480,col 58)",
            "(line 481,col 9)-(line 481,col 58)",
            "(line 482,col 9)-(line 482,col 58)",
            "(line 483,col 9)-(line 483,col 58)",
            "(line 485,col 9)-(line 485,col 44)",
            "(line 486,col 9)-(line 486,col 45)",
            "(line 487,col 9)-(line 487,col 45)",
            "(line 488,col 9)-(line 488,col 44)",
            "(line 490,col 9)-(line 490,col 45)",
            "(line 491,col 9)-(line 491,col 46)",
            "(line 492,col 9)-(line 492,col 46)",
            "(line 493,col 9)-(line 493,col 45)",
            "(line 495,col 9)-(line 495,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.deltaMatcherPrintsItself()",
        "snippet": "    @Test\n    public void deltaMatcherPrintsItself() {\n        try {\n            verify(mock).oneArg(eq(1.0D, 0.1D));\n            fail();\n        } catch (WantedButNotInvoked e) {\n            assertContains(\"eq(1.0, 0.1)\", e.getMessage());\n        }\n    }",
        "begin_line": 498,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 500,col 9)-(line 505,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.sameMatcher()",
        "snippet": "    @Test\n    public void sameMatcher() {\n        Object one = new String(\"1243\");\n        Object two = new String(\"1243\");\n        Object three = new String(\"1243\");\n\n        assertNotSame(one, two);\n        assertEquals(one, two);\n        assertEquals(two, three);\n\n        when(mock.oneArg(same(one))).thenReturn(\"1\");\n        when(mock.oneArg(same(two))).thenReturn(\"2\");\n\n        assertEquals(\"1\", mock.oneArg(one));\n        assertEquals(\"2\", mock.oneArg(two));\n        assertEquals(null, mock.oneArg(three));\n    }",
        "begin_line": 508,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 40)",
            "(line 511,col 9)-(line 511,col 40)",
            "(line 512,col 9)-(line 512,col 42)",
            "(line 514,col 9)-(line 514,col 32)",
            "(line 515,col 9)-(line 515,col 31)",
            "(line 516,col 9)-(line 516,col 33)",
            "(line 518,col 9)-(line 518,col 53)",
            "(line 519,col 9)-(line 519,col 53)",
            "(line 521,col 9)-(line 521,col 44)",
            "(line 522,col 9)-(line 522,col 44)",
            "(line 523,col 9)-(line 523,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.eqMatcherAndNulls()",
        "snippet": "    @Test\n    public void eqMatcherAndNulls() {\n        mock.simpleMethod((Object) null);\n\n        verify(mock).simpleMethod((Object) eq(null));\n    }",
        "begin_line": 526,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 528,col 41)",
            "(line 530,col 9)-(line 530,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersTest.java",
        "signature": "org.mockitousage.matchers.MatchersTest.sameMatcherAndNulls()",
        "snippet": "    @Test\n    public void sameMatcherAndNulls() {\n        mock.simpleMethod((Object) null);\n\n        verify(mock).simpleMethod(same(null));\n    }",
        "begin_line": 533,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 41)",
            "(line 537,col 9)-(line 537,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAcceptNullsInAnyMatcher()",
        "snippet": "    @Test\n    public void shouldAcceptNullsInAnyMatcher() {\n        when(mock.oneArg(any())).thenReturn(\"matched\");\n\n        assertEquals(null, mock.forObject(null));\n    }",
        "begin_line": 26,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 55)",
            "(line 30,col 9)-(line 30,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAcceptNullsInAnyObjectMatcher()",
        "snippet": "    @Test\n    public void shouldAcceptNullsInAnyObjectMatcher() {\n        when(mock.oneArg(anyObject())).thenReturn(\"matched\");\n\n        assertEquals(null, mock.forObject(null));\n    }",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 61)",
            "(line 37,col 9)-(line 37,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAnyXMatchers()",
        "snippet": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers() {\n        when(mock.oneArg(anyString())).thenReturn(\"0\");\n        when(mock.forList(anyList())).thenReturn(\"1\");\n        when(mock.forMap(anyMap())).thenReturn(\"2\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"3\");\n        when(mock.forSet(anySet())).thenReturn(\"4\");\n        \n        assertEquals(null, mock.oneArg((Object) null));\n        assertEquals(null, mock.oneArg((String) null));\n        assertEquals(null, mock.forList(null));\n        assertEquals(null, mock.forMap(null));\n        assertEquals(null, mock.forCollection(null));\n        assertEquals(null, mock.forSet(null));\n    }",
        "begin_line": 40,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 55)",
            "(line 43,col 9)-(line 43,col 54)",
            "(line 44,col 9)-(line 44,col 52)",
            "(line 45,col 9)-(line 45,col 66)",
            "(line 46,col 9)-(line 46,col 52)",
            "(line 48,col 9)-(line 48,col 55)",
            "(line 49,col 9)-(line 49,col 55)",
            "(line 50,col 9)-(line 50,col 47)",
            "(line 51,col 9)-(line 51,col 46)",
            "(line 52,col 9)-(line 52,col 53)",
            "(line 53,col 9)-(line 53,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
        "signature": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers()",
        "snippet": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        assertEquals(null, mock.forInteger(null));\n        assertEquals(null, mock.forCharacter(null));\n        assertEquals(null, mock.forShort(null));\n        assertEquals(null, mock.forByte(null));\n        assertEquals(null, mock.forBoolean(null));\n        assertEquals(null, mock.forLong(null));\n        assertEquals(null, mock.forFloat(null));\n        assertEquals(null, mock.forDouble(null));\n    }",
        "begin_line": 56,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 56)",
            "(line 59,col 9)-(line 59,col 59)",
            "(line 60,col 9)-(line 60,col 56)",
            "(line 61,col 9)-(line 61,col 54)",
            "(line 62,col 9)-(line 62,col 60)",
            "(line 63,col 9)-(line 63,col 54)",
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 58)",
            "(line 67,col 9)-(line 67,col 50)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 69,col 9)-(line 69,col 48)",
            "(line 70,col 9)-(line 70,col 47)",
            "(line 71,col 9)-(line 71,col 50)",
            "(line 72,col 9)-(line 72,col 47)",
            "(line 73,col 9)-(line 73,col 48)",
            "(line 74,col 9)-(line 74,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.ContainsX.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object o) {\n            return ((String) o).contains(\"X\");\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.ContainsX.describeTo(org.hamcrest.Description)",
        "snippet": "        public void describeTo(Description d) {\n            d.appendText(\"contains 'X'\");\n        }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 13)-(line 27,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.shouldAcceptHamcrestMatcher()",
        "snippet": "    @Test\n    public void shouldAcceptHamcrestMatcher() {\n        when(mock.simpleMethod(argThat(new ContainsX()))).thenReturn(\"X\");\n        assertNull(mock.simpleMethod(\"blah\"));\n        assertEquals(\"X\", mock.simpleMethod(\"blah X blah\"));\n    }",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 74)",
            "(line 36,col 9)-(line 36,col 46)",
            "(line 37,col 9)-(line 37,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.HamcrestMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/HamcrestMatchersTest.java",
        "signature": "org.mockitousage.matchers.HamcrestMatchersTest.shouldVerifyUsingHamcrestMatcher()",
        "snippet": "    @Test\n    public void shouldVerifyUsingHamcrestMatcher() {\n        mock.simpleMethod(\"blah\");\n        \n        try {\n            verify(mock).simpleMethod(argThat(new ContainsX()));\n            fail();\n        } catch (ArgumentsAreDifferent e) {\n            assertContains(\"contains 'X'\", e.getMessage());\n        }\n    }",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 34)",
            "(line 44,col 9)-(line 49,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java",
        "signature": "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest.shouldAllowMixingRawArgumentsWithMatchers()",
        "snippet": "    @Ignore(\"prototyping new feature that allows to avoid eq() matchers when raw args passed\")\n    @Test\n    public void shouldAllowMixingRawArgumentsWithMatchers() {\n        mock.varargs(\"1\", \"2\", \"3\");\n        verify(mock).varargs(\"1\", anyString(), \"3\");\n        \n        verify(mock).varargs(anyBoolean(), false);\n    }",
        "begin_line": 36,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 36)",
            "(line 40,col 9)-(line 40,col 52)",
            "(line 42,col 9)-(line 42,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Person.Person(java.lang.Integer)",
        "snippet": "        public Person(Integer age) {\n            this.age = age;\n        }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Person.getAge()",
        "snippet": "        public int getAge() {\n            return age;\n        }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 13)-(line 37,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Emailer.Emailer(org.mockitousage.matchers.CapturingArgumentsTest.EmailService)",
        "snippet": "        public Emailer(EmailService service) {\n            this.service = service;\n        }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 13)-(line 46,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.Emailer.email(java.lang.Integer...)",
        "snippet": "        public void email(Integer ... personId) {\n            for (Integer i : personId) {\n                Person person = new Person(i);\n                service.sendEmailTo(person);\n            }\n        }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 13)-(line 53,col 13)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.EmailService.sendEmailTo(org.mockitousage.matchers.CapturingArgumentsTest.Person)",
        "snippet": "        boolean sendEmailTo(Person person);",
        "begin_line": 58,
        "end_line": 58,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_assertions_on_captured_argument()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void should_allow_assertions_on_captured_argument() {\n        //when\n        emailer.email(12);\n        \n        //then\n        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n        verify(emailService).sendEmailTo(argument.capture());\n        \n        assertEquals(12, argument.getValue().getAge());\n    }",
        "begin_line": 64,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 26)",
            "(line 71,col 9)-(line 71,col 71)",
            "(line 72,col 9)-(line 72,col 61)",
            "(line 74,col 9)-(line 74,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_assertions_on_all_captured_arguments()",
        "snippet": "    @Test\n    public void should_allow_assertions_on_all_captured_arguments() {\n        //when\n        emailer.email(11, 12);\n        \n        //then\n        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n        List<Person> allValues = argument.getAllValues();\n        \n        assertEquals(11, allValues.get(0).getAge());\n        assertEquals(12, allValues.get(1).getAge());\n    }",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 30)",
            "(line 83,col 9)-(line 83,col 80)",
            "(line 84,col 9)-(line 84,col 76)",
            "(line 85,col 9)-(line 85,col 57)",
            "(line 87,col 9)-(line 87,col 52)",
            "(line 88,col 9)-(line 88,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_assertions_on_last_argument()",
        "snippet": "    @Test\n    public void should_allow_assertions_on_last_argument() {\n        //when\n        emailer.email(11, 12, 13);\n        \n        //then\n        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n        \n        assertEquals(13, argument.getValue().getAge());\n    }",
        "begin_line": 91,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 97,col 80)",
            "(line 98,col 9)-(line 98,col 76)",
            "(line 100,col 9)-(line 100,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_print_captor_matcher()",
        "snippet": "    @Test\n    public void should_print_captor_matcher() {\n        //given\n        ArgumentCaptor<Person> person = ArgumentCaptor.forClass(Person.class);\n        \n        try {\n            //when\n            verify(emailService).sendEmailTo(person.capture());\n            fail();\n        } catch(WantedButNotInvoked e) {\n            //then\n            assertContains(\"<Capturing argument>\", e.getMessage());\n        }\n    }",
        "begin_line": 103,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 78)",
            "(line 108,col 9)-(line 115,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_assertions_on_captured_null()",
        "snippet": "    @Test\n    public void should_allow_assertions_on_captured_null() {\n        //when\n        emailService.sendEmailTo(null);\n        \n        //then\n        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n        verify(emailService).sendEmailTo(argument.capture());\n        assertEquals(null, argument.getValue());\n    }",
        "begin_line": 118,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 39)",
            "(line 124,col 9)-(line 124,col 80)",
            "(line 125,col 9)-(line 125,col 61)",
            "(line 126,col 9)-(line 126,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_construction_of_captor_for_parameterized_type_in_a_convenient_way()",
        "snippet": "    @Test\n    public void should_allow_construction_of_captor_for_parameterized_type_in_a_convenient_way()  {\n        //the test passes if this expression compiles\n        ArgumentCaptor<List<Person>> argument = ArgumentCaptor.forClass(List.class);\n    }",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 84)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_construction_of_captor_for_a_more_specific_type()",
        "snippet": "    @Test\n    public void should_allow_construction_of_captor_for_a_more_specific_type()  {\n        //the test passes if this expression compiles\n        ArgumentCaptor<List> argument = ArgumentCaptor.forClass(ArrayList.class);\n    }",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 81)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_allow_capturing_for_stubbing()",
        "snippet": "    @Test\n    public void should_allow_capturing_for_stubbing() {\n        //given\n        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n        when(emailService.sendEmailTo(argument.capture())).thenReturn(false);\n        \n        //when\n        emailService.sendEmailTo(new Person(10));\n        \n        //then\n        assertEquals(10, argument.getValue().getAge());\n    }",
        "begin_line": 141,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 80)",
            "(line 145,col 9)-(line 145,col 77)",
            "(line 148,col 9)-(line 148,col 49)",
            "(line 151,col 9)-(line 151,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_when_stubbing_only_when_entire_invocation_matches()",
        "snippet": "    @Test\n    public void should_capture_when_stubbing_only_when_entire_invocation_matches() {\n        //given\n        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);\n        when(mock.simpleMethod(argument.capture(), eq(2))).thenReturn(\"blah\");\n        \n        //when\n        mock.simpleMethod(\"foo\", 200);\n        mock.simpleMethod(\"bar\", 2);\n        \n        //then\n        Assertions.assertThat(argument.getAllValues()).containsOnly(\"bar\");\n    }",
        "begin_line": 154,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 80)",
            "(line 158,col 9)-(line 158,col 78)",
            "(line 161,col 9)-(line 161,col 38)",
            "(line 162,col 9)-(line 162,col 36)",
            "(line 165,col 9)-(line 165,col 75)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_say_something_smart_when_misused()",
        "snippet": "    @Test\n    public void should_say_something_smart_when_misused() {\n        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n        try {\n            argument.getValue();\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 168,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 80)",
            "(line 171,col 9)-(line 174,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_when_full_arg_list_matches()",
        "snippet": "    @Test\n    public void should_capture_when_full_arg_list_matches() throws Exception {\n        //given\n        mock.simpleMethod(\"foo\", 1);\n        mock.simpleMethod(\"bar\", 2);\n        \n        //when\n        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n        verify(mock).simpleMethod(captor.capture(), eq(1));\n        \n        //then\n        assertEquals(1, captor.getAllValues().size());\n        assertEquals(\"foo\", captor.getValue());\n    }",
        "begin_line": 177,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 36)",
            "(line 181,col 9)-(line 181,col 36)",
            "(line 184,col 9)-(line 184,col 78)",
            "(line 185,col 9)-(line 185,col 59)",
            "(line 188,col 9)-(line 188,col 54)",
            "(line 189,col 9)-(line 189,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_int_by_creating_captor_with_primitive_wrapper()",
        "snippet": "    @Test\n    public void should_capture_int_by_creating_captor_with_primitive_wrapper() {\n        //given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(Integer.class);\n\n        //when\n        mock.intArgumentMethod(10);\n        \n        //then\n        verify(mock).intArgumentMethod(argument.capture());\n        assertEquals(10, (int) argument.getValue());\n    }",
        "begin_line": 192,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 45)",
            "(line 196,col 9)-(line 196,col 82)",
            "(line 199,col 9)-(line 199,col 35)",
            "(line 202,col 9)-(line 202,col 59)",
            "(line 203,col 9)-(line 203,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_int_by_creating_captor_with_primitive()",
        "snippet": "    @Test\n    public void should_capture_int_by_creating_captor_with_primitive() throws Exception {\n        //given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(int.class);\n        \n        //when\n        mock.intArgumentMethod(10);\n        \n        //then\n        verify(mock).intArgumentMethod(argument.capture());\n        assertEquals(10, (int) argument.getValue());\n    }",
        "begin_line": 206,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 45)",
            "(line 210,col 9)-(line 210,col 78)",
            "(line 213,col 9)-(line 213,col 35)",
            "(line 216,col 9)-(line 216,col 59)",
            "(line 217,col 9)-(line 217,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_byte_vararg_by_creating_captor_with_primitive()",
        "snippet": "    @Test\n    public void should_capture_byte_vararg_by_creating_captor_with_primitive() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);\n\n        // when\n        mock.varargsbyte((byte) 1, (byte) 2);\n\n        // then\n        verify(mock).varargsbyte(argumentCaptor.capture());\n        assertEquals((byte) 2, (byte) argumentCaptor.getValue());\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);\n    }",
        "begin_line": 220,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 224,col 82)",
            "(line 227,col 9)-(line 227,col 45)",
            "(line 230,col 9)-(line 230,col 59)",
            "(line 231,col 9)-(line 231,col 65)",
            "(line 232,col 9)-(line 232,col 97)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper()",
        "snippet": "    @Test\n    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);\n\n        // when\n        mock.varargsbyte((byte) 1, (byte) 2);\n\n        // then\n        verify(mock).varargsbyte(argumentCaptor.capture());\n        assertEquals((byte) 2, (byte) argumentCaptor.getValue());\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);\n    }",
        "begin_line": 235,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 45)",
            "(line 239,col 9)-(line 239,col 82)",
            "(line 242,col 9)-(line 242,col 45)",
            "(line 245,col 9)-(line 245,col 59)",
            "(line 246,col 9)-(line 246,col 65)",
            "(line 247,col 9)-(line 247,col 97)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_vararg()",
        "snippet": "    @Test\n    public void should_capture_vararg() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n\n        // then\n        verify(mock).mixedVarargs(any(), argumentCaptor.capture());\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");\n    }",
        "begin_line": 250,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 45)",
            "(line 254,col 9)-(line 254,col 86)",
            "(line 257,col 9)-(line 257,col 45)",
            "(line 260,col 9)-(line 260,col 67)",
            "(line 261,col 9)-(line 261,col 92)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_all_vararg()",
        "snippet": "    @Test\n    public void should_capture_all_vararg() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n        mock.mixedVarargs(42, \"again ?!\");\n\n        // then\n        verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());\n\n        List<String> allVarargsValues = argumentCaptor.getAllValues();\n        Assertions.assertThat(allVarargsValues).containsExactly(\"a\", \"b\", \"c\", \"again ?!\");\n    }",
        "begin_line": 264,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 45)",
            "(line 268,col 9)-(line 268,col 86)",
            "(line 271,col 9)-(line 271,col 45)",
            "(line 272,col 9)-(line 272,col 42)",
            "(line 275,col 9)-(line 275,col 77)",
            "(line 277,col 9)-(line 277,col 70)",
            "(line 278,col 9)-(line 278,col 91)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_one_arg_even_when_using_vararg_captor_on_nonvararg_method()",
        "snippet": "    @Test\n    public void should_capture_one_arg_even_when_using_vararg_captor_on_nonvararg_method() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.simpleMethod(\"a\", 2);\n\n        // then\n        verify(mock).simpleMethod(argumentCaptor.capture(), eq(2));\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\");\n    }",
        "begin_line": 281,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 45)",
            "(line 285,col 9)-(line 285,col 86)",
            "(line 288,col 9)-(line 288,col 34)",
            "(line 291,col 9)-(line 291,col 67)",
            "(line 292,col 9)-(line 292,col 82)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "signature": "org.mockitousage.matchers.CapturingArgumentsTest.captures_correclty_when_captor_used_multiple_times()",
        "snippet": "    @Test\n    public void captures_correclty_when_captor_used_multiple_times() throws Exception {\n        // given\n        IMethods mock = mock(IMethods.class);\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n\n        // then\n        // this is only for backwards compatibility. It does not make sense in real to do so.\n        verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");\n    }",
        "begin_line": 295,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 86)",
            "(line 302,col 9)-(line 302,col 45)",
            "(line 306,col 9)-(line 306,col 119)",
            "(line 307,col 9)-(line 307,col 92)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java",
        "signature": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.shouldNotThrowCCE()",
        "snippet": "    @Test\n    public void shouldNotThrowCCE() {\n        mock.simpleMethod(new Object());\n\n        try {\n            // calling overloaded method so that matcher will be called with\n            // different type\n            verify(mock).simpleMethod(argThat(isStringWithTextFoo()));\n            fail();\n        } catch (ArgumentsAreDifferent e) {}\n    }",
        "begin_line": 21,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 40)",
            "(line 25,col 9)-(line 30,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java",
        "signature": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.isStringWithTextFoo()",
        "snippet": "    private ArgumentMatcher<String> isStringWithTextFoo() {\n        return new ArgumentMatcher<String>() {\n            @Override\n            public boolean matches(Object argument) {\n                // casting that should not be thrown:\n                String str = (String) argument;\n                return str.equals(\"foo\");\n            }\n        };\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 41,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java",
        "signature": "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.Anonymous-559b15b6-d9dd-40b8-979e-c480093d93a0.matches(java.lang.Object)",
        "snippet": "            @Override\n            public boolean matches(Object argument) {\n                // casting that should not be thrown:\n                String str = (String) argument;\n                return str.equals(\"foo\");\n            }",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 17)-(line 38,col 47)",
            "(line 39,col 17)-(line 39,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.Parent.Parent(int, java.lang.String)",
        "snippet": "        public Parent(int parentField, String protectedParentField) {\n            this.parentField = parentField;\n            this.protectedParentField = protectedParentField;\n        }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 43)",
            "(line 24,col 13)-(line 24,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.Child.Child(int, java.lang.String, int, java.lang.Object)",
        "snippet": "        public Child(int parentField, String protectedParentField, int childFieldOne, Object childFieldTwo) {\n            super(parentField, protectedParentField);\n            this.childFieldOne = childFieldOne;\n            this.childFieldTwo = childFieldTwo;\n        } ",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 13)-(line 32,col 53)",
            "(line 33,col 13)-(line 33,col 47)",
            "(line 34,col 13)-(line 34,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.MockMe.run(org.mockitousage.matchers.ReflectionMatchersTest.Child)",
        "snippet": "        void run(Child child);",
        "begin_line": 39,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(MockMe.class);\n        \n        Child actual = new Child(1, \"foo\", 2, \"bar\");\n        mock.run(actual);\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 34)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 49,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqual()",
        "snippet": "    @Test\n    public void shouldMatchWhenFieldValuesEqual() throws Exception {\n        Child wanted = new Child(1, \"foo\", 2, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchWhenFieldValuesDiffer()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchWhenFieldValuesDiffer() throws Exception {\n        Child wanted = new Child(1, \"foo\", 2, \"bar XXX\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 57)",
            "(line 61,col 9)-(line 61,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchAgain()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchAgain() throws Exception {\n        Child wanted = new Child(1, \"foo\", 999, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 55)",
            "(line 67,col 9)-(line 67,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchYetAgain()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchYetAgain() throws Exception {\n        Child wanted = new Child(1, \"XXXXX\", 2, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 55)",
            "(line 73,col 9)-(line 73,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatch()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatch() throws Exception {\n        Child wanted = new Child(234234, \"foo\", 2, \"bar\");\n        verify(mock).run(refEq(wanted));\n    }",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqualWithOneFieldExcluded()",
        "snippet": "    @Test\n    public void shouldMatchWhenFieldValuesEqualWithOneFieldExcluded() throws Exception {\n        Child wanted = new Child(1, \"foo\", 2, \"excluded\");\n        verify(mock).run(refEq(wanted, \"childFieldTwo\"));\n    }",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 58)",
            "(line 85,col 9)-(line 85,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded()",
        "snippet": "    @Test\n    public void shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded() throws Exception {\n        Child wanted = new Child(234234, \"foo\", 2, \"excluded\");\n        verify(mock).run(refEq(wanted, \"childFieldTwo\", \"parentField\"));\n        verify(mock).run(refEq(wanted, \"parentField\", \"childFieldTwo\"));\n    }",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 63)",
            "(line 91,col 9)-(line 91,col 72)",
            "(line 92,col 9)-(line 92,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.ReflectionMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/ReflectionMatchersTest.java",
        "signature": "org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchWithFieldsExclusion()",
        "snippet": "    @Test(expected=ArgumentsAreDifferent.class)\n    public void shouldNotMatchWithFieldsExclusion() throws Exception {\n        Child wanted = new Child(234234, \"foo\", 2, \"excluded\");\n        verify(mock).run(refEq(wanted, \"childFieldTwo\"));\n    }    ",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 63)",
            "(line 98,col 9)-(line 98,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.ContainsFoo.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            return ((String) arg).contains(\"foo\");\n        }",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 13)-(line 22,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.IsAnyBoolean.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            return true;\n        }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 28,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.IsSorZ.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            Character character = (Character) arg;\n            return character.equals('s') || character.equals('z');\n        }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 50)",
            "(line 35,col 13)-(line 35,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.IsZeroOrOne.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object arg) {\n            Number number = (Number) arg;\n            if (number.intValue() == 0 || number.intValue() == 1) {\n                return true;\n            }\n            return false;\n        }",
        "begin_line": 40,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 41)",
            "(line 42,col 13)-(line 44,col 13)",
            "(line 45,col 13)-(line 45,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomBooleanMatcher()",
        "snippet": "    @Test\n    public void shouldUseCustomBooleanMatcher() {\n        when(mock.oneArg(booleanThat(new IsAnyBoolean()))).thenReturn(\"foo\");\n        \n        assertEquals(\"foo\", mock.oneArg(true));\n        assertEquals(\"foo\", mock.oneArg(false));\n        \n        assertEquals(null, mock.oneArg(\"x\"));\n    }",
        "begin_line": 56,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 77)",
            "(line 60,col 9)-(line 60,col 47)",
            "(line 61,col 9)-(line 61,col 48)",
            "(line 63,col 9)-(line 63,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomCharMatcher()",
        "snippet": "    @Test\n    public void shouldUseCustomCharMatcher() {\n        when(mock.oneArg(charThat(new IsSorZ()))).thenReturn(\"foo\");\n      \n        assertEquals(\"foo\", mock.oneArg('s'));\n        assertEquals(\"foo\", mock.oneArg('z'));\n        assertEquals(null, mock.oneArg('x'));\n    }",
        "begin_line": 66,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 68)",
            "(line 70,col 9)-(line 70,col 46)",
            "(line 71,col 9)-(line 71,col 46)",
            "(line 72,col 9)-(line 72,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Article.Article(int, java.lang.String)",
        "snippet": "        public Article(int pageNumber, String headline) {\n            super();\n            this.pageNumber = pageNumber;\n            this.headline = headline;\n        }",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 20)",
            "(line 82,col 13)-(line 82,col 41)",
            "(line 83,col 13)-(line 83,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Article.getPageNumber()",
        "snippet": "        public int getPageNumber() {\n            return pageNumber;\n        }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 13)-(line 87,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Article.getHeadline()",
        "snippet": "        public String getHeadline() {\n            return headline;\n        }",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 13)-(line 91,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomPrimitiveNumberMatchers()",
        "snippet": "    @Test\n    public void shouldUseCustomPrimitiveNumberMatchers() {\n        when(mock.oneArg(byteThat(new IsZeroOrOne<Byte>()))).thenReturn(\"byte\");\n        when(mock.oneArg(shortThat(new IsZeroOrOne<Short>()))).thenReturn(\"short\");\n        when(mock.oneArg(intThat(new IsZeroOrOne<Integer>()))).thenReturn(\"int\");\n        when(mock.oneArg(longThat(new IsZeroOrOne<Long>()))).thenReturn(\"long\");\n        when(mock.oneArg(floatThat(new IsZeroOrOne<Float>()))).thenReturn(\"float\");\n        when(mock.oneArg(doubleThat(new IsZeroOrOne<Double>()))).thenReturn(\"double\");\n        \n        assertEquals(\"byte\", mock.oneArg((byte) 0));\n        assertEquals(\"short\", mock.oneArg((short) 1));\n        assertEquals(\"int\", mock.oneArg(0));\n        assertEquals(\"long\", mock.oneArg(1L));\n        assertEquals(\"float\", mock.oneArg(0F));\n        assertEquals(\"double\", mock.oneArg(1.0));\n        \n        assertEquals(null, mock.oneArg(2));\n        assertEquals(null, mock.oneArg(\"foo\"));\n    }",
        "begin_line": 95,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 80)",
            "(line 98,col 9)-(line 98,col 83)",
            "(line 99,col 9)-(line 99,col 81)",
            "(line 100,col 9)-(line 100,col 80)",
            "(line 101,col 9)-(line 101,col 83)",
            "(line 102,col 9)-(line 102,col 86)",
            "(line 104,col 9)-(line 104,col 52)",
            "(line 105,col 9)-(line 105,col 54)",
            "(line 106,col 9)-(line 106,col 44)",
            "(line 107,col 9)-(line 107,col 46)",
            "(line 108,col 9)-(line 108,col 47)",
            "(line 109,col 9)-(line 109,col 49)",
            "(line 111,col 9)-(line 111,col 43)",
            "(line 112,col 9)-(line 112,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomObjectMatcher()",
        "snippet": "    @Test\n    public void shouldUseCustomObjectMatcher() {\n        when(mock.oneArg(argThat(new ContainsFoo()))).thenReturn(\"foo\");\n        \n        assertEquals(\"foo\", mock.oneArg(\"foo\"));\n        assertEquals(null, mock.oneArg(\"bar\"));\n    }",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 72)",
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldCustomMatcherPrintDescriptionBasedOnName()",
        "snippet": "    @Test\n    public void shouldCustomMatcherPrintDescriptionBasedOnName() {\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod(containsTest());\n            fail();\n        } catch (AssertionError e) {\n            assertContains(\"<String that contains xxx>\", e.getMessage());\n        }\n    }",
        "begin_line": 123,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 33)",
            "(line 127,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.containsTest()",
        "snippet": "    private String containsTest() {\n        return argThat(new StringThatContainsXxx());\n    }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.StringThatContainsXxx.matches(java.lang.Object)",
        "snippet": "        public boolean matches(Object argument) {\n            String arg = (String) argument;\n            return arg.contains(\"xxx\");\n        }",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 141,col 13)-(line 141,col 43)",
            "(line 142,col 13)-(line 142,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.shouldAnonymousCustomMatcherPrintDefaultDescription()",
        "snippet": "    @Test\n    public void shouldAnonymousCustomMatcherPrintDefaultDescription() {\n        mock.simpleMethod(\"foo\");\n\n        try {\n            verify(mock).simpleMethod((String) argThat(new ArgumentMatcher<Object>() {\n                @Override public boolean matches(Object argument) {\n                    return false;\n                }}));\n            fail();\n        } catch (AssertionError e) {\n            assertContains(\"<custom argument matcher>\", e.getMessage());\n            assertContains(\"foo\", e.getMessage());\n        }\n    }",
        "begin_line": 146,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 33)",
            "(line 150,col 9)-(line 159,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.matchers.CustomMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/matchers/CustomMatchersTest.java",
        "signature": "org.mockitousage.matchers.CustomMatchersTest.Anonymous-37a02e1d-cf9e-4119-aa6b-d3201c18b211.matches(java.lang.Object)",
        "snippet": "                @Override public boolean matches(Object argument) {\n                    return false;\n                }}));",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 21)-(line 153,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.Foo.len(java.lang.String)",
        "snippet": "        public int len(String text) {\n            return text.length();\n        }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 13)-(line 21,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.Foo.size(java.util.Map)",
        "snippet": "        public int size(Map map) {\n            return map.size();\n        }",
        "begin_line": 24,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 13)-(line 25,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.Foo.size(java.util.Collection)",
        "snippet": "        public int size(Collection collection) {\n            return collection.size();\n        }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 13)-(line 29,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java",
        "signature": "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.shouldNotThrowNPE()",
        "snippet": "    @Test\n    public void shouldNotThrowNPE() throws Exception {\n        Foo foo = new Foo();\n        Foo spy = spy(foo);\n        \n        spy.len(anyString());\n        spy.size(anyMap());\n        spy.size(anyList());\n        spy.size(anyCollection());\n        spy.size(anySet());\n    }",
        "begin_line": 33,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 28)",
            "(line 36,col 9)-(line 36,col 27)",
            "(line 38,col 9)-(line 38,col 29)",
            "(line 39,col 9)-(line 39,col 27)",
            "(line 40,col 9)-(line 40,col 28)",
            "(line 41,col 9)-(line 41,col 34)",
            "(line 42,col 9)-(line 42,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnInterfacesTest.java",
        "signature": "org.mockitousage.spies.SpyingOnInterfacesTest.shouldFailFastWhenCallingRealMethodOnInterface()",
        "snippet": "    @Test\n    public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {\n        List list = mock(List.class);\n        try {\n            //when\n            when(list.get(0)).thenCallRealMethod();\n            //then\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 21,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 37)",
            "(line 24,col 9)-(line 29,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnInterfacesTest.java",
        "signature": "org.mockitousage.spies.SpyingOnInterfacesTest.shouldFailInRuntimeWhenCallingRealMethodOnInterface()",
        "snippet": "    @Test\n    public void shouldFailInRuntimeWhenCallingRealMethodOnInterface() throws Exception {\n        //given\n        List list = mock(List.class);\n        when(list.get(0)).thenAnswer(\n            new Answer() {\n                public Object answer(InvocationOnMock invocation) throws Throwable {\n                    return invocation.callRealMethod();\n                }\n            }\n        );\n        try {\n            //when\n            list.get(0);            \n            //then\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 32,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 37)",
            "(line 36,col 9)-(line 42,col 10)",
            "(line 43,col 9)-(line 48,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnInterfacesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnInterfacesTest.java",
        "signature": "org.mockitousage.spies.SpyingOnInterfacesTest.Anonymous-7cdb1ff2-cc00-4a64-b23f-61d37f905e88.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "                public Object answer(InvocationOnMock invocation) throws Throwable {\n                    return invocation.callRealMethod();\n                }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 21)-(line 39,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.pleaseMakeStackTracesClean()",
        "snippet": "    @Before\n    public void pleaseMakeStackTracesClean() {\n        makeStackTracesClean();\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.InheritMe.getInherited()",
        "snippet": "        protected String getInherited() {\n            return inherited;\n        }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 13)-(line 26,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.getName()",
        "snippet": "        public String getName() {\n            return guessName().name;\n        }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.guessName()",
        "snippet": "        Name guessName() {\n            return defaultName;\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.howMuchDidYouInherit()",
        "snippet": "        public String howMuchDidYouInherit() {\n            return getInherited();\n        }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.getNameButDelegateToMethodThatThrows()",
        "snippet": "        public String getNameButDelegateToMethodThatThrows() {\n            throwSomeException();\n            return guessName().name;\n        }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 13)-(line 46,col 33)",
            "(line 47,col 13)-(line 47,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Person.throwSomeException()",
        "snippet": "        private void throwSomeException() {\n            throw new RuntimeException(\"boo\");\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.Name.Name(java.lang.String)",
        "snippet": "        public Name(String name) {\n            this.name = name;\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldCallRealMethdsEvenDelegatedToOtherSelfMethod()",
        "snippet": "    @Test\n    public void shouldCallRealMethdsEvenDelegatedToOtherSelfMethod() {\n        // when\n        String name = spy.getName();\n\n        // then\n        assertEquals(\"Default name\", name);\n    }",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 36)",
            "(line 71,col 9)-(line 71,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldAllowStubbingOfMethodsThatDelegateToOtherMethods()",
        "snippet": "    @Test\n    public void shouldAllowStubbingOfMethodsThatDelegateToOtherMethods() {\n        // when\n        when(spy.getName()).thenReturn(\"foo\");\n        \n        // then\n        assertEquals(\"foo\", spy.getName());\n    }",
        "begin_line": 74,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 46)",
            "(line 80,col 9)-(line 80,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods()",
        "snippet": "    @Test\n    public void shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods() {\n        // when\n        doThrow(new RuntimeException(\"appetite for destruction\"))\n            .when(spy).getNameButDelegateToMethodThatThrows();\n        \n        // then\n        try {\n            spy.getNameButDelegateToMethodThatThrows();\n            fail();\n        } catch(Exception e) {\n            assertEquals(\"appetite for destruction\", e.getMessage());\n        }\n    }",
        "begin_line": 83,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 87,col 62)",
            "(line 90,col 9)-(line 95,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldStackTraceGetFilteredOnUserExceptions()",
        "snippet": "    @Test\n    public void shouldStackTraceGetFilteredOnUserExceptions() {\n        try {\n            // when\n            spy.getNameButDelegateToMethodThatThrows();\n            fail();\n        } catch (Throwable t) {\n            // then\n            assertThat(t, ExtraMatchers.hasMethodsInStackTrace(\n                    \"throwSomeException\",\n                    \"getNameButDelegateToMethodThatThrows\",\n                    \"shouldStackTraceGetFilteredOnUserExceptions\"\n                    ));\n        }\n    }",
        "begin_line": 98,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 111,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.verifyTheStackTrace()",
        "snippet": "    public void verifyTheStackTrace() {\n        spy.getNameButDelegateToMethodThatThrows();\n    }",
        "begin_line": 115,
        "end_line": 117,
        "comment": "    @Test //manual verification",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() {\n        // when\n        spy.getName();\n\n        // then\n        verify(spy).guessName();\n    }",
        "begin_line": 119,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 22)",
            "(line 125,col 9)-(line 125,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() {\n        // given\n        when(spy.guessName()).thenReturn(new Name(\"John\"));\n        // when\n        String name = spy.getName();\n        // then\n        assertEquals(\"John\", name);\n    }",
        "begin_line": 128,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 59)",
            "(line 133,col 9)-(line 133,col 36)",
            "(line 135,col 9)-(line 135,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.PartialMockingWithSpiesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/PartialMockingWithSpiesTest.java",
        "signature": "org.mockitousage.spies.PartialMockingWithSpiesTest.shouldDealWithPrivateFieldsOfSubclasses()",
        "snippet": "    @Test\n    public void shouldDealWithPrivateFieldsOfSubclasses() {\n        assertEquals(\"100$\", spy.howMuchDidYouInherit());\n    }",
        "begin_line": 138,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerify()",
        "snippet": "    @Test\n    public void shouldVerify() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n\n        assertEquals(\"one\", spy.get(0));\n        assertEquals(\"two\", spy.get(1));\n\n        verify(spy).add(\"one\");\n        verify(spy).add(\"two\");\n    }",
        "begin_line": 30,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 23)",
            "(line 33,col 9)-(line 33,col 23)",
            "(line 35,col 9)-(line 35,col 40)",
            "(line 36,col 9)-(line 36,col 40)",
            "(line 38,col 9)-(line 38,col 31)",
            "(line 39,col 9)-(line 39,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldBeAbleToMockObjectBecauseWhyNot()",
        "snippet": "    @Test\n    public void shouldBeAbleToMockObjectBecauseWhyNot() {\n        spy(new Object());\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() {\n        spy.add(\"one\");\n        when(spy.get(0))\n            .thenReturn(\"1\")\n            .thenReturn(\"1 again\");\n               \n        assertEquals(\"1\", spy.get(0));\n        assertEquals(\"1 again\", spy.get(0));\n        assertEquals(\"one\", spy.iterator().next());\n        \n        assertEquals(1, spy.size());\n    }",
        "begin_line": 47,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 23)",
            "(line 50,col 9)-(line 52,col 35)",
            "(line 54,col 9)-(line 54,col 38)",
            "(line 55,col 9)-(line 55,col 44)",
            "(line 56,col 9)-(line 56,col 51)",
            "(line 58,col 9)-(line 58,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldAllowOverridingStubs()",
        "snippet": "    @Test\n    public void shouldAllowOverridingStubs() {\n        when(spy.contains(anyObject())).thenReturn(true);\n        when(spy.contains(\"foo\")).thenReturn(false);\n        \n        assertTrue(spy.contains(\"bar\"));\n        assertFalse(spy.contains(\"foo\"));\n    }",
        "begin_line": 61,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 57)",
            "(line 64,col 9)-(line 64,col 52)",
            "(line 66,col 9)-(line 66,col 40)",
            "(line 67,col 9)-(line 67,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStubVoid()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test\n    public void shouldStubVoid() {\n        stubVoid(spy)\n            .toReturn()\n            .toThrow(new RuntimeException())\n            .on().clear();\n\n        spy.add(\"one\");\n        spy.clear();\n        try {\n            spy.clear();\n            fail();\n        } catch (RuntimeException e) {}\n            \n        assertEquals(1, spy.size());\n    }",
        "begin_line": 70,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 76,col 26)",
            "(line 78,col 9)-(line 78,col 23)",
            "(line 79,col 9)-(line 79,col 20)",
            "(line 80,col 9)-(line 83,col 39)",
            "(line 85,col 9)-(line 85,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStubWithDoReturnAndVerify()",
        "snippet": "    @Test\n    public void shouldStubWithDoReturnAndVerify() {\n        doReturn(\"foo\")\n        .doReturn(\"bar\")\n        .when(spy).get(0);\n        \n        assertEquals(\"foo\", spy.get(0));\n        assertEquals(\"bar\", spy.get(0));\n        \n        verify(spy, times(2)).get(0);\n        verifyNoMoreInteractions(spy);\n    }",
        "begin_line": 88,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 92,col 26)",
            "(line 94,col 9)-(line 94,col 40)",
            "(line 95,col 9)-(line 95,col 40)",
            "(line 97,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 98,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyInOrder() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        InOrder inOrder = inOrder(spy);\n        inOrder.verify(spy).add(\"one\");\n        inOrder.verify(spy).add(\"two\");\n        \n        verifyNoMoreInteractions(spy);\n    }",
        "begin_line": 101,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 23)",
            "(line 104,col 9)-(line 104,col 23)",
            "(line 106,col 9)-(line 106,col 39)",
            "(line 107,col 9)-(line 107,col 39)",
            "(line 108,col 9)-(line 108,col 39)",
            "(line 110,col 9)-(line 110,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyInOrderAndFail()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAndFail() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        InOrder inOrder = inOrder(spy);\n        inOrder.verify(spy).add(\"two\");\n        try {\n            inOrder.verify(spy).add(\"one\");\n            fail();\n        } catch (VerificationInOrderFailure f) {}\n    }",
        "begin_line": 113,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 23)",
            "(line 116,col 9)-(line 116,col 23)",
            "(line 118,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 119,col 39)",
            "(line 120,col 9)-(line 123,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNumberOfTimes()",
        "snippet": "    @Test\n    public void shouldVerifyNumberOfTimes() {\n        spy.add(\"one\");\n        spy.add(\"one\");\n        \n        verify(spy, times(2)).add(\"one\");\n        verifyNoMoreInteractions(spy);\n    }",
        "begin_line": 126,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 23)",
            "(line 129,col 9)-(line 129,col 23)",
            "(line 131,col 9)-(line 131,col 41)",
            "(line 132,col 9)-(line 132,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNumberOfTimesAndFail()",
        "snippet": "    @Test\n    public void shouldVerifyNumberOfTimesAndFail() {\n        spy.add(\"one\");\n        spy.add(\"one\");\n        \n        try {\n            verify(spy, times(3)).add(\"one\");\n            fail();\n        } catch (TooLittleActualInvocations e) {}\n    }",
        "begin_line": 135,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 23)",
            "(line 138,col 9)-(line 138,col 23)",
            "(line 140,col 9)-(line 143,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNoMoreInteractionsAndFail()",
        "snippet": "    @Test\n    public void shouldVerifyNoMoreInteractionsAndFail() {\n        spy.add(\"one\");\n        spy.add(\"two\");\n        \n        verify(spy).add(\"one\");\n        try {\n            verifyNoMoreInteractions(spy);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 146,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 23)",
            "(line 149,col 9)-(line 149,col 23)",
            "(line 151,col 9)-(line 151,col 31)",
            "(line 152,col 9)-(line 155,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldToString()",
        "snippet": "    @Test\n    public void shouldToString() {\n        spy.add(\"foo\");\n        assertEquals(\"[foo]\" , spy.toString());\n    }",
        "begin_line": 158,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 23)",
            "(line 161,col 9)-(line 161,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.Foo.print()",
        "snippet": "        String print();",
        "begin_line": 165,
        "end_line": 165,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldAllowSpyingAnonymousClasses()",
        "snippet": "    @Test\n    public void shouldAllowSpyingAnonymousClasses() {\n        //when\n        Foo spy = spy(new Foo() {\n            public String print() {\n                return \"foo\";\n            }\n        });\n\n        //then\n        assertEquals(\"foo\", spy.print());\n    }",
        "begin_line": 168,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 175,col 11)",
            "(line 178,col 9)-(line 178,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.Anonymous-7c23f26a-7f78-4544-90d4-9d3c9b7507c5.print()",
        "snippet": "            public String print() {\n                return \"foo\";\n            }",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 173,col 17)-(line 173,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.spies.SpyingOnRealObjectsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/spies/SpyingOnRealObjectsTest.java",
        "signature": "org.mockitousage.spies.SpyingOnRealObjectsTest.shouldSayNiceMessageWhenSpyingOnPrivateClass()",
        "snippet": "    @Test\n    public void shouldSayNiceMessageWhenSpyingOnPrivateClass() throws Exception {\n        List real = Arrays.asList(\"first\", \"second\");\n        try {\n            spy(real);\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"Most likely it is a private class that is not visible by Mockito\", e.getMessage());\n        }\n    }",
        "begin_line": 181,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 53)",
            "(line 184,col 9)-(line 189,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithAdditionalAnswers",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java",
        "signature": "org.mockitousage.stubbing.StubbingWithAdditionalAnswers.can_return_arguments_of_invocation()",
        "snippet": "    @Test\n    public void can_return_arguments_of_invocation() throws Exception {\n        given(iMethods.objectArgMethod(anyObject())).will(returnsFirstArg());\n        given(iMethods.threeArgumentMethod(eq(0), anyObject(), anyString())).will(returnsSecondArg());\n        given(iMethods.threeArgumentMethod(eq(1), anyObject(), anyString())).will(returnsLastArg());\n\n        assertThat(iMethods.objectArgMethod(\"first\")).isEqualTo(\"first\");\n        assertThat(iMethods.threeArgumentMethod(0, \"second\", \"whatever\")).isEqualTo(\"second\");\n        assertThat(iMethods.threeArgumentMethod(1, \"whatever\", \"last\")).isEqualTo(\"last\");\n    }",
        "begin_line": 30,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 77)",
            "(line 33,col 9)-(line 33,col 102)",
            "(line 34,col 9)-(line 34,col 100)",
            "(line 36,col 9)-(line 36,col 73)",
            "(line 37,col 9)-(line 37,col 94)",
            "(line 38,col 9)-(line 38,col 90)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithAdditionalAnswers",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java",
        "signature": "org.mockitousage.stubbing.StubbingWithAdditionalAnswers.can_return_expanded_arguments_of_invocation()",
        "snippet": "    @Test\n    public void can_return_expanded_arguments_of_invocation() throws Exception {\n        given(iMethods.varargsObject(eq(1), anyVararg())).will(returnsArgAt(3));\n\n        assertThat(iMethods.varargsObject(1, \"bob\", \"alexander\", \"alice\", \"carl\")).isEqualTo(\"alice\");\n    }",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 80)",
            "(line 45,col 9)-(line 45,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithAdditionalAnswers",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java",
        "signature": "org.mockitousage.stubbing.StubbingWithAdditionalAnswers.can_return_primitives_or_wrappers()",
        "snippet": "    @Test\n    public void can_return_primitives_or_wrappers() throws Exception {\n        given(iMethods.toIntPrimitive(anyInt())).will(returnsFirstArg());\n        given(iMethods.toIntWrapper(anyInt())).will(returnsFirstArg());\n\n        assertThat(iMethods.toIntPrimitive(1)).isEqualTo(1);\n        assertThat(iMethods.toIntWrapper(1)).isEqualTo(1);\n    }",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 73)",
            "(line 51,col 9)-(line 51,col 71)",
            "(line 53,col 9)-(line 53,col 60)",
            "(line 54,col 9)-(line 54,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.setup()",
        "snippet": "    @Before \n    public void setup() {\n        mock = mock(LinkedList.class);\n        mockTwo = mock(HashMap.class);\n    }",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 38)",
            "(line 33,col 9)-(line 33,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubWithThrowable()",
        "snippet": "    @Test\n    public void shouldStubWithThrowable() throws Exception {\n        IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n        when(mock.add(\"throw\")).thenThrow(expected);\n        \n        try {\n            mock.add(\"throw\");\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertEquals(expected, e);\n        }\n    }",
        "begin_line": 36,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 91)",
            "(line 39,col 9)-(line 39,col 52)",
            "(line 41,col 9)-(line 46,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldSetThrowableToVoidMethod()",
        "snippet": "    @Test\n    public void shouldSetThrowableToVoidMethod() throws Exception {\n        IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n        \n        stubVoid(mock).toThrow(expected).on().clear();\n        try {\n            mock.clear();\n            fail();\n        } catch (Exception e) {\n            assertEquals(expected, e);\n        }\n    } ",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 91)",
            "(line 53,col 9)-(line 53,col 54)",
            "(line 54,col 9)-(line 59,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldLastStubbingVoidBeImportant()",
        "snippet": "    @Test\n    public void shouldLastStubbingVoidBeImportant() throws Exception {\n        stubVoid(mock).toThrow(new ExceptionOne()).on().clear();\n        stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();\n        \n        try {\n            mock.clear();\n            fail();\n        } catch (ExceptionTwo e) {}\n    }",
        "begin_line": 62,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 64)",
            "(line 65,col 9)-(line 65,col 64)",
            "(line 67,col 9)-(line 70,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation()",
        "snippet": "    @Test\n    public void shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation() throws Exception {\n        when(mock.get(1)).thenThrow(new ExceptionOne());\n        \n        try {\n            when(mock.get(1)).thenThrow(new ExceptionTwo());\n            fail();\n        } catch (ExceptionOne e) {}\n    }   ",
        "begin_line": 73,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 56)",
            "(line 77,col 9)-(line 80,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldAllowSettingCheckedException()",
        "snippet": "    @Test\n    public void shouldAllowSettingCheckedException() throws Exception {\n        Reader reader = mock(Reader.class);\n        IOException ioException = new IOException();\n        \n        when(reader.read()).thenThrow(ioException);\n        \n        try {\n            reader.read();\n            fail();\n        } catch (Exception e) {\n            assertEquals(ioException, e);\n        }\n    }",
        "begin_line": 83,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 43)",
            "(line 86,col 9)-(line 86,col 52)",
            "(line 88,col 9)-(line 88,col 51)",
            "(line 90,col 9)-(line 95,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldAllowSettingError()",
        "snippet": "    @Test\n    public void shouldAllowSettingError() throws Exception {\n        Error error = new Error();\n        \n        when(mock.add(\"quake\")).thenThrow(error);\n        \n        try {\n            mock.add(\"quake\");\n            fail();\n        } catch (Error e) {\n            assertEquals(error, e);\n        }\n    }",
        "begin_line": 98,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 49)",
            "(line 104,col 9)-(line 109,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldInstantiateExceptionClassOnInteraction()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void shouldInstantiateExceptionClassOnInteraction() {\n        when(mock.add(null)).thenThrow(IllegalArgumentException.class);\n\n        mock.add(null);\n    }",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 71)",
            "(line 117,col 9)-(line 117,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldInstantiateExceptionClassWithOngoingStubbingOnInteraction()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void shouldInstantiateExceptionClassWithOngoingStubbingOnInteraction() {\n        Mockito.doThrow(IllegalArgumentException.class).when(mock).add(null);\n\n        mock.add(null);\n    }",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 77)",
            "(line 124,col 9)-(line 124,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingInvalidCheckedException()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n        when(mock.add(\"monkey island\")).thenThrow(new Exception());\n    }",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingNullThrowable()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowable() throws Exception {\n        when(mock.add(\"monkey island\")).thenThrow((Throwable) null);\n    }",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingNullThrowableArray()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullThrowableArray() throws Exception {\n        when(mock.add(\"monkey island\")).thenThrow((Throwable[]) null);\n    }",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldMixThrowablesAndReturnsOnDifferentMocks()",
        "snippet": "    @Test\n    public void shouldMixThrowablesAndReturnsOnDifferentMocks() throws Exception {\n        when(mock.add(\"ExceptionOne\")).thenThrow(new ExceptionOne());\n        when(mock.getLast()).thenReturn(\"last\");\n        stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();\n        \n        stubVoid(mockTwo).toThrow(new ExceptionThree()).on().clear();\n        when(mockTwo.containsValue(\"ExceptionFour\")).thenThrow(new ExceptionFour());\n        when(mockTwo.get(\"Are you there?\")).thenReturn(\"Yes!\");\n\n        assertNull(mockTwo.get(\"foo\"));\n        assertTrue(mockTwo.keySet().isEmpty());\n        assertEquals(\"Yes!\", mockTwo.get(\"Are you there?\"));\n        try {\n            mockTwo.clear();\n            fail();\n        } catch (ExceptionThree e) {}\n        try {\n            mockTwo.containsValue(\"ExceptionFour\");\n            fail();\n        } catch (ExceptionFour e) {}\n        \n        assertNull(mock.getFirst());\n        assertEquals(\"last\", mock.getLast());\n        try {\n            mock.add(\"ExceptionOne\");\n            fail();\n        } catch (ExceptionOne e) {}\n        try {\n            mock.clear();\n            fail();\n        } catch (ExceptionTwo e) {}\n    }",
        "begin_line": 142,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 69)",
            "(line 145,col 9)-(line 145,col 48)",
            "(line 146,col 9)-(line 146,col 64)",
            "(line 148,col 9)-(line 148,col 69)",
            "(line 149,col 9)-(line 149,col 84)",
            "(line 150,col 9)-(line 150,col 63)",
            "(line 152,col 9)-(line 152,col 39)",
            "(line 153,col 9)-(line 153,col 47)",
            "(line 154,col 9)-(line 154,col 60)",
            "(line 155,col 9)-(line 158,col 37)",
            "(line 159,col 9)-(line 162,col 36)",
            "(line 164,col 9)-(line 164,col 36)",
            "(line 165,col 9)-(line 165,col 45)",
            "(line 166,col 9)-(line 169,col 35)",
            "(line 170,col 9)-(line 173,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubbingWithThrowableBeVerifiable()",
        "snippet": "    @Test\n    public void shouldStubbingWithThrowableBeVerifiable() {\n        when(mock.size()).thenThrow(new RuntimeException());\n        stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n        \n        try {\n            mock.size();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        try {\n            mock.clone();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        verify(mock).size();\n        verify(mock).clone();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 176,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 60)",
            "(line 179,col 9)-(line 179,col 68)",
            "(line 181,col 9)-(line 184,col 39)",
            "(line 186,col 9)-(line 189,col 39)",
            "(line 191,col 9)-(line 191,col 28)",
            "(line 192,col 9)-(line 192,col 29)",
            "(line 193,col 9)-(line 193,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubbingWithThrowableFailVerification()",
        "snippet": "    @Test\n    public void shouldStubbingWithThrowableFailVerification() {\n        when(mock.size()).thenThrow(new RuntimeException());\n        stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n        \n        verifyZeroInteractions(mock);\n        \n        mock.add(\"test\");\n        \n        try {\n            verify(mock).size();\n            fail();\n        } catch (WantedButNotInvoked e) {}\n        \n        try {\n            verify(mock).clone();\n            fail();\n        } catch (WantedButNotInvoked e) {}\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 196,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 60)",
            "(line 199,col 9)-(line 199,col 68)",
            "(line 201,col 9)-(line 201,col 37)",
            "(line 203,col 9)-(line 203,col 25)",
            "(line 205,col 9)-(line 208,col 42)",
            "(line 210,col 9)-(line 213,col 42)",
            "(line 215,col 9)-(line 218,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.NaughtyException.NaughtyException()",
        "snippet": "        public NaughtyException() {\n            throw new RuntimeException(\"boo!\");\n        }",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 228,col 13)-(line 228,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldShowDecentMessageWhenExcepionIsNaughty()",
        "snippet": "    @Test(expected = NaughtyException.class)\n    public void shouldShowDecentMessageWhenExcepionIsNaughty() throws Exception {\n        when(mock.add(\"\")).thenThrow(NaughtyException.class);\n        mock.add(\"\");\n    }",
        "begin_line": 232,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 61)",
            "(line 235,col 9)-(line 235,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithExtraAnswersTest.shouldWorkAsStandardMockito()",
        "snippet": "    @Test\n    public void shouldWorkAsStandardMockito() throws Exception {\n        //when\n        List<Integer> list = asList(1, 2, 3);\n        when(mock.objectReturningMethodNoArgs()).thenAnswer(new ReturnsElementsOf(list));\n        \n        //then\n        assertEquals(1, mock.objectReturningMethodNoArgs());\n        assertEquals(2, mock.objectReturningMethodNoArgs());\n        assertEquals(3, mock.objectReturningMethodNoArgs());\n        //last element is returned continuously\n        assertEquals(3, mock.objectReturningMethodNoArgs());\n        assertEquals(3, mock.objectReturningMethodNoArgs());\n    }",
        "begin_line": 24,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 45)",
            "(line 28,col 9)-(line 28,col 89)",
            "(line 31,col 9)-(line 31,col 60)",
            "(line 32,col 9)-(line 32,col 60)",
            "(line 33,col 9)-(line 33,col 60)",
            "(line 35,col 9)-(line 35,col 60)",
            "(line 36,col 9)-(line 36,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithExtraAnswersTest.shouldReturnNullIfNecessary()",
        "snippet": "    @Test\n    public void shouldReturnNullIfNecessary() throws Exception {\n        //when\n        List<Integer> list = asList(1, null);\n        when(mock.objectReturningMethodNoArgs()).thenAnswer(new ReturnsElementsOf(list));\n        \n        //then\n        assertEquals(1, mock.objectReturningMethodNoArgs());\n        assertEquals(null, mock.objectReturningMethodNoArgs());\n        assertEquals(null, mock.objectReturningMethodNoArgs());\n    }",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 45)",
            "(line 43,col 9)-(line 43,col 89)",
            "(line 46,col 9)-(line 46,col 60)",
            "(line 47,col 9)-(line 47,col 63)",
            "(line 48,col 9)-(line 48,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithExtraAnswersTest.shouldScreamWhenNullPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassed() throws Exception {\n        try {\n            //when\n            new ReturnsElementsOf(null);\n            //then\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 51,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 58,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnAllKindsOfPrimitives()",
        "snippet": "    @Test\n    public void shouldReturnAllKindsOfPrimitives() throws Exception {\n        assertEquals((byte) 0, mock.byteReturningMethod());\n        assertEquals((short) 0, mock.shortReturningMethod());\n        assertEquals(0, mock.intReturningMethod());\n        assertEquals(0L, mock.longReturningMethod());\n        assertEquals(0.0F, mock.floatReturningMethod(), 0.0F);\n        assertEquals(0.0D, mock.doubleReturningMethod(), 0.0D);\n        assertEquals((char) 0, mock.charReturningMethod());\n        assertEquals(false, mock.booleanReturningMethod());\n        assertEquals(null, mock.objectReturningMethod());\n    }",
        "begin_line": 23,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 59)",
            "(line 26,col 9)-(line 26,col 61)",
            "(line 27,col 9)-(line 27,col 51)",
            "(line 28,col 9)-(line 28,col 53)",
            "(line 29,col 9)-(line 29,col 62)",
            "(line 30,col 9)-(line 30,col 63)",
            "(line 31,col 9)-(line 31,col 59)",
            "(line 32,col 9)-(line 32,col 59)",
            "(line 33,col 9)-(line 33,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnTheSameValuesForWrapperClasses()",
        "snippet": "    @Test\n    public void shouldReturnTheSameValuesForWrapperClasses() throws Exception {\n        assertEquals(new Byte((byte) 0), mock.byteObjectReturningMethod());\n        assertEquals(new Short((short) 0), mock.shortObjectReturningMethod());\n        assertEquals(new Integer(0), mock.integerReturningMethod());\n        assertEquals(new Long(0L), mock.longObjectReturningMethod());\n        assertEquals(new Float(0.0F), mock.floatObjectReturningMethod(), 0.0F);\n        assertEquals(new Double(0.0D), mock.doubleObjectReturningMethod(), 0.0D);\n        assertEquals(new Character((char) 0), mock.charObjectReturningMethod());\n        assertEquals(new Boolean(false), mock.booleanObjectReturningMethod());\n    }",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 75)",
            "(line 39,col 9)-(line 39,col 78)",
            "(line 40,col 9)-(line 40,col 68)",
            "(line 41,col 9)-(line 41,col 69)",
            "(line 42,col 9)-(line 42,col 79)",
            "(line 43,col 9)-(line 43,col 81)",
            "(line 44,col 9)-(line 44,col 80)",
            "(line 45,col 9)-(line 45,col 78)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnEmptyCollections()",
        "snippet": "    @Test \n    public void shouldReturnEmptyCollections() {\n        CollectionsServer mock = Mockito.mock(CollectionsServer.class);\n        \n        assertTrue(mock.list().isEmpty());\n        assertTrue(mock.linkedList().isEmpty());\n        assertTrue(mock.map().isEmpty());\n        assertTrue(mock.hashSet().isEmpty());\n    }",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 71)",
            "(line 52,col 9)-(line 52,col 42)",
            "(line 53,col 9)-(line 53,col 48)",
            "(line 54,col 9)-(line 54,col 41)",
            "(line 55,col 9)-(line 55,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnMutableEmptyCollection()",
        "snippet": "    @Test \n    public void shouldReturnMutableEmptyCollection() {\n        CollectionsServer mock = Mockito.mock(CollectionsServer.class);\n        \n        List list = mock.list();\n        list.add(\"test\");\n       \n        assertTrue(mock.list().isEmpty());\n    }",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 71)",
            "(line 62,col 9)-(line 62,col 32)",
            "(line 63,col 9)-(line 63,col 25)",
            "(line 65,col 9)-(line 65,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.list()",
        "snippet": "        List list() {\n            return null;\n        }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.linkedList()",
        "snippet": "        LinkedList linkedList() {\n            return null;\n        }",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 13)-(line 74,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.map()",
        "snippet": "        Map map() {\n            return null;\n        }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 13)-(line 78,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.ReturningDefaultValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java",
        "signature": "org.mockitousage.stubbing.ReturningDefaultValuesTest.CollectionsServer.hashSet()",
        "snippet": "        java.util.HashSet hashSet() {\n            return null;\n        }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 13)-(line 82,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.TestedObject.setValue(java.lang.String)",
        "snippet": "        void setValue(String value) {\n            this.value = value;\n        }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 13)-(line 23,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.TestedObject.getValue()",
        "snippet": "        String getValue() {\n            return \"HARD_CODED_RETURN_VALUE\";\n        }",
        "begin_line": 26,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 13)-(line 27,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.TestedObject.callInternalMethod()",
        "snippet": "        String callInternalMethod() {\n            return getValue();\n        }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 13)-(line 31,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldAllowCallingInternalMethod()",
        "snippet": "    @Test\n    public void shouldAllowCallingInternalMethod() {\n        when(mock.getValue()).thenReturn(\"foo\");\n        when(mock.callInternalMethod()).thenCallRealMethod();\n        \n        assertEquals(\"foo\", mock.callInternalMethod());\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 61)",
            "(line 40,col 9)-(line 40,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldReturnRealValue()",
        "snippet": "    @Test\n    public void shouldReturnRealValue() {\n        when(mock.getValue()).thenCallRealMethod();\n\n        Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 51)",
            "(line 47,col 9)-(line 47,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldExecuteRealMethod()",
        "snippet": "    @Test\n    public void shouldExecuteRealMethod() {\n        doCallRealMethod().when(mock).setValue(anyString());\n\n        mock.setValue(\"REAL_VALUE\");\n\n        Assert.assertEquals(\"REAL_VALUE\", mock.value);\n    }",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 60)",
            "(line 54,col 9)-(line 54,col 36)",
            "(line 56,col 9)-(line 56,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldCallRealMethodByDefault()",
        "snippet": "    @Test\n    public void shouldCallRealMethodByDefault() {\n        TestedObject mock = mock(TestedObject.class, CALLS_REAL_METHODS);\n\n        Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\n    }",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 73)",
            "(line 63,col 9)-(line 63,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CallingRealMethodTest.java",
        "signature": "org.mockitousage.stubbing.CallingRealMethodTest.shouldNotCallRealMethodWhenStubbedLater()",
        "snippet": "    @Test\n    public void shouldNotCallRealMethodWhenStubbedLater() {\n        TestedObject mock = mock(TestedObject.class);\n\n        when(mock.getValue()).thenCallRealMethod();\n        when(mock.getValue()).thenReturn(\"FAKE_VALUE\");\n\n        Assert.assertEquals(\"FAKE_VALUE\", mock.getValue());\n    }",
        "begin_line": 66,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 53)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 55)",
            "(line 73,col 9)-(line 73,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswer()",
        "snippet": "    @Test\n    public void shouldAnswer() throws Exception {\n        when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                String arg = (String) invocation.getArguments()[0];\n\n                return invocation.getMethod().getName() + \"-\" + arg;\n            }\n        });\n\n        assertEquals(\"simpleMethod-test\", mock.simpleMethod(\"test\"));\n    }",
        "begin_line": 27,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 35,col 11)",
            "(line 37,col 9)-(line 37,col 69)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-4f7f762b-585c-4e75-8db2-d05c3351d7c0.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                String arg = (String) invocation.getArguments()[0];\n\n                return invocation.getMethod().getName() + \"-\" + arg;\n            }",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 31,col 17)-(line 31,col 67)",
            "(line 33,col 17)-(line 33,col 68)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerWithThenAnswerAlias()",
        "snippet": "    @Test\n    public void shouldAnswerWithThenAnswerAlias() throws Exception {\n        RecordCall recordCall = new RecordCall();\n        Set mockedSet = when(mock(Set.class).isEmpty()).then(recordCall).getMock();\n\n        mockedSet.isEmpty();\n\n        assertTrue(recordCall.isCalled());\n    }",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 49)",
            "(line 43,col 9)-(line 43,col 83)",
            "(line 45,col 9)-(line 45,col 28)",
            "(line 47,col 9)-(line 47,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerConsecutively()",
        "snippet": "    @Test\n    public void shouldAnswerConsecutively() throws Exception {\n        when(mock.simpleMethod())\n                .thenAnswer(new Answer<String>() {\n                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName();\n                    }\n                })\n                .thenReturn(\"Hello\")\n                .thenAnswer(new Answer<String>() {\n                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName() + \"-1\";\n                    }\n                });\n\n        assertEquals(\"simpleMethod\", mock.simpleMethod());\n        assertEquals(\"Hello\", mock.simpleMethod());\n        assertEquals(\"simpleMethod-1\", mock.simpleMethod());\n        assertEquals(\"simpleMethod-1\", mock.simpleMethod());\n    }",
        "begin_line": 50,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 63,col 19)",
            "(line 65,col 9)-(line 65,col 58)",
            "(line 66,col 9)-(line 66,col 51)",
            "(line 67,col 9)-(line 67,col 60)",
            "(line 68,col 9)-(line 68,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-d9be4c2b-6778-462d-9835-34216f129435.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName() + \"-1\";\n                    }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 25)-(line 61,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-8a66ecf0-eeee-415b-99d2-ddd05cbd4aaa.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "                    public String answer(InvocationOnMock invocation) throws Throwable {\n                        return invocation.getMethod().getName();\n                    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 25)-(line 55,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shoudAnswerVoidMethod()",
        "snippet": "    @Test\n    public void shoudAnswerVoidMethod() throws Exception {\n        RecordCall recordCall = new RecordCall();\n\n        stubVoid(mock).toAnswer(recordCall).on().voidMethod();\n\n        mock.voidMethod();\n        assertTrue(recordCall.isCalled());\n    }",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 49)",
            "(line 75,col 9)-(line 75,col 62)",
            "(line 77,col 9)-(line 77,col 26)",
            "(line 78,col 9)-(line 78,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerVoidMethodConsecutively()",
        "snippet": "    @Test\n    public void shouldAnswerVoidMethodConsecutively() throws Exception {\n        RecordCall call1 = new RecordCall();\n        RecordCall call2 = new RecordCall();\n\n        stubVoid(mock).toAnswer(call1)\n                .toThrow(new UnsupportedOperationException())\n                .toAnswer(call2)\n                .on().voidMethod();\n\n        mock.voidMethod();\n        assertTrue(call1.isCalled());\n        assertFalse(call2.isCalled());\n\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (UnsupportedOperationException e) {\n        }\n\n        mock.voidMethod();\n        assertTrue(call2.isCalled());\n    }",
        "begin_line": 81,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 44)",
            "(line 84,col 9)-(line 84,col 44)",
            "(line 86,col 9)-(line 89,col 35)",
            "(line 91,col 9)-(line 91,col 26)",
            "(line 92,col 9)-(line 92,col 37)",
            "(line 93,col 9)-(line 93,col 38)",
            "(line 95,col 9)-(line 99,col 9)",
            "(line 101,col 9)-(line 101,col 26)",
            "(line 102,col 9)-(line 102,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldMakeSureTheInterfaceDoesNotChange()",
        "snippet": "    @Test\n    public void shouldMakeSureTheInterfaceDoesNotChange() throws Exception {\n        when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                assertTrue(invocation.getArguments().getClass().isArray());\n                assertEquals(Method.class, invocation.getMethod().getClass());\n\n                return \"assertions passed\";\n            }\n        });\n\n        assertEquals(\"assertions passed\", mock.simpleMethod(\"test\"));\n    }",
        "begin_line": 105,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 114,col 11)",
            "(line 116,col 9)-(line 116,col 69)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.Anonymous-4e23e8c1-62a4-4f84-a804-731c7606a171.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                assertTrue(invocation.getArguments().getClass().isArray());\n                assertEquals(Method.class, invocation.getMethod().getClass());\n\n                return \"assertions passed\";\n            }",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 17)-(line 109,col 75)",
            "(line 110,col 17)-(line 110,col 78)",
            "(line 112,col 17)-(line 112,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.RecordCall.isCalled()",
        "snippet": "        public boolean isCalled() {\n            return called;\n        }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 13)-(line 123,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithCustomAnswerTest.RecordCall.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "        public Object answer(InvocationOnMock invocation) throws Throwable {\n            called = true;\n            return null;\n        }",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 127,col 13)-(line 127,col 26)",
            "(line 128,col 13)-(line 128,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValues()",
        "snippet": "    @Test\n    public void shouldReturnConsecutiveValues() throws Exception {\n        when(mock.simpleMethod())\n            .thenReturn(\"one\")\n            .thenReturn(\"two\")\n            .thenReturn(\"three\");\n        \n        assertEquals(\"one\", mock.simpleMethod());\n        assertEquals(\"two\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n    }",
        "begin_line": 21,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 26,col 33)",
            "(line 28,col 9)-(line 28,col 49)",
            "(line 29,col 9)-(line 29,col 49)",
            "(line 30,col 9)-(line 30,col 51)",
            "(line 31,col 9)-(line 31,col 51)",
            "(line 32,col 9)-(line 32,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValuesForTwoNulls()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test\n    public void shouldReturnConsecutiveValuesForTwoNulls() throws Exception {\n        when(mock.simpleMethod()).thenReturn(null, (String[])null);\n        \n        assertNull(mock.simpleMethod());        \n        assertNull(mock.simpleMethod());        \n    }",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 67)",
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValuesSetByShortenThenReturnMethod()",
        "snippet": "    @Test\n    public void shouldReturnConsecutiveValuesSetByShortenThenReturnMethod() throws Exception {        \n        when(mock.simpleMethod())\n            .thenReturn(\"one\", \"two\", \"three\");\n        \n        assertEquals(\"one\", mock.simpleMethod());\n        assertEquals(\"two\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n        assertEquals(\"three\", mock.simpleMethod());\n    }",
        "begin_line": 44,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 47,col 47)",
            "(line 49,col 9)-(line 49,col 49)",
            "(line 50,col 9)-(line 50,col 49)",
            "(line 51,col 9)-(line 51,col 51)",
            "(line 52,col 9)-(line 52,col 51)",
            "(line 53,col 9)-(line 53,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods()",
        "snippet": "    @Test\n    public void shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods()\n            throws Exception {\n        when(mock.simpleMethod())\n            .thenReturn(\"zero\")\n            .thenReturn(\"one\", \"two\")\n            .thenThrow(new NullPointerException(), new RuntimeException())\n            .thenReturn(\"three\")\n            .thenThrow(new IllegalArgumentException());\n\n        assertEquals(\"zero\", mock.simpleMethod());\n        assertEquals(\"one\", mock.simpleMethod());\n        assertEquals(\"two\", mock.simpleMethod());\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        assertEquals(\"three\", mock.simpleMethod());\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n    }",
        "begin_line": 56,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 64,col 55)",
            "(line 66,col 9)-(line 66,col 50)",
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 72,col 43)",
            "(line 73,col 9)-(line 76,col 39)",
            "(line 77,col 9)-(line 77,col 51)",
            "(line 78,col 9)-(line 81,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldThrowConsecutively()",
        "snippet": "    @Test\n    public void shouldThrowConsecutively() throws Exception {\n        when(mock.simpleMethod())\n            .thenThrow(new RuntimeException())\n            .thenThrow(new IllegalArgumentException())\n            .thenThrow(new NullPointerException());\n\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n    }",
        "begin_line": 84,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 89,col 51)",
            "(line 91,col 9)-(line 94,col 39)",
            "(line 96,col 9)-(line 99,col 47)",
            "(line 101,col 9)-(line 104,col 43)",
            "(line 106,col 9)-(line 109,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldThrowConsecutivelySetByShortenThenThrowMethod()",
        "snippet": "    @Test\n    public void shouldThrowConsecutivelySetByShortenThenThrowMethod() throws Exception {\n        when(mock.simpleMethod())\n            .thenThrow(new RuntimeException(), new IllegalArgumentException(), new NullPointerException());\n\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n    }",
        "begin_line": 112,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 115,col 107)",
            "(line 117,col 9)-(line 120,col 39)",
            "(line 122,col 9)-(line 125,col 47)",
            "(line 127,col 9)-(line 130,col 43)",
            "(line 132,col 9)-(line 135,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldMixConsecutiveReturnsWithExcepions()",
        "snippet": "    @Test\n    public void shouldMixConsecutiveReturnsWithExcepions() throws Exception {\n        when(mock.simpleMethod())\n            .thenThrow(new IllegalArgumentException())\n            .thenReturn(\"one\")\n            .thenThrow(new NullPointerException())\n            .thenReturn(null);\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        assertEquals(\"one\", mock.simpleMethod());\n        \n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        assertEquals(null, mock.simpleMethod());\n        assertEquals(null, mock.simpleMethod());\n    }",
        "begin_line": 138,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 144,col 30)",
            "(line 146,col 9)-(line 149,col 47)",
            "(line 151,col 9)-(line 151,col 49)",
            "(line 153,col 9)-(line 156,col 43)",
            "(line 158,col 9)-(line 158,col 48)",
            "(line 159,col 9)-(line 159,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldValidateConsecutiveException()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldValidateConsecutiveException() throws Exception {\n        when(mock.simpleMethod())\n            .thenReturn(\"one\")\n            .thenThrow(new Exception());\n    }",
        "begin_line": 162,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 166,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldStubVoidMethodAndContinueThrowing()",
        "snippet": "    @Test\n    public void shouldStubVoidMethodAndContinueThrowing() throws Exception {\n        stubVoid(mock)\n            .toThrow(new IllegalArgumentException())\n            .toReturn()\n            .toThrow(new NullPointerException())\n            .on().voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (IllegalArgumentException e) {}\n        \n        mock.voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (NullPointerException e) {}        \n    }",
        "begin_line": 169,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 175,col 31)",
            "(line 177,col 9)-(line 180,col 47)",
            "(line 182,col 9)-(line 182,col 26)",
            "(line 184,col 9)-(line 187,col 43)",
            "(line 189,col 9)-(line 192,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldStubVoidMethod()",
        "snippet": "    @Test\n    public void shouldStubVoidMethod() throws Exception {\n        stubVoid(mock)\n            .toReturn()\n            .toThrow(new NullPointerException())\n            .toReturn()\n            .on().voidMethod();\n        \n        mock.voidMethod();\n        \n        try {\n            mock.voidMethod();\n            fail();\n        } catch (NullPointerException e) {}\n        \n        mock.voidMethod();\n        mock.voidMethod();\n    }",
        "begin_line": 195,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 201,col 31)",
            "(line 203,col 9)-(line 203,col 26)",
            "(line 205,col 9)-(line 208,col 43)",
            "(line 210,col 9)-(line 210,col 26)",
            "(line 211,col 9)-(line 211,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java",
        "signature": "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldValidateConsecutiveExceptionForVoidMethod()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldValidateConsecutiveExceptionForVoidMethod() throws Exception {\n        stubVoid(mock)\n            .toReturn()\n            .toThrow(new Exception())\n            .on().voidMethod();\n    }",
        "begin_line": 214,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 219,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(IMethods.class);\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.should_evaluate_latest_stubbing_first()",
        "snippet": "    @Test\n    public void should_evaluate_latest_stubbing_first() throws Exception {\n        when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);\n        when(mock.objectReturningMethod(200)).thenReturn(200);\n        \n        assertEquals(200, mock.objectReturningMethod(200));\n        assertEquals(100, mock.objectReturningMethod(666));\n        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 77)",
            "(line 31,col 9)-(line 31,col 62)",
            "(line 33,col 9)-(line 33,col 59)",
            "(line 34,col 9)-(line 34,col 59)",
            "(line 35,col 9)-(line 35,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.should_stubbing_be_treated_as_interaction()",
        "snippet": "    @Test\n    public void should_stubbing_be_treated_as_interaction() throws Exception {\n        when(mock.booleanReturningMethod()).thenReturn(true);\n        \n        mock.booleanReturningMethod();\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 38,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 61)",
            "(line 42,col 9)-(line 42,col 38)",
            "(line 44,col 9)-(line 47,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.should_allow_stubbing_to_string()",
        "snippet": "    @Test\n    public void should_allow_stubbing_to_string() throws Exception {\n        IMethods mockTwo = mock(IMethods.class);\n        when(mockTwo.toString()).thenReturn(\"test\");\n        \n        assertContains(\"Mock for IMethods\", mock.toString());\n        assertEquals(\"test\", mockTwo.toString());\n    }",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 52)",
            "(line 55,col 9)-(line 55,col 61)",
            "(line 56,col 9)-(line 56,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.should_stubbing_not_be_treated_as_interaction()",
        "snippet": "    @Test\n    public void should_stubbing_not_be_treated_as_interaction() {\n        when(mock.simpleMethod(\"one\")).thenThrow(new RuntimeException());\n        doThrow(new RuntimeException()).when(mock).simpleMethod(\"two\");\n        \n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 73)",
            "(line 62,col 9)-(line 62,col 71)",
            "(line 64,col 9)-(line 64,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.unfinished_stubbing_cleans_up_the_state()",
        "snippet": "    @Test\n    public void unfinished_stubbing_cleans_up_the_state() {\n        reset(mock);\n        try {\n            when(\"\").thenReturn(\"\");\n            fail(); \n        } catch (MissingMethodInvocationException e) {}\n\n        //anything that can cause state validation\n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 20)",
            "(line 70,col 9)-(line 73,col 55)",
            "(line 76,col 9)-(line 76,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.should_to_string_mock_name()",
        "snippet": "    @Test\n    public void should_to_string_mock_name() {\n        IMethods mock = mock(IMethods.class, \"mockie\");\n        IMethods mockTwo = mock(IMethods.class);\n        \n        assertContains(\"Mock for IMethods\", \"\" + mockTwo);\n        assertEquals(\"mockie\", \"\" + mock);\n    }",
        "begin_line": 79,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 55)",
            "(line 82,col 9)-(line 82,col 48)",
            "(line 84,col 9)-(line 84,col 58)",
            "(line 85,col 9)-(line 85,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.Foo.toString()",
        "snippet": "        public final String toString() {\n            return \"foo\";\n        }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 13)-(line 90,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.should_allow_mocking_when_to_string_is_final()",
        "snippet": "    @Test\n    public void should_allow_mocking_when_to_string_is_final() throws Exception {\n        mock(Foo.class);\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.BasicStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/BasicStubbingTest.java",
        "signature": "org.mockitousage.stubbing.BasicStubbingTest.test_stub_only_not_verifiable()",
        "snippet": "    @Test\n    public void test_stub_only_not_verifiable() throws Exception {\n        IMethods localMock = mock(IMethods.class, withSettings().stubOnly());\n\n        when(localMock.objectReturningMethod(isA(Integer.class))).thenReturn(100);\n        when(localMock.objectReturningMethod(200)).thenReturn(200);\n\n        assertEquals(200, localMock.objectReturningMethod(200));\n        assertEquals(100, localMock.objectReturningMethod(666));\n        assertEquals(\"default behavior should return null\", null, localMock.objectReturningMethod(\"blah\"));\n\n        try {\n            verify(localMock, atLeastOnce()).objectReturningMethod(eq(200));\n            fail();\n        } catch (CannotVerifyStubOnlyMock e) {}\n    }",
        "begin_line": 99,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 77)",
            "(line 103,col 9)-(line 103,col 82)",
            "(line 104,col 9)-(line 104,col 67)",
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 64)",
            "(line 108,col 9)-(line 108,col 107)",
            "(line 110,col 9)-(line 113,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Person.getAddress()",
        "snippet": "        public Address getAddress() {\n            return address;\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Person.getAddress(java.lang.String)",
        "snippet": "        public Address getAddress(String addressName) {\n            return address;\n        }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Person.getFinalClass()",
        "snippet": "        public FinalClass getFinalClass() {\n            return null;\n        }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 13)-(line 46,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Address.getStreet()",
        "snippet": "        public Street getStreet() {\n            return street;\n        }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Address.getStreet(java.util.Locale)",
        "snippet": "        public Street getStreet(Locale locale) {\n            return street;\n        }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 13)-(line 58,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Street.getName()",
        "snippet": "        public String getName() {\n            return name;\n        }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.Street.getLongName()",
        "snippet": "        public String getLongName() {\n            return name;\n        }",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.myTest()",
        "snippet": "    @Test\n    public void myTest() throws Exception {\n        SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf.createSocket(anyString(), eq(80))).thenReturn(null);\n        sf.createSocket(\"what\", 80);\n    }",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 73)",
            "(line 79,col 9)-(line 79,col 68)",
            "(line 80,col 9)-(line 80,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.simpleCase()",
        "snippet": "    @Test\n    public void simpleCase() throws Exception {\n        OutputStream out = new ByteArrayOutputStream();\n        Socket socket = mock(Socket.class);\n        when(socket.getOutputStream()).thenReturn(out);\n\n        assertSame(out, socket.getOutputStream());\n    }",
        "begin_line": 83,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 89,col 9)-(line 89,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.oneLevelDeep()",
        "snippet": "    @Test\n    public void oneLevelDeep() throws Exception {\n        OutputStream out = new ByteArrayOutputStream();\n\n        SocketFactory socketFactory = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(socketFactory.createSocket().getOutputStream()).thenReturn(out);\n\n        assertSame(out, socketFactory.createSocket().getOutputStream());\n    }",
        "begin_line": 95,
        "end_line": 103,
        "comment": "\n     * Test that deep stubbing works for one intermediate level\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 55)",
            "(line 99,col 9)-(line 99,col 84)",
            "(line 100,col 9)-(line 100,col 77)",
            "(line 102,col 9)-(line 102,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.interactions()",
        "snippet": "    @Test\n    public void interactions() throws Exception {\n        OutputStream out1 = new ByteArrayOutputStream();\n        OutputStream out2 = new ByteArrayOutputStream();\n\n        SocketFactory sf1 = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf1.createSocket().getOutputStream()).thenReturn(out1);\n\n        SocketFactory sf2 = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf2.createSocket().getOutputStream()).thenReturn(out2);\n\n        assertSame(out1, sf1.createSocket().getOutputStream());\n        assertSame(out2, sf2.createSocket().getOutputStream());\n    }",
        "begin_line": 108,
        "end_line": 121,
        "comment": "\n     * Test that stubbing of two mocks stubs don't interfere\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 56)",
            "(line 111,col 9)-(line 111,col 56)",
            "(line 113,col 9)-(line 113,col 74)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 116,col 9)-(line 116,col 74)",
            "(line 117,col 9)-(line 117,col 68)",
            "(line 119,col 9)-(line 119,col 63)",
            "(line 120,col 9)-(line 120,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.withArguments()",
        "snippet": "    @Test\n    public void withArguments() throws Exception {\n        OutputStream out1 = new ByteArrayOutputStream();\n        OutputStream out2 = new ByteArrayOutputStream();\n        OutputStream out3 = new ByteArrayOutputStream();\n\n        SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf.createSocket().getOutputStream()).thenReturn(out1);\n        when(sf.createSocket(\"google.com\", 80).getOutputStream()).thenReturn(out2);\n        when(sf.createSocket(\"stackoverflow.com\", 80).getOutputStream()).thenReturn(out3);\n\n        assertSame(out1, sf.createSocket().getOutputStream());\n        assertSame(out2, sf.createSocket(\"google.com\", 80).getOutputStream());\n        assertSame(out3, sf.createSocket(\"stackoverflow.com\", 80).getOutputStream());\n    }",
        "begin_line": 126,
        "end_line": 140,
        "comment": "\n     * Test that stubbing of methods of different arguments don't interfere\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 56)",
            "(line 129,col 9)-(line 129,col 56)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 132,col 9)-(line 132,col 73)",
            "(line 133,col 9)-(line 133,col 67)",
            "(line 134,col 9)-(line 134,col 83)",
            "(line 135,col 9)-(line 135,col 90)",
            "(line 137,col 9)-(line 137,col 62)",
            "(line 138,col 9)-(line 138,col 78)",
            "(line 139,col 9)-(line 139,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.withAnyPatternArguments()",
        "snippet": "    @Test\n    public void withAnyPatternArguments() throws Exception {\n        OutputStream out = new ByteArrayOutputStream();\n\n        //TODO: should not use javax in case it changes\n        SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf.createSocket(anyString(), anyInt()).getOutputStream()).thenReturn(out);\n\n        assertSame(out, sf.createSocket(\"google.com\", 80).getOutputStream());\n        assertSame(out, sf.createSocket(\"stackoverflow.com\", 8080).getOutputStream());\n    }",
        "begin_line": 145,
        "end_line": 155,
        "comment": "\n     * Test that deep stubbing work with argument patterns\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 55)",
            "(line 150,col 9)-(line 150,col 73)",
            "(line 151,col 9)-(line 151,col 87)",
            "(line 153,col 9)-(line 153,col 77)",
            "(line 154,col 9)-(line 154,col 86)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.withComplexPatternArguments()",
        "snippet": "    @Test\n    public void withComplexPatternArguments() throws Exception {\n        OutputStream out1 = new ByteArrayOutputStream();\n        OutputStream out2 = new ByteArrayOutputStream();\n\n        SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf.createSocket(anyString(), eq(80)).getOutputStream()).thenReturn(out1);\n        when(sf.createSocket(anyString(), eq(8080)).getOutputStream()).thenReturn(out2);\n\n        assertSame(out2, sf.createSocket(\"stackoverflow.com\", 8080).getOutputStream());\n        assertSame(out1, sf.createSocket(\"google.com\", 80).getOutputStream());\n        assertSame(out2, sf.createSocket(\"google.com\", 8080).getOutputStream());\n        assertSame(out1, sf.createSocket(\"stackoverflow.com\", 80).getOutputStream());\n    }",
        "begin_line": 160,
        "end_line": 173,
        "comment": "\n     * Test that deep stubbing work with argument patterns\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 56)",
            "(line 163,col 9)-(line 163,col 56)",
            "(line 165,col 9)-(line 165,col 73)",
            "(line 166,col 9)-(line 166,col 86)",
            "(line 167,col 9)-(line 167,col 88)",
            "(line 169,col 9)-(line 169,col 87)",
            "(line 170,col 9)-(line 170,col 78)",
            "(line 171,col 9)-(line 171,col 80)",
            "(line 172,col 9)-(line 172,col 85)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.withSimplePrimitive()",
        "snippet": "    @Test\n    public void withSimplePrimitive() throws Exception {\n        int a = 32;\n\n        SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf.createSocket().getPort()).thenReturn(a);\n\n        assertEquals(a, sf.createSocket().getPort());\n    }",
        "begin_line": 178,
        "end_line": 186,
        "comment": "\n     * Test that deep stubbing work with primitive expected values\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 19)",
            "(line 182,col 9)-(line 182,col 73)",
            "(line 183,col 9)-(line 183,col 56)",
            "(line 185,col 9)-(line 185,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.withPatternPrimitive()",
        "snippet": "    @Test\n    public void withPatternPrimitive() throws Exception {\n        int a = 12, b = 23, c = 34;\n\n        SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);\n        when(sf.createSocket(eq(\"stackoverflow.com\"), eq(80)).getPort()).thenReturn(a);\n        when(sf.createSocket(eq(\"google.com\"), anyInt()).getPort()).thenReturn(b);\n        when(sf.createSocket(eq(\"stackoverflow.com\"), eq(8080)).getPort()).thenReturn(c);\n\n        assertEquals(b, sf.createSocket(\"google.com\", 80).getPort());\n        assertEquals(c, sf.createSocket(\"stackoverflow.com\", 8080).getPort());\n        assertEquals(a, sf.createSocket(\"stackoverflow.com\", 80).getPort());\n    }",
        "begin_line": 192,
        "end_line": 204,
        "comment": "\n     * Test that deep stubbing work with primitive expected values with\n     * pattern method arguments\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 35)",
            "(line 196,col 9)-(line 196,col 73)",
            "(line 197,col 9)-(line 197,col 87)",
            "(line 198,col 9)-(line 198,col 82)",
            "(line 199,col 9)-(line 199,col 89)",
            "(line 201,col 9)-(line 201,col 69)",
            "(line 202,col 9)-(line 202,col 78)",
            "(line 203,col 9)-(line 203,col 76)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.shouldStubbingBasicallyWorkFine()",
        "snippet": "    @Test\n    public void shouldStubbingBasicallyWorkFine() throws Exception {\n        //given\n        given(person.getAddress().getStreet().getName()).willReturn(\"Norymberska\");\n        \n        //when\n        String street = person.getAddress().getStreet().getName();\n        \n        //then\n        assertEquals(\"Norymberska\", street);\n    }    ",
        "begin_line": 208,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 83)",
            "(line 214,col 9)-(line 214,col 66)",
            "(line 217,col 9)-(line 217,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.shouldVerificationBasicallyWorkFine()",
        "snippet": "    @Test\n    public void shouldVerificationBasicallyWorkFine() throws Exception {\n        //given\n        person.getAddress().getStreet().getName();\n        \n        //then\n        verify(person.getAddress().getStreet()).getName();\n    }",
        "begin_line": 220,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 50)",
            "(line 226,col 9)-(line 226,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.verification_work_with_argument_Matchers_in_nested_calls()",
        "snippet": "    @Test\n    public void verification_work_with_argument_Matchers_in_nested_calls() throws Exception {\n        //given\n        person.getAddress(\"111 Mock Lane\").getStreet();\n        person.getAddress(\"111 Mock Lane\").getStreet(Locale.ITALIAN).getName();\n\n        //then\n        verify(person.getAddress(anyString())).getStreet();\n        verify(person.getAddress(anyString()).getStreet(Locale.CHINESE), never()).getName();\n        verify(person.getAddress(anyString()).getStreet(eq(Locale.ITALIAN))).getName();\n    }",
        "begin_line": 229,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 55)",
            "(line 233,col 9)-(line 233,col 79)",
            "(line 236,col 9)-(line 236,col 59)",
            "(line 237,col 9)-(line 237,col 92)",
            "(line 238,col 9)-(line 238,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.deep_stub_return_same_mock_instance_if_invocation_matchers_matches()",
        "snippet": "    @Test\n    public void deep_stub_return_same_mock_instance_if_invocation_matchers_matches() throws Exception {\n        when(person.getAddress(anyString()).getStreet().getName()).thenReturn(\"deep\");\n\n        person.getAddress(\"the docks\").getStreet().getName();\n\n        assertSame(person.getAddress(\"the docks\").getStreet(), person.getAddress(anyString()).getStreet());\n        assertSame(person.getAddress(anyString()).getStreet(), person.getAddress(anyString()).getStreet());\n        assertSame(person.getAddress(\"the docks\").getStreet(), person.getAddress(\"the docks\").getStreet());\n        assertSame(person.getAddress(anyString()).getStreet(), person.getAddress(\"the docks\").getStreet());\n        assertSame(person.getAddress(\"111 Mock Lane\").getStreet(), person.getAddress(\"the docks\").getStreet());\n    }",
        "begin_line": 241,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 86)",
            "(line 245,col 9)-(line 245,col 61)",
            "(line 247,col 9)-(line 247,col 107)",
            "(line 248,col 9)-(line 248,col 107)",
            "(line 249,col 9)-(line 249,col 107)",
            "(line 250,col 9)-(line 250,col 107)",
            "(line 251,col 9)-(line 251,col 111)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.times_never_atLeast_atMost_verificationModes_should_work()",
        "snippet": "    @Test\n    public void times_never_atLeast_atMost_verificationModes_should_work() throws Exception {\n        when(person.getAddress(anyString()).getStreet().getName()).thenReturn(\"deep\");\n\n        person.getAddress(\"the docks\").getStreet().getName();\n        person.getAddress(\"the docks\").getStreet().getName();\n        person.getAddress(\"the docks\").getStreet().getName();\n        person.getAddress(\"the docks\").getStreet(Locale.ITALIAN).getName();\n\n        verify(person.getAddress(\"the docks\").getStreet(), times(3)).getName();\n        verify(person.getAddress(\"the docks\").getStreet(Locale.CHINESE), never()).getName();\n        verify(person.getAddress(\"the docks\").getStreet(Locale.ITALIAN), atMost(1)).getName();\n    }",
        "begin_line": 254,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 86)",
            "(line 258,col 9)-(line 258,col 61)",
            "(line 259,col 9)-(line 259,col 61)",
            "(line 260,col 9)-(line 260,col 61)",
            "(line 261,col 9)-(line 261,col 75)",
            "(line 263,col 9)-(line 263,col 79)",
            "(line 264,col 9)-(line 264,col 92)",
            "(line 265,col 9)-(line 265,col 94)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.inOrder_only_work_on_the_very_last_mock_but_it_works()",
        "snippet": "    @Test\n    public void inOrder_only_work_on_the_very_last_mock_but_it_works() throws Exception {\n        when(person.getAddress(anyString()).getStreet().getName()).thenReturn(\"deep\");\n        when(person.getAddress(anyString()).getStreet(Locale.ITALIAN).getName()).thenReturn(\"deep\");\n        when(person.getAddress(anyString()).getStreet(Locale.CHINESE).getName()).thenReturn(\"deep\");\n\n        person.getAddress(\"the docks\").getStreet().getName();\n        person.getAddress(\"the docks\").getStreet().getLongName();\n        person.getAddress(\"the docks\").getStreet(Locale.ITALIAN).getName();\n        person.getAddress(\"the docks\").getStreet(Locale.CHINESE).getName();\n\n        InOrder inOrder = inOrder(\n                person.getAddress(\"the docks\").getStreet(),\n                person.getAddress(\"the docks\").getStreet(Locale.CHINESE),\n                person.getAddress(\"the docks\").getStreet(Locale.ITALIAN)\n        );\n        inOrder.verify(person.getAddress(\"the docks\").getStreet(), times(1)).getName();\n        inOrder.verify(person.getAddress(\"the docks\").getStreet()).getLongName();\n        inOrder.verify(person.getAddress(\"the docks\").getStreet(Locale.ITALIAN), atLeast(1)).getName();\n        inOrder.verify(person.getAddress(\"the docks\").getStreet(Locale.CHINESE)).getName();\n    }",
        "begin_line": 269,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 86)",
            "(line 272,col 9)-(line 272,col 100)",
            "(line 273,col 9)-(line 273,col 100)",
            "(line 275,col 9)-(line 275,col 61)",
            "(line 276,col 9)-(line 276,col 65)",
            "(line 277,col 9)-(line 277,col 75)",
            "(line 278,col 9)-(line 278,col 75)",
            "(line 280,col 9)-(line 284,col 10)",
            "(line 285,col 9)-(line 285,col 87)",
            "(line 286,col 9)-(line 286,col 81)",
            "(line 287,col 9)-(line 287,col 103)",
            "(line 288,col 9)-(line 288,col 91)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.verificationMode_only_work_on_the_last_returned_mock()",
        "snippet": "    @Test\n    public void verificationMode_only_work_on_the_last_returned_mock() throws Exception {\n        // 1st invocation on Address mock (stubbing)\n        when(person.getAddress(\"the docks\").getStreet().getName()).thenReturn(\"deep\");\n\n        // 2nd invocation on Address mock (real)\n        person.getAddress(\"the docks\").getStreet().getName();\n        // 3rd invocation on Address mock (verification)\n        // (Address mock is not in verification mode)\n        verify(person.getAddress(\"the docks\").getStreet()).getName();\n\n        try {\n            verify(person.getAddress(\"the docks\"), times(1)).getStreet();\n            fail();\n        } catch (TooManyActualInvocations e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(\"Wanted 1 time\")\n                    .contains(\"But was 3 times\");\n        }\n    }",
        "begin_line": 291,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 86)",
            "(line 297,col 9)-(line 297,col 61)",
            "(line 300,col 9)-(line 300,col 69)",
            "(line 302,col 9)-(line 309,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeepStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeepStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeepStubbingTest.shouldFailGracefullyWhenClassIsFinal()",
        "snippet": "    @Test\n    public void shouldFailGracefullyWhenClassIsFinal() throws Exception {\n        //when        \n        FinalClass value = new FinalClass();\n        given(person.getFinalClass()).willReturn(value);\n        \n        //then\n        assertEquals(value, person.getFinalClass());\n    }",
        "begin_line": 312,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 44)",
            "(line 316,col 9)-(line 316,col 56)",
            "(line 319,col 9)-(line 319,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.resetState()",
        "snippet": "    @After public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod();\n        doReturn(\"bar\").when(mock).simpleMethod();\n        \n        assertEquals(\"bar\", mock.simpleMethod());\n    }",
        "begin_line": 34,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 50)",
            "(line 37,col 9)-(line 37,col 50)",
            "(line 39,col 9)-(line 39,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithArgs()",
        "snippet": "    @Test\n    public void shouldStubWithArgs() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod(\"foo\");\n        doReturn(\"bar\").when(mock).simpleMethod(eq(\"one\"), anyInt());\n        \n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n        assertEquals(\"bar\", mock.simpleMethod(\"one\", 234));\n        assertEquals(null, mock.simpleMethod(\"xxx\", 234));\n    }",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 55)",
            "(line 45,col 9)-(line 45,col 69)",
            "(line 47,col 9)-(line 47,col 54)",
            "(line 48,col 9)-(line 48,col 59)",
            "(line 49,col 9)-(line 49,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithThrowable()",
        "snippet": "    @Test\n    public void shouldStubWithThrowable() throws Exception {\n        doThrow(new FooRuntimeException()).when(mock).voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (FooRuntimeException e) {}\n    }",
        "begin_line": 54,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 67)",
            "(line 57,col 9)-(line 60,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowSettingValidCheckedException()",
        "snippet": "    @Test\n    public void shouldAllowSettingValidCheckedException() throws Exception {\n        doThrow(new IOException()).when(mock).throwsIOException(0);\n        \n        try {\n            mock.throwsIOException(0);\n            fail();\n        } catch (IOException e) {}\n    }",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 67)",
            "(line 67,col 9)-(line 70,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectInvalidCheckedException()",
        "snippet": "    @Test\n    public void shouldDetectInvalidCheckedException() throws Exception {\n        try {\n            doThrow(new FooCheckedException()).when(mock).throwsIOException(0);\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Checked exception is invalid\", e.getMessage());\n        }\n    }",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 82,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenReturnSetForVoid()",
        "snippet": "    @Test\n    public void shouldScreamWhenReturnSetForVoid() throws Exception {\n        try {\n            doReturn(\"foo\").when(mock).voidMethod();\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"void method\", e.getMessage());\n            assertContains(\"cannot\", e.getMessage());\n        }\n    }",
        "begin_line": 85,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenNotAMockPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNotAMockPassed() throws Exception {\n        try {\n            doReturn(\"foo\").when(\"foo\").toString();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Argument passed to when() is not a mock\", e.getMessage());\n        }\n    }",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 103,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenNullPassed()",
        "snippet": "    @Test\n    public void shouldScreamWhenNullPassed() throws Exception {\n        try {\n            doReturn(\"foo\").when((Object) null).toString();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Argument passed to when() is null\", e.getMessage());\n        }\n    }    ",
        "begin_line": 106,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbing()",
        "snippet": "    @Test\n    public void shouldAllowChainedStubbing() {\n        doReturn(\"foo\").\n        doThrow(new RuntimeException()).\n        doReturn(\"bar\")\n        .when(mock).simpleMethod();\n        \n        assertEquals(\"foo\", mock.simpleMethod());\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        \n        assertEquals(\"bar\", mock.simpleMethod());\n        assertEquals(\"bar\", mock.simpleMethod());\n    }",
        "begin_line": 116,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 121,col 35)",
            "(line 123,col 9)-(line 123,col 49)",
            "(line 124,col 9)-(line 127,col 39)",
            "(line 129,col 9)-(line 129,col 49)",
            "(line 130,col 9)-(line 130,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowDoCallRealMethodInChainedStubbing()",
        "snippet": "    @Test\n    public void shouldAllowDoCallRealMethodInChainedStubbing() throws Exception {\n        MethodsImpl methods = mock(MethodsImpl.class);\n        doReturn(\"A\").doCallRealMethod()\n                .when(methods).simpleMethod();\n\n        assertEquals(\"A\", methods.simpleMethod());\n        assertEquals(null, methods.simpleMethod());\n    }",
        "begin_line": 133,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 54)",
            "(line 136,col 9)-(line 137,col 46)",
            "(line 139,col 9)-(line 139,col 50)",
            "(line 140,col 9)-(line 140,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbingWithExceptionClass()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void shouldAllowChainedStubbingWithExceptionClass() throws Exception {\n        doReturn(\"whatever\").doThrow(IllegalArgumentException.class).when(mock).simpleMethod();\n\n        assertEquals(\"whatever\", mock.simpleMethod());\n        mock.simpleMethod();\n    }",
        "begin_line": 143,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 95)",
            "(line 147,col 9)-(line 147,col 54)",
            "(line 148,col 9)-(line 148,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbingOnVoidMethods()",
        "snippet": "    @Test\n    public void shouldAllowChainedStubbingOnVoidMethods() {\n        doNothing().\n        doNothing().\n        doThrow(new RuntimeException())\n        .when(mock).voidMethod();\n        \n        mock.voidMethod();\n        mock.voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (RuntimeException e) {}\n        try {\n            mock.voidMethod();\n            fail();\n        } catch (RuntimeException e) {}\n    }",
        "begin_line": 151,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 156,col 33)",
            "(line 158,col 9)-(line 158,col 26)",
            "(line 159,col 9)-(line 159,col 26)",
            "(line 160,col 9)-(line 163,col 39)",
            "(line 164,col 9)-(line 167,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithGenericAnswer()",
        "snippet": "    @Test\n    public void shouldStubWithGenericAnswer() {\n        doAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return \"foo\";\n            }\n        })\n        .when(mock).simpleMethod();\n        \n        assertEquals(\"foo\", mock.simpleMethod());\n    }",
        "begin_line": 170,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 177,col 35)",
            "(line 179,col 9)-(line 179,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.Anonymous-000ae016-05fc-486f-8143-e2c43e28d156.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return \"foo\";\n            }",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 17)-(line 174,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldNotAllowDoNothingOnNonVoids()",
        "snippet": "    @Test\n    public void shouldNotAllowDoNothingOnNonVoids() {\n        try {\n            doNothing().when(mock).simpleMethod();\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"Only void methods can doNothing()\", e.getMessage());\n        }\n    }",
        "begin_line": 182,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 189,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubbingBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod();\n        mock.simpleMethod();\n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 192,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 50)",
            "(line 195,col 9)-(line 195,col 28)",
            "(line 196,col 9)-(line 199,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldVerifyStubbedCall()",
        "snippet": "    @Test\n    public void shouldVerifyStubbedCall() throws Exception {\n        doReturn(\"foo\").when(mock).simpleMethod();\n        mock.simpleMethod();\n        mock.simpleMethod();\n        \n        verify(mock, times(2)).simpleMethod();\n        verifyNoMoreInteractions(mock);\n    }",
        "begin_line": 202,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 50)",
            "(line 205,col 9)-(line 205,col 28)",
            "(line 206,col 9)-(line 206,col 28)",
            "(line 208,col 9)-(line 208,col 46)",
            "(line 209,col 9)-(line 209,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowStubbingToString()",
        "snippet": "    @Test\n    public void shouldAllowStubbingToString() throws Exception {\n        doReturn(\"test\").when(mock).toString();\n        assertEquals(\"test\", mock.toString());\n    }",
        "begin_line": 212,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 47)",
            "(line 215,col 9)-(line 215,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectInvalidReturnType()",
        "snippet": "    @Test\n    public void shouldDetectInvalidReturnType() throws Exception {\n        try {\n            doReturn(\"foo\").when(mock).booleanObjectReturningMethod();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"String cannot be returned by booleanObjectReturningMethod()\" +\n                    \"\\n\" +\n                    \"booleanObjectReturningMethod() should return Boolean\",\n                    e.getMessage());\n        }\n    }",
        "begin_line": 218,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 228,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectWhenNullAssignedToBoolean()",
        "snippet": "    @Test\n    public void shouldDetectWhenNullAssignedToBoolean() throws Exception {\n        try {\n            doReturn(null).when(mock).intReturningMethod();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"null cannot be returned by intReturningMethod\", e.getMessage());\n        }\n    }",
        "begin_line": 231,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 238,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java",
        "signature": "org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowStubbingWhenTypesMatchSignature()",
        "snippet": "    @Test\n    public void shouldAllowStubbingWhenTypesMatchSignature() throws Exception {\n        doReturn(\"foo\").when(mock).objectReturningMethodNoArgs();\n        doReturn(\"foo\").when(mock).simpleMethod();\n        doReturn(1).when(mock).intReturningMethod();\n        doReturn(new Integer(2)).when(mock).intReturningMethod();\n    }",
        "begin_line": 241,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 65)",
            "(line 244,col 9)-(line 244,col 50)",
            "(line 245,col 9)-(line 245,col 52)",
            "(line 246,col 9)-(line 246,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(IMethods.class, Mockito.RETURNS_SMART_NULLS);\n    }",
        "begin_line": 22,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "unstubbedMethodInvokedHere(IMethods)",
        "snippet": "    public IMethods unstubbedMethodInvokedHere(IMethods mock) {\n        return mock.iMethodsReturningMethod();\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldSmartNPEPointToUnstubbedCall()",
        "snippet": "    @Test\n    public void shouldSmartNPEPointToUnstubbedCall() throws Exception {\n        IMethods methods = unstubbedMethodInvokedHere(mock); \n        try {\n            methods.simpleMethod();\n            fail();\n        } catch (SmartNullPointerException e) {\n            assertContains(\"unstubbedMethodInvokedHere(\", e.getMessage());\n        }\n    }",
        "begin_line": 31,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 60)",
            "(line 34,col 9)-(line 39,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Bar.boo()",
        "snippet": "        void boo();",
        "begin_line": 43,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.getSomeClass()",
        "snippet": "        Foo getSomeClass() {\n            return null;\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.getSomeInterface()",
        "snippet": "        Bar getSomeInterface() {\n            return null;\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.getBarWithParams(int, java.lang.String)",
        "snippet": "        Bar getBarWithParams(int x, String y) {\n            return null;\n        }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.Foo.boo()",
        "snippet": "        void boo() {}",
        "begin_line": 59,
        "end_line": 59,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldThrowSmartNPEWhenMethodReturnsClass()",
        "snippet": "    @Test\n    public void shouldThrowSmartNPEWhenMethodReturnsClass() throws Exception {\n        Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n        Foo foo = mock.getSomeClass();\n        try {\n            foo.boo();\n            fail();\n        } catch (SmartNullPointerException e) {}\n    }",
        "begin_line": 62,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 38)",
            "(line 66,col 9)-(line 69,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldThrowSmartNPEWhenMethodReturnsInterface()",
        "snippet": "    @Test\n    public void shouldThrowSmartNPEWhenMethodReturnsInterface() throws Exception {\n        Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n        Bar bar = mock.getSomeInterface();\n        try {\n            bar.boo();\n            fail();\n        } catch (SmartNullPointerException e) {}\n    }",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 56)",
            "(line 75,col 9)-(line 75,col 42)",
            "(line 76,col 9)-(line 79,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldReturnOrdinaryEmptyValuesForOrdinaryTypes()",
        "snippet": "    @Test\n    public void shouldReturnOrdinaryEmptyValuesForOrdinaryTypes() throws Exception {\n        IMethods mock = mock(IMethods.class, RETURNS_SMART_NULLS);\n\n        assertEquals(\"\", mock.stringReturningMethod());\n        assertEquals(0, mock.intReturningMethod());\n        assertEquals(true, mock.listReturningMethod().isEmpty());\n        assertEquals(0, mock.arrayReturningMethod().length);\n    }",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 66)",
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 51)",
            "(line 89,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldNotThrowSmartNullPointerOnToString()",
        "snippet": "    @Test\n    public void shouldNotThrowSmartNullPointerOnToString() {\n        Object smartNull = mock.objectReturningMethod();\n        try {\n            verify(mock).simpleMethod(smartNull);\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 93,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 56)",
            "(line 96,col 9)-(line 99,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldNotThrowSmartNullPointerOnObjectMethods()",
        "snippet": "    @Test\n    public void shouldNotThrowSmartNullPointerOnObjectMethods() {\n        Object smartNull = mock.objectReturningMethod();\n        smartNull.toString();\n    }",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 56)",
            "(line 105,col 9)-(line 105,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldShowParameters()",
        "snippet": "    @Test\n    public void shouldShowParameters() {\n        Foo foo = mock(Foo.class, RETURNS_SMART_NULLS);\n        Bar smartNull = foo.getBarWithParams(10, \"yes sir\");\n\n        try {\n            smartNull.boo();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"yes sir\", e.getMessage());\n        }\n    }",
        "begin_line": 108,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 60)",
            "(line 113,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.SmartNullsStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/SmartNullsStubbingTest.java",
        "signature": "org.mockitousage.stubbing.SmartNullsStubbingTest.shouldShowParametersWhenParamsAreHuge()",
        "snippet": "    @Test\n    public void shouldShowParametersWhenParamsAreHuge() {\n        Foo foo = mock(Foo.class, RETURNS_SMART_NULLS);\n        String longStr = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";\n        Bar smartNull = foo.getBarWithParams(10, longStr);\n\n        try {\n            smartNull.boo();\n            fail();\n        } catch (Exception e) {\n            assertContains(\"Lorem Ipsum\", e.getMessage());\n        }\n    }",
        "begin_line": 121,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 55)",
            "(line 124,col 9)-(line 124,col 602)",
            "(line 125,col 9)-(line 125,col 58)",
            "(line 127,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mock = mock(IMethods.class);\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldEvaluateLatestStubbingFirst()",
        "snippet": "    @Test\n    public void shouldEvaluateLatestStubbingFirst() throws Exception {\n        stub(mock.objectReturningMethod(isA(Integer.class))).toReturn(100);\n        stub(mock.objectReturningMethod(200)).toReturn(200);\n        \n        assertEquals(200, mock.objectReturningMethod(200));\n        assertEquals(100, mock.objectReturningMethod(666));\n        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 75)",
            "(line 31,col 9)-(line 31,col 60)",
            "(line 33,col 9)-(line 33,col 59)",
            "(line 34,col 9)-(line 34,col 59)",
            "(line 35,col 9)-(line 35,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldStubbingBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n        stub(mock.booleanReturningMethod()).toReturn(true);\n        \n        mock.booleanReturningMethod();\n        \n        try {\n            verifyNoMoreInteractions(mock);\n            fail();\n        } catch (NoInteractionsWanted e) {}\n    }",
        "begin_line": 38,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 59)",
            "(line 42,col 9)-(line 42,col 38)",
            "(line 44,col 9)-(line 47,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldAllowStubbingToString()",
        "snippet": "    @Test\n    public void shouldAllowStubbingToString() throws Exception {\n        IMethods mockTwo = mock(IMethods.class);\n        stub(mockTwo.toString()).toReturn(\"test\");\n        \n        assertContains(\"Mock for IMethods\", mock.toString());\n        assertEquals(\"test\", mockTwo.toString());\n    }",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 48)",
            "(line 53,col 9)-(line 53,col 50)",
            "(line 55,col 9)-(line 55,col 61)",
            "(line 56,col 9)-(line 56,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldStubbingNotBeTreatedAsInteraction()",
        "snippet": "    @Test\n    public void shouldStubbingNotBeTreatedAsInteraction() {\n        stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n        stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(\"two\");\n        \n        verifyZeroInteractions(mock);\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 71)",
            "(line 62,col 9)-(line 62,col 80)",
            "(line 64,col 9)-(line 64,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.DeprecatedStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/DeprecatedStubbingTest.java",
        "signature": "org.mockitousage.stubbing.DeprecatedStubbingTest.shouldAllowConsecutiveStubbing()",
        "snippet": "    @Test\n    public void shouldAllowConsecutiveStubbing() throws Exception {\n        //when\n        stub(mock.simpleMethod())\n            .toReturn(\"100\")\n            .toReturn(\"200\");\n        \n        //then\n        assertEquals(\"100\", mock.simpleMethod());\n        assertEquals(\"200\", mock.simpleMethod());\n    }",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 72,col 29)",
            "(line 75,col 9)-(line 75,col 49)",
            "(line 76,col 9)-(line 76,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.FakeList.get(int)",
        "snippet": "        public T get(int i) {\n            return value;\n        }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 28,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.FakeList.set(int, T)",
        "snippet": "        public T set(int i, T value) {\n            T oldValue = value;\n            this.value = value;\n            return oldValue;\n        }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 13)-(line 32,col 31)",
            "(line 33,col 13)-(line 33,col 31)",
            "(line 34,col 13)-(line 34,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.FakeList.size()",
        "snippet": "        public int size() {\n            return 10;\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 22)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.FakeList.subList(int, int)",
        "snippet": "        public ArrayList<T> subList(int fromIndex, int toIndex) {\n            return new ArrayList<T>();\n        }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.FakeListWithWrongMethods.size()",
        "snippet": "        public double size() {\n            return 10;\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 22)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.FakeListWithWrongMethods.subList(int, int)",
        "snippet": "        public Collection<T> subList(int fromIndex, int toIndex) {\n            return new ArrayList<T>();\n        }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 13)-(line 52,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.when_not_stubbed_delegate_should_be_called()",
        "snippet": "    @Test\n    public void when_not_stubbed_delegate_should_be_called() {\n        List<String> delegatedList = new ArrayList<String>();\n        delegatedList.add(\"un\");\n\n        List<String> mock = mock(List.class, delegatesTo(delegatedList));\n\n        mock.add(\"two\");\n\n        assertEquals(2, mock.size());\n    }",
        "begin_line": 56,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 61)",
            "(line 59,col 9)-(line 59,col 32)",
            "(line 61,col 9)-(line 61,col 73)",
            "(line 63,col 9)-(line 63,col 24)",
            "(line 65,col 9)-(line 65,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.when_stubbed_the_delegate_should_not_be_called()",
        "snippet": "    @Test\n    public void when_stubbed_the_delegate_should_not_be_called() {\n        List<String> delegatedList = new ArrayList<String>();\n        delegatedList.add(\"un\");\n        List<String> mock = mock(List.class, delegatesTo(delegatedList));\n\n        doReturn(10).when(mock).size();\n\n        mock.add(\"two\");\n\n        assertEquals(10, mock.size());\n        assertEquals(2, delegatedList.size());\n    }",
        "begin_line": 68,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 61)",
            "(line 71,col 9)-(line 71,col 32)",
            "(line 72,col 9)-(line 72,col 73)",
            "(line 74,col 9)-(line 74,col 39)",
            "(line 76,col 9)-(line 76,col 24)",
            "(line 78,col 9)-(line 78,col 38)",
            "(line 79,col 9)-(line 79,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.delegate_should_not_be_called_when_stubbed2()",
        "snippet": "    @Test\n    public void delegate_should_not_be_called_when_stubbed2() {\n        List<String> delegatedList = new ArrayList<String>();\n        delegatedList.add(\"un\");\n        List<String> mockedList = mock(List.class, delegatesTo(delegatedList));\n\n        doReturn(false).when(mockedList).add(Mockito.anyString());\n\n        mockedList.add(\"two\");\n\n        assertEquals(1, mockedList.size());\n        assertEquals(1, delegatedList.size());\n    }",
        "begin_line": 82,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 61)",
            "(line 85,col 9)-(line 85,col 32)",
            "(line 86,col 9)-(line 86,col 79)",
            "(line 88,col 9)-(line 88,col 66)",
            "(line 90,col 9)-(line 90,col 30)",
            "(line 92,col 9)-(line 92,col 43)",
            "(line 93,col 9)-(line 93,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.null_wrapper_dont_throw_exception_from_org_mockito_package()",
        "snippet": "    @Test\n    public void null_wrapper_dont_throw_exception_from_org_mockito_package() throws Exception {\n        IMethods methods = mock(IMethods.class, delegatesTo(new MethodsImpl()));\n\n        try {\n            byte b = methods.byteObjectReturningMethod(); // real method returns null\n            fail();\n        } catch (Exception e) {\n            assertThat(e.toString()).doesNotContain(\"org.mockito\");\n        }\n    }",
        "begin_line": 96,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 80)",
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.instance_of_different_class_can_be_called()",
        "snippet": "    @Test\n    public void instance_of_different_class_can_be_called() {\n        List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));\n\n        mock.set(1, \"1\");\n        assertThat(mock.get(1).equals(\"1\"));\n    }",
        "begin_line": 108,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 82)",
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.method_with_subtype_return_can_be_called()",
        "snippet": "    @Test\n    public void method_with_subtype_return_can_be_called() {\n        List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));\n\n        List<String> subList = mock.subList(0, 0);\n        assertThat(subList.isEmpty());\n    }",
        "begin_line": 116,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 82)",
            "(line 120,col 9)-(line 120,col 50)",
            "(line 121,col 9)-(line 121,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.calling_missing_method_should_throw_exception()",
        "snippet": "    @Test\n    public void calling_missing_method_should_throw_exception() {\n        List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));\n\n        try {\n            mock.isEmpty();\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.toString()).contains(\"Methods called on mock must exist\");\n        }\n    }",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 82)",
            "(line 128,col 9)-(line 133,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.calling_method_with_wrong_primitive_return_should_throw_exception()",
        "snippet": "    @Test\n    public void calling_method_with_wrong_primitive_return_should_throw_exception() {\n        List<String> mock = mock(List.class, delegatesTo(new FakeListWithWrongMethods<String>()));\n\n        try {\n            mock.size();\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.toString()).contains(\"Methods called on delegated instance must have compatible return type\");\n        }\n    }",
        "begin_line": 136,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 98)",
            "(line 140,col 9)-(line 145,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.calling_method_with_wrong_reference_return_should_throw_exception()",
        "snippet": "    @Test\n    public void calling_method_with_wrong_reference_return_should_throw_exception() {\n        List<String> mock = mock(List.class, delegatesTo(new FakeListWithWrongMethods<String>()));\n\n        try {\n            mock.subList(0, 0);\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.toString()).contains(\"Methods called on delegated instance must have compatible return type\");\n        }\n    }",
        "begin_line": 148,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 98)",
            "(line 152,col 9)-(line 157,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "org.mockitousage.stubbing.StubbingWithDelegateTest.exception_should_be_propagated_from_delegate()",
        "snippet": "    @Test\n    public void exception_should_be_propagated_from_delegate() throws Exception {\n        final RuntimeException failure = new RuntimeException(\"angry-method\");\n        IMethods methods = mock(IMethods.class, delegatesTo(new MethodsImpl() {\n            @Override\n            public String simpleMethod() {\n                throw failure;\n            }\n        }));\n\n        try {\n            methods.simpleMethod(); // delegate throws an exception\n            fail();\n        } catch (RuntimeException e) {\n            assertThat(e).isEqualTo(failure);\n        }\n    }",
        "begin_line": 160,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 78)",
            "(line 163,col 9)-(line 168,col 12)",
            "(line 170,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.StubbingWithDelegateTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/StubbingWithDelegateTest.java",
        "signature": "simpleMethod()",
        "snippet": "            @Override\n            public String simpleMethod() {\n                throw failure;\n            }",
        "begin_line": 164,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 17)-(line 166,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.shouldVerifyEvenIfArgumentsWereMutated()",
        "snippet": "    @Test\n    public void shouldVerifyEvenIfArgumentsWereMutated() throws Exception {\n\n        // given\n        EmailSender emailSender = mock(EmailSender.class, new ClonesArguments());\n\n        // when\n        businessLogic(emailSender);\n\n        // then\n        verify(emailSender).sendEmail(1, new Person(\"Wes\"));\n    }",
        "begin_line": 18,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 81)",
            "(line 25,col 9)-(line 25,col 35)",
            "(line 28,col 9)-(line 28,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.businessLogic(org.mockitousage.stubbing.CloningParameterTest.EmailSender)",
        "snippet": "    private void businessLogic(EmailSender emailSender) {\n        Person person = new Person(\"Wes\");\n        emailSender.sendEmail(1, person);\n        person.emailSent();\n    }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 42)",
            "(line 33,col 9)-(line 33,col 41)",
            "(line 34,col 9)-(line 34,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.shouldReturnDefaultValueWithCloningAnswer()",
        "snippet": "    @Test\n    public void shouldReturnDefaultValueWithCloningAnswer() throws Exception {\n\n        // given\n        EmailSender emailSender = mock(EmailSender.class, new ClonesArguments());\n        when(emailSender.getAllEmails(new Person(\"Wes\"))).thenAnswer(new ClonesArguments());\n\n        // when\n        List<?> emails = emailSender.getAllEmails(new Person(\"Wes\"));\n\n        // then\n        assertNotNull(emails);\n    }",
        "begin_line": 37,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 81)",
            "(line 42,col 9)-(line 42,col 92)",
            "(line 45,col 9)-(line 45,col 69)",
            "(line 48,col 9)-(line 48,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.Person.Person(java.lang.String)",
        "snippet": "        public Person(String name) {\n            this.name = name;\n        }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.Person.emailSent()",
        "snippet": "        public void emailSent() {\n            emailSent = true;\n        }",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.Person.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + getOuterType().hashCode();\n            result = prime * result + (emailSent ? 1231 : 1237);\n            result = prime * result + ((name == null) ? 0 : name.hashCode());\n            return result;\n        }",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 33)",
            "(line 67,col 13)-(line 67,col 27)",
            "(line 68,col 13)-(line 68,col 64)",
            "(line 69,col 13)-(line 69,col 64)",
            "(line 70,col 13)-(line 70,col 77)",
            "(line 71,col 13)-(line 71,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.Person.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            Person other = (Person) obj;\n            if (!getOuterType().equals(other.getOuterType()))\n                return false;\n            if (emailSent != other.emailSent)\n                return false;\n            if (name == null) {\n                if (other.name != null)\n                    return false;\n            } else if (!name.equals(other.name))\n                return false;\n            return true;\n        }",
        "begin_line": 74,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 76,col 13)-(line 77,col 28)",
            "(line 78,col 13)-(line 79,col 29)",
            "(line 80,col 13)-(line 81,col 29)",
            "(line 82,col 13)-(line 82,col 40)",
            "(line 83,col 13)-(line 84,col 29)",
            "(line 85,col 13)-(line 86,col 29)",
            "(line 87,col 13)-(line 91,col 29)",
            "(line 92,col 13)-(line 92,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.Person.getOuterType()",
        "snippet": "        private CloningParameterTest getOuterType() {\n            return CloningParameterTest.this;\n        }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 13)-(line 96,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.EmailSender.sendEmail(int, org.mockitousage.stubbing.CloningParameterTest.Person)",
        "snippet": "        void sendEmail(int i, Person person);",
        "begin_line": 103,
        "end_line": 103,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.stubbing.CloningParameterTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/stubbing/CloningParameterTest.java",
        "signature": "org.mockitousage.stubbing.CloningParameterTest.EmailSender.getAllEmails(org.mockitousage.stubbing.CloningParameterTest.Person)",
        "snippet": "        List<?> getAllEmails(Person person);",
        "begin_line": 105,
        "end_line": 105,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest.init()",
        "snippet": "    @Before\n    @Override\n    public void init() {\n        //we need to get rid of parent implementation this time\n    }",
        "begin_line": 22,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest.shouldFailIfCaptorHasWrongType()",
        "snippet": "    @Test\n    public void shouldFailIfCaptorHasWrongType() throws Exception {\n        try {\n            //when\n            MockitoAnnotations.initMocks(this);\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"notACaptorField\", e.getMessage());\n            assertContains(\"wrong type\", e.getMessage());\n        }\n    }",
        "begin_line": 28,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 38,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest.goBackToDefaultConfiguration()",
        "snippet": "    @After\n    public void goBackToDefaultConfiguration() {\n        ConfigurationAccess.getConfig().overrideAnnotationEngine(null);\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest.Tested.setDependency(org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest.Dependency)",
        "snippet": "        public void setDependency(Dependency dependency) {\n            this.dependency = dependency;\n        }        ",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest.shouldInjectMocksIfThereIsNoUserDefinedEngine()",
        "snippet": "    @Test\n    public void shouldInjectMocksIfThereIsNoUserDefinedEngine() throws Exception {\n        //given\n        AnnotationEngine defaultEngine = new DefaultMockitoConfiguration().getAnnotationEngine();\n        ConfigurationAccess.getConfig().overrideAnnotationEngine(defaultEngine);\n        SimpleTestCase test = new SimpleTestCase();\n        \n        //when\n        MockitoAnnotations.initMocks(test);\n        \n        //then   \n        assertNotNull(test.mock);\n        assertNotNull(test.tested.dependency);\n        assertSame(test.mock, test.tested.dependency);\n    }",
        "begin_line": 40,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 97)",
            "(line 44,col 9)-(line 44,col 80)",
            "(line 45,col 9)-(line 45,col 51)",
            "(line 48,col 9)-(line 48,col 43)",
            "(line 51,col 9)-(line 51,col 33)",
            "(line 52,col 9)-(line 52,col 46)",
            "(line 53,col 9)-(line 53,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest.shouldRespectUsersEngine()",
        "snippet": "    @Test\n    public void shouldRespectUsersEngine() throws Exception {\n        //given\n        AnnotationEngine customizedEngine = new DefaultAnnotationEngine() { /**/ };\n        ConfigurationAccess.getConfig().overrideAnnotationEngine(customizedEngine);\n        SimpleTestCase test = new SimpleTestCase();\n        \n        //when\n        MockitoAnnotations.initMocks(test);\n        \n        //then   \n        assertNotNull(test.mock);\n        assertNull(test.tested.dependency);\n    }",
        "begin_line": 56,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 83)",
            "(line 60,col 9)-(line 60,col 83)",
            "(line 61,col 9)-(line 61,col 51)",
            "(line 64,col 9)-(line 64,col 43)",
            "(line 67,col 9)-(line 67,col 33)",
            "(line 68,col 9)-(line 68,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.MockInterface.testMe(java.lang.String, java.util.List<java.util.List<java.lang.String>>)",
        "snippet": "        void testMe(String simple, List<List<String>> genericList);",
        "begin_line": 47,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.testNormalUsage()",
        "snippet": "    @Test\n    public void testNormalUsage() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        assertNotNull(finalCaptor);\n        assertNotNull(genericsCaptor);\n        assertNotNull(nonGenericCaptorIsAllowed);\n        assertNull(notAMock);\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);\n\n        Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());\n\n        assertEquals(argForFinalCaptor, finalCaptor.getValue());\n        assertEquals(argForGenericsCaptor, genericsCaptor.getValue());\n\n    }",
        "begin_line": 50,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 43)",
            "(line 56,col 9)-(line 56,col 35)",
            "(line 57,col 9)-(line 57,col 38)",
            "(line 58,col 9)-(line 58,col 49)",
            "(line 59,col 9)-(line 59,col 29)",
            "(line 62,col 9)-(line 62,col 43)",
            "(line 63,col 9)-(line 63,col 85)",
            "(line 65,col 9)-(line 65,col 70)",
            "(line 67,col 9)-(line 67,col 94)",
            "(line 69,col 9)-(line 69,col 64)",
            "(line 70,col 9)-(line 70,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.shouldScreamWhenWrongTypeForCaptor()",
        "snippet": "    @Test\n    public void shouldScreamWhenWrongTypeForCaptor() {\n        try {\n            MockitoAnnotations.initMocks(new WrongType());\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 84,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.shouldScreamWhenMoreThanOneMockitoAnnotaton()",
        "snippet": "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"missingGenericsField\", e.getMessage());\n            assertContains(\"multiple Mockito annotations\", e.getMessage());            \n        }\n    }",
        "begin_line": 93,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 101,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.shouldScreamWhenInitializingCaptorsForNullClass()",
        "snippet": "    @Test\n    public void shouldScreamWhenInitializingCaptorsForNullClass() throws Exception {\n        try {\n            MockitoAnnotations.initMocks(null);\n            fail();\n        } catch (MockitoException e) {\n        }\n    }",
        "begin_line": 104,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.shouldLookForAnnotatedCaptorsInSuperClasses()",
        "snippet": "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        assertNotNull(sub.getCaptor());\n        assertNotNull(sub.getBaseCaptor());\n        assertNotNull(sub.getSuperBaseCaptor());\n    }",
        "begin_line": 113,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 28)",
            "(line 116,col 9)-(line 116,col 42)",
            "(line 118,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 120,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.SuperBase.getSuperBaseCaptor()",
        "snippet": "        public ArgumentCaptor<IMethods> getSuperBaseCaptor() {\n            return mock;\n        }",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 128,col 13)-(line 128,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.Base.getBaseCaptor()",
        "snippet": "        public ArgumentCaptor<IMethods> getBaseCaptor() {\n            return mock;\n        }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 13)-(line 137,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationTest.Sub.getCaptor()",
        "snippet": "        public ArgumentCaptor<IMethods> getCaptor() {\n            return mock;\n        }",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 13)-(line 146,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedMockAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedMockAnnotationTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedMockAnnotationTest.initMocks()",
        "snippet": "    @Before\n    public void initMocks() throws Exception {\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedMockAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedMockAnnotationTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedMockAnnotationTest.shouldCreateMockForDeprecatedMockAnnotation()",
        "snippet": "    @Test\n    public void shouldCreateMockForDeprecatedMockAnnotation() throws Exception {\n        assertNotNull(deprecatedMock);\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.DeprecatedMockAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/DeprecatedMockAnnotationTest.java",
        "signature": "org.mockitousage.annotation.DeprecatedMockAnnotationTest.shouldInjectDeprecatedMockAnnotation()",
        "snippet": "    @Test\n    public void shouldInjectDeprecatedMockAnnotation() throws Exception {\n        assertNotNull(anInjectedObject.aFieldAwaitingInjection);\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.Person.Person(java.lang.String, java.lang.String)",
        "snippet": "        public Person(String name, String surname) {\n            this.name = name;\n            this.surname = surname;\n        }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 28,col 29)",
            "(line 29,col 13)-(line 29,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.Person.getName()",
        "snippet": "        public String getName() {\n            return name;\n        }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.Person.getSurname()",
        "snippet": "        public String getSurname() {\n            return surname;\n        }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 13)-(line 37,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.PeopleRepository.save(org.mockitousage.annotation.CaptorAnnotationBasicTest.Person)",
        "snippet": "        public void save(Person capture);",
        "begin_line": 42,
        "end_line": 42,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.createPerson(java.lang.String, java.lang.String)",
        "snippet": "    private void createPerson(String name, String surname) {\n        peopleRepository.save(new Person(name, surname));\n    }      ",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.shouldUseCaptorInOrdinaryWay()",
        "snippet": "    @Test\n    public void shouldUseCaptorInOrdinaryWay() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        verify(peopleRepository).save(captor.capture());\n        assertEquals(\"Wes\", captor.getValue().getName());\n        assertEquals(\"Williams\", captor.getValue().getSurname());\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 40)",
            "(line 57,col 9)-(line 57,col 78)",
            "(line 58,col 9)-(line 58,col 56)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.shouldUseAnnotatedCaptor()",
        "snippet": "    @Test\n    public void shouldUseAnnotatedCaptor() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save(captor.capture());\n        assertEquals(\"Wes\", captor.getValue().getName());\n        assertEquals(\"Williams\", captor.getValue().getSurname());\n    }",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 40)",
            "(line 71,col 9)-(line 71,col 56)",
            "(line 72,col 9)-(line 72,col 57)",
            "(line 73,col 9)-(line 73,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.shouldUseGenericlessAnnotatedCaptor()",
        "snippet": "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save((Person) genericLessCaptor.capture());\n        assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());\n        assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());\n    }  ",
        "begin_line": 78,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 40)",
            "(line 84,col 9)-(line 84,col 76)",
            "(line 85,col 9)-(line 85,col 79)",
            "(line 86,col 9)-(line 86,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.CaptorAnnotationBasicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "signature": "org.mockitousage.annotation.CaptorAnnotationBasicTest.shouldCaptureGenericList()",
        "snippet": "    @Test\n    public void shouldCaptureGenericList() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        verify(mock).listArgMethod(genericListCaptor.capture());\n        \n        //then\n        assertSame(list, genericListCaptor.getValue());\n    } ",
        "begin_line": 92,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 96,col 33)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 102,col 9)-(line 102,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.init()",
        "snippet": "    @Before\n    public void init() {\n        // initMocks called in TestBase Before method, so instances ar not the same\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldKeepSameInstanceIfFieldInitialized()",
        "snippet": "    @Test\n    public void shouldKeepSameInstanceIfFieldInitialized() {\n        assertSame(baseUnderTestingInstance, initializedBase);\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInitializeAnnotatedFieldIfNull()",
        "snippet": "    @Test\n    public void shouldInitializeAnnotatedFieldIfNull() {\n        assertNotNull(notInitializedBase);\n    }                                          ",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldIInjectMocksInSpy()",
        "snippet": "    @Test\n    public void shouldIInjectMocksInSpy() {\n        assertNotNull(initializedSpy.getAList());\n        assertTrue(mockUtil.isMock(initializedSpy));\n    }",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInitializeSpyIfNullAndInjectMocks()",
        "snippet": "    @Test\n    public void shouldInitializeSpyIfNullAndInjectMocks() {\n        assertNotNull(notInitializedSpy);\n        assertNotNull(notInitializedSpy.getAList());\n        assertTrue(mockUtil.isMock(notInitializedSpy));\n    }",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 41)",
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInjectMocksIfAnnotated()",
        "snippet": "    @Test\n    public void shouldInjectMocksIfAnnotated() {\n        MockitoAnnotations.initMocks(this);\n        assertSame(list, superUnderTest.getAList());\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 43)",
            "(line 77,col 9)-(line 77,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldNotInjectIfNotAnnotated()",
        "snippet": "    @Test\n    public void shouldNotInjectIfNotAnnotated() {\n        MockitoAnnotations.initMocks(this);\n        assertNull(superUnderTestWithoutInjection.getAList());\n    }",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 43)",
            "(line 83,col 9)-(line 83,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInjectMocksForClassHierarchyIfAnnotated()",
        "snippet": "    @Test\n    public void shouldInjectMocksForClassHierarchyIfAnnotated() {\n        MockitoAnnotations.initMocks(this);\n        assertSame(list, baseUnderTest.getAList());\n        assertSame(map, baseUnderTest.getAMap());\n    }",
        "begin_line": 86,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 43)",
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInjectMocksByName()",
        "snippet": "    @Test\n    public void shouldInjectMocksByName() {\n        MockitoAnnotations.initMocks(this);\n        assertSame(histogram1, subUnderTest.getHistogram1());\n        assertSame(histogram2, subUnderTest.getHistogram2());\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 43)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 97,col 9)-(line 97,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInjectSpies()",
        "snippet": "    @Test\n    public void shouldInjectSpies() {\n        MockitoAnnotations.initMocks(this);\n        assertSame(searchTree, otherBaseUnderTest.getSearchTree());\n    }",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 43)",
            "(line 103,col 9)-(line 103,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInstantiateInjectMockFieldIfPossible()",
        "snippet": "    @Test\n    public void shouldInstantiateInjectMockFieldIfPossible() throws Exception {\n        assertNotNull(notInitializedBase);\n    }",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldKeepInstanceOnInjectMockFieldIfPresent()",
        "snippet": "    @Test\n    public void shouldKeepInstanceOnInjectMockFieldIfPresent() throws Exception {\n        assertSame(baseUnderTestingInstance, initializedBase);\n    }",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldReportNicely()",
        "snippet": "    @Test\n    public void shouldReportNicely() throws Exception {\n        Object failing = new Object() {\n            @InjectMocks ThrowingConstructor failingConstructor;\n        };\n        try {\n            MockitoAnnotations.initMocks(failing);\n            fail();\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"failingConstructor\").contains(\"constructor\").contains(\"threw an exception\");\n            Assertions.assertThat(e.getCause()).isInstanceOf(RuntimeException.class);\n        }\n    }",
        "begin_line": 116,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 120,col 10)",
            "(line 121,col 9)-(line 127,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.ThrowingConstructor.ThrowingConstructor()",
        "snippet": "        ThrowingConstructor() { throw new RuntimeException(\"aha\"); };",
        "begin_line": 131,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 131,col 33)-(line 131,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.SuperUnderTesting.getAList()",
        "snippet": "        public List getAList() {\n            return aList;\n        }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 13)-(line 139,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.BaseUnderTesting.getAMap()",
        "snippet": "        public Map getAMap() {\n            return aMap;\n        }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 13)-(line 147,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.OtherBaseUnderTesting.getSearchTree()",
        "snippet": "        public TreeSet getSearchTree() {\n            return searchTree;\n        }",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 155,col 13)-(line 155,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.SubUnderTesting.getHistogram1()",
        "snippet": "        public Set getHistogram1() {\n            return histogram1;\n        }",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 13)-(line 164,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.SubUnderTesting.getHistogram2()",
        "snippet": "        public Set getHistogram2() {\n            return histogram2;\n        }",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 168,col 13)-(line 168,col 30)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java",
        "signature": "org.mockitousage.annotation.WrongSetOfAnnotationsTest.should_not_allow_Mock_and_Spy()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void should_not_allow_Mock_and_Spy() throws Exception {\n        MockitoAnnotations.initMocks(new Object() {\n            @Mock @Spy List mock;\n        });\n    }",
        "begin_line": 22,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 26,col 11)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java",
        "signature": "org.mockitousage.annotation.WrongSetOfAnnotationsTest.should_not_allow_Spy_and_or_InjectMocks_on_interfaces()",
        "snippet": "    @Test\n    public void should_not_allow_Spy_and_or_InjectMocks_on_interfaces() throws Exception {\n        try {\n            MockitoAnnotations.initMocks(new Object() { @InjectMocks @Spy List mock; });\n            fail();\n        } catch (MockitoException me) {\n            Assertions.assertThat(me.getMessage()).contains(\"'List' is an interface\");\n        }\n        try {\n            MockitoAnnotations.initMocks(new Object() { @Spy List mock; });\n            fail();\n        } catch (MockitoException me) {\n            Assertions.assertThat(me.getMessage()).contains(\"'List' is an interface\");\n        }\n    }",
        "begin_line": 29,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 36,col 9)",
            "(line 37,col 9)-(line 42,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java",
        "signature": "org.mockitousage.annotation.WrongSetOfAnnotationsTest.should_not_allow_Mock_and_InjectMocks()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void should_not_allow_Mock_and_InjectMocks() throws Exception {\n        MockitoAnnotations.initMocks(new Object() {\n            @InjectMocks @Mock List mock;\n        });\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 59,col 11)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java",
        "signature": "org.mockitousage.annotation.WrongSetOfAnnotationsTest.should_not_allow_Captor_and_Mock()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void should_not_allow_Captor_and_Mock() throws Exception {\n        MockitoAnnotations.initMocks(new Object() {\n            @Mock @Captor ArgumentCaptor captor;\n        });\n    }",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 66,col 11)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java",
        "signature": "org.mockitousage.annotation.WrongSetOfAnnotationsTest.should_not_allow_Captor_and_Spy()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void should_not_allow_Captor_and_Spy() throws Exception {\n        MockitoAnnotations.initMocks(new Object() {\n            @Spy @Captor ArgumentCaptor captor;\n        });\n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 73,col 11)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java",
        "signature": "org.mockitousage.annotation.WrongSetOfAnnotationsTest.should_not_allow_Captor_and_InjectMocks()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void should_not_allow_Captor_and_InjectMocks() throws Exception {\n        MockitoAnnotations.initMocks(new Object() {\n            @InjectMocks @Captor ArgumentCaptor captor;\n        });\n    }",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 80,col 11)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest.shouldInitSpiesInBaseClass()",
        "snippet": "    @Test\n    public void shouldInitSpiesInBaseClass() throws Exception {\n        //given\n        SubClass subClass = new SubClass();\n        //when\n        MockitoAnnotations.initMocks(subClass);\n        //then\n        assertTrue(isMock(subClass.list));\n    }",
        "begin_line": 25,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 43)",
            "(line 30,col 9)-(line 30,col 47)",
            "(line 32,col 9)-(line 32,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest.init()",
        "snippet": "    @Before\n    @Override\n    public void init() {\n        //we need to get rid of parent implementation this time\n    }    ",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest.before()",
        "snippet": "    @Before\n    public void before() {\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest.SubTest.shouldInitSpiesInHierarchy()",
        "snippet": "        @Test\n        public void shouldInitSpiesInHierarchy() throws Exception {\n            assertTrue(isMock(spyInSubclass));\n            assertTrue(isMock(spyInBaseclass));            \n        }   ",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 46)",
            "(line 55,col 13)-(line 55,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/InjectionOfInlinedMockDeclarationTest.java",
        "signature": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest.mock_declared_fields_shall_be_injected_too()",
        "snippet": "    @Test\n    public void mock_declared_fields_shall_be_injected_too() throws Exception {\n        assertNotNull(receiver.oldAntenna);\n        assertNotNull(receiver.satelliteAntenna);\n        assertNotNull(receiver.dvbtAntenna);\n        assertNotNull(receiver.tuner);\n    }",
        "begin_line": 28,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 43)",
            "(line 31,col 9)-(line 31,col 49)",
            "(line 32,col 9)-(line 32,col 44)",
            "(line 33,col 9)-(line 33,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/InjectionOfInlinedMockDeclarationTest.java",
        "signature": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest.unnamed_mocks_should_be_resolved_withe_their_field_names()",
        "snippet": "    @Test\n    public void unnamed_mocks_should_be_resolved_withe_their_field_names() throws Exception {\n        assertSame(oldAntenna, receiver.oldAntenna);\n        assertSame(satelliteAntenna, receiver.satelliteAntenna);\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 52)",
            "(line 39,col 9)-(line 39,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/InjectionOfInlinedMockDeclarationTest.java",
        "signature": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest.named_mocks_should_be_resolved_with_their_name()",
        "snippet": "    @Test\n    public void named_mocks_should_be_resolved_with_their_name() throws Exception {\n        assertSame(antenna, receiver.dvbtAntenna);\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/InjectionOfInlinedMockDeclarationTest.java",
        "signature": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest.inject_mocks_even_in_declared_spy()",
        "snippet": "    @Test\n    public void inject_mocks_even_in_declared_spy() throws Exception {\n        assertNotNull(spiedReceiver.oldAntenna);\n        assertNotNull(spiedReceiver.tuner);\n    }",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/InjectionOfInlinedMockDeclarationTest.java",
        "signature": "org.mockitousage.annotation.InjectionOfInlinedMockDeclarationTest.Receiver.tune()",
        "snippet": "        public boolean tune() { return true; }",
        "begin_line": 61,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 61,col 33)-(line 61,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.shouldInitMocks()",
        "snippet": "    @Test\n    public void shouldInitMocks() throws Exception {\n        list.clear();\n        map.clear();\n        listTwo.clear();\n\n        verify(list).clear();\n        verify(map).clear();\n        verify(listTwo).clear();\n    }",
        "begin_line": 45,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 21)",
            "(line 48,col 9)-(line 48,col 20)",
            "(line 49,col 9)-(line 49,col 24)",
            "(line 51,col 9)-(line 51,col 29)",
            "(line 52,col 9)-(line 52,col 28)",
            "(line 53,col 9)-(line 53,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.shouldScreamWhenInitializingMocksForNullClass()",
        "snippet": "    @Test\n    public void shouldScreamWhenInitializingMocksForNullClass() throws Exception {\n        try {\n            MockitoAnnotations.initMocks(null);\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\",\n                    e.getMessage());\n        }\n    }",
        "begin_line": 56,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.shouldLookForAnnotatedMocksInSuperClasses()",
        "snippet": "    @Test\n    public void shouldLookForAnnotatedMocksInSuperClasses() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        assertNotNull(sub.getMock());\n        assertNotNull(sub.getBaseMock());\n        assertNotNull(sub.getSuperBaseMock());\n    }",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 28)",
            "(line 70,col 9)-(line 70,col 42)",
            "(line 72,col 9)-(line 72,col 37)",
            "(line 73,col 9)-(line 73,col 41)",
            "(line 74,col 9)-(line 74,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.shouldInitMocksWithGivenSettings()",
        "snippet": "    @Test\n    public void shouldInitMocksWithGivenSettings() throws Exception {\n        assertEquals(\"i have a name\", namedAndReturningMocks.toString());\n        assertNotNull(namedAndReturningMocks.iMethodsReturningMethod());\n       \n        assertEquals(\"returningDefaults\", returningDefaults.toString());\n        assertEquals(0, returningDefaults.intReturningMethod()); \n        \n        assertTrue(hasExtraInterfaces instanceof List);\n        \n        assertEquals(0, noExtraConfig.intReturningMethod());        \n    }",
        "begin_line": 82,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 73)",
            "(line 85,col 9)-(line 85,col 72)",
            "(line 87,col 9)-(line 87,col 72)",
            "(line 88,col 9)-(line 88,col 64)",
            "(line 90,col 9)-(line 90,col 55)",
            "(line 92,col 9)-(line 92,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.SuperBase.getSuperBaseMock()",
        "snippet": "        public IMethods getSuperBaseMock() {\n            return mock;\n        }",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 13)-(line 99,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.Base.getBaseMock()",
        "snippet": "        public IMethods getBaseMock() {\n            return mock;\n        }",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 13)-(line 107,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.AnnotationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/AnnotationsTest.java",
        "signature": "org.mockitousage.annotation.AnnotationsTest.Sub.getMock()",
        "snippet": "        public IMethods getMock() {\n            return mock;\n        }",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 13)-(line 115,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_init_spy_by_instance()",
        "snippet": "    @Test\n    public void should_init_spy_by_instance() throws Exception {\n        doReturn(\"foo\").when(spiedList).get(10);\n        assertEquals(\"foo\", spiedList.get(10));\n        assertTrue(spiedList.isEmpty());\n    }",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 48)",
            "(line 41,col 9)-(line 41,col 47)",
            "(line 42,col 9)-(line 42,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_init_spy_and_automatically_create_instance()",
        "snippet": "    @Test\n    public void should_init_spy_and_automatically_create_instance() throws Exception {\n        when(staticTypeWithNoArgConstructor.toString()).thenReturn(\"x\");\n        when(staticTypeWithoutDefinedConstructor.toString()).thenReturn(\"y\");\n        assertEquals(\"x\", staticTypeWithNoArgConstructor.toString());\n        assertEquals(\"y\", staticTypeWithoutDefinedConstructor.toString());\n    }",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 72)",
            "(line 48,col 9)-(line 48,col 77)",
            "(line 49,col 9)-(line 49,col 69)",
            "(line 50,col 9)-(line 50,col 74)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_prevent_spying_on_interfaces()",
        "snippet": "    @Test\n    public void should_prevent_spying_on_interfaces() throws Exception {\n        class WithSpy {\n            @Spy List<String> list;\n        }\n\n        WithSpy withSpy = new WithSpy();\n        try {\n            MockitoAnnotations.initMocks(withSpy);\n            fail();\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"is an interface and it cannot be spied on\");\n        }\n    }",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 57,col 9)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 65,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_allow_spying_on_interfaces_when_instance_is_concrete()",
        "snippet": "    @Test\n    public void should_allow_spying_on_interfaces_when_instance_is_concrete() throws Exception {\n        class WithSpy {\n            @Spy List<String> list = new LinkedList<String>();\n        }\n\n        WithSpy withSpy = new WithSpy();\n        //when\n        MockitoAnnotations.initMocks(withSpy);\n\n        //then\n        verify(withSpy.list, never()).clear();\n    }",
        "begin_line": 68,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 72,col 9)",
            "(line 74,col 9)-(line 74,col 40)",
            "(line 76,col 9)-(line 76,col 46)",
            "(line 79,col 9)-(line 79,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_report_when_no_arg_less_constructor()",
        "snippet": "    @Test\n    public void should_report_when_no_arg_less_constructor() throws Exception {\n        class FailingSpy {\n            @Spy\n            NoValidConstructor noValidConstructor;\n        }\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            fail();\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"0-arg constructor\");\n        }\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 87,col 9)",
            "(line 89,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_report_when_constructor_is_explosive()",
        "snippet": "    @Test\n    public void should_report_when_constructor_is_explosive() throws Exception {\n        class FailingSpy {\n            @Spy\n            ThrowingConstructor throwingConstructor;\n        }\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            fail();\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");\n        }\n    }",
        "begin_line": 97,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 102,col 9)",
            "(line 104,col 9)-(line 109,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_spy_abstract_class()",
        "snippet": "    @Test\n    public void should_spy_abstract_class() throws Exception {\n        class SpyAbstractClass {\n            @Spy AbstractList<String> list;\n            \n            List<String> asSingletonList(String s) {\n                when(list.size()).thenReturn(1);\n                when(list.get(0)).thenReturn(s);\n                return list;\n            }\n        }\n        SpyAbstractClass withSpy = new SpyAbstractClass();\n        MockitoAnnotations.initMocks(withSpy);\n        assertEquals(Arrays.asList(\"a\"), withSpy.asSingletonList(\"a\"));\n    }",
        "begin_line": 112,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 58)",
            "(line 124,col 9)-(line 124,col 46)",
            "(line 125,col 9)-(line 125,col 71)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.SpyAbstractClass.asSingletonList(java.lang.String)",
        "snippet": "            List<String> asSingletonList(String s) {\n                when(list.size()).thenReturn(1);\n                when(list.get(0)).thenReturn(s);\n                return list;\n            }",
        "begin_line": 117,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 118,col 17)-(line 118,col 48)",
            "(line 119,col 17)-(line 119,col 48)",
            "(line 120,col 17)-(line 120,col 28)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class()",
        "snippet": "    @Test\n    public void should_spy_inner_class() throws Exception {\n         \n     class WithMockAndSpy {\n            @Spy private InnerStrength strength;\n            @Mock private List<String> list;\n\n            abstract class InnerStrength {\n                private final String name;\n\n                InnerStrength() {\n                    // Make sure that @Mock fields are always injected before @Spy fields.\n                    assertNotNull(list);\n                    // Make sure constructor is indeed called.\n                    this.name = \"inner\";\n                }\n                \n                abstract String strength();\n                \n                String fullStrength() {\n                    return name + \" \" + strength();\n                }\n            }\n        }\n        WithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        assertEquals(\"inner strength\", outer.strength.fullStrength());\n    }",
        "begin_line": 128,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 131,col 6)-(line 151,col 9)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 63)",
            "(line 155,col 9)-(line 155,col 70)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.WithMockAndSpy.InnerStrength.InnerStrength()",
        "snippet": "                InnerStrength() {\n                    // Make sure that @Mock fields are always injected before @Spy fields.\n                    assertNotNull(list);\n                    // Make sure constructor is indeed called.\n                    this.name = \"inner\";\n                }",
        "begin_line": 138,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 140,col 21)-(line 140,col 40)",
            "(line 142,col 21)-(line 142,col 40)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.WithMockAndSpy.InnerStrength.strength()",
        "snippet": "                abstract String strength();",
        "begin_line": 145,
        "end_line": 145,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.WithMockAndSpy.InnerStrength.fullStrength()",
        "snippet": "                String fullStrength() {\n                    return name + \" \" + strength();\n                }",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 21)-(line 148,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_reset_spy()",
        "snippet": "    @Test(expected = IndexOutOfBoundsException.class)\n    public void should_reset_spy() throws Exception {\n        spiedList.get(10); // see shouldInitSpy\n    }",
        "begin_line": 158,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.should_report_when_encosing_instance_is_needed()",
        "snippet": "    @Test\n    public void should_report_when_encosing_instance_is_needed() throws Exception {\n        class Outer {\n            class Inner {}\n        }\n        class WithSpy {\n            @Spy private Outer.Inner inner;\n        }\n        try {\n            MockitoAnnotations.initMocks(new WithSpy());\n            fail();\n        } catch (MockitoException e) {\n            assertContains(\"@Spy annotation can only initialize inner classes\", e.getMessage());\n        }\n    }",
        "begin_line": 163,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 167,col 9)",
            "(line 168,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 176,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.NestedClassWithNoArgConstructor.NestedClassWithNoArgConstructor()",
        "snippet": "        NestedClassWithNoArgConstructor() { }",
        "begin_line": 182,
        "end_line": 182,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.NestedClassWithNoArgConstructor.NestedClassWithNoArgConstructor(java.lang.String)",
        "snippet": "        NestedClassWithNoArgConstructor(String f) { }",
        "begin_line": 183,
        "end_line": 183,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.NoValidConstructor.NoValidConstructor(java.lang.String)",
        "snippet": "        NoValidConstructor(String f) { }",
        "begin_line": 187,
        "end_line": 187,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.SpyAnnotationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "signature": "org.mockitousage.annotation.SpyAnnotationTest.ThrowingConstructor.ThrowingConstructor()",
        "snippet": "        ThrowingConstructor() { throw new RuntimeException(\"boo!\"); }",
        "begin_line": 191,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 191,col 33)-(line 191,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyInjectionTest.java",
        "signature": "org.mockitousage.annotation.SpyInjectionTest.HasSpy.setSpy(java.util.List)",
        "snippet": "        public void setSpy(List spy) {\n            this.spy = spy;\n        }        ",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 13)-(line 24,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.SpyInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/SpyInjectionTest.java",
        "signature": "org.mockitousage.annotation.SpyInjectionTest.shouldDoStuff()",
        "snippet": "    @Test\n    public void shouldDoStuff() throws Exception {\n        isMock(hasSpy.spy);\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test.mockJustWorks()",
        "snippet": "    @Test\n    public void mockJustWorks() {\n        issue421.checkIfMockIsInjected();\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test.Issue421.Issue421(int)",
        "snippet": "        public Issue421(int a) {\n        }",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java",
        "signature": "Issue421(ArticleCalculator)",
        "snippet": "        public Issue421(ArticleCalculator calculator) {\n            this.calculator = calculator;\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorIssue421Test.Issue421.checkIfMockIsInjected()",
        "snippet": "        public void checkIfMockIsInjected(){\n            assertThat(new MockUtil().isMock(calculator)).isTrue();\n        }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.shouldNotFailWhenNotInitialized()",
        "snippet": "    @Test\n    public void shouldNotFailWhenNotInitialized() {\n        assertNotNull(articleManager);\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.innerMockShouldRaiseAnExceptionThatChangesOuterMockBehavior()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void innerMockShouldRaiseAnExceptionThatChangesOuterMockBehavior() {\n        when(calculator.countArticles(\"new\")).thenThrow(new IllegalArgumentException());\n\n        articleManager.updateArticleCounters(\"new\");\n    }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 88)",
            "(line 53,col 9)-(line 53,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.mockJustWorks()",
        "snippet": "    @Test\n    public void mockJustWorks() {\n        articleManager.updateArticleCounters(\"new\");\n    }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.constructor_is_called_for_each_test_in_test_class()",
        "snippet": "    @Test\n    public void constructor_is_called_for_each_test_in_test_class() throws Exception {\n        // given\n        JUnitCore jUnitCore = new JUnitCore();\n        jUnitCore.addListener(new TextListener(System.out));\n\n        // when\n        jUnitCore.run(junit_test_with_3_tests_methods.class);\n\n        // then\n        assertThat(junit_test_with_3_tests_methods.constructor_instantiation).isEqualTo(3);\n    }",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 46)",
            "(line 65,col 9)-(line 65,col 60)",
            "(line 68,col 9)-(line 68,col 61)",
            "(line 71,col 9)-(line 71,col 91)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.objects_created_with_constructor_initialization_can_be_spied()",
        "snippet": "    @Test\n    public void objects_created_with_constructor_initialization_can_be_spied() throws Exception {\n        assertFalse(mockUtil.isMock(articleManager));\n        assertTrue(mockUtil.isMock(spiedArticleManager));\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 53)",
            "(line 77,col 9)-(line 77,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.should_report_failure_only_when_object_initialization_throws_exception()",
        "snippet": "    @Test\n    public void should_report_failure_only_when_object_initialization_throws_exception() throws Exception {\n\n        try {\n            MockitoAnnotations.initMocks(new ATest());\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.getMessage()).contains(\"failingConstructor\").contains(\"constructor\").contains(\"threw an exception\");\n            assertThat(e.getCause()).isInstanceOf(IllegalStateException.class);\n        }\n    }",
        "begin_line": 80,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 89,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.junit_test_with_3_tests_methods.test_1()",
        "snippet": "        @Test public void test_1() { }",
        "begin_line": 100,
        "end_line": 100,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.junit_test_with_3_tests_methods.test_2()",
        "snippet": "        @Test public void test_2() { }",
        "begin_line": 101,
        "end_line": 101,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.junit_test_with_3_tests_methods.test_3()",
        "snippet": "        @Test public void test_3() { }",
        "begin_line": 102,
        "end_line": 102,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.junit_test_with_3_tests_methods.some_class_with_parametered_constructor.some_class_with_parametered_constructor(java.util.List)",
        "snippet": "            public some_class_with_parametered_constructor(List collaborator) {\n                constructor_instantiation++;\n            }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 17)-(line 106,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.annotation.MockInjectionUsingConstructorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java",
        "signature": "org.mockitousage.annotation.MockInjectionUsingConstructorTest.FailingConstructor.FailingConstructor(java.util.Set)",
        "snippet": "        FailingConstructor(Set set) {\n            throw new IllegalStateException(\"always fail\");\n        }",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 13)-(line 113,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.setMockWithDowncast(org.mockitousage.puzzlers.OverloadingPuzzleTest.Super)",
        "snippet": "    private void setMockWithDowncast(Super mock) {\n        this.mock = mock;\n    }",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.Super.say(java.lang.Object)",
        "snippet": "        void say(Object message);",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.Sub.say(java.lang.String)",
        "snippet": "        void say(String message);",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.say(java.lang.Object)",
        "snippet": "    private void say(Object message) {\n        mock.say(message);\n    }",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.OverloadingPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/OverloadingPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.OverloadingPuzzleTest.shouldUseArgumentTypeWhenOverloadingPuzzleDetected()",
        "snippet": "    @Test\n    public void shouldUseArgumentTypeWhenOverloadingPuzzleDetected() throws Exception {\n        Sub sub = mock(Sub.class);\n        setMockWithDowncast(sub);\n        say(\"Hello\");\n        try {\n            verify(sub).say(\"Hello\");\n            fail();\n        } catch (WantedButNotInvoked e) {}\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 33)",
            "(line 37,col 9)-(line 37,col 21)",
            "(line 38,col 9)-(line 41,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super.say(T)",
        "snippet": "        public String say(T t) {\n            return \"Super says: \" + t;\n        }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 13)-(line 26,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Sub.say(java.lang.String)",
        "snippet": "        @Override\n        public String say(String t)  {\n            return \"Dummy says: \" + t;\n        }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.setMockWithDownCast(org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super)",
        "snippet": "    private void setMockWithDownCast(Super mock) {\n        this.mock = mock;\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.say(java.lang.String)",
        "snippet": "    private void say(String string) {\n        mock.say(string);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldHaveBridgeMethod()",
        "snippet": "    @Test\n    public void shouldHaveBridgeMethod() throws Exception {\n        Super s = new Sub();\n        \n        assertEquals(\"Dummy says: Hello\", s.say(\"Hello\"));\n        \n        assertThat(Sub.class, hasBridgeMethod(\"say\"));\n        assertThat(s, hasBridgeMethod(\"say\"));\n    }",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 28)",
            "(line 51,col 9)-(line 51,col 58)",
            "(line 53,col 9)-(line 53,col 54)",
            "(line 54,col 9)-(line 54,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
        "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldVerifyCorrectlyWhenBridgeMethodCalled()",
        "snippet": "    @Test\n    public void shouldVerifyCorrectlyWhenBridgeMethodCalled() throws Exception {\n        //Super has following erasure: say(Object) which differs from Dummy.say(String)\n        //mock has to detect it and do the super.say()\n        Sub s = mock(Sub.class);\n        setMockWithDownCast(s);\n        say(\"Hello\");\n        \n        verify(s).say(\"Hello\");\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 32)",
            "(line 62,col 9)-(line 62,col 31)",
            "(line 63,col 9)-(line 63,col 21)",
            "(line 65,col 9)-(line 65,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java",
        "signature": "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest.Foo.bar(long)",
        "snippet": "        void bar(long id);",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java",
        "signature": "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest.shouldNotThrowNPE()",
        "snippet": "    @Test\n    public void shouldNotThrowNPE() {\n        Foo f = mock(Foo.class);\n        f.bar(1);\n        verify(f).bar(any(Long.class));\n    }",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 32)",
            "(line 23,col 9)-(line 23,col 17)",
            "(line 24,col 9)-(line 24,col 39)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java",
        "signature": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.ToMock.getValue(java.lang.Integer)",
        "snippet": "        public Integer getValue(Integer param);",
        "begin_line": 28,
        "end_line": 28,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java",
        "signature": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.ToMock.getValues(java.lang.Integer)",
        "snippet": "        public List<Integer> getValues(Integer param);",
        "begin_line": 30,
        "end_line": 30,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java",
        "signature": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        this.executor = Executors.newSingleThreadExecutor();\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 60)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java",
        "signature": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.getConflictingRunnable(org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.ToMock)",
        "snippet": "    private Runnable getConflictingRunnable(final ToMock toMock) {\n        return new Runnable() {\n            public void run() {\n                while (true) {\n                    try {\n                        Thread.sleep((long) (Math.random() * 10));\n                    } catch (InterruptedException e) {\n                    }\n                    if (!toMock.getValues(0).isEmpty()) {\n                        fail(\"Shouldn't happen, were just making sure it wasn't optimized away...\");\n                    }\n                }\n            }\n        };\n    }",
        "begin_line": 51,
        "end_line": 65,
        "comment": "\n     * The returned runnable simply calls ToMock.getValues(int).\n     *\n     * @param toMock The mocked object\n     * @return The runnable.\n     ",
        "child_ranges": [
            "(line 52,col 9)-(line 64,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java",
        "signature": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.Anonymous-69cdf46e-6b87-4888-9d59-8fb248935bec.run()",
        "snippet": "            public void run() {\n                while (true) {\n                    try {\n                        Thread.sleep((long) (Math.random() * 10));\n                    } catch (InterruptedException e) {\n                    }\n                    if (!toMock.getValues(0).isEmpty()) {\n                        fail(\"Shouldn't happen, were just making sure it wasn't optimized away...\");\n                    }\n                }\n            }",
        "begin_line": 53,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 54,col 17)-(line 62,col 17)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java",
        "signature": "org.mockitousage.bugs.MultithreadedStubbingHalfManualTest.tryToRevealTheProblem()",
        "snippet": "    @Test\n    //this problem shows at 4 out of 5 executions\n    //it is not strictly a bug because Mockito does not support simultanous stubbing (see FAQ)\n    //however I decided to synchronize some calls in order to make the exceptions nicer \n    public void tryToRevealTheProblem() {\n        ToMock toMock = mock(ToMock.class);\n        for (int i = 0; i < 100; i++) {\n            int j = i % 11;\n\n            // Repeated mocking\n            when(toMock.getValue(i)).thenReturn(j);\n            //TODO make it also showing errors for doReturn()\n//            doReturn(j).when(toMock).getValue(i);\n\n            while (true) {\n                try {\n                    // Scheduling invocation\n                    this.executor.execute(getConflictingRunnable(toMock));\n                    break;\n                } catch (RejectedExecutionException ex) {\n                    fail();\n                }\n            }\n\n            try {\n                Thread.sleep(10 / ((i % 10) + 1)); //NOPMD\n            } catch (InterruptedException e) {\n            }\n        }\n    }",
        "begin_line": 67,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 43)",
            "(line 73,col 9)-(line 95,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java",
        "signature": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine()",
        "snippet": "    @Test \n    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n        //given\n        when(mock.otherMethod()).thenReturn(\"foo\");\n        \n        //when\n        mockTwo.simpleMethod(\"foo\");\n        \n        //then\n        verify(mockTwo).simpleMethod(mock.otherMethod());\n        try {\n            verify(mockTwo, never()).simpleMethod(mock.otherMethod());\n            fail();\n        } catch (NeverWantedButInvoked e) {}\n    }",
        "begin_line": 22,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 51)",
            "(line 28,col 9)-(line 28,col 36)",
            "(line 31,col 9)-(line 31,col 57)",
            "(line 32,col 9)-(line 35,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java",
        "signature": "org.mockitousage.bugs.IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.second_stubbing_throws_IndexOutOfBoundsException()",
        "snippet": "    @Test\n    public void second_stubbing_throws_IndexOutOfBoundsException() throws Exception {\n        Map<String, String> map = mock(Map.class);\n\n        OngoingStubbing<String> mapOngoingStubbing = when(map.get(anyString()));\n\n        mapOngoingStubbing.thenReturn(\"first stubbing\");\n\n        try {\n            mapOngoingStubbing.thenReturn(\"second stubbing\");\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.getMessage())\n                    .contains(\"Incorrect use of API detected here\")\n                    .contains(this.getClass().getSimpleName());\n        }\n    }",
        "begin_line": 21,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 50)",
            "(line 25,col 9)-(line 25,col 80)",
            "(line 27,col 9)-(line 27,col 56)",
            "(line 29,col 9)-(line 36,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java",
        "signature": "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest.ensure_the_test_runner_breaks()",
        "snippet": "    @Test\n    public void ensure_the_test_runner_breaks() throws Exception {\n        JUnitCore runner = new JUnitCore();\n        runner.addListener(new TextListener(System.out));\n\n        Result result = runner.run(TestClassWithoutTestMethod.class);\n\n        assertEquals(1, result.getFailureCount());\n        assertFalse(result.wasSuccessful());\n    }",
        "begin_line": 20,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 43)",
            "(line 23,col 9)-(line 23,col 57)",
            "(line 25,col 9)-(line 25,col 69)",
            "(line 27,col 9)-(line 27,col 50)",
            "(line 28,col 9)-(line 28,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java",
        "signature": "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest.TestClassWithoutTestMethod.notATestMethod()",
        "snippet": "        public void notATestMethod() { }",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.Issue353InjectionMightNotHappenInCertainConfigurationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/Issue353InjectionMightNotHappenInCertainConfigurationTest.java",
        "signature": "org.mockitousage.bugs.Issue353InjectionMightNotHappenInCertainConfigurationTest.when_identical_types_and_the_correct_mock_name_is_greater_than_the_non_matching_name_then_injection_occurs_only_on_the_named_one()",
        "snippet": "    @Test\n    public void when_identical_types_and_the_correct_mock_name_is_greater_than_the_non_matching_name_then_injection_occurs_only_on_the_named_one() {\n        assertThat(\"stringString_that_matches_field\".compareTo(\"mockStringInteger_was_not_injected\")).isGreaterThanOrEqualTo(1);\n\n        assertSame(stringString_that_matches_field, fooService.stringString_that_matches_field);\n        assertSame(mockStringInteger_was_not_injected, fooService.stringInteger_field);\n    }",
        "begin_line": 22,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 128)",
            "(line 26,col 9)-(line 26,col 96)",
            "(line 27,col 9)-(line 27,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java",
        "signature": "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest.shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS()",
        "snippet": "    @Test\n    public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS() {\n        IMethods mock = mock(IMethods.class, RETURNS_MOCKS);\n        when(mock.objectReturningMethodNoArgs()).thenReturn(null);\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 60)",
            "(line 20,col 9)-(line 20,col 66)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java",
        "signature": "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest.shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKSWithDoApi()",
        "snippet": "    @Test\n    public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKSWithDoApi() {\n        IMethods mock = mock(IMethods.class, RETURNS_MOCKS);\n        doReturn(null).when(mock).objectReturningMethodNoArgs();\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 60)",
            "(line 26,col 9)-(line 26,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java",
        "signature": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        target = Mockito.mock(ITarget.class);\n        fixedThreadPool = Executors.newFixedThreadPool(nThreads);\n    }",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 45)",
            "(line 38,col 9)-(line 38,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java",
        "signature": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest.shouldSuccessfullyVerifyConcurrentInvocationsWithTimeout()",
        "snippet": "    @Test\n    public void shouldSuccessfullyVerifyConcurrentInvocationsWithTimeout() throws Exception {\n        int potentialOverhead = 1000; // Leave 1000ms extra before timing out as leeway for test overheads\n        int expectedMaxTestLength = TIMES * INTERVAL_MILLIS + potentialOverhead;\n\n        reset(target);\n        startInvocations();\n        \n        verify(target, timeout(expectedMaxTestLength).times(TIMES * nThreads)).targetMethod(\"arg\");\n        verifyNoMoreInteractions(target);\n    }",
        "begin_line": 41,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 37)",
            "(line 44,col 9)-(line 44,col 80)",
            "(line 46,col 9)-(line 46,col 22)",
            "(line 47,col 9)-(line 47,col 27)",
            "(line 49,col 9)-(line 49,col 99)",
            "(line 50,col 9)-(line 50,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java",
        "signature": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest.startInvocations()",
        "snippet": "    private void startInvocations() throws InterruptedException,\n            ExecutionException {\n        \n        for(int i=0; i<nThreads; i++) {\n            fixedThreadPool.submit(new TargetInvoker(i));\n        }\n\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 58,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java",
        "signature": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest.TargetInvoker.TargetInvoker(int)",
        "snippet": "        TargetInvoker(int seq) {\n            this.seq = seq;\n        }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 27)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java",
        "signature": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest.TargetInvoker.call()",
        "snippet": "        public Object call() throws Exception {\n            System.err.println(\"started \" + seq);\n            for (int i = 0; i < TIMES; i++) {\n                Thread.yield();\n                target.targetMethod(\"arg\");\n                Thread.sleep((long) INTERVAL_MILLIS);\n            }\n            System.err.println(\"finished\" + seq);\n            return seq;\n        }",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 70,col 13)-(line 70,col 49)",
            "(line 71,col 13)-(line 75,col 13)",
            "(line 76,col 13)-(line 76,col 49)",
            "(line 77,col 13)-(line 77,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java",
        "signature": "org.mockitousage.bugs.ConcurrentModificationExceptionOnMultiThreadedVerificationTest.ITarget.targetMethod(java.lang.String)",
        "snippet": "        public String targetMethod(String arg);",
        "begin_line": 83,
        "end_line": 83,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.CovariantOverrideTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CovariantOverrideTest.java",
        "signature": "org.mockitousage.bugs.CovariantOverrideTest.ReturnsObject.callMe()",
        "snippet": "        Object callMe();",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.CovariantOverrideTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CovariantOverrideTest.java",
        "signature": "org.mockitousage.bugs.CovariantOverrideTest.ReturnsString.callMe()",
        "snippet": "        String callMe();",
        "begin_line": 22,
        "end_line": 22,
        "comment": " Java 5 covariant override of method from parent interface",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.CovariantOverrideTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CovariantOverrideTest.java",
        "signature": "org.mockitousage.bugs.CovariantOverrideTest.returnFoo1()",
        "snippet": "    @Test \n    public void returnFoo1() {\n        ReturnsObject mock = mock(ReturnsObject.class);\n        when(mock.callMe()).thenReturn(\"foo\");\n        assertEquals(\"foo\", mock.callMe()); // Passes\n    }",
        "begin_line": 25,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 55)",
            "(line 28,col 9)-(line 28,col 46)",
            "(line 29,col 9)-(line 29,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.CovariantOverrideTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CovariantOverrideTest.java",
        "signature": "org.mockitousage.bugs.CovariantOverrideTest.returnFoo2()",
        "snippet": "    @Test \n    public void returnFoo2() {\n        ReturnsString mock = mock(ReturnsString.class);\n        when(mock.callMe()).thenReturn(\"foo\");\n        assertEquals(\"foo\", mock.callMe()); // Passes\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 55)",
            "(line 35,col 9)-(line 35,col 46)",
            "(line 36,col 9)-(line 36,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.CovariantOverrideTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CovariantOverrideTest.java",
        "signature": "org.mockitousage.bugs.CovariantOverrideTest.returnFoo3()",
        "snippet": "    @Test \n    public void returnFoo3() {\n        ReturnsObject mock = mock(ReturnsString.class);\n        when(mock.callMe()).thenReturn(\"foo\");\n        assertEquals(\"foo\", mock.callMe()); // Passes\n    }",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 46)",
            "(line 43,col 9)-(line 43,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.CovariantOverrideTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CovariantOverrideTest.java",
        "signature": "org.mockitousage.bugs.CovariantOverrideTest.returnFoo4()",
        "snippet": "    @Test \n    public void returnFoo4() {\n        ReturnsString mock = mock(ReturnsString.class);\n        mock.callMe(); // covariant override not generated\n        ReturnsObject mock2 = mock; // Switch to base type to call covariant override\n        verify(mock2).callMe(); // Fails: java.lang.AssertionError: expected:<foo> but was:<null>\n    }",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 55)",
            "(line 49,col 9)-(line 49,col 22)",
            "(line 50,col 9)-(line 50,col 35)",
            "(line 51,col 9)-(line 51,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java",
        "signature": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest.should_compare_to_be_consistent_with_equals()",
        "snippet": "    @Test\n    public void should_compare_to_be_consistent_with_equals() {\n        //given\n        Date today    = mock(Date.class);\n        Date tomorrow = mock(Date.class);\n\n        //when\n        Set<Date> set = new TreeSet<Date>();\n        set.add(today);\n        set.add(tomorrow);\n\n        //then\n        assertEquals(2, set.size());\n    }",
        "begin_line": 22,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 41)",
            "(line 26,col 9)-(line 26,col 41)",
            "(line 29,col 9)-(line 29,col 44)",
            "(line 30,col 9)-(line 30,col 23)",
            "(line 31,col 9)-(line 31,col 26)",
            "(line 34,col 9)-(line 34,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java",
        "signature": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest.should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference()",
        "snippet": "    @Test\n    public void should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference() {\n        //given\n        Date today    = mock(Date.class);\n\n        //when\n        Set<Date> set = new TreeSet<Date>();\n        set.add(today);\n        set.add(today);\n\n        //then\n        assertEquals(1, set.size());\n    }",
        "begin_line": 37,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 41)",
            "(line 43,col 9)-(line 43,col 44)",
            "(line 44,col 9)-(line 44,col 23)",
            "(line 45,col 9)-(line 45,col 23)",
            "(line 48,col 9)-(line 48,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java",
        "signature": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest.should_allow_stubbing_and_verifying_compare_to()",
        "snippet": "    @Test\n    public void should_allow_stubbing_and_verifying_compare_to() {\n        //given\n        Date mock    = mock(Date.class);\n        when(mock.compareTo(any(Date.class))).thenReturn(10);\n\n        //when\n        mock.compareTo(new Date());\n\n        //then\n        assertEquals(10, mock.compareTo(new Date()));\n        verify(mock, atLeastOnce()).compareTo(any(Date.class));\n    }",
        "begin_line": 51,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 40)",
            "(line 55,col 9)-(line 55,col 61)",
            "(line 58,col 9)-(line 58,col 35)",
            "(line 61,col 9)-(line 61,col 53)",
            "(line 62,col 9)-(line 62,col 63)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java",
        "signature": "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest.should_reset_not_remove_default_stubbing()",
        "snippet": "    @Test\n    public void should_reset_not_remove_default_stubbing() {\n        //given\n        Date mock    = mock(Date.class);\n        reset(mock);\n\n        //then\n        assertEquals(1, mock.compareTo(new Date()));\n    }",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 40)",
            "(line 69,col 9)-(line 69,col 20)",
            "(line 72,col 9)-(line 72,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldAllowInlineMockCreationTest.java",
        "signature": "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest.shouldAllowInlineMockCreation()",
        "snippet": "    @Test\n    public void shouldAllowInlineMockCreation() {\n        when(list.get(0)).thenReturn(mock(Set.class));\n        assertTrue(list.get(0) instanceof Set);\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 54)",
            "(line 28,col 9)-(line 28,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java",
        "signature": "org.mockitousage.bugs.BridgeMethodsHitAgainTest.SomeInterface.factory()",
        "snippet": "    Factory factory();",
        "begin_line": 24,
        "end_line": 24,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java",
        "signature": "org.mockitousage.bugs.BridgeMethodsHitAgainTest.SomeSubInterface.factory()",
        "snippet": "    ExtendedFactory factory();",
        "begin_line": 28,
        "end_line": 28,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java",
        "signature": "org.mockitousage.bugs.BridgeMethodsHitAgainTest.basicCheck()",
        "snippet": "  @Test\n  public void basicCheck() {\n    Mockito.when((someSubInterface).factory()).thenReturn(extendedFactory);\n    SomeInterface si = someSubInterface;\n    assertTrue(si.factory() != null);\n  }",
        "begin_line": 34,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 36,col 75)",
            "(line 37,col 5)-(line 37,col 40)",
            "(line 38,col 5)-(line 38,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java",
        "signature": "org.mockitousage.bugs.BridgeMethodsHitAgainTest.checkWithExtraCast()",
        "snippet": "  @Test\n  public void checkWithExtraCast() {\n    Mockito.when(((SomeInterface) someSubInterface).factory()).thenReturn(extendedFactory);\n    SomeInterface si = someSubInterface;\n    assertTrue(si.factory() != null);\n  }",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 91)",
            "(line 44,col 5)-(line 44,col 40)",
            "(line 45,col 5)-(line 45,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java",
        "signature": "org.mockitousage.bugs.NPEWhenMockingThrowablesTest.shouldNotThrowNPE()",
        "snippet": "    @Test\n    public void shouldNotThrowNPE() {\n        when(mock.simpleMethod()).thenThrow(mock2);\n        try {\n            mock.simpleMethod();\n            fail();\n        } catch(DummyException e) {}\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "issue 70",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 51)",
            "(line 28,col 9)-(line 31,col 36)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java",
        "signature": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest.IProgressMonitor.beginTask(java.lang.String, int)",
        "snippet": "        void beginTask(String s, int i);",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java",
        "signature": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest.IProgressMonitor.worked(int)",
        "snippet": "        void worked(int i);",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java",
        "signature": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest.IProgressMonitor.done()",
        "snippet": "        void done();",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java",
        "signature": "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest.testCompleteProgress()",
        "snippet": "    @Test\n    public void testCompleteProgress() throws Exception {\n        IProgressMonitor progressMonitor = mock(IProgressMonitor.class);\n\n        progressMonitor.beginTask(\"foo\", 12);\n        progressMonitor.worked(10);\n        progressMonitor.done();\n\n        verify(progressMonitor).beginTask(anyString(), anyInt());\n        verify(progressMonitor, atLeastOnce()).worked(anyInt());\n    }",
        "begin_line": 24,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 72)",
            "(line 28,col 9)-(line 28,col 45)",
            "(line 29,col 9)-(line 29,col 35)",
            "(line 30,col 9)-(line 30,col 31)",
            "(line 32,col 9)-(line 32,col 65)",
            "(line 33,col 9)-(line 33,col 64)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ChildWithSameParentFieldInjectionTest.java",
        "signature": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest.parent_field_is_not_null()",
        "snippet": "    @Test\n    public void parent_field_is_not_null() {\n        assertNotNull(((AbstractSystem) system).someService);\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ChildWithSameParentFieldInjectionTest.java",
        "signature": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest.child_field_is_not_null()",
        "snippet": "    @Test\n    public void child_field_is_not_null() {\n        assertNotNull(system.someService);\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ChildWithSameParentFieldInjectionTest.java",
        "signature": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest.System.doSomethingElse()",
        "snippet": "        public void doSomethingElse() {\n            someService.doSomething();\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ChildWithSameParentFieldInjectionTest.java",
        "signature": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest.AbstractSystem.doSomething()",
        "snippet": "        public void doSomething() {\n            someService.doSomething();\n        }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 13)-(line 46,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ChildWithSameParentFieldInjectionTest.java",
        "signature": "org.mockitousage.bugs.ChildWithSameParentFieldInjectionTest.SomeService.doSomething()",
        "snippet": "        public void doSomething() {\n        }",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java",
        "signature": "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest.shouldAllowCapturingArguments()",
        "snippet": "    @Test\n    public void shouldAllowCapturingArguments() {\n        //given\n        mock.simpleMethod(\"o\");\n        ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class);\n        \n        //when\n        verify(mock, only()).simpleMethod(arg.capture());\n\n        //then\n        assertEquals(\"o\", arg.getValue());\n    }",
        "begin_line": 21,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 31)",
            "(line 25,col 9)-(line 25,col 75)",
            "(line 28,col 9)-(line 28,col 57)",
            "(line 31,col 9)-(line 31,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotTryToInjectInFinalOrStaticFieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotTryToInjectInFinalOrStaticFieldsTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotTryToInjectInFinalOrStaticFieldsTest.dont_fail_with_CONSTANTS()",
        "snippet": "    @Test\n    public void dont_fail_with_CONSTANTS() throws Exception {\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotTryToInjectInFinalOrStaticFieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotTryToInjectInFinalOrStaticFieldsTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotTryToInjectInFinalOrStaticFieldsTest.dont_inject_in_final()",
        "snippet": "    @Test\n    public void dont_inject_in_final() {\n        assertNotSame(unrelatedSet, exampleService.aSet);\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsErrorWhenCallingRealMethodTest.java",
        "signature": "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest.Foo.blah(java.lang.String, java.lang.String, java.lang.Object...)",
        "snippet": "        int blah(String a, String b, Object ... c) {\n            return 1;\n        }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 13)-(line 16,col 21)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/VarargsErrorWhenCallingRealMethodTest.java",
        "signature": "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest.shouldNotThrowAnyException()",
        "snippet": "    @Test\n    public void shouldNotThrowAnyException() throws Exception {\n        Foo foo = mock(Foo.class);\n\n        when(foo.blah(anyString(), anyString())).thenCallRealMethod();\n\n        assertEquals(1, foo.blah(\"foo\", \"bar\"));\n    }",
        "begin_line": 20,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 34)",
            "(line 24,col 9)-(line 24,col 70)",
            "(line 26,col 9)-(line 26,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java",
        "signature": "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified.SomeMethods.allowedMethod()",
        "snippet": "        public void allowedMethod() {\n        }",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java",
        "signature": "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified.SomeMethods.disallowedMethod()",
        "snippet": "        public void disallowedMethod() {\n        }",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java",
        "signature": "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified.shouldFailBecauseDisallowedMethodWasCalled()",
        "snippet": "    @Test(expected = org.mockito.exceptions.verification.NoInteractionsWanted.class)\n    public void shouldFailBecauseDisallowedMethodWasCalled(){\n        SomeMethods someMethods = mock(SomeMethods.class);\n\n        someMethods.allowedMethod();\n        someMethods.disallowedMethod();\n        \n        verify(someMethods, atLeast(1)).allowedMethod();\n        verifyNoMoreInteractions(someMethods);\n    }",
        "begin_line": 21,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 58)",
            "(line 25,col 9)-(line 25,col 36)",
            "(line 26,col 9)-(line 26,col 39)",
            "(line 28,col 9)-(line 28,col 56)",
            "(line 29,col 9)-(line 29,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentTestMockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentTestMockInjectionTest.java",
        "signature": "org.mockitousage.bugs.ParentTestMockInjectionTest.injectMocksShouldInjectMocksFromTestSuperClasses()",
        "snippet": "    @Test\n    public void injectMocksShouldInjectMocksFromTestSuperClasses() {\n        ImplicitTest it = new ImplicitTest();\n        MockitoAnnotations.initMocks(it);\n\n        assertNotNull(it.daoFromParent);\n        assertNotNull(it.daoFromSub);\n        assertNotNull(it.sut.daoFromParent);\n        assertNotNull(it.sut.daoFromSub);\n    }",
        "begin_line": 19,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 45)",
            "(line 22,col 9)-(line 22,col 41)",
            "(line 24,col 9)-(line 24,col 40)",
            "(line 25,col 9)-(line 25,col 37)",
            "(line 26,col 9)-(line 26,col 44)",
            "(line 27,col 9)-(line 27,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentTestMockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentTestMockInjectionTest.java",
        "signature": "org.mockitousage.bugs.ParentTestMockInjectionTest.ImplicitTest.setup()",
        "snippet": "        @Before\n        public void setup() {\n            MockitoAnnotations.initMocks(this);\n        }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 13)-(line 43,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentTestMockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentTestMockInjectionTest.java",
        "signature": "org.mockitousage.bugs.ParentTestMockInjectionTest.ImplicitTest.noNullPointerException()",
        "snippet": "        @Test\n        public void noNullPointerException() {\n            sut.businessMethod();\n        }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentTestMockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentTestMockInjectionTest.java",
        "signature": "org.mockitousage.bugs.ParentTestMockInjectionTest.TestedSystem.businessMethod()",
        "snippet": "        public void businessMethod() {\n            daoFromParent.doQuery();\n            daoFromSub.doQuery();\n        }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 13)-(line 57,col 36)",
            "(line 58,col 13)-(line 58,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentTestMockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentTestMockInjectionTest.java",
        "signature": "org.mockitousage.bugs.ParentTestMockInjectionTest.DaoA.doQuery()",
        "snippet": "        public void doQuery() { }",
        "begin_line": 64,
        "end_line": 64,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ParentTestMockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentTestMockInjectionTest.java",
        "signature": "org.mockitousage.bugs.ParentTestMockInjectionTest.DaoB.doQuery()",
        "snippet": "        public void doQuery() { }",
        "begin_line": 68,
        "end_line": 68,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/TimeoutWithAtMostOrNeverShouldBeDisabledTest.java",
        "signature": "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest.shouldDisableTimeoutForAtMost()",
        "snippet": "    @Test\n    public void shouldDisableTimeoutForAtMost() {\n        try {\n            verify(mock, timeout(30000).atMost(1)).simpleMethod();\n            fail();\n        } catch (FriendlyReminderException e) {}\n    }",
        "begin_line": 22,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 27,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/TimeoutWithAtMostOrNeverShouldBeDisabledTest.java",
        "signature": "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest.shouldDisableTimeoutForNever()",
        "snippet": "    @Test\n    public void shouldDisableTimeoutForNever() {\n        try {\n            verify(mock, timeout(30000).never()).simpleMethod();\n            fail();\n        } catch (FriendlyReminderException e) {}\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 35,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java",
        "signature": "org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName()",
        "snippet": "    @Test\n    public void shouldPrintNiceName() {\n        //when\n        veryCoolSpy.add(1);\n\n        try {\n            verify(veryCoolSpy).add(2);\n            fail();\n        } catch(AssertionError e) {\n            Assertions.assertThat(e.getMessage()).contains(\"veryCoolSpy\");\n        }\n    }",
        "begin_line": 23,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 27)",
            "(line 28,col 9)-(line 33,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java",
        "signature": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.Fun.doFun(java.lang.String)",
        "snippet": "        String doFun(String something);",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java",
        "signature": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument()",
        "snippet": "    @Test\n    public void shouldAllowPassingNullArgument() {\n        //given\n        Fun mockFun = mock(Fun.class);\n        when(mockFun.doFun((String) anyObject())).thenReturn(\"value\");\n\n        //when\n        mockFun.doFun(null);\n\n        //then\n        try {\n            verify(mockFun).doFun(\"hello\");\n            fail();\n        } catch(AssertionError r) {\n            //it's ok, we just want to reproduce the bug\n        }\n    }",
        "begin_line": 20,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 38)",
            "(line 24,col 9)-(line 24,col 70)",
            "(line 27,col 9)-(line 27,col 28)",
            "(line 30,col 9)-(line 35,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java",
        "signature": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest.Fun.doFun(double)",
        "snippet": "        void doFun(double prmitive);",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java",
        "signature": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest.Fun.moreFun(int)",
        "snippet": "        void moreFun(int howMuch);",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java",
        "signature": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest.shouldAutoboxSafely()",
        "snippet": "    @Test\n    public void shouldAutoboxSafely() {\n        //given\n        fun.doFun(1.0);\n        \n        //then\n        verify(fun).doFun(captor.capture());\n        assertEquals((Double) 1.0, captor.getValue());\n    }",
        "begin_line": 27,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 23)",
            "(line 33,col 9)-(line 33,col 44)",
            "(line 34,col 9)-(line 34,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java",
        "signature": "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest.shouldAutoboxAllPrimitives()",
        "snippet": "    @Test\n    public void shouldAutoboxAllPrimitives() {\n        verify(fun, never()).moreFun(intCaptor.capture());\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.SuperClass.isValid()",
        "snippet": "        public boolean isValid() {\n          return false;\n        }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 11)-(line 34,col 23)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.SuperClass.arg(java.lang.Object)",
        "snippet": "        public int arg(Object o) { return 0; }",
        "begin_line": 36,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 36,col 36)-(line 36,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.only_if_CglibMockMaker()",
        "snippet": "    @Before\n    public void only_if_CglibMockMaker() {\n        // CGLIB issue ; not reproducible with ByteBuddy\n        Assume.assumeTrue(\"CglibMockMaker\".equals(Plugins.getMockMaker().getClass().getSimpleName()));\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 102)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.hints_that_parent_not_public_during_stubbing()",
        "snippet": "    @Test\n    public void hints_that_parent_not_public_during_stubbing() throws Exception {\n        ClassForMocking clazzMock = mock(ClassForMocking.class);\n        try {\n            when(clazzMock.isValid()).thenReturn(true);\n            fail();\n        } catch (MissingMethodInvocationException e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n        }\n    }",
        "begin_line": 48,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 64)",
            "(line 51,col 9)-(line 57,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.hints_that_parent_not_public_during_stubbing_start()",
        "snippet": "    @Test\n    public void hints_that_parent_not_public_during_stubbing_start() throws Exception {\n        ClassForMocking clazzMock = mock(ClassForMocking.class);\n        mock(List.class).clear();\n        try {\n            //Mockito thinks that we're stubbing void 'clear' method here and reports that boolean value cannot stub void method\n            when(clazzMock.isValid()).thenReturn(true);\n            fail();\n        } catch (CannotStubVoidMethodWithReturnValue e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n        }\n    }",
        "begin_line": 60,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 64)",
            "(line 63,col 9)-(line 63,col 33)",
            "(line 64,col 9)-(line 71,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.hints_that_parent_not_public_during_verify()",
        "snippet": "    @Test\n    public void hints_that_parent_not_public_during_verify() throws Exception {\n        ClassForMocking clazzMock = mock(ClassForMocking.class);\n        verify(clazzMock).isValid();\n        try {\n            //Since Mockito did not see 'isValid()' method, we will report unfinished verification\n            verify(clazzMock);\n            fail();\n        } catch (UnfinishedVerificationException e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n        }\n    }",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 64)",
            "(line 77,col 9)-(line 77,col 36)",
            "(line 78,col 9)-(line 85,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ParentClassNotPublicTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ParentClassNotPublicTest.java",
        "signature": "org.mockitousage.bugs.ParentClassNotPublicTest.hints_that_parent_not_public_when_misplaced_matchers_detected()",
        "snippet": "    @Test\n    public void hints_that_parent_not_public_when_misplaced_matchers_detected() throws Exception {\n        ClassForMocking clazzMock = mock(ClassForMocking.class);\n        try {\n            //Mockito does not see 'arg()' method so the anyObject() matcher is reported as misplaced\n            when(clazzMock.arg(anyObject())).thenReturn(0);\n            fail();\n        } catch (InvalidUseOfMatchersException e) {\n            Assertions.assertThat(e.getMessage())\n                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n        }\n    }",
        "begin_line": 88,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 64)",
            "(line 91,col 9)-(line 98,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.failIfMockIsSharedBetweenThreads()",
        "snippet": "    @Test\n    public void failIfMockIsSharedBetweenThreads() throws Exception {\n        Service service = Mockito.mock(Service.class);\n        ExecutorService threads = Executors.newCachedThreadPool();\n        AtomicInteger counter = new AtomicInteger(2);\n\n        // registed answer on verySlowMethod\n\n        Mockito.when(service.verySlowMethod()).thenAnswer(new LockingAnswer(counter));\n\n        // execute verySlowMethod twice in separate threads\n\n        threads.execute(new ServiceRunner(service));\n        threads.execute(new ServiceRunner(service));\n\n        // waiting for threads to finish\n\n        threads.shutdown();\n\n        if (!threads.awaitTermination(1000, TimeUnit.MILLISECONDS)) {\n            // threads were timed-out\n            Assert.fail();\n        }\n    }",
        "begin_line": 21,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 54)",
            "(line 24,col 9)-(line 24,col 66)",
            "(line 25,col 9)-(line 25,col 53)",
            "(line 29,col 9)-(line 29,col 86)",
            "(line 33,col 9)-(line 33,col 52)",
            "(line 34,col 9)-(line 34,col 52)",
            "(line 38,col 9)-(line 38,col 27)",
            "(line 40,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.successIfEveryThreadHasItsOwnMock()",
        "snippet": "    @Test\n    public void successIfEveryThreadHasItsOwnMock() {}",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.LockingAnswer.LockingAnswer(java.util.concurrent.atomic.AtomicInteger)",
        "snippet": "        public LockingAnswer(AtomicInteger counter) {\n            this.counter = counter;\n        }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.LockingAnswer.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "        public String answer(InvocationOnMock invocation) throws Throwable {\n            counter.decrementAndGet();\n\n            while (counter.get() != 0) {\n                Thread.sleep(10);\n            }\n\n            return null;\n        }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "\n         * Decrement counter and wait until counter has value 0\n         ",
        "child_ranges": [
            "(line 88,col 13)-(line 88,col 38)",
            "(line 90,col 13)-(line 92,col 13)",
            "(line 94,col 13)-(line 94,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.ServiceRunner.ServiceRunner(org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.Service)",
        "snippet": "        public ServiceRunner(Service service) {\n            this.service = service;\n        }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 13)-(line 104,col 35)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.ServiceRunner.run()",
        "snippet": "        public void run() {\n            service.verySlowMethod();\n        }",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 108,col 13)-(line 108,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java",
        "signature": "org.mockitousage.bugs.ShouldNotDeadlockAnswerExecutionTest.Service.verySlowMethod()",
        "snippet": "        String verySlowMethod();",
        "begin_line": 115,
        "end_line": 115,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
        "signature": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.TestMock.m1()",
        "snippet": "        boolean m1();",
        "begin_line": 14,
        "end_line": 14,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
        "signature": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_ClassCastException_when_mock_verification_fails()",
        "snippet": "    @Test(expected = NoInteractionsWanted.class)\n    public void should_not_throw_ClassCastException_when_mock_verification_fails() {\n        TestMock test = mock(TestMock.class, new Answer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }\n        });\n        test.m1();\n        verifyZeroInteractions(test);\n    }",
        "begin_line": 17,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 23,col 11)",
            "(line 24,col 9)-(line 24,col 18)",
            "(line 25,col 9)-(line 25,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
        "signature": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.Anonymous-91c91630-9816-487d-b25a-78a1580a031d.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 17)-(line 21,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
        "signature": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_report_bogus_default_answer()",
        "snippet": "    @Test(expected = WrongTypeOfReturnValue.class)\n    public void should_report_bogus_default_answer() throws Exception {\n        TestMock test = mock(TestMock.class, new Answer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }\n        });\n\n        test.toString();\n    }",
        "begin_line": 28,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 34,col 11)",
            "(line 36,col 9)-(line 36,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
        "signature": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.Anonymous-4fa46670-02f6-4e7d-b28d-264701616ba7.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 17)-(line 32,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.EqualsWithDeltaTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/EqualsWithDeltaTest.java",
        "signature": "org.mockitousage.bugs.EqualsWithDeltaTest.testEqualsWithDelta_NullExpected()",
        "snippet": "    @Test\n    public void testEqualsWithDelta_NullExpected() throws Exception {\n        Matcher<Number> matcher = equalsWithDelta(null);\n        assertThat(matcher.matches(1.0)).isFalse();\n    }",
        "begin_line": 11,
        "end_line": 15,
        "comment": "",
        "child_ranges": [
            "(line 13,col 9)-(line 13,col 56)",
            "(line 14,col 9)-(line 14,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.EqualsWithDeltaTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/EqualsWithDeltaTest.java",
        "signature": "org.mockitousage.bugs.EqualsWithDeltaTest.testEqualsWithDelta_NullActual()",
        "snippet": "    @Test\n    public void testEqualsWithDelta_NullActual() throws Exception {\n        Matcher<Number> matcher = equalsWithDelta(1.0);\n        assertThat(matcher.matches(null)).isFalse();\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 55)",
            "(line 20,col 9)-(line 20,col 52)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.EqualsWithDeltaTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/EqualsWithDeltaTest.java",
        "signature": "org.mockitousage.bugs.EqualsWithDeltaTest.testEqualsWithDelta_NullActualAndExpected()",
        "snippet": "    @Test\n    public void testEqualsWithDelta_NullActualAndExpected() throws Exception {\n        Matcher<Number> matcher = equalsWithDelta(null);\n        assertThat(matcher.matches(null)).isTrue();\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 56)",
            "(line 26,col 9)-(line 26,col 51)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.EqualsWithDeltaTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/EqualsWithDeltaTest.java",
        "signature": "org.mockitousage.bugs.EqualsWithDeltaTest.testEqualsWithDelta_WhenActualAndExpectedAreTheSameObject()",
        "snippet": "    @Test\n    public void testEqualsWithDelta_WhenActualAndExpectedAreTheSameObject() throws Exception {\n        Double expected = 1.0;\n        Double actual = expected;\n        Matcher<Number> matcher = equalsWithDelta(expected);\n        assertThat(matcher.matches(actual)).isTrue();\n    }",
        "begin_line": 29,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 30)",
            "(line 32,col 9)-(line 32,col 33)",
            "(line 33,col 9)-(line 33,col 60)",
            "(line 34,col 9)-(line 34,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.EqualsWithDeltaTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/EqualsWithDeltaTest.java",
        "signature": "org.mockitousage.bugs.EqualsWithDeltaTest.equalsWithDelta(java.lang.Double)",
        "snippet": "    public Matcher<Number> equalsWithDelta(final Double expected) {\n        return new EqualsWithDelta(expected, .000001);\n    }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.FinalHashCodeAndEqualsRaiseNPEInInitMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/FinalHashCodeAndEqualsRaiseNPEInInitMocksTest.java",
        "signature": "org.mockitousage.bugs.FinalHashCodeAndEqualsRaiseNPEInInitMocksTest.dont_raise_NullPointerException()",
        "snippet": "    @Test\n    public void dont_raise_NullPointerException() throws Exception {\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.FinalHashCodeAndEqualsRaiseNPEInInitMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/FinalHashCodeAndEqualsRaiseNPEInInitMocksTest.java",
        "signature": "org.mockitousage.bugs.FinalHashCodeAndEqualsRaiseNPEInInitMocksTest.ConstructorCharsetHolder.ConstructorCharsetHolder(java.nio.charset.Charset)",
        "snippet": "        public ConstructorCharsetHolder(Charset charset) {\n        }",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.MultipleInOrdersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/MultipleInOrdersTest.java",
        "signature": "org.mockitousage.bugs.MultipleInOrdersTest.inOrderTest()",
        "snippet": "    @Test\n    public void inOrderTest(){\n        List list= mock(List.class);\n        \n        list.add(\"a\");\n        list.add(\"x\");\n        list.add(\"b\");\n        list.add(\"y\");\n        \n        InOrder inOrder = inOrder(list);\n        InOrder inAnotherOrder = inOrder(list);\n        assertNotSame(inOrder, inAnotherOrder);\n        \n        inOrder.verify(list).add(\"a\");\n        inOrder.verify(list).add(\"b\");\n        \n        inAnotherOrder.verify(list).add(\"x\");\n        inAnotherOrder.verify(list).add(\"y\");\n    }",
        "begin_line": 18,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 36)",
            "(line 22,col 9)-(line 22,col 22)",
            "(line 23,col 9)-(line 23,col 22)",
            "(line 24,col 9)-(line 24,col 22)",
            "(line 25,col 9)-(line 25,col 22)",
            "(line 27,col 9)-(line 27,col 40)",
            "(line 28,col 9)-(line 28,col 47)",
            "(line 29,col 9)-(line 29,col 47)",
            "(line 31,col 9)-(line 31,col 38)",
            "(line 32,col 9)-(line 32,col 38)",
            "(line 34,col 9)-(line 34,col 45)",
            "(line 35,col 9)-(line 35,col 45)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
        "signature": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.MyIterable.iterator()",
        "snippet": "        public MyIterator<T> iterator();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
        "signature": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldStubbingWork()",
        "snippet": "    @Test\n    public void shouldStubbingWork() {\n        Mockito.when(iterable.iterator()).thenReturn(myIterator);\n        Assert.assertNotNull(((Iterable) iterable).iterator());\n        Assert.assertNotNull(iterable.iterator());\n    }",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 65)",
            "(line 40,col 9)-(line 40,col 63)",
            "(line 41,col 9)-(line 41,col 50)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
        "signature": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldVerificationWorks()",
        "snippet": "    @Test\n    public void shouldVerificationWorks() {\n        iterable.iterator();\n        \n        verify(iterable).iterator();\n        verify((Iterable) iterable).iterator();\n    }",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 28)",
            "(line 48,col 9)-(line 48,col 36)",
            "(line 49,col 9)-(line 49,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
        "signature": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldWorkExactlyAsJavaProxyWould()",
        "snippet": "    @Test\n    public void shouldWorkExactlyAsJavaProxyWould() {\n        //given\n        final List<Method> methods = new LinkedList<Method>();\n        InvocationHandler handler = new InvocationHandler() {\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            methods.add(method);\n            return null;\n        }};\n            \n        iterable = (MyIterable) Proxy.newProxyInstance(\n                this.getClass().getClassLoader(),\n                new Class[] { MyIterable.class },\n                handler);\n\n        //when\n        iterable.iterator();\n        ((Iterable) iterable).iterator();\n        \n        //then\n        assertEquals(2, methods.size());\n        assertEquals(methods.get(0), methods.get(1));\n    }  ",
        "begin_line": 52,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 62)",
            "(line 56,col 9)-(line 60,col 11)",
            "(line 62,col 9)-(line 65,col 25)",
            "(line 68,col 9)-(line 68,col 28)",
            "(line 69,col 9)-(line 69,col 41)",
            "(line 72,col 9)-(line 72,col 40)",
            "(line 73,col 9)-(line 73,col 53)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
        "signature": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.Anonymous-fc89bbfd-ba21-4496-84ed-4c25fa838830.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
        "snippet": "        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            methods.add(method);\n            return null;\n        }};",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 13)-(line 58,col 32)",
            "(line 59,col 13)-(line 59,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java",
        "signature": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.just_for_information_fields_are_read_in_declaration_order_see_Service()",
        "snippet": "    @Test\n    public void just_for_information_fields_are_read_in_declaration_order_see_Service() {\n        Field[] declaredFields = Service.class.getDeclaredFields();\n\n        assertEquals(\"mockShouldNotGoInHere\", declaredFields[0].getName());\n        assertEquals(\"mockShouldGoInHere\", declaredFields[1].getName());\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 67)",
            "(line 34,col 9)-(line 34,col 75)",
            "(line 35,col 9)-(line 35,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java",
        "signature": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.mock_should_be_injected_once_and_in_the_best_matching_type()",
        "snippet": "    @Test\n    public void mock_should_be_injected_once_and_in_the_best_matching_type() {\n        assertSame(REFERENCE, illegalInjectionExample.mockShouldNotGoInHere);\n        assertSame(mockedBean, illegalInjectionExample.mockShouldGoInHere);\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 77)",
            "(line 41,col 9)-(line 41,col 75)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java",
        "signature": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.should_match_be_consistent_regardless_of_order()",
        "snippet": "    @Test\n    public void should_match_be_consistent_regardless_of_order() {\n        assertSame(REFERENCE, reversedOrderService.mockShouldNotGoInHere);\n        assertSame(mockedBean, reversedOrderService.mockShouldGoInHere);\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 74)",
            "(line 47,col 9)-(line 47,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java",
        "signature": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.should_inject_the_mock_only_once_and_in_the_correct_type()",
        "snippet": "    @Test\n    public void should_inject_the_mock_only_once_and_in_the_correct_type() {\n        assertNull(withNullObjectField.keepMeNull);\n        assertSame(mockedBean, withNullObjectField.injectMePlease);\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 51)",
            "(line 53,col 9)-(line 53,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.clearState()",
        "snippet": "    @After\n    public void clearState() {\n        this.resetState();\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassed()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntegerPassed() {\n        mock.intArgumentMethod(100);\n\n        verify(mock).intArgumentMethod(isA(Integer.class));\n    }",
        "begin_line": 26,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 36)",
            "(line 30,col 9)-(line 30,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntPassed() {\n        mock.intArgumentMethod(100);\n        \n        verify(mock).intArgumentMethod(isA(Integer.class));\n    }",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 36)",
            "(line 37,col 9)-(line 37,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassedToEq()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntegerPassedToEq() {\n        mock.intArgumentMethod(100);\n        \n        verify(mock).intArgumentMethod(eq(new Integer(100)));\n    }",
        "begin_line": 40,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 36)",
            "(line 44,col 9)-(line 44,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassedToSame()",
        "snippet": "    @Test\n    public void shouldNotThrowNPEWhenIntegerPassedToSame() {\n        mock.intArgumentMethod(100);\n\n        verify(mock, never()).intArgumentMethod(same(new Integer(100)));\n    }",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 36)",
            "(line 51,col 9)-(line 51,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToEq()",
        "snippet": "    @Test(expected = AssertionError.class)\n    public void shouldNotThrowNPEWhenNullPassedToEq() {\n        mock.objectArgMethod(\"not null\");\n\n        verify(mock).objectArgMethod(eq(null));\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 41)",
            "(line 58,col 9)-(line 58,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
        "signature": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame()",
        "snippet": "    @Test(expected = AssertionError.class)\n    public void shouldNotThrowNPEWhenNullPassedToSame() {\n        mock.objectArgMethod(\"not null\");\n\n        verify(mock).objectArgMethod(same(null));\n    }",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 41)",
            "(line 65,col 9)-(line 65,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.ListenersLostOnResetMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/ListenersLostOnResetMockTest.java",
        "signature": "org.mockitousage.bugs.ListenersLostOnResetMockTest.listener()",
        "snippet": "    @Test\n    public void listener() throws Exception {\n        InvocationListener invocationListener = mock(InvocationListener.class);\n\n        List mockedList = mock(List.class, withSettings().invocationListeners(invocationListener));\n        reset(mockedList);\n\n        mockedList.clear();\n\n        verify(invocationListener).reportInvocation(any(MethodInvocationReport.class));\n    }",
        "begin_line": 18,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 79)",
            "(line 22,col 9)-(line 22,col 99)",
            "(line 23,col 9)-(line 23,col 26)",
            "(line 25,col 9)-(line 25,col 27)",
            "(line 27,col 9)-(line 27,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java",
        "signature": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.shouldInjectUsingPropertySetterIfAvailable()",
        "snippet": "    @Test\n    public void shouldInjectUsingPropertySetterIfAvailable() {\n        assertTrue(awaitingInjection.propertySetterUsed);\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 57)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java",
        "signature": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.shouldInjectFieldIfNoSetter()",
        "snippet": "    @Test\n    public void shouldInjectFieldIfNoSetter() {\n        assertEquals(fieldAccess, awaitingInjection.fieldAccess);\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 65)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java",
        "signature": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.BeanAwaitingInjection.setPropertySetterAccess(java.util.List<?>)",
        "snippet": "        public void setPropertySetterAccess(List<?> propertySetterAccess) {\n            // don't care if field is set, the setter can do whatever it want.\n            propertySetterUsed = true;\n        }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 13)-(line 44,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java",
        "signature": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest.should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub()",
        "snippet": "    @Test\n    public void should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub() {\n        NotSerializableShouldBeMocked the_deep_stub = mock(ToBeDeepStubbed.class, RETURNS_DEEP_STUBS).getSomething();\n        assertThat(the_deep_stub).isNotNull();\n    }",
        "begin_line": 14,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 117)",
            "(line 17,col 9)-(line 17,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java",
        "signature": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest.ToBeDeepStubbed.ToBeDeepStubbed()",
        "snippet": "        public ToBeDeepStubbed() { }",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java",
        "signature": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest.ToBeDeepStubbed.getSomething()",
        "snippet": "        public NotSerializableShouldBeMocked getSomething() {\n            return null;\n        }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 13)-(line 24,col 24)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java",
        "signature": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest.NotSerializableShouldBeMocked.NotSerializableShouldBeMocked(java.lang.String)",
        "snippet": "        NotSerializableShouldBeMocked(String mandatory_param) { }",
        "begin_line": 29,
        "end_line": 29,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest.VarargMethod.run(java.lang.String...)",
        "snippet": "        Object run(String... args);",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest.shouldMatchAnyVararg()",
        "snippet": "    @Test\n    public void shouldMatchAnyVararg() {\n        mock.run(\"a\", \"b\");\n\n        verify(mock).run(anyString(), anyString());\n        verify(mock).run((String) anyObject(), (String) anyObject());\n\n        verify(mock).run((String[]) anyVararg());\n        \n        verify(mock, never()).run();\n        verify(mock, never()).run(anyString(), eq(\"f\"));\n    }",
        "begin_line": 24,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 27)",
            "(line 28,col 9)-(line 28,col 51)",
            "(line 29,col 9)-(line 29,col 69)",
            "(line 31,col 9)-(line 31,col 49)",
            "(line 33,col 9)-(line 33,col 36)",
            "(line 34,col 9)-(line 34,col 56)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest.shouldNotAllowUsingAnyObjectForVarArgs()",
        "snippet": "    @Test\n    public void shouldNotAllowUsingAnyObjectForVarArgs() {\n        mock.run(\"a\", \"b\");\n\n        try {\n            verify(mock).run((String[]) anyObject());\n            fail();\n        } catch (AssertionError e) {}\n    }",
        "begin_line": 39,
        "end_line": 47,
        "comment": "see other tests in this package",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 27)",
            "(line 43,col 9)-(line 46,col 37)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest.shouldStubUsingAnyVarargs()",
        "snippet": "    @Test\n    public void shouldStubUsingAnyVarargs() {\n        when(mock.run((String[]) anyVararg())).thenReturn(\"foo\");\n        \n        assertEquals(\"foo\", mock.run(\"a\", \"b\"));\n    }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 65)",
            "(line 53,col 9)-(line 53,col 48)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.TableBuilder.newRow(java.lang.String, java.lang.String...)",
        "snippet": "        void newRow(String trAttributes, String... cells);",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyWithAnyVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyCorrectlyWithAnyVarargs() {\n        //when\n        table.newRow(\"qux\", \"foo\", \"bar\", \"baz\");\n        table.newRow(\"abc\", \"def\");\n        \n        //then\n        verify(table, times(2)).newRow(anyString(), (String[]) anyVararg());\n    }",
        "begin_line": 23,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 49)",
            "(line 27,col 9)-(line 27,col 35)",
            "(line 30,col 9)-(line 30,col 76)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument()",
        "snippet": "    @Test\n    public void shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument() {\n        //when\n        table.newRow(\"x\", \"foo\", \"bar\", \"baz\");\n        table.newRow(\"x\", \"def\");\n\n        //then\n        verify(table, times(2)).newRow(eq(\"x\"), (String[]) anyVararg());\n    }",
        "begin_line": 33,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 47)",
            "(line 37,col 9)-(line 37,col 33)",
            "(line 40,col 9)-(line 40,col 72)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "signature": "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyNumberOfInvocationsWithVarargs()",
        "snippet": "    @Test\n    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs() {\n        //when\n        table.newRow(\"qux\", \"foo\", \"bar\", \"baz\");\n        table.newRow(\"abc\", \"def\");\n        \n        //then\n        verify(table).newRow(anyString(), eq(\"foo\"), anyString(), anyString());\n        verify(table).newRow(anyString(), anyString());\n    }",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 49)",
            "(line 47,col 9)-(line 47,col 35)",
            "(line 50,col 9)-(line 50,col 79)",
            "(line 51,col 9)-(line 51,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenericNestedAsRawTypeTest.java",
        "signature": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest.MyClass1.getNested()",
        "snippet": "    MC2 getNested();",
        "begin_line": 12,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenericNestedAsRawTypeTest.java",
        "signature": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest.MyClass2.getNested()",
        "snippet": "    MC3 getNested();",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenericNestedAsRawTypeTest.java",
        "signature": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest.MyClass3.returnSomething()",
        "snippet": "    String returnSomething();",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenericNestedAsRawTypeTest.java",
        "signature": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenericNestedAsRawTypeTest.discoverDeepMockingOfGenerics()",
        "snippet": "  @Test\n  public void discoverDeepMockingOfGenerics() {\n    MyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\n    when(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n  }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 5)-(line 25,col 64)",
            "(line 26,col 5)-(line 26,col 87)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStub()",
        "snippet": "    @Test\n    public void shouldStub() throws Exception {\n        given(mock.simpleMethod(\"foo\")).willReturn(\"bar\");\n\n        assertEquals(\"bar\", mock.simpleMethod(\"foo\"));\n        assertEquals(null, mock.simpleMethod(\"whatever\"));\n    }",
        "begin_line": 25,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 58)",
            "(line 29,col 9)-(line 29,col 54)",
            "(line 30,col 9)-(line 30,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubWithThrowable()",
        "snippet": "    @Test\n    public void shouldStubWithThrowable() throws Exception {\n        given(mock.simpleMethod(\"foo\")).willThrow(new RuntimeException());\n\n        try {\n            assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 33,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 74)",
            "(line 37,col 9)-(line 40,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubWithThrowableClass()",
        "snippet": "    @Test\n    public void shouldStubWithThrowableClass() throws Exception {\n        given(mock.simpleMethod(\"foo\")).willThrow(RuntimeException.class);\n\n        try {\n            assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 74)",
            "(line 47,col 9)-(line 50,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubWithAnswer()",
        "snippet": "    @Test\n    public void shouldStubWithAnswer() throws Exception {\n        given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }});\n\n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n    }",
        "begin_line": 53,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 58,col 16)",
            "(line 60,col 9)-(line 60,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Anonymous-dd12b0ce-0831-4ffe-a39b-3cbf3368af60.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }});",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 17)-(line 57,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubWithWillAnswerAlias()",
        "snippet": "    @Test\n    public void shouldStubWithWillAnswerAlias() throws Exception {\n        given(mock.simpleMethod(anyString())).will(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }});\n\n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n    }",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 68,col 16)",
            "(line 70,col 9)-(line 70,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Anonymous-f349049f-814a-45be-8f78-ca1bec3bf5a1.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }});",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 17)-(line 67,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubConsecutively()",
        "snippet": "    @Test\n    public void shouldStubConsecutively() throws Exception {\n       given(mock.simpleMethod(anyString()))\n           .willReturn(\"foo\")\n           .willReturn(\"bar\");\n\n       assertEquals(\"foo\", mock.simpleMethod(\"whatever\"));\n       assertEquals(\"bar\", mock.simpleMethod(\"whatever\"));\n    }",
        "begin_line": 73,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 75,col 8)-(line 77,col 30)",
            "(line 79,col 8)-(line 79,col 58)",
            "(line 80,col 8)-(line 80,col 58)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubConsecutivelyWithCallRealMethod()",
        "snippet": "    @Test\n    public void shouldStubConsecutivelyWithCallRealMethod() throws Exception {\n        MethodsImpl mock = mock(MethodsImpl.class);\n        willReturn(\"foo\").willCallRealMethod()\n                .given(mock).simpleMethod();\n\n       assertEquals(\"foo\", mock.simpleMethod());\n       assertEquals(null, mock.simpleMethod());\n    }",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 51)",
            "(line 86,col 9)-(line 87,col 44)",
            "(line 89,col 8)-(line 89,col 48)",
            "(line 90,col 8)-(line 90,col 47)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubVoid()",
        "snippet": "    @Test\n    public void shouldStubVoid() throws Exception {\n        willThrow(new RuntimeException()).given(mock).voidMethod();\n\n        try {\n            mock.voidMethod();\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 93,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 67)",
            "(line 97,col 9)-(line 100,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubVoidWithExceptionClass()",
        "snippet": "    @Test\n    public void shouldStubVoidWithExceptionClass() throws Exception {\n        willThrow(RuntimeException.class).given(mock).voidMethod();\n\n        try {\n            mock.voidMethod();\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 103,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 67)",
            "(line 107,col 9)-(line 110,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubVoidConsecutively()",
        "snippet": "    @Test\n    public void shouldStubVoidConsecutively() throws Exception {\n        willDoNothing()\n        .willThrow(new RuntimeException())\n        .given(mock).voidMethod();\n\n        mock.voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch(RuntimeException e) {}\n    }",
        "begin_line": 113,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 117,col 34)",
            "(line 119,col 9)-(line 119,col 26)",
            "(line 120,col 9)-(line 123,col 38)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubVoidConsecutivelyWithExceptionClass()",
        "snippet": "    @Test\n    public void shouldStubVoidConsecutivelyWithExceptionClass() throws Exception {\n        willDoNothing()\n        .willThrow(IllegalArgumentException.class)\n        .given(mock).voidMethod();\n\n        mock.voidMethod();\n        try {\n            mock.voidMethod();\n            fail();\n        } catch(IllegalArgumentException e) {}\n    }",
        "begin_line": 126,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 130,col 34)",
            "(line 132,col 9)-(line 132,col 26)",
            "(line 133,col 9)-(line 136,col 46)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubUsingDoReturnStyle()",
        "snippet": "    @Test\n    public void shouldStubUsingDoReturnStyle() throws Exception {\n        willReturn(\"foo\").given(mock).simpleMethod(\"bar\");\n\n        assertEquals(null, mock.simpleMethod(\"boooo\"));\n        assertEquals(\"foo\", mock.simpleMethod(\"bar\"));\n    }",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 58)",
            "(line 143,col 9)-(line 143,col 55)",
            "(line 144,col 9)-(line 144,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubUsingDoAnswerStyle()",
        "snippet": "    @Test\n    public void shouldStubUsingDoAnswerStyle() throws Exception {\n        willAnswer(new Answer<String>() {\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }})\n        .given(mock).simpleMethod(anyString());\n\n        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n    }",
        "begin_line": 147,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 153,col 47)",
            "(line 155,col 9)-(line 155,col 54)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Anonymous-54a39a78-45c6-4fe8-a52a-9d069f9e7c3f.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public String answer(InvocationOnMock invocation) throws Throwable {\n                return (String) invocation.getArguments()[0];\n            }})",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 151,col 17)-(line 151,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Dog.bark()",
        "snippet": "        public String bark() {\n            return \"woof\";\n        }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 13)-(line 160,col 26)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubByDelegatingToRealMethod()",
        "snippet": "    @Test\n    public void shouldStubByDelegatingToRealMethod() throws Exception {\n        //given\n        Dog dog = mock(Dog.class);\n        //when\n        willCallRealMethod().given(dog).bark();\n        //then\n        assertEquals(\"woof\", dog.bark());\n    }",
        "begin_line": 164,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 34)",
            "(line 169,col 9)-(line 169,col 47)",
            "(line 171,col 9)-(line 171,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax()",
        "snippet": "    @Test\n    public void shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax() throws Exception {\n        //given\n        Dog dog = mock(Dog.class);\n        //when\n        given(dog.bark()).willCallRealMethod();\n        //then\n        assertEquals(\"woof\", dog.bark());\n    }",
        "begin_line": 174,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 34)",
            "(line 179,col 9)-(line 179,col 47)",
            "(line 181,col 9)-(line 181,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldAllStubbedMockReferenceAccess()",
        "snippet": "    @Test\n    public void shouldAllStubbedMockReferenceAccess() throws Exception {\n        Set expectedMock = mock(Set.class);\n\n        Set returnedMock = given(expectedMock.isEmpty()).willReturn(false).getMock();\n\n        assertEquals(expectedMock, returnedMock);\n    }",
        "begin_line": 184,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 43)",
            "(line 188,col 9)-(line 188,col 85)",
            "(line 190,col 9)-(line 190,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldValidateMockWhenVerifying()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void shouldValidateMockWhenVerifying() {\n\n        then(\"notMock\").should();\n    }",
        "begin_line": 193,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {\n\n        then(\"notMock\").should(times(19));\n    }",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldValidateMockWhenVerifyingNoMoreInteractions()",
        "snippet": "    @Test(expected = NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingNoMoreInteractions() {\n\n        then(\"notMock\").should();\n    }",
        "begin_line": 205,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 33)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldFailForExpectedBehaviorThatDidNotHappen()",
        "snippet": "    @Test(expected = WantedButNotInvoked.class)\n    public void shouldFailForExpectedBehaviorThatDidNotHappen() {\n\n        then(mock).should().booleanObjectReturningMethod();\n    }",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldPassForExpectedBehaviorThatHappened()",
        "snippet": "    @Test\n    public void shouldPassForExpectedBehaviorThatHappened() {\n\n        mock.booleanObjectReturningMethod();\n\n        then(mock).should().booleanObjectReturningMethod();\n    }",
        "begin_line": 217,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 44)",
            "(line 222,col 9)-(line 222,col 59)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.shouldPassFluentBddScenario()",
        "snippet": "    @Test\n    public void shouldPassFluentBddScenario() {\n\n        Bike bike = new Bike();\n        Person person = mock(Person.class);\n\n        person.ride(bike);\n        person.ride(bike);\n\n        then(person).should(times(2)).ride(bike);\n    }",
        "begin_line": 225,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 31)",
            "(line 229,col 9)-(line 229,col 43)",
            "(line 231,col 9)-(line 231,col 26)",
            "(line 232,col 9)-(line 232,col 26)",
            "(line 234,col 9)-(line 234,col 49)"
        ]
    },
    {
        "class_name": "org.mockitousage.customization.BDDMockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/customization/BDDMockitoTest.java",
        "signature": "org.mockitousage.customization.BDDMockitoTest.Person.ride(org.mockitousage.customization.BDDMockitoTest.Bike)",
        "snippet": "        void ride(Bike bike) {}",
        "begin_line": 239,
        "end_line": 239,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.should_serialize_and_deserialize_mock_created_with_deep_stubs()",
        "snippet": "    @Test\n    public void should_serialize_and_deserialize_mock_created_with_deep_stubs() throws Exception {\n        // given\n        SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(RETURNS_DEEP_STUBS).serializable());\n        when(sampleClass.getSample().isFalse()).thenReturn(true);\n        when(sampleClass.getSample().number()).thenReturn(999);\n\n        // when\n        SampleClass deserializedSample = serializeAndBack(sampleClass);\n\n        // then\n        assertThat(deserializedSample.getSample().isFalse()).isEqualTo(true);\n        assertThat(deserializedSample.getSample().number()).isEqualTo(999);\n    }",
        "begin_line": 17,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 123)",
            "(line 21,col 9)-(line 21,col 65)",
            "(line 22,col 9)-(line 22,col 63)",
            "(line 25,col 9)-(line 25,col 71)",
            "(line 28,col 9)-(line 28,col 77)",
            "(line 29,col 9)-(line 29,col 75)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.should_serialize_and_deserialize_parameterized_class_mocked_with_deep_stubs()",
        "snippet": "    @Test\n    public void should_serialize_and_deserialize_parameterized_class_mocked_with_deep_stubs() throws Exception {\n        // given\n        ListContainer deep_stubbed = mock(ListContainer.class, withSettings().defaultAnswer(RETURNS_DEEP_STUBS).serializable());\n        when(deep_stubbed.iterator().next().add(\"yes\")).thenReturn(true);\n\n        // when\n        ListContainer deserialized_deep_stub = serializeAndBack(deep_stubbed);\n        \n        // then\n        assertThat(deserialized_deep_stub.iterator().next().add(\"not stubbed but mock already previously resolved\")).isEqualTo(false);\n        assertThat(deserialized_deep_stub.iterator().next().add(\"yes\")).isEqualTo(true);\n    }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 128)",
            "(line 36,col 9)-(line 36,col 73)",
            "(line 39,col 9)-(line 39,col 78)",
            "(line 42,col 9)-(line 42,col 134)",
            "(line 43,col 9)-(line 43,col 88)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.should_discard_generics_metadata_when_serialized_then_disabling_deep_stubs_with_generics()",
        "snippet": "    @Test(expected = ClassCastException.class)\n    public void should_discard_generics_metadata_when_serialized_then_disabling_deep_stubs_with_generics() throws Exception {\n        // given\n        ListContainer deep_stubbed = mock(ListContainer.class, withSettings().defaultAnswer(RETURNS_DEEP_STUBS).serializable());\n        when(deep_stubbed.iterator().hasNext()).thenReturn(true);\n\n        ListContainer deserialized_deep_stub = serializeAndBack(deep_stubbed);\n\n        // when stubbing on a deserialized mock\n        when(deserialized_deep_stub.iterator().next().get(42)).thenReturn(\"no\");\n\n        // then revert to the default RETURNS_DEEP_STUBS and the code will raise a ClassCastException\n    }",
        "begin_line": 46,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 128)",
            "(line 50,col 9)-(line 50,col 65)",
            "(line 52,col 9)-(line 52,col 78)",
            "(line 55,col 9)-(line 55,col 80)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.SampleClass.getSample()",
        "snippet": "        SampleClass2 getSample() { return new SampleClass2(); }",
        "begin_line": 62,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 62,col 36)-(line 62,col 61)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.SampleClass2.isFalse()",
        "snippet": "        boolean isFalse() { return false; }",
        "begin_line": 66,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 66,col 29)-(line 66,col 41)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.SampleClass2.number()",
        "snippet": "        int number() { return 100; }",
        "begin_line": 67,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 67,col 24)-(line 67,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.Container.Container(E)",
        "snippet": "        public Container(E e) { this.e = e; }",
        "begin_line": 72,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 72,col 33)-(line 72,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.Container.get()",
        "snippet": "        public E get() { return e; }",
        "begin_line": 73,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 73,col 26)-(line 73,col 34)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.Container.iterator()",
        "snippet": "        public Iterator<E> iterator() {\n            return new Iterator<E>() {\n                public boolean hasNext() { return true; }\n                public E next() { return e; }\n                public void remove() { }\n            };\n        }",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 76,col 13)-(line 80,col 14)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.Container.Anonymous-79539ad2-1d4b-46cb-b69e-dcbf5646c880.hasNext()",
        "snippet": "                public boolean hasNext() { return true; }",
        "begin_line": 77,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 77,col 44)-(line 77,col 55)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.Container.Anonymous-830716b8-99cc-4913-bddb-63c176f7b8cb.next()",
        "snippet": "                public E next() { return e; }",
        "begin_line": 78,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 78,col 35)-(line 78,col 43)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.Container.Anonymous-6e58885f-07be-4452-8500-f2809ceefdde.remove()",
        "snippet": "                public void remove() { }",
        "begin_line": 79,
        "end_line": 79,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.serialization.DeepStubsSerializableTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/DeepStubsSerializableTest.java",
        "signature": "org.mockitousage.serialization.DeepStubsSerializableTest.ListContainer.ListContainer(java.util.List<java.lang.String>)",
        "snippet": "        public ListContainer(List<String> list) { super(list); }",
        "begin_line": 85,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 85,col 51)-(line 85,col 62)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.reproduce_CCE_by_creating_a_mock_with_IMethods_before()",
        "snippet": "    @Before\n    public void reproduce_CCE_by_creating_a_mock_with_IMethods_before() throws Exception {\n        mock = Mockito.mock(IMethods.class);\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 44)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.check_that_mock_can_be_serialized_in_a_classloader_and_deserialized_in_another()",
        "snippet": "    @Test\n    public void check_that_mock_can_be_serialized_in_a_classloader_and_deserialized_in_another() throws Exception {\n        byte[] bytes = create_mock_and_serialize_it_in_class_loader_A();\n\n        Object the_deserialized_mock = read_stream_and_deserialize_it_in_class_loader_B(bytes);\n    }",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 72)",
            "(line 34,col 9)-(line 34,col 95)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.read_stream_and_deserialize_it_in_class_loader_B(byte[])",
        "snippet": "    private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {\n        return new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())\n                .doInRealm(\n                        \"org.mockitousage.serialization.AcrossClassLoaderSerializationTest$ReadStreamAndDeserializeIt\",\n                        new Class[]{ byte[].class },\n                        new Object[]{ bytes }\n                );\n    }",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 43,col 18)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.create_mock_and_serialize_it_in_class_loader_A()",
        "snippet": "    private byte[] create_mock_and_serialize_it_in_class_loader_A() throws Exception {\n        return (byte[]) new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())\n                .doInRealm(\"org.mockitousage.serialization.AcrossClassLoaderSerializationTest$CreateMockAndSerializeIt\");\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 48,col 121)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.isolating_test_classes()",
        "snippet": "    private SimplePerRealmReloadingClassLoader.ReloadClassPredicate isolating_test_classes() {\n        return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n            public boolean acceptReloadOf(String qualifiedName) {\n                return qualifiedName.contains(\"org.mockitousage\")\n                        || qualifiedName.contains(\"org.mockitoutil\")\n                        ;\n            }\n        };\n    }",
        "begin_line": 52,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 59,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "acceptReloadOf(String)",
        "snippet": "            public boolean acceptReloadOf(String qualifiedName) {\n                return qualifiedName.contains(\"org.mockitousage\")\n                        || qualifiedName.contains(\"org.mockitoutil\")\n                        ;\n            }",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 17)-(line 57,col 25)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.CreateMockAndSerializeIt.call()",
        "snippet": "        public byte[] call() throws Exception {\n            AClassToBeMockedInThisTestOnlyAndInCallablesOnly mock = Mockito.mock(\n                    AClassToBeMockedInThisTestOnlyAndInCallablesOnly.class,\n                    Mockito.withSettings().serializable(SerializableMode.ACROSS_CLASSLOADERS)\n            );\n            // use MethodProxy before\n            mock.returningSomething();\n\n            return SimpleSerializationUtil.serializeMock(mock).toByteArray();\n        }",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 69,col 14)",
            "(line 71,col 13)-(line 71,col 38)",
            "(line 73,col 13)-(line 73,col 77)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.ReadStreamAndDeserializeIt.ReadStreamAndDeserializeIt(byte[])",
        "snippet": "        public ReadStreamAndDeserializeIt(byte[] bytes) {\n            this.bytes = bytes;\n        }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 13)-(line 82,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.ReadStreamAndDeserializeIt.call()",
        "snippet": "        public Object call() throws Exception {\n            ByteArrayInputStream to_unserialize = new ByteArrayInputStream(bytes);\n            return SimpleSerializationUtil.deserializeMock(\n                    to_unserialize,\n                    AClassToBeMockedInThisTestOnlyAndInCallablesOnly.class\n            );\n        }",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 13)-(line 86,col 82)",
            "(line 87,col 13)-(line 90,col 14)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java",
        "signature": "org.mockitousage.serialization.AcrossClassLoaderSerializationTest.AClassToBeMockedInThisTestOnlyAndInCallablesOnly.returningSomething()",
        "snippet": "        List returningSomething() { return Collections.emptyList(); }",
        "begin_line": 96,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 96,col 37)-(line 96,col 67)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.ParallelSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/ParallelSerializationTest.java",
        "signature": "org.mockitousage.serialization.ParallelSerializationTest.single_mock_being_serialized_in_different_classloaders_by_multiple_threads()",
        "snippet": "    @Test\n    public void single_mock_being_serialized_in_different_classloaders_by_multiple_threads() throws ExecutionException, InterruptedException {\n        // given\n        int iterations = 2;\n        int threadingFactor = 200;\n        final ExecutorService executorService = Executors.newFixedThreadPool(threadingFactor);\n        final IMethods iMethods_that_store_invocations = mock(IMethods.class, withSettings().serializable());\n\n        // when\n        for (int i = 0; i <= iterations; i++) {\n            List<Future> futures = new ArrayList<Future>(threadingFactor);\n            final CyclicBarrier barrier_that_will_wait_until_threads_are_ready = new CyclicBarrier(threadingFactor);\n\n            // prepare all threads by submitting a callable\n            //  - that will serialize the mock a 'threadingFactor' times\n            //  - that will use the mock a 'threadingFactor' times\n            for (int j = 0; j < threadingFactor; j++) {\n                // submit a callable that will serialize the mock 'iMethods'\n                futures.add(executorService.submit(new Callable<Object>() {\n                    public Object call() throws Exception {\n                        barrier_that_will_wait_until_threads_are_ready.await();\n\n                        randomCallOn(iMethods_that_store_invocations);\n\n                        return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n                    }\n                }));\n\n                // submit a callable that will only use the mock 'iMethods'\n                executorService.submit(new Callable<Object>() {\n                    public Object call() throws Exception {\n                        barrier_that_will_wait_until_threads_are_ready.await();\n                        return iMethods_that_store_invocations.longObjectReturningMethod();\n                    }\n                });\n            }\n\n            // ensure we are getting the futures\n            for (Future future : futures) {\n                future.get();\n            }\n        }\n    }",
        "begin_line": 23,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 27)",
            "(line 27,col 9)-(line 27,col 34)",
            "(line 28,col 9)-(line 28,col 94)",
            "(line 29,col 9)-(line 29,col 109)",
            "(line 32,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.ParallelSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/ParallelSerializationTest.java",
        "signature": "org.mockitousage.serialization.ParallelSerializationTest.Anonymous-5298d3f4-facd-41c7-aec9-8aebb8a1d681.call()",
        "snippet": "                    public Object call() throws Exception {\n                        barrier_that_will_wait_until_threads_are_ready.await();\n\n                        randomCallOn(iMethods_that_store_invocations);\n\n                        return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n                    }",
        "begin_line": 42,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 43,col 25)-(line 43,col 79)",
            "(line 45,col 25)-(line 45,col 70)",
            "(line 47,col 25)-(line 47,col 116)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.ParallelSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/ParallelSerializationTest.java",
        "signature": "org.mockitousage.serialization.ParallelSerializationTest.Anonymous-ca957bfd-c6d9-401f-b258-09d093cfc20e.call()",
        "snippet": "                    public Object call() throws Exception {\n                        barrier_that_will_wait_until_threads_are_ready.await();\n                        return iMethods_that_store_invocations.longObjectReturningMethod();\n                    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 25)-(line 54,col 79)",
            "(line 55,col 25)-(line 55,col 91)"
        ]
    },
    {
        "class_name": "org.mockitousage.serialization.ParallelSerializationTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/serialization/ParallelSerializationTest.java",
        "signature": "randomCallOn(IMethods)",
        "snippet": "    private void randomCallOn(IMethods iMethods) throws CharacterCodingException {\n        int random = new Random().nextInt(10);\n        switch (random) {\n            case 0 : iMethods.arrayReturningMethod(); break;\n            case 1 : iMethods.longObjectReturningMethod(); break;\n            case 2 : iMethods.linkedListReturningMethod(); break;\n            case 3 : iMethods.iMethodsReturningMethod(); break;\n            case 4 : iMethods.canThrowException(); break;\n            case 5 : iMethods.differentMethod(); break;\n            case 6 : iMethods.voidMethod(); break;\n            case 7 : iMethods.varargsString(1, \"\"); break;\n            case 8 : iMethods.forMap(null); break;\n            case 9 : iMethods.throwsNothing(false); break;\n            default:\n        }\n    }",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 46)",
            "(line 69,col 9)-(line 81,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java",
        "signature": "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest.shouldUseCustomAnnotation()",
        "snippet": "    @Test\n    public void shouldUseCustomAnnotation() {\n        assertEquals(\"SmartMock should return empty String by default\", \"\", smartMock.simpleMethod(1));\n        verify(smartMock).simpleMethod(1);\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 103)",
            "(line 20,col 9)-(line 20,col 42)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.should_throw_ClassCastException_on_second_call()",
        "snippet": "    @Test\n    public void should_throw_ClassCastException_on_second_call() throws Exception {\n        Assume.assumeTrue(\"CglibMockMaker\".equals(Plugins.getMockMaker().getClass().getSimpleName()));\n\n        doInNewChildRealm(testMethodClassLoaderRealm, \"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking\");\n\n        try {\n            doInNewChildRealm(testMethodClassLoaderRealm, \"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking\");\n            fail(\"should have raised a ClassCastException when Objenesis Cache is enabled\");\n        } catch (MockitoException e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"classloading\")\n                    .containsIgnoringCase(\"objenesis\")\n                    .containsIgnoringCase(\"MockitoConfiguration\");\n            assertThat(e.getCause())\n                    .satisfies(thatCceIsThrownFrom(\"java.lang.Class.cast\"))\n                    .satisfies(thatCceIsThrownFrom(\"org.mockito.internal.creation.cglib.ClassImposterizer.imposterise\"));\n        }\n    }",
        "begin_line": 26,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 102)",
            "(line 30,col 9)-(line 30,col 136)",
            "(line 32,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.should_not_throw_ClassCastException_when_objenesis_cache_disabled()",
        "snippet": "    @Test\n    public void should_not_throw_ClassCastException_when_objenesis_cache_disabled() {}",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.thatCceIsThrownFrom(java.lang.String)",
        "snippet": "    private Condition<Throwable> thatCceIsThrownFrom(final String stacktraceElementDescription) {\n        return new Condition<Throwable>() {\n            @Override\n            public boolean matches(Throwable throwable) {\n                StackTraceElement[] stackTrace = throwable.getStackTrace();\n                for (StackTraceElement stackTraceElement : stackTrace) {\n                    if (stackTraceElement.toString().contains(stacktraceElementDescription)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n        };\n    }",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 70,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.Anonymous-87bd7672-fa67-44d6-908c-2ac7c738c1c6.matches(java.lang.Throwable)",
        "snippet": "            @Override\n            public boolean matches(Throwable throwable) {\n                StackTraceElement[] stackTrace = throwable.getStackTrace();\n                for (StackTraceElement stackTraceElement : stackTrace) {\n                    if (stackTraceElement.toString().contains(stacktraceElementDescription)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }",
        "begin_line": 59,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 61,col 17)-(line 61,col 75)",
            "(line 62,col 17)-(line 66,col 17)",
            "(line 68,col 17)-(line 68,col 29)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.DoTheMocking.call()",
        "snippet": "        public Object call() throws Exception {\n            Class clazz = this.getClass().getClassLoader().loadClass(\"org.mockitousage.configuration.ClassToBeMocked\");\n            return mock(clazz);\n        }",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 75,col 13)-(line 75,col 119)",
            "(line 76,col 13)-(line 76,col 31)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.doInNewChildRealm(java.lang.ClassLoader, java.lang.String)",
        "snippet": "    private static void doInNewChildRealm(ClassLoader parentRealm, String callableCalledInClassLoaderRealm) throws Exception {\n        new SimplePerRealmReloadingClassLoader(parentRealm, reloadScope()).doInRealm(callableCalledInClassLoaderRealm);\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 119)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.reloadScope()",
        "snippet": "    private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadScope() {\n        return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n            public boolean acceptReloadOf(String qualifiedName) {\n                return \"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking\".equals(qualifiedName)\n                    || \"org.mockitousage.configuration.ClassToBeMocked\".equals(qualifiedName);\n            }\n        };\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 91,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "acceptReloadOf(String)",
        "snippet": "            public boolean acceptReloadOf(String qualifiedName) {\n                return \"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking\".equals(qualifiedName)\n                    || \"org.mockitousage.configuration.ClassToBeMocked\".equals(qualifiedName);\n            }",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 17)-(line 89,col 94)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.prepareMockitoAndDisableObjenesisCache()",
        "snippet": "    private void prepareMockitoAndDisableObjenesisCache() throws Exception {\n        testMethodClassLoaderRealm.doInRealm(\"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$PrepareMockito\");\n    }",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 129)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.PrepareMockito.call()",
        "snippet": "        public Object call() throws Exception {\n            Class.forName(\"org.mockito.Mockito\");\n            ConfigurationAccess.getConfig().overrideEnableClassCache(false);\n            return Boolean.TRUE;\n        }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 13)-(line 100,col 49)",
            "(line 101,col 13)-(line 101,col 76)",
            "(line 102,col 13)-(line 102,col 32)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest.reloadMockito()",
        "snippet": "    private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadMockito() {\n        return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n            public boolean acceptReloadOf(String qualifiedName) {\n                return (!qualifiedName.contains(\"net.bytebuddy\") && qualifiedName.contains(\"org.mockito\"));\n            }\n        };\n    }",
        "begin_line": 106,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 111,col 10)"
        ]
    },
    {
        "class_name": "org.mockitousage.configuration.ClassCacheVersusClassReloadingTest",
        "child_classes": [],
        "src_path": "test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java",
        "signature": "acceptReloadOf(String)",
        "snippet": "            public boolean acceptReloadOf(String qualifiedName) {\n                return (!qualifiedName.contains(\"net.bytebuddy\") && qualifiedName.contains(\"org.mockito\"));\n            }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 17)-(line 109,col 107)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimpleSerializationUtil",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimpleSerializationUtil.java",
        "signature": "org.mockitoutil.SimpleSerializationUtil.serializeAndBack(T)",
        "snippet": "    public static <T> T serializeAndBack(T obj) throws Exception {\n        ByteArrayOutputStream os = serializeMock(obj);\n        return (T) deserializeMock(os, Object.class);\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "TODO use widely",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 54)",
            "(line 17,col 9)-(line 17,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimpleSerializationUtil",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimpleSerializationUtil.java",
        "signature": "org.mockitoutil.SimpleSerializationUtil.deserializeMock(java.io.ByteArrayOutputStream, java.lang.Class<T>)",
        "snippet": "    public static <T> T deserializeMock(ByteArrayOutputStream serialized, Class<T> type) throws IOException,\n            ClassNotFoundException {\n        InputStream unserialize = new ByteArrayInputStream(serialized.toByteArray());\n        return deserializeMock(unserialize, type);\n    }",
        "begin_line": 20,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 85)",
            "(line 23,col 9)-(line 23,col 50)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimpleSerializationUtil",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimpleSerializationUtil.java",
        "signature": "org.mockitoutil.SimpleSerializationUtil.deserializeMock(java.io.InputStream, java.lang.Class<T>)",
        "snippet": "    public static <T> T deserializeMock(InputStream unserialize, Class<T> type) throws IOException, ClassNotFoundException {\n        Object readObject = new ObjectInputStream(unserialize).readObject();\n        Assert.assertNotNull(readObject);\n        return type.cast(readObject);\n    }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 76)",
            "(line 28,col 9)-(line 28,col 41)",
            "(line 29,col 9)-(line 29,col 37)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimpleSerializationUtil",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimpleSerializationUtil.java",
        "signature": "org.mockitoutil.SimpleSerializationUtil.serializeMock(java.lang.Object)",
        "snippet": "    public static ByteArrayOutputStream serializeMock(Object mock) throws IOException {\n        ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n        new ObjectOutputStream(serialized).writeObject(mock);\n        return serialized;\n    }",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 71)",
            "(line 34,col 9)-(line 34,col 61)",
            "(line 35,col 9)-(line 35,col 26)"
        ]
    },
    {
        "class_name": "org.mockitoutil.CustomAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/CustomAssertionsTest.java",
        "signature": "org.mockitoutil.CustomAssertionsTest.shouldKnowWhenStringContainsIgnoringCase()",
        "snippet": "    @Test\n    public void shouldKnowWhenStringContainsIgnoringCase() throws Exception {\n        assertContainsIgnoringCase(\"foo\", \"foo\");\n        assertContainsIgnoringCase(\"fOo\", \"foo\");\n        assertContainsIgnoringCase(\"FoO\", \"foo\");\n        assertContainsIgnoringCase(\"foo\", \"a foo :)\");\n        assertContainsIgnoringCase(\"fOo\", \"a foo :)\");\n        assertContainsIgnoringCase(\"FoO\", \"a foo :)\");\n        assertContainsIgnoringCase(\"\", \"a foo :)\");\n        assertContainsIgnoringCase(\"\", \"\");\n    }",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 49)",
            "(line 15,col 9)-(line 15,col 49)",
            "(line 16,col 9)-(line 16,col 49)",
            "(line 17,col 9)-(line 17,col 54)",
            "(line 18,col 9)-(line 18,col 54)",
            "(line 19,col 9)-(line 19,col 54)",
            "(line 20,col 9)-(line 20,col 51)",
            "(line 21,col 9)-(line 21,col 43)"
        ]
    },
    {
        "class_name": "org.mockitoutil.CustomAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/CustomAssertionsTest.java",
        "signature": "org.mockitoutil.CustomAssertionsTest.shouldKnowWhenStringDoesNotContainIgnoringCase()",
        "snippet": "    @Test(expected = AssertionError.class)\n    public void shouldKnowWhenStringDoesNotContainIgnoringCase() throws Exception {\n        assertContainsIgnoringCase(\"fooo\", \"foo\");\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 50)"
        ]
    },
    {
        "class_name": "org.mockitoutil.CustomAssertionsTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/CustomAssertionsTest.java",
        "signature": "org.mockitoutil.CustomAssertionsTest.shouldKnowWhenStringDoesNotContainIgnoringCase2()",
        "snippet": "    @Test(expected = AssertionError.class)\n    public void shouldKnowWhenStringDoesNotContainIgnoringCase2() throws Exception {\n        assertContainsIgnoringCase(\"fOo\", \"f oo\");\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 50)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.cleanUpConfigInAnyCase()",
        "snippet": "    @After\n    public void cleanUpConfigInAnyCase() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n        ConfigurationAccess.getConfig().overrideDefaultAnswer(null);\n        StateMaster state = new StateMaster();\n        //catch any invalid state left over after test case run\n        //this way we can catch early if some Mockito operations leave weird state afterwards\n        state.validate();\n        //reset the state, especially, reset any ongoing stubbing for correct error messages of tests that assert unhappy paths\n        state.reset();\n    }",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 72)",
            "(line 43,col 9)-(line 43,col 68)",
            "(line 44,col 9)-(line 44,col 46)",
            "(line 47,col 9)-(line 47,col 25)",
            "(line 49,col 9)-(line 49,col 22)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.init()",
        "snippet": "    @Before\n    public void init() {\n        MockitoAnnotations.initMocks(this);\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 43)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.makeStackTracesClean()",
        "snippet": "    public static void makeStackTracesClean() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n    }",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 71)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.resetState()",
        "snippet": "    public void resetState() {\n        new StateMaster().reset();\n    }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 34)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.getLastInvocation()",
        "snippet": "    protected Invocation getLastInvocation() {\n        return new MockitoCore().getLastInvocation();\n    }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "assertThat(T, Assertor)",
        "snippet": "    protected static <T> void assertThat(T o, Assertor<T> a) {\n        a.assertValue(o);\n    }",
        "begin_line": 70,
        "end_line": 72,
        "comment": "I'm really tired of matchers, enter the assertor!",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 25)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertThat(T, org.hamcrest.Matcher<T>)",
        "snippet": "    protected static <T> void assertThat(T actual, Matcher<T> m) {\n        org.junit.Assert.assertThat(actual, m);\n    }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 47)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertThat(java.lang.String, T, org.hamcrest.Matcher<T>)",
        "snippet": "    protected static <T> void assertThat(String message, T actual, Matcher<T> m) {\n        org.junit.Assert.assertThat(message, actual, m);\n    }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 56)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.endsWith(java.lang.String)",
        "snippet": "    public static <T> Assertor<String> endsWith(final String substring) {\n        return new Assertor<String>() {\n            public void assertValue(String value) {\n                assertTrue(\"This substring: \\n\" + substring + \n                        \"\\nshould be at the end of:\\n\" + value\n                        , value.endsWith(substring));\n            }\n        };\n    }",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 89,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "assertValue(String)",
        "snippet": "            public void assertValue(String value) {\n                assertTrue(\"This substring: \\n\" + substring + \n                        \"\\nshould be at the end of:\\n\" + value\n                        , value.endsWith(substring));\n            }",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 17)-(line 87,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertNotEquals(java.lang.Object, java.lang.Object)",
        "snippet": "    public static void assertNotEquals(Object expected, Object got) {\n        assertFalse(expected.equals(got));\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 42)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertContains(java.lang.String, java.lang.String)",
        "snippet": "    public static void assertContains(String sub, String string) {\n        assertTrue(\"\\n\" +\n                \"This substring:[\" +\n                sub +\n                \"]\\n\" +\n                \"should be inside of:[\" +\n                string +\n                \"]\\n\"\n                , string.contains(sub));\n    }",
        "begin_line": 96,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 104,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertContainsIgnoringCase(java.lang.String, java.lang.String)",
        "snippet": "    public static void assertContainsIgnoringCase(String sub, String string) {\n        assertTrue(\"\\n\" +\n                \"This substring:\" +\n                sub +\n                \"\\n\" +\n                \"should be inside of:\" +\n                string +\n                \"\\n\"\n                , containsIgnoringCase(string, sub));\n    }",
        "begin_line": 107,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 115,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.containsIgnoringCase(java.lang.String, java.lang.String)",
        "snippet": "    private static boolean containsIgnoringCase(String string, String sub) {\n        int subLength = sub.length();\n        if (string.length() < subLength) {\n            return false;\n        }\n        int i = 0;\n        while(i+subLength <= string.length()) {\n            boolean temp = string.substring(i, i+subLength).equalsIgnoreCase(sub);\n            if (temp) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }",
        "begin_line": 118,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 37)",
            "(line 120,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 18)",
            "(line 124,col 9)-(line 130,col 9)",
            "(line 131,col 9)-(line 131,col 21)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertNotContains(java.lang.String, java.lang.String)",
        "snippet": "    public static void assertNotContains(String sub, String string) {\n        assertFalse(\"\\n\" +\n                \"This substring:\" +\n                sub +\n                \"\\n\" +\n                \"should NOT be inside of:\" +\n                string +\n                \"\\n\"\n                , string.contains(sub));\n    }",
        "begin_line": 134,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 142,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.invocationOf(java.lang.Class<?>, java.lang.String, java.lang.Object...)",
        "snippet": "    protected static Invocation invocationOf(Class<?> type, String methodName, Object ... args) throws NoSuchMethodException {\n        Class[] types = new Class[args.length];\n        for (int i = 0; i < args.length; i++) {\n            types[i] = args[i].getClass();\n        }\n        return new InvocationImpl(mock(type), new SerializableMethod(type.getMethod(methodName,\n                types)), args, 1, null);\n    }",
        "begin_line": 145,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 47)",
            "(line 147,col 9)-(line 149,col 9)",
            "(line 150,col 9)-(line 151,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.invocationOf(java.lang.Class<?>, java.lang.String, org.mockito.internal.invocation.realmethod.RealMethod)",
        "snippet": "    protected static Invocation invocationOf(Class<?> type, String methodName, RealMethod realMethod) throws NoSuchMethodException {\n        return new InvocationImpl(new Object(), new SerializableMethod(type.getMethod(methodName,\n                new Class[0])), new Object[0], 1, realMethod);\n    }",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 156,col 62)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.describe(org.hamcrest.SelfDescribing)",
        "snippet": "    protected static String describe(SelfDescribing m) {\n        return StringDescription.toString(m);\n    }",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 45)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.isMock(java.lang.Object)",
        "snippet": "    protected boolean isMock(Object o) {\n        return new MockUtil().isMock(o);\n    }",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.assertContainsType(java.util.Collection<?>, java.lang.Class<?>)",
        "snippet": "    protected void assertContainsType(final Collection<?> list, final Class<?> clazz) {\n        Assertions.assertThat(list).satisfies(new Condition<Collection<?>>() {\n            @Override\n            public boolean matches(Collection<?> objects) {\n                for (Object object : objects) {\n                    if (clazz.isAssignableFrom(object.getClass())) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n    }",
        "begin_line": 167,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 178,col 11)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.Anonymous-eb706efc-dc9c-4493-8ec5-45c9a2043e6b.matches(java.util.Collection<?>)",
        "snippet": "            @Override\n            public boolean matches(Collection<?> objects) {\n                for (Object object : objects) {\n                    if (clazz.isAssignableFrom(object.getClass())) {\n                        return true;\n                    }\n                }\n                return false;\n            }",
        "begin_line": 169,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 171,col 17)-(line 175,col 17)",
            "(line 176,col 17)-(line 176,col 29)"
        ]
    },
    {
        "class_name": "org.mockitoutil.TestBase",
        "child_classes": [
            "org.mockitousage.basicapi.MocksSerializationTest",
            "org.mockitousage.verification.NoMoreInteractionsVerificationTest",
            "org.mockitousage.misuse.DetectingFinalMethodsTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
            "org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest",
            "org.mockito.internal.util.MockNameImplTest",
            "org.mockito.internal.util.ObjectMethodsGuruTest",
            "org.mockito.internal.creation.DelegatingMethodTest",
            "org.mockitousage.puzzlers.OverloadingPuzzleTest",
            "org.mockito.internal.progress.AtLeastTest",
            "org.mockitousage.verification.AtLeastXVerificationTest",
            "org.mockitousage.matchers.CapturingArgumentsTest",
            "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest",
            "org.mockito.internal.AllInvocationsFinderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
            "org.mockito.internal.verification.NoMoreInteractionsTest",
            "org.mockito.internal.matchers.LocalizedMatcherTest",
            "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest",
            "org.concurrentmockito.ThreadsStubSharedMockTest",
            "org.mockitousage.matchers.GenericMatchersTest",
            "org.mockitousage.stacktrace.ClickableStackTracesTest",
            "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
            "org.mockito.MockingDetailsTest",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest",
            "org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest",
            "org.mockitousage.bugs.ShouldAllowInlineMockCreationTest",
            "org.mockitousage.internal.debugging.LocationImplTest",
            "org.mockitousage.spies.PartialMockingWithSpiesTest",
            "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
            "org.mockitousage.annotation.WrongSetOfAnnotationsTest",
            "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest",
            "org.mockito.internal.invocation.InvocationMarkerTest",
            "org.mockitousage.bugs.NPEOnAnyClassMatcherAutounboxTest",
            "org.mockitousage.stubbing.StubbingWithCustomAnswerTest",
            "org.mockitousage.misuse.CleaningUpPotentialStubbingTest",
            "org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest",
            "org.mockito.internal.util.reflection.WhiteboxTest",
            "org.mockito.internal.invocation.InvocationImplTest",
            "org.mockitousage.stubbing.StubbingWithExtraAnswersTest",
            "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
            "org.mockito.MockitoTest",
            "org.mockito.internal.util.TimerTest",
            "org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest",
            "org.mockito.internal.progress.TimesTest",
            "org.mockito.internal.invocation.SerializableMethodTest",
            "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
            "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
            "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
            "org.mockitousage.bugs.SpyShouldHaveNiceNameTest",
            "org.mockito.internal.InOrderImplTest",
            "org.mockitousage.stacktrace.StackTraceFilteringTest",
            "org.mockitousage.junitrunner.ModellingVerboseMockitoTest",
            "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
            "org.mockitousage.stubbing.DeprecatedStubbingTest",
            "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest",
            "org.mockito.internal.util.reflection.FieldReaderTest",
            "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
            "org.mockitousage.verification.VerificationAfterDelayTest",
            "org.mockitousage.verification.VerificationWithTimeoutTest",
            "org.mockitousage.bugs.BridgeMethodsHitAgainTest",
            "org.mockitousage.verification.OnlyVerificationTest",
            "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest",
            "org.mockito.exceptions.base.MockitoAssertionErrorTest",
            "org.mockito.internal.InvalidStateDetectionTest",
            "org.mockitousage.basicapi.ObjectsSerializationTest",
            "org.mockito.internal.runners.RunnerFactoryTest",
            "org.mockitousage.stubbing.StubbingUsingDoReturnTest",
            "org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest",
            "org.mockito.internal.util.MockUtilTest",
            "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
            "org.mockitousage.verification.VerificationExcludingStubsTest",
            "org.mockitousage.annotation.SpyAnnotationTest",
            "org.mockito.internal.verification.VerificationDataImplTest",
            "org.mockito.internal.util.reflection.LenientCopyToolTest",
            "org.mockito.exceptions.base.MockitoExceptionTest",
            "org.mockito.internal.matchers.EqualsTest",
            "org.mockitousage.basicapi.MocksSerializationForAnnotationTest",
            "org.mockitousage.basicapi.UsingVarargsTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest",
            "org.mockitousage.misuse.ExplicitFrameworkValidationTest",
            "org.mockitousage.stubbing.DeepStubbingTest",
            "org.mockitousage.bugs.NPEWhenMockingThrowablesTest",
            "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
            "org.mockitousage.matchers.ReflectionMatchersTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenStubNotUsedTest",
            "org.concurrentmockito.ThreadsShareAMockTest",
            "org.mockito.internal.util.collections.ListUtilTest",
            "org.mockitousage.annotation.CaptorAnnotationTest",
            "org.mockitousage.stubbing.BasicStubbingTest",
            "org.mockitousage.annotation.SpyInjectionTest",
            "org.mockito.internal.invocation.InvocationsFinderTest",
            "org.mockitousage.spies.SpyingOnInterfacesTest",
            "org.mockitousage.stubbing.CallingRealMethodTest",
            "org.mockitousage.misuse.InvalidUsageTest",
            "org.mockitousage.PlaygroundTest",
            "org.mockito.exceptions.ReporterTest",
            "org.mockito.internal.invocation.InvocationMatcherTest",
            "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
            "org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest",
            "org.mockito.internal.handler.MockHandlerFactoryTest",
            "org.mockito.ArgumentCaptorTest",
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest",
            "org.mockitousage.bugs.TimeoutWithAtMostOrNeverShouldBeDisabledTest",
            "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
            "org.mockitousage.verification.VerificationInOrderWithCallsTest",
            "org.mockito.internal.verification.SmartPrinterTest",
            "org.mockito.internal.invocation.ArgumentsComparatorTest",
            "org.mockitousage.basicapi.MocksCreationTest",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest",
            "org.mockitousage.annotation.CaptorAnnotationUnhappyPathTest",
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest",
            "org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest",
            "org.mockito.runners.RunnersValidateFrameworkUsageTest",
            "org.mockitousage.annotation.AnnotationsTest",
            "org.mockitousage.debugging.PrintingInvocationsWhenEverythingOkTest",
            "org.mockitoutil.CustomAssertionsTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
            "org.mockitousage.matchers.MoreMatchersTest",
            "org.mockitousage.stubbing.StubbingWithThrowablesTest",
            "org.mockito.internal.matchers.MatchersToStringTest",
            "org.mockitousage.verification.AtMostXVerificationTest",
            "org.mockitousage.verification.VerificationUsingMatchersTest",
            "org.mockitousage.internal.invocation.realmethod.CleanTraceRealMethodTest",
            "org.mockitousage.debugging.PrintingInvocationsDetectsUnusedStubTest",
            "org.mockitousage.verification.RelaxedVerificationInOrderTest",
            "org.mockitousage.customization.BDDMockitoTest",
            "org.mockito.internal.matchers.CapturingMatcherTest",
            "org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest",
            "org.mockitousage.misuse.RestrictedObjectMethodsTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest",
            "org.mockitousage.verification.ExactNumberOfTimesVerificationTest",
            "org.mockito.internal.configuration.plugins.PluginFinderTest",
            "org.mockitousage.junitrunner.VerboseMockitoRunnerTest",
            "org.mockitousage.verification.BasicVerificationInOrderTest",
            "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
            "org.mockito.internal.reporting.PluralizerTest",
            "org.mockitousage.PlaygroundWithDemoOfUnclonedParametersProblemTest",
            "org.mockitousage.bugs.AtLeastMarksAllInvocationsVerified",
            "org.mockitousage.packageprotected.MockingPackageProtectedTest",
            "org.mockitousage.matchers.CustomMatcherDoesYieldCCETest",
            "org.mockito.internal.matchers.MatchersPrinterTest",
            "org.mockitousage.spies.SpyingOnRealObjectsTest",
            "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
            "org.mockitousage.bugs.CovariantOverrideTest",
            "org.mockito.internal.util.DecamelizerTest",
            "org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest",
            "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest",
            "org.mockitousage.bugs.ShouldOnlyModeAllowCapturingArgumentsTest",
            "org.mockito.internal.debugging.WarningsPrinterImplTest",
            "org.mockitousage.verification.BasicVerificationTest",
            "org.mockito.internal.util.junit.JUnitFailureHackerTest",
            "org.mockito.internal.matchers.ComparableMatchersTest",
            "org.mockito.internal.debugging.LoggingListenerTest",
            "org.mockitousage.puzzlers.BridgeMethodPuzzleTest",
            "org.mockitousage.bugs.CaptorAnnotationAutoboxingTest",
            "org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest",
            "org.mockitousage.bugs.ParentClassNotPublicTest",
            "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
            "org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest",
            "org.mockito.internal.util.SimpleMockitoLoggerTest",
            "org.mockitousage.matchers.MatchersTest",
            "org.mockitousage.basicapi.ReplacingObjectMethodsTest",
            "org.mockitousage.matchers.HamcrestMatchersTest",
            "org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest",
            "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
            "org.mockitousage.bugs.NPEWithCertainMatchersTest",
            "org.mockito.internal.progress.MockingProgressImplTest",
            "org.mockito.internal.matchers.EqualityTest",
            "org.mockito.verification.TimeoutTest",
            "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest",
            "org.mockitousage.stubbing.CloningParameterTest",
            "org.mockitousage.examples.use.ExampleTest",
            "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
            "org.mockito.internal.runners.util.RunnerProviderTest",
            "org.mockito.internal.debugging.WarningsFinderTest",
            "org.mockitousage.basicapi.MockingDetailsTest",
            "org.mockitousage.verification.FindingRedundantInvocationsInOrderTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
            "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
            "org.mockitousage.misuse.DetectingMisusedMatchersTest",
            "org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest",
            "org.mockitousage.stubbing.StubbingConsecutiveAnswersTest",
            "org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest",
            "org.mockitousage.performance.LoadsOfMocksTest",
            "org.mockitousage.matchers.CustomMatchersTest",
            "org.mockitousage.verification.VerificationInOrderTest",
            "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
            "org.mockitousage.matchers.NewMatchersTest",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
            "org.mockitousage.bugs.MockitoRunnerBreaksWhenNoTestMethodsTest",
            "org.mockito.internal.handler.MockHandlerImplTest",
            "org.mockito.internal.runners.util.TestMethodsFinderTest",
            "org.mockitousage.verification.SelectedMocksInOrderVerificationTest",
            "org.mockitousage.stubbing.SmartNullsStubbingTest",
            "org.mockito.internal.configuration.ClassPathLoaderTest",
            "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
            "org.mockitousage.bugs.AIOOBExceptionWithAtLeastTest",
            "org.mockito.internal.creation.MockSettingsImplTest",
            "org.mockitousage.stubbing.ReturningDefaultValuesTest",
            "org.mockitousage.basicapi.ResetTest",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest"
        ],
        "src_path": "test/org/mockitoutil/TestBase.java",
        "signature": "org.mockitoutil.TestBase.getStackTrace(java.lang.Throwable)",
        "snippet": "    protected String getStackTrace(Throwable e) {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        e.printStackTrace(new PrintStream(out));\n        try {\n            out.close();\n        } catch (IOException ex) {}\n        return out.toString();\n    }",
        "begin_line": 181,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 64)",
            "(line 183,col 9)-(line 183,col 48)",
            "(line 184,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 187,col 30)"
        ]
    },
    {
        "class_name": "org.mockitoutil.Assertor",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/Assertor.java",
        "signature": "org.mockitoutil.Assertor.assertValue(T)",
        "snippet": "    void assertValue(T value);",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.isolated_class_loader_cannot_load_classes_when_no_given_prefix()",
        "snippet": "    @Test(expected = ClassNotFoundException.class)\n    public void isolated_class_loader_cannot_load_classes_when_no_given_prefix() throws Exception {\n        // given\n        ClassLoader cl = isolatedClassLoader().build();\n\n        // when\n        cl.loadClass(\"org.mockito.Mockito\");\n\n        // then raises CNFE\n    }",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 55)",
            "(line 24,col 9)-(line 24,col 44)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.isolated_class_loader_cannot_load_classes_if_no_code_source_path()",
        "snippet": "    @Test\n    public void isolated_class_loader_cannot_load_classes_if_no_code_source_path() throws Exception {\n        // given\n        ClassLoader cl = isolatedClassLoader()\n                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n                .build();\n\n        // when\n        try {\n            cl.loadClass(CLASS_NAME_USING_INTERFACE);\n            fail();\n        } catch (ClassNotFoundException e) {\n            // then\n            assertThat(e.getMessage()).contains(CLASS_NAME_USING_INTERFACE);\n        }\n    }",
        "begin_line": 29,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 34,col 25)",
            "(line 37,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.isolated_class_loader_cannot_load_classes_not_matching_the_prefix()",
        "snippet": "    @Test\n    public void isolated_class_loader_cannot_load_classes_not_matching_the_prefix() throws Exception {\n        // given\n        ClassLoader cl = isolatedClassLoader()\n                .withCurrentCodeSourceUrls()\n                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n                .build();\n\n        // when\n        try {\n            cl.loadClass(CLASS_NAME_USING_INTERFACE);\n            fail();\n        } catch (NoClassDefFoundError e) {\n            // then\n            assertThat(e.getMessage()).contains(\"org/mockitoutil/ClassLoadersTest$Interface1\");\n        }\n    }",
        "begin_line": 46,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 52,col 25)",
            "(line 55,col 9)-(line 61,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.isolated_class_loader_can_load_all_classes_unless_all_classes_mathch_the_prefixes()",
        "snippet": "    @Test\n    public void isolated_class_loader_can_load_all_classes_unless_all_classes_mathch_the_prefixes() throws Exception {\n        // given\n        ClassLoader cl = isolatedClassLoader()\n                .withCurrentCodeSourceUrls()\n                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n                .withPrivateCopyOf(INTERFACE_NAME)\n                .build();\n\n        // when\n        Class<?> aClass = cl.loadClass(CLASS_NAME_USING_INTERFACE);\n\n        // then\n        assertThat(aClass).isNotNull();\n        assertThat(aClass.getClassLoader()).isEqualTo(cl);\n        assertThat(aClass.getInterfaces()[0].getClassLoader()).isEqualTo(cl);\n    }",
        "begin_line": 64,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 71,col 25)",
            "(line 74,col 9)-(line 74,col 67)",
            "(line 77,col 9)-(line 77,col 39)",
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 77)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.isolated_class_loader_has_no_parent()",
        "snippet": "    @Test\n    public void isolated_class_loader_has_no_parent() throws Exception {\n        ClassLoader cl = isolatedClassLoader()\n                .withCurrentCodeSourceUrls()\n                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n                .withPrivateCopyOf(INTERFACE_NAME)\n                .build();\n\n        assertThat(cl.getParent()).isNull();\n    }",
        "begin_line": 82,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 88,col 25)",
            "(line 90,col 9)-(line 90,col 44)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.excluding_class_loader_cannot_load_classes_when_no_correct_source_url_set()",
        "snippet": "    @Test(expected = ClassNotFoundException.class)\n    public void excluding_class_loader_cannot_load_classes_when_no_correct_source_url_set() throws Exception {\n        // given\n        ClassLoader cl = excludingClassLoader()\n                .withCodeSourceUrlOf(this.getClass())\n                .build();\n\n        // when\n        cl.loadClass(\"org.mockito.Mockito\");\n\n        // then class CNFE\n    }",
        "begin_line": 93,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 98,col 25)",
            "(line 101,col 9)-(line 101,col 44)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.excluding_class_loader_can_load_classes_when_correct_source_url_set()",
        "snippet": "    @Test\n    public void excluding_class_loader_can_load_classes_when_correct_source_url_set() throws Exception {\n        // given\n        ClassLoader cl = excludingClassLoader()\n                .withCodeSourceUrlOf(Mockito.class)\n                .build();\n\n        // when\n        cl.loadClass(\"org.mockito.Mockito\");\n\n        // then class successfully loaded\n    }",
        "begin_line": 106,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 111,col 25)",
            "(line 114,col 9)-(line 114,col 44)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.excluding_class_loader_cannot_load_class_when_excluded_prefix_match_class_to_load()",
        "snippet": "    @Test\n    public void excluding_class_loader_cannot_load_class_when_excluded_prefix_match_class_to_load() throws Exception {\n        // given\n        ClassLoader cl = excludingClassLoader()\n                .withCodeSourceUrlOf(Mockito.class)\n                .without(\"org.mockito.BDDMockito\")\n                .build();\n\n        cl.loadClass(\"org.mockito.Mockito\");\n\n        // when\n        try {\n            cl.loadClass(\"org.mockito.BDDMockito\");\n            fail(\"should have raise a ClassNotFoundException\");\n        } catch (ClassNotFoundException e) {\n            assertThat(e.getMessage()).contains(\"org.mockito.BDDMockito\");\n        }\n\n        // then class successfully loaded\n    }",
        "begin_line": 119,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 125,col 25)",
            "(line 127,col 9)-(line 127,col 44)",
            "(line 130,col 9)-(line 135,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.can_not_load_a_class_not_previously_registered_in_builder()",
        "snippet": "    @Test\n    public void can_not_load_a_class_not_previously_registered_in_builder() throws Exception {\n        // given\n        ClassLoader cl = ClassLoaders\n                .inMemoryClassLoader()\n                .withClassDefinition(\"yop.Dude\", SimpleClassGenerator.makeMarkerInterface(\"yop.Dude\"))\n                .build();\n\n        // when\n        try {\n            cl.loadClass(\"not.Defined\");\n            fail();\n        } catch (ClassNotFoundException e) {\n            // then\n            assertThat(e.getMessage()).contains(\"not.Defined\");\n        }\n    }",
        "begin_line": 140,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 146,col 25)",
            "(line 149,col 9)-(line 155,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.can_load_a_class_in_memory_from_bytes()",
        "snippet": "    @Test\n    public void can_load_a_class_in_memory_from_bytes() throws Exception {\n        // given\n        ClassLoader cl = ClassLoaders\n                .inMemoryClassLoader()\n                .withClassDefinition(\"yop.Dude\", SimpleClassGenerator.makeMarkerInterface(\"yop.Dude\"))\n                .build();\n\n        // when\n        Class<?> aClass = cl.loadClass(\"yop.Dude\");\n\n        // then\n        assertThat(aClass).isNotNull();\n        assertThat(aClass.getClassLoader()).isEqualTo(cl);\n        assertThat(aClass.getName()).isEqualTo(\"yop.Dude\");\n    }",
        "begin_line": 158,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 164,col 25)",
            "(line 167,col 9)-(line 167,col 51)",
            "(line 170,col 9)-(line 170,col 39)",
            "(line 171,col 9)-(line 171,col 58)",
            "(line 172,col 9)-(line 172,col 59)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.cannot_load_a_class_file_not_in_parent()",
        "snippet": "    @Test\n    public void cannot_load_a_class_file_not_in_parent() throws Exception {\n        // given\n        ClassLoader cl = ClassLoaders\n                .inMemoryClassLoader()\n                .withParent(jdkClassLoader())\n                .build();\n\n        cl.loadClass(\"java.lang.String\");\n\n        try {\n            // when\n            cl.loadClass(\"org.mockito.Mockito\");\n            fail(\"should have not found Mockito class\");\n        } catch (ClassNotFoundException e) {\n            // then\n            assertThat(e.getMessage()).contains(\"org.mockito.Mockito\");\n        }\n    }",
        "begin_line": 175,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 181,col 25)",
            "(line 183,col 9)-(line 183,col 41)",
            "(line 185,col 9)-(line 192,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.can_list_all_classes_reachable_in_a_classloader()",
        "snippet": "    @Test\n    public void can_list_all_classes_reachable_in_a_classloader() throws Exception {\n        ClassLoader classLoader = ClassLoaders.inMemoryClassLoader()\n                .withParent(jdkClassLoader())\n                .withClassDefinition(\"a.A\", SimpleClassGenerator.makeMarkerInterface(\"a.A\"))\n                .withClassDefinition(\"a.b.B\", SimpleClassGenerator.makeMarkerInterface(\"a.b.B\"))\n                .withClassDefinition(\"c.C\", SimpleClassGenerator.makeMarkerInterface(\"c.C\"))\n//                .withCodeSourceUrlOf(ClassLoaders.class)\n                .build();\n\n        assertThat(ClassLoaders.in(classLoader).listOwnedClasses()).containsOnly(\"a.A\", \"a.b.B\", \"c.C\");\n        assertThat(ClassLoaders.in(classLoader).omit(\"b\", \"c\").listOwnedClasses()).containsOnly(\"a.A\");\n    }",
        "begin_line": 195,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 203,col 25)",
            "(line 205,col 9)-(line 205,col 104)",
            "(line 206,col 9)-(line 206,col 103)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.return_bootstrap_classloader()",
        "snippet": "    @Test\n    public void return_bootstrap_classloader() throws Exception {\n        assertThat(jdkClassLoader()).isNotEqualTo(Mockito.class.getClassLoader());\n        assertThat(jdkClassLoader()).isNotEqualTo(ClassLoaders.class.getClassLoader());\n        assertThat(jdkClassLoader()).isEqualTo(Number.class.getClassLoader());\n        assertThat(jdkClassLoader()).isEqualTo(null);\n    }",
        "begin_line": 209,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 82)",
            "(line 212,col 9)-(line 212,col 87)",
            "(line 213,col 9)-(line 213,col 78)",
            "(line 214,col 9)-(line 214,col 53)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoadersTest",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoadersTest.java",
        "signature": "org.mockitoutil.ClassLoadersTest.return_current_classloader()",
        "snippet": "    @Test\n    public void return_current_classloader() throws Exception {\n        assertThat(currentClassLoader()).isEqualTo(this.getClass().getClassLoader());\n    }",
        "begin_line": 217,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 85)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.SimplePerRealmReloadingClassLoader(org.mockitoutil.SimplePerRealmReloadingClassLoader.ReloadClassPredicate)",
        "snippet": "    public SimplePerRealmReloadingClassLoader(ReloadClassPredicate reloadClassPredicate) {\n        super(getPossibleClassPathsUrls());\n        this.reloadClassPredicate = reloadClassPredicate;\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 43)",
            "(line 22,col 9)-(line 22,col 57)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.SimplePerRealmReloadingClassLoader(java.lang.ClassLoader, org.mockitoutil.SimplePerRealmReloadingClassLoader.ReloadClassPredicate)",
        "snippet": "    public SimplePerRealmReloadingClassLoader(ClassLoader parentClassLoader, ReloadClassPredicate reloadClassPredicate) {\n        super(getPossibleClassPathsUrls(), parentClassLoader);\n        this.reloadClassPredicate = reloadClassPredicate;\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 62)",
            "(line 27,col 9)-(line 27,col 57)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.getPossibleClassPathsUrls()",
        "snippet": "    private static URL[] getPossibleClassPathsUrls() {\n        return new URL[]{\n                obtainClassPath(),\n                obtainClassPath(\"org.mockito.Mockito\"),\n                obtainClassPath(\"net.bytebuddy.ByteBuddy\")\n        };\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 35,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.obtainClassPath()",
        "snippet": "    private static URL obtainClassPath() {\n        String className = SimplePerRealmReloadingClassLoader.class.getName();\n        return obtainClassPath(className);\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 78)",
            "(line 40,col 9)-(line 40,col 42)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.obtainClassPath(java.lang.String)",
        "snippet": "    private static URL obtainClassPath(String className) {\n        String path = className.replace('.', '/') + \".class\";\n        String url = SimplePerRealmReloadingClassLoader.class.getClassLoader().getResource(path).toExternalForm();\n\n        try {\n            return new URL(url.substring(0, url.length() - path.length()));\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(\"Classloader couldn't obtain a proper classpath URL\", e);\n        }\n    }",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 61)",
            "(line 45,col 9)-(line 45,col 114)",
            "(line 47,col 9)-(line 51,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.loadClass(java.lang.String)",
        "snippet": "    @Override\n    public Class<?> loadClass(String qualifiedClassName) throws ClassNotFoundException {\n        if(reloadClassPredicate.acceptReloadOf(qualifiedClassName)) {\n            // return customLoadClass(qualifiedClassName);\n//            Class<?> loadedClass = findLoadedClass(qualifiedClassName);\n            if(!classHashMap.containsKey(qualifiedClassName)) {\n                Class<?> foundClass = findClass(qualifiedClassName);\n                saveFoundClass(qualifiedClassName, foundClass);\n                return foundClass;\n            }\n\n            return classHashMap.get(qualifiedClassName);\n        }\n        return useParentClassLoaderFor(qualifiedClassName);\n    }",
        "begin_line": 56,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 68,col 9)",
            "(line 69,col 9)-(line 69,col 59)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.saveFoundClass(java.lang.String, java.lang.Class<?>)",
        "snippet": "    private void saveFoundClass(String qualifiedClassName, Class<?> foundClass) {\n        classHashMap.put(qualifiedClassName, foundClass);\n    }",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 57)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.useParentClassLoaderFor(java.lang.String)",
        "snippet": "    private Class<?> useParentClassLoaderFor(String qualifiedName) throws ClassNotFoundException {\n        return super.loadClass(qualifiedName);\n    }",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 46)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.doInRealm(java.lang.String)",
        "snippet": "    public Object doInRealm(String callableCalledInClassLoaderRealm) throws Exception {\n        ClassLoader current = Thread.currentThread().getContextClassLoader();\n        try {\n            Thread.currentThread().setContextClassLoader(this);\n            Object instance = this.loadClass(callableCalledInClassLoaderRealm).getConstructor().newInstance();\n            if (instance instanceof Callable) {\n                Callable<?> callableInRealm = (Callable<?>) instance;\n                return callableInRealm.call();\n            }\n        } finally {\n            Thread.currentThread().setContextClassLoader(current);\n        }\n        throw new IllegalArgumentException(\"qualified name '\" + callableCalledInClassLoaderRealm + \"' should represent a class implementing Callable\");\n    }",
        "begin_line": 82,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 77)",
            "(line 84,col 9)-(line 93,col 9)",
            "(line 94,col 9)-(line 94,col 151)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.doInRealm(java.lang.String, java.lang.Class[], java.lang.Object[])",
        "snippet": "    public Object doInRealm(String callableCalledInClassLoaderRealm, Class[] argTypes, Object[] args) throws Exception {\n        ClassLoader current = Thread.currentThread().getContextClassLoader();\n        try {\n            Thread.currentThread().setContextClassLoader(this);\n            Object instance = this.loadClass(callableCalledInClassLoaderRealm).getConstructor(argTypes).newInstance(args);\n            if (instance instanceof Callable) {\n                Callable<?> callableInRealm = (Callable<?>) instance;\n                return callableInRealm.call();\n            }\n        } finally {\n            Thread.currentThread().setContextClassLoader(current);\n        }\n\n        throw new IllegalArgumentException(\"qualified name '\" + callableCalledInClassLoaderRealm + \"' should represent a class implementing Callable\");\n    }",
        "begin_line": 98,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 77)",
            "(line 100,col 9)-(line 109,col 9)",
            "(line 111,col 9)-(line 111,col 151)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimplePerRealmReloadingClassLoader",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java",
        "signature": "org.mockitoutil.SimplePerRealmReloadingClassLoader.ReloadClassPredicate.acceptReloadOf(java.lang.String)",
        "snippet": "        boolean acceptReloadOf(String qualifiedName);",
        "begin_line": 116,
        "end_line": 116,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasFirstMethodInStackTrace(java.lang.String)",
        "snippet": "    public static <T> Assertor<Throwable> hasFirstMethodInStackTrace(final String method) {\n        return hasMethodInStackTraceAt(0, method);\n    }",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 50)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasOnlyThoseClassesInStackTrace(java.lang.String...)",
        "snippet": "    public static <T> Assertor<Throwable> hasOnlyThoseClassesInStackTrace(final String ... classes) {\n        return new Assertor<Throwable>() {\n            public void assertValue(Throwable traceElements) {\n                StackTraceElement[] trace = traceElements.getStackTrace();\n                \n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements.getStackTrace()),\n                        classes.length, trace.length);\n                    \n                for (int i = 0; i < trace.length; i++) {\n                    assertEquals(classes[i], trace[i].getClassName());\n                }\n            }\n        };\n    }",
        "begin_line": 26,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 40,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Throwable)",
        "snippet": "            public void assertValue(Throwable traceElements) {\n                StackTraceElement[] trace = traceElements.getStackTrace();\n                \n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements.getStackTrace()),\n                        classes.length, trace.length);\n                    \n                for (int i = 0; i < trace.length; i++) {\n                    assertEquals(classes[i], trace[i].getClassName());\n                }\n            }",
        "begin_line": 28,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 29,col 17)-(line 29,col 74)",
            "(line 31,col 17)-(line 34,col 54)",
            "(line 36,col 17)-(line 38,col 17)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses(java.lang.String...)",
        "snippet": "    public static <T> Assertor<StackTraceElement[]> hasOnlyThoseClasses(final String ... classes) {\n        return new Assertor<StackTraceElement[]>() {\n            public void assertValue(StackTraceElement[] traceElements) {\n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements),\n                        classes.length, traceElements.length);\n                \n                for (int i = 0; i < traceElements.length; i++) {\n                    assertEquals(classes[i], traceElements[i].getClassName());\n                }\n            }\n        };\n    }",
        "begin_line": 43,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 55,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(StackTraceElement[])",
        "snippet": "            public void assertValue(StackTraceElement[] traceElements) {\n                assertEquals(\"Number of classes does not match.\" +\n                        \"\\nExpected: \" + Arrays.toString(classes) + \n                        \"\\nGot: \" + Arrays.toString(traceElements),\n                        classes.length, traceElements.length);\n                \n                for (int i = 0; i < traceElements.length; i++) {\n                    assertEquals(classes[i], traceElements[i].getClassName());\n                }\n            }",
        "begin_line": 45,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 46,col 17)-(line 49,col 62)",
            "(line 51,col 17)-(line 53,col 17)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasMethodInStackTraceAt(int, java.lang.String)",
        "snippet": "    public static <T> Assertor<Throwable> hasMethodInStackTraceAt(final int stackTraceIndex, final String method) {\n        return new Assertor<Throwable>() {\n\n            private String actualMethodAtIndex;\n\n            public void assertValue(Throwable throwable) {\n                actualMethodAtIndex = throwable.getStackTrace()[stackTraceIndex].getMethodName();\n                assertTrue(\n                    \"Method at index: \" + stackTraceIndex + \n                    \"\\n\" +\n                    \"expected to be: \" + method + \n                    \"\\n\" +\n                    \"but is: \" + actualMethodAtIndex,\n                    actualMethodAtIndex.equals(method));\n            }\n        };\n    }",
        "begin_line": 58,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 73,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Throwable)",
        "snippet": "            public void assertValue(Throwable throwable) {\n                actualMethodAtIndex = throwable.getStackTrace()[stackTraceIndex].getMethodName();\n                assertTrue(\n                    \"Method at index: \" + stackTraceIndex + \n                    \"\\n\" +\n                    \"expected to be: \" + method + \n                    \"\\n\" +\n                    \"but is: \" + actualMethodAtIndex,\n                    actualMethodAtIndex.equals(method));\n            }",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 64,col 17)-(line 64,col 97)",
            "(line 65,col 17)-(line 71,col 56)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasBridgeMethod(java.lang.String)",
        "snippet": "    public static <T> Assertor<Object> hasBridgeMethod(final String methodName) {\n        return new Assertor<Object>() {\n\n            public void assertValue(Object o) {\n                Class clazz = null;\n                if (o instanceof Class) {\n                    clazz = (Class) o;\n                } else {\n                    clazz = o.getClass();\n                }\n                \n                for (Method m : clazz.getMethods()) {\n                    if (m.isBridge() && m.getName().equals(methodName)) {\n                        return;\n                    }\n                }\n                \n                fail(\"Bridge method [\" + methodName + \"]\\nnot found in:\\n\" + o);\n            }\n        };\n    }",
        "begin_line": 76,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 95,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Object)",
        "snippet": "            public void assertValue(Object o) {\n                Class clazz = null;\n                if (o instanceof Class) {\n                    clazz = (Class) o;\n                } else {\n                    clazz = o.getClass();\n                }\n                \n                for (Method m : clazz.getMethods()) {\n                    if (m.isBridge() && m.getName().equals(methodName)) {\n                        return;\n                    }\n                }\n                \n                fail(\"Bridge method [\" + methodName + \"]\\nnot found in:\\n\" + o);\n            }",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 80,col 17)-(line 80,col 35)",
            "(line 81,col 17)-(line 85,col 17)",
            "(line 87,col 17)-(line 91,col 17)",
            "(line 93,col 17)-(line 93,col 80)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasExactlyInOrder(T...)",
        "snippet": "    public static <T> Assertor<Collection> hasExactlyInOrder(final T ... elements) {\n        return new Assertor<Collection>() {\n\n            public void assertValue(Collection value) {\n                assertEquals(elements.length, value.size());\n                \n                boolean containsSublist = Collections.indexOfSubList((List<?>) value, Arrays.asList(elements)) != -1;\n                assertTrue(\n                        \"Elements:\" +\n                        \"\\n\" + \n                        Arrays.toString(elements) + \n                        \"\\n\" +\n                        \"were not found in collection:\" +\n                        \"\\n\" +\n                        value, containsSublist);\n            }\n        };\n    }",
        "begin_line": 98,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 114,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Collection)",
        "snippet": "            public void assertValue(Collection value) {\n                assertEquals(elements.length, value.size());\n                \n                boolean containsSublist = Collections.indexOfSubList((List<?>) value, Arrays.asList(elements)) != -1;\n                assertTrue(\n                        \"Elements:\" +\n                        \"\\n\" + \n                        Arrays.toString(elements) + \n                        \"\\n\" +\n                        \"were not found in collection:\" +\n                        \"\\n\" +\n                        value, containsSublist);\n            }",
        "begin_line": 101,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 102,col 17)-(line 102,col 60)",
            "(line 104,col 17)-(line 104,col 117)",
            "(line 105,col 17)-(line 112,col 48)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.contains(org.hamcrest.Matcher<T>...)",
        "snippet": "    public static <T> Assertor<Collection> contains(final Matcher<T> ... elements) {\n        return new Assertor<Collection>() {\n            \n            public void assertValue(Collection value) {\n                int matched = 0;\n                for (Matcher<T> m : elements) {\n                    for (Object el : value) {\n                        if (m.matches(el)) {\n                            matched++;\n                            continue;\n                        }\n                    }\n                }\n                \n                assertEquals(\"At least one of the matchers failed to match any of the elements\", elements.length, matched);\n            }\n        };\n    }",
        "begin_line": 117,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 133,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Collection)",
        "snippet": "            public void assertValue(Collection value) {\n                int matched = 0;\n                for (Matcher<T> m : elements) {\n                    for (Object el : value) {\n                        if (m.matches(el)) {\n                            matched++;\n                            continue;\n                        }\n                    }\n                }\n                \n                assertEquals(\"At least one of the matchers failed to match any of the elements\", elements.length, matched);\n            }",
        "begin_line": 120,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 121,col 17)-(line 121,col 32)",
            "(line 122,col 17)-(line 129,col 17)",
            "(line 131,col 17)-(line 131,col 123)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.clazz(java.lang.Class<?>)",
        "snippet": "    public static org.hamcrest.Matcher<java.lang.Object> clazz(java.lang.Class<?> type) {\n        return CoreMatchers.is(type);\n    }",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 37)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "org.mockitoutil.ExtraMatchers.hasMethodsInStackTrace(java.lang.String...)",
        "snippet": "    public static Assertor hasMethodsInStackTrace(final String ... methods) {\n        return new Assertor<Throwable>() {\n            public void assertValue(Throwable value) {\n                StackTraceElement[] trace = value.getStackTrace();\n                for (int i = 0; i < methods.length; i++) {\n                    assertEquals(\"Expected methods[\" + i + \"] to be in the stack trace.\", methods[i], trace[i].getMethodName());\n                }\n            }\n        };\n    }",
        "begin_line": 140,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 148,col 10)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ExtraMatchers",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ExtraMatchers.java",
        "signature": "assertValue(Throwable)",
        "snippet": "            public void assertValue(Throwable value) {\n                StackTraceElement[] trace = value.getStackTrace();\n                for (int i = 0; i < methods.length; i++) {\n                    assertEquals(\"Expected methods[\" + i + \"] to be in the stack trace.\", methods[i], trace[i].getMethodName());\n                }\n            }",
        "begin_line": 142,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 143,col 17)-(line 143,col 66)",
            "(line 144,col 17)-(line 146,col 17)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ClassLoaders()",
        "snippet": "    protected ClassLoaders() {}",
        "begin_line": 21,
        "end_line": 21,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.isolatedClassLoader()",
        "snippet": "    public static IsolatedURLClassLoaderBuilder isolatedClassLoader() {\n        return new IsolatedURLClassLoaderBuilder();\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 51)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.excludingClassLoader()",
        "snippet": "    public static ExcludingURLClassLoaderBuilder excludingClassLoader() {\n        return new ExcludingURLClassLoaderBuilder();\n    }",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 52)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.inMemoryClassLoader()",
        "snippet": "    public static InMemoryClassLoaderBuilder inMemoryClassLoader() {\n        return new InMemoryClassLoaderBuilder();\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 48)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.in(java.lang.ClassLoader)",
        "snippet": "    public static ReachableClassesFinder in(ClassLoader classLoader_without_jUnit) {\n        return new ReachableClassesFinder(classLoader_without_jUnit);\n    }",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 69)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.jdkClassLoader()",
        "snippet": "    public static ClassLoader jdkClassLoader() {\n        return String.class.getClassLoader();\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 45)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.systemClassLoader()",
        "snippet": "    public static ClassLoader systemClassLoader() {\n        return ClassLoader.getSystemClassLoader();\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 50)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.currentClassLoader()",
        "snippet": "    public static ClassLoader currentClassLoader() {\n        return ClassLoaders.class.getClassLoader();\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 51)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.build()",
        "snippet": "    public abstract ClassLoader build();",
        "begin_line": 51,
        "end_line": 51,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.IsolatedURLClassLoaderBuilder.withPrivateCopyOf(java.lang.String...)",
        "snippet": "        public IsolatedURLClassLoaderBuilder withPrivateCopyOf(String... privatePrefixes) {\n            privateCopyPrefixes.addAll(asList(privatePrefixes));\n            return this;\n        }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 13)-(line 58,col 64)",
            "(line 59,col 13)-(line 59,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.IsolatedURLClassLoaderBuilder.withCodeSourceUrls(java.lang.String...)",
        "snippet": "        public IsolatedURLClassLoaderBuilder withCodeSourceUrls(String... urls) {\n            codeSourceUrls.addAll(pathsToURLs(urls));\n            return this;\n        }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 13)-(line 63,col 53)",
            "(line 64,col 13)-(line 64,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.IsolatedURLClassLoaderBuilder.withCodeSourceUrlOf(java.lang.Class<?>...)",
        "snippet": "        public IsolatedURLClassLoaderBuilder withCodeSourceUrlOf(Class<?>... classes) {\n            for (Class<?> clazz : classes) {\n                codeSourceUrls.add(obtainClassPathOf(clazz.getName()));\n            }\n            return this;\n        }",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 68,col 13)-(line 70,col 13)",
            "(line 71,col 13)-(line 71,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.IsolatedURLClassLoaderBuilder.withCurrentCodeSourceUrls()",
        "snippet": "        public IsolatedURLClassLoaderBuilder withCurrentCodeSourceUrls() {\n            codeSourceUrls.add(obtainClassPathOf(ClassLoaders.class.getName()));\n            return this;\n        }",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 75,col 13)-(line 75,col 80)",
            "(line 76,col 13)-(line 76,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.IsolatedURLClassLoaderBuilder.build()",
        "snippet": "        public ClassLoader build() {\n            return new LocalIsolatedURLClassLoader(\n                    jdkClassLoader(),\n                    codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),\n                    privateCopyPrefixes\n            );\n        }",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 80,col 13)-(line 84,col 14)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.LocalIsolatedURLClassLoader.LocalIsolatedURLClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.ArrayList<java.lang.String>)",
        "snippet": "        public LocalIsolatedURLClassLoader(ClassLoader classLoader, URL[] urls, ArrayList<String> privateCopyPrefixes) {\n            super(urls, classLoader);\n            this.privateCopyPrefixes = privateCopyPrefixes;\n        }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 92,col 13)-(line 92,col 37)",
            "(line 93,col 13)-(line 93,col 59)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.LocalIsolatedURLClassLoader.findClass(java.lang.String)",
        "snippet": "        @Override\n        public Class<?> findClass(String name) throws ClassNotFoundException {\n            if(classShouldBePrivate(name)) return super.findClass(name);\n            throw new ClassNotFoundException(\"Can only load classes with prefix : \" + privateCopyPrefixes);\n        }",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 98,col 13)-(line 98,col 72)",
            "(line 99,col 13)-(line 99,col 107)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.LocalIsolatedURLClassLoader.classShouldBePrivate(java.lang.String)",
        "snippet": "        private boolean classShouldBePrivate(String name) {\n            for (String prefix : privateCopyPrefixes) {\n                if (name.startsWith(prefix)) return true;\n            }\n            return false;\n        }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 13)-(line 105,col 13)",
            "(line 106,col 13)-(line 106,col 25)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ExcludingURLClassLoaderBuilder.without(java.lang.String...)",
        "snippet": "        public ExcludingURLClassLoaderBuilder without(String... privatePrefixes) {\n            privateCopyPrefixes.addAll(asList(privatePrefixes));\n            return this;\n        }",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 115,col 13)-(line 115,col 64)",
            "(line 116,col 13)-(line 116,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ExcludingURLClassLoaderBuilder.withCodeSourceUrls(java.lang.String...)",
        "snippet": "        public ExcludingURLClassLoaderBuilder withCodeSourceUrls(String... urls) {\n            codeSourceUrls.addAll(pathsToURLs(urls));\n            return this;\n        }",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 120,col 13)-(line 120,col 53)",
            "(line 121,col 13)-(line 121,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ExcludingURLClassLoaderBuilder.withCodeSourceUrlOf(java.lang.Class<?>...)",
        "snippet": "        public ExcludingURLClassLoaderBuilder withCodeSourceUrlOf(Class<?>... classes) {\n            for (Class<?> clazz : classes) {\n                codeSourceUrls.add(obtainClassPathOf(clazz.getName()));\n            }\n            return this;\n        }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 13)-(line 127,col 13)",
            "(line 128,col 13)-(line 128,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ExcludingURLClassLoaderBuilder.withCurrentCodeSourceUrls()",
        "snippet": "        public ExcludingURLClassLoaderBuilder withCurrentCodeSourceUrls() {\n            codeSourceUrls.add(obtainClassPathOf(ClassLoaders.class.getName()));\n            return this;\n        }",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 132,col 13)-(line 132,col 80)",
            "(line 133,col 13)-(line 133,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ExcludingURLClassLoaderBuilder.build()",
        "snippet": "        public ClassLoader build() {\n            return new LocalExcludingURLClassLoader(\n                    jdkClassLoader(),\n                    codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),\n                    privateCopyPrefixes\n            );\n        }",
        "begin_line": 136,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 137,col 13)-(line 141,col 14)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.LocalExcludingURLClassLoader.LocalExcludingURLClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.ArrayList<java.lang.String>)",
        "snippet": "        public LocalExcludingURLClassLoader(ClassLoader classLoader, URL[] urls, ArrayList<String> privateCopyPrefixes) {\n            super(urls, classLoader);\n            this.privateCopyPrefixes = privateCopyPrefixes;\n        }",
        "begin_line": 148,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 149,col 13)-(line 149,col 37)",
            "(line 150,col 13)-(line 150,col 59)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.LocalExcludingURLClassLoader.findClass(java.lang.String)",
        "snippet": "        @Override\n        public Class<?> findClass(String name) throws ClassNotFoundException {\n            if(classShouldBePrivate(name)) throw new ClassNotFoundException(\"classes with prefix : \" + privateCopyPrefixes + \" are excluded\");\n            return super.findClass(name);\n        }",
        "begin_line": 153,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 155,col 13)-(line 155,col 142)",
            "(line 156,col 13)-(line 156,col 41)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.LocalExcludingURLClassLoader.classShouldBePrivate(java.lang.String)",
        "snippet": "        private boolean classShouldBePrivate(String name) {\n            for (String prefix : privateCopyPrefixes) {\n                if (name.startsWith(prefix)) return true;\n            }\n            return false;\n        }",
        "begin_line": 159,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 160,col 13)-(line 162,col 13)",
            "(line 163,col 13)-(line 163,col 25)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoaderBuilder.withParent(java.lang.ClassLoader)",
        "snippet": "        public InMemoryClassLoaderBuilder withParent(ClassLoader parent) {\n            this.parent = parent;\n            return this;\n        }",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 171,col 13)-(line 171,col 33)",
            "(line 172,col 13)-(line 172,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoaderBuilder.withClassDefinition(java.lang.String, byte[])",
        "snippet": "        public InMemoryClassLoaderBuilder withClassDefinition(String name, byte[] classDefinition) {\n            inMemoryClassObjects.put(name, classDefinition);\n            return this;\n        }",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 176,col 13)-(line 176,col 60)",
            "(line 177,col 13)-(line 177,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoaderBuilder.build()",
        "snippet": "        public ClassLoader build() {\n            return new InMemoryClassLoader(parent, inMemoryClassObjects);\n        }",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 13)-(line 181,col 73)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoader.InMemoryClassLoader(java.lang.ClassLoader, java.util.Map<java.lang.String, byte[]>)",
        "snippet": "        public InMemoryClassLoader(ClassLoader parent, Map<String, byte[]> inMemoryClassObjects) {\n            super(parent);\n            this.inMemoryClassObjects = inMemoryClassObjects;\n        }",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 13)-(line 190,col 26)",
            "(line 191,col 13)-(line 191,col 61)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoader.findClass(java.lang.String)",
        "snippet": "        protected Class findClass(String name) throws ClassNotFoundException {\n            byte[] classDefinition = inMemoryClassObjects.get(name);\n            if (classDefinition != null) {\n                return defineClass(name, classDefinition, 0, classDefinition.length);\n            }\n            throw new ClassNotFoundException(name);\n        }",
        "begin_line": 194,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 195,col 13)-(line 195,col 68)",
            "(line 196,col 13)-(line 198,col 13)",
            "(line 199,col 13)-(line 199,col 51)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoader.getResources(java.lang.String)",
        "snippet": "        @Override\n        public Enumeration<URL> getResources(String ignored) throws IOException {\n            return inMemoryOnly();\n        }",
        "begin_line": 202,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 13)-(line 204,col 34)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoader.inMemoryOnly()",
        "snippet": "        private Enumeration<URL> inMemoryOnly() {\n            final Set<String> names = inMemoryClassObjects.keySet();\n            return new Enumeration<URL>() {\n                private final MemHandler memHandler = new MemHandler(InMemoryClassLoader.this);\n                private final Iterator<String> it = names.iterator();\n\n                public boolean hasMoreElements() {\n                    return it.hasNext();\n                }\n\n                public URL nextElement() {\n                    try {\n                        return new URL(null, SCHEME + \":\" + it.next(), memHandler);\n                    } catch (MalformedURLException rethrown) {\n                        throw new IllegalStateException(rethrown);\n                    }\n                }\n            };\n        }",
        "begin_line": 207,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 208,col 13)-(line 208,col 68)",
            "(line 209,col 13)-(line 224,col 14)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoader.Anonymous-281699a2-d23b-48e8-9cc1-20d8d2b4fdc1.hasMoreElements()",
        "snippet": "                public boolean hasMoreElements() {\n                    return it.hasNext();\n                }",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 214,col 21)-(line 214,col 40)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.InMemoryClassLoader.Anonymous-589cef2f-a434-4cf1-8e7b-2935c4eae2b3.nextElement()",
        "snippet": "                public URL nextElement() {\n                    try {\n                        return new URL(null, SCHEME + \":\" + it.next(), memHandler);\n                    } catch (MalformedURLException rethrown) {\n                        throw new IllegalStateException(rethrown);\n                    }\n                }",
        "begin_line": 217,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 218,col 21)-(line 222,col 21)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.MemHandler.MemHandler(org.mockitoutil.ClassLoaders.InMemoryClassLoader)",
        "snippet": "        public MemHandler(InMemoryClassLoader inMemoryClassLoader) {\n            this.inMemoryClassLoader = inMemoryClassLoader;\n        }",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 232,col 13)-(line 232,col 59)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.MemHandler.openConnection(java.net.URL)",
        "snippet": "        @Override\n        protected URLConnection openConnection(URL url) throws IOException {\n            return new MemURLConnection(url, inMemoryClassLoader);\n        }",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 237,col 13)-(line 237,col 66)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.MemHandler.MemURLConnection.MemURLConnection(java.net.URL, org.mockitoutil.ClassLoaders.InMemoryClassLoader)",
        "snippet": "            public MemURLConnection(URL url, InMemoryClassLoader inMemoryClassLoader) {\n                super(url);\n                this.inMemoryClassLoader = inMemoryClassLoader;\n                qualifiedName = url.getPath();\n            }",
        "begin_line": 243,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 244,col 17)-(line 244,col 27)",
            "(line 245,col 17)-(line 245,col 63)",
            "(line 246,col 17)-(line 246,col 46)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.MemHandler.MemURLConnection.connect()",
        "snippet": "            @Override\n            public void connect() throws IOException { }",
        "begin_line": 248,
        "end_line": 249,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.MemHandler.MemURLConnection.getInputStream()",
        "snippet": "            @Override\n            public InputStream getInputStream() throws IOException {\n                return new ByteArrayInputStream(inMemoryClassLoader.inMemoryClassObjects.get(qualifiedName));\n            }",
        "begin_line": 251,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 253,col 17)-(line 253,col 109)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.obtainClassPathOf(java.lang.String)",
        "snippet": "    protected URL obtainClassPathOf(String className) {\n        String path = className.replace('.', '/') + \".class\";\n        String url = ClassLoaders.class.getClassLoader().getResource(path).toExternalForm();\n\n        try {\n            return new URL(url.substring(0, url.length() - path.length()));\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(\"Classloader couldn't obtain a proper classpath URL\", e);\n        }\n    }",
        "begin_line": 258,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 61)",
            "(line 260,col 9)-(line 260,col 92)",
            "(line 262,col 9)-(line 266,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.pathsToURLs(java.lang.String...)",
        "snippet": "    protected List<URL> pathsToURLs(String... codeSourceUrls) {\n        return pathsToURLs(Arrays.asList(codeSourceUrls));\n    }",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 58)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.pathsToURLs(java.util.List<java.lang.String>)",
        "snippet": "    private List<URL> pathsToURLs(List<String> codeSourceUrls) {\n        ArrayList<URL> urls = new ArrayList<URL>(codeSourceUrls.size());\n        for (String codeSourceUrl : codeSourceUrls) {\n            URL url = pathToUrl(codeSourceUrl);\n            urls.add(url);\n        }\n        return urls;\n    }",
        "begin_line": 273,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 72)",
            "(line 275,col 9)-(line 278,col 9)",
            "(line 279,col 9)-(line 279,col 20)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.pathToUrl(java.lang.String)",
        "snippet": "    private URL pathToUrl(String path) {\n        try {\n            return new File(path).getAbsoluteFile().toURI().toURL();\n        } catch (MalformedURLException e) {\n            throw new IllegalArgumentException(\"Path is malformed\", e);\n        }\n    }",
        "begin_line": 282,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 287,col 9)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.ReachableClassesFinder(java.lang.ClassLoader)",
        "snippet": "        public ReachableClassesFinder(ClassLoader classLoader) {\n            this.classLoader = classLoader;\n        }",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 295,col 13)-(line 295,col 43)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.omit(java.lang.String...)",
        "snippet": "        public ReachableClassesFinder omit(String... qualifiedNameSubstring) {\n            this.qualifiedNameSubstring.addAll(Arrays.asList(qualifiedNameSubstring));\n            return this;\n        }",
        "begin_line": 298,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 299,col 13)-(line 299,col 86)",
            "(line 300,col 13)-(line 300,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.listOwnedClasses()",
        "snippet": "        public Set<String> listOwnedClasses() throws IOException, URISyntaxException {\n            Enumeration<URL> roots = classLoader.getResources(\"\");\n\n            Set<String> classes = new HashSet<String>();\n            while(roots.hasMoreElements()) {\n                URI uri = roots.nextElement().toURI();\n\n                if (uri.getScheme().equalsIgnoreCase(\"file\")) {\n                    addFromFileBasedClassLoader(classes, uri);\n                } else if(uri.getScheme().equalsIgnoreCase(InMemoryClassLoader.SCHEME)) {\n                    addFromInMemoryBasedClassLoader(classes, uri);\n                } else {\n                    throw new IllegalArgumentException(String.format(\"Given ClassLoader '%s' don't have reachable by File or vi ClassLoaders.inMemory\", classLoader));\n                }\n            }\n            return classes;\n        }",
        "begin_line": 303,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 304,col 13)-(line 304,col 66)",
            "(line 306,col 13)-(line 306,col 56)",
            "(line 307,col 13)-(line 317,col 13)",
            "(line 318,col 13)-(line 318,col 27)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.addFromFileBasedClassLoader(java.util.Set<java.lang.String>, java.net.URI)",
        "snippet": "        private void addFromFileBasedClassLoader(Set<String> classes, URI uri) {\n            File root = new File(uri);\n            classes.addAll(findClassQualifiedNames(root, root, qualifiedNameSubstring));\n        }",
        "begin_line": 321,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 322,col 13)-(line 322,col 38)",
            "(line 323,col 13)-(line 323,col 88)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.addFromInMemoryBasedClassLoader(java.util.Set<java.lang.String>, java.net.URI)",
        "snippet": "        private void addFromInMemoryBasedClassLoader(Set<String> classes, URI uri) {\n            String qualifiedName = uri.getSchemeSpecificPart();\n            if(excludes(qualifiedName, qualifiedNameSubstring)) {\n                classes.add(qualifiedName);\n            }\n        }",
        "begin_line": 326,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 327,col 13)-(line 327,col 63)",
            "(line 328,col 13)-(line 330,col 13)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.findClassQualifiedNames(java.io.File, java.io.File, java.util.Set<java.lang.String>)",
        "snippet": "        private Set<String> findClassQualifiedNames(File root, File file, Set<String> packageFilters) {\n            if(file.isDirectory()) {\n                File[] files = file.listFiles();\n                Set<String> classes = new HashSet<String>();\n                for (File children : files) {\n                    classes.addAll(findClassQualifiedNames(root, children, packageFilters));\n                }\n                return classes;\n            } else {\n                if (file.getName().endsWith(\".class\")) {\n                    String qualifiedName = classNameFor(root, file);\n                    if (excludes(qualifiedName, packageFilters)) {\n                        return Collections.singleton(qualifiedName);\n                    }\n                }\n            }\n            return Collections.emptySet();\n        }",
        "begin_line": 334,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 335,col 13)-(line 349,col 13)",
            "(line 350,col 13)-(line 350,col 42)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.excludes(java.lang.String, java.util.Set<java.lang.String>)",
        "snippet": "        private boolean excludes(String qualifiedName, Set<String> packageFilters) {\n            for (String filter : packageFilters) {\n                if(qualifiedName.contains(filter)) return false;\n            }\n            return true;\n        }",
        "begin_line": 353,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 354,col 13)-(line 356,col 13)",
            "(line 357,col 13)-(line 357,col 24)"
        ]
    },
    {
        "class_name": "org.mockitoutil.ClassLoaders",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/ClassLoaders.java",
        "signature": "org.mockitoutil.ClassLoaders.ReachableClassesFinder.classNameFor(java.io.File, java.io.File)",
        "snippet": "        private String classNameFor(File root, File file) {\n            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.');\n            return temp.subSequence(0, temp.indexOf(\".class\")).toString();\n        }",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 361,col 13)-(line 361,col 114)",
            "(line 362,col 13)-(line 362,col 74)"
        ]
    },
    {
        "class_name": "org.mockitoutil.SimpleClassGenerator",
        "child_classes": [],
        "src_path": "test/org/mockitoutil/SimpleClassGenerator.java",
        "signature": "org.mockitoutil.SimpleClassGenerator.makeMarkerInterface(java.lang.String)",
        "snippet": "    public static byte[] makeMarkerInterface(String qualifiedName) {\n        String relativePath = qualifiedName.replace('.', '/');\n\n        ClassWriter cw = new ClassWriter(0);\n        cw.visit(V1_6, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE, relativePath, null, \"java/lang/Object\", null);\n        cw.visitEnd();\n\n        return cw.toByteArray();\n    }",
        "begin_line": 11,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 62)",
            "(line 14,col 9)-(line 14,col 44)",
            "(line 15,col 9)-(line 15,col 112)",
            "(line 16,col 9)-(line 16,col 22)",
            "(line 18,col 9)-(line 18,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.ArgumentCaptorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/ArgumentCaptorTest.java",
        "signature": "org.mockito.ArgumentCaptorTest.tell_handy_return_values_to_return_value_for()",
        "snippet": "    @Test\n    public void tell_handy_return_values_to_return_value_for() throws Exception {\n        //given\n        final Object expected = new Object(); \n        ArgumentCaptor<Object> argumentCaptor = ArgumentCaptor.forClass(Object.class);\n        argumentCaptor.handyReturnValues = will_return(expected);\n        \n        //when\n        Object returned = argumentCaptor.capture();\n\n        //then\n        assertEquals(expected, returned);\n    }",
        "begin_line": 15,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 45)",
            "(line 19,col 9)-(line 19,col 86)",
            "(line 20,col 9)-(line 20,col 65)",
            "(line 23,col 9)-(line 23,col 51)",
            "(line 26,col 9)-(line 26,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.ArgumentCaptorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/ArgumentCaptorTest.java",
        "signature": "org.mockito.ArgumentCaptorTest.will_return(java.lang.Object)",
        "snippet": "    private HandyReturnValues will_return(final Object expected) {\n        return new HandyReturnValues() {\n            @Override\n            public <T> T returnFor(Class<T> clazz) {\n                return (T) expected;\n            }\n        };\n    }",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 35,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.ArgumentCaptorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/ArgumentCaptorTest.java",
        "signature": "org.mockito.ArgumentCaptorTest.Anonymous-7d87fd4e-9384-4847-a62f-a7de05e05d91.returnFor(java.lang.Class<T>)",
        "snippet": "            @Override\n            public <T> T returnFor(Class<T> clazz) {\n                return (T) expected;\n            }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 17)-(line 33,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.ArgumentCaptorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/ArgumentCaptorTest.java",
        "signature": "org.mockito.ArgumentCaptorTest.yes_I_know_some_matchers_are_misplaced()",
        "snippet": "    @After\n    public void yes_I_know_some_matchers_are_misplaced() {\n        resetState();\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.MockingDetailsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockingDetailsTest.java",
        "signature": "org.mockito.MockingDetailsTest.should_provide_invocations()",
        "snippet": "    @Test\n    public void should_provide_invocations() {\n        List<String> methodsInvoked = new ArrayList<String>() {{\n            add(\"add\");\n            add(\"remove\");\n            add(\"clear\");\n        }};\n        \n        List<String> mockedList = (List<String>) mock(List.class);\n        \n        mockedList.add(\"one\");\n        mockedList.remove(0);\n        mockedList.clear();\n        \n        MockingDetails mockingDetails = new MockitoCore().mockingDetails(mockedList);\n        Collection<Invocation> invocations = mockingDetails.getInvocations();\n        \n        assertNotNull(invocations);\n        assertEquals(invocations.size(),3);\n        for (Invocation method : invocations) {\n            assertTrue(methodsInvoked.contains(method.getMethod().getName()));\n            if (method.getMethod().getName().equals(\"add\")) {\n                assertEquals(method.getArguments().length,1);\n                assertEquals(method.getArguments()[0],\"one\");\n            }\n        }    \n    }",
        "begin_line": 16,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 22,col 11)",
            "(line 24,col 9)-(line 24,col 66)",
            "(line 26,col 9)-(line 26,col 30)",
            "(line 27,col 9)-(line 27,col 29)",
            "(line 28,col 9)-(line 28,col 27)",
            "(line 30,col 9)-(line 30,col 85)",
            "(line 31,col 9)-(line 31,col 77)",
            "(line 33,col 9)-(line 33,col 35)",
            "(line 34,col 9)-(line 34,col 43)",
            "(line 35,col 9)-(line 41,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.MockingDetailsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockingDetailsTest.java",
        "signature": "org.mockito.MockingDetailsTest.should_handle_null_input()",
        "snippet": "    @Test\n    public void should_handle_null_input() {\n        //TODO SF, decide how to handle it and ensure the there is a top level integ test for the mockingDetails().getInvocations()\n        //assertTrue(new MockitoCore().mockingDetails(null).getInvocations().isEmpty());\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.StateMaster",
        "child_classes": [],
        "src_path": "test/org/mockito/StateMaster.java",
        "signature": "org.mockito.StateMaster.reset()",
        "snippet": "    public void reset() {\n        mockingProgress.reset();\n        mockingProgress.resetOngoingStubbing();\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 32)",
            "(line 16,col 9)-(line 16,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.StateMaster",
        "child_classes": [],
        "src_path": "test/org/mockito/StateMaster.java",
        "signature": "org.mockito.StateMaster.validate()",
        "snippet": "    public void validate() {\n        mockingProgress.validateState();\n    }",
        "begin_line": 19,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldRemoveStubbableFromProgressAfterStubbing()",
        "snippet": "    @Test\n    public void shouldRemoveStubbableFromProgressAfterStubbing() {\n        List mock = Mockito.mock(List.class);\n        Mockito.when(mock.add(\"test\")).thenReturn(true);\n        //TODO Consider to move to separate test\n        assertNull(new ThreadSafeMockingProgress().pullOngoingStubbing());\n    }",
        "begin_line": 21,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 45)",
            "(line 24,col 9)-(line 24,col 56)",
            "(line 26,col 9)-(line 26,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifying()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifying() {\n        Mockito.verify(\"notMock\");\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {\n        Mockito.verify(\"notMock\", times(19));\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifyingNoMoreInteractions()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingNoMoreInteractions() {\n        Mockito.verifyNoMoreInteractions(\"notMock\");\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenVerifyingZeroInteractions()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenVerifyingZeroInteractions() {\n        Mockito.verifyZeroInteractions(\"notMock\");\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenStubbingVoid()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenStubbingVoid() {\n        Mockito.stubVoid(\"notMock\");\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldValidateMockWhenCreatingInOrderObject()",
        "snippet": "    @Test(expected=NotAMockException.class)\n    public void shouldValidateMockWhenCreatingInOrderObject() {\n        Mockito.inOrder(\"notMock\");\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.MockitoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/MockitoTest.java",
        "signature": "org.mockito.MockitoTest.shouldStartingMockSettingsContainDefaultBehavior()",
        "snippet": "    @Test\n    public void shouldStartingMockSettingsContainDefaultBehavior() {\n        //when\n        MockSettingsImpl settings = (MockSettingsImpl) Mockito.withSettings();\n        \n        //then\n        assertEquals(Mockito.RETURNS_DEFAULTS, settings.getDefaultAnswer());\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 78)",
            "(line 66,col 9)-(line 66,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InOrderImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InOrderImplTest.java",
        "signature": "org.mockito.internal.InOrderImplTest.shouldMarkVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldMarkVerifiedInOrder() throws Exception {\n        //given\n        InOrderImpl impl = new InOrderImpl((List) asList(mock));\n        Invocation i = new InvocationBuilder().toInvocation();\n        assertFalse(impl.isVerified(i));\n        \n        //when\n        impl.markVerified(i);\n        \n        //then\n        assertTrue(impl.isVerified(i));\n    }",
        "begin_line": 23,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 64)",
            "(line 27,col 9)-(line 27,col 62)",
            "(line 28,col 9)-(line 28,col 40)",
            "(line 31,col 9)-(line 31,col 29)",
            "(line 34,col 9)-(line 34,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        finder = new AllInvocationsFinder();\n        mockOne = mock(IMethods.class);\n        mockTwo = mock(IMethods.class);\n    }",
        "begin_line": 26,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 44)",
            "(line 29,col 9)-(line 29,col 39)",
            "(line 30,col 9)-(line 30,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.shouldGetAllInvocationsInOrder()",
        "snippet": "    @Test\n    public void shouldGetAllInvocationsInOrder() throws Exception {\n        mockOne.simpleMethod(100);\n        mockTwo.simpleMethod(200);\n        mockOne.simpleMethod(300);\n        \n        List<Invocation> invocations = finder.find(asList(mockOne, mockTwo));\n        \n        assertEquals(3, invocations.size());\n        assertArgumentEquals(100, invocations.get(0));\n        assertArgumentEquals(200, invocations.get(1));\n        assertArgumentEquals(300, invocations.get(2));\n    }",
        "begin_line": 33,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 34)",
            "(line 37,col 9)-(line 37,col 34)",
            "(line 39,col 9)-(line 39,col 77)",
            "(line 41,col 9)-(line 41,col 44)",
            "(line 42,col 9)-(line 42,col 54)",
            "(line 43,col 9)-(line 43,col 54)",
            "(line 44,col 9)-(line 44,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.shouldNotCountDuplicatedInteractions()",
        "snippet": "    @Test\n    public void shouldNotCountDuplicatedInteractions() throws Exception {\n        mockOne.simpleMethod(100);\n\n        List<Invocation> invocations = finder.find(asList(mockOne, mockOne, mockOne));\n\n        assertEquals(1, invocations.size());\n    }",
        "begin_line": 47,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 34)",
            "(line 51,col 9)-(line 51,col 86)",
            "(line 53,col 9)-(line 53,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.AllInvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/AllInvocationsFinderTest.java",
        "signature": "org.mockito.internal.AllInvocationsFinderTest.assertArgumentEquals(java.lang.Object, org.mockito.invocation.Invocation)",
        "snippet": "    private void assertArgumentEquals(Object argumentValue, Invocation invocation) {\n        assertEquals(argumentValue, invocation.getArguments()[0]);\n    }",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.resetState()",
        "snippet": "    @After\n    public void resetState() {\n        super.resetState();\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbing() {\n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n\n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n        \n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n\n        when(mock.simpleMethod());\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n    }",
        "begin_line": 50,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 34)",
            "(line 53,col 9)-(line 53,col 88)",
            "(line 55,col 9)-(line 55,col 34)",
            "(line 56,col 9)-(line 56,col 76)",
            "(line 58,col 9)-(line 58,col 34)",
            "(line 59,col 9)-(line 59,col 80)",
            "(line 61,col 9)-(line 61,col 34)",
            "(line 62,col 9)-(line 62,col 78)",
            "(line 64,col 9)-(line 64,col 34)",
            "(line 65,col 9)-(line 65,col 85)",
            "(line 67,col 9)-(line 67,col 34)",
            "(line 68,col 9)-(line 68,col 94)",
            "(line 70,col 9)-(line 70,col 34)",
            "(line 71,col 9)-(line 71,col 96)",
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 74,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedStubbingVoid()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbingVoid() {\n        stubVoid(mock);\n        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n        \n        stubVoid(mock);\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n    }",
        "begin_line": 77,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 23)",
            "(line 80,col 9)-(line 80,col 88)",
            "(line 82,col 9)-(line 82,col 23)",
            "(line 83,col 9)-(line 83,col 76)",
            "(line 85,col 9)-(line 85,col 23)",
            "(line 86,col 9)-(line 86,col 80)",
            "(line 88,col 9)-(line 88,col 23)",
            "(line 89,col 9)-(line 89,col 78)",
            "(line 91,col 9)-(line 91,col 23)",
            "(line 92,col 9)-(line 92,col 85)",
            "(line 94,col 9)-(line 94,col 23)",
            "(line 95,col 9)-(line 95,col 94)",
            "(line 97,col 9)-(line 97,col 23)",
            "(line 98,col 9)-(line 98,col 96)",
            "(line 100,col 9)-(line 100,col 23)",
            "(line 101,col 9)-(line 101,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedDoAnswerStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedDoAnswerStubbing() {\n        doAnswer(null);\n        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n        \n        doAnswer(null);\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n    }",
        "begin_line": 104,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 23)",
            "(line 107,col 9)-(line 107,col 88)",
            "(line 109,col 9)-(line 109,col 23)",
            "(line 110,col 9)-(line 110,col 76)",
            "(line 112,col 9)-(line 112,col 23)",
            "(line 113,col 9)-(line 113,col 80)",
            "(line 115,col 9)-(line 115,col 23)",
            "(line 116,col 9)-(line 116,col 78)",
            "(line 118,col 9)-(line 118,col 23)",
            "(line 119,col 9)-(line 119,col 85)",
            "(line 121,col 9)-(line 121,col 23)",
            "(line 122,col 9)-(line 122,col 94)",
            "(line 124,col 9)-(line 124,col 23)",
            "(line 125,col 9)-(line 125,col 96)",
            "(line 127,col 9)-(line 127,col 23)",
            "(line 128,col 9)-(line 128,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedVerification() {\n        verify(mock);\n        detectsAndCleansUp(new OnStub(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnStubVoid(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerify(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedVerificationException.class);\n        \n        verify(mock);\n        detectsAndCleansUp(new OnDoAnswer(), UnfinishedVerificationException.class);\n    }",
        "begin_line": 131,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 21)",
            "(line 134,col 9)-(line 134,col 80)",
            "(line 136,col 9)-(line 136,col 21)",
            "(line 137,col 9)-(line 137,col 84)",
            "(line 139,col 9)-(line 139,col 21)",
            "(line 140,col 9)-(line 140,col 82)",
            "(line 142,col 9)-(line 142,col 21)",
            "(line 143,col 9)-(line 143,col 89)",
            "(line 145,col 9)-(line 145,col 21)",
            "(line 146,col 9)-(line 146,col 98)",
            "(line 148,col 9)-(line 148,col 21)",
            "(line 149,col 9)-(line 149,col 100)",
            "(line 151,col 9)-(line 151,col 21)",
            "(line 152,col 9)-(line 152,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldDetectMisplacedArgumentMatcher()",
        "snippet": "    @Test\n    public void shouldDetectMisplacedArgumentMatcher() {\n        anyObject();\n        detectsAndCleansUp(new OnStubVoid(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerify(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerifyInOrder(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerifyZeroInteractions(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), InvalidUseOfMatchersException.class);\n        \n        anyObject();\n        detectsAndCleansUp(new OnDoAnswer(), InvalidUseOfMatchersException.class);\n    }",
        "begin_line": 155,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 20)",
            "(line 158,col 9)-(line 158,col 82)",
            "(line 160,col 9)-(line 160,col 20)",
            "(line 161,col 9)-(line 161,col 80)",
            "(line 163,col 9)-(line 163,col 20)",
            "(line 164,col 9)-(line 164,col 87)",
            "(line 166,col 9)-(line 166,col 20)",
            "(line 167,col 9)-(line 167,col 96)",
            "(line 169,col 9)-(line 169,col 20)",
            "(line 170,col 9)-(line 170,col 98)",
            "(line 172,col 9)-(line 172,col 20)",
            "(line 173,col 9)-(line 173,col 82)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldCorrectStateAfterDetectingUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldCorrectStateAfterDetectingUnfinishedStubbing() {\n        stubVoid(mock).toThrow(new RuntimeException());\n        \n        try {\n            stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);\n            fail();\n        } catch (UnfinishedStubbingException e) {}\n        \n        stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);\n        try {\n            mock.oneArg(true);\n            fail();\n        } catch (RuntimeException e) {}\n    }",
        "begin_line": 176,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 55)",
            "(line 180,col 9)-(line 183,col 50)",
            "(line 185,col 9)-(line 185,col 73)",
            "(line 186,col 9)-(line 189,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.shouldCorrectStateAfterDetectingUnfinishedVerification()",
        "snippet": "    @Test\n    public void shouldCorrectStateAfterDetectingUnfinishedVerification() {\n        mock.simpleMethod();\n        verify(mock);\n        \n        try {\n            verify(mock).simpleMethod();\n            fail();\n        } catch (UnfinishedVerificationException e) {}\n        \n        verify(mock).simpleMethod();\n    }",
        "begin_line": 192,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 28)",
            "(line 195,col 9)-(line 195,col 21)",
            "(line 197,col 9)-(line 200,col 54)",
            "(line 202,col 9)-(line 202,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        void detect(IMethods mock);",
        "begin_line": 206,
        "end_line": 206,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            verify(mock);\n        }",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 211,col 13)-(line 211,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            inOrder(mock).verify(mock);\n        }",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 13)-(line 217,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            verifyZeroInteractions(mock);\n        }",
        "begin_line": 222,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 223,col 13)-(line 223,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            verifyNoMoreInteractions(mock);\n        }",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 229,col 13)-(line 229,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            doAnswer(null);\n        }",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 13)-(line 235,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            when(mock);\n        }",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 241,col 13)-(line 241,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            stubVoid(mock);\n        }",
        "begin_line": 246,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 13)-(line 247,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            mock.simpleMethod();\n        }",
        "begin_line": 252,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 253,col 13)-(line 253,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            mock(IMethods.class);\n        }",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 259,col 13)-(line 259,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "detect(IMethods)",
        "snippet": "        public void detect(IMethods mock) {\n            spy(new Object());\n        }",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 13)-(line 265,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.InvalidStateDetectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/InvalidStateDetectionTest.java",
        "signature": "org.mockito.internal.InvalidStateDetectionTest.detectsAndCleansUp(org.mockito.internal.InvalidStateDetectionTest.DetectsInvalidState, java.lang.Class)",
        "snippet": "    private void detectsAndCleansUp(DetectsInvalidState detector, Class expected) {\n        try {\n            detector.detect(mock);\n            fail(\"Should throw an exception\");\n        } catch (Exception e) {\n            assertEquals(expected, e.getClass());\n        }\n        //Make sure state is cleaned up\n        new StateMaster().validate();\n    }",
        "begin_line": 269,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 275,col 9)",
            "(line 277,col 9)-(line 277,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.reporting.PluralizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/reporting/PluralizerTest.java",
        "signature": "org.mockito.internal.reporting.PluralizerTest.shouldGetPluralizedNumber()",
        "snippet": "    @Test\n    public void shouldGetPluralizedNumber() {\n        new Pluralizer();\n        assertEquals(\"0 times\", Pluralizer.pluralize(0));\n        assertEquals(\"1 time\", Pluralizer.pluralize(1));\n        assertEquals(\"2 times\", Pluralizer.pluralize(2));\n        assertEquals(\"20 times\", Pluralizer.pluralize(20));\n    }",
        "begin_line": 12,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 25)",
            "(line 15,col 9)-(line 15,col 57)",
            "(line 16,col 9)-(line 16,col 56)",
            "(line 17,col 9)-(line 17,col 57)",
            "(line 18,col 9)-(line 18,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        notifier = new InvocationNotifierHandler(\n                mockHandler,\n                (MockSettingsImpl) new MockSettingsImpl().invocationListeners(customListener, listener1, listener2)\n        );\n    }",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 58,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.should_notify_all_listeners_when_calling_delegate_handler()",
        "snippet": "    @Test\n    public void should_notify_all_listeners_when_calling_delegate_handler() throws Throwable {\n        // given\n        given(mockHandler.handle(invocation)).willReturn(\"returned value\");\n\n        // when\n        notifier.handle(invocation);\n\n        // then\n        verify(listener1).reportInvocation(new NotifiedMethodInvocationReport(invocation, \"returned value\"));\n        verify(listener2).reportInvocation(new NotifiedMethodInvocationReport(invocation, \"returned value\"));\n    }",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 75)",
            "(line 67,col 9)-(line 67,col 36)",
            "(line 70,col 9)-(line 70,col 109)",
            "(line 71,col 9)-(line 71,col 109)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.should_notify_all_listeners_when_called_delegate_handler_returns_ex()",
        "snippet": "    @Test\n    public void should_notify_all_listeners_when_called_delegate_handler_returns_ex() throws Throwable {\n        // given\n        Exception computedException = new Exception(\"computed\");\n        given(mockHandler.handle(invocation)).willReturn(computedException);\n\n        // when\n        notifier.handle(invocation);\n\n        // then\n        verify(listener1).reportInvocation(new NotifiedMethodInvocationReport(invocation, (Object) computedException));\n        verify(listener2).reportInvocation(new NotifiedMethodInvocationReport(invocation, (Object) computedException));\n    }",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 64)",
            "(line 78,col 9)-(line 78,col 76)",
            "(line 81,col 9)-(line 81,col 36)",
            "(line 84,col 9)-(line 84,col 119)",
            "(line 85,col 9)-(line 85,col 119)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.should_notify_all_listeners_when_called_delegate_handler_throws_exception_and_rethrow_it()",
        "snippet": "    @Test(expected = ParseException.class)\n    public void should_notify_all_listeners_when_called_delegate_handler_throws_exception_and_rethrow_it() throws Throwable {\n        // given\n        ParseException parseException = new ParseException(\"\", 0);\n        given(mockHandler.handle(invocation)).willThrow(parseException);\n\n        // when\n        try {\n            notifier.handle(invocation);\n            fail();\n        } finally {\n            // then\n            verify(listener1).reportInvocation(new NotifiedMethodInvocationReport(invocation, parseException));\n            verify(listener2).reportInvocation(new NotifiedMethodInvocationReport(invocation, parseException));\n        }\n    }",
        "begin_line": 88,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 72)",
            "(line 95,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.should_report_listener_exception()",
        "snippet": "    @Test\n    public void should_report_listener_exception() throws Throwable {\n        willThrow(new NullPointerException()).given(customListener).reportInvocation(any(MethodInvocationReport.class));\n\n        try {\n            notifier.handle(invocation);\n            fail();\n        } catch (MockitoException me) {\n            assertThat(me.getMessage())\n                    .contains(\"invocation listener\")\n                    .contains(\"CustomListener\")\n                    .contains(\"threw an exception\")\n                    .contains(\"NullPointerException\");\n        }\n    }",
        "begin_line": 105,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 120)",
            "(line 109,col 9)-(line 118,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.should_delegate_all_MockHandlerInterface_to_the_parameterized_MockHandler()",
        "snippet": "    @Test\n    public void should_delegate_all_MockHandlerInterface_to_the_parameterized_MockHandler() throws Exception {\n        notifier.getInvocationContainer();\n        notifier.getMockSettings();\n        notifier.voidMethodStubbable(mock(IMethods.class));\n        notifier.setAnswersForStubbing(new ArrayList<Answer>());\n\n        verify(mockHandler).getInvocationContainer();\n        verify(mockHandler).getMockSettings();\n        verify(mockHandler).voidMethodStubbable(any());\n        verify(mockHandler).setAnswersForStubbing(anyList());\n    }",
        "begin_line": 121,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 42)",
            "(line 124,col 9)-(line 124,col 35)",
            "(line 125,col 9)-(line 125,col 59)",
            "(line 126,col 9)-(line 126,col 64)",
            "(line 128,col 9)-(line 128,col 53)",
            "(line 129,col 9)-(line 129,col 46)",
            "(line 130,col 9)-(line 130,col 55)",
            "(line 131,col 9)-(line 131,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.InvocationNotifierHandlerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java",
        "signature": "org.mockito.internal.handler.InvocationNotifierHandlerTest.CustomListener.reportInvocation(org.mockito.listeners.MethodInvocationReport)",
        "snippet": "        public void reportInvocation(MethodInvocationReport methodInvocationReport) {\n            // nop\n        }",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.should_remove_verification_mode_even_when_invalid_matchers()",
        "snippet": "    @Test\n    public void should_remove_verification_mode_even_when_invalid_matchers() throws Throwable {\n        // given\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        @SuppressWarnings(\"rawtypes\")\n        MockHandlerImpl<?> handler = new MockHandlerImpl(new MockSettingsImpl());\n        handler.mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n        handler.matchersBinder = new MatchersBinder() {\n            public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n                throw new InvalidUseOfMatchersException();\n            }\n        };\n\n        try {\n            // when\n            handler.handle(invocation);\n\n            // then\n            fail();\n        } catch (InvalidUseOfMatchersException ignored) {\n        }\n\n        assertNull(handler.mockingProgress.pullVerificationMode());\n    }",
        "begin_line": 41,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 71)",
            "(line 45,col 9)-(line 46,col 81)",
            "(line 47,col 9)-(line 47,col 91)",
            "(line 48,col 9)-(line 52,col 10)",
            "(line 54,col 9)-(line 61,col 9)",
            "(line 63,col 9)-(line 63,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.Anonymous-2939e864-5852-4a19-a4ec-515f1b4c6134.bindMatchers(org.mockito.internal.progress.ArgumentMatcherStorage, org.mockito.invocation.Invocation)",
        "snippet": "            public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n                throw new InvalidUseOfMatchersException();\n            }",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 17)-(line 50,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.should_throw_mockito_exception_when_invocation_handler_throws_anything()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_throw_mockito_exception_when_invocation_handler_throws_anything() throws Throwable {\n        // given\n        InvocationListener throwingListener = mock(InvocationListener.class);\n        doThrow(new Throwable()).when(throwingListener).reportInvocation(any(MethodInvocationReport.class));\n        MockHandlerImpl<?> handler = create_correctly_stubbed_handler(throwingListener);\n\n        // when\n        handler.handle(invocation);\n    }",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 77)",
            "(line 71,col 9)-(line 71,col 108)",
            "(line 72,col 9)-(line 72,col 88)",
            "(line 75,col 9)-(line 75,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.should_report_bogus_default_answer()",
        "snippet": "    @Test(expected = WrongTypeOfReturnValue.class)\n    public void should_report_bogus_default_answer() throws Throwable {\n        MockSettingsImpl mockSettings = mock(MockSettingsImpl.class);\n        MockHandlerImpl<?> handler = new MockHandlerImpl(mockSettings);\n        given(mockSettings.getDefaultAnswer()).willReturn(new Returns(AWrongType.WRONG_TYPE));\n\n        @SuppressWarnings(\"unused\") // otherwise cast is not done\n        String there_should_not_be_a_CCE_here = (String) handler.handle(\n                new InvocationBuilder().method(Object.class.getDeclaredMethod(\"toString\")).toInvocation()\n        );\n    }",
        "begin_line": 78,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 69)",
            "(line 81,col 9)-(line 81,col 71)",
            "(line 82,col 9)-(line 82,col 94)",
            "(line 84,col 9)-(line 87,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.create_correctly_stubbed_handler(org.mockito.listeners.InvocationListener)",
        "snippet": "    private MockHandlerImpl<?> create_correctly_stubbed_handler(InvocationListener throwingListener) {\n        MockHandlerImpl<?> handler = create_handler_with_listeners(throwingListener);\n        stub_ordinary_invocation_with_given_return_value(handler);\n        return handler;\n    }",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 85)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.stub_ordinary_invocation_with_given_return_value(org.mockito.internal.handler.MockHandlerImpl<?>)",
        "snippet": "    private void stub_ordinary_invocation_with_given_return_value(MockHandlerImpl<?> handler) {\n        stub_ordinary_invocation_with_invocation_matcher(handler, stubbedInvocationMatcher);\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.stub_ordinary_invocation_with_invocation_matcher(org.mockito.internal.handler.MockHandlerImpl<?>, org.mockito.internal.stubbing.StubbedInvocationMatcher)",
        "snippet": "    private void stub_ordinary_invocation_with_invocation_matcher(MockHandlerImpl<?> handler, StubbedInvocationMatcher value) {\n        handler.invocationContainerImpl = mock(InvocationContainerImpl.class);\n        given(handler.invocationContainerImpl.findAnswerFor(any(InvocationImpl.class))).willReturn(value);\n    }",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 78)",
            "(line 103,col 9)-(line 103,col 106)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerImplTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerImplTest.create_handler_with_listeners(org.mockito.listeners.InvocationListener...)",
        "snippet": "    private MockHandlerImpl<?> create_handler_with_listeners(InvocationListener... listener) {\n        @SuppressWarnings(\"rawtypes\")\n        MockHandlerImpl<?> handler = new MockHandlerImpl(mock(MockSettingsImpl.class));\n        handler.matchersBinder = mock(MatchersBinder.class);\n        given(handler.getMockSettings().getInvocationListeners()).willReturn(Arrays.asList(listener));\n        return handler;\n    }",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 109,col 87)",
            "(line 110,col 9)-(line 110,col 60)",
            "(line 111,col 9)-(line 111,col 102)",
            "(line 112,col 9)-(line 112,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerFactoryTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerFactoryTest.handle_result_must_not_be_null_for_primitives()",
        "snippet": "    @Test\n    //see issue 331\n    public void handle_result_must_not_be_null_for_primitives() throws Throwable {\n        //given:\n        MockCreationSettings settings = (MockCreationSettings) new MockSettingsImpl().defaultAnswer(new Returns(null));\n        InternalMockHandler handler = new MockHandlerFactory().create(settings);\n\n        mock.intReturningMethod();\n        Invocation invocation = super.getLastInvocation();\n\n        //when:\n        Object result = handler.handle(invocation);\n\n        //then null value is not a valid result for a primitive\n        assertNotNull(result);\n        assertEquals(0, result);\n    }",
        "begin_line": 24,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 119)",
            "(line 29,col 9)-(line 29,col 80)",
            "(line 31,col 9)-(line 31,col 34)",
            "(line 32,col 9)-(line 32,col 58)",
            "(line 35,col 9)-(line 35,col 51)",
            "(line 38,col 9)-(line 38,col 30)",
            "(line 39,col 9)-(line 39,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.handler.MockHandlerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/handler/MockHandlerFactoryTest.java",
        "signature": "org.mockito.internal.handler.MockHandlerFactoryTest.valid_handle_result_is_permitted()",
        "snippet": "    @Test\n    //see issue 331\n    public void valid_handle_result_is_permitted() throws Throwable {\n        //given:\n        MockCreationSettings settings = (MockCreationSettings) new MockSettingsImpl().defaultAnswer(new Returns(123));\n        InternalMockHandler handler = new MockHandlerFactory().create(settings);\n\n        mock.intReturningMethod();\n        Invocation invocation = super.getLastInvocation();\n\n        //when:\n        Object result = handler.handle(invocation);\n\n        //then\n        assertEquals(123, result);\n    }",
        "begin_line": 42,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 118)",
            "(line 47,col 9)-(line 47,col 80)",
            "(line 49,col 9)-(line 49,col 34)",
            "(line 50,col 9)-(line 50,col 58)",
            "(line 53,col 9)-(line 53,col 51)",
            "(line 56,col 9)-(line 56,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.ClassProviderStub.isJUnit45OrHigherAvailable()",
        "snippet": "        @Override\n        public boolean isJUnit45OrHigherAvailable() {\n            return super.isJUnit45OrHigherAvailable();\n        }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 13)-(line 22,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldCreateRunnerForJUnit44()",
        "snippet": "    @Test\n    public void shouldCreateRunnerForJUnit44() {}",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldCreateRunnerForJUnit45()",
        "snippet": "    @Test\n    public void shouldCreateRunnerForJUnit45() {}",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound()",
        "snippet": "    @Test\n    public void\n    shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound()  throws Exception{\n        //given\n        RunnerProvider provider = new RunnerProvider() {\n            public boolean isJUnit45OrHigherAvailable() {\n                return false;\n            }\n            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                throw new InitializationError(\"Where is JUnit, dude?\");\n            }\n        };\n        RunnerFactory factory = new RunnerFactory(provider);\n        \n        try {\n            //when\n            factory.create(RunnerFactoryTest.class);\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertContains(\"upgrade your JUnit version\", e.getMessage());\n        }\n    }",
        "begin_line": 66,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 77,col 10)",
            "(line 78,col 9)-(line 78,col 60)",
            "(line 80,col 9)-(line 87,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.Anonymous-a773dcba-90d4-48e0-afff-cdad29a76b83.isJUnit45OrHigherAvailable()",
        "snippet": "            public boolean isJUnit45OrHigherAvailable() {\n                return false;\n            }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 17)-(line 72,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.Anonymous-cb47e449-793b-4b5d-b815-6ac3525424cd.newInstance(java.lang.String, java.lang.Class<?>)",
        "snippet": "            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                throw new InitializationError(\"Where is JUnit, dude?\");\n            }",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 17)-(line 75,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldSaySomethingMeaningfulWhenNoTestMethods()",
        "snippet": "    @Test\n    public void shouldSaySomethingMeaningfulWhenNoTestMethods()  throws Exception{\n        //given\n        RunnerFactory factory = new RunnerFactory(new RunnerProvider());\n\n        //when\n        try {\n            factory.create(NoTestMethods.class);\n            fail();\n        }\n        //then\n        catch (MockitoException e) {\n            assertContains(\"No tests\", e.getMessage());\n        }\n    }",
        "begin_line": 92,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 72)",
            "(line 98,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.shouldForwardInvocationTargetException()",
        "snippet": "    @Test\n    public void shouldForwardInvocationTargetException()  throws Exception{\n        //given\n        RunnerFactory factory = new RunnerFactory(new RunnerProvider()\n        {\n            @Override\n            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                throw new InvocationTargetException(new RuntimeException());\n            }\n        });\n\n        //when\n        try {\n            factory.create(this.getClass());\n            fail();\n        }\n        //then\n        catch (InvocationTargetException e) {}\n    }",
        "begin_line": 108,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 117,col 11)",
            "(line 120,col 9)-(line 125,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.RunnerFactoryTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/RunnerFactoryTest.java",
        "signature": "org.mockito.internal.runners.RunnerFactoryTest.Anonymous-582a8a65-f6a1-4aa0-9ecd-86a4a11f1e08.newInstance(java.lang.String, java.lang.Class<?>)",
        "snippet": "            @Override\n            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                throw new InvocationTargetException(new RuntimeException());\n            }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 17)-(line 115,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.util.TestMethodsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/TestMethodsFinderTest.java",
        "signature": "org.mockito.internal.runners.util.TestMethodsFinderTest.HasTests.someTest()",
        "snippet": "        @Test public void someTest() {}",
        "begin_line": 13,
        "end_line": 13,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.runners.util.TestMethodsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/TestMethodsFinderTest.java",
        "signature": "org.mockito.internal.runners.util.TestMethodsFinderTest.DoesNotHaveTests.someTest()",
        "snippet": "        public void someTest() {}",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.runners.util.TestMethodsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/TestMethodsFinderTest.java",
        "signature": "org.mockito.internal.runners.util.TestMethodsFinderTest.shouldKnowWhenClassHasTests()",
        "snippet": "    @Test\n    public void shouldKnowWhenClassHasTests() {\n        assertTrue(new TestMethodsFinder().hasTestMethods(HasTests.class));\n        assertFalse(new TestMethodsFinder().hasTestMethods(DoesNotHaveTests.class));\n    }",
        "begin_line": 20,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 75)",
            "(line 23,col 9)-(line 23,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.util.RunnerProviderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/RunnerProviderTest.java",
        "signature": "org.mockito.internal.runners.util.RunnerProviderTest.shouldKnowAboutJUnit45()",
        "snippet": "    @Test\n    public void shouldKnowAboutJUnit45() throws Exception {\n        //given\n        RunnerProvider provider = new RunnerProvider();\n        //then\n        assertTrue(provider.isJUnit45OrHigherAvailable());\n        //I cannot test the opposite condition :(\n    }",
        "begin_line": 14,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 55)",
            "(line 19,col 9)-(line 19,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.runners.util.RunnerProviderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/runners/util/RunnerProviderTest.java",
        "signature": "org.mockito.internal.runners.util.RunnerProviderTest.shouldCreateRunnerInstance()",
        "snippet": "    @Test\n    public void shouldCreateRunnerInstance() throws Throwable {\n        //given\n        RunnerProvider provider = new RunnerProvider();\n        //when\n        RunnerImpl runner = provider.newInstance(\"org.mockito.internal.runners.JUnit45AndHigherRunnerImpl\", this.getClass());\n        //then\n        assertNotNull(runner);\n    }",
        "begin_line": 23,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 55)",
            "(line 28,col 9)-(line 28,col 125)",
            "(line 30,col 9)-(line 30,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.LoggingListenerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/LoggingListenerTest.java",
        "signature": "org.mockito.internal.debugging.LoggingListenerTest.shouldLogUnusedStub()",
        "snippet": "    @Test\n    public void shouldLogUnusedStub() {\n        //given\n        LoggingListener listener = new LoggingListener(false, logger);\n\n        //when\n        listener.foundUnusedStub(new InvocationBuilder().toInvocation());\n\n        //then\n        verify(logger).log(notNull());\n    }",
        "begin_line": 20,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 70)",
            "(line 26,col 9)-(line 26,col 73)",
            "(line 29,col 9)-(line 29,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.LoggingListenerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/LoggingListenerTest.java",
        "signature": "org.mockito.internal.debugging.LoggingListenerTest.shouldLogUnstubbed()",
        "snippet": "    @Test\n    public void shouldLogUnstubbed() {\n        //given\n        LoggingListener listener = new LoggingListener(true, logger);\n\n        //when\n        listener.foundUnstubbed(new InvocationBuilder().toInvocationMatcher());\n\n        //then\n        verify(logger).log(notNull());\n    }",
        "begin_line": 32,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 69)",
            "(line 38,col 9)-(line 38,col 79)",
            "(line 41,col 9)-(line 41,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.LoggingListenerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/LoggingListenerTest.java",
        "signature": "org.mockito.internal.debugging.LoggingListenerTest.shouldNotLogUnstubbed()",
        "snippet": "    @Test\n    public void shouldNotLogUnstubbed() {\n        //given\n        LoggingListener listener = new LoggingListener(false, logger);\n\n        //when\n        listener.foundUnstubbed(new InvocationBuilder().toInvocationMatcher());\n\n        //then\n        verify(logger, never()).log(notNull());\n    }",
        "begin_line": 44,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 70)",
            "(line 50,col 9)-(line 50,col 79)",
            "(line 53,col 9)-(line 53,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.LoggingListenerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/LoggingListenerTest.java",
        "signature": "org.mockito.internal.debugging.LoggingListenerTest.shouldLogDifferentArgs()",
        "snippet": "    @Test\n    public void shouldLogDifferentArgs() {\n        //given\n        LoggingListener listener = new LoggingListener(true, logger);\n\n        //when\n        listener.foundStubCalledWithDifferentArgs(new InvocationBuilder().toInvocation(), new InvocationBuilder().toInvocationMatcher());\n\n        //then\n        verify(logger).log(notNull());\n    }",
        "begin_line": 56,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 69)",
            "(line 62,col 9)-(line 62,col 137)",
            "(line 65,col 9)-(line 65,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterImplTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterImplTest.shouldUseFinderCorrectly()",
        "snippet": "    @Test\n    public void shouldUseFinderCorrectly() {\n        // given\n        WarningsPrinterImpl printer = new WarningsPrinterImpl(false, finder);\n\n        // when\n        printer.print(logger);\n\n        // then\n        ArgumentCaptor<LoggingListener> arg = ArgumentCaptor.forClass(LoggingListener.class);\n        verify(finder).find(arg.capture());\n        assertEquals(logger, arg.getValue().getLogger());\n        assertEquals(false, arg.getValue().isWarnAboutUnstubbed());\n    }",
        "begin_line": 21,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 77)",
            "(line 27,col 9)-(line 27,col 30)",
            "(line 30,col 9)-(line 30,col 93)",
            "(line 31,col 9)-(line 31,col 43)",
            "(line 32,col 9)-(line 32,col 57)",
            "(line 33,col 9)-(line 33,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterImplTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterImplTest.shouldPassCorrectWarningFlag()",
        "snippet": "    @Test\n    public void shouldPassCorrectWarningFlag() {\n        // given\n        WarningsPrinterImpl printer = new WarningsPrinterImpl(true, finder);\n\n        // when\n        printer.print(logger);\n\n        // then\n        ArgumentCaptor<LoggingListener> arg = ArgumentCaptor.forClass(LoggingListener.class);\n        verify(finder).find(arg.capture());\n        assertEquals(true, arg.getValue().isWarnAboutUnstubbed());\n    }",
        "begin_line": 36,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 76)",
            "(line 42,col 9)-(line 42,col 30)",
            "(line 45,col 9)-(line 45,col 93)",
            "(line 46,col 9)-(line 46,col 43)",
            "(line 47,col 9)-(line 47,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsPrinterImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsPrinterImplTest.java",
        "signature": "org.mockito.internal.debugging.WarningsPrinterImplTest.shouldPrintToString()",
        "snippet": "    @Test\n    public void shouldPrintToString() {\n        // given\n        WarningsPrinterImpl printer = spy(new WarningsPrinterImpl(true, finder));\n\n        // when\n        String out = printer.print();\n\n        // then\n        verify(printer).print((MockitoLogger) notNull());\n        assertNotNull(out);\n    }",
        "begin_line": 50,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 81)",
            "(line 56,col 9)-(line 56,col 37)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsFinderTest.java",
        "signature": "org.mockito.internal.debugging.WarningsFinderTest.shouldPrintUnusedStub()",
        "snippet": "    @Test\n    public void shouldPrintUnusedStub() {\n        // given\n        Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n\n        // when\n        WarningsFinder finder = new WarningsFinder(asList(unusedStub), Arrays.<InvocationMatcher>asList());\n        finder.find(listener);\n\n        // then\n        verify(listener, only()).foundUnusedStub(unusedStub);\n    }",
        "begin_line": 26,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 86)",
            "(line 32,col 9)-(line 32,col 107)",
            "(line 33,col 9)-(line 33,col 30)",
            "(line 36,col 9)-(line 36,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsFinderTest.java",
        "signature": "org.mockito.internal.debugging.WarningsFinderTest.shouldPrintUnstubbedInvocation()",
        "snippet": "    @Test\n    public void shouldPrintUnstubbedInvocation() {\n        // given\n        InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n\n        // when\n        WarningsFinder finder = new WarningsFinder(Arrays.<Invocation>asList(), Arrays.<InvocationMatcher>asList(unstubbedInvocation));\n        finder.find(listener);\n\n        // then\n        verify(listener, only()).foundUnstubbed(unstubbedInvocation);\n    }",
        "begin_line": 39,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 112)",
            "(line 45,col 9)-(line 45,col 135)",
            "(line 46,col 9)-(line 46,col 30)",
            "(line 49,col 9)-(line 49,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.WarningsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/WarningsFinderTest.java",
        "signature": "org.mockito.internal.debugging.WarningsFinderTest.shouldPrintStubWasUsedWithDifferentArgs()",
        "snippet": "    @Test\n    public void shouldPrintStubWasUsedWithDifferentArgs() {\n        // given\n        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n\n        // when\n        WarningsFinder finder = new WarningsFinder(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n        finder.find(listener);\n\n        // then\n        verify(listener, only()).foundStubCalledWithDifferentArgs(stub, wrongArg);\n    }",
        "begin_line": 52,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 87)",
            "(line 56,col 9)-(line 56,col 105)",
            "(line 59,col 9)-(line 59,col 130)",
            "(line 60,col 9)-(line 60,col 30)",
            "(line 63,col 9)-(line 63,col 82)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.init_Listener()",
        "snippet": "    @Before\n    public void init_Listener() throws Exception {\n        output = new ByteArrayOutputStream();\n        listener = new VerboseMockInvocationLogger(new PrintStream(output));\n    }",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 45)",
            "(line 32,col 9)-(line 32,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() throws Exception {\n        System.out.println(output);\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.should_print_to_system_out()",
        "snippet": "    @Test\n    public void should_print_to_system_out() {\n        assertThat(new VerboseMockInvocationLogger().printStream).isSameAs(System.out);\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.should_print_invocation_with_return_value()",
        "snippet": "    @Test\n    public void should_print_invocation_with_return_value() {\n        // when\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, \"return value\"));\n\n        // then\n        assertThat(printed())\n                .contains(invocation.toString())\n                .contains(invocation.getLocation().toString())\n                .contains(\"return value\");\n    }",
        "begin_line": 45,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 98)",
            "(line 51,col 9)-(line 54,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.should_print_invocation_with_exception()",
        "snippet": "    @Test\n    public void should_print_invocation_with_exception() {\n        // when\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, new ThirdPartyException()));\n\n        // then\n        assertThat(printed())\n                .contains(invocation.toString())\n                .contains(invocation.getLocation().toString())\n                .contains(ThirdPartyException.class.getName());\n    }",
        "begin_line": 57,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 109)",
            "(line 63,col 9)-(line 66,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.should_print_if_method_has_not_been_stubbed()",
        "snippet": "    @Test\n    public void should_print_if_method_has_not_been_stubbed() throws Exception {\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, \"whatever\"));\n\n        assertThat(printed()).doesNotContain(\"stubbed\");\n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 94)",
            "(line 73,col 9)-(line 73,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.should_print_stubbed_info_if_availbable()",
        "snippet": "    @Test\n    public void should_print_stubbed_info_if_availbable() throws Exception {\n        invocation.markStubbed(new StubInfoImpl(stubbedInvocation));\n\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, \"whatever\"));\n\n        assertThat(printed())\n                .contains(\"stubbed\")\n                .contains(stubbedInvocation.getLocation().toString());\n    }",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 68)",
            "(line 80,col 9)-(line 80,col 94)",
            "(line 82,col 9)-(line 84,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.should_log_count_of_interactions()",
        "snippet": "    @Test\n    public void should_log_count_of_interactions() {\n        // when & then\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, new ThirdPartyException()));\n        assertThat(printed()).contains(\"#1\");\n\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, new ThirdPartyException()));\n        assertThat(printed()).contains(\"#2\");\n\n        listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, new ThirdPartyException()));\n        assertThat(printed()).contains(\"#3\");\n    }",
        "begin_line": 87,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 109)",
            "(line 91,col 9)-(line 91,col 45)",
            "(line 93,col 9)-(line 93,col 109)",
            "(line 94,col 9)-(line 94,col 45)",
            "(line 96,col 9)-(line 96,col 109)",
            "(line 97,col 9)-(line 97,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java",
        "signature": "org.mockito.internal.debugging.VerboseMockInvocationLoggerTest.printed()",
        "snippet": "    private String printed() {\n        return output.toString();\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.OnlyTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/OnlyTest.java",
        "signature": "org.mockito.internal.verification.OnlyTest.VerificationDataStub.VerificationDataStub(org.mockito.internal.invocation.InvocationMatcher, org.mockito.invocation.Invocation)",
        "snippet": "        public VerificationDataStub(InvocationMatcher wanted, Invocation invocation) {\n            this.invocation = invocation;\n            this.wanted = wanted;\n        }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 28,col 41)",
            "(line 29,col 13)-(line 29,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.OnlyTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/OnlyTest.java",
        "signature": "org.mockito.internal.verification.OnlyTest.VerificationDataStub.getAllInvocations()",
        "snippet": "        public List<Invocation> getAllInvocations() {\n            return Arrays.asList(invocation);\n        }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 13)-(line 33,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.OnlyTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/OnlyTest.java",
        "signature": "org.mockito.internal.verification.OnlyTest.VerificationDataStub.getWanted()",
        "snippet": "        public InvocationMatcher getWanted() {\n            return wanted;\n        }",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 13)-(line 37,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.OnlyTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/OnlyTest.java",
        "signature": "org.mockito.internal.verification.OnlyTest.shouldMarkAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkAsVerified() {\n        //given\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        assertFalse(invocation.isVerified());\n        \n        //when\n        only.verify(new VerificationDataStub(new InvocationMatcher(invocation), invocation));\n        \n        //then\n        assertTrue(invocation.isVerified());\n    }",
        "begin_line": 41,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 71)",
            "(line 45,col 9)-(line 45,col 45)",
            "(line 48,col 9)-(line 48,col 93)",
            "(line 51,col 9)-(line 51,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.OnlyTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/OnlyTest.java",
        "signature": "org.mockito.internal.verification.OnlyTest.shouldNotMarkAsVerifiedWhenAssertionFailed()",
        "snippet": "    @Test\n    public void shouldNotMarkAsVerifiedWhenAssertionFailed() {\n        //given\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        assertFalse(invocation.isVerified());\n        \n        //when\n        try {\n            only.verify(new VerificationDataStub(new InvocationBuilder().toInvocationMatcher(), invocation));\n            fail();\n        } catch (MockitoAssertionError e) {}\n        \n        //then\n        assertFalse(invocation.isVerified());\n    }",
        "begin_line": 54,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 71)",
            "(line 58,col 9)-(line 58,col 45)",
            "(line 61,col 9)-(line 64,col 44)",
            "(line 67,col 9)-(line 67,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java",
        "signature": "org.mockito.internal.verification.DefaultRegisteredInvocationsTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        invocations = new DefaultRegisteredInvocations();\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.DefaultRegisteredInvocationsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java",
        "signature": "org.mockito.internal.verification.DefaultRegisteredInvocationsTest.should_not_return_to_string_method()",
        "snippet": "    @Test\n    public void should_not_return_to_string_method() throws Exception {\n        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n        Invocation simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n        \n        invocations.add(toString);\n        invocations.add(simpleMethod);\n        \n        assertTrue(invocations.getAll().contains(simpleMethod));\n        assertFalse(invocations.getAll().contains(toString));\n    }",
        "begin_line": 23,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 88)",
            "(line 26,col 9)-(line 26,col 88)",
            "(line 28,col 9)-(line 28,col 34)",
            "(line 29,col 9)-(line 29,col 38)",
            "(line 31,col 9)-(line 31,col 64)",
            "(line 32,col 9)-(line 32,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.DummyVerificationMode",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/DummyVerificationMode.java",
        "signature": "org.mockito.internal.verification.DummyVerificationMode.verify(org.mockito.internal.verification.api.VerificationData)",
        "snippet": "    public void verify(VerificationData data) {\n    }",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.verification.VerificationDataImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/VerificationDataImplTest.java",
        "signature": "org.mockito.internal.verification.VerificationDataImplTest.shouldToStringBeNotVerifiable()",
        "snippet": "    @Test\n    public void shouldToStringBeNotVerifiable() throws Exception {\n        InvocationMatcher toString = new InvocationBuilder().method(\"toString\").toInvocationMatcher();\n        try {\n            new VerificationDataImpl(null, toString);\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 15,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 102)",
            "(line 18,col 9)-(line 21,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.NoMoreInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java",
        "signature": "org.mockito.internal.verification.NoMoreInteractionsTest.shouldVerifyInOrder()",
        "snippet": "    @Test\n    public void shouldVerifyInOrder() {\n        //given\n        NoMoreInteractions n = new NoMoreInteractions();\n        Invocation i = new InvocationBuilder().toInvocation();\n        assertFalse(context.isVerified(i));\n\n        try {\n            //when\n            n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i), null));\n            //then\n            fail();\n        } catch(VerificationInOrderFailure e) {}\n    }",
        "begin_line": 28,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 56)",
            "(line 32,col 9)-(line 32,col 62)",
            "(line 33,col 9)-(line 33,col 43)",
            "(line 35,col 9)-(line 40,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.NoMoreInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java",
        "signature": "org.mockito.internal.verification.NoMoreInteractionsTest.shouldVerifyInOrderAndPass()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderAndPass() {\n        //given\n        NoMoreInteractions n = new NoMoreInteractions();\n        Invocation i = new InvocationBuilder().toInvocation();\n        context.markVerified(i);\n        assertTrue(context.isVerified(i));\n\n        //when\n        n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i), null));\n        //then no exception is thrown\n    }",
        "begin_line": 43,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 56)",
            "(line 47,col 9)-(line 47,col 62)",
            "(line 48,col 9)-(line 48,col 32)",
            "(line 49,col 9)-(line 49,col 42)",
            "(line 52,col 9)-(line 52,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.NoMoreInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java",
        "signature": "org.mockito.internal.verification.NoMoreInteractionsTest.shouldVerifyInOrderMultipleInvoctions()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMultipleInvoctions() {\n        //given\n        NoMoreInteractions n = new NoMoreInteractions();\n        Invocation i = new InvocationBuilder().seq(1).toInvocation();\n        Invocation i2 = new InvocationBuilder().seq(2).toInvocation();\n\n        //when\n        context.markVerified(i2);\n\n        //then no exception is thrown\n        n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i, i2), null));\n    }",
        "begin_line": 56,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 56)",
            "(line 60,col 9)-(line 60,col 69)",
            "(line 61,col 9)-(line 61,col 70)",
            "(line 64,col 9)-(line 64,col 33)",
            "(line 67,col 9)-(line 67,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.NoMoreInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java",
        "signature": "org.mockito.internal.verification.NoMoreInteractionsTest.shouldVerifyInOrderMultipleInvoctionsAndThrow()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderMultipleInvoctionsAndThrow() {\n        //given\n        NoMoreInteractions n = new NoMoreInteractions();\n        Invocation i = new InvocationBuilder().seq(1).toInvocation();\n        Invocation i2 = new InvocationBuilder().seq(2).toInvocation();\n\n        try {\n            //when\n            n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i, i2), null));\n            fail();\n        } catch (VerificationInOrderFailure e) {}\n    }",
        "begin_line": 70,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 56)",
            "(line 74,col 9)-(line 74,col 69)",
            "(line 75,col 9)-(line 75,col 70)",
            "(line 77,col 9)-(line 81,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.NoMoreInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java",
        "signature": "org.mockito.internal.verification.NoMoreInteractionsTest.noMoreInteractionsExceptionMessageShouldDescribeMock()",
        "snippet": "    @Test\n    public void noMoreInteractionsExceptionMessageShouldDescribeMock() {\n        //given\n        NoMoreInteractions n = new NoMoreInteractions();\n        IMethods mock = mock(IMethods.class, \"a mock\");\n        InvocationMatcher i = new InvocationBuilder().mock(mock).toInvocationMatcher();\n\n        InvocationContainerImpl invocations =\n            new InvocationContainerImpl(new ThreadSafeMockingProgress(), new MockSettingsImpl());\n        invocations.setInvocationForPotentialStubbing(i);\n\n        try {\n            //when\n            n.verify(new VerificationDataImpl(invocations, null));\n            //then\n            fail();\n        } catch (NoInteractionsWanted e) {\n            Assertions.assertThat(e.toString()).contains(mock.toString());\n        }\n    }",
        "begin_line": 84,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 56)",
            "(line 88,col 9)-(line 88,col 55)",
            "(line 89,col 9)-(line 89,col 87)",
            "(line 91,col 9)-(line 92,col 97)",
            "(line 93,col 9)-(line 93,col 57)",
            "(line 95,col 9)-(line 102,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.NoMoreInteractionsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java",
        "signature": "org.mockito.internal.verification.NoMoreInteractionsTest.noMoreInteractionsInOrderExceptionMessageShouldDescribeMock()",
        "snippet": "    @Test\n    public void noMoreInteractionsInOrderExceptionMessageShouldDescribeMock() {\n        //given\n        NoMoreInteractions n = new NoMoreInteractions();\n        IMethods mock = mock(IMethods.class, \"a mock\");\n        Invocation i = new InvocationBuilder().mock(mock).toInvocation();\n\n        try {\n            //when\n            n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i), null));\n            //then\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            Assertions.assertThat(e.toString()).contains(mock.toString());\n        }\n    }",
        "begin_line": 105,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 56)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 110,col 9)-(line 110,col 73)",
            "(line 112,col 9)-(line 119,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        mock.varargs(\"first very long argument\", \"second very long argument\", \"another very long argument\");\n        multi = new InvocationMatcher(getLastInvocation());\n\n        mock.varargs(\"short arg\");\n        shortie = new InvocationMatcher(getLastInvocation());\n    }",
        "begin_line": 21,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 108)",
            "(line 24,col 9)-(line 24,col 59)",
            "(line 26,col 9)-(line 26,col 34)",
            "(line 27,col 9)-(line 27,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenFirstIsMulti()",
        "snippet": "    @Test\n    public void shouldPrintBothInMultilinesWhenFirstIsMulti() {\n        //when\n        SmartPrinter printer = new SmartPrinter(multi, shortie.getInvocation());\n        \n        //then\n        assertContains(\"\\n\", printer.getWanted().toString());\n        assertContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 80)",
            "(line 36,col 9)-(line 36,col 61)",
            "(line 37,col 9)-(line 37,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenSecondIsMulti()",
        "snippet": "    @Test\n    public void shouldPrintBothInMultilinesWhenSecondIsMulti() {\n        //when\n        SmartPrinter printer = new SmartPrinter(shortie, multi.getInvocation());\n        \n        //then\n        assertContains(\"\\n\", printer.getWanted().toString());\n        assertContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 80)",
            "(line 46,col 9)-(line 46,col 61)",
            "(line 47,col 9)-(line 47,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenBothAreMulti()",
        "snippet": "    @Test\n    public void shouldPrintBothInMultilinesWhenBothAreMulti() {\n        //when\n        SmartPrinter printer = new SmartPrinter(multi, multi.getInvocation());\n        \n        //then\n        assertContains(\"\\n\", printer.getWanted().toString());\n        assertContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 78)",
            "(line 56,col 9)-(line 56,col 61)",
            "(line 57,col 9)-(line 57,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.SmartPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/SmartPrinterTest.java",
        "signature": "org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInSingleLineWhenBothAreShort()",
        "snippet": "    @Test\n    public void shouldPrintBothInSingleLineWhenBothAreShort() {\n        //when\n        SmartPrinter printer = new SmartPrinter(shortie, shortie.getInvocation());\n        \n        //then\n        assertNotContains(\"\\n\", printer.getWanted().toString());\n        assertNotContains(\"\\n\", printer.getActual().toString());\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 82)",
            "(line 66,col 9)-(line 66,col 64)",
            "(line 67,col 9)-(line 67,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.VerificationOverTimeImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/VerificationOverTimeImplTest.java",
        "signature": "org.mockito.internal.verification.VerificationOverTimeImplTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        initMocks(this);\n        impl = new VerificationOverTimeImpl(10, 1000, delegate, true);\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 24)",
            "(line 28,col 9)-(line 28,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.VerificationOverTimeImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/VerificationOverTimeImplTest.java",
        "signature": "org.mockito.internal.verification.VerificationOverTimeImplTest.should_return_on_success()",
        "snippet": "    @Test\n    public void should_return_on_success() {\n        impl.verify(null);\n        verify(delegate).verify(null);\n    }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 26)",
            "(line 34,col 9)-(line 34,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.VerificationOverTimeImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/VerificationOverTimeImplTest.java",
        "signature": "org.mockito.internal.verification.VerificationOverTimeImplTest.should_throw_mockito_assertion_error()",
        "snippet": "    @Test\n    public void should_throw_mockito_assertion_error() {}",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.verification.VerificationOverTimeImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/VerificationOverTimeImplTest.java",
        "signature": "org.mockito.internal.verification.VerificationOverTimeImplTest.should_deal_with_junit_assertion_error()",
        "snippet": "    @Test\n    public void should_deal_with_junit_assertion_error() {}",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.verification.VerificationOverTimeImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/VerificationOverTimeImplTest.java",
        "signature": "org.mockito.internal.verification.VerificationOverTimeImplTest.should_not_wrap_other_exceptions()",
        "snippet": "    @Test\n    public void should_not_wrap_other_exceptions() {}",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch()",
        "snippet": "    @Test\n    public void shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch() {\n        //given\n        List<Matcher> matchers = (List) Arrays.asList(new Equals(1));\n\n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10, 20});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 22,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 69)",
            "(line 28,col 9)-(line 28,col 107)",
            "(line 31,col 9)-(line 31,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch()",
        "snippet": "    @Test\n    public void shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch() {\n        //given\n        List<Matcher> matchers = (List) Arrays.asList(new Equals(10), new Equals(20));\n        \n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10, 20});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 34,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 86)",
            "(line 40,col 9)-(line 40,col 107)",
            "(line 43,col 9)-(line 43,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldFindSuspiciousMatchers()",
        "snippet": "    @Test\n    public void shouldFindSuspiciousMatchers() {\n        //given\n        Equals matcherInt20 = new Equals(20);\n        Long longPretendingAnInt = new Long(20);\n        \n        //when\n        List<Matcher> matchers = (List) Arrays.asList(new Equals(10), matcherInt20);\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10, longPretendingAnInt});\n        \n        //then\n        assertEquals(1, suspicious.length);\n        assertEquals(new Integer(1), suspicious[0]);\n    }",
        "begin_line": 46,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 45)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 53,col 9)-(line 53,col 84)",
            "(line 54,col 9)-(line 54,col 124)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 58,col 9)-(line 58,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindSuspiciousMatchersWhenTypesAreTheSame()",
        "snippet": "    @Test\n    public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {\n        //given\n        Equals matcherWithBadDescription = new Equals(20) {\n            public void describeTo(Description desc) {\n                //let's pretend we have the same description as the toString() of the argument\n                desc.appendText(\"10\");\n            }\n        };\n        Integer argument = 10;\n        \n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes((List) Arrays.asList(matcherWithBadDescription), new Object[] {argument});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 61,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 69,col 10)",
            "(line 70,col 9)-(line 70,col 30)",
            "(line 73,col 9)-(line 73,col 148)",
            "(line 76,col 9)-(line 76,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.Anonymous-06232096-993a-43b4-8357-0e9fb74ec83a.describeTo(org.hamcrest.Description)",
        "snippet": "            public void describeTo(Description desc) {\n                //let's pretend we have the same description as the toString() of the argument\n                desc.appendText(\"10\");\n            }",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 17)-(line 67,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldWorkFineWhenGivenArgIsNull()",
        "snippet": "    @Test\n    public void shouldWorkFineWhenGivenArgIsNull() {\n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes((List) Arrays.asList(new Equals(20)), new Object[] {null});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 79,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 133)",
            "(line 85,col 9)-(line 85,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldUseMatchersSafely()",
        "snippet": "    @Test\n    public void shouldUseMatchersSafely() {\n        //given\n        List<Matcher> matchers = (List) Arrays.asList(new BaseMatcher() {\n            public boolean matches(Object item) {\n                throw new ClassCastException(\"nasty matcher\");\n            }\n\n            public void describeTo(Description description) {\n            }});\n        \n        //when\n        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes(matchers, new Object[] {10});\n        \n        //then\n        assertEquals(0, suspicious.length);\n    }",
        "begin_line": 88,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 97,col 16)",
            "(line 100,col 9)-(line 100,col 103)",
            "(line 103,col 9)-(line 103,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.Anonymous-e4c4fc8d-7389-4726-8fbe-c6fe09d7f4ce.matches(java.lang.Object)",
        "snippet": "            public boolean matches(Object item) {\n                throw new ClassCastException(\"nasty matcher\");\n            }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 17)-(line 93,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
        "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.Anonymous-5e0f8a54-6286-4672-a068-0859fb859c3a.describeTo(org.hamcrest.Description)",
        "snippet": "            public void describeTo(Description description) {\n            }});",
        "begin_line": 96,
        "end_line": 97,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsCheckerTest.shouldMarkActualInvocationsAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkActualInvocationsAsVerified() {\n        //given\n        AtLeastXNumberOfInvocationsChecker c = new AtLeastXNumberOfInvocationsChecker();\n        c.invocationMarker = Mockito.mock(InvocationMarker.class);\n        Invocation invocation = new InvocationBuilder().simpleMethod().toInvocation();\n        Invocation invocationTwo = new InvocationBuilder().differentMethod().toInvocation();\n\n        //when\n        c.check(asList(invocation, invocationTwo), new InvocationMatcher(invocation), 1);\n\n        //then\n        Mockito.verify(c.invocationMarker).markVerified(eq(asList(invocation)), any(CapturesArgumensFromInvocation.class));\n    }",
        "begin_line": 19,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 88)",
            "(line 23,col 9)-(line 23,col 66)",
            "(line 24,col 9)-(line 24,col 86)",
            "(line 25,col 9)-(line 25,col 92)",
            "(line 28,col 9)-(line 28,col 89)",
            "(line 31,col 9)-(line 31,col 123)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporterStub = new ReporterStub();\n        finderStub = new InvocationsFinderStub();\n        checker = new MissingInvocationInOrderChecker(finderStub, reporterStub);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n    }                                                                    ",
        "begin_line": 35,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 42)",
            "(line 38,col 9)-(line 38,col 49)",
            "(line 39,col 9)-(line 39,col 80)",
            "(line 41,col 9)-(line 41,col 63)",
            "(line 42,col 9)-(line 42,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldPassWhenMatchingInteractionFound()",
        "snippet": "    @Test\n    public void shouldPassWhenMatchingInteractionFound() throws Exception {\n        Invocation actual = new InvocationBuilder().toInvocation();\n        finderStub.allMatchingUnverifiedChunksToReturn.add(actual);\n        \n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder(), context);\n    }",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 67)",
            "(line 48,col 9)-(line 48,col 67)",
            "(line 50,col 9)-(line 50,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportWantedButNotInvoked()",
        "snippet": "    @Test\n    public void shouldReportWantedButNotInvoked() throws Exception {\n        assertTrue(finderStub.allMatchingUnverifiedChunksToReturn.isEmpty());\n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder(), context);\n        \n        assertEquals(wanted, reporterStub.wanted);\n    }",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 77)",
            "(line 56,col 9)-(line 56,col 93)",
            "(line 58,col 9)-(line 58,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportArgumentsAreDifferent()",
        "snippet": "    @Test\n    public void shouldReportArgumentsAreDifferent() throws Exception {\n        assertTrue(finderStub.findInvocations(invocations, wanted).isEmpty());\n        finderStub.similarToReturn = new InvocationBuilder().toInvocation();\n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder(), context);\n        SmartPrinter printer = new SmartPrinter(wanted, finderStub.similarToReturn, 0);\n        assertEquals(printer.getWanted(), reporterStub.wantedString);\n        assertEquals(printer.getActual(), reporterStub.actual);\n        assertEquals(finderStub.similarToReturn.getLocation(), reporterStub.actualLocation);\n     }",
        "begin_line": 61,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 78)",
            "(line 64,col 9)-(line 64,col 76)",
            "(line 65,col 9)-(line 65,col 93)",
            "(line 66,col 9)-(line 66,col 87)",
            "(line 67,col 9)-(line 67,col 69)",
            "(line 68,col 9)-(line 68,col 63)",
            "(line 69,col 9)-(line 69,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportWantedDiffersFromActual()",
        "snippet": "    @Test\n    public void shouldReportWantedDiffersFromActual() throws Exception {\n        Invocation previous = new InvocationBuilder().toInvocation();\n        finderStub.previousInOrderToReturn = previous;\n        \n        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder(), context);\n        \n        assertEquals(wanted, reporterStub.wanted);\n        assertEquals(previous, reporterStub.previous);\n    }",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 69)",
            "(line 75,col 9)-(line 75,col 54)",
            "(line 77,col 9)-(line 77,col 93)",
            "(line 79,col 9)-(line 79,col 50)",
            "(line 80,col 9)-(line 80,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.ReporterStub.wantedButNotInvokedInOrder(org.mockito.invocation.DescribedInvocation, org.mockito.invocation.DescribedInvocation)",
        "snippet": "        @Override public void wantedButNotInvokedInOrder(DescribedInvocation wanted, DescribedInvocation previous) {\n            this.wanted = wanted;\n            this.previous = previous;\n        }",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 91,col 13)-(line 91,col 33)",
            "(line 92,col 13)-(line 92,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.ReporterStub.wantedButNotInvoked(org.mockito.invocation.DescribedInvocation)",
        "snippet": "        @Override public void wantedButNotInvoked(DescribedInvocation wanted) {\n            this.wanted = wanted;\n        }",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 13)-(line 96,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.ReporterStub.argumentsAreDifferent(java.lang.String, java.lang.String, org.mockito.invocation.Location)",
        "snippet": "        @Override public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n            this.wantedString = wanted;\n            this.actual = actual;\n            this.actualLocation = actualLocation;\n        }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 13)-(line 100,col 39)",
            "(line 101,col 13)-(line 101,col 33)",
            "(line 102,col 13)-(line 102,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findAllMatchingUnverifiedChunks(java.util.List<org.mockito.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, org.mockito.internal.verification.api.InOrderContext)",
        "snippet": "    @Override\n    public List<Invocation> findAllMatchingUnverifiedChunks(List<Invocation> invocations, InvocationMatcher wanted, InOrderContext context) {\n        return allMatchingUnverifiedChunksToReturn;\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findMatchingChunk(java.util.List<org.mockito.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher, int, org.mockito.internal.verification.api.InOrderContext)",
        "snippet": "    @Override\n    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        return validMatchingChunkToReturn;\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findInvocations(java.util.List<org.mockito.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    @Override public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted) {\n        this.invocations = invocations;\n        return actualToReturn;\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 39)",
            "(line 40,col 9)-(line 40,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findSimilarInvocation(java.util.List<org.mockito.invocation.Invocation>, org.mockito.internal.invocation.InvocationMatcher)",
        "snippet": "    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n        this.invocations = invocations;\n        return similarToReturn;\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 39)",
            "(line 45,col 9)-(line 45,col 31)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findFirstUnverified(java.util.List<org.mockito.invocation.Invocation>)",
        "snippet": "    @Override public Invocation findFirstUnverified(List<Invocation> invocations) {\n        this.invocations = invocations;\n        return firstUnverifiedToReturn;\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 39)",
            "(line 50,col 9)-(line 50,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.InvocationsFinderStub",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java",
        "signature": "org.mockito.internal.verification.checkers.InvocationsFinderStub.findPreviousVerifiedInOrder(java.util.List<org.mockito.invocation.Invocation>, org.mockito.internal.verification.api.InOrderContext)",
        "snippet": "    @Override\n    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations, InOrderContext context) {\n        return previousInOrderToReturn;\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporterStub = new ReporterStub();\n        finderStub = new InvocationsFinderStub();\n        checker = new MissingInvocationChecker(finderStub, reporterStub);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = asList(new InvocationBuilder().toInvocation());\n    }",
        "begin_line": 32,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 42)",
            "(line 35,col 9)-(line 35,col 49)",
            "(line 36,col 9)-(line 36,col 73)",
            "(line 38,col 9)-(line 38,col 63)",
            "(line 39,col 9)-(line 39,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldAskFinderForActualInvocations()",
        "snippet": "    @Test\n    public void shouldAskFinderForActualInvocations() {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        checker.check(invocations, wanted);\n        \n        assertSame(invocations, finderStub.invocations);\n    }",
        "begin_line": 42,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 78)",
            "(line 45,col 9)-(line 45,col 43)",
            "(line 47,col 9)-(line 47,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldPassBecauseActualInvocationFound()",
        "snippet": "    @Test\n    public void shouldPassBecauseActualInvocationFound() {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        checker.check(invocations, wanted);\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 78)",
            "(line 53,col 9)-(line 53,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldAskAnalyzerForSimilarInvocation()",
        "snippet": "    @Test\n    public void shouldAskAnalyzerForSimilarInvocation() {\n        checker.check(invocations, wanted);\n        \n        assertSame(invocations, finderStub.invocations);\n    }",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 43)",
            "(line 60,col 9)-(line 60,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldReportWantedButNotInvoked()",
        "snippet": "    @Test\n    public void shouldReportWantedButNotInvoked() {\n        //given          \n        assertTrue(finderStub.actualToReturn.isEmpty());\n        finderStub.similarToReturn = null;\n        \n        //when\n        checker.check(invocations, wanted);\n        \n        //then\n        assertEquals(wanted, reporterStub.wanted);\n        assertNull(reporterStub.actualLocation);\n    }",
        "begin_line": 63,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 56)",
            "(line 67,col 9)-(line 67,col 42)",
            "(line 70,col 9)-(line 70,col 43)",
            "(line 73,col 9)-(line 73,col 50)",
            "(line 74,col 9)-(line 74,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldReportWantedInvocationDiffersFromActual()",
        "snippet": "    @Test\n    public void shouldReportWantedInvocationDiffersFromActual() {\n        assertTrue(finderStub.actualToReturn.isEmpty());\n        Invocation actualInvocation = new InvocationBuilder().toInvocation();\n        finderStub.similarToReturn = actualInvocation;\n        \n        checker.check(invocations, wanted);\n        \n        assertNotNull(reporterStub.wanted);\n        assertNotNull(reporterStub.actual);\n        \n        assertSame(actualInvocation.getLocation(), reporterStub.actualLocation);\n    }",
        "begin_line": 77,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 56)",
            "(line 80,col 9)-(line 80,col 77)",
            "(line 81,col 9)-(line 81,col 54)",
            "(line 83,col 9)-(line 83,col 43)",
            "(line 85,col 9)-(line 85,col 43)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 88,col 9)-(line 88,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.ReporterStub.wantedButNotInvoked(org.mockito.invocation.DescribedInvocation, java.util.List<? extends org.mockito.invocation.DescribedInvocation>)",
        "snippet": "        @Override\n        public void wantedButNotInvoked(DescribedInvocation wanted, List<? extends DescribedInvocation> invocations) {\n            this.wanted = wanted;\n        }",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 13)-(line 98,col 33)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.ReporterStub.argumentsAreDifferent(java.lang.String, java.lang.String, org.mockito.invocation.Location)",
        "snippet": "        @Override public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n                    this.wanted = wanted;\n                    this.actual = actual;\n                    this.actualLocation = actualLocation;\n        }",
        "begin_line": 101,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 102,col 21)-(line 102,col 41)",
            "(line 103,col 21)-(line 103,col 41)",
            "(line 104,col 21)-(line 104,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporterStub = new ReporterStub();\n        finderStub = new InvocationsFinderStub();\n        checker = new NumberOfInvocationsChecker(reporterStub, finderStub);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n    }",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 42)",
            "(line 33,col 9)-(line 33,col 49)",
            "(line 34,col 9)-(line 34,col 75)",
            "(line 36,col 9)-(line 36,col 63)",
            "(line 37,col 9)-(line 37,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportTooLittleActual()",
        "snippet": "    @Test\n    public void shouldReportTooLittleActual() throws Exception {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        \n        checker.check(invocations, wanted, 100);\n        \n        assertEquals(1, reporterStub.actualCount);\n        assertEquals(100, reporterStub.wantedCount);\n        assertEquals(wanted, reporterStub.wanted);\n    }",
        "begin_line": 40,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 78)",
            "(line 44,col 9)-(line 44,col 48)",
            "(line 46,col 9)-(line 46,col 50)",
            "(line 47,col 9)-(line 47,col 52)",
            "(line 48,col 9)-(line 48,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportWithLastInvocationStackTrace()",
        "snippet": "    @Test\n    public void shouldReportWithLastInvocationStackTrace() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        \n        finderStub.actualToReturn.addAll(asList(first, second));\n        \n        checker.check(invocations, wanted, 100);\n        \n        assertSame(second.getLocation(), reporterStub.location);\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 66)",
            "(line 54,col 9)-(line 54,col 67)",
            "(line 56,col 9)-(line 56,col 64)",
            "(line 58,col 9)-(line 58,col 48)",
            "(line 60,col 9)-(line 60,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound()",
        "snippet": "    @Test\n    public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound() throws Exception {\n        assertTrue(finderStub.actualToReturn.isEmpty());\n        \n        checker.check(invocations, wanted, 100);\n        \n        assertNull(reporterStub.location);\n    }",
        "begin_line": 63,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 56)",
            "(line 67,col 9)-(line 67,col 48)",
            "(line 69,col 9)-(line 69,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportWithFirstUndesiredInvocationStackTrace()",
        "snippet": "    @Test\n    public void shouldReportWithFirstUndesiredInvocationStackTrace() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        Invocation third = new InvocationBuilder().toInvocation();\n        \n        finderStub.actualToReturn.addAll(asList(first, second, third));\n        \n        checker.check(invocations, wanted, 2);\n        \n        assertSame(third.getLocation(), reporterStub.location);\n    }",
        "begin_line": 72,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 66)",
            "(line 75,col 9)-(line 75,col 67)",
            "(line 76,col 9)-(line 76,col 66)",
            "(line 78,col 9)-(line 78,col 71)",
            "(line 80,col 9)-(line 80,col 46)",
            "(line 82,col 9)-(line 82,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportTooManyActual()",
        "snippet": "    @Test\n    public void shouldReportTooManyActual() throws Exception {\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n        \n        checker.check(invocations, wanted, 1);\n        \n        assertEquals(2, reporterStub.actualCount);\n        assertEquals(1, reporterStub.wantedCount);\n        assertEquals(wanted, reporterStub.wanted);\n    }",
        "begin_line": 85,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 78)",
            "(line 88,col 9)-(line 88,col 78)",
            "(line 90,col 9)-(line 90,col 46)",
            "(line 92,col 9)-(line 92,col 50)",
            "(line 93,col 9)-(line 93,col 50)",
            "(line 94,col 9)-(line 94,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportNeverWantedButInvoked()",
        "snippet": "    @Test\n    public void shouldReportNeverWantedButInvoked() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        finderStub.actualToReturn.add(invocation);\n        \n        checker.check(invocations, wanted, 0);\n        \n        assertEquals(wanted, reporterStub.wanted);\n        assertEquals(invocation.getLocation(), reporterStub.location);\n    }",
        "begin_line": 97,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 71)",
            "(line 100,col 9)-(line 100,col 50)",
            "(line 102,col 9)-(line 102,col 46)",
            "(line 104,col 9)-(line 104,col 50)",
            "(line 105,col 9)-(line 105,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldMarkInvocationsAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkInvocationsAsVerified() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        finderStub.actualToReturn.add(invocation);\n        assertFalse(invocation.isVerified());\n        \n        checker.check(invocations, wanted, 1);\n        \n        assertTrue(invocation.isVerified());\n    }",
        "begin_line": 108,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 71)",
            "(line 111,col 9)-(line 111,col 50)",
            "(line 112,col 9)-(line 112,col 45)",
            "(line 114,col 9)-(line 114,col 46)",
            "(line 116,col 9)-(line 116,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.ReporterStub.tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy, org.mockito.invocation.DescribedInvocation, org.mockito.invocation.Location)",
        "snippet": "        @Override public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n                    this.wantedCount = discrepancy.getWantedCount();\n                    this.actualCount = discrepancy.getActualCount();\n                    this.wanted = wanted;\n                    this.location = lastActualLocation;\n        }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 21)-(line 125,col 68)",
            "(line 126,col 21)-(line 126,col 68)",
            "(line 127,col 21)-(line 127,col 41)",
            "(line 128,col 21)-(line 128,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.ReporterStub.tooManyActualInvocations(int, int, org.mockito.invocation.DescribedInvocation, org.mockito.invocation.Location)",
        "snippet": "        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n                    this.wantedCount = wantedCount;\n                    this.actualCount = actualCount;\n                    this.wanted = wanted;\n                    this.location = firstUndesired;\n        }",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 132,col 21)-(line 132,col 51)",
            "(line 133,col 21)-(line 133,col 51)",
            "(line 134,col 21)-(line 134,col 41)",
            "(line 135,col 21)-(line 135,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.ReporterStub.neverWantedButInvoked(org.mockito.invocation.DescribedInvocation, org.mockito.invocation.Location)",
        "snippet": "        @Override\n        public void neverWantedButInvoked(DescribedInvocation wanted, Location firstUndesired) {\n            this.wanted = wanted;\n            this.location = firstUndesired;\n        }",
        "begin_line": 138,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 13)-(line 140,col 33)",
            "(line 141,col 13)-(line 141,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        reporter = new Reporter();\n        finderStub = new InvocationsFinderStub();\n        checker = new NumberOfInvocationsInOrderChecker(finderStub, reporter);\n        \n        wanted = new InvocationBuilder().toInvocationMatcher();\n        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n    }",
        "begin_line": 33,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 49)",
            "(line 37,col 9)-(line 37,col 78)",
            "(line 39,col 9)-(line 39,col 63)",
            "(line 40,col 9)-(line 40,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty()",
        "snippet": "    @Test\n    public void shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty() throws Exception {        \n        assertTrue(finderStub.validMatchingChunkToReturn.isEmpty());\n        checker.check(invocations, wanted, 0, context);\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 68)",
            "(line 46,col 9)-(line 46,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldPassIfChunkMatches()",
        "snippet": "    @Test\n    public void shouldPassIfChunkMatches() throws Exception {\n        finderStub.validMatchingChunkToReturn.add(wanted.getInvocation());\n        \n        checker.check(invocations, wanted, 1, context);\n    }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 74)",
            "(line 53,col 9)-(line 53,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldReportTooLittleInvocations()",
        "snippet": "    @Test\n    public void shouldReportTooLittleInvocations() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n        \n        try {\n            checker.check(invocations, wanted, 4, context);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"Wanted 4 times\", e.getMessage());\n            assertContains(\"But was 2 times\", e.getMessage());\n        }\n    }",
        "begin_line": 56,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 66)",
            "(line 59,col 9)-(line 59,col 67)",
            "(line 60,col 9)-(line 60,col 76)",
            "(line 62,col 9)-(line 68,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldReportTooManyInvocations()",
        "snippet": "    @Test\n    public void shouldReportTooManyInvocations() throws Exception {\n        Invocation first = new InvocationBuilder().toInvocation();\n        Invocation second = new InvocationBuilder().toInvocation();\n        finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n        \n        try {\n            checker.check(invocations, wanted, 1, context);\n            fail();\n        } catch (VerificationInOrderFailure e) {\n            assertContains(\"Wanted 1 time\", e.getMessage());\n            assertContains(\"But was 2 times\", e.getMessage());\n        }\n    }",
        "begin_line": 71,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 66)",
            "(line 74,col 9)-(line 74,col 67)",
            "(line 75,col 9)-(line 75,col 76)",
            "(line 77,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java",
        "signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldMarkAsVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldMarkAsVerifiedInOrder() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        assertFalse(context.isVerified(invocation));\n        finderStub.validMatchingChunkToReturn.addAll(asList(invocation)); \n        \n        checker.check(invocations, wanted, 1, context);\n        \n        assertTrue(context.isVerified(invocation));\n    }",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 71)",
            "(line 89,col 9)-(line 89,col 52)",
            "(line 90,col 9)-(line 90,col 73)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 94,col 9)-(line 94,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java",
        "signature": "org.mockito.internal.exceptions.util.ScenarioPrinterTest.shouldPrintInvocations()",
        "snippet": "    @Test\n    public void shouldPrintInvocations() {\n        //given\n        Invocation verified = new InvocationBuilder().simpleMethod().verified().toInvocation();\n        Invocation unverified = new InvocationBuilder().differentMethod().toInvocation();\n        \n        //when\n        String out = sp.print((List) asList(verified, unverified));\n        \n        //then\n        assertContains(\"1. -> at\", out);\n        assertContains(\"2. [?]-> at\", out);\n    }",
        "begin_line": 21,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 95)",
            "(line 25,col 9)-(line 25,col 89)",
            "(line 28,col 9)-(line 28,col 67)",
            "(line 31,col 9)-(line 31,col 40)",
            "(line 32,col 9)-(line 32,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.util.ScenarioPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java",
        "signature": "org.mockito.internal.exceptions.util.ScenarioPrinterTest.shouldNotPrintInvocationsWhenSingleUnwanted()",
        "snippet": "    @Test\n    public void shouldNotPrintInvocationsWhenSingleUnwanted() {\n        //given\n        Invocation unverified = new InvocationBuilder().differentMethod().toInvocation();\n        \n        //when\n        String out = sp.print((List) asList(unverified));\n        \n        //then\n        assertContains(\"Actually, above is the only interaction with this mock.\", out);\n    }",
        "begin_line": 35,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 89)",
            "(line 41,col 9)-(line 41,col 57)",
            "(line 44,col 9)-(line 44,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest.shouldNotFilterWhenConfigurationSaysNo()",
        "snippet": "    @Test\n    public void shouldNotFilterWhenConfigurationSaysNo() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n        \n        Throwable t = new TraceBuilder().classes(\n                \"org.test.MockitoSampleTest\",\n                \"org.mockito.Mockito\" \n        ).toThrowable();\n        \n        filter.filter(t);\n        \n        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.mockito.Mockito\", \"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 18,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 72)",
            "(line 22,col 9)-(line 25,col 24)",
            "(line 27,col 9)-(line 27,col 25)",
            "(line 29,col 9)-(line 29,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilterTest.shouldFilterWhenConfigurationSaysYes()",
        "snippet": "    @Test\n    public void shouldFilterWhenConfigurationSaysYes() {\n        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n        \n        Throwable t = new TraceBuilder().classes(\n                \"org.test.MockitoSampleTest\",\n                \"org.mockito.Mockito\" \n        ).toThrowable();\n        \n        filter.filter(t);\n        \n        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 71)",
            "(line 36,col 9)-(line 39,col 24)",
            "(line 41,col 9)-(line 41,col 25)",
            "(line 43,col 9)-(line 43,col 85)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldFilterOutCglibGarbage()",
        "snippet": "    @Test\n    public void shouldFilterOutCglibGarbage() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n            \"MockitoExampleTest\",\n            \"List$$EnhancerByMockitoWithCGLIB$$2c406024\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"MockitoExampleTest\"));\n    }",
        "begin_line": 18,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 23,col 25)",
            "(line 25,col 9)-(line 25,col 63)",
            "(line 27,col 9)-(line 27,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldFilterOutMockitoPackage()",
        "snippet": "    @Test\n    public void shouldFilterOutMockitoPackage() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n            \"org.test.MockitoSampleTest\",\n            \"org.mockito.Mockito\"\n        ).toTraceArray();\n            \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 30,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 35,col 25)",
            "(line 37,col 9)-(line 37,col 63)",
            "(line 39,col 9)-(line 39,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldFilterOutTracesMiddleBadTraces()",
        "snippet": "    @Test\n    public void shouldFilterOutTracesMiddleBadTraces() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.test.MockitoSampleTest\",\n                \"org.test.TestSupport\",\n                \"org.mockito.Mockito\", \n                \"org.test.TestSupport\",\n                \"org.mockito.Mockito\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.TestSupport\", \"org.test.MockitoSampleTest\"));\n    }",
        "begin_line": 42,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 50,col 25)",
            "(line 52,col 9)-(line 52,col 63)",
            "(line 54,col 9)-(line 54,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldKeepRunners()",
        "snippet": "    @Test\n    public void shouldKeepRunners() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.mockito.runners.Runner\",\n                \"junit.stuff\",\n                \"org.test.MockitoSampleTest\",\n                \"org.mockito.Mockito\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"junit.stuff\", \"org.mockito.runners.Runner\"));\n    }",
        "begin_line": 57,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 64,col 25)",
            "(line 66,col 9)-(line 66,col 63)",
            "(line 68,col 9)-(line 68,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldKeepInternalRunners()",
        "snippet": "    @Test\n    public void shouldKeepInternalRunners() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.mockito.internal.runners.Runner\",\n                \"org.test.MockitoSampleTest\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, false);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"org.mockito.internal.runners.Runner\"));\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 76,col 25)",
            "(line 78,col 9)-(line 78,col 63)",
            "(line 80,col 9)-(line 80,col 119)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldStartFilteringAndKeepTop()",
        "snippet": "    @Test\n    public void shouldStartFilteringAndKeepTop() {\n        //given\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.test.Good\",\n                \"org.mockito.internal.Bad\",\n                \"org.test.MockitoSampleTest\"\n        ).toTraceArray();\n        \n        //when\n        StackTraceElement[] filtered = filter.filter(t, true);\n        \n        //then\n        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"org.test.Good\"));\n    }",
        "begin_line": 83,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 90,col 25)",
            "(line 93,col 9)-(line 93,col 62)",
            "(line 96,col 9)-(line 96,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions()",
        "snippet": "    @Test\n    public void shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions() {\n        StackTraceElement[] t = new TraceBuilder().classes(\n                \"org.good.Trace\",\n                \"org.yet.another.good.Trace\",\n                \"org.mockito.internal.to.be.Filtered\",\n                \"org.test.MockitoSampleTest\"\n        ).toTraceArray();\n        \n        StackTraceElement[] filtered = filter.filter(t, true);\n        \n        assertThat(filtered, hasOnlyThoseClasses(\n                \"org.test.MockitoSampleTest\",\n                \"org.yet.another.good.Trace\",\n                \"org.good.Trace\"\n                ));\n    }",
        "begin_line": 99,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 106,col 25)",
            "(line 108,col 9)-(line 108,col 62)",
            "(line 110,col 9)-(line 114,col 19)"
        ]
    },
    {
        "class_name": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java",
        "signature": "org.mockito.internal.exceptions.stacktrace.StackTraceFilterTest.shouldReturnEmptyArrayWhenInputIsEmpty()",
        "snippet": "    @Test\n    public void shouldReturnEmptyArrayWhenInputIsEmpty() throws Exception {\n        //when\n        StackTraceElement[] filtered = filter.filter(new StackTraceElement[0], false);\n        //then\n        assertEquals(0, filtered.length);\n    }",
        "begin_line": 117,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 86)",
            "(line 122,col 9)-(line 122,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.shouldInjectIntoTestCase()",
        "snippet": "    @Test\n    public void shouldInjectIntoTestCase() throws Throwable {\n        jUnitRule.apply(new DummyStatement(), injectTestCase).evaluate();\n        assertNotNull(\"@Mock mock object created\", injectTestCase.getInjected());\n        assertNotNull(\"@InjectMocks object created\", injectTestCase.getInjectInto());\n        assertNotNull(\"Mock injected into the object\", injectTestCase.getInjectInto().getInjected());\n    }",
        "begin_line": 19,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 73)",
            "(line 22,col 9)-(line 22,col 81)",
            "(line 23,col 9)-(line 23,col 85)",
            "(line 24,col 9)-(line 24,col 101)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.shouldRethrowException()",
        "snippet": "    @Test\n    public void shouldRethrowException() throws Throwable {\n        try {\n            jUnitRule.apply(new ExceptionStatement(), injectTestCase).evaluate();\n            fail(\"Should throw exception\");\n        } catch (RuntimeException e) {\n            assertEquals(\"Correct message\", \"Statement exception\", e.getMessage());\n        }\n    }",
        "begin_line": 27,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 34,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.shouldDetectUnfinishedStubbing()",
        "snippet": "    @Test\n    public void shouldDetectUnfinishedStubbing() throws Throwable {\n        try {\n            jUnitRule.apply(new UnfinishedStubbingStatement(), injectTestCase).evaluate();\n            fail(\"Should detect invalid Mockito usage\");\n        } catch (UnfinishedStubbingException e) {\n        }\n    }",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.DummyStatement.evaluate()",
        "snippet": "        @Override\n        public void evaluate() throws Throwable {\n        }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.ExceptionStatement.evaluate()",
        "snippet": "        @Override\n        public void evaluate() throws Throwable {\n            throw new RuntimeException(\"Statement exception\");\n        }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.UnfinishedStubbingStatement.evaluate()",
        "snippet": "        @Override\n        public void evaluate() throws Throwable {\n            InjectTestCase injectTestCase = new InjectTestCase();\n            MockitoAnnotations.initMocks(injectTestCase);\n            injectTestCase.unfinishedStubbingThrowsException();\n        }",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 13)-(line 62,col 65)",
            "(line 63,col 13)-(line 63,col 57)",
            "(line 64,col 13)-(line 64,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.InjectTestCase.dummy()",
        "snippet": "        @Test\n        public void dummy() throws Exception {\n        }",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.InjectTestCase.unfinishedStubbingThrowsException()",
        "snippet": "        public void unfinishedStubbingThrowsException() throws Exception {\n            Mockito.when(injected.stringMethod());\n        }",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 13)-(line 81,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.InjectTestCase.getInjected()",
        "snippet": "        public Injected getInjected() {\n            return injected;\n        }",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 13)-(line 85,col 28)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.InjectTestCase.getInjectInto()",
        "snippet": "        public InjectInto getInjectInto() {\n            return injectInto;\n        }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 13)-(line 89,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.InjectTestCase.Injected.stringMethod()",
        "snippet": "            public String stringMethod() {\n                return \"string\";\n            }",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 17)-(line 94,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.junit.JUnitRuleTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/junit/JUnitRuleTest.java",
        "signature": "org.mockito.internal.junit.JUnitRuleTest.InjectTestCase.InjectInto.getInjected()",
        "snippet": "            public Injected getInjected() {\n                return injected;\n            }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 17)-(line 102,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.shouldKnowToStringMethod()",
        "snippet": "    @Test\n    public void shouldKnowToStringMethod() throws Exception {\n        assertFalse(guru.isToString(Object.class.getMethod(\"equals\", Object.class)));\n        assertFalse(guru.isToString(IMethods.class.getMethod(\"toString\", String.class)));\n        assertTrue(guru.isToString(IMethods.class.getMethod(\"toString\")));\n    }",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 19,col 85)",
            "(line 20,col 9)-(line 20,col 89)",
            "(line 21,col 9)-(line 21,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.shouldKnowEqualsMethod()",
        "snippet": "    @Test\n    public void shouldKnowEqualsMethod() throws Exception {\n        assertFalse(guru.isEqualsMethod(IMethods.class.getMethod(\"equals\", String.class)));\n        assertFalse(guru.isEqualsMethod(IMethods.class.getMethod(\"equals\")));\n        assertFalse(guru.isEqualsMethod(Object.class.getMethod(\"toString\")));\n        assertTrue(guru.isEqualsMethod(Object.class.getMethod(\"equals\", Object.class)));\n    }",
        "begin_line": 24,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 91)",
            "(line 27,col 9)-(line 27,col 77)",
            "(line 28,col 9)-(line 28,col 77)",
            "(line 29,col 9)-(line 29,col 88)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.shouldKnowHashCodeMethod()",
        "snippet": "    @Test\n    public void shouldKnowHashCodeMethod() throws Exception {\n        assertFalse(guru.isHashCodeMethod(IMethods.class.getMethod(\"toString\")));\n        assertFalse(guru.isHashCodeMethod(IMethods.class.getMethod(\"hashCode\", String.class)));\n        assertTrue(guru.isHashCodeMethod(Object.class.getDeclaredMethod(\"hashCode\")));\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 81)",
            "(line 35,col 9)-(line 35,col 95)",
            "(line 36,col 9)-(line 36,col 86)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.HasCompareToButDoesNotImplementComparable.compareTo(org.mockito.internal.util.ObjectMethodsGuruTest.HasCompareToButDoesNotImplementComparable)",
        "snippet": "        public int compareTo(HasCompareToButDoesNotImplementComparable other);",
        "begin_line": 40,
        "end_line": 40,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare.foo(org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare)",
        "snippet": "        public int foo(HasCompare other);",
        "begin_line": 44,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare.compareTo(org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare, java.lang.String)",
        "snippet": "        public int compareTo(HasCompare other, String redHerring);",
        "begin_line": 45,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare.compareTo(java.lang.String)",
        "snippet": "        public int compareTo(String redHerring);",
        "begin_line": 46,
        "end_line": 46,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare.compareTo(org.mockito.internal.util.ObjectMethodsGuruTest.HasCompare)",
        "snippet": "        public int compareTo(HasCompare redHerring);",
        "begin_line": 47,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.ObjectMethodsGuruTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectMethodsGuruTest.java",
        "signature": "org.mockito.internal.util.ObjectMethodsGuruTest.shouldKnowCompareToMethod()",
        "snippet": "    @Test\n    public void shouldKnowCompareToMethod() throws Exception {\n        assertFalse(guru.isCompareToMethod(Date.class.getMethod(\"toString\")));\n        assertFalse(guru.isCompareToMethod(HasCompare.class.getMethod(\"foo\", HasCompare.class)));\n        assertFalse(guru.isCompareToMethod(HasCompare.class.getMethod(\"compareTo\", HasCompare.class, String.class)));\n        assertFalse(guru.isCompareToMethod(HasCompare.class.getMethod(\"compareTo\", String.class)));\n        assertFalse(guru.isCompareToMethod(HasCompareToButDoesNotImplementComparable.class.getDeclaredMethod(\"compareTo\", HasCompareToButDoesNotImplementComparable.class)));\n\n        assertTrue(guru.isCompareToMethod(HasCompare.class.getMethod(\"compareTo\", HasCompare.class)));\n    }",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 78)",
            "(line 53,col 9)-(line 53,col 97)",
            "(line 54,col 9)-(line 54,col 117)",
            "(line 55,col 9)-(line 55,col 99)",
            "(line 56,col 9)-(line 56,col 173)",
            "(line 58,col 9)-(line 58,col 102)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockNameImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockNameImplTest.java",
        "signature": "org.mockito.internal.util.MockNameImplTest.shouldProvideTheNameForClass()",
        "snippet": "    @Test\n    public void shouldProvideTheNameForClass() throws Exception {\n        //when\n        String name = new MockNameImpl(null, SomeClass.class).toString();\n        //then\n        assertEquals(\"someClass\", name);\n    }",
        "begin_line": 12,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 73)",
            "(line 17,col 9)-(line 17,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockNameImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockNameImplTest.java",
        "signature": "org.mockito.internal.util.MockNameImplTest.shouldProvideTheNameForAnonymousClass()",
        "snippet": "    @Test\n    public void shouldProvideTheNameForAnonymousClass() throws Exception {\n        //given\n        SomeInterface anonymousInstance = new SomeInterface() {};\n        //when\n        String name = new MockNameImpl(null, anonymousInstance.getClass()).toString();\n        //then\n        assertEquals(\"someInterface\", name);\n    }",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 65)",
            "(line 25,col 9)-(line 25,col 86)",
            "(line 27,col 9)-(line 27,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockNameImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockNameImplTest.java",
        "signature": "org.mockito.internal.util.MockNameImplTest.shouldProvideTheGivenName()",
        "snippet": "    @Test\n    public void shouldProvideTheGivenName() throws Exception {\n        //when\n        String name = new MockNameImpl(\"The Hulk\", SomeClass.class).toString();\n        //then\n        assertEquals(\"The Hulk\", name);\n    }",
        "begin_line": 30,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 79)",
            "(line 35,col 9)-(line 35,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ObjectBox",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectBox.java",
        "signature": "org.mockito.internal.util.ObjectBox.put(java.lang.Object)",
        "snippet": "    public void put(Object object) {\n        this.object = object;\n    }",
        "begin_line": 12,
        "end_line": 14,
        "comment": "",
        "child_ranges": [
            "(line 13,col 9)-(line 13,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.ObjectBox",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/ObjectBox.java",
        "signature": "org.mockito.internal.util.ObjectBox.getObject()",
        "snippet": "    public Object getObject() {\n        return object;\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 22)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_get_handler()",
        "snippet": "    @Test\n    public void should_get_handler() {\n        List mock = Mockito.mock(List.class);\n        assertNotNull(mockUtil.getMockHandler(mock));\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 45)",
            "(line 26,col 9)-(line 26,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_scream_when_not_a_mock_passed()",
        "snippet": "    @Test (expected=NotAMockException.class)\n    public void should_scream_when_not_a_mock_passed() {\n        mockUtil.getMockHandler(\"\");\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_scream_when_null_passed()",
        "snippet": "    @Test (expected=MockitoException.class)\n    public void should_scream_when_null_passed() {\n        mockUtil.getMockHandler(null);\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_get_mock_settings()",
        "snippet": "    @Test\n    public void should_get_mock_settings() {\n        List mock = Mockito.mock(List.class);\n        assertNotNull(mockUtil.getMockSettings(mock));\n    }",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 45)",
            "(line 42,col 9)-(line 42,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_validate_mock()",
        "snippet": "    @Test\n    public void should_validate_mock() {\n        assertFalse(mockUtil.isMock(\"i mock a mock\"));\n        assertTrue(mockUtil.isMock(Mockito.mock(List.class)));\n    }",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 54)",
            "(line 48,col 9)-(line 48,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_validate_spy()",
        "snippet": "    @Test\n    public void should_validate_spy() {\n        assertFalse(mockUtil.isSpy(\"i mock a mock\"));\n        assertFalse(mockUtil.isSpy(Mockito.mock(List.class)));\n        assertFalse(mockUtil.isSpy((Class) null));\n\n        assertTrue(mockUtil.isSpy(Mockito.spy(new ArrayList())));\n        assertTrue(mockUtil.isSpy(Mockito.spy(ArrayList.class)));\n        assertTrue(mockUtil.isSpy(Mockito.mock(ArrayList.class, withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS))));\n    }",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 54,col 62)",
            "(line 55,col 9)-(line 55,col 50)",
            "(line 57,col 9)-(line 57,col 65)",
            "(line 58,col 9)-(line 58,col 65)",
            "(line 59,col 9)-(line 59,col 124)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_redefine_MockName_if_default()",
        "snippet": "    @Test\n    public void should_redefine_MockName_if_default() {\n        List mock = Mockito.mock(List.class);\n        mockUtil.maybeRedefineMockName(mock, \"newName\");\n\n        Assertions.assertThat(mockUtil.getMockName(mock).toString()).isEqualTo(\"newName\");\n    }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 45)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 67,col 9)-(line 67,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_not_redefine_MockName_if_default()",
        "snippet": "    @Test\n    public void should_not_redefine_MockName_if_default() {\n        List mock = Mockito.mock(List.class, \"original\");\n        mockUtil.maybeRedefineMockName(mock, \"newName\");\n\n        Assertions.assertThat(mockUtil.getMockName(mock).toString()).isEqualTo(\"original\");\n    }",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 57)",
            "(line 73,col 9)-(line 73,col 56)",
            "(line 75,col 9)-(line 75,col 91)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockUtilTest.java",
        "signature": "org.mockito.internal.util.MockUtilTest.should_konw_if_type_is_mockable()",
        "snippet": "    @Test\n    public void should_konw_if_type_is_mockable() throws Exception {\n        assertFalse(mockUtil.isTypeMockable(FinalClass.class));\n        assertFalse(mockUtil.isTypeMockable(int.class));\n\n        assertTrue(mockUtil.isTypeMockable(SomeClass.class));\n        assertTrue(mockUtil.isTypeMockable(SomeInterface.class));\n    }",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 63)",
            "(line 85,col 9)-(line 85,col 56)",
            "(line 87,col 9)-(line 87,col 61)",
            "(line 88,col 9)-(line 88,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.SimpleMockitoLoggerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/SimpleMockitoLoggerTest.java",
        "signature": "org.mockito.internal.util.SimpleMockitoLoggerTest.shouldLog()",
        "snippet": "    @Test\n    public void shouldLog() throws Exception {\n        //given\n        SimpleMockitoLogger logger = new SimpleMockitoLogger();\n        //when\n        logger.log(\"foo\");\n        //then\n        assertEquals(\"foo\", logger.getLoggedInfo());\n    }",
        "begin_line": 12,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 63)",
            "(line 17,col 9)-(line 17,col 26)",
            "(line 19,col 9)-(line 19,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.DecamelizerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/DecamelizerTest.java",
        "signature": "org.mockito.internal.util.DecamelizerTest.shouldProduceDecentDescription()",
        "snippet": "    @Test\n    public void shouldProduceDecentDescription() throws Exception {\n        assertEquals(\"<Sentence with strong language>\", decamelizeMatcher(\"SentenceWithStrongLanguage\"));\n        assertEquals(\"<W e i r d o 1>\", decamelizeMatcher(\"WEIRDO1\"));\n        assertEquals(\"<_>\", decamelizeMatcher(\"_\"));\n        assertEquals(\"<Has exactly 3 elements>\", decamelizeMatcher(\"HasExactly3Elements\"));\n        assertEquals(\"<custom argument matcher>\", decamelizeMatcher(\"\"));\n    }",
        "begin_line": 15,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 105)",
            "(line 18,col 9)-(line 18,col 70)",
            "(line 19,col 9)-(line 19,col 52)",
            "(line 20,col 9)-(line 20,col 91)",
            "(line 21,col 9)-(line 21,col 73)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.TimerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/TimerTest.java",
        "signature": "org.mockito.internal.util.TimerTest.should_return_true_if_task_is_in_acceptable_time_bounds()",
        "snippet": "    @Test\n    public void should_return_true_if_task_is_in_acceptable_time_bounds() {}",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.TimerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/TimerTest.java",
        "signature": "org.mockito.internal.util.TimerTest.should_return_false_when_time_run_out()",
        "snippet": "    @Test\n    public void should_return_false_when_time_run_out() {}",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.TimerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/TimerTest.java",
        "signature": "org.mockito.internal.util.TimerTest.should_throw_friendly_reminder_exception_when_duration_is_negative()",
        "snippet": "    @Test\n    public void should_throw_friendly_reminder_exception_when_duration_is_negative() {\n        try {\n            new Timer(-1);\n            Assert.fail(\"It is forbidden to create timer with negative value of timer's duration.\");\n        } catch (FriendlyReminderException e) {\n            Assert.assertTrue(true);\n        }\n    }",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 51,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.TimerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/TimerTest.java",
        "signature": "org.mockito.internal.util.TimerTest.oneMillisecondPasses()",
        "snippet": "    private void oneMillisecondPasses() throws InterruptedException {\n        Thread.sleep(1);\n    }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 24)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockCreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockCreationValidatorTest.java",
        "signature": "org.mockito.internal.util.MockCreationValidatorTest.should_not_allow_extra_interface_that_is_the_same_as_the_mocked_type()",
        "snippet": "    @Test\n    public void should_not_allow_extra_interface_that_is_the_same_as_the_mocked_type() throws Exception {\n        try {\n            //when\n            validator.validateExtraInterfaces(IMethods.class, (Collection) asList(IMethods.class));\n            fail();\n        } catch (MockitoException e) {\n            //then\n            assertThat(e.getMessage()).contains(\"You mocked following type: IMethods\");\n        }\n    }",
        "begin_line": 26,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 35,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockCreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockCreationValidatorTest.java",
        "signature": "org.mockito.internal.util.MockCreationValidatorTest.should_not_allow_inconsistent_types()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_not_allow_inconsistent_types() throws Exception {\n        //when\n        validator.validateMockedType(List.class, new ArrayList());\n        //then\n    }",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockCreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockCreationValidatorTest.java",
        "signature": "org.mockito.internal.util.MockCreationValidatorTest.should_allow_only_consistent_types()",
        "snippet": "    @Test\n    public void should_allow_only_consistent_types() throws Exception {\n        //when\n        validator.validateMockedType(ArrayList.class, new ArrayList());\n        //then no exception is thrown\n    }",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockCreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockCreationValidatorTest.java",
        "signature": "org.mockito.internal.util.MockCreationValidatorTest.should_validation_be_safe_when_nulls_passed()",
        "snippet": "    @Test\n    public void should_validation_be_safe_when_nulls_passed() throws Exception {\n        //when\n        validator.validateMockedType(null, new ArrayList());\n        //or\n        validator.validateMockedType(ArrayList.class, null);\n        //then no exception is thrown\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 60)",
            "(line 57,col 9)-(line 57,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockCreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockCreationValidatorTest.java",
        "signature": "org.mockito.internal.util.MockCreationValidatorTest.should_not_allow_serializable_with_Object_that_dont_implement_Serializable()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_not_allow_serializable_with_Object_that_dont_implement_Serializable() {\n        class NonSerializableInnerClassThatHaveAHiddenOneArgConstructor {}\n        boolean serializable = true;\n        validator.validateSerializable(NonSerializableInnerClassThatHaveAHiddenOneArgConstructor.class, serializable);\n    }",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 74)",
            "(line 64,col 9)-(line 64,col 36)",
            "(line 65,col 9)-(line 65,col 118)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.MockCreationValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/MockCreationValidatorTest.java",
        "signature": "org.mockito.internal.util.MockCreationValidatorTest.should_allow_serializable_with_interfaces_or_Serializable_objects()",
        "snippet": "    @Test\n    public void should_allow_serializable_with_interfaces_or_Serializable_objects() {\n        boolean serializable = true;\n        validator.validateSerializable(Observer.class, serializable);\n        validator.validateSerializable(Integer.class, serializable);\n    }",
        "begin_line": 68,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 36)",
            "(line 71,col 9)-(line 71,col 69)",
            "(line 72,col 9)-(line 72,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_add_mock_that_have_failing_hashCode_method()",
        "snippet": "    @Test\n    public void can_add_mock_that_have_failing_hashCode_method() throws Exception {\n        new HashCodeAndEqualsSafeSet().add(mock(UnmockableHashCodeAndEquals.class));\n    }",
        "begin_line": 18,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.mock_with_failing_hashCode_method_can_be_added()",
        "snippet": "    @Test\n    public void mock_with_failing_hashCode_method_can_be_added() throws Exception {\n        new HashCodeAndEqualsSafeSet().add(mock(UnmockableHashCodeAndEquals.class));\n    }",
        "begin_line": 23,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.mock_with_failing_equals_method_can_be_used()",
        "snippet": "    @Test\n    public void mock_with_failing_equals_method_can_be_used() throws Exception {\n        HashCodeAndEqualsSafeSet mocks = new HashCodeAndEqualsSafeSet();\n        UnmockableHashCodeAndEquals mock = mock(UnmockableHashCodeAndEquals.class);\n        mocks.add(mock);\n\n        assertThat(mocks.contains(mock)).isTrue();\n        assertThat(mocks.contains(mock(UnmockableHashCodeAndEquals.class))).isFalse();\n    }",
        "begin_line": 28,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 72)",
            "(line 31,col 9)-(line 31,col 83)",
            "(line 32,col 9)-(line 32,col 24)",
            "(line 34,col 9)-(line 34,col 50)",
            "(line 35,col 9)-(line 35,col 86)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_remove()",
        "snippet": "    @Test\n    public void can_remove() throws Exception {\n        HashCodeAndEqualsSafeSet mocks = new HashCodeAndEqualsSafeSet();\n        UnmockableHashCodeAndEquals mock = mock(UnmockableHashCodeAndEquals.class);\n        mocks.add(mock);\n        mocks.remove(mock);\n\n        assertThat(mocks.isEmpty()).isTrue();\n    }",
        "begin_line": 38,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 72)",
            "(line 41,col 9)-(line 41,col 83)",
            "(line 42,col 9)-(line 42,col 24)",
            "(line 43,col 9)-(line 43,col 27)",
            "(line 45,col 9)-(line 45,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_add_a_collection()",
        "snippet": "    @Test\n    public void can_add_a_collection() throws Exception {\n        HashCodeAndEqualsSafeSet mocks = HashCodeAndEqualsSafeSet.of(\n                mock(UnmockableHashCodeAndEquals.class),\n                mock(Observer.class));\n\n        HashCodeAndEqualsSafeSet workingSet = new HashCodeAndEqualsSafeSet();\n\n        workingSet.addAll(mocks);\n\n        assertThat(workingSet.containsAll(mocks)).isTrue();\n    }",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 53,col 38)",
            "(line 55,col 9)-(line 55,col 77)",
            "(line 57,col 9)-(line 57,col 33)",
            "(line 59,col 9)-(line 59,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_retain_a_collection()",
        "snippet": "    @Test\n    public void can_retain_a_collection() throws Exception {\n        HashCodeAndEqualsSafeSet mocks = HashCodeAndEqualsSafeSet.of(\n                mock(UnmockableHashCodeAndEquals.class),\n                mock(Observer.class));\n\n        HashCodeAndEqualsSafeSet workingSet = new HashCodeAndEqualsSafeSet();\n\n        workingSet.addAll(mocks);\n        workingSet.add(mock(List.class));\n\n        assertThat(workingSet.retainAll(mocks)).isTrue();\n        assertThat(workingSet.containsAll(mocks)).isTrue();\n    }",
        "begin_line": 62,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 66,col 38)",
            "(line 68,col 9)-(line 68,col 77)",
            "(line 70,col 9)-(line 70,col 33)",
            "(line 71,col 9)-(line 71,col 41)",
            "(line 73,col 9)-(line 73,col 57)",
            "(line 74,col 9)-(line 74,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_remove_a_collection()",
        "snippet": "    @Test\n    public void can_remove_a_collection() throws Exception {\n        HashCodeAndEqualsSafeSet mocks = HashCodeAndEqualsSafeSet.of(\n                mock(UnmockableHashCodeAndEquals.class),\n                mock(Observer.class));\n\n        HashCodeAndEqualsSafeSet workingSet = new HashCodeAndEqualsSafeSet();\n\n        workingSet.addAll(mocks);\n        workingSet.add(mock(List.class));\n\n        assertThat(workingSet.removeAll(mocks)).isTrue();\n        assertThat(workingSet.containsAll(mocks)).isFalse();\n    }",
        "begin_line": 77,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 81,col 38)",
            "(line 83,col 9)-(line 83,col 77)",
            "(line 85,col 9)-(line 85,col 33)",
            "(line 86,col 9)-(line 86,col 41)",
            "(line 88,col 9)-(line 88,col 57)",
            "(line 89,col 9)-(line 89,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_iterate()",
        "snippet": "    @Test\n    public void can_iterate() throws Exception {\n        HashCodeAndEqualsSafeSet mocks = HashCodeAndEqualsSafeSet.of(\n                mock(UnmockableHashCodeAndEquals.class),\n                mock(Observer.class));\n\n        LinkedList<Object> accumulator = new LinkedList<Object>();\n        for (Object mock : mocks) {\n            accumulator.add(mock);\n        }\n        assertThat(accumulator).isNotEmpty();\n    }",
        "begin_line": 92,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 96,col 38)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 101,col 9)",
            "(line 102,col 9)-(line 102,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.toArray_just_work()",
        "snippet": "    @Test\n    public void toArray_just_work() throws Exception {\n        UnmockableHashCodeAndEquals mock1 = mock(UnmockableHashCodeAndEquals.class);\n        HashCodeAndEqualsSafeSet mocks = HashCodeAndEqualsSafeSet.of(mock1);\n\n        assertThat(mocks.toArray()[0]).isSameAs(mock1);\n\n        assertThat(mocks.toArray(new UnmockableHashCodeAndEquals[0])[0]).isSameAs(mock1);\n    }",
        "begin_line": 105,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 84)",
            "(line 108,col 9)-(line 108,col 76)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 112,col 9)-(line 112,col 89)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.UnmockableHashCodeAndEquals.hashCode()",
        "snippet": "        @Override public final int hashCode() {\n            throw new NullPointerException(\"I'm failing on hashCode and I don't care\");\n        }",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 13)-(line 117,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java",
        "signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.UnmockableHashCodeAndEquals.equals(java.lang.Object)",
        "snippet": "        @Override public final boolean equals(Object obj) {\n            throw new NullPointerException(\"I'm failing on equals and I don't care\");\n        }",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 13)-(line 121,col 85)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.ListUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/ListUtilTest.java",
        "signature": "org.mockito.internal.util.collections.ListUtilTest.shouldFilterList()",
        "snippet": "    @Test\n    public void shouldFilterList() throws Exception {\n        List list = asList(\"one\", \"x\", \"two\", \"x\", \"three\");\n        List filtered = ListUtil.filter(list, new Filter() {\n            public boolean isOut(Object object) {\n                return object == \"x\";\n            }\n        });\n        \n        assertThat(filtered, hasExactlyInOrder(\"one\", \"two\", \"three\"));\n    }",
        "begin_line": 21,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 60)",
            "(line 24,col 9)-(line 28,col 11)",
            "(line 30,col 9)-(line 30,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.ListUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/ListUtilTest.java",
        "signature": "org.mockito.internal.util.collections.ListUtilTest.Anonymous-fd1cbb55-3e2d-4cec-a0ff-697ee7ec160e.isOut(java.lang.Object)",
        "snippet": "            public boolean isOut(Object object) {\n                return object == \"x\";\n            }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 17)-(line 26,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.ListUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/ListUtilTest.java",
        "signature": "org.mockito.internal.util.collections.ListUtilTest.shouldReturnEmptyIfEmptyListGiven()",
        "snippet": "    @Test\n    public void shouldReturnEmptyIfEmptyListGiven() throws Exception {\n        List list = new LinkedList();\n        List filtered = ListUtil.filter(list, null);\n        assertTrue(filtered.isEmpty());\n    }",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 37)",
            "(line 36,col 9)-(line 36,col 52)",
            "(line 37,col 9)-(line 37,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.IdentitySetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/IdentitySetTest.java",
        "signature": "org.mockito.internal.util.collections.IdentitySetTest.shouldWork()",
        "snippet": "    @Test\n    public void shouldWork() throws Exception {\n        //when\n        Object o = new Object();\n        set.add(o);\n\n        //then\n        assertTrue(set.contains(o));\n        assertFalse(set.contains(new Object()));\n    }",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 32)",
            "(line 22,col 9)-(line 22,col 19)",
            "(line 25,col 9)-(line 25,col 36)",
            "(line 26,col 9)-(line 26,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.IdentitySetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/IdentitySetTest.java",
        "signature": "org.mockito.internal.util.collections.IdentitySetTest.Fake.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object obj) {\n            return true;\n        }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 13)-(line 32,col 24)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.collections.IdentitySetTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/collections/IdentitySetTest.java",
        "signature": "org.mockito.internal.util.collections.IdentitySetTest.shouldWorkEvenIfEqualsTheSame()",
        "snippet": "    @Test\n    public void shouldWorkEvenIfEqualsTheSame() throws Exception {\n        //given\n        assertEquals(new Fake(), new Fake());\n        Fake fake = new Fake();\n        \n        //when\n        set.add(fake);\n\n        //then\n        assertTrue(set.contains(fake));\n        assertFalse(set.contains(new Fake()));\n    }",
        "begin_line": 36,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 45)",
            "(line 40,col 9)-(line 40,col 31)",
            "(line 43,col 9)-(line 43,col 22)",
            "(line 46,col 9)-(line 46,col 39)",
            "(line 47,col 9)-(line 47,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.junit.JUnitFailureHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java",
        "signature": "org.mockito.internal.util.junit.JUnitFailureHackerTest.shouldReplaceException()",
        "snippet": "    @Test\n    public void shouldReplaceException() throws Exception {\n        //given\n        RuntimeException actualExc = new RuntimeException(\"foo\");\n        Failure failure = new Failure(Description.EMPTY, actualExc);\n        \n        //when\n        hacker.appendWarnings(failure, \"unused stubbing\");\n                \n        //then\n        assertEquals(ExceptionIncludingMockitoWarnings.class, failure.getException().getClass());\n        assertEquals(actualExc, failure.getException().getCause());\n        Assertions.assertThat(actualExc.getStackTrace()).isEqualTo(failure.getException().getStackTrace());\n    }",
        "begin_line": 18,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 65)",
            "(line 22,col 9)-(line 22,col 68)",
            "(line 25,col 9)-(line 25,col 58)",
            "(line 28,col 9)-(line 28,col 97)",
            "(line 29,col 9)-(line 29,col 67)",
            "(line 30,col 9)-(line 30,col 107)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.junit.JUnitFailureHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java",
        "signature": "org.mockito.internal.util.junit.JUnitFailureHackerTest.shouldAppendWarning()",
        "snippet": "    @Test\n    public void shouldAppendWarning() throws Exception {\n        Failure failure = new Failure(Description.EMPTY, new RuntimeException(\"foo\"));\n        \n        //when\n        hacker.appendWarnings(failure, \"unused stubbing blah\");\n        \n        //then\n        assertContains(\"unused stubbing blah\", failure.getException().getMessage());        \n    }   ",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 86)",
            "(line 38,col 9)-(line 38,col 63)",
            "(line 41,col 9)-(line 41,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.junit.JUnitFailureHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java",
        "signature": "org.mockito.internal.util.junit.JUnitFailureHackerTest.shouldNotAppendWhenNoWarnings()",
        "snippet": "    @Test\n    public void shouldNotAppendWhenNoWarnings() throws Exception {\n        RuntimeException ex = new RuntimeException(\"foo\");\n        Failure failure = new Failure(Description.EMPTY, ex);\n        \n        //when\n        hacker.appendWarnings(failure, \"\");\n        \n        //then\n        assertEquals(ex, failure.getException());        \n    }",
        "begin_line": 44,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 58)",
            "(line 47,col 9)-(line 47,col 61)",
            "(line 50,col 9)-(line 50,col 43)",
            "(line 53,col 9)-(line 53,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.junit.JUnitFailureHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java",
        "signature": "org.mockito.internal.util.junit.JUnitFailureHackerTest.shouldNotAppendWhenNullWarnings()",
        "snippet": "    @Test\n    public void shouldNotAppendWhenNullWarnings() throws Exception {\n        RuntimeException ex = new RuntimeException(\"foo\");\n        Failure failure = new Failure(Description.EMPTY, ex);\n        \n        //when\n        hacker.appendWarnings(failure, null);\n        \n        //then\n        assertEquals(ex, failure.getException());        \n    }",
        "begin_line": 56,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 58)",
            "(line 59,col 9)-(line 59,col 61)",
            "(line 62,col 9)-(line 62,col 45)",
            "(line 65,col 9)-(line 65,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.junit.JUnitFailureHackerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java",
        "signature": "org.mockito.internal.util.junit.JUnitFailureHackerTest.shouldPrintTheWarningSoICanSeeIt()",
        "snippet": "    @Test\n    public void shouldPrintTheWarningSoICanSeeIt() throws Exception {\n        Failure failure = new Failure(Description.EMPTY, new RuntimeException(\"foo\"));\n        \n        //when\n        hacker.appendWarnings(failure, \"unused stubbing blah\");\n        \n        //then\n        System.out.println(failure.getException());        \n    }",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 86)",
            "(line 73,col 9)-(line 73,col 63)",
            "(line 76,col 9)-(line 76,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.io.IOUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/io/IOUtilTest.java",
        "signature": "org.mockito.internal.util.io.IOUtilTest.closes_streams()",
        "snippet": "    @Test\n    public void closes_streams() throws Exception {\n        IOUtil.closeQuietly(null);\n        IOUtil.closeQuietly(new ByteArrayOutputStream());\n\n        IOUtil.close(null);\n        IOUtil.close(new ByteArrayOutputStream());\n    }",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 34)",
            "(line 21,col 9)-(line 21,col 57)",
            "(line 23,col 9)-(line 23,col 27)",
            "(line 24,col 9)-(line 24,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.io.IOUtilTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/io/IOUtilTest.java",
        "signature": "org.mockito.internal.util.io.IOUtilTest.writes_reads_files()",
        "snippet": "    @Test\n    public void writes_reads_files() throws Exception {\n        File file = tmp.newFile();\n        IOUtil.writeText(\"foo\\n\\nbar\", file);\n        assertEquals(asList(\"foo\", \"\", \"bar\"), IOUtil.readLines(new FileInputStream(file)));\n    }",
        "begin_line": 27,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 34)",
            "(line 30,col 9)-(line 30,col 45)",
            "(line 31,col 9)-(line 31,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.use_the_correct_setter_on_the_target()",
        "snippet": "    @Test\n    public void use_the_correct_setter_on_the_target() throws Exception {\n        // given\n        SomeBean someBean = new SomeBean();\n        Field theField = someBean.getClass().getDeclaredField(\"theField\");\n        File valueToInject = new File(\"path\");\n\n        // when\n        boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);\n\n        // then\n        assertTrue(injected);\n        assertTrue(someBean.theFieldSetterWasUsed);\n        assertSame(valueToInject, someBean.getTheField());\n    }",
        "begin_line": 20,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 43)",
            "(line 24,col 9)-(line 24,col 74)",
            "(line 25,col 9)-(line 25,col 46)",
            "(line 28,col 9)-(line 28,col 95)",
            "(line 31,col 9)-(line 31,col 29)",
            "(line 32,col 9)-(line 32,col 51)",
            "(line 33,col 9)-(line 33,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.use_the_setter_on_the_target_when_field_name_begins_by_at_least_2_caps()",
        "snippet": "    @Test\n    public void use_the_setter_on_the_target_when_field_name_begins_by_at_least_2_caps() throws Exception {\n        // given\n        BeanWithWeirdFields someBean = new BeanWithWeirdFields();\n        Field theField = someBean.getClass().getDeclaredField(\"UUID\");\n        UUID valueToInject = new UUID(0L, 0L);\n\n        // when\n        boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);\n\n        // then\n        assertTrue(injected);\n        assertTrue(someBean.theFieldSetterWasUSed);\n        assertSame(valueToInject, someBean.UUID);\n    }",
        "begin_line": 36,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 65)",
            "(line 40,col 9)-(line 40,col 70)",
            "(line 41,col 9)-(line 41,col 46)",
            "(line 44,col 9)-(line 44,col 95)",
            "(line 47,col 9)-(line 47,col 29)",
            "(line 48,col 9)-(line 48,col 51)",
            "(line 49,col 9)-(line 49,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.should_not_fail_if_bean_class_declares_only_the_setter_for_the_property()",
        "snippet": "    @Test\n    public void should_not_fail_if_bean_class_declares_only_the_setter_for_the_property() throws Exception {\n        // given\n        SomeBeanWithJustASetter someBean = new SomeBeanWithJustASetter();\n        Field theField = someBean.getClass().getDeclaredField(\"theField\");\n        File valueToInject = new File(\"path\");\n\n        // when\n        boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);\n\n        // then\n        assertTrue(injected);\n        assertTrue(someBean.theFieldSetterWasUsed);\n    }",
        "begin_line": 52,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 73)",
            "(line 56,col 9)-(line 56,col 74)",
            "(line 57,col 9)-(line 57,col 46)",
            "(line 60,col 9)-(line 60,col 95)",
            "(line 63,col 9)-(line 63,col 29)",
            "(line 64,col 9)-(line 64,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.should_fail_if_matching_setter_cannot_be_found_and_if_report_failure_is_true()",
        "snippet": "    @Test\n    public void should_fail_if_matching_setter_cannot_be_found_and_if_report_failure_is_true() throws Exception {\n        // given\n        SomeBeanWithNoSetterMatchingFieldType bean = new SomeBeanWithNoSetterMatchingFieldType();\n        Field theField = bean.getClass().getDeclaredField(\"theField\");\n        File valueToInject = new File(\"path\");\n\n        try {\n            // when\n            new BeanPropertySetter(bean, theField, true).set(valueToInject);\n            fail();\n        } catch (Exception e) {\n            // then\n            Assertions.assertThat(e.getMessage()).contains(\"setter not found\");\n        }\n    }",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 97)",
            "(line 71,col 9)-(line 71,col 70)",
            "(line 72,col 9)-(line 72,col 46)",
            "(line 74,col 9)-(line 81,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.return_false_if_no_setter_was_found()",
        "snippet": "    @Test\n    public void return_false_if_no_setter_was_found() throws Exception {\n        // given\n        SomeBeanWithJustAGetter bean = new SomeBeanWithJustAGetter();\n        Field theField = bean.getClass().getDeclaredField(\"theField\");\n        File valueToInject = new File(\"path\");\n\n        // when\n        boolean injected = new BeanPropertySetter(bean, theField).set(valueToInject);\n\n        // then\n        assertFalse(injected);\n    }",
        "begin_line": 84,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 70)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 92,col 9)-(line 92,col 85)",
            "(line 95,col 9)-(line 95,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.return_false_if_no_setter_was_found_and_if_reportNoSetterFound_is_false()",
        "snippet": "    @Test\n    public void return_false_if_no_setter_was_found_and_if_reportNoSetterFound_is_false() throws Exception {\n        // given\n        SomeBeanWithNoSetterMatchingFieldType bean = new SomeBeanWithNoSetterMatchingFieldType();\n        Field theField = bean.getClass().getDeclaredField(\"theField\");\n        File valueToInject = new File(\"path\");\n\n        // when\n        boolean injected = new BeanPropertySetter(bean, theField, false).set(valueToInject);\n\n        // then\n        assertFalse(injected);\n    }",
        "begin_line": 98,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 97)",
            "(line 102,col 9)-(line 102,col 70)",
            "(line 103,col 9)-(line 103,col 46)",
            "(line 106,col 9)-(line 106,col 92)",
            "(line 109,col 9)-(line 109,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.SomeBean.setTheField(java.io.File)",
        "snippet": "        public void setTheField(final File theField) {\n            theFieldSetterWasUsed = true;\n            this.theField = theField;\n        }",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 117,col 13)-(line 117,col 41)",
            "(line 118,col 13)-(line 118,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.SomeBean.getTheField()",
        "snippet": "        public File getTheField() {\n            return theField;\n        }",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 13)-(line 122,col 28)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.SomeBeanWithJustASetter.setTheField(java.io.File)",
        "snippet": "        public void setTheField(final File theField) {\n            theFieldSetterWasUsed = true;\n            this.theField = theField;\n        }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 131,col 13)-(line 131,col 41)",
            "(line 132,col 13)-(line 132,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.SomeBeanWithJustAGetter.getTheField()",
        "snippet": "        public File getTheField() {\n            return theField;\n        }",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 139,col 13)-(line 139,col 28)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.SomeBeanWithNoSetterMatchingFieldType.setTheField(java.io.FileOutputStream)",
        "snippet": "        public void setTheField(final FileOutputStream somethingElse) {\n            theFieldSetterWasUsed = true;\n        }",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 148,col 13)-(line 148,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.BeanPropertySetterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java",
        "signature": "org.mockito.internal.util.reflection.BeanPropertySetterTest.BeanWithWeirdFields.setUUID(java.util.UUID)",
        "snippet": "        public void setUUID(UUID UUID) {\n            theFieldSetterWasUSed = true;\n            this.UUID = UUID;\n        }",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 157,col 13)-(line 157,col 41)",
            "(line 158,col 13)-(line 158,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.Anonymous-109bda7d-3444-416e-a308-777c31c9fed5.compare(java.lang.reflect.Field, java.lang.reflect.Field)",
        "snippet": "        public int compare(Field o1, Field o2)\n        {\n            if (o1.equals(o2)) {\n                return 0;\n            }\n\n            List<Field> l = new SuperTypesLastSorter().sort(Arrays.asList(o1, o2));\n\n            if (l.get(0) == o1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }",
        "begin_line": 26,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 28,col 13)-(line 30,col 13)",
            "(line 32,col 13)-(line 32,col 83)",
            "(line 34,col 13)-(line 38,col 13)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.when_same_type_the_order_is_based_on_field_name()",
        "snippet": "    @Test\n    public void when_same_type_the_order_is_based_on_field_name() throws Exception {\n        assertThat(cmp.compare(field(\"objectA\"), field(\"objectB\"))).isEqualTo(-1);\n        assertThat(cmp.compare(field(\"objectB\"), field(\"objectA\"))).isEqualTo(1);\n        assertThat(cmp.compare(field(\"objectB\"), field(\"objectB\"))).isEqualTo(0);\n    }",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 82)",
            "(line 61,col 9)-(line 61,col 81)",
            "(line 62,col 9)-(line 62,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.when_type_is_different_the_supertype_comes_last()",
        "snippet": "    @Test\n    public void when_type_is_different_the_supertype_comes_last() throws Exception {\n        assertThat(cmp.compare(field(\"numberA\"), field(\"objectB\"))).isEqualTo(-1);\n        assertThat(cmp.compare(field(\"objectB\"), field(\"numberA\"))).isEqualTo(1);\n    }",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 82)",
            "(line 68,col 9)-(line 68,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.using_Collections_dot_sort()",
        "snippet": "    @Test\n    public void using_Collections_dot_sort() throws Exception {\n        List<Field> unsortedFields = Arrays.asList(\n                field(\"objectB\"),\n                field(\"integerB\"),\n                field(\"numberA\"),\n                field(\"numberB\"),\n                field(\"objectA\"),\n                field(\"integerA\")\n        );\n\n        List<Field> sortedFields = new SuperTypesLastSorter().sort(unsortedFields);\n\n        assertThat(sortedFields).containsSequence(\n                field(\"integerA\"),\n                field(\"integerB\"),\n                field(\"numberA\"),\n                field(\"numberB\"),\n                field(\"objectA\"),\n                field(\"objectB\")\n        );\n    }",
        "begin_line": 71,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 80,col 10)",
            "(line 82,col 9)-(line 82,col 83)",
            "(line 84,col 9)-(line 91,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.issue_352_order_was_different_between_JDK6_and_JDK7()",
        "snippet": "    @Test\n    public void issue_352_order_was_different_between_JDK6_and_JDK7() throws Exception {\n        List<Field> unsortedFields = Arrays.asList(\n                field(\"objectB\"),\n                field(\"objectA\")\n        );\n\n        Collections.sort(unsortedFields, cmp);\n\n        assertThat(unsortedFields).containsSequence(\n                field(\"objectA\"),\n                field(\"objectB\")\n        );\n    }",
        "begin_line": 95,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 100,col 10)",
            "(line 102,col 9)-(line 102,col 46)",
            "(line 104,col 9)-(line 107,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.fields_sort_consistently_when_interfaces_are_included()",
        "snippet": "    @Test\n    public void fields_sort_consistently_when_interfaces_are_included() throws NoSuchFieldException\n    {\n        assertSortConsistently(field(\"iterableA\"), field(\"numberA\"), field(\"integerA\"));\n    }",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 88)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.fields_sort_consistently_when_names_and_type_indicate_different_order()",
        "snippet": "    @Test\n    public void fields_sort_consistently_when_names_and_type_indicate_different_order() throws NoSuchFieldException\n    {\n        assertSortConsistently(field(\"xNumber\"), field(\"yIterable\"), field(\"zInteger\"));\n    }",
        "begin_line": 116,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 88)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.assertSortConsistently(java.lang.reflect.Field, java.lang.reflect.Field, java.lang.reflect.Field)",
        "snippet": "    private static void assertSortConsistently(Field a, Field b, Field c)\n    {\n        Field[][] initialOrderings = {\n                {a, b, c},\n                {a, c, b},\n                {b, a, c},\n                {b, c, a},\n                {c, a, b},\n                {c, b, a}\n        };\n\n        Set<List<Field>> results = new HashSet<List<Field>>();\n\n        for (Field[] o : initialOrderings) {\n            results.add(new SuperTypesLastSorter().sort(Arrays.asList(o)));\n        }\n\n        assertThat(results).hasSize(1);\n    }",
        "begin_line": 126,
        "end_line": 144,
        "comment": "\n     * Assert that these fields sort in the same order no matter which order\n     * they start in.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 135,col 10)",
            "(line 137,col 9)-(line 137,col 62)",
            "(line 139,col 9)-(line 141,col 9)",
            "(line 143,col 9)-(line 143,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java",
        "signature": "org.mockito.internal.util.reflection.SuperTypesLastSorterTest.field(java.lang.String)",
        "snippet": "    private Field field(String field) throws NoSuchFieldException {\n        return getClass().getDeclaredField(field);\n    }",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.SomeObject.SomeObject(int)",
        "snippet": "        public SomeObject(int finalField) {\n            this.finalField = finalField;\n        }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldShallowCopyBasicFinalField()",
        "snippet": "    @Test\n    public void shouldShallowCopyBasicFinalField() throws Exception {\n        // given\n        assertEquals(100, from.finalField);\n        assertNotEquals(100, to.finalField);\n\n        // when\n        tool.copyToMock(from, to);\n\n        // then\n        assertEquals(100, to.finalField);\n    }",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 43)",
            "(line 52,col 9)-(line 52,col 44)",
            "(line 55,col 9)-(line 55,col 34)",
            "(line 58,col 9)-(line 58,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldShallowCopyTransientPrivateFields()",
        "snippet": "    @Test\n    public void shouldShallowCopyTransientPrivateFields() throws Exception {\n        // given\n        from.privateTransientField = 1000;\n        assertNotEquals(1000, to.privateTransientField);\n\n        // when\n        tool.copyToMock(from, to);\n\n        // then\n        assertEquals(1000, to.privateTransientField);\n    }",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 42)",
            "(line 65,col 9)-(line 65,col 56)",
            "(line 68,col 9)-(line 68,col 34)",
            "(line 71,col 9)-(line 71,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldShallowCopyLinkedListIntoMock()",
        "snippet": "    @Test\n    public void shouldShallowCopyLinkedListIntoMock() throws Exception {\n        // given\n        LinkedList fromList = new LinkedList();\n        LinkedList toList = mock(LinkedList.class);\n\n        // when\n        tool.copyToMock(fromList, toList);\n\n        // then no exception is thrown\n    }",
        "begin_line": 74,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 78,col 51)",
            "(line 81,col 9)-(line 81,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldShallowCopyFieldValuesIntoMock()",
        "snippet": "    @Test\n    public void shouldShallowCopyFieldValuesIntoMock() throws Exception {\n        // given\n        from.defaultField = \"foo\";\n        from.instancePublicField = new SomeOtherObject();\n        from.privateField = 1;\n        from.privateTransientField = 2;\n        from.protectedField = 3;\n        \n        assertNotEquals(from.defaultField, to.defaultField);\n        assertNotEquals(from.instancePublicField, to.instancePublicField);\n        assertNotEquals(from.privateField, to.privateField);\n        assertNotEquals(from.privateTransientField, to.privateTransientField);\n        assertNotEquals(from.protectedField, to.protectedField);\n\n        // when\n        tool.copyToMock(from, to);\n\n        // then\n        assertEquals(from.defaultField, to.defaultField);\n        assertEquals(from.instancePublicField, to.instancePublicField);\n        assertEquals(from.privateField, to.privateField);\n        assertEquals(from.privateTransientField, to.privateTransientField);\n        assertEquals(from.protectedField, to.protectedField);\n    }",
        "begin_line": 86,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 91,col 30)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 32)",
            "(line 95,col 9)-(line 95,col 60)",
            "(line 96,col 9)-(line 96,col 74)",
            "(line 97,col 9)-(line 97,col 60)",
            "(line 98,col 9)-(line 98,col 78)",
            "(line 99,col 9)-(line 99,col 64)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 105,col 9)-(line 105,col 57)",
            "(line 106,col 9)-(line 106,col 71)",
            "(line 107,col 9)-(line 107,col 57)",
            "(line 108,col 9)-(line 108,col 75)",
            "(line 109,col 9)-(line 109,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldCopyValuesOfInheritedFields()",
        "snippet": "    @Test\n    public void shouldCopyValuesOfInheritedFields() throws Exception {\n        //given\n        ((InheritMe) from).privateInherited = \"foo\";\n        ((InheritMe) from).protectedInherited = \"bar\";\n    \n        assertNotEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n        assertNotEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n        \n        //when\n        tool.copyToMock(from, to);\n        \n        //then\n        assertEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n        assertEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n    }",
        "begin_line": 112,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 54)",
            "(line 118,col 9)-(line 118,col 96)",
            "(line 119,col 9)-(line 119,col 96)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 125,col 9)-(line 125,col 93)",
            "(line 126,col 9)-(line 126,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldEnableAndThenDisableAccessibility()",
        "snippet": "    @Test\n    public void shouldEnableAndThenDisableAccessibility() throws Exception {\n        //given\n        Field privateField = SomeObject.class.getDeclaredField(\"privateField\");\n        assertFalse(privateField.isAccessible());\n        \n        //when\n        tool.copyToMock(from, to);\n        \n        //then\n        privateField = SomeObject.class.getDeclaredField(\"privateField\");\n        assertFalse(privateField.isAccessible());\n    }",
        "begin_line": 129,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 79)",
            "(line 133,col 9)-(line 133,col 49)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 139,col 9)-(line 139,col 73)",
            "(line 140,col 9)-(line 140,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue()",
        "snippet": "    @Test\n    public void shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue() throws Exception {\n        //given\n        tool.fieldCopier = mock(FieldCopier.class);\n        \n        doNothing().\n        doThrow(new IllegalAccessException()).\n        doNothing().\n        when(tool.fieldCopier).\n        copyValue(anyObject(), anyObject(), any(Field.class));\n        \n        //when\n        tool.copyToMock(from, to);\n        \n        //then\n        verify(tool.fieldCopier, atLeast(3)).copyValue(any(), any(), any(Field.class));\n    }",
        "begin_line": 143,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 51)",
            "(line 148,col 9)-(line 152,col 62)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 158,col 9)-(line 158,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.LenientCopyToolTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/LenientCopyToolTest.java",
        "signature": "org.mockito.internal.util.reflection.LenientCopyToolTest.shouldBeAbleToCopyFromRealObjectToRealObject()",
        "snippet": "    @Test\n    public void shouldBeAbleToCopyFromRealObjectToRealObject() throws Exception {\n        \n        // given\n        from.defaultField = \"defaultField\";\n        from.instancePublicField = new SomeOtherObject();\n        from.privateField = 1;\n        from.privateTransientField = 2;\n        from.protectedField = \"protectedField\";\n        from.protectedInherited = \"protectedInherited\";\n        to = new SomeObject(0);\n        \n        // when\n        tool.copyToRealObject(from, to);\n        \n        // then\n        assertEquals(from.defaultField, to.defaultField);\n        assertEquals(from.instancePublicField, to.instancePublicField);\n        assertEquals(from.privateField, to.privateField);\n        assertEquals(from.privateTransientField, to.privateTransientField);\n        assertEquals(from.protectedField, to.protectedField);\n        assertEquals(from.protectedInherited, to.protectedInherited);\n        \n    }",
        "begin_line": 161,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 43)",
            "(line 166,col 9)-(line 166,col 57)",
            "(line 167,col 9)-(line 167,col 30)",
            "(line 168,col 9)-(line 168,col 39)",
            "(line 169,col 9)-(line 169,col 47)",
            "(line 170,col 9)-(line 170,col 55)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 174,col 9)-(line 174,col 40)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 178,col 71)",
            "(line 179,col 9)-(line 179,col 57)",
            "(line 180,col 9)-(line 180,col 75)",
            "(line 181,col 9)-(line 181,col 61)",
            "(line 182,col 9)-(line 182,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.numberList()",
        "snippet": "    public List<Number> numberList() { return null; }",
        "begin_line": 30,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 30,col 40)-(line 30,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.numberComparable()",
        "snippet": "    public Comparable<Number> numberComparable() { return null; }",
        "begin_line": 31,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 31,col 52)-(line 31,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.rawList()",
        "snippet": "    public List rawList() { return null; }",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 32,col 29)-(line 32,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.typeList()",
        "snippet": "    public List<? extends Type> typeList() { return null; }",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 33,col 46)-(line 33,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.should_find_generic_class()",
        "snippet": "    @Test\n    public void should_find_generic_class() throws Exception {\n        assertEquals(String.class, m.getGenericType(field(\"one\")));\n        assertEquals(Integer.class, m.getGenericType(field(\"two\")));\n        assertEquals(Double.class, m.getGenericType(field(\"map\")));\n    }",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 67)",
            "(line 40,col 9)-(line 40,col 68)",
            "(line 41,col 9)-(line 41,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.should_get_object_for_non_generic()",
        "snippet": "    @Test\n    public void should_get_object_for_non_generic() throws Exception {\n        assertEquals(Object.class, m.getGenericType(field(\"nonGeneric\")));\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.should_deal_with_nested_generics()",
        "snippet": "    @Test\n    public void should_deal_with_nested_generics() throws Exception {\n        assertEquals(Set.class, m.getGenericType(field(\"nested\")));\n        assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 67)",
            "(line 52,col 9)-(line 52,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMasterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMasterTest.field(java.lang.String)",
        "snippet": "    private Field field(String fieldName) throws SecurityException, NoSuchFieldException {\n        return this.getClass().getDeclaredField(fieldName);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldsTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldsTest.fields_should_return_all_declared_fields_in_hierarchy()",
        "snippet": "    @Test\n    public void fields_should_return_all_declared_fields_in_hierarchy() throws Exception {\n        assertThat(Fields.allDeclaredFieldsOf(new HierarchyOfClasses()).names())\n                .containsOnly(\"a\", \"b\", \"static_a\", \"static_b\");\n    }",
        "begin_line": 15,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 18,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldsTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldsTest.fields_should_return_declared_fields()",
        "snippet": "    @Test\n    public void fields_should_return_declared_fields() throws Exception {\n        assertThat(Fields.declaredFieldsOf(new HierarchyOfClasses()).names())\n                .containsOnly(\"b\", \"static_b\");\n    }",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 24,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldsTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldsTest.can_filter_not_null_fields()",
        "snippet": "    @Test\n    public void can_filter_not_null_fields() throws Exception {\n        assertThat(Fields.declaredFieldsOf(new NullOrNotNullFields()).notNull().names())\n                .containsOnly(\"c\");\n    }",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 30,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldsTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldsTest.can_get_values_of_instance_fields()",
        "snippet": "    @Test\n    public void can_get_values_of_instance_fields() throws Exception {\n        assertThat(Fields.declaredFieldsOf(new ValuedFields()).assignedValues())\n                .containsOnly(\"a\", \"b\");\n    }",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 36,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldsTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldsTest.can_get_list_of_InstanceField()",
        "snippet": "    @Test\n    public void can_get_list_of_InstanceField() throws Exception {\n        ValuedFields instance = new ValuedFields();\n\n        assertThat(Fields.declaredFieldsOf(instance).instanceFields())\n                .containsOnly(new InstanceField(field(\"a\", instance), instance),\n                              new InstanceField(field(\"b\", instance), instance)\n                );\n    }",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 51)",
            "(line 44,col 9)-(line 47,col 18)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldsTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldsTest.field(java.lang.String, java.lang.Object)",
        "snippet": "    private Field field(String name, Object instance) throws NoSuchFieldException {\n        return instance.getClass().getDeclaredField(name);\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.ensure_instances_to_create_are_null()",
        "snippet": "    @After\n    public void ensure_instances_to_create_are_null() {\n        withMultipleConstructor = null;\n        withOneConstructor = null;\n        withNoArgConstructor = null;\n        withThrowingConstructor = null;\n        withVarargConstructor = null;\n    }",
        "begin_line": 43,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 39)",
            "(line 46,col 9)-(line 46,col 34)",
            "(line 47,col 9)-(line 47,col 36)",
            "(line 48,col 9)-(line 48,col 39)",
            "(line 49,col 9)-(line 49,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_be_created_with_an_argument_resolver()",
        "snippet": "    @Test\n    public void should_be_created_with_an_argument_resolver() throws Exception {\n        new ParameterizedConstructorInstantiator(this, field(\"whateverForNow\"), resolver);\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_fail_if_no_parameterized_constructor_found___excluding_inner_and_others_kind_of_types()",
        "snippet": "    @Test\n    public void should_fail_if_no_parameterized_constructor_found___excluding_inner_and_others_kind_of_types() throws Exception {\n        try {\n            new ParameterizedConstructorInstantiator(this, field(\"withNoArgConstructor\"), resolver).instantiate();\n            fail();\n        } catch (MockitoException me) {\n            assertThat(me.getMessage()).contains(\"no parameterized constructor\").contains(\"withNoArgConstructor\").contains(\"NoArgConstructor\");\n        }\n    }",
        "begin_line": 59,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 66,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_instantiate_type_if_resolver_provide_matching_types()",
        "snippet": "    @Test\n    public void should_instantiate_type_if_resolver_provide_matching_types() throws Exception {\n        Observer observer = mock(Observer.class);\n        Map map = mock(Map.class);\n        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, map });\n\n        new ParameterizedConstructorInstantiator(this, field(\"withMultipleConstructor\"), resolver).instantiate();\n\n        assertNotNull(withMultipleConstructor);\n        assertNotNull(withMultipleConstructor.observer);\n        assertNotNull(withMultipleConstructor.map);\n    }",
        "begin_line": 69,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 49)",
            "(line 72,col 9)-(line 72,col 34)",
            "(line 73,col 9)-(line 73,col 121)",
            "(line 75,col 9)-(line 75,col 113)",
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 78,col 56)",
            "(line 79,col 9)-(line 79,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_fail_if_an_argument_instance_type_do_not_match_wanted_type()",
        "snippet": "    @Test\n    public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type() throws Exception {\n        Observer observer = mock(Observer.class);\n        Set wrongArg = mock(Set.class);\n        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, wrongArg });\n\n        try {\n            new ParameterizedConstructorInstantiator(this, field(\"withMultipleConstructor\"), resolver).instantiate();\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.getMessage()).contains(\"argResolver\").contains(\"incorrect types\");\n        }\n    }",
        "begin_line": 82,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 39)",
            "(line 86,col 9)-(line 86,col 126)",
            "(line 88,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_report_failure_if_constructor_throws_exception()",
        "snippet": "    @Test\n    public void should_report_failure_if_constructor_throws_exception() throws Exception {\n        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ null });\n\n        try {\n            new ParameterizedConstructorInstantiator(this, field(\"withThrowingConstructor\"), resolver).instantiate();\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.getMessage()).contains(\"constructor\").contains(\"raised an exception\");\n        }\n    }",
        "begin_line": 96,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 112)",
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_instantiate_type_with_vararg_constructor()",
        "snippet": "    @Test\n    public void should_instantiate_type_with_vararg_constructor() throws Exception {\n        Observer[] vararg = new Observer[] {  };\n        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ \"\", vararg});\n\n        new ParameterizedConstructorInstantiator(this, field(\"withVarargConstructor\"), resolver).instantiate();\n\n        assertNotNull(withVarargConstructor);\n    }",
        "begin_line": 108,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 48)",
            "(line 111,col 9)-(line 111,col 117)",
            "(line 113,col 9)-(line 113,col 111)",
            "(line 115,col 9)-(line 115,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.field(java.lang.String)",
        "snippet": "    private Field field(String fieldName) throws NoSuchFieldException {\n        Field field = this.getClass().getDeclaredField(fieldName);\n        field.setAccessible(true);\n        return field;\n    }",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 66)",
            "(line 120,col 9)-(line 120,col 34)",
            "(line 121,col 9)-(line 121,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.NoArgConstructor.NoArgConstructor()",
        "snippet": "        NoArgConstructor() { }",
        "begin_line": 125,
        "end_line": 125,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.OneConstructor.OneConstructor(java.util.Observer)",
        "snippet": "        public OneConstructor(Observer observer) { }",
        "begin_line": 129,
        "end_line": 129,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.ThrowingConstructor.ThrowingConstructor(java.util.Observer)",
        "snippet": "        public ThrowingConstructor(Observer observer) throws IOException { throw new IOException(); }",
        "begin_line": 133,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 133,col 76)-(line 133,col 99)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.MultipleConstructor.MultipleConstructor(java.util.Observer)",
        "snippet": "        public MultipleConstructor(Observer observer) { this(observer, null); }",
        "begin_line": 140,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 140,col 57)-(line 140,col 77)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.MultipleConstructor.MultipleConstructor(java.util.Observer, java.util.Map)",
        "snippet": "        public MultipleConstructor(Observer observer, Map map) {\n            super(observer);\n            this.observer = observer;\n            this.map = map;\n        }",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 142,col 13)-(line 142,col 28)",
            "(line 143,col 13)-(line 143,col 37)",
            "(line 144,col 13)-(line 144,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.VarargConstructor.VarargConstructor(java.lang.String, java.util.Observer...)",
        "snippet": "        VarargConstructor(String whatever, Observer... observers) { }",
        "begin_line": 149,
        "end_line": 149,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.AccessibilityChangerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/AccessibilityChangerTest.java",
        "signature": "org.mockito.internal.util.reflection.AccessibilityChangerTest.should_enable_and_safely_disable()",
        "snippet": "    @Test\n    public void should_enable_and_safely_disable() throws Exception {\n        AccessibilityChanger changer = new AccessibilityChanger();\n        changer.enableAccess(field(\"whatever\"));\n        changer.safelyDisableAccess(field(\"whatever\"));\n    }",
        "begin_line": 18,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 66)",
            "(line 21,col 9)-(line 21,col 48)",
            "(line 22,col 9)-(line 22,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.AccessibilityChangerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/AccessibilityChangerTest.java",
        "signature": "org.mockito.internal.util.reflection.AccessibilityChangerTest.safelyDisableAccess_should_fail_when_enableAccess_not_called()",
        "snippet": "    @Test(expected = java.lang.AssertionError.class)\n    @Ignore(\"should be run only when -ea is passed to the VM\")\n    public void safelyDisableAccess_should_fail_when_enableAccess_not_called() throws Exception {\n        new AccessibilityChanger().safelyDisableAccess(field(\"whatever\"));\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.AccessibilityChangerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/AccessibilityChangerTest.java",
        "signature": "org.mockito.internal.util.reflection.AccessibilityChangerTest.field(java.lang.String)",
        "snippet": "    private Field field(String fieldName) throws NoSuchFieldException {\n        return this.getClass().getDeclaredField(fieldName);\n    }",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsSelfReference.self()",
        "snippet": "        T self();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.UpperBoundedTypeWithClass.get()",
        "snippet": "        E get();",
        "begin_line": 30,
        "end_line": 30,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.UpperBoundedTypeWithInterfaces.get()",
        "snippet": "        E get();",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.remove(java.lang.Object)",
        "snippet": "        Set<Number> remove(Object key); // override with fixed ParameterizedType",
        "begin_line": 39,
        "end_line": 39,
        "comment": " override with fixed ParameterizedType",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.returning_wildcard_with_class_lower_bound()",
        "snippet": "        List<? super Integer> returning_wildcard_with_class_lower_bound();",
        "begin_line": 40,
        "end_line": 40,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.returning_wildcard_with_typeVar_lower_bound()",
        "snippet": "        List<? super K> returning_wildcard_with_typeVar_lower_bound();",
        "begin_line": 41,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.returning_wildcard_with_typeVar_upper_bound()",
        "snippet": "        List<? extends K> returning_wildcard_with_typeVar_upper_bound();",
        "begin_line": 42,
        "end_line": 42,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.returningK()",
        "snippet": "        K returningK();",
        "begin_line": 43,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.paramType_with_type_params()",
        "snippet": "        <O extends K> List<O> paramType_with_type_params();",
        "begin_line": 44,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.two_type_params()",
        "snippet": "        <S, T extends S> T two_type_params();",
        "begin_line": 45,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.GenericsNest.typeVar_with_type_params()",
        "snippet": "        <O extends K> O typeVar_with_type_params();",
        "begin_line": 46,
        "end_line": 46,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariable_of_self_type()",
        "snippet": "    @Test\n    public void typeVariable_of_self_type() {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(\"self\", GenericsSelfReference.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);\n    }",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 168)",
            "(line 55,col 9)-(line 55,col 85)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.can_get_raw_type_from_Class()",
        "snippet": "    @Test\n    public void can_get_raw_type_from_Class() throws Exception {\n        assertThat(inferFrom(ListOfAnyNumbers.class).rawType()).isEqualTo(ListOfAnyNumbers.class);\n        assertThat(inferFrom(ListOfNumbers.class).rawType()).isEqualTo(ListOfNumbers.class);\n        assertThat(inferFrom(GenericsNest.class).rawType()).isEqualTo(GenericsNest.class);\n        assertThat(inferFrom(StringList.class).rawType()).isEqualTo(StringList.class);\n    }",
        "begin_line": 58,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 98)",
            "(line 61,col 9)-(line 61,col 92)",
            "(line 62,col 9)-(line 62,col 90)",
            "(line 63,col 9)-(line 63,col 86)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.can_get_raw_type_from_ParameterizedType()",
        "snippet": "    @Test\n    public void can_get_raw_type_from_ParameterizedType() throws Exception {\n        assertThat(inferFrom(ListOfAnyNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);\n        assertThat(inferFrom(ListOfNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);\n        assertThat(inferFrom(GenericsNest.class.getGenericInterfaces()[0]).rawType()).isEqualTo(Map.class);\n        assertThat(inferFrom(StringList.class.getGenericSuperclass()).rawType()).isEqualTo(ArrayList.class);\n    }",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 112)",
            "(line 69,col 9)-(line 69,col 109)",
            "(line 70,col 9)-(line 70,col 107)",
            "(line 71,col 9)-(line 71,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.can_get_type_variables_from_Class()",
        "snippet": "    @Test\n    public void can_get_type_variables_from_Class() throws Exception {\n        assertThat(inferFrom(GenericsNest.class).actualTypeArguments().keySet()).hasSize(1).onProperty(\"name\").contains(\"K\");\n        assertThat(inferFrom(ListOfNumbers.class).actualTypeArguments().keySet()).isEmpty();\n        assertThat(inferFrom(ListOfAnyNumbers.class).actualTypeArguments().keySet()).hasSize(1).onProperty(\"name\").contains(\"N\");\n        assertThat(inferFrom(Map.class).actualTypeArguments().keySet()).hasSize(2).onProperty(\"name\").contains(\"K\", \"V\");\n        assertThat(inferFrom(Serializable.class).actualTypeArguments().keySet()).isEmpty();\n        assertThat(inferFrom(StringList.class).actualTypeArguments().keySet()).isEmpty();\n    }",
        "begin_line": 74,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 125)",
            "(line 77,col 9)-(line 77,col 92)",
            "(line 78,col 9)-(line 78,col 129)",
            "(line 79,col 9)-(line 79,col 121)",
            "(line 80,col 9)-(line 80,col 91)",
            "(line 81,col 9)-(line 81,col 89)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.can_get_type_variables_from_ParameterizedType()",
        "snippet": "    @Test\n    public void can_get_type_variables_from_ParameterizedType() throws Exception {\n        assertThat(inferFrom(GenericsNest.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(2).onProperty(\"name\").contains(\"K\", \"V\");\n        assertThat(inferFrom(ListOfAnyNumbers.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(1).onProperty(\"name\").contains(\"E\");\n        assertThat(inferFrom(Integer.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(1).onProperty(\"name\").contains(\"T\");\n        assertThat(inferFrom(StringBuilder.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).isEmpty();\n        assertThat(inferFrom(StringList.class).actualTypeArguments().keySet()).isEmpty();\n    }",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 156)",
            "(line 87,col 9)-(line 87,col 155)",
            "(line 88,col 9)-(line 88,col 146)",
            "(line 89,col 9)-(line 89,col 118)",
            "(line 90,col 9)-(line 90,col 89)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariable_return_type_of____iterator____resolved_to_Iterator_and_type_argument_to_String()",
        "snippet": "    @Test\n    public void typeVariable_return_type_of____iterator____resolved_to_Iterator_and_type_argument_to_String() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(StringList.class).resolveGenericReturnType(firstNamedMethod(\"iterator\", StringList.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(Iterator.class);\n        assertThat(genericMetadata.actualTypeArguments().values()).contains(String.class);\n    }",
        "begin_line": 93,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 150)",
            "(line 97,col 9)-(line 97,col 72)",
            "(line 98,col 9)-(line 98,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariable_return_type_of____get____resolved_to_Set_and_type_argument_to_Number()",
        "snippet": "    @Test\n    public void typeVariable_return_type_of____get____resolved_to_Set_and_type_argument_to_Number() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"get\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(Set.class);\n        assertThat(genericMetadata.actualTypeArguments().values()).contains(Number.class);\n    }",
        "begin_line": 101,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 149)",
            "(line 105,col 9)-(line 105,col 67)",
            "(line 106,col 9)-(line 106,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.bounded_typeVariable_return_type_of____returningK____resolved_to_Comparable_and_with_BoundedType()",
        "snippet": "    @Test\n    public void bounded_typeVariable_return_type_of____returningK____resolved_to_Comparable_and_with_BoundedType() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"returningK\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(Comparable.class);\n        GenericMetadataSupport extraInterface_0 = inferFrom(genericMetadata.extraInterfaces().get(0));\n        assertThat(extraInterface_0.rawType()).isEqualTo(Cloneable.class);\n    }",
        "begin_line": 109,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 156)",
            "(line 113,col 9)-(line 113,col 74)",
            "(line 114,col 9)-(line 114,col 102)",
            "(line 115,col 9)-(line 115,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.fixed_ParamType_return_type_of____remove____resolved_to_Set_and_type_argument_to_Number()",
        "snippet": "    @Test\n    public void fixed_ParamType_return_type_of____remove____resolved_to_Set_and_type_argument_to_Number() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"remove\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(Set.class);\n        assertThat(genericMetadata.actualTypeArguments().values()).contains(Number.class);\n    }",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 152)",
            "(line 122,col 9)-(line 122,col 67)",
            "(line 123,col 9)-(line 123,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.paramType_return_type_of____values____resolved_to_Collection_and_type_argument_to_Parameterized_Set()",
        "snippet": "    @Test\n    public void paramType_return_type_of____values____resolved_to_Collection_and_type_argument_to_Parameterized_Set() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"values\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(Collection.class);\n        GenericMetadataSupport fromTypeVariableE = inferFrom(typeVariableValue(genericMetadata.actualTypeArguments(), \"E\"));\n        assertThat(fromTypeVariableE.rawType()).isEqualTo(Set.class);\n        assertThat(fromTypeVariableE.actualTypeArguments().values()).contains(Number.class);\n    }",
        "begin_line": 126,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 152)",
            "(line 130,col 9)-(line 130,col 74)",
            "(line 131,col 9)-(line 131,col 124)",
            "(line 132,col 9)-(line 132,col 69)",
            "(line 133,col 9)-(line 133,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.paramType_with_type_parameters_return_type_of____paramType_with_type_params____resolved_to_Collection_and_type_argument_to_Parameterized_Set()",
        "snippet": "    @Test\n    public void paramType_with_type_parameters_return_type_of____paramType_with_type_params____resolved_to_Collection_and_type_argument_to_Parameterized_Set() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"paramType_with_type_params\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(List.class);\n        Type firstBoundOfE = ((GenericMetadataSupport.TypeVarBoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), \"E\")).firstBound();\n        assertThat(inferFrom(firstBoundOfE).rawType()).isEqualTo(Comparable.class);\n    }",
        "begin_line": 136,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 172)",
            "(line 140,col 9)-(line 140,col 68)",
            "(line 141,col 9)-(line 141,col 150)",
            "(line 142,col 9)-(line 142,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariable_with_type_parameters_return_type_of____typeVar_with_type_params____resolved_K_hence_to_Comparable_and_with_BoundedType()",
        "snippet": "    @Test\n    public void typeVariable_with_type_parameters_return_type_of____typeVar_with_type_params____resolved_K_hence_to_Comparable_and_with_BoundedType() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"typeVar_with_type_params\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(Comparable.class);\n        GenericMetadataSupport extraInterface_0 = inferFrom(genericMetadata.extraInterfaces().get(0));\n        assertThat(extraInterface_0.rawType()).isEqualTo(Cloneable.class);\n    }",
        "begin_line": 145,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 170)",
            "(line 149,col 9)-(line 149,col 74)",
            "(line 150,col 9)-(line 150,col 102)",
            "(line 151,col 9)-(line 151,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.class_return_type_of____append____resolved_to_StringBuilder_and_type_arguments()",
        "snippet": "    @Test\n    public void class_return_type_of____append____resolved_to_StringBuilder_and_type_arguments() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(StringBuilder.class).resolveGenericReturnType(firstNamedMethod(\"append\", StringBuilder.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(StringBuilder.class);\n        assertThat(genericMetadata.actualTypeArguments()).isEmpty();\n    }",
        "begin_line": 154,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 154)",
            "(line 158,col 9)-(line 158,col 77)",
            "(line 159,col 9)-(line 159,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.paramType_with_wildcard_return_type_of____returning_wildcard_with_class_lower_bound____resolved_to_List_and_type_argument_to_Integer()",
        "snippet": "    @Test\n    public void paramType_with_wildcard_return_type_of____returning_wildcard_with_class_lower_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"returning_wildcard_with_class_lower_bound\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(List.class);\n        GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), \"E\");\n        assertThat(boundedType.firstBound()).isEqualTo(Integer.class);\n        assertThat(boundedType.interfaceBounds()).isEmpty();\n    }",
        "begin_line": 164,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 187)",
            "(line 168,col 9)-(line 168,col 68)",
            "(line 169,col 9)-(line 169,col 156)",
            "(line 170,col 9)-(line 170,col 70)",
            "(line 171,col 9)-(line 171,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_lower_bound____resolved_to_List_and_type_argument_to_Integer()",
        "snippet": "    @Test\n    public void paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_lower_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"returning_wildcard_with_typeVar_lower_bound\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(List.class);\n        GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), \"E\");\n\n        assertThat(inferFrom(boundedType.firstBound()).rawType()).isEqualTo(Comparable.class);\n        assertThat(boundedType.interfaceBounds()).contains(Cloneable.class);    }",
        "begin_line": 174,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 189)",
            "(line 178,col 9)-(line 178,col 68)",
            "(line 179,col 9)-(line 179,col 156)",
            "(line 181,col 9)-(line 181,col 94)",
            "(line 182,col 9)-(line 182,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_upper_bound____resolved_to_List_and_type_argument_to_Integer()",
        "snippet": "    @Test\n    public void paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_upper_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(\"returning_wildcard_with_typeVar_upper_bound\", GenericsNest.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(List.class);\n        GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), \"E\");\n\n        assertThat(inferFrom(boundedType.firstBound()).rawType()).isEqualTo(Comparable.class);\n        assertThat(boundedType.interfaceBounds()).contains(Cloneable.class);\n    }",
        "begin_line": 184,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 189)",
            "(line 188,col 9)-(line 188,col 68)",
            "(line 189,col 9)-(line 189,col 156)",
            "(line 191,col 9)-(line 191,col 94)",
            "(line 192,col 9)-(line 192,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariableValue(java.util.Map<java.lang.reflect.TypeVariable, java.lang.reflect.Type>, java.lang.String)",
        "snippet": "    private Type typeVariableValue(Map<TypeVariable, Type> typeVariables, String typeVariableName) {\n        for (Map.Entry<TypeVariable, Type> typeVariableTypeEntry : typeVariables.entrySet()) {\n            if (typeVariableTypeEntry.getKey().getName().equals(typeVariableName)) {\n                return typeVariableTypeEntry.getValue();\n            }\n        }\n\n        fail(\"'\" + typeVariableName + \"' was not found in \" + typeVariables);\n        return null; // unreachable\n    }",
        "begin_line": 197,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 202,col 9)",
            "(line 204,col 9)-(line 204,col 77)",
            "(line 205,col 9)-(line 205,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java",
        "signature": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.firstNamedMethod(java.lang.String, java.lang.Class<?>)",
        "snippet": "    private Method firstNamedMethod(String methodName, Class<?> clazz) {\n        for (Method method : clazz.getMethods()) {\n            boolean protect_against_different_jdk_ordering_avoiding_bridge_methods = !method.isBridge();\n            if (method.getName().contains(methodName) && protect_against_different_jdk_ordering_avoiding_bridge_methods) {\n                return method;\n            }\n        }\n        throw new IllegalStateException(\"The method : '\" + methodName + \"' do not exist in '\" + clazz.getSimpleName() + \"'\");\n    }",
        "begin_line": 208,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 214,col 9)",
            "(line 215,col 9)-(line 215,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.WhiteboxTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/WhiteboxTest.java",
        "signature": "org.mockito.internal.util.reflection.WhiteboxTest.shouldSetInternalStateOnHierarchy()",
        "snippet": "    @Test\n    public void shouldSetInternalStateOnHierarchy() {\n        //given\n        DummyClassForTests dummy = new DummyClassForTests();\n        //when\n        Whitebox.setInternalState(dummy, \"somePrivateField\", \"cool!\");\n        //then\n        Object internalState = org.powermock.reflect.Whitebox.getInternalState(dummy, \"somePrivateField\");\n        assertEquals(\"cool!\", internalState);\n    }",
        "begin_line": 12,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 60)",
            "(line 17,col 9)-(line 17,col 70)",
            "(line 19,col 9)-(line 19,col 106)",
            "(line 20,col 9)-(line 20,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.WhiteboxTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/WhiteboxTest.java",
        "signature": "org.mockito.internal.util.reflection.WhiteboxTest.shouldGetInternalStateFromHierarchy()",
        "snippet": "    @Test\n    public void shouldGetInternalStateFromHierarchy() {\n        //given\n        DummyClassForTests dummy = new DummyClassForTests();\n        org.powermock.reflect.Whitebox.setInternalState(dummy, \"somePrivateField\", \"boo!\");\n        //when\n        Object internalState = Whitebox.getInternalState(dummy, \"somePrivateField\");\n        //then\n        assertEquals(\"boo!\", internalState);\n    }",
        "begin_line": 23,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 60)",
            "(line 27,col 9)-(line 27,col 91)",
            "(line 29,col 9)-(line 29,col 84)",
            "(line 31,col 9)-(line 31,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_keep_same_instance_if_field_initialized()",
        "snippet": "    @Test\n    public void should_keep_same_instance_if_field_initialized() throws Exception {\n        final StaticClass backupInstance = alreadyInstantiated;\n        FieldInitializer fieldInitializer = new FieldInitializer(this, field(\"alreadyInstantiated\"));\n        FieldInitializationReport report = fieldInitializer.initialize();\n\n        assertSame(backupInstance, report.fieldInstance());\n        assertFalse(report.fieldWasInitialized());\n        assertFalse(report.fieldWasInitializedUsingContructorArgs());\n    }",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)",
            "(line 40,col 9)-(line 40,col 101)",
            "(line 41,col 9)-(line 41,col 73)",
            "(line 43,col 9)-(line 43,col 59)",
            "(line 44,col 9)-(line 44,col 50)",
            "(line 45,col 9)-(line 45,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_instantiate_field_when_type_has_no_constructor()",
        "snippet": "    @Test\n    public void should_instantiate_field_when_type_has_no_constructor() throws Exception {\n        FieldInitializer fieldInitializer = new FieldInitializer(this, field(\"noConstructor\"));\n        FieldInitializationReport report = fieldInitializer.initialize();\n\n        assertNotNull(report.fieldInstance());\n        assertTrue(report.fieldWasInitialized());\n        assertFalse(report.fieldWasInitializedUsingContructorArgs());\n    }",
        "begin_line": 48,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 95)",
            "(line 51,col 9)-(line 51,col 73)",
            "(line 53,col 9)-(line 53,col 46)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_instantiate_field_with_default_constructor()",
        "snippet": "    @Test\n    public void should_instantiate_field_with_default_constructor() throws Exception {\n        FieldInitializer fieldInitializer = new FieldInitializer(this, field(\"defaultConstructor\"));\n        FieldInitializationReport report = fieldInitializer.initialize();\n\n        assertNotNull(report.fieldInstance());\n        assertTrue(report.fieldWasInitialized());\n        assertFalse(report.fieldWasInitializedUsingContructorArgs());\n    }",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 100)",
            "(line 61,col 9)-(line 61,col 73)",
            "(line 63,col 9)-(line 63,col 46)",
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_instantiate_field_with_private_default_constructor()",
        "snippet": "    @Test\n    public void should_instantiate_field_with_private_default_constructor() throws Exception {\n        FieldInitializer fieldInitializer = new FieldInitializer(this, field(\"privateDefaultConstructor\"));\n        FieldInitializationReport report = fieldInitializer.initialize();\n\n        assertNotNull(report.fieldInstance());\n        assertTrue(report.fieldWasInitialized());\n        assertFalse(report.fieldWasInitializedUsingContructorArgs());\n    }",
        "begin_line": 68,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 107)",
            "(line 71,col 9)-(line 71,col 73)",
            "(line 73,col 9)-(line 73,col 46)",
            "(line 74,col 9)-(line 74,col 49)",
            "(line 75,col 9)-(line 75,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_fail_to_instantiate_field_if_no_default_constructor()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_to_instantiate_field_if_no_default_constructor() throws Exception {\n        FieldInitializer fieldInitializer = new FieldInitializer(this, field(\"noDefaultConstructor\"));\n        fieldInitializer.initialize();\n    }",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 102)",
            "(line 81,col 9)-(line 81,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_fail_to_instantiate_field_if_default_constructor_throws_exception()",
        "snippet": "    @Test\n    public void should_fail_to_instantiate_field_if_default_constructor_throws_exception() throws Exception {\n        FieldInitializer fieldInitializer = new FieldInitializer(this, field(\"throwingExDefaultConstructor\"));\n        try {\n            fieldInitializer.initialize();\n            fail();\n        } catch (MockitoException e) {\n            InvocationTargetException ite = (InvocationTargetException) e.getCause();\n            assertTrue(ite.getTargetException() instanceof NullPointerException);\n            assertEquals(\"business logic failed\", ite.getTargetException().getMessage());\n        }\n    }",
        "begin_line": 84,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 110)",
            "(line 87,col 9)-(line 94,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_fail_for_abstract_field()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_for_abstract_field() throws Exception {\n        new FieldInitializer(this, field(\"abstractType\"));\n    }",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_not_fail_if_abstract_field_is_instantiated()",
        "snippet": "    @Test\n    public void should_not_fail_if_abstract_field_is_instantiated() throws Exception {\n        new FieldInitializer(this, field(\"instantiatedAbstractType\"));\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_fail_for_interface_field()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_for_interface_field() throws Exception {\n        new FieldInitializer(this, field(\"interfaceType\"));\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_not_fail_if_interface_field_is_instantiated()",
        "snippet": "    @Test\n    public void should_not_fail_if_interface_field_is_instantiated() throws Exception {\n        new FieldInitializer(this, field(\"instantiatedInterfaceType\"));\n    }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_fail_for_local_type_field()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_for_local_type_field() throws Exception {\n        // when\n        class LocalType { }\n\n        class TheTestWithLocalType {\n            @InjectMocks LocalType field;\n        }\n\n        TheTestWithLocalType testWithLocalType = new TheTestWithLocalType();\n\n        // when\n        new FieldInitializer(testWithLocalType, testWithLocalType.getClass().getDeclaredField(\"field\"));\n    }",
        "begin_line": 117,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 27)",
            "(line 122,col 9)-(line 124,col 9)",
            "(line 126,col 9)-(line 126,col 76)",
            "(line 129,col 9)-(line 129,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_not_fail_if_local_type_field_is_instantiated()",
        "snippet": "    @Test\n    public void should_not_fail_if_local_type_field_is_instantiated() throws Exception {\n        // when\n        class LocalType { }\n\n        class TheTestWithLocalType {\n            @InjectMocks LocalType field = new LocalType();\n        }\n\n        TheTestWithLocalType testWithLocalType = new TheTestWithLocalType();\n\n        // when\n        new FieldInitializer(testWithLocalType, testWithLocalType.getClass().getDeclaredField(\"field\"));\n    }",
        "begin_line": 132,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 27)",
            "(line 137,col 9)-(line 139,col 9)",
            "(line 141,col 9)-(line 141,col 76)",
            "(line 144,col 9)-(line 144,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_fail_for_inner_class_field()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_for_inner_class_field() throws Exception {\n        new FieldInitializer(this, field(\"innerClassType\"));\n    }",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.should_not_fail_if_inner_class_field_is_instantiated()",
        "snippet": "    @Test\n    public void should_not_fail_if_inner_class_field_is_instantiated() throws Exception {\n        new FieldInitializer(this, field(\"instantiatedInnerClassType\"));\n    }",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.can_instantiate_class_with_parameterized_constructor()",
        "snippet": "    @Test\n    public void can_instantiate_class_with_parameterized_constructor() throws Exception {\n        ConstructorArgumentResolver resolver = given(mock(ConstructorArgumentResolver.class).resolveTypeInstances(any(Class[].class)))\n                        .willReturn(new Object[]{null}).getMock();\n\n        new FieldInitializer(this, field(\"noDefaultConstructor\"), resolver).initialize();\n\n        assertNotNull(noDefaultConstructor);\n    }",
        "begin_line": 157,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 160,col 66)",
            "(line 162,col 9)-(line 162,col 89)",
            "(line 164,col 9)-(line 164,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.field(java.lang.String)",
        "snippet": "    private Field field(String fieldName) throws NoSuchFieldException {\n        return this.getClass().getDeclaredField(fieldName);\n    }",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.StaticClassWithDefaultConstructor.StaticClassWithDefaultConstructor()",
        "snippet": "        StaticClassWithDefaultConstructor() { }",
        "begin_line": 175,
        "end_line": 175,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.StaticClassWithPrivateDefaultConstructor.StaticClassWithPrivateDefaultConstructor()",
        "snippet": "        private StaticClassWithPrivateDefaultConstructor() { }",
        "begin_line": 179,
        "end_line": 179,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.StaticClassWithoutDefaultConstructor.StaticClassWithoutDefaultConstructor(java.lang.String)",
        "snippet": "        private StaticClassWithoutDefaultConstructor(String param) { }",
        "begin_line": 183,
        "end_line": 183,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.StaticClassThrowingExceptionDefaultConstructor.StaticClassThrowingExceptionDefaultConstructor()",
        "snippet": "        StaticClassThrowingExceptionDefaultConstructor() throws Exception {\n            throw new NullPointerException(\"business logic failed\");\n        }",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 188,col 13)-(line 188,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.AbstractStaticClass.AbstractStaticClass()",
        "snippet": "        public AbstractStaticClass() {}",
        "begin_line": 193,
        "end_line": 193,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldInitializerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldInitializerTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldInitializerTest.InnerClassType.InnerClassType()",
        "snippet": "        InnerClassType() { }",
        "begin_line": 204,
        "end_line": 204,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldReaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldReaderTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldReaderTest.shouldKnowWhenNull()",
        "snippet": "    @Test\n    public void shouldKnowWhenNull() throws Exception {\n        //when\n        FieldReader reader = new FieldReader(new Foo(), Foo.class.getDeclaredField(\"isNull\"));\n        //then\n        assertTrue(reader.isNull());\n    }",
        "begin_line": 18,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 94)",
            "(line 23,col 9)-(line 23,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.util.reflection.FieldReaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/util/reflection/FieldReaderTest.java",
        "signature": "org.mockito.internal.util.reflection.FieldReaderTest.shouldKnowWhenNotNull()",
        "snippet": "    @Test\n    public void shouldKnowWhenNotNull() throws Exception {\n        //when\n        FieldReader reader = new FieldReader(new Foo(), Foo.class.getDeclaredField(\"notNull\"));\n        //then\n        assertFalse(reader.isNull());\n    }",
        "begin_line": 26,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 95)",
            "(line 31,col 9)-(line 31,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.HandyReturnValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/HandyReturnValuesTest.java",
        "signature": "org.mockito.internal.progress.HandyReturnValuesTest.should_not_return_null_for_primitives_wrappers()",
        "snippet": "    @Test\n    public void should_not_return_null_for_primitives_wrappers() throws Exception {\n        assertNotNull(h.returnFor(Boolean.class));\n        assertNotNull(h.returnFor(Character.class));\n        assertNotNull(h.returnFor(Byte.class));\n        assertNotNull(h.returnFor(Short.class));\n        assertNotNull(h.returnFor(Integer.class));\n        assertNotNull(h.returnFor(Long.class));\n        assertNotNull(h.returnFor(Float.class));\n        assertNotNull(h.returnFor(Double.class));\n    }",
        "begin_line": 18,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 50)",
            "(line 21,col 9)-(line 21,col 52)",
            "(line 22,col 9)-(line 22,col 47)",
            "(line 23,col 9)-(line 23,col 48)",
            "(line 24,col 9)-(line 24,col 50)",
            "(line 25,col 9)-(line 25,col 47)",
            "(line 26,col 9)-(line 26,col 48)",
            "(line 27,col 9)-(line 27,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.HandyReturnValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/HandyReturnValuesTest.java",
        "signature": "org.mockito.internal.progress.HandyReturnValuesTest.should_not_return_null_for_primitives()",
        "snippet": "    @Test\n    public void should_not_return_null_for_primitives() throws Exception {\n        assertNotNull(h.returnFor(boolean.class));\n        assertNotNull(h.returnFor(char.class));\n        assertNotNull(h.returnFor(byte.class));\n        assertNotNull(h.returnFor(short.class));\n        assertNotNull(h.returnFor(int.class));\n        assertNotNull(h.returnFor(long.class));\n        assertNotNull(h.returnFor(float.class));\n        assertNotNull(h.returnFor(double.class));\n    }",
        "begin_line": 30,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 50)",
            "(line 33,col 9)-(line 33,col 47)",
            "(line 34,col 9)-(line 34,col 47)",
            "(line 35,col 9)-(line 35,col 48)",
            "(line 36,col 9)-(line 36,col 46)",
            "(line 37,col 9)-(line 37,col 47)",
            "(line 38,col 9)-(line 38,col 48)",
            "(line 39,col 9)-(line 39,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.HandyReturnValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/HandyReturnValuesTest.java",
        "signature": "org.mockito.internal.progress.HandyReturnValuesTest.should_default_values_for_primitive()",
        "snippet": "    @Test public void should_default_values_for_primitive() {\n        assertThat(h.returnFor(boolean.class)).isFalse();\n        assertThat(h.returnFor(char.class)).isEqualTo('\\u0000');\n        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);\n        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);\n        assertThat(h.returnFor(int.class)).isEqualTo(0);\n        assertThat(h.returnFor(long.class)).isEqualTo(0L);\n        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);\n        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);\n    }",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 57)",
            "(line 44,col 9)-(line 44,col 64)",
            "(line 45,col 9)-(line 45,col 64)",
            "(line 46,col 9)-(line 46,col 66)",
            "(line 47,col 9)-(line 47,col 56)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 61)",
            "(line 50,col 9)-(line 50,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.HandyReturnValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/HandyReturnValuesTest.java",
        "signature": "org.mockito.internal.progress.HandyReturnValuesTest.should_return_null_for_everything_else()",
        "snippet": "    @Test\n    public void should_return_null_for_everything_else() throws Exception {\n        assertNull(h.returnFor(Object.class));\n        assertNull(h.returnFor(String.class));\n        assertNull(h.returnFor(null));\n    }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 46)",
            "(line 56,col 9)-(line 56,col 46)",
            "(line 57,col 9)-(line 57,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.HandyReturnValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/HandyReturnValuesTest.java",
        "signature": "org.mockito.internal.progress.HandyReturnValuesTest.should_return_handy_value_for_instances()",
        "snippet": "    @Test\n    public void should_return_handy_value_for_instances() throws Exception {\n        assertNull(h.returnFor(new Object()));\n        assertNull(h.returnFor((Object) null));\n        \n        assertNotNull(h.returnFor(10.0));\n        assertNotNull(h.returnFor(Boolean.FALSE));\n    }",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 46)",
            "(line 63,col 9)-(line 63,col 47)",
            "(line 65,col 9)-(line 65,col 41)",
            "(line 66,col 9)-(line 66,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.VerificationModeBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/VerificationModeBuilder.java",
        "signature": "org.mockito.internal.progress.VerificationModeBuilder.inOrder()",
        "snippet": "    public Times inOrder() {\n        return VerificationModeFactory.times(times);\n    }",
        "begin_line": 16,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.VerificationModeBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/VerificationModeBuilder.java",
        "signature": "org.mockito.internal.progress.VerificationModeBuilder.times(int)",
        "snippet": "    public VerificationModeBuilder times(int times) {\n        this.times = times;\n        return this;\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 27)",
            "(line 22,col 9)-(line 22,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.TimesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/TimesTest.java",
        "signature": "org.mockito.internal.progress.TimesTest.shouldNotAllowNegativeNumberOfInvocations()",
        "snippet": "    @Test\n    public void shouldNotAllowNegativeNumberOfInvocations() throws Exception {\n        try {\n            VerificationModeFactory.times(-50);\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Negative value is not allowed here\", e.getMessage());\n        }\n    }",
        "begin_line": 15,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 22,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgressTest.after()",
        "snippet": "    @After\n    public void after() {\n        this.resetState();\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgressTest.shouldShareState()",
        "snippet": "    @Test\n    public void shouldShareState() throws Exception {\n        //given\n        ThreadSafeMockingProgress p = new ThreadSafeMockingProgress();\n        p.verificationStarted(new DummyVerificationMode());\n\n        //then\n        p = new ThreadSafeMockingProgress();\n        assertNotNull(p.pullVerificationMode());\n    }",
        "begin_line": 24,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 70)",
            "(line 28,col 9)-(line 28,col 59)",
            "(line 31,col 9)-(line 31,col 44)",
            "(line 32,col 9)-(line 32,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.ThreadSafeMockingProgressTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java",
        "signature": "org.mockito.internal.progress.ThreadSafeMockingProgressTest.shouldKnowWhenVerificationHasStarted()",
        "snippet": "    @Test\n    public void shouldKnowWhenVerificationHasStarted() throws Exception {\n        //given\n        verify(mock(List.class));\n        ThreadSafeMockingProgress p = new ThreadSafeMockingProgress();\n\n        //then\n        assertNotNull(p.pullVerificationMode());\n    }",
        "begin_line": 35,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 33)",
            "(line 39,col 9)-(line 39,col 70)",
            "(line 42,col 9)-(line 42,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        mockingProgress = new MockingProgressImpl();\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.shouldStartVerificationAndPullVerificationMode()",
        "snippet": "    @Test\n    public void shouldStartVerificationAndPullVerificationMode() throws Exception {\n        assertNull(mockingProgress.pullVerificationMode());\n        \n        VerificationMode mode = VerificationModeFactory.times(19);\n        \n        mockingProgress.verificationStarted(mode);\n        \n        assertSame(mode, mockingProgress.pullVerificationMode());\n        \n        assertNull(mockingProgress.pullVerificationMode());\n    }",
        "begin_line": 33,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 59)",
            "(line 37,col 9)-(line 37,col 66)",
            "(line 39,col 9)-(line 39,col 50)",
            "(line 41,col 9)-(line 41,col 65)",
            "(line 43,col 9)-(line 43,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.shouldCheckIfVerificationWasFinished()",
        "snippet": "    @Test\n    public void shouldCheckIfVerificationWasFinished() throws Exception {\n        mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n        try {\n            mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 46,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 83)",
            "(line 49,col 9)-(line 52,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.shouldNotifyListenerWhenMockingStarted()",
        "snippet": "    @Test\n    public void shouldNotifyListenerWhenMockingStarted() throws Exception {\n        //given\n        MockingStartedListener listener = mock(MockingStartedListener.class);\n        mockingProgress.setListener(listener);\n\n        //when\n        mockingProgress.mockingStarted(\"foo\", List.class);\n\n        //then\n        verify(listener).mockingStarted(eq(\"foo\"), eq(List.class));\n    }",
        "begin_line": 55,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 77)",
            "(line 59,col 9)-(line 59,col 46)",
            "(line 62,col 9)-(line 62,col 58)",
            "(line 65,col 9)-(line 65,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.MockingProgressImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/MockingProgressImplTest.java",
        "signature": "org.mockito.internal.progress.MockingProgressImplTest.shouldNotifyListenerSafely()",
        "snippet": "    @Test\n    public void shouldNotifyListenerSafely() throws Exception {\n        //when\n        mockingProgress.setListener(null);\n\n        //then no exception is thrown:\n        mockingProgress.mockingStarted(null, null);\n    }",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 42)",
            "(line 74,col 9)-(line 74,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.AtLeastTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/AtLeastTest.java",
        "signature": "org.mockito.internal.progress.AtLeastTest.shouldNotAllowNegativeNumberOfMinimumInvocations()",
        "snippet": "    @Test\n    public void shouldNotAllowNegativeNumberOfMinimumInvocations() throws Exception {\n        try {\n            VerificationModeFactory.atLeast(-50);\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"Negative value is not allowed here\", e.getMessage());\n        }\n    }",
        "begin_line": 14,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 21,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.progress.AtLeastTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/progress/AtLeastTest.java",
        "signature": "org.mockito.internal.progress.AtLeastTest.shouldAllowZeroInvocations()",
        "snippet": "    @Test\n    public void shouldAllowZeroInvocations() throws Exception {\n        VerificationModeFactory.atLeast(0);\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldBeEqual()",
        "snippet": "    @Test\n    public void shouldBeEqual() {\n        assertEquals(new Equals(null), new Equals(null));\n        assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));\n        assertFalse(new Equals(null).equals(null));\n        assertFalse(new Equals(null).equals(\"Test\"));\n        assertEquals(1, new Equals(null).hashCode());\n    }",
        "begin_line": 14,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 57)",
            "(line 17,col 9)-(line 17,col 77)",
            "(line 18,col 9)-(line 18,col 51)",
            "(line 19,col 9)-(line 19,col 53)",
            "(line 20,col 9)-(line 20,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldArraysBeEqual()",
        "snippet": "    @Test\n    public void shouldArraysBeEqual() {\n        assertTrue(new Equals(new int[] {1, 2}).matches(new int[] {1, 2}));\n        assertFalse(new Equals(new Object[] {\"1\"}).matches(new Object[] {\"1.0\"}));\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 75)",
            "(line 26,col 9)-(line 26,col 82)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeWithExtraTypeInfo()",
        "snippet": "    @Test\n    public void shouldDescribeWithExtraTypeInfo() throws Exception {\n        String descStr = describe(new Equals(100).withExtraTypeInfo());\n        \n        assertEquals(\"(Integer) 100\", descStr);\n    }",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 71)",
            "(line 33,col 9)-(line 33,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeWithExtraTypeInfoOfLong()",
        "snippet": "    @Test\n    public void shouldDescribeWithExtraTypeInfoOfLong() throws Exception {\n        String descStr = describe(new Equals(100L).withExtraTypeInfo());\n        \n        assertEquals(\"(Long) 100\", descStr);\n    }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 72)",
            "(line 40,col 9)-(line 40,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldAppendQuotingForString()",
        "snippet": "    @Test\n    public void shouldAppendQuotingForString() {\n        String descStr = describe(new Equals(\"str\"));\n        \n        assertEquals(\"\\\"str\\\"\", descStr);\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 53)",
            "(line 47,col 9)-(line 47,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldAppendQuotingForChar()",
        "snippet": "    @Test\n    public void shouldAppendQuotingForChar() {\n        String descStr = describe(new Equals('s'));\n        \n        assertEquals(\"'s'\", descStr);\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 51)",
            "(line 54,col 9)-(line 54,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeUsingToString()",
        "snippet": "    @Test\n    public void shouldDescribeUsingToString() {\n        String descStr = describe(new Equals(100));\n        \n        assertEquals(\"100\", descStr);\n    }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 51)",
            "(line 61,col 9)-(line 61,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldDescribeNull()",
        "snippet": "    @Test\n    public void shouldDescribeNull() {\n        String descStr = describe(new Equals(null));\n        \n        assertEquals(\"null\", descStr);\n    }",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 52)",
            "(line 68,col 9)-(line 68,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldMatchTypes()",
        "snippet": "    @Test\n    public void shouldMatchTypes() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals = new Equals(10);\n        \n        //then\n        assertTrue(equals.typeMatches(10));\n        assertFalse(equals.typeMatches(10L));\n    }",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 61)",
            "(line 77,col 9)-(line 77,col 43)",
            "(line 78,col 9)-(line 78,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldMatchTypesSafelyWhenActualIsNull()",
        "snippet": "    @Test\n    public void shouldMatchTypesSafelyWhenActualIsNull() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals = new Equals(null);\n        \n        //then\n        assertFalse(equals.typeMatches(10));\n    }",
        "begin_line": 81,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 63)",
            "(line 87,col 9)-(line 87,col 44)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualsTest.java",
        "signature": "org.mockito.internal.matchers.EqualsTest.shouldMatchTypesSafelyWhenGivenIsNull()",
        "snippet": "    @Test\n    public void shouldMatchTypesSafelyWhenGivenIsNull() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals = new Equals(10);\n        \n        //then\n        assertFalse(equals.typeMatches(null));\n    }",
        "begin_line": 90,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 61)",
            "(line 96,col 9)-(line 96,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualityTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualityTest.java",
        "signature": "org.mockito.internal.matchers.EqualityTest.shouldKnowIfObjectsAreEqual()",
        "snippet": "    @Test\n    public void shouldKnowIfObjectsAreEqual() throws Exception {\n        int[] arr = new int[] {1, 2};\n        assertTrue(areEqual(arr, arr));\n        assertTrue(areEqual(new int[] {1, 2}, new int[] {1, 2}));\n        assertTrue(areEqual(new Double[] {1.0}, new Double[] {1.0}));\n        assertTrue(areEqual(new String[0], new String[0]));\n        assertTrue(areEqual(new Object[10], new Object[10]));\n        assertTrue(areEqual(new int[] {1}, new Integer[] {1}));\n        assertTrue(areEqual(new Object[] {\"1\"}, new String[] {\"1\"}));\n        Object badequals=new BadEquals();\n        assertTrue(areEqual(badequals,badequals));\n\n        assertFalse(areEqual(new Object[9], new Object[10]));\n        assertFalse(areEqual(new int[] {1, 2}, new int[] {1}));\n        assertFalse(areEqual(new int[] {1}, new double[] {1.0}));\n    }",
        "begin_line": 13,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 37)",
            "(line 16,col 9)-(line 16,col 39)",
            "(line 17,col 9)-(line 17,col 65)",
            "(line 18,col 9)-(line 18,col 69)",
            "(line 19,col 9)-(line 19,col 59)",
            "(line 20,col 9)-(line 20,col 61)",
            "(line 21,col 9)-(line 21,col 63)",
            "(line 22,col 9)-(line 22,col 69)",
            "(line 23,col 9)-(line 23,col 41)",
            "(line 24,col 9)-(line 24,col 50)",
            "(line 26,col 9)-(line 26,col 61)",
            "(line 27,col 9)-(line 27,col 63)",
            "(line 28,col 9)-(line 28,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.EqualityTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/EqualityTest.java",
        "signature": "org.mockito.internal.matchers.EqualityTest.BadEquals.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object oth) {\n            throw new RuntimeException();\n        }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.CapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/CapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.CapturingMatcherTest.should_capture_arguments()",
        "snippet": "    @Test\n    public void should_capture_arguments() throws Exception {\n        //given\n        CapturingMatcher m = new CapturingMatcher();\n        \n        //when\n        m.captureFrom(\"foo\");\n        m.captureFrom(\"bar\");\n        \n        //then\n        Assertions.assertThat(m.getAllValues()).containsSequence(\"foo\", \"bar\");\n    }",
        "begin_line": 15,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 52)",
            "(line 21,col 9)-(line 21,col 29)",
            "(line 22,col 9)-(line 22,col 29)",
            "(line 25,col 9)-(line 25,col 79)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.CapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/CapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.CapturingMatcherTest.should_know_last_captured_value()",
        "snippet": "    @Test\n    public void should_know_last_captured_value() throws Exception {\n        //given\n        CapturingMatcher m = new CapturingMatcher();\n        \n        //when\n        m.captureFrom(\"foo\");\n        m.captureFrom(\"bar\");\n        \n        //then\n        assertEquals(\"bar\", m.getLastValue());\n    }",
        "begin_line": 28,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 52)",
            "(line 34,col 9)-(line 34,col 29)",
            "(line 35,col 9)-(line 35,col 29)",
            "(line 38,col 9)-(line 38,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.CapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/CapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.CapturingMatcherTest.should_scream_when_nothing_yet_captured()",
        "snippet": "    @Test\n    public void should_scream_when_nothing_yet_captured() throws Exception {\n        //given\n        CapturingMatcher m = new CapturingMatcher();\n\n        try {\n            //when\n            m.getLastValue();\n            //then\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 41,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 52)",
            "(line 46,col 9)-(line 51,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.VarargCapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.VarargCapturingMatcherTest.should_capture_simple_arguments()",
        "snippet": "    @Test\n    public void should_capture_simple_arguments() throws Exception {\n        //given\n        VarargCapturingMatcher m = new VarargCapturingMatcher();\n\n        //when\n        m.captureFrom(\"foo\");\n        m.captureFrom(\"bar\");\n\n        //then\n        assertThat(m.getAllVarargs()).containsSequence(asList(\"foo\"), asList(\"bar\"));\n    }",
        "begin_line": 12,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 64)",
            "(line 18,col 9)-(line 18,col 29)",
            "(line 19,col 9)-(line 19,col 29)",
            "(line 22,col 9)-(line 22,col 85)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.VarargCapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.VarargCapturingMatcherTest.should_know_last_captured_vararg()",
        "snippet": "    @Test\n    public void should_know_last_captured_vararg() throws Exception {\n        //given\n        VarargCapturingMatcher m = new VarargCapturingMatcher();\n\n        //when\n        m.captureFrom(new Object[] { \"foo\", \"bar\" });\n        m.captureFrom(new Object[] { \"fool\", \"bard\" });\n\n        //then\n        assertThat(m.getLastVarargs()).containsSequence(\"fool\", \"bard\");\n    }",
        "begin_line": 25,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 64)",
            "(line 31,col 9)-(line 31,col 53)",
            "(line 32,col 9)-(line 32,col 55)",
            "(line 35,col 9)-(line 35,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.VarargCapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.VarargCapturingMatcherTest.can_capture_primitive_varargs()",
        "snippet": "    @Test\n    public void can_capture_primitive_varargs() throws Exception {\n        //given\n        VarargCapturingMatcher m = new VarargCapturingMatcher();\n\n        //when\n        m.captureFrom(new int[] { 1, 2, 3 });\n\n        //then\n        assertThat(m.getLastVarargs()).containsSequence(1, 2, 3);\n    }",
        "begin_line": 38,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 64)",
            "(line 44,col 9)-(line 44,col 45)",
            "(line 47,col 9)-(line 47,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.VarargCapturingMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java",
        "signature": "org.mockito.internal.matchers.VarargCapturingMatcherTest.should_scream_when_nothing_yet_captured()",
        "snippet": "    @Test\n    public void should_scream_when_nothing_yet_captured() throws Exception {\n        //given\n        VarargCapturingMatcher m = new VarargCapturingMatcher();\n\n        try {\n            //when\n            m.getLastVarargs();\n            //then\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 50,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 64)",
            "(line 55,col 9)-(line 60,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldMatchTypesWhenActualMatcherHasCorrectType()",
        "snippet": "    @Test\n    public void shouldMatchTypesWhenActualMatcherHasCorrectType() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals10 = new Equals(10);\n        LocalizedMatcher m = new LocalizedMatcher((Matcher) equals10);\n        \n        //then\n        assertTrue(m.typeMatches(10));\n        assertFalse(m.typeMatches(10L));\n    }",
        "begin_line": 14,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 63)",
            "(line 18,col 9)-(line 18,col 70)",
            "(line 21,col 9)-(line 21,col 38)",
            "(line 22,col 9)-(line 22,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldNotMatchTypesWhenActualMatcherDoesNotHaveCorrectType()",
        "snippet": "    @Test\n    public void shouldNotMatchTypesWhenActualMatcherDoesNotHaveCorrectType() throws Exception {\n        //when\n        LocalizedMatcher m = new LocalizedMatcher(Any.ANY);\n        \n        //then\n        assertFalse(m.typeMatches(10));\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 59)",
            "(line 31,col 9)-(line 31,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldDescribeWithTypeInfoWhenActualMatcherHasCorrectType()",
        "snippet": "    @Test\n    public void shouldDescribeWithTypeInfoWhenActualMatcherHasCorrectType() throws Exception {\n        //when\n        ContainsExtraTypeInformation equals10 = new Equals(10);\n        LocalizedMatcher m = new LocalizedMatcher((Matcher) equals10);\n        \n        //then\n        assertEquals(\"(Integer) 10\", describe(m.withExtraTypeInfo()));\n    }",
        "begin_line": 34,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 63)",
            "(line 38,col 9)-(line 38,col 70)",
            "(line 41,col 9)-(line 41,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldNotDescribeWithTypeInfoWhenActualMatcherDoesNotHaveCorrectType()",
        "snippet": "    @Test\n    public void shouldNotDescribeWithTypeInfoWhenActualMatcherDoesNotHaveCorrectType() throws Exception {\n        //when\n        LocalizedMatcher m = new LocalizedMatcher(Any.ANY);\n        \n        //then\n        assertSame(m, m.withExtraTypeInfo());\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 59)",
            "(line 50,col 9)-(line 50,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.LocalizedMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/LocalizedMatcherTest.java",
        "signature": "org.mockito.internal.matchers.LocalizedMatcherTest.shouldDelegateToCapturingMatcher()",
        "snippet": "    @Test\n    public void shouldDelegateToCapturingMatcher() throws Exception {\n        //given\n        CapturingMatcher capturingMatcher = new CapturingMatcher();\n        LocalizedMatcher m = new LocalizedMatcher(capturingMatcher);\n        \n        //when\n        m.captureFrom(\"boo\");\n        \n        //then\n        assertEquals(\"boo\", capturingMatcher.getLastValue());\n    }",
        "begin_line": 53,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 67)",
            "(line 57,col 9)-(line 57,col 68)",
            "(line 60,col 9)-(line 60,col 29)",
            "(line 63,col 9)-(line 63,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithString()",
        "snippet": "    @Test\n    public void sameToStringWithString() {\n        assertEquals(\"same(\\\"X\\\")\", describe(new Same(\"X\")));\n\n    }",
        "begin_line": 18,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.nullToString()",
        "snippet": "    @Test\n    public void nullToString() {\n        assertEquals(\"isNull()\", describe(Null.NULL));\n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.notNullToString()",
        "snippet": "    @Test\n    public void notNullToString() {\n        assertEquals(\"notNull()\", describe(NotNull.NOT_NULL));\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.anyToString()",
        "snippet": "    @Test\n    public void anyToString() {\n        assertEquals(\"<any>\", describe(Any.ANY));\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithChar()",
        "snippet": "    @Test\n    public void sameToStringWithChar() {\n        assertEquals(\"same('x')\", describe(new Same('x')));\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithObject()",
        "snippet": "    @Test\n    public void sameToStringWithObject() {\n        Object o = new Object() {\n            @Override\n            public String toString() {\n                return \"X\";\n            }\n        };\n        assertEquals(\"same(X)\", describe(new Same(o)));\n    }",
        "begin_line": 44,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 51,col 10)",
            "(line 52,col 9)-(line 52,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.Anonymous-00e095a3-d4f2-4735-be8c-d3536a72a024.toString()",
        "snippet": "            @Override\n            public String toString() {\n                return \"X\";\n            }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 17)-(line 49,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithString()",
        "snippet": "    @Test\n    public void equalsToStringWithString() {\n        assertEquals(\"\\\"X\\\"\", describe(new Equals(\"X\")));\n\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithChar()",
        "snippet": "    @Test\n    public void equalsToStringWithChar() {\n        assertEquals(\"'x'\", describe(new Equals('x')));\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithObject()",
        "snippet": "    @Test\n    public void equalsToStringWithObject() {\n        Object o = new Object() {\n            @Override\n            public String toString() {\n                return \"X\";\n            }\n        };\n        assertEquals(\"X\", describe(new Equals(o)));\n    }",
        "begin_line": 66,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 73,col 10)",
            "(line 74,col 9)-(line 74,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.Anonymous-35e1d597-14a5-4f79-a41e-76123a6cb914.toString()",
        "snippet": "            @Override\n            public String toString() {\n                return \"X\";\n            }",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 17)-(line 71,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.orToString()",
        "snippet": "    @Test\n    public void orToString() {\n        List<Matcher> matchers = new ArrayList<Matcher>();\n        matchers.add(new Equals(1));\n        matchers.add(new Equals(2));\n        assertEquals(\"or(1, 2)\", describe(new Or(matchers)));\n    }",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 58)",
            "(line 80,col 9)-(line 80,col 36)",
            "(line 81,col 9)-(line 81,col 36)",
            "(line 82,col 9)-(line 82,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.notToString()",
        "snippet": "    @Test\n    public void notToString() {\n        assertEquals(\"not(1)\", describe(new Not(new Equals(1))));\n    }",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.andToString()",
        "snippet": "    @Test\n    public void andToString() {\n        List<Matcher> matchers = new ArrayList<Matcher>();\n        matchers.add(new Equals(1));\n        matchers.add(new Equals(2));\n        assertEquals(\"and(1, 2)\", describe(new And(matchers)));\n    }",
        "begin_line": 90,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 58)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 94,col 9)-(line 94,col 36)",
            "(line 95,col 9)-(line 95,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.startsWithToString()",
        "snippet": "    @Test\n    public void startsWithToString() {\n        assertEquals(\"startsWith(\\\"AB\\\")\", describe(new StartsWith(\"AB\")));\n    }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.endsWithToString()",
        "snippet": "    @Test\n    public void endsWithToString() {\n        assertEquals(\"endsWith(\\\"AB\\\")\", describe(new EndsWith(\"AB\")));\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.containsToString()",
        "snippet": "    @Test\n    public void containsToString() {\n        assertEquals(\"contains(\\\"AB\\\")\", describe(new Contains(\"AB\")));\n    }",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.findToString()",
        "snippet": "    @Test\n    public void findToString() {\n        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", describe(new Find(\"\\\\s+\")));\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersToStringTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersToStringTest.java",
        "signature": "org.mockito.internal.matchers.MatchersToStringTest.matchesToString()",
        "snippet": "    @Test\n    public void matchesToString() {\n        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", describe(new Matches(\"\\\\s+\")));\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testLessThan()",
        "snippet": "    @Test\n    public void testLessThan() {\n        test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testGreaterThan()",
        "snippet": "    @Test\n    public void testGreaterThan() {\n        test(new GreaterThan<String>(\"b\"), false, true, false, \"gt\");\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testLessOrEqual()",
        "snippet": "    @Test\n    public void testLessOrEqual() {\n        test(new LessOrEqual<String>(\"b\"), true, false, true, \"leq\");\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testGreaterOrEqual()",
        "snippet": "    @Test\n    public void testGreaterOrEqual() {\n        test(new GreaterOrEqual<String>(\"b\"), false, true, true, \"geq\");\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.testCompareEqual()",
        "snippet": "    @Test\n    public void testCompareEqual() {\n        test(new CompareEqual<String>(\"b\"), false, false, true, \"cmpEq\");\n\n        // Make sure it works when equals provide a different result than compare\n        CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(new BigDecimal(\"5.00\"));\n        assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n    }",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 73)",
            "(line 40,col 9)-(line 40,col 94)",
            "(line 41,col 9)-(line 41,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.ComparableMatchersTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/ComparableMatchersTest.java",
        "signature": "org.mockito.internal.matchers.ComparableMatchersTest.test(org.mockito.internal.matchers.CompareTo<java.lang.String>, boolean, boolean, boolean, java.lang.String)",
        "snippet": "    private void test(CompareTo<String> compareTo, boolean lower, boolean higher,\n            boolean equals, String name) {\n\n        assertEquals(lower, compareTo.matches(\"a\"));\n        assertEquals(equals, compareTo.matches(\"b\"));\n        assertEquals(higher, compareTo.matches(\"c\"));\n\n        assertEquals(name + \"(b)\", describe(compareTo));\n    }",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 52)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 49,col 53)",
            "(line 51,col 9)-(line 51,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetArgumentsLine()",
        "snippet": "    @Test\n    public void shouldGetArgumentsLine() {\n        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1), new Equals(2)), new PrintSettings());\n        assertEquals(\"(1, 2);\", line);\n    }",
        "begin_line": 19,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 120)",
            "(line 22,col 9)-(line 22,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetArgumentsBlock()",
        "snippet": "    @Test\n    public void shouldGetArgumentsBlock() {\n        String line = printer.getArgumentsBlock((List) Arrays.asList(new Equals(1), new Equals(2)), new PrintSettings());\n        assertEquals(\"(\\n    1,\\n    2\\n);\", line);\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 121)",
            "(line 28,col 9)-(line 28,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldDescribeTypeInfoOnlyMarkedMatchers()",
        "snippet": "    @Test\n    public void shouldDescribeTypeInfoOnlyMarkedMatchers() {\n        //when\n        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseMatchers(1));\n        //then\n        assertEquals(\"(1, (Integer) 2);\", line);\n    }",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 134)",
            "(line 36,col 9)-(line 36,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetVerboseArgumentsInBlock()",
        "snippet": "    @Test\n    public void shouldGetVerboseArgumentsInBlock() {\n        //when\n        String line = printer.getArgumentsBlock((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseMatchers(0, 1));\n        //then\n        assertEquals(\"(\\n    (Long) 1,\\n    (Integer) 2\\n);\", line);\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 138)",
            "(line 44,col 9)-(line 44,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.MatchersPrinterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/MatchersPrinterTest.java",
        "signature": "org.mockito.internal.matchers.MatchersPrinterTest.shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose()",
        "snippet": "    @Test\n    public void shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose() {\n        //when\n        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), NotNull.NOT_NULL), PrintSettings.verboseMatchers(0));\n        //then\n        assertEquals(\"((Long) 1, notNull());\", line);\n    }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 137)",
            "(line 52,col 9)-(line 52,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testname()",
        "snippet": "    @Test\n    public void testname() throws Exception {\n        \n    }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.TestObject()",
        "snippet": "        public TestObject() {\n        }",
        "begin_line": 31,
        "end_line": 32,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.TestObject(int)",
        "snippet": "        public TestObject(int a) {\n            this.a = a;\n        }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 13)-(line 34,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestObject rhs = (TestObject) o;\n            return (a == rhs.a);\n        }",
        "begin_line": 36,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 37,col 13)-(line 37,col 44)",
            "(line 38,col 13)-(line 38,col 43)",
            "(line 39,col 13)-(line 41,col 13)",
            "(line 43,col 13)-(line 43,col 44)",
            "(line 44,col 13)-(line 44,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.hashCode()",
        "snippet": "        public int hashCode() {\n            return super.hashCode();\n        }",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 13)-(line 47,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.setA(int)",
        "snippet": "        public void setA(int a) {\n            this.a = a;\n        }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject.getA()",
        "snippet": "        public int getA() {\n            return a;\n        }",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 13)-(line 55,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.TestSubObject()",
        "snippet": "        public TestSubObject() {\n            super(0);\n        }",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 13)-(line 62,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.TestSubObject(int, int)",
        "snippet": "        public TestSubObject(int a, int b) {\n            super(a);\n            this.b = b;\n        }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 13)-(line 65,col 21)",
            "(line 66,col 13)-(line 66,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == null) { return false; }\n            if (o == this) { return true; }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n\n            TestSubObject rhs = (TestSubObject) o;\n            return super.equals(o) && (b == rhs.b);\n        }",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 69,col 13)-(line 69,col 44)",
            "(line 70,col 13)-(line 70,col 43)",
            "(line 71,col 13)-(line 73,col 13)",
            "(line 75,col 13)-(line 75,col 50)",
            "(line 76,col 13)-(line 76,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 13)-(line 79,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.setB(int)",
        "snippet": "        public void setB(int b) {\n            this.b = b;\n        }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 13)-(line 83,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestSubObject.getB()",
        "snippet": "        public int getB() {\n            return b;\n        }",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 13)-(line 87,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestEmptySubObject.TestEmptySubObject(int)",
        "snippet": "        public TestEmptySubObject(int a) {\n            super(a);\n        }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 13)-(line 93,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject.TestTSubObject(int, int)",
        "snippet": "        public TestTSubObject(int a, int t) {\n            super(a);\n            this.t = t;\n        }",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 101,col 13)-(line 101,col 21)",
            "(line 102,col 13)-(line 102,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTTSubObject.TestTTSubObject(int, int, int)",
        "snippet": "        public TestTTSubObject(int a, int t, int tt) {\n            super(a, t);\n            this.tt = tt;\n        }",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 110,col 13)-(line 110,col 24)",
            "(line 111,col 13)-(line 111,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTTLeafObject.TestTTLeafObject(int, int, int, int)",
        "snippet": "        public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n            super(a, t, tt);\n            this.leafValue = leafValue;\n        }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 119,col 13)-(line 119,col 28)",
            "(line 120,col 13)-(line 120,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject2.TestTSubObject2(int, int)",
        "snippet": "        public TestTSubObject2(int a, int t) {\n            super(a);\n        }",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 127,col 13)-(line 127,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject2.getT()",
        "snippet": "        public int getT() {\n            return t;\n        }",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 13)-(line 130,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestTSubObject2.setT(int)",
        "snippet": "        public void setT(int t) {\n            this.t = t;\n        }",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 13)-(line 133,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEquals()",
        "snippet": "    @Test public void testReflectionEquals() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));\n        o2.setA(4);\n        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n    }",
        "begin_line": 137,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 42)",
            "(line 139,col 9)-(line 139,col 42)",
            "(line 140,col 9)-(line 140,col 59)",
            "(line 141,col 9)-(line 141,col 60)",
            "(line 142,col 9)-(line 142,col 19)",
            "(line 143,col 9)-(line 143,col 59)",
            "(line 145,col 9)-(line 145,col 62)",
            "(line 147,col 9)-(line 147,col 62)",
            "(line 148,col 9)-(line 148,col 62)",
            "(line 149,col 9)-(line 149,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionHierarchyEquals()",
        "snippet": "    @Test public void testReflectionHierarchyEquals() {\n        testReflectionHierarchyEquals(false);\n        testReflectionHierarchyEquals(true);\n        // Transients\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n    }",
        "begin_line": 152,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 45)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 156,col 9)-(line 156,col 125)",
            "(line 157,col 9)-(line 157,col 126)",
            "(line 158,col 9)-(line 158,col 126)",
            "(line 159,col 9)-(line 159,col 126)",
            "(line 160,col 9)-(line 160,col 126)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionHierarchyEquals(boolean)",
        "snippet": "  private void testReflectionHierarchyEquals(boolean testTransients) {\n        TestObject to1 = new TestObject(4);\n        TestObject to1Bis = new TestObject(4);\n        TestObject to1Ter = new TestObject(4);\n        TestObject to2 = new TestObject(5);\n        TestEmptySubObject teso = new TestEmptySubObject(4);\n        TestTSubObject ttso = new TestTSubObject(4, 1);\n        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);\n        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);\n        TestSubObject tso1 = new TestSubObject(1, 4);\n        TestSubObject tso1bis = new TestSubObject(1, 4);\n        TestSubObject tso1ter = new TestSubObject(1, 4);\n        TestSubObject tso2 = new TestSubObject(2, 5);\n\n        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);\n        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);\n\n        // More sanity checks:\n\n        // same values\n        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));\n        // same super values, diff sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));\n        // diff super values, same sub values\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));\n\n        // mix super and sub types: equals\n        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert\n\n        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert\n        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert\n\n        // mix super and sub types: NOT equals\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));\n\n        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));\n        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));\n    }",
        "begin_line": 163,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 43)",
            "(line 165,col 9)-(line 165,col 46)",
            "(line 166,col 9)-(line 166,col 46)",
            "(line 167,col 9)-(line 167,col 43)",
            "(line 168,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 55)",
            "(line 170,col 9)-(line 170,col 61)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 53)",
            "(line 173,col 9)-(line 173,col 56)",
            "(line 174,col 9)-(line 174,col 56)",
            "(line 175,col 9)-(line 175,col 53)",
            "(line 177,col 9)-(line 177,col 112)",
            "(line 178,col 9)-(line 178,col 119)",
            "(line 183,col 9)-(line 183,col 79)",
            "(line 184,col 9)-(line 184,col 119)",
            "(line 186,col 9)-(line 186,col 120)",
            "(line 187,col 9)-(line 187,col 120)",
            "(line 189,col 9)-(line 189,col 120)",
            "(line 190,col 9)-(line 190,col 120)",
            "(line 193,col 9)-(line 193,col 78)",
            "(line 194,col 9)-(line 194,col 78)",
            "(line 196,col 9)-(line 196,col 69)",
            "(line 197,col 9)-(line 197,col 69)",
            "(line 199,col 9)-(line 199,col 70)",
            "(line 200,col 9)-(line 200,col 70)",
            "(line 202,col 9)-(line 202,col 71)",
            "(line 203,col 9)-(line 203,col 71)",
            "(line 206,col 9)-(line 206,col 114)",
            "(line 207,col 9)-(line 207,col 114)",
            "(line 209,col 9)-(line 209,col 113)",
            "(line 210,col 9)-(line 210,col 113)",
            "(line 212,col 9)-(line 212,col 113)",
            "(line 213,col 9)-(line 213,col 113)",
            "(line 215,col 9)-(line 215,col 63)",
            "(line 216,col 9)-(line 216,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship(org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObject, boolean)",
        "snippet": "    private void testReflectionEqualsEquivalenceRelationship(\n        TestObject to,\n        TestObject toBis,\n        TestObject toTer,\n        TestObject to2,\n        TestObject oToChange,\n        boolean testTransients) {\n\n        // reflection test\n        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));\n\n        // symmetry test\n        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));\n\n        // transitive test\n        assertTrue(\n            EqualsBuilder.reflectionEquals(to, toBis, testTransients)\n                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)\n                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));\n\n        // consistency test\n        oToChange.setA(to.getA());\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());\n        }\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        oToChange.setA(to.getA() + 1);\n        if (oToChange instanceof TestSubObject) {\n            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);\n        }\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n\n        // non-null reference test\n        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));\n        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));\n        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));\n    }",
        "begin_line": 234,
        "end_line": 275,
        "comment": "\n     * Equivalence relationship tests inspired by \"Effective Java\":\n     * <ul>\n     * <li>reflection</li>\n     * <li>symmetry</li>\n     * <li>transitive</li>\n     * <li>consistency</li>\n     * <li>non-null reference</li>\n     * </ul>\n     * @param to a TestObject\n     * @param toBis a TestObject, equal to to and toTer\n     * @param toTer Left hand side, equal to to and toBis\n     * @param to2 a different TestObject\n     * @param oToChange a TestObject that will be changed\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 75)",
            "(line 244,col 9)-(line 244,col 77)",
            "(line 247,col 9)-(line 247,col 139)",
            "(line 250,col 9)-(line 253,col 78)",
            "(line 256,col 9)-(line 256,col 34)",
            "(line 257,col 9)-(line 259,col 9)",
            "(line 260,col 9)-(line 260,col 82)",
            "(line 261,col 9)-(line 261,col 82)",
            "(line 262,col 9)-(line 262,col 38)",
            "(line 263,col 9)-(line 265,col 9)",
            "(line 266,col 9)-(line 266,col 83)",
            "(line 267,col 9)-(line 267,col 83)",
            "(line 270,col 9)-(line 270,col 78)",
            "(line 271,col 9)-(line 271,col 79)",
            "(line 272,col 9)-(line 272,col 78)",
            "(line 273,col 9)-(line 273,col 79)",
            "(line 274,col 9)-(line 274,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testSuper()",
        "snippet": "    @Test public void testSuper() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n    }",
        "begin_line": 277,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 42)",
            "(line 279,col 9)-(line 279,col 42)",
            "(line 280,col 9)-(line 280,col 92)",
            "(line 281,col 9)-(line 281,col 94)",
            "(line 282,col 9)-(line 282,col 93)",
            "(line 283,col 9)-(line 283,col 94)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObject()",
        "snippet": "    @Test public void testObject() {\n        TestObject o1 = new TestObject(4);\n        TestObject o2 = new TestObject(5);\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        o2.setA(4);\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n\n        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());\n        \n        assertTrue(!new EqualsBuilder().append(o1, null).isEquals());\n        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n    }",
        "begin_line": 286,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 42)",
            "(line 288,col 9)-(line 288,col 42)",
            "(line 289,col 9)-(line 289,col 66)",
            "(line 290,col 9)-(line 290,col 67)",
            "(line 291,col 9)-(line 291,col 19)",
            "(line 292,col 9)-(line 292,col 66)",
            "(line 294,col 9)-(line 294,col 69)",
            "(line 296,col 9)-(line 296,col 69)",
            "(line 297,col 9)-(line 297,col 69)",
            "(line 298,col 9)-(line 298,col 88)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLong()",
        "snippet": "    @Test public void testLong() {\n        long o1 = 1L;\n        long o2 = 2L;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 301,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 21)",
            "(line 303,col 9)-(line 303,col 21)",
            "(line 304,col 9)-(line 304,col 66)",
            "(line 305,col 9)-(line 305,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testInt()",
        "snippet": "    @Test public void testInt() {\n        int o1 = 1;\n        int o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 308,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 19)",
            "(line 310,col 9)-(line 310,col 19)",
            "(line 311,col 9)-(line 311,col 66)",
            "(line 312,col 9)-(line 312,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShort()",
        "snippet": "    @Test public void testShort() {\n        short o1 = 1;\n        short o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 315,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 21)",
            "(line 317,col 9)-(line 317,col 21)",
            "(line 318,col 9)-(line 318,col 66)",
            "(line 319,col 9)-(line 319,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testChar()",
        "snippet": "    @Test public void testChar() {\n        char o1 = 1;\n        char o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 322,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 20)",
            "(line 324,col 9)-(line 324,col 20)",
            "(line 325,col 9)-(line 325,col 66)",
            "(line 326,col 9)-(line 326,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByte()",
        "snippet": "    @Test public void testByte() {\n        byte o1 = 1;\n        byte o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 20)",
            "(line 331,col 9)-(line 331,col 20)",
            "(line 332,col 9)-(line 332,col 66)",
            "(line 333,col 9)-(line 333,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDouble()",
        "snippet": "    @Test public void testDouble() {\n        double o1 = 1;\n        double o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 336,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 22)",
            "(line 338,col 9)-(line 338,col 22)",
            "(line 339,col 9)-(line 339,col 66)",
            "(line 340,col 9)-(line 340,col 67)",
            "(line 341,col 9)-(line 341,col 75)",
            "(line 342,col 9)-(line 342,col 82)",
            "(line 343,col 9)-(line 343,col 110)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloat()",
        "snippet": "    @Test public void testFloat() {\n        float o1 = 1;\n        float o2 = 2;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\n        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n    }",
        "begin_line": 346,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 21)",
            "(line 348,col 9)-(line 348,col 21)",
            "(line 349,col 9)-(line 349,col 66)",
            "(line 350,col 9)-(line 350,col 67)",
            "(line 351,col 9)-(line 351,col 74)",
            "(line 352,col 9)-(line 352,col 80)",
            "(line 353,col 9)-(line 353,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBigDecimal()",
        "snippet": "    @Test public void testBigDecimal() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 357,
        "end_line": 362,
        "comment": " https://issues.apache.org/jira/browse/LANG-393",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 46)",
            "(line 359,col 9)-(line 359,col 47)",
            "(line 360,col 9)-(line 360,col 66)",
            "(line 361,col 9)-(line 361,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testAccessors()",
        "snippet": "    @Test public void testAccessors() {\n        EqualsBuilder equalsBuilder = new EqualsBuilder();\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(true);\n        assertTrue(equalsBuilder.isEquals());\n        equalsBuilder.setEquals(false);\n        assertFalse(equalsBuilder.isEquals());\n    }",
        "begin_line": 364,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 58)",
            "(line 366,col 9)-(line 366,col 45)",
            "(line 367,col 9)-(line 367,col 38)",
            "(line 368,col 9)-(line 368,col 45)",
            "(line 369,col 9)-(line 369,col 39)",
            "(line 370,col 9)-(line 370,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBoolean()",
        "snippet": "    @Test public void testBoolean() {\n        boolean o1 = true;\n        boolean o2 = false;\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n    }",
        "begin_line": 373,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 26)",
            "(line 375,col 9)-(line 375,col 27)",
            "(line 376,col 9)-(line 376,col 66)",
            "(line 377,col 9)-(line 377,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObjectArray()",
        "snippet": "    @Test public void testObjectArray() {\n        TestObject[] obj1 = new TestObject[3];\n        obj1[0] = new TestObject(4);\n        obj1[1] = new TestObject(5);\n        obj1[2] = null;\n        TestObject[] obj2 = new TestObject[3];\n        obj2[0] = new TestObject(4);\n        obj2[1] = new TestObject(5);\n        obj2[2] = null;\n        \n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1].setA(5);\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = obj1[1];\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[2] = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n                       \n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 380,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 381,col 9)-(line 381,col 46)",
            "(line 382,col 9)-(line 382,col 36)",
            "(line 383,col 9)-(line 383,col 36)",
            "(line 384,col 9)-(line 384,col 23)",
            "(line 385,col 9)-(line 385,col 46)",
            "(line 386,col 9)-(line 386,col 36)",
            "(line 387,col 9)-(line 387,col 36)",
            "(line 388,col 9)-(line 388,col 23)",
            "(line 390,col 9)-(line 390,col 70)",
            "(line 391,col 9)-(line 391,col 70)",
            "(line 392,col 9)-(line 392,col 70)",
            "(line 393,col 9)-(line 393,col 24)",
            "(line 394,col 9)-(line 394,col 71)",
            "(line 395,col 9)-(line 395,col 24)",
            "(line 396,col 9)-(line 396,col 70)",
            "(line 397,col 9)-(line 397,col 26)",
            "(line 398,col 9)-(line 398,col 71)",
            "(line 399,col 9)-(line 399,col 23)",
            "(line 400,col 9)-(line 400,col 70)",
            "(line 402,col 9)-(line 402,col 20)",
            "(line 403,col 9)-(line 403,col 71)",
            "(line 404,col 9)-(line 404,col 20)",
            "(line 405,col 9)-(line 405,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLongArray()",
        "snippet": "    @Test public void testLongArray() {\n        long[] obj1 = new long[2];\n        obj1[0] = 5L;\n        obj1[1] = 6L;\n        long[] obj2 = new long[2];\n        obj2[0] = 5L;\n        obj2[1] = 6L;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 408,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 34)",
            "(line 410,col 9)-(line 410,col 21)",
            "(line 411,col 9)-(line 411,col 21)",
            "(line 412,col 9)-(line 412,col 34)",
            "(line 413,col 9)-(line 413,col 21)",
            "(line 414,col 9)-(line 414,col 21)",
            "(line 415,col 9)-(line 415,col 70)",
            "(line 416,col 9)-(line 416,col 70)",
            "(line 417,col 9)-(line 417,col 20)",
            "(line 418,col 9)-(line 418,col 71)",
            "(line 420,col 9)-(line 420,col 20)",
            "(line 421,col 9)-(line 421,col 71)",
            "(line 422,col 9)-(line 422,col 20)",
            "(line 423,col 9)-(line 423,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testIntArray()",
        "snippet": "    @Test public void testIntArray() {\n        int[] obj1 = new int[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        int[] obj2 = new int[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 426,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 32)",
            "(line 428,col 9)-(line 428,col 20)",
            "(line 429,col 9)-(line 429,col 20)",
            "(line 430,col 9)-(line 430,col 32)",
            "(line 431,col 9)-(line 431,col 20)",
            "(line 432,col 9)-(line 432,col 20)",
            "(line 433,col 9)-(line 433,col 70)",
            "(line 434,col 9)-(line 434,col 70)",
            "(line 435,col 9)-(line 435,col 20)",
            "(line 436,col 9)-(line 436,col 71)",
            "(line 438,col 9)-(line 438,col 20)",
            "(line 439,col 9)-(line 439,col 71)",
            "(line 440,col 9)-(line 440,col 20)",
            "(line 441,col 9)-(line 441,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShortArray()",
        "snippet": "    @Test public void testShortArray() {\n        short[] obj1 = new short[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        short[] obj2 = new short[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 444,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 36)",
            "(line 446,col 9)-(line 446,col 20)",
            "(line 447,col 9)-(line 447,col 20)",
            "(line 448,col 9)-(line 448,col 36)",
            "(line 449,col 9)-(line 449,col 20)",
            "(line 450,col 9)-(line 450,col 20)",
            "(line 451,col 9)-(line 451,col 70)",
            "(line 452,col 9)-(line 452,col 70)",
            "(line 453,col 9)-(line 453,col 20)",
            "(line 454,col 9)-(line 454,col 71)",
            "(line 456,col 9)-(line 456,col 20)",
            "(line 457,col 9)-(line 457,col 71)",
            "(line 458,col 9)-(line 458,col 20)",
            "(line 459,col 9)-(line 459,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testCharArray()",
        "snippet": "    @Test public void testCharArray() {\n        char[] obj1 = new char[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        char[] obj2 = new char[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 462,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 34)",
            "(line 464,col 9)-(line 464,col 20)",
            "(line 465,col 9)-(line 465,col 20)",
            "(line 466,col 9)-(line 466,col 34)",
            "(line 467,col 9)-(line 467,col 20)",
            "(line 468,col 9)-(line 468,col 20)",
            "(line 469,col 9)-(line 469,col 70)",
            "(line 470,col 9)-(line 470,col 70)",
            "(line 471,col 9)-(line 471,col 20)",
            "(line 472,col 9)-(line 472,col 71)",
            "(line 474,col 9)-(line 474,col 20)",
            "(line 475,col 9)-(line 475,col 71)",
            "(line 476,col 9)-(line 476,col 20)",
            "(line 477,col 9)-(line 477,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByteArray()",
        "snippet": "    @Test public void testByteArray() {\n        byte[] obj1 = new byte[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        byte[] obj2 = new byte[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 480,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 481,col 9)-(line 481,col 34)",
            "(line 482,col 9)-(line 482,col 20)",
            "(line 483,col 9)-(line 483,col 20)",
            "(line 484,col 9)-(line 484,col 34)",
            "(line 485,col 9)-(line 485,col 20)",
            "(line 486,col 9)-(line 486,col 20)",
            "(line 487,col 9)-(line 487,col 70)",
            "(line 488,col 9)-(line 488,col 70)",
            "(line 489,col 9)-(line 489,col 20)",
            "(line 490,col 9)-(line 490,col 71)",
            "(line 492,col 9)-(line 492,col 20)",
            "(line 493,col 9)-(line 493,col 71)",
            "(line 494,col 9)-(line 494,col 20)",
            "(line 495,col 9)-(line 495,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDoubleArray()",
        "snippet": "    @Test public void testDoubleArray() {\n        double[] obj1 = new double[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        double[] obj2 = new double[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 498,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 499,col 9)-(line 499,col 38)",
            "(line 500,col 9)-(line 500,col 20)",
            "(line 501,col 9)-(line 501,col 20)",
            "(line 502,col 9)-(line 502,col 38)",
            "(line 503,col 9)-(line 503,col 20)",
            "(line 504,col 9)-(line 504,col 20)",
            "(line 505,col 9)-(line 505,col 70)",
            "(line 506,col 9)-(line 506,col 70)",
            "(line 507,col 9)-(line 507,col 20)",
            "(line 508,col 9)-(line 508,col 71)",
            "(line 510,col 9)-(line 510,col 20)",
            "(line 511,col 9)-(line 511,col 71)",
            "(line 512,col 9)-(line 512,col 20)",
            "(line 513,col 9)-(line 513,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloatArray()",
        "snippet": "    @Test public void testFloatArray() {\n        float[] obj1 = new float[2];\n        obj1[0] = 5;\n        obj1[1] = 6;\n        float[] obj2 = new float[2];\n        obj2[0] = 5;\n        obj2[1] = 6;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 516,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 517,col 9)-(line 517,col 36)",
            "(line 518,col 9)-(line 518,col 20)",
            "(line 519,col 9)-(line 519,col 20)",
            "(line 520,col 9)-(line 520,col 36)",
            "(line 521,col 9)-(line 521,col 20)",
            "(line 522,col 9)-(line 522,col 20)",
            "(line 523,col 9)-(line 523,col 70)",
            "(line 524,col 9)-(line 524,col 70)",
            "(line 525,col 9)-(line 525,col 20)",
            "(line 526,col 9)-(line 526,col 71)",
            "(line 528,col 9)-(line 528,col 20)",
            "(line 529,col 9)-(line 529,col 71)",
            "(line 530,col 9)-(line 530,col 20)",
            "(line 531,col 9)-(line 531,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBooleanArray()",
        "snippet": "    @Test public void testBooleanArray() {\n        boolean[] obj1 = new boolean[2];\n        obj1[0] = true;\n        obj1[1] = false;\n        boolean[] obj2 = new boolean[2];\n        obj2[0] = true;\n        obj2[1] = false;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n\n        obj2 = null;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n        obj1 = null;\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 534,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 40)",
            "(line 536,col 9)-(line 536,col 23)",
            "(line 537,col 9)-(line 537,col 24)",
            "(line 538,col 9)-(line 538,col 40)",
            "(line 539,col 9)-(line 539,col 23)",
            "(line 540,col 9)-(line 540,col 24)",
            "(line 541,col 9)-(line 541,col 70)",
            "(line 542,col 9)-(line 542,col 70)",
            "(line 543,col 9)-(line 543,col 23)",
            "(line 544,col 9)-(line 544,col 71)",
            "(line 546,col 9)-(line 546,col 20)",
            "(line 547,col 9)-(line 547,col 71)",
            "(line 548,col 9)-(line 548,col 20)",
            "(line 549,col 9)-(line 549,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiLongArray()",
        "snippet": "    @Test public void testMultiLongArray() {\n        long[][] array1 = new long[2][2];\n        long[][] array2 = new long[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 552,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 553,col 9)-(line 553,col 41)",
            "(line 554,col 9)-(line 554,col 41)",
            "(line 555,col 9)-(line 560,col 9)",
            "(line 561,col 9)-(line 561,col 74)",
            "(line 562,col 9)-(line 562,col 74)",
            "(line 563,col 9)-(line 563,col 25)",
            "(line 564,col 9)-(line 564,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiIntArray()",
        "snippet": "    @Test public void testMultiIntArray() {\n        int[][] array1 = new int[2][2];\n        int[][] array2 = new int[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 567,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 568,col 9)-(line 568,col 39)",
            "(line 569,col 9)-(line 569,col 39)",
            "(line 570,col 9)-(line 575,col 9)",
            "(line 576,col 9)-(line 576,col 74)",
            "(line 577,col 9)-(line 577,col 74)",
            "(line 578,col 9)-(line 578,col 25)",
            "(line 579,col 9)-(line 579,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiShortArray()",
        "snippet": "    @Test public void testMultiShortArray() {\n        short[][] array1 = new short[2][2];\n        short[][] array2 = new short[2][2];\n        for (short i = 0; i < array1.length; ++i) {\n            for (short j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 582,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 583,col 9)-(line 583,col 43)",
            "(line 584,col 9)-(line 584,col 43)",
            "(line 585,col 9)-(line 590,col 9)",
            "(line 591,col 9)-(line 591,col 74)",
            "(line 592,col 9)-(line 592,col 74)",
            "(line 593,col 9)-(line 593,col 25)",
            "(line 594,col 9)-(line 594,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiCharArray()",
        "snippet": "    @Test public void testMultiCharArray() {\n        char[][] array1 = new char[2][2];\n        char[][] array2 = new char[2][2];\n        for (char i = 0; i < array1.length; ++i) {\n            for (char j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 597,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 598,col 9)-(line 598,col 41)",
            "(line 599,col 9)-(line 599,col 41)",
            "(line 600,col 9)-(line 605,col 9)",
            "(line 606,col 9)-(line 606,col 74)",
            "(line 607,col 9)-(line 607,col 74)",
            "(line 608,col 9)-(line 608,col 25)",
            "(line 609,col 9)-(line 609,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiByteArray()",
        "snippet": "    @Test public void testMultiByteArray() {\n        byte[][] array1 = new byte[2][2];\n        byte[][] array2 = new byte[2][2];\n        for (byte i = 0; i < array1.length; ++i) {\n            for (byte j = 0; j < array1[0].length; j++) {\n                array1[i][j] = i;\n                array2[i][j] = i;\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 612,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 613,col 9)-(line 613,col 41)",
            "(line 614,col 9)-(line 614,col 41)",
            "(line 615,col 9)-(line 620,col 9)",
            "(line 621,col 9)-(line 621,col 74)",
            "(line 622,col 9)-(line 622,col 74)",
            "(line 623,col 9)-(line 623,col 25)",
            "(line 624,col 9)-(line 624,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiFloatArray()",
        "snippet": "    @Test public void testMultiFloatArray() {\n        float[][] array1 = new float[2][2];\n        float[][] array2 = new float[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 626,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 627,col 9)-(line 627,col 43)",
            "(line 628,col 9)-(line 628,col 43)",
            "(line 629,col 9)-(line 634,col 9)",
            "(line 635,col 9)-(line 635,col 74)",
            "(line 636,col 9)-(line 636,col 74)",
            "(line 637,col 9)-(line 637,col 25)",
            "(line 638,col 9)-(line 638,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiDoubleArray()",
        "snippet": "    @Test public void testMultiDoubleArray() {\n        double[][] array1 = new double[2][2];\n        double[][] array2 = new double[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 641,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 642,col 9)-(line 642,col 45)",
            "(line 643,col 9)-(line 643,col 45)",
            "(line 644,col 9)-(line 649,col 9)",
            "(line 650,col 9)-(line 650,col 74)",
            "(line 651,col 9)-(line 651,col 74)",
            "(line 652,col 9)-(line 652,col 25)",
            "(line 653,col 9)-(line 653,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiBooleanArray()",
        "snippet": "    @Test public void testMultiBooleanArray() {\n        boolean[][] array1 = new boolean[2][2];\n        boolean[][] array2 = new boolean[2][2];\n        for (int i = 0; i < array1.length; ++i) {\n            for (int j = 0; j < array1[0].length; j++) {\n                array1[i][j] = (i == 1) || (j == 1);\n                array2[i][j] = (i == 1) || (j == 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = false;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n        \n        // compare 1 dim to 2.\n        boolean[] array3 = new boolean[]{true, true};\n        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\n        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\n        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n    }",
        "begin_line": 656,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 47)",
            "(line 658,col 9)-(line 658,col 47)",
            "(line 659,col 9)-(line 664,col 9)",
            "(line 665,col 9)-(line 665,col 74)",
            "(line 666,col 9)-(line 666,col 74)",
            "(line 667,col 9)-(line 667,col 29)",
            "(line 668,col 9)-(line 668,col 75)",
            "(line 671,col 9)-(line 671,col 53)",
            "(line 672,col 9)-(line 672,col 75)",
            "(line 673,col 9)-(line 673,col 75)",
            "(line 674,col 9)-(line 674,col 75)",
            "(line 675,col 9)-(line 675,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testRaggedArray()",
        "snippet": "    @Test public void testRaggedArray() {\n        long[][] array1 = new long[2][];\n        long[][] array2 = new long[2][];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < array1[i].length; ++j) {\n                array1[i][j] = (i + 1) * (j + 1);\n                array2[i][j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        array1[1][1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 678,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 679,col 9)-(line 679,col 40)",
            "(line 680,col 9)-(line 680,col 40)",
            "(line 681,col 9)-(line 688,col 9)",
            "(line 689,col 9)-(line 689,col 74)",
            "(line 690,col 9)-(line 690,col 74)",
            "(line 691,col 9)-(line 691,col 25)",
            "(line 692,col 9)-(line 692,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMixedArray()",
        "snippet": "    @Test public void testMixedArray() {\n        Object[] array1 = new Object[2];\n        Object[] array2 = new Object[2];\n        for (int i = 0; i < array1.length; ++i) {\n            array1[i] = new long[2];\n            array2[i] = new long[2];\n            for (int j = 0; j < 2; ++j) {\n                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n            }\n        }\n        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n        ((long[]) array1[1])[1] = 0;\n        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n    }",
        "begin_line": 695,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 40)",
            "(line 697,col 9)-(line 697,col 40)",
            "(line 698,col 9)-(line 705,col 9)",
            "(line 706,col 9)-(line 706,col 74)",
            "(line 707,col 9)-(line 707,col 74)",
            "(line 708,col 9)-(line 708,col 36)",
            "(line 709,col 9)-(line 709,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObjectArrayHiddenByObject()",
        "snippet": "    @Test public void testObjectArrayHiddenByObject() {\n        TestObject[] array1 = new TestObject[2];\n        array1[0] = new TestObject(4);\n        array1[1] = new TestObject(5);\n        TestObject[] array2 = new TestObject[2];\n        array2[0] = new TestObject(4);\n        array2[1] = new TestObject(5);\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1].setA(6);\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 712,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 48)",
            "(line 714,col 9)-(line 714,col 38)",
            "(line 715,col 9)-(line 715,col 38)",
            "(line 716,col 9)-(line 716,col 48)",
            "(line 717,col 9)-(line 717,col 38)",
            "(line 718,col 9)-(line 718,col 38)",
            "(line 719,col 9)-(line 719,col 29)",
            "(line 720,col 9)-(line 720,col 29)",
            "(line 721,col 9)-(line 721,col 70)",
            "(line 722,col 9)-(line 722,col 72)",
            "(line 723,col 9)-(line 723,col 70)",
            "(line 724,col 9)-(line 724,col 72)",
            "(line 725,col 9)-(line 725,col 26)",
            "(line 726,col 9)-(line 726,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLongArrayHiddenByObject()",
        "snippet": "    @Test public void testLongArrayHiddenByObject() {\n        long[] array1 = new long[2];\n        array1[0] = 5L;\n        array1[1] = 6L;\n        long[] array2 = new long[2];\n        array2[0] = 5L;\n        array2[1] = 6L;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 729,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 730,col 9)-(line 730,col 36)",
            "(line 731,col 9)-(line 731,col 23)",
            "(line 732,col 9)-(line 732,col 23)",
            "(line 733,col 9)-(line 733,col 36)",
            "(line 734,col 9)-(line 734,col 23)",
            "(line 735,col 9)-(line 735,col 23)",
            "(line 736,col 9)-(line 736,col 29)",
            "(line 737,col 9)-(line 737,col 29)",
            "(line 738,col 9)-(line 738,col 70)",
            "(line 739,col 9)-(line 739,col 72)",
            "(line 740,col 9)-(line 740,col 70)",
            "(line 741,col 9)-(line 741,col 72)",
            "(line 742,col 9)-(line 742,col 22)",
            "(line 743,col 9)-(line 743,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testIntArrayHiddenByObject()",
        "snippet": "    @Test public void testIntArrayHiddenByObject() {\n        int[] array1 = new int[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        int[] array2 = new int[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 746,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 34)",
            "(line 748,col 9)-(line 748,col 22)",
            "(line 749,col 9)-(line 749,col 22)",
            "(line 750,col 9)-(line 750,col 34)",
            "(line 751,col 9)-(line 751,col 22)",
            "(line 752,col 9)-(line 752,col 22)",
            "(line 753,col 9)-(line 753,col 29)",
            "(line 754,col 9)-(line 754,col 29)",
            "(line 755,col 9)-(line 755,col 70)",
            "(line 756,col 9)-(line 756,col 72)",
            "(line 757,col 9)-(line 757,col 70)",
            "(line 758,col 9)-(line 758,col 72)",
            "(line 759,col 9)-(line 759,col 22)",
            "(line 760,col 9)-(line 760,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShortArrayHiddenByObject()",
        "snippet": "    @Test public void testShortArrayHiddenByObject() {\n        short[] array1 = new short[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        short[] array2 = new short[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 763,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 764,col 9)-(line 764,col 38)",
            "(line 765,col 9)-(line 765,col 22)",
            "(line 766,col 9)-(line 766,col 22)",
            "(line 767,col 9)-(line 767,col 38)",
            "(line 768,col 9)-(line 768,col 22)",
            "(line 769,col 9)-(line 769,col 22)",
            "(line 770,col 9)-(line 770,col 29)",
            "(line 771,col 9)-(line 771,col 29)",
            "(line 772,col 9)-(line 772,col 70)",
            "(line 773,col 9)-(line 773,col 72)",
            "(line 774,col 9)-(line 774,col 70)",
            "(line 775,col 9)-(line 775,col 72)",
            "(line 776,col 9)-(line 776,col 22)",
            "(line 777,col 9)-(line 777,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testCharArrayHiddenByObject()",
        "snippet": "    @Test public void testCharArrayHiddenByObject() {\n        char[] array1 = new char[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        char[] array2 = new char[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 780,
        "end_line": 795,
        "comment": "",
        "child_ranges": [
            "(line 781,col 9)-(line 781,col 36)",
            "(line 782,col 9)-(line 782,col 22)",
            "(line 783,col 9)-(line 783,col 22)",
            "(line 784,col 9)-(line 784,col 36)",
            "(line 785,col 9)-(line 785,col 22)",
            "(line 786,col 9)-(line 786,col 22)",
            "(line 787,col 9)-(line 787,col 29)",
            "(line 788,col 9)-(line 788,col 29)",
            "(line 789,col 9)-(line 789,col 70)",
            "(line 790,col 9)-(line 790,col 72)",
            "(line 791,col 9)-(line 791,col 70)",
            "(line 792,col 9)-(line 792,col 72)",
            "(line 793,col 9)-(line 793,col 22)",
            "(line 794,col 9)-(line 794,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByteArrayHiddenByObject()",
        "snippet": "    @Test public void testByteArrayHiddenByObject() {\n        byte[] array1 = new byte[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        byte[] array2 = new byte[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 797,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 798,col 9)-(line 798,col 36)",
            "(line 799,col 9)-(line 799,col 22)",
            "(line 800,col 9)-(line 800,col 22)",
            "(line 801,col 9)-(line 801,col 36)",
            "(line 802,col 9)-(line 802,col 22)",
            "(line 803,col 9)-(line 803,col 22)",
            "(line 804,col 9)-(line 804,col 29)",
            "(line 805,col 9)-(line 805,col 29)",
            "(line 806,col 9)-(line 806,col 70)",
            "(line 807,col 9)-(line 807,col 72)",
            "(line 808,col 9)-(line 808,col 70)",
            "(line 809,col 9)-(line 809,col 72)",
            "(line 810,col 9)-(line 810,col 22)",
            "(line 811,col 9)-(line 811,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDoubleArrayHiddenByObject()",
        "snippet": "    @Test public void testDoubleArrayHiddenByObject() {\n        double[] array1 = new double[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        double[] array2 = new double[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 814,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 815,col 9)-(line 815,col 40)",
            "(line 816,col 9)-(line 816,col 22)",
            "(line 817,col 9)-(line 817,col 22)",
            "(line 818,col 9)-(line 818,col 40)",
            "(line 819,col 9)-(line 819,col 22)",
            "(line 820,col 9)-(line 820,col 22)",
            "(line 821,col 9)-(line 821,col 29)",
            "(line 822,col 9)-(line 822,col 29)",
            "(line 823,col 9)-(line 823,col 70)",
            "(line 824,col 9)-(line 824,col 72)",
            "(line 825,col 9)-(line 825,col 70)",
            "(line 826,col 9)-(line 826,col 72)",
            "(line 827,col 9)-(line 827,col 22)",
            "(line 828,col 9)-(line 828,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloatArrayHiddenByObject()",
        "snippet": "    @Test public void testFloatArrayHiddenByObject() {\n        float[] array1 = new float[2];\n        array1[0] = 5;\n        array1[1] = 6;\n        float[] array2 = new float[2];\n        array2[0] = 5;\n        array2[1] = 6;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = 7;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 831,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 832,col 9)-(line 832,col 38)",
            "(line 833,col 9)-(line 833,col 22)",
            "(line 834,col 9)-(line 834,col 22)",
            "(line 835,col 9)-(line 835,col 38)",
            "(line 836,col 9)-(line 836,col 22)",
            "(line 837,col 9)-(line 837,col 22)",
            "(line 838,col 9)-(line 838,col 29)",
            "(line 839,col 9)-(line 839,col 29)",
            "(line 840,col 9)-(line 840,col 70)",
            "(line 841,col 9)-(line 841,col 72)",
            "(line 842,col 9)-(line 842,col 70)",
            "(line 843,col 9)-(line 843,col 72)",
            "(line 844,col 9)-(line 844,col 22)",
            "(line 845,col 9)-(line 845,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBooleanArrayHiddenByObject()",
        "snippet": "    @Test public void testBooleanArrayHiddenByObject() {\n        boolean[] array1 = new boolean[2];\n        array1[0] = true;\n        array1[1] = false;\n        boolean[] array2 = new boolean[2];\n        array2[0] = true;\n        array2[1] = false;\n        Object obj1 = array1;\n        Object obj2 = array2;\n        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n        array1[1] = true;\n        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n    }",
        "begin_line": 848,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 42)",
            "(line 850,col 9)-(line 850,col 25)",
            "(line 851,col 9)-(line 851,col 26)",
            "(line 852,col 9)-(line 852,col 42)",
            "(line 853,col 9)-(line 853,col 25)",
            "(line 854,col 9)-(line 854,col 26)",
            "(line 855,col 9)-(line 855,col 29)",
            "(line 856,col 9)-(line 856,col 29)",
            "(line 857,col 9)-(line 857,col 70)",
            "(line 858,col 9)-(line 858,col 72)",
            "(line 859,col 9)-(line 859,col 70)",
            "(line 860,col 9)-(line 860,col 72)",
            "(line 861,col 9)-(line 861,col 25)",
            "(line 862,col 9)-(line 862,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.TestACanEqualB(int)",
        "snippet": "        public TestACanEqualB(int a) {\n            this.a = a;\n        }",
        "begin_line": 868,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 869,col 13)-(line 869,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o instanceof TestACanEqualB) {\n                return this.a == ((TestACanEqualB) o).getA();\n            }\n            if (o instanceof TestBCanEqualA) {\n                return this.a == ((TestBCanEqualA) o).getB();\n            }\n            return false;\n        }",
        "begin_line": 872,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 873,col 13)-(line 875,col 13)",
            "(line 876,col 13)-(line 878,col 13)",
            "(line 879,col 13)-(line 881,col 13)",
            "(line 882,col 13)-(line 882,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }",
        "begin_line": 884,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 885,col 13)-(line 885,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestACanEqualB.getA()",
        "snippet": "        public int getA() {\n            return this.a;\n        }",
        "begin_line": 888,
        "end_line": 890,
        "comment": "",
        "child_ranges": [
            "(line 889,col 13)-(line 889,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.TestBCanEqualA(int)",
        "snippet": "        public TestBCanEqualA(int b) {\n            this.b = b;\n        }",
        "begin_line": 896,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 897,col 13)-(line 897,col 23)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o instanceof TestACanEqualB) {\n                return this.b == ((TestACanEqualB) o).getA();\n            }\n            if (o instanceof TestBCanEqualA) {\n                return this.b == ((TestBCanEqualA) o).getB();\n            }\n            return false;\n        }",
        "begin_line": 900,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 901,col 13)-(line 903,col 13)",
            "(line 904,col 13)-(line 906,col 13)",
            "(line 907,col 13)-(line 909,col 13)",
            "(line 910,col 13)-(line 910,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.hashCode()",
        "snippet": "        public int hashCode() {\n            return 1;\n        }        ",
        "begin_line": 912,
        "end_line": 914,
        "comment": "",
        "child_ranges": [
            "(line 913,col 13)-(line 913,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestBCanEqualA.getB()",
        "snippet": "        public int getB() {\n            return this.b;\n        }",
        "begin_line": 916,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 917,col 13)-(line 917,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testUnrelatedClasses()",
        "snippet": "    @Test public void testUnrelatedClasses() {\n        Object[] x = new Object[]{new TestACanEqualB(1)};\n        Object[] y = new Object[]{new TestBCanEqualA(1)};\n\n        // sanity checks:\n        assertTrue(Arrays.equals(x, x));\n        assertTrue(Arrays.equals(y, y));\n        assertTrue(Arrays.equals(x, y));\n        assertTrue(Arrays.equals(y, x));\n        // real tests:\n        assertTrue(x[0].equals(x[0]));\n        assertTrue(y[0].equals(y[0]));\n        assertTrue(x[0].equals(y[0]));\n        assertTrue(y[0].equals(x[0]));\n        assertTrue(new EqualsBuilder().append(x, x).isEquals());\n        assertTrue(new EqualsBuilder().append(y, y).isEquals());\n        assertTrue(new EqualsBuilder().append(x, y).isEquals());\n        assertTrue(new EqualsBuilder().append(y, x).isEquals());\n    }",
        "begin_line": 926,
        "end_line": 944,
        "comment": "\n     * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\n     * of each other and do not share a parent aside from Object.\n     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n     ",
        "child_ranges": [
            "(line 927,col 9)-(line 927,col 57)",
            "(line 928,col 9)-(line 928,col 57)",
            "(line 931,col 9)-(line 931,col 40)",
            "(line 932,col 9)-(line 932,col 40)",
            "(line 933,col 9)-(line 933,col 40)",
            "(line 934,col 9)-(line 934,col 40)",
            "(line 936,col 9)-(line 936,col 38)",
            "(line 937,col 9)-(line 937,col 38)",
            "(line 938,col 9)-(line 938,col 38)",
            "(line 939,col 9)-(line 939,col 38)",
            "(line 940,col 9)-(line 940,col 64)",
            "(line 941,col 9)-(line 941,col 64)",
            "(line 942,col 9)-(line 942,col 64)",
            "(line 943,col 9)-(line 943,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testNpeForNullElement()",
        "snippet": "    @Test public void testNpeForNullElement() {\n        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };\n        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };\n\n        // causes an NPE in 2.0 according to:\n        // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n        new EqualsBuilder().append(x1, x2);\n    }",
        "begin_line": 949,
        "end_line": 956,
        "comment": "\n     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n     ",
        "child_ranges": [
            "(line 950,col 9)-(line 950,col 76)",
            "(line 951,col 9)-(line 951,col 86)",
            "(line 955,col 9)-(line 955,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEqualsExcludeFields()",
        "snippet": "    @Test public void testReflectionEqualsExcludeFields() throws Exception {\n        TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\n        TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\n\n        // not equal when including all fields\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));\n\n        // doesn't barf on null, empty array, or non-existent field, but still tests as not equal\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"xxx\"}));\n\n        // not equal if only one of the differing fields excluded\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\"}));\n        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"three\"}));\n\n        // equal if both differing fields excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\", \"three\"}));\n\n        // still equal as long as both differing fields are among excluded\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\"}));\n        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\", \"xxx\"}));\n    }",
        "begin_line": 958,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 959,col 9)-(line 959,col 84)",
            "(line 960,col 9)-(line 960,col 84)",
            "(line 963,col 9)-(line 963,col 60)",
            "(line 966,col 9)-(line 966,col 77)",
            "(line 967,col 9)-(line 967,col 77)",
            "(line 968,col 9)-(line 968,col 82)",
            "(line 971,col 9)-(line 971,col 82)",
            "(line 972,col 9)-(line 972,col 84)",
            "(line 975,col 9)-(line 975,col 90)",
            "(line 978,col 9)-(line 978,col 97)",
            "(line 979,col 9)-(line 979,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java",
        "signature": "org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int)",
        "snippet": "        public TestObjectWithMultipleFields(int one, int two, int three) {\n            this.one = new TestObject(one);\n            this.two = new TestObject(two);\n            this.three = new TestObject(three);\n        }",
        "begin_line": 988,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 989,col 13)-(line 989,col 43)",
            "(line 990,col 13)-(line 990,col 43)",
            "(line 991,col 13)-(line 991,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        simpleMethod = new InvocationBuilder().mock(mock).simpleMethod().toInvocationMatcher();\n    }",
        "begin_line": 31,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 95)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_be_a_citizen_of_hashes()",
        "snippet": "    @Test\n    public void should_be_a_citizen_of_hashes() throws Exception {\n        Invocation invocation = new InvocationBuilder().toInvocation();\n        Invocation invocationTwo = new InvocationBuilder().args(\"blah\").toInvocation();\n\n        Map map = new HashMap();\n        map.put(new InvocationMatcher(invocation), \"one\");\n        map.put(new InvocationMatcher(invocationTwo), \"two\");\n\n        assertEquals(2, map.size());\n    }",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 71)",
            "(line 39,col 9)-(line 39,col 87)",
            "(line 41,col 9)-(line 41,col 32)",
            "(line 42,col 9)-(line 42,col 58)",
            "(line 43,col 9)-(line 43,col 61)",
            "(line 45,col 9)-(line 45,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_not_equal_if_number_of_arguments_differ()",
        "snippet": "    @Test\n    public void should_not_equal_if_number_of_arguments_differ() throws Exception {\n        InvocationMatcher withOneArg = new InvocationMatcher(new InvocationBuilder().args(\"test\").toInvocation());\n        InvocationMatcher withTwoArgs = new InvocationMatcher(new InvocationBuilder().args(\"test\", 100).toInvocation());\n\n        assertFalse(withOneArg.equals(null));\n        assertFalse(withOneArg.equals(withTwoArgs));\n    }",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 114)",
            "(line 51,col 9)-(line 51,col 120)",
            "(line 53,col 9)-(line 53,col 45)",
            "(line 54,col 9)-(line 54,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_to_string_with_matchers()",
        "snippet": "    @Test\n    public void should_to_string_with_matchers() throws Exception {\n        Matcher m = NotNull.NOT_NULL;\n        InvocationMatcher notNull = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(m));\n        Matcher mTwo = new Equals('x');\n        InvocationMatcher equals = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(mTwo));\n\n        assertContains(\"simpleMethod(notNull())\", notNull.toString());\n        assertContains(\"simpleMethod('x')\", equals.toString());\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 37)",
            "(line 60,col 9)-(line 60,col 109)",
            "(line 61,col 9)-(line 61,col 39)",
            "(line 62,col 9)-(line 62,col 111)",
            "(line 64,col 9)-(line 64,col 70)",
            "(line 65,col 9)-(line 65,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_know_if_is_similar_to()",
        "snippet": "    @Test\n    public void should_know_if_is_similar_to() throws Exception {\n        Invocation same = new InvocationBuilder().mock(mock).simpleMethod().toInvocation();\n        assertTrue(simpleMethod.hasSimilarMethod(same));\n\n        Invocation different = new InvocationBuilder().mock(mock).differentMethod().toInvocation();\n        assertFalse(simpleMethod.hasSimilarMethod(different));\n    }",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 91)",
            "(line 71,col 9)-(line 71,col 56)",
            "(line 73,col 9)-(line 73,col 99)",
            "(line 74,col 9)-(line 74,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_not_be_similar_to_verified_invocation()",
        "snippet": "    @Test\n    public void should_not_be_similar_to_verified_invocation() throws Exception {\n        Invocation verified = new InvocationBuilder().simpleMethod().verified().toInvocation();\n        assertFalse(simpleMethod.hasSimilarMethod(verified));\n    }",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 95)",
            "(line 80,col 9)-(line 80,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_not_be_similar_if_mocks_are_different()",
        "snippet": "    @Test\n    public void should_not_be_similar_if_mocks_are_different() throws Exception {\n        Invocation onDifferentMock = new InvocationBuilder().simpleMethod().mock(\"different mock\").toInvocation();\n        assertFalse(simpleMethod.hasSimilarMethod(onDifferentMock));\n    }",
        "begin_line": 83,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 114)",
            "(line 86,col 9)-(line 86,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_not_be_similar_if_is_overloaded_but_used_with_the_same_arg()",
        "snippet": "    @Test\n    public void should_not_be_similar_if_is_overloaded_but_used_with_the_same_arg() throws Exception {\n        Method method = IMethods.class.getMethod(\"simpleMethod\", String.class);\n        Method overloadedMethod = IMethods.class.getMethod(\"simpleMethod\", Object.class);\n\n        String sameArg = \"test\";\n\n        InvocationMatcher invocation = new InvocationBuilder().method(method).arg(sameArg).toInvocationMatcher();\n        Invocation overloadedInvocation = new InvocationBuilder().method(overloadedMethod).arg(sameArg).toInvocation();\n\n        assertFalse(invocation.hasSimilarMethod(overloadedInvocation));\n    }",
        "begin_line": 89,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 79)",
            "(line 92,col 9)-(line 92,col 89)",
            "(line 94,col 9)-(line 94,col 32)",
            "(line 96,col 9)-(line 96,col 113)",
            "(line 97,col 9)-(line 97,col 119)",
            "(line 99,col 9)-(line 99,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_be_similar_if_is_overloaded_but_used_with_different_arg()",
        "snippet": "    @Test\n    public void should_be_similar_if_is_overloaded_but_used_with_different_arg() throws Exception {\n        Method method = IMethods.class.getMethod(\"simpleMethod\", String.class);\n        Method overloadedMethod = IMethods.class.getMethod(\"simpleMethod\", Object.class);\n\n        InvocationMatcher invocation = new InvocationBuilder().mock(mock).method(method).arg(\"foo\").toInvocationMatcher();\n        Invocation overloadedInvocation = new InvocationBuilder().mock(mock).method(overloadedMethod).arg(\"bar\").toInvocation();\n\n        assertTrue(invocation.hasSimilarMethod(overloadedInvocation));\n    }",
        "begin_line": 102,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 79)",
            "(line 105,col 9)-(line 105,col 89)",
            "(line 107,col 9)-(line 107,col 122)",
            "(line 108,col 9)-(line 108,col 128)",
            "(line 110,col 9)-(line 110,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_capture_arguments_from_invocation()",
        "snippet": "    @Test\n    public void should_capture_arguments_from_invocation() throws Exception {\n        //given\n        Invocation invocation = new InvocationBuilder().args(\"1\", 100).toInvocation();\n        CapturingMatcher capturingMatcher = new CapturingMatcher();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(\"1\"), capturingMatcher));\n\n        //when\n        invocationMatcher.captureArgumentsFrom(invocation);\n\n        //then\n        assertEquals(1, capturingMatcher.getAllValues().size());\n        assertEquals(100, capturingMatcher.getLastValue());\n    }",
        "begin_line": 113,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 86)",
            "(line 117,col 9)-(line 117,col 67)",
            "(line 118,col 9)-(line 118,col 130)",
            "(line 121,col 9)-(line 121,col 59)",
            "(line 124,col 9)-(line 124,col 64)",
            "(line 125,col 9)-(line 125,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_match_varargs_using_any_varargs()",
        "snippet": "    @Test\n    public void should_match_varargs_using_any_varargs() throws Exception {\n        //given\n        mock.varargs(\"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(AnyVararg.ANY_VARARG));\n\n        //when\n        boolean match = invocationMatcher.matches(invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 128,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 31)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 133,col 117)",
            "(line 136,col 9)-(line 136,col 62)",
            "(line 139,col 9)-(line 139,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_capture_varargs_as_vararg()",
        "snippet": "    @Test\n    public void should_capture_varargs_as_vararg() throws Exception {\n        //given\n        mock.mixedVarargs(1, \"a\", \"b\");\n        Invocation invocation = getLastInvocation();\n        CapturingMatcher m = new CapturingMatcher();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1), new LocalizedMatcher(m)));\n\n        //when\n        invocationMatcher.captureArgumentsFrom(invocation);\n\n        //then\n        Assertions.assertThat(m.getAllValues()).containsExactly(\"a\", \"b\");\n    }",
        "begin_line": 142,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 39)",
            "(line 146,col 9)-(line 146,col 52)",
            "(line 147,col 9)-(line 147,col 52)",
            "(line 148,col 9)-(line 148,col 135)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 154,col 9)-(line 154,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_capture_arguments_when_args_count_does_NOT_match()",
        "snippet": "    @Test  // like using several time the captor in the vararg\n    public void should_capture_arguments_when_args_count_does_NOT_match() throws Exception {\n        //given\n        mock.varargs();\n        Invocation invocation = getLastInvocation();\n\n        //when\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));\n\n        //then\n        invocationMatcher.captureArgumentsFrom(invocation);\n    }",
        "begin_line": 157,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 23)",
            "(line 161,col 9)-(line 161,col 52)",
            "(line 164,col 9)-(line 164,col 139)",
            "(line 167,col 9)-(line 167,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMatcherTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMatcherTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMatcherTest.should_create_from_invocations()",
        "snippet": "    @Test\n    public void should_create_from_invocations() throws Exception {\n        //given\n        Invocation i = new InvocationBuilder().toInvocation();\n        //when\n        List<InvocationMatcher> out = InvocationMatcher.createFrom(asList(i));\n        //then\n        assertEquals(1, out.size());\n        assertEquals(i, out.get(0).getInvocation());\n    }",
        "begin_line": 170,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 62)",
            "(line 175,col 9)-(line 175,col 78)",
            "(line 177,col 9)-(line 177,col 36)",
            "(line 178,col 9)-(line 178,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        invocation = new InvocationBuilder().args(\" \").mock(\"mock\").toInvocation();\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldKnowIfIsEqualTo()",
        "snippet": "    @Test\n    public void shouldKnowIfIsEqualTo() {\n        Invocation equal =                  new InvocationBuilder().args(\" \").mock(\"mock\").toInvocation();\n        Invocation nonEqual =               new InvocationBuilder().args(\"X\").mock(\"mock\").toInvocation();\n        Invocation withNewStringInstance =  new InvocationBuilder().args(new String(\" \")).mock(\"mock\").toInvocation();\n\n        assertFalse(invocation.equals(null));\n        assertFalse(invocation.equals(\"\"));\n        assertTrue(invocation.equals(equal));\n        assertFalse(invocation.equals(nonEqual));\n        assertTrue(invocation.equals(withNewStringInstance));\n    }",
        "begin_line": 33,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 106)",
            "(line 36,col 9)-(line 36,col 106)",
            "(line 37,col 9)-(line 37,col 118)",
            "(line 39,col 9)-(line 39,col 45)",
            "(line 40,col 9)-(line 40,col 43)",
            "(line 41,col 9)-(line 41,col 45)",
            "(line 42,col 9)-(line 42,col 49)",
            "(line 43,col 9)-(line 43,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldEqualToNotConsiderSequenceNumber()",
        "snippet": "    @Test\n    public void shouldEqualToNotConsiderSequenceNumber() {\n        Invocation equal = new InvocationBuilder().args(\" \").mock(\"mock\").seq(2).toInvocation();\n        \n        assertTrue(invocation.equals(equal));\n        assertTrue(invocation.getSequenceNumber() != equal.getSequenceNumber());\n    }",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 96)",
            "(line 50,col 9)-(line 50,col 45)",
            "(line 51,col 9)-(line 51,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldBeACitizenOfHashes()",
        "snippet": "    @Test\n    public void shouldBeACitizenOfHashes() {\n        Map map = new HashMap();\n        map.put(invocation, \"one\");\n        assertEquals(\"one\", map.get(invocation));\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 32)",
            "(line 57,col 9)-(line 57,col 35)",
            "(line 58,col 9)-(line 58,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintMethodName()",
        "snippet": "    @Test\n    public void shouldPrintMethodName() {\n        invocation = new InvocationBuilder().toInvocation();\n        assertEquals(\"iMethods.simpleMethod();\", invocation.toString());\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 60)",
            "(line 64,col 9)-(line 64,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintMethodArgs()",
        "snippet": "    @Test\n    public void shouldPrintMethodArgs() {\n        invocation = new InvocationBuilder().args(\"foo\").toInvocation();\n        assertThat(invocation.toString(), endsWith(\"simpleMethod(\\\"foo\\\");\"));\n    }",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 72)",
            "(line 70,col 9)-(line 70,col 78)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintMethodIntegerArgAndString()",
        "snippet": "    @Test\n    public void shouldPrintMethodIntegerArgAndString() {\n        invocation = new InvocationBuilder().args(\"foo\", 1).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"simpleMethod(\\\"foo\\\", 1);\"));\n    }",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 75)",
            "(line 76,col 9)-(line 76,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintNull()",
        "snippet": "    @Test\n    public void shouldPrintNull() {\n        invocation = new InvocationBuilder().args((String) null).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"simpleMethod(null);\"));\n    }",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 80)",
            "(line 82,col 9)-(line 82,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintArray()",
        "snippet": "    @Test\n    public void shouldPrintArray() {\n        invocation = new InvocationBuilder().method(\"oneArray\").args(new int[] { 1, 2, 3 }).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"oneArray([1, 2, 3]);\"));\n    }",
        "begin_line": 85,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 107)",
            "(line 88,col 9)-(line 88,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintNullIfArrayIsNull()",
        "snippet": "    @Test\n    public void shouldPrintNullIfArrayIsNull() throws Exception {\n        Method m = IMethods.class.getMethod(\"oneArray\", Object[].class);\n        invocation = new InvocationBuilder().method(m).args((Object) null).toInvocation();\n        assertThat(invocation.toString(), endsWith(\"oneArray(null);\"));\n    }",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 72)",
            "(line 94,col 9)-(line 94,col 90)",
            "(line 95,col 9)-(line 95,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldPrintArgumentsInMultilinesWhenGetsTooBig()",
        "snippet": "    @Test\n    public void shouldPrintArgumentsInMultilinesWhenGetsTooBig() {\n        invocation = new InvocationBuilder().args(\"veeeeery long string that makes it ugly in one line\", 1).toInvocation();\n        assertThat(invocation.toString(), endsWith(\n                \"simpleMethod(\" +\n                        \"\\n\" +\n                        \"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n                        \"\\n\" +\n                        \"    1\" +\n                        \"\\n\" +\n                        \");\"));\n    }",
        "begin_line": 98,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 123)",
            "(line 101,col 9)-(line 108,col 31)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldTransformArgumentsToMatchers()",
        "snippet": "    @Test\n    public void shouldTransformArgumentsToMatchers() throws Exception {\n        Invocation i = new InvocationBuilder().args(\"foo\", new String[]{\"bar\"}).toInvocation();\n        List matchers = ArgumentsProcessor.argumentsToMatchers(i.getArguments());\n\n        assertEquals(2, matchers.size());\n        assertEquals(Equals.class, matchers.get(0).getClass());\n        assertEquals(ArrayEquals.class, matchers.get(1).getClass());\n    }",
        "begin_line": 111,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 95)",
            "(line 114,col 9)-(line 114,col 81)",
            "(line 116,col 9)-(line 116,col 41)",
            "(line 117,col 9)-(line 117,col 63)",
            "(line 118,col 9)-(line 118,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.Foo.bark()",
        "snippet": "        public String bark() {\n            return \"woof\";\n        }",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 13)-(line 123,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldBeAbleToCallRealMethod()",
        "snippet": "    @Test\n    public void shouldBeAbleToCallRealMethod() throws Throwable {\n        //when\n        Invocation invocation = invocationOf(Foo.class, \"bark\", new RealMethod() {\n            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().bark();\n            }});\n        //then\n        assertEquals(\"woof\", invocation.callRealMethod());\n    }",
        "begin_line": 127,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 133,col 16)",
            "(line 135,col 9)-(line 135,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.Anonymous-64669581-d327-4f76-a49d-6c5388063641.invoke(java.lang.Object, java.lang.Object[])",
        "snippet": "            public Object invoke(Object target, Object[] arguments) throws Throwable {\n                return new Foo().bark();\n            }});",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 17)-(line 132,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldScreamWhenCallingRealMethodOnInterface()",
        "snippet": "    @Test\n    public void shouldScreamWhenCallingRealMethodOnInterface() throws Throwable {\n        //given\n        Invocation invocationOnInterface = new InvocationBuilder().toInvocation();\n\n        try {\n            //when\n            invocationOnInterface.callRealMethod();\n            //then\n            fail();\n        } catch(MockitoException e) {}\n    }",
        "begin_line": 138,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 82)",
            "(line 143,col 9)-(line 148,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationImplTest.java",
        "signature": "org.mockito.internal.invocation.InvocationImplTest.shouldReturnCastedArgumentAt()",
        "snippet": "    @Test\n    public void shouldReturnCastedArgumentAt(){\n        //given\n        int argument = 42;\n        Invocation invocationOnInterface = new InvocationBuilder().method(\"twoArgumentMethod\").\n            argTypes(int.class, int.class).args(1, argument).toInvocation();\n\n        //when\n        int secondArgument = invocationOnInterface.getArgumentAt(1, int.class);\n\n        //then\n        assertTrue(secondArgument == argument);\n    }",
        "begin_line": 151,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 26)",
            "(line 155,col 9)-(line 156,col 76)",
            "(line 159,col 9)-(line 159,col 79)",
            "(line 162,col 9)-(line 162,col 47)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.createMethodToTestWith()",
        "snippet": "    @Before\n    public void createMethodToTestWith() throws SecurityException, NoSuchMethodException {\n        args = new Class<?>[0];\n        toStringMethod = this.getClass().getMethod(\"toString\", args);\n        method = new SerializableMethod(toStringMethod);\n    }",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 31)",
            "(line 27,col 9)-(line 27,col 69)",
            "(line 28,col 9)-(line 28,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeSerializable()",
        "snippet": "    @Test\n    public void shouldBeSerializable() throws Exception {\n        ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n        new ObjectOutputStream(serialized).writeObject(method);\n    }",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 71)",
            "(line 34,col 9)-(line 34,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeAbleToRetrieveMethodExceptionTypes()",
        "snippet": "    @Test\n    public void shouldBeAbleToRetrieveMethodExceptionTypes() throws Exception {\n        assertArrayEquals(toStringMethod.getExceptionTypes(), method.getExceptionTypes());\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeAbleToRetrieveMethodName()",
        "snippet": "    @Test\n    public void shouldBeAbleToRetrieveMethodName() throws Exception {\n        assertEquals(toStringMethod.getName(), method.getName());\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 65)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeAbleToCheckIsArgVargs()",
        "snippet": "    @Test\n    public void shouldBeAbleToCheckIsArgVargs() throws Exception {\n        assertEquals(toStringMethod.isVarArgs(), method.isVarArgs());\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 69)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeAbleToGetParameterTypes()",
        "snippet": "    @Test\n    public void shouldBeAbleToGetParameterTypes() throws Exception {\n        assertArrayEquals(toStringMethod.getParameterTypes(), method.getParameterTypes());\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 90)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeAbleToGetReturnType()",
        "snippet": "    @Test\n    public void shouldBeAbleToGetReturnType() throws Exception {\n        assertEquals(toStringMethod.getReturnType(), method.getReturnType());\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 77)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldBeEqualForTwoInstances()",
        "snippet": "    @Test\n    public void shouldBeEqualForTwoInstances() throws Exception {\n        assertTrue(new SerializableMethod(toStringMethod).equals(method));\n    }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.SerializableMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/SerializableMethodTest.java",
        "signature": "org.mockito.internal.invocation.SerializableMethodTest.shouldNotBeEqualForSameMethodFromTwoDifferentClasses()",
        "snippet": "    @Test\n    public void shouldNotBeEqualForSameMethodFromTwoDifferentClasses() throws Exception {\n        Method testBaseToStringMethod = String.class.getMethod(\"toString\", args);\n        assertFalse(new SerializableMethod(testBaseToStringMethod).equals(method));\n    }",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 81)",
            "(line 70,col 9)-(line 70,col 83)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldKnowWhenArgumentsMatch()",
        "snippet": "    @Test\n    public void shouldKnowWhenArgumentsMatch() {\n        //given\n        Invocation invocation = new InvocationBuilder().args(\"1\", 100).toInvocation();\n        InvocationMatcher invocationMatcher = new InvocationBuilder().args(\"1\", 100).toInvocationMatcher();\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 23,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 86)",
            "(line 27,col 9)-(line 27,col 107)",
            "(line 30,col 9)-(line 30,col 81)",
            "(line 33,col 9)-(line 33,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldKnowWhenArgsDifferent()",
        "snippet": "    @Test\n    public void shouldKnowWhenArgsDifferent() {\n        //given\n        Invocation invocation = new InvocationBuilder().args(\"1\", 100).toInvocation();\n        InvocationMatcher invocationMatcher = new InvocationBuilder().args(\"100\", 100).toInvocationMatcher();\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 36,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 86)",
            "(line 40,col 9)-(line 40,col 109)",
            "(line 43,col 9)-(line 43,col 81)",
            "(line 46,col 9)-(line 46,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldKnowWhenActualArgsSizeIsDifferent()",
        "snippet": "    @Test\n    public void shouldKnowWhenActualArgsSizeIsDifferent() {\n        //given\n        Invocation invocation = new InvocationBuilder().args(\"100\", 100).toInvocation();\n        InvocationMatcher invocationMatcher = new InvocationBuilder().args(\"100\").toInvocationMatcher();\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 88)",
            "(line 53,col 9)-(line 53,col 104)",
            "(line 56,col 9)-(line 56,col 81)",
            "(line 59,col 9)-(line 59,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldKnowWhenMatchersSizeIsDifferent()",
        "snippet": "    @Test\n    public void shouldKnowWhenMatchersSizeIsDifferent() {\n        //given\n        Invocation invocation = new InvocationBuilder().args(\"100\").toInvocation();\n        InvocationMatcher invocationMatcher = new InvocationBuilder().args(\"100\", 100).toInvocationMatcher();\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 62,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 83)",
            "(line 66,col 9)-(line 66,col 109)",
            "(line 69,col 9)-(line 69,col 81)",
            "(line 72,col 9)-(line 72,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldKnowWhenVarargsMatch()",
        "snippet": "    @Test\n    public void shouldKnowWhenVarargsMatch() {\n        //given\n        mock.varargs(\"1\", \"2\", \"3\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(\"1\"), Any.ANY, new InstanceOf(String.class)));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 75,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 36)",
            "(line 79,col 9)-(line 79,col 52)",
            "(line 80,col 9)-(line 80,col 151)",
            "(line 83,col 9)-(line 83,col 81)",
            "(line 86,col 9)-(line 86,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldKnowWhenVarargsDifferent()",
        "snippet": "    @Test\n    public void shouldKnowWhenVarargsDifferent() {\n        //given\n        mock.varargs(\"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(\"100\"), Any.ANY));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 89,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 31)",
            "(line 93,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 123)",
            "(line 97,col 9)-(line 97,col 81)",
            "(line 100,col 9)-(line 100,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldNotAllowAnyObjectMatchEntireVararg()",
        "snippet": "    @Test\n    public void shouldNotAllowAnyObjectMatchEntireVararg() {\n        //given\n        mock.varargs(\"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(Any.ANY));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 103,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 31)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 104)",
            "(line 111,col 9)-(line 111,col 81)",
            "(line 114,col 9)-(line 114,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldAllowAnyVarargMatchEntireVararg()",
        "snippet": "    @Test\n    public void shouldAllowAnyVarargMatchEntireVararg() {\n        //given\n        mock.varargs(\"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(AnyVararg.ANY_VARARG));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 117,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 31)",
            "(line 121,col 9)-(line 121,col 52)",
            "(line 122,col 9)-(line 122,col 117)",
            "(line 125,col 9)-(line 125,col 81)",
            "(line 128,col 9)-(line 128,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldNotAllowAnyObjectWithMixedVarargs()",
        "snippet": "    @Test\n    public void shouldNotAllowAnyObjectWithMixedVarargs() {\n        //given\n        mock.mixedVarargs(1, \"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1)));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 39)",
            "(line 135,col 9)-(line 135,col 52)",
            "(line 136,col 9)-(line 136,col 110)",
            "(line 139,col 9)-(line 139,col 81)",
            "(line 142,col 9)-(line 142,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldAllowAnyObjectWithMixedVarargs()",
        "snippet": "    @Test\n    public void shouldAllowAnyObjectWithMixedVarargs() {\n        //given\n        mock.mixedVarargs(1, \"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1), AnyVararg.ANY_VARARG));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 145,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 39)",
            "(line 149,col 9)-(line 149,col 52)",
            "(line 150,col 9)-(line 150,col 132)",
            "(line 153,col 9)-(line 153,col 81)",
            "(line 156,col 9)-(line 156,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldNotMatchWhenSomeOtherArgumentDoesNotMatch()",
        "snippet": "    @Test\n    public void shouldNotMatchWhenSomeOtherArgumentDoesNotMatch() {\n        //given\n        mock.mixedVarargs(1, \"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(100), AnyVararg.ANY_VARARG));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 159,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 39)",
            "(line 163,col 9)-(line 163,col 52)",
            "(line 164,col 9)-(line 164,col 134)",
            "(line 167,col 9)-(line 167,col 81)",
            "(line 170,col 9)-(line 170,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldAnyObjectVarargDealWithDifferentSizeOfArgs()",
        "snippet": "    @Test\n    public void shouldAnyObjectVarargDealWithDifferentSizeOfArgs() {\n        //given\n        mock.mixedVarargs(1, \"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1)));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertFalse(match);\n    }",
        "begin_line": 173,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 39)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 110)",
            "(line 181,col 9)-(line 181,col 81)",
            "(line 184,col 9)-(line 184,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldMatchAnyVarargEvenIfOneOfTheArgsIsNull()",
        "snippet": "    @Test\n    public void shouldMatchAnyVarargEvenIfOneOfTheArgsIsNull() {\n        //given\n        mock.mixedVarargs(null, null, \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(null), AnyVararg.ANY_VARARG));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 187,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 43)",
            "(line 191,col 9)-(line 191,col 52)",
            "(line 192,col 9)-(line 192,col 135)",
            "(line 195,col 9)-(line 195,col 81)",
            "(line 198,col 9)-(line 198,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.ArgumentsComparatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/ArgumentsComparatorTest.java",
        "signature": "org.mockito.internal.invocation.ArgumentsComparatorTest.shouldMatchAnyVarargEvenIfMatcherIsDecorated()",
        "snippet": "    @Test\n    public void shouldMatchAnyVarargEvenIfMatcherIsDecorated() {\n        //given\n        mock.varargs(\"1\", \"2\");\n        Invocation invocation = getLastInvocation();\n        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));\n\n        //when\n        boolean match = comparator.argumentsMatch(invocationMatcher, invocation);\n\n        //then\n        assertTrue(match);\n    }",
        "begin_line": 201,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 31)",
            "(line 205,col 9)-(line 205,col 52)",
            "(line 206,col 9)-(line 206,col 139)",
            "(line 209,col 9)-(line 209,col 81)",
            "(line 212,col 9)-(line 212,col 26)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMarkerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMarkerTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMarkerTest.shouldMarkInvocationAsVerified()",
        "snippet": "    @Test\n    public void shouldMarkInvocationAsVerified() {\n        //given\n        InvocationMarker marker = new InvocationMarker();\n        Invocation i = new InvocationBuilder().toInvocation();\n        InvocationMatcher im = new InvocationBuilder().toInvocationMatcher();\n        assertFalse(i.isVerified());\n        \n        //when\n        marker.markVerified(Arrays.asList(i), im);\n        \n        //then\n        assertTrue(i.isVerified());\n    }",
        "begin_line": 17,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 57)",
            "(line 21,col 9)-(line 21,col 62)",
            "(line 22,col 9)-(line 22,col 77)",
            "(line 23,col 9)-(line 23,col 36)",
            "(line 26,col 9)-(line 26,col 50)",
            "(line 29,col 9)-(line 29,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMarkerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMarkerTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMarkerTest.shouldCaptureArguments()",
        "snippet": "    @Test\n    public void shouldCaptureArguments() {\n        //given\n        InvocationMarker marker = new InvocationMarker();\n        Invocation i = new InvocationBuilder().toInvocation();\n        final ObjectBox box = new ObjectBox();\n        CapturesArgumensFromInvocation c = new CapturesArgumensFromInvocation() {\n            public void captureArgumentsFrom(Invocation i) {\n                box.put(i);\n            }};\n        \n        //when\n        marker.markVerified(Arrays.asList(i), c);\n        \n        //then\n        assertEquals(i, box.getObject());\n    }",
        "begin_line": 32,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 57)",
            "(line 36,col 9)-(line 36,col 62)",
            "(line 37,col 9)-(line 37,col 46)",
            "(line 38,col 9)-(line 41,col 15)",
            "(line 44,col 9)-(line 44,col 49)",
            "(line 47,col 9)-(line 47,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMarkerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMarkerTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMarkerTest.Anonymous-e1bcd1fe-46b3-4707-9221-01ed43a9f23f.captureArgumentsFrom(org.mockito.invocation.Invocation)",
        "snippet": "            public void captureArgumentsFrom(Invocation i) {\n                box.put(i);\n            }};",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 17)-(line 40,col 27)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationMarkerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationMarkerTest.java",
        "signature": "org.mockito.internal.invocation.InvocationMarkerTest.shouldMarkInvocationsAsVerifiedInOrder()",
        "snippet": "    @Test\n    public void shouldMarkInvocationsAsVerifiedInOrder() {\n        //given\n        InOrderContextImpl context = new InOrderContextImpl();\n        InvocationMarker marker = new InvocationMarker();\n        Invocation i = new InvocationBuilder().toInvocation();\n        InvocationMatcher im = new InvocationBuilder().toInvocationMatcher();\n        assertFalse(context.isVerified(i));\n        assertFalse(i.isVerified());\n        \n        //when\n        marker.markVerifiedInOrder(Arrays.asList(i), im, context);\n        \n        //then\n        assertTrue(context.isVerified(i));\n        assertTrue(i.isVerified());\n    }",
        "begin_line": 50,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 62)",
            "(line 54,col 9)-(line 54,col 57)",
            "(line 55,col 9)-(line 55,col 62)",
            "(line 56,col 9)-(line 56,col 77)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 58,col 9)-(line 58,col 36)",
            "(line 61,col 9)-(line 61,col 66)",
            "(line 64,col 9)-(line 64,col 42)",
            "(line 65,col 9)-(line 65,col 35)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.toInvocation()",
        "snippet": "    public Invocation toInvocation() {\n        if (method == null) {\n            if (argTypes == null) {\n                argTypes = new LinkedList<Class<?>>();\n                for (Object arg : args) {\n                    if (arg == null) {\n                        argTypes.add(Object.class);\n                    } else {\n                        argTypes.add(arg.getClass());\n                    }\n                }\n            }\n\n            try {\n                method = IMethods.class.getMethod(methodName, argTypes.toArray(new Class[argTypes.size()]));\n            } catch (Exception e) {\n                throw new RuntimeException(\"builder only creates invocations of IMethods interface\", e);\n            }\n        }\n        \n        Invocation i = new InvocationImpl(mock, new SerializableMethod(method), args, sequenceNumber, null);\n        if (verified) {\n            i.markVerified();\n        }\n        return i;\n    }",
        "begin_line": 39,
        "end_line": 64,
        "comment": "\n     * Build the invocation\n     *\n     * If the method was not specified, use IMethods methods.\n     *\n     * @return invocation\n     ",
        "child_ranges": [
            "(line 40,col 9)-(line 57,col 9)",
            "(line 59,col 9)-(line 59,col 108)",
            "(line 60,col 9)-(line 62,col 9)",
            "(line 63,col 9)-(line 63,col 17)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.method(java.lang.String)",
        "snippet": "    public InvocationBuilder method(String methodName) {\n        this.methodName  = methodName;\n        return this;\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 38)",
            "(line 68,col 9)-(line 68,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.seq(int)",
        "snippet": "    public InvocationBuilder seq(int sequenceNumber) {\n        this.sequenceNumber = sequenceNumber;\n        return this;\n    }",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 45)",
            "(line 73,col 9)-(line 73,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.args(java.lang.Object...)",
        "snippet": "    public InvocationBuilder args(Object ... args) {\n        this.args = args;\n        return this;\n    }",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 25)",
            "(line 78,col 9)-(line 78,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.arg(java.lang.Object)",
        "snippet": "    public InvocationBuilder arg(Object o) {\n        this.args = new Object[] {o};\n        return this;\n    }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 37)",
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.mock(java.lang.Object)",
        "snippet": "    public InvocationBuilder mock(Object mock) {\n        this.mock = mock;\n        return this;\n    }",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 25)",
            "(line 88,col 9)-(line 88,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.method(java.lang.reflect.Method)",
        "snippet": "    public InvocationBuilder method(Method method) {\n        this.method = method;\n        return this;\n    }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 29)",
            "(line 93,col 9)-(line 93,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.verified()",
        "snippet": "    public InvocationBuilder verified() {\n        this.verified = true;\n        return this;\n    }",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 29)",
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.toInvocationMatcher()",
        "snippet": "    public InvocationMatcher toInvocationMatcher() {\n        return new InvocationMatcher(toInvocation());\n    }",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.simpleMethod()",
        "snippet": "    public InvocationBuilder simpleMethod() {\n        return this.method(\"simpleMethod\");\n    }",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.differentMethod()",
        "snippet": "    public InvocationBuilder differentMethod() {\n        return this.method(\"differentMethod\");\n    }",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationBuilder.java",
        "signature": "org.mockito.internal.invocation.InvocationBuilder.argTypes(java.lang.Class<?>...)",
        "snippet": "    public InvocationBuilder argTypes(Class<?>... argTypes) {\n        this.argTypes = asList(argTypes);\n        return this;\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        simpleMethodInvocation = new InvocationBuilder().mock(mock).simpleMethod().seq(1).toInvocation();\n        simpleMethodInvocationTwo = new InvocationBuilder().mock(mock).simpleMethod().seq(2).toInvocation();\n        differentMethodInvocation = new InvocationBuilder().mock(mock).differentMethod().seq(3).toInvocation();\n        invocations.addAll(Arrays.asList(simpleMethodInvocation, simpleMethodInvocationTwo, differentMethodInvocation));\n        finder = new InvocationsFinder();\n    }",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 105)",
            "(line 40,col 9)-(line 40,col 108)",
            "(line 41,col 9)-(line 41,col 111)",
            "(line 42,col 9)-(line 42,col 120)",
            "(line 43,col 9)-(line 43,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindActualInvocations()",
        "snippet": "    @Test\n    public void shouldFindActualInvocations() throws Exception {\n        List<Invocation> actual = finder.findInvocations(invocations, new InvocationMatcher(simpleMethodInvocation));\n        assertThat(actual, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n        \n        actual = finder.findInvocations(invocations, new InvocationMatcher(differentMethodInvocation));\n        assertThat(actual, hasExactlyInOrder(differentMethodInvocation));\n    }",
        "begin_line": 46,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 117)",
            "(line 49,col 9)-(line 49,col 97)",
            "(line 51,col 9)-(line 51,col 103)",
            "(line 52,col 9)-(line 52,col 73)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInvocation()",
        "snippet": "    @Test\n    public void shouldFindFirstUnverifiedInvocation() throws Exception {\n        assertSame(simpleMethodInvocation, finder.findFirstUnverified(invocations));\n        \n        simpleMethodInvocationTwo.markVerified();\n        simpleMethodInvocation.markVerified();\n        \n        assertSame(differentMethodInvocation, finder.findFirstUnverified(invocations));\n        \n        differentMethodInvocation.markVerified();\n        assertNull(finder.findFirstUnverified(invocations));\n    }",
        "begin_line": 55,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 84)",
            "(line 59,col 9)-(line 59,col 49)",
            "(line 60,col 9)-(line 60,col 46)",
            "(line 62,col 9)-(line 62,col 87)",
            "(line 64,col 9)-(line 64,col 49)",
            "(line 65,col 9)-(line 65,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInOrder()",
        "snippet": "    @Test\n    public void shouldFindFirstUnverifiedInOrder() throws Exception {\n        //given\n        InOrderContextImpl context = new InOrderContextImpl();\n        assertSame(simpleMethodInvocation, finder.findFirstUnverifiedInOrder(context, invocations));        \n        \n        //when\n        context.markVerified(simpleMethodInvocationTwo);\n        context.markVerified(simpleMethodInvocation);\n        \n        //then\n        assertSame(differentMethodInvocation, finder.findFirstUnverifiedInOrder(context, invocations));\n        \n        //when\n        context.markVerified(differentMethodInvocation);\n        \n        //then\n        assertNull(finder.findFirstUnverifiedInOrder(context, invocations));\n    }",
        "begin_line": 68,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 100)",
            "(line 75,col 9)-(line 75,col 56)",
            "(line 76,col 9)-(line 76,col 53)",
            "(line 79,col 9)-(line 79,col 103)",
            "(line 82,col 9)-(line 82,col 56)",
            "(line 85,col 9)-(line 85,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInOrderAndRespectSequenceNumber()",
        "snippet": "    @Test\n    public void shouldFindFirstUnverifiedInOrderAndRespectSequenceNumber() throws Exception {\n        //given\n        InOrderContextImpl context = new InOrderContextImpl();\n        assertSame(simpleMethodInvocation, finder.findFirstUnverifiedInOrder(context, invocations));        \n        \n        //when\n        //skipping verification of first invocation, then:\n        context.markVerified(simpleMethodInvocationTwo);\n        context.markVerified(differentMethodInvocation);\n        \n        //then\n        assertSame(null, finder.findFirstUnverifiedInOrder(context, invocations));        \n    }",
        "begin_line": 88,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 100)",
            "(line 96,col 9)-(line 96,col 56)",
            "(line 97,col 9)-(line 97,col 56)",
            "(line 100,col 9)-(line 100,col 82)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInvocationOnMock()",
        "snippet": "    @Test\n    public void shouldFindFirstUnverifiedInvocationOnMock() throws Exception {\n        assertSame(simpleMethodInvocation, finder.findFirstUnverified(invocations, simpleMethodInvocation.getMock()));\n        assertNull(finder.findFirstUnverified(invocations, \"different mock\"));\n    }",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 118)",
            "(line 106,col 9)-(line 106,col 78)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstSimilarInvocationByName()",
        "snippet": "    @Test\n    public void shouldFindFirstSimilarInvocationByName() throws Exception {\n        Invocation overloadedSimpleMethod = new InvocationBuilder().mock(mock).simpleMethod().arg(\"test\").toInvocation();\n        \n        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedSimpleMethod));\n        assertSame(found, simpleMethodInvocation);\n    }",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 121)",
            "(line 113,col 9)-(line 113,col 116)",
            "(line 114,col 9)-(line 114,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindInvocationWithTheSameMethod()",
        "snippet": "    @Test\n    public void shouldFindInvocationWithTheSameMethod() throws Exception {\n        Invocation overloadedDifferentMethod = new InvocationBuilder().differentMethod().arg(\"test\").toInvocation();\n        \n        invocations.add(overloadedDifferentMethod);\n        \n        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedDifferentMethod));\n        assertSame(found, overloadedDifferentMethod);\n    }",
        "begin_line": 117,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 116)",
            "(line 121,col 9)-(line 121,col 51)",
            "(line 123,col 9)-(line 123,col 119)",
            "(line 124,col 9)-(line 124,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldGetLastStackTrace()",
        "snippet": "    @Test\n    public void shouldGetLastStackTrace() throws Exception {\n        Location last = finder.getLastLocation(invocations);\n        assertSame(differentMethodInvocation.getLocation(), last);\n        \n        assertNull(finder.getLastLocation(Collections.<Invocation>emptyList()));\n    } ",
        "begin_line": 127,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 60)",
            "(line 130,col 9)-(line 130,col 66)",
            "(line 132,col 9)-(line 132,col 80)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindAllMatchingUnverifiedChunks()",
        "snippet": "    @Test\n    public void shouldFindAllMatchingUnverifiedChunks() throws Exception {\n        List<Invocation> allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation), context);\n        assertThat(allMatching, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n        \n        context.markVerified(simpleMethodInvocation);\n        allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation), context);\n        assertThat(allMatching, hasExactlyInOrder(simpleMethodInvocationTwo));\n        \n        context.markVerified(simpleMethodInvocationTwo);\n        allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation), context);\n        assertTrue(allMatching.isEmpty());\n    }",
        "begin_line": 135,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 147)",
            "(line 138,col 9)-(line 138,col 102)",
            "(line 140,col 9)-(line 140,col 53)",
            "(line 141,col 9)-(line 141,col 130)",
            "(line 142,col 9)-(line 142,col 78)",
            "(line 144,col 9)-(line 144,col 56)",
            "(line 145,col 9)-(line 145,col 130)",
            "(line 146,col 9)-(line 146,col 42)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindMatchingChunk()",
        "snippet": "    @Test\n    public void shouldFindMatchingChunk() throws Exception {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 2, context);\n        assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n    }",
        "begin_line": 149,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 130)",
            "(line 152,col 9)-(line 152,col 96)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldReturnAllChunksWhenModeIsAtLeastOnce()",
        "snippet": "    @Test\n    public void shouldReturnAllChunksWhenModeIsAtLeastOnce() throws Exception {\n        Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n        invocations.add(simpleMethodInvocationThree);\n        \n        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 1, context);\n        assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n    }",
        "begin_line": 155,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 99)",
            "(line 158,col 9)-(line 158,col 53)",
            "(line 160,col 9)-(line 160,col 130)",
            "(line 161,col 9)-(line 161,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldReturnAllChunksWhenWantedCountDoesntMatch()",
        "snippet": "    @Test\n    public void shouldReturnAllChunksWhenWantedCountDoesntMatch() throws Exception {\n        Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n        invocations.add(simpleMethodInvocationThree);\n        \n        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 1, context);\n        assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n    }",
        "begin_line": 164,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 99)",
            "(line 167,col 9)-(line 167,col 53)",
            "(line 169,col 9)-(line 169,col 130)",
            "(line 170,col 9)-(line 170,col 125)"
        ]
    },
    {
        "class_name": "org.mockito.internal.invocation.InvocationsFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/invocation/InvocationsFinderTest.java",
        "signature": "org.mockito.internal.invocation.InvocationsFinderTest.shouldFindPreviousInOrder()",
        "snippet": "    @Test\n    public void shouldFindPreviousInOrder() throws Exception {\n        Invocation previous = finder.findPreviousVerifiedInOrder(invocations, context);\n        assertNull(previous);\n        \n        context.markVerified(simpleMethodInvocation);\n        context.markVerified(simpleMethodInvocationTwo);\n        \n        previous = finder.findPreviousVerifiedInOrder(invocations, context);\n        assertSame(simpleMethodInvocationTwo, previous);\n    }",
        "begin_line": 173,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 87)",
            "(line 176,col 9)-(line 176,col 29)",
            "(line 178,col 9)-(line 178,col 53)",
            "(line 179,col 9)-(line 179,col 56)",
            "(line 181,col 9)-(line 181,col 76)",
            "(line 182,col 9)-(line 182,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.setup()",
        "snippet": "    @Before\n    public void setup() {\n        state = new MockingProgressImpl();\n\n        invocationContainerImpl = new InvocationContainerImpl(state, new MockSettingsImpl());\n        invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n\n        invocationContainerImplStubOnly =\n          new InvocationContainerImpl(state, new MockSettingsImpl().stubOnly());\n        invocationContainerImplStubOnly.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n\n        simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n    }",
        "begin_line": 28,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 42)",
            "(line 32,col 9)-(line 32,col 93)",
            "(line 33,col 9)-(line 33,col 113)",
            "(line 35,col 9)-(line 36,col 80)",
            "(line 37,col 9)-(line 37,col 121)",
            "(line 39,col 9)-(line 39,col 77)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_finish_stubbing_when_wrong_throwable_is_set()",
        "snippet": "    @Test\n    public void should_finish_stubbing_when_wrong_throwable_is_set() throws Exception {\n        state.stubbingStarted();\n        try {\n            invocationContainerImpl.addAnswer(new ThrowsException(new Exception()));\n            fail();\n        } catch (MockitoException e) {\n            state.validateState();\n        }\n    }",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 32)",
            "(line 45,col 9)-(line 50,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_finish_stubbing_on_adding_return_value()",
        "snippet": "    @Test\n    public void should_finish_stubbing_on_adding_return_value() throws Exception {\n        state.stubbingStarted();\n        invocationContainerImpl.addAnswer(new Returns(\"test\"));\n        state.validateState();\n    }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 32)",
            "(line 56,col 9)-(line 56,col 63)",
            "(line 57,col 9)-(line 57,col 30)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_get_results_for_methods()",
        "snippet": "    @Test\n    public void should_get_results_for_methods() throws Throwable {\n        invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n        invocationContainerImpl.addAnswer(new Returns(\"simpleMethod\"));\n\n        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n        invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n        invocationContainerImpl.addAnswer(new ThrowsException(new MyException()));\n\n        assertEquals(\"simpleMethod\", invocationContainerImpl.answerTo(simpleMethod));\n\n        try {\n            invocationContainerImpl.answerTo(differentMethod);\n            fail();\n        } catch (MyException e) {}\n    }",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 103)",
            "(line 63,col 9)-(line 63,col 71)",
            "(line 65,col 9)-(line 65,col 94)",
            "(line 66,col 9)-(line 66,col 106)",
            "(line 67,col 9)-(line 67,col 82)",
            "(line 69,col 9)-(line 69,col 85)",
            "(line 71,col 9)-(line 74,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_get_results_for_methods_stub_only()",
        "snippet": "    @Test\n    public void should_get_results_for_methods_stub_only() throws Throwable {\n        invocationContainerImplStubOnly.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n        invocationContainerImplStubOnly.addAnswer(new Returns(\"simpleMethod\"));\n\n        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n        invocationContainerImplStubOnly.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n        invocationContainerImplStubOnly.addAnswer(new ThrowsException(new MyException()));\n\n        assertEquals(\"simpleMethod\", invocationContainerImplStubOnly.answerTo(simpleMethod));\n\n        try {\n            invocationContainerImplStubOnly.answerTo(differentMethod);\n            fail();\n        } catch (MyException e) {}\n    }",
        "begin_line": 77,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 111)",
            "(line 80,col 9)-(line 80,col 79)",
            "(line 82,col 9)-(line 82,col 94)",
            "(line 83,col 9)-(line 83,col 114)",
            "(line 84,col 9)-(line 84,col 90)",
            "(line 86,col 9)-(line 86,col 93)",
            "(line 88,col 9)-(line 91,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_add_throwable_for_void_method()",
        "snippet": "    @Test\n    public void should_add_throwable_for_void_method() throws Throwable {\n        invocationContainerImpl.addAnswerForVoidMethod(new ThrowsException(new MyException()));\n        invocationContainerImpl.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n\n        try {\n            invocationContainerImpl.answerTo(simpleMethod);\n            fail();\n        } catch (MyException e) {}\n    }",
        "begin_line": 94,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 95)",
            "(line 97,col 9)-(line 97,col 90)",
            "(line 99,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_validate_throwable_for_void_method()",
        "snippet": "    @Test\n    public void should_validate_throwable_for_void_method() throws Throwable {\n        invocationContainerImpl.addAnswerForVoidMethod(new ThrowsException(new Exception()));\n\n        try {\n            invocationContainerImpl.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 105,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 93)",
            "(line 109,col 9)-(line 112,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplStubbingTest.should_validate_throwable()",
        "snippet": "    @Test\n    public void should_validate_throwable() throws Throwable {\n        try {\n            invocationContainerImpl.addAnswer(new ThrowsException(null));\n            fail();\n        } catch (MockitoException e) {}\n    }",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 120,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.should_be_thread_safe()",
        "snippet": "    @Test\n    public void should_be_thread_safe() throws Throwable {\n        doShouldBeThreadSafe(container);\n    }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.should_be_thread_safe_stub_only()",
        "snippet": "    @Test\n    public void should_be_thread_safe_stub_only() throws Throwable {\n        doShouldBeThreadSafe(containerStubOnly);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.doShouldBeThreadSafe(org.mockito.internal.stubbing.InvocationContainerImpl)",
        "snippet": "    private void doShouldBeThreadSafe(final InvocationContainerImpl c) throws Throwable {\n        //given\n        Thread[] t = new Thread[200];\n        final CountDownLatch starter = new CountDownLatch(200);\n        for (int i = 0; i < t.length; i++ ) {\n            t[i] = new Thread() {\n                public void run() {\n                    try {\n                        starter.await(); //NOPMD\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    c.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n                    c.addAnswer(new Returns(\"foo\"));\n                    c.findAnswerFor(invocation);\n                }\n            };\n            t[i].setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n                public void uncaughtException(Thread t, Throwable e) {\n                    exceptions.add(e);\n                }\n            });\n            t[i].start();\n\n            starter.countDown();\n        }\n\n        //when\n        for (Thread aT : t) {\n            aT.join();\n        }\n\n        //then\n        if (exceptions.size() != 0) {\n            throw exceptions.getFirst();\n        }\n    }",
        "begin_line": 47,
        "end_line": 83,
        "comment": "works 50% of the time",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 37)",
            "(line 50,col 9)-(line 50,col 63)",
            "(line 51,col 9)-(line 72,col 9)",
            "(line 75,col 9)-(line 77,col 9)",
            "(line 80,col 9)-(line 82,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.Anonymous-0aa05525-384a-4b13-bc4f-c3b34a2bb5ae.run()",
        "snippet": "                public void run() {\n                    try {\n                        starter.await(); //NOPMD\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    c.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n                    c.addAnswer(new Returns(\"foo\"));\n                    c.findAnswerFor(invocation);\n                }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 54,col 21)-(line 58,col 21)",
            "(line 59,col 21)-(line 59,col 91)",
            "(line 60,col 21)-(line 60,col 52)",
            "(line 61,col 21)-(line 61,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.Anonymous-44ee275f-4122-44e0-a7c2-ebf74c2c31f8.uncaughtException(java.lang.Thread, java.lang.Throwable)",
        "snippet": "                public void uncaughtException(Thread t, Throwable e) {\n                    exceptions.add(e);\n                }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 21)-(line 66,col 38)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.should_return_invoked_mock()",
        "snippet": "    @Test\n    public void should_return_invoked_mock() throws Exception {\n        container.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n\n        assertEquals(invocation.getMock(), container.invokedMock());\n    }",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 87)",
            "(line 89,col 9)-(line 89,col 68)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.should_return_invoked_mock_stub_only()",
        "snippet": "    @Test\n    public void should_return_invoked_mock_stub_only() throws Exception {\n        containerStubOnly.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n\n        assertEquals(invocation.getMock(), containerStubOnly.invokedMock());\n    }",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 95)",
            "(line 96,col 9)-(line 96,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.should_tell_if_has_invocation_for_potential_stubbing()",
        "snippet": "    @Test\n    public void should_tell_if_has_invocation_for_potential_stubbing() throws Exception {\n        container.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n        assertTrue(container.hasInvocationForPotentialStubbing());\n\n        container.addAnswer(new ReturnsEmptyValues());\n        assertFalse(container.hasInvocationForPotentialStubbing());\n    }",
        "begin_line": 99,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 99)",
            "(line 102,col 9)-(line 102,col 66)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 67)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.InvocationContainerImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/InvocationContainerImplTest.java",
        "signature": "org.mockito.internal.stubbing.InvocationContainerImplTest.should_tell_if_has_invocation_for_potential_stubbing_stub_only()",
        "snippet": "    @Test\n    public void should_tell_if_has_invocation_for_potential_stubbing_stub_only() throws Exception {\n        containerStubOnly.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n        assertTrue(containerStubOnly.hasInvocationForPotentialStubbing());\n\n        containerStubOnly.addAnswer(new ReturnsEmptyValues());\n        assertFalse(containerStubOnly.hasInvocationForPotentialStubbing());\n    }",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 107)",
            "(line 111,col 9)-(line 111,col 74)",
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 75)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.should_return_mock_value_for_interface()",
        "snippet": "    @Test\n    public void should_return_mock_value_for_interface() throws Exception {\n        Object interfaceMock = values.returnValueFor(FooInterface.class);\n        assertTrue(new MockUtil().isMock(interfaceMock));\n    }",
        "begin_line": 23,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 25,col 73)",
            "(line 26,col 9)-(line 26,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.should_return_mock_value_for_class()",
        "snippet": "    @Test\n    public void should_return_mock_value_for_class() throws Exception {\n        Object classMock = values.returnValueFor(BarClass.class);\n        assertTrue(new MockUtil().isMock(classMock));\n    }",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 65)",
            "(line 32,col 9)-(line 32,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.should_return_null_for_final_class()",
        "snippet": "    @Test\n    public void should_return_null_for_final_class() throws Exception {\n        assertNull(values.returnValueFor(Baz.class));\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.should_return_the_usual_default_values_for_primitives()",
        "snippet": "    @Test\n    public void should_return_the_usual_default_values_for_primitives() throws Throwable {\n        ReturnsMocks answer = new ReturnsMocks();\n        assertEquals(false, answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n        assertEquals((char) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n        assertEquals((byte) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"byteMethod\")));\n        assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"shortMethod\")));\n        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n        assertEquals(0L, answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n        assertEquals(0f, answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n        assertEquals(0d, answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n    }",
        "begin_line": 40,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 49)",
            "(line 43,col 9)-(line 43,col 101)",
            "(line 44,col 9)-(line 44,col 101)",
            "(line 45,col 9)-(line 45,col 101)",
            "(line 46,col 9)-(line 46,col 103)",
            "(line 47,col 9)-(line 47,col 93)",
            "(line 48,col 9)-(line 48,col 95)",
            "(line 49,col 9)-(line 49,col 96)",
            "(line 50,col 9)-(line 50,col 97)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.StringMethods.stringMethod()",
        "snippet": "        String stringMethod();",
        "begin_line": 55,
        "end_line": 55,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.StringMethods.stringArrayMethod()",
        "snippet": "        String[] stringArrayMethod();",
        "begin_line": 56,
        "end_line": 56,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.should_return_empty_array()",
        "snippet": "    @Test\n    public void should_return_empty_array() throws Throwable {\n        String[] ret = (String[]) values.answer(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n        \n        assertTrue(ret.getClass().isArray());\n        assertTrue(ret.length == 0);\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 104)",
            "(line 63,col 9)-(line 63,col 45)",
            "(line 64,col 9)-(line 64,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.should_return_empty_string()",
        "snippet": "    @Test\n    public void should_return_empty_string() throws Throwable {\n        assertEquals(\"\", values.answer(invocationOf(StringMethods.class, \"stringMethod\")));\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 91)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.remove(java.lang.Object)",
        "snippet": "        Set<Number> remove(Object key); // override with fixed ParameterizedType",
        "begin_line": 23,
        "end_line": 23,
        "comment": " override with fixed ParameterizedType",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.returningWildcard()",
        "snippet": "        List<? super Number> returningWildcard();",
        "begin_line": 24,
        "end_line": 24,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.returningNonMockableNestedGeneric()",
        "snippet": "        Map<String, K> returningNonMockableNestedGeneric();",
        "begin_line": 25,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.returningK()",
        "snippet": "        K returningK();",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.paramTypeWithTypeParams()",
        "snippet": "        <O extends K> List<O> paramTypeWithTypeParams();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.twoTypeParams(S)",
        "snippet": "        <S extends Appendable, T extends S> T twoTypeParams(S s);",
        "begin_line": 28,
        "end_line": 28,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.typeVarWithTypeParams()",
        "snippet": "        <O extends K> O typeVarWithTypeParams();",
        "begin_line": 29,
        "end_line": 29,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.GenericsNest.returnsNormalType()",
        "snippet": "        Number returnsNormalType();",
        "begin_line": 30,
        "end_line": 30,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.generic_deep_mock_frenzy__look_at_these_chained_calls()",
        "snippet": "    @Test\n    public void generic_deep_mock_frenzy__look_at_these_chained_calls() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();\n        Iterator<? extends Map.Entry<? extends Cloneable,Set<Number>>> entriesIterator = mock.entrySet().iterator();\n        Map.Entry<? extends Cloneable, Set<Number>> nextEntry = mock.entrySet().iterator().next();\n\n        Cloneable cloneableKey = mock.entrySet().iterator().next().getKey();\n        Comparable<?> comparableKey = mock.entrySet().iterator().next().getKey();\n\n        Set<Number> value = mock.entrySet().iterator().next().getValue();\n        Iterator<Number> numbersIterator = mock.entrySet().iterator().next().getValue().iterator();\n        Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n    }",
        "begin_line": 33,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 76)",
            "(line 37,col 9)-(line 37,col 93)",
            "(line 38,col 9)-(line 38,col 116)",
            "(line 39,col 9)-(line 39,col 98)",
            "(line 41,col 9)-(line 41,col 76)",
            "(line 42,col 9)-(line 42,col 81)",
            "(line 44,col 9)-(line 44,col 73)",
            "(line 45,col 9)-(line 45,col 99)",
            "(line 46,col 9)-(line 46,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class()",
        "snippet": "    @Test\n    public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        Cloneable cloneable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =\n                mock.paramTypeWithTypeParams().get(0);\n        Comparable<?> comparable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =\n                mock.paramTypeWithTypeParams().get(0);\n    }",
        "begin_line": 49,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 76)",
            "(line 53,col 9)-(line 54,col 54)",
            "(line 55,col 9)-(line 56,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class()",
        "snippet": "    @Test\n    public void can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        Cloneable cloneable_bound_of_typevar_K = mock.returningK();\n        Comparable<?> comparable_bound_of_typevar_K = mock.returningK();\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 76)",
            "(line 63,col 9)-(line 63,col 67)",
            "(line 64,col 9)-(line 64,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class()",
        "snippet": "    @Test\n    public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();\n        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable) mock.typeVarWithTypeParams();\n    }",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 76)",
            "(line 71,col 9)-(line 71,col 114)",
            "(line 72,col 9)-(line 72,col 120)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_return_types_declared_with_a_bounded_wildcard()",
        "snippet": "    @Test\n    public void can_create_mock_from_return_types_declared_with_a_bounded_wildcard() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        List<? super Integer> objects = mock.returningWildcard();\n        Number type_that_is_the_upper_bound_of_the_wildcard = (Number) mock.returningWildcard().get(45);\n        type_that_is_the_upper_bound_of_the_wildcard.floatValue();\n    }",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 76)",
            "(line 79,col 9)-(line 79,col 65)",
            "(line 80,col 9)-(line 80,col 104)",
            "(line 81,col 9)-(line 81,col 66)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_still_work_with_raw_type_in_the_return_type()",
        "snippet": "    @Test\n    public void can_still_work_with_raw_type_in_the_return_type() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        Number the_raw_type_that_should_be_returned = mock.returnsNormalType();\n        the_raw_type_that_should_be_returned.floatValue();\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 76)",
            "(line 88,col 9)-(line 88,col 79)",
            "(line 89,col 9)-(line 89,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic()",
        "snippet": "    @Test\n    public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {\n        GenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n        ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);\n\n        assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();\n        assertThat(listOfInteger.get(25)).isEqualTo(0);\n    }",
        "begin_line": 92,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 84)",
            "(line 95,col 9)-(line 95,col 84)",
            "(line 97,col 9)-(line 97,col 105)",
            "(line 98,col 9)-(line 98,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.as_expected_fail_with_a_CCE_on_callsite_when_erasure_takes_place_for_example___StringBuilder_is_subject_to_erasure()",
        "snippet": "    @Test(expected = ClassCastException.class)\n    public void as_expected_fail_with_a_CCE_on_callsite_when_erasure_takes_place_for_example___StringBuilder_is_subject_to_erasure() throws Exception {\n        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n\n        // following assignment needed to create a ClassCastException on the call site (i.e. : here)\n        StringBuilder stringBuilder_assignment_that_should_throw_a_CCE =\n                mock.twoTypeParams(new StringBuilder()).append(2).append(3);\n    }",
        "begin_line": 101,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 76)",
            "(line 106,col 9)-(line 107,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_empty_collections_or_null_for_non_collections()",
        "snippet": "    @Test public void should_return_empty_collections_or_null_for_non_collections() {\n        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n\n        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());\n        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());\n        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());\n        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());\n\n        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());\n        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());\n        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());\n\n        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());\n        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());\n        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n\n        assertNull(values.returnValueFor(String.class));\n    }",
        "begin_line": 33,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 85)",
            "(line 36,col 9)-(line 36,col 71)",
            "(line 37,col 9)-(line 37,col 83)",
            "(line 38,col 9)-(line 38,col 79)",
            "(line 39,col 9)-(line 39,col 79)",
            "(line 40,col 9)-(line 40,col 91)",
            "(line 42,col 9)-(line 42,col 73)",
            "(line 43,col 9)-(line 43,col 83)",
            "(line 44,col 9)-(line 44,col 85)",
            "(line 46,col 9)-(line 46,col 71)",
            "(line 47,col 9)-(line 47,col 83)",
            "(line 48,col 9)-(line 48,col 79)",
            "(line 49,col 9)-(line 49,col 79)",
            "(line 50,col 9)-(line 50,col 91)",
            "(line 52,col 9)-(line 52,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_empty_iterable()",
        "snippet": "    @Test\n    public void should_return_empty_iterable() throws Exception {\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_primitive()",
        "snippet": "    @Test public void should_return_primitive() {\n        assertEquals(false, values.returnValueFor(Boolean.TYPE));\n        assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n        assertEquals((byte) 0, values.returnValueFor(Byte.TYPE));\n        assertEquals((short) 0, values.returnValueFor(Short.TYPE));\n        assertEquals(0, values.returnValueFor(Integer.TYPE));\n        assertEquals(0L, values.returnValueFor(Long.TYPE));\n        assertEquals(0F, values.returnValueFor(Float.TYPE));\n        assertEquals(0D, values.returnValueFor(Double.TYPE));\n    }",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 65)",
            "(line 62,col 9)-(line 62,col 70)",
            "(line 63,col 9)-(line 63,col 65)",
            "(line 64,col 9)-(line 64,col 67)",
            "(line 65,col 9)-(line 65,col 61)",
            "(line 66,col 9)-(line 66,col 59)",
            "(line 67,col 9)-(line 67,col 60)",
            "(line 68,col 9)-(line 68,col 61)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_non_zero_for_compareTo_method()",
        "snippet": "    @Test public void should_return_non_zero_for_compareTo_method() {\n        //given\n        Date d = mock(Date.class);\n        d.compareTo(new Date());\n        Invocation compareTo = this.getLastInvocation();\n\n        //when\n        Object result = values.answer(compareTo);\n        \n        //then\n        assertTrue(result != (Object) 0);\n    }",
        "begin_line": 71,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 74,col 32)",
            "(line 75,col 9)-(line 75,col 56)",
            "(line 78,col 9)-(line 78,col 49)",
            "(line 81,col 9)-(line 81,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.should_return_zero_if_mock_is_compared_to_itself()",
        "snippet": "    @Test public void should_return_zero_if_mock_is_compared_to_itself() {\n        //given\n        Date d = mock(Date.class);\n        d.compareTo(d);\n        Invocation compareTo = this.getLastInvocation();\n\n        //when\n        Object result = values.answer(compareTo);\n\n        //then\n        assertEquals(0, result);\n    }",
        "begin_line": 84,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 34)",
            "(line 87,col 9)-(line 87,col 23)",
            "(line 88,col 9)-(line 88,col 56)",
            "(line 91,col 9)-(line 91,col 49)",
            "(line 94,col 9)-(line 94,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest.shouldReturnEmptyArray()",
        "snippet": "    @Test\n    public void shouldReturnEmptyArray() {\n        String[] ret = (String[]) rv.returnValueFor((new String[0]).getClass());\n        assertTrue(ret.getClass().isArray());\n        assertTrue(ret.length == 0);\n    }",
        "begin_line": 14,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 80)",
            "(line 17,col 9)-(line 17,col 45)",
            "(line 18,col 9)-(line 18,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest.shouldReturnEmptyString()",
        "snippet": "    @Test\n    public void shouldReturnEmptyString() {\n        assertEquals(\"\", rv.returnValueFor(String.class));\n    }",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.booleanMethod()",
        "snippet": "    boolean booleanMethod();",
        "begin_line": 9,
        "end_line": 9,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.charMethod()",
        "snippet": "    char charMethod();",
        "begin_line": 10,
        "end_line": 10,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.byteMethod()",
        "snippet": "    byte byteMethod();",
        "begin_line": 11,
        "end_line": 11,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.shortMethod()",
        "snippet": "    short shortMethod();",
        "begin_line": 12,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.intMethod()",
        "snippet": "    int intMethod();",
        "begin_line": 13,
        "end_line": 13,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.longMethod()",
        "snippet": "    long longMethod();",
        "begin_line": 14,
        "end_line": 14,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.floatMethod()",
        "snippet": "    float floatMethod();",
        "begin_line": 15,
        "end_line": 15,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.HasPrimitiveMethods.doubleMethod()",
        "snippet": "    double doubleMethod();",
        "begin_line": 16,
        "end_line": 16,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.should_return_the_usual_default_values_for_primitives()",
        "snippet": "    @Test\n    public void should_return_the_usual_default_values_for_primitives() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n        assertEquals(false  ,   answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n        assertEquals((char) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n        assertEquals((byte) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, \"byteMethod\")));\n        assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"shortMethod\")));\n        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n        assertEquals(0L,        answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n        assertEquals(0f,        answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n        assertEquals(0d,        answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n    }",
        "begin_line": 14,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 56)",
            "(line 17,col 9)-(line 17,col 105)",
            "(line 18,col 9)-(line 18,col 102)",
            "(line 19,col 9)-(line 19,col 102)",
            "(line 20,col 9)-(line 20,col 103)",
            "(line 21,col 9)-(line 21,col 101)",
            "(line 22,col 9)-(line 22,col 102)",
            "(line 23,col 9)-(line 23,col 103)",
            "(line 24,col 9)-(line 24,col 104)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.Foo.get()",
        "snippet": "        Foo get();",
        "begin_line": 29,
        "end_line": 29,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.Foo.withArgs(java.lang.String, java.lang.String)",
        "snippet": "        Foo withArgs(String oneArg, String otherArg);",
        "begin_line": 30,
        "end_line": 30,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.should_return_an_object_that_fails_on_any_method_invocation_for_non_primitives()",
        "snippet": "    @Test\n    public void should_return_an_object_that_fails_on_any_method_invocation_for_non_primitives() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n\n        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n\n        try {\n            smartNull.get();\n            fail();\n        } catch (SmartNullPointerException expected) {}\n    }",
        "begin_line": 33,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 56)",
            "(line 37,col 9)-(line 37,col 76)",
            "(line 39,col 9)-(line 42,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.should_return_an_object_that_allows_object_methods()",
        "snippet": "    @Test\n    public void should_return_an_object_that_allows_object_methods() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n\n        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n\n        assertContains(\"SmartNull returned by\", smartNull + \"\");\n        assertContains(\"foo.get()\", smartNull + \"\");\n    }",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 56)",
            "(line 49,col 9)-(line 49,col 76)",
            "(line 51,col 9)-(line 51,col 64)",
            "(line 52,col 9)-(line 52,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.should_print_the_parameters_when_calling_a_method_with_args()",
        "snippet": "    @Test\n    public void should_print_the_parameters_when_calling_a_method_with_args() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n\n        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"withArgs\", \"oompa\", \"lumpa\"));\n\n        assertContains(\"foo.withArgs\", smartNull + \"\");\n        assertContains(\"oompa\", smartNull + \"\");\n        assertContains(\"lumpa\", smartNull + \"\");\n    }",
        "begin_line": 55,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 56)",
            "(line 59,col 9)-(line 59,col 99)",
            "(line 61,col 9)-(line 61,col 55)",
            "(line 62,col 9)-(line 62,col 48)",
            "(line 63,col 9)-(line 63,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java",
        "signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.should_print_the_parameters_on_SmartNullPointerException_message()",
        "snippet": "    @Test\n    public void should_print_the_parameters_on_SmartNullPointerException_message() throws Throwable {\n        Answer<Object> answer = new ReturnsSmartNulls();\n\n        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"withArgs\", \"oompa\", \"lumpa\"));\n\n        try {\n            smartNull.get();\n            fail();\n        } catch (SmartNullPointerException e) {\n            assertContains(\"oompa\", e.getMessage());\n            assertContains(\"lumpa\", e.getMessage());\n        }\n    }",
        "begin_line": 66,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 56)",
            "(line 70,col 9)-(line 70,col 99)",
            "(line 72,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_validate_null_throwable()",
        "snippet": "    @Test\n    public void should_validate_null_throwable() throws Throwable {\n        try {\n            validator.validate(new ThrowsException(null), new InvocationBuilder().toInvocation());\n            fail();\n        } catch (MockitoException expected) {}\n    }",
        "begin_line": 28,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 33,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_pass_proper_checked_exception()",
        "snippet": "    @Test\n    public void should_pass_proper_checked_exception() throws Throwable {\n        validator.validate(new ThrowsException(new CharacterCodingException()), invocation);\n    }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_invalid_checked_exception()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_invalid_checked_exception() throws Throwable {\n        validator.validate(new ThrowsException(new IOException()), invocation);\n    }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 79)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_pass_RuntimeExceptions()",
        "snippet": "    @Test\n    public void should_pass_RuntimeExceptions() throws Throwable {\n        validator.validate(new ThrowsException(new Error()), invocation);\n        validator.validate(new ThrowsException(new RuntimeException()), invocation);\n    }",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 73)",
            "(line 49,col 9)-(line 49,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_when_return_Value_is_set_for_void_method()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_when_return_Value_is_set_for_void_method() throws Throwable {\n        validator.validate(new Returns(\"one\"), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_when_non_void_method_does_nothing()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_when_non_void_method_does_nothing() throws Throwable {\n        validator.validate(new DoesNothing(), new InvocationBuilder().simpleMethod().toInvocation());\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 101)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_allow_void_return_for_void_method()",
        "snippet": "    @Test\n    public void should_allow_void_return_for_void_method() throws Throwable {\n        validator.validate(new DoesNothing(), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n    }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 107)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_allow_correct_type_of_return_value()",
        "snippet": "    @Test\n    public void should_allow_correct_type_of_return_value() throws Throwable {\n        validator.validate(new Returns(\"one\"), new InvocationBuilder().simpleMethod().toInvocation());\n        validator.validate(new Returns(false), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n        validator.validate(new Returns(Boolean.TRUE), new InvocationBuilder().method(\"booleanObjectReturningMethod\").toInvocation());\n        validator.validate(new Returns(1), new InvocationBuilder().method(\"integerReturningMethod\").toInvocation());\n        validator.validate(new Returns(1L), new InvocationBuilder().method(\"longReturningMethod\").toInvocation());\n        validator.validate(new Returns(1L), new InvocationBuilder().method(\"longObjectReturningMethod\").toInvocation());\n        validator.validate(new Returns(null), new InvocationBuilder().method(\"objectReturningMethodNoArgs\").toInvocation());\n        validator.validate(new Returns(1), new InvocationBuilder().method(\"objectReturningMethodNoArgs\").toInvocation());\n    }",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 102)",
            "(line 70,col 9)-(line 70,col 120)",
            "(line 71,col 9)-(line 71,col 133)",
            "(line 72,col 9)-(line 72,col 116)",
            "(line 73,col 9)-(line 73,col 114)",
            "(line 74,col 9)-(line 74,col 120)",
            "(line 75,col 9)-(line 75,col 124)",
            "(line 76,col 9)-(line 76,col 121)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_on_return_type_mismatch()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_on_return_type_mismatch() throws Throwable {\n        validator.validate(new Returns(\"String\"), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 123)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_on_wrong_primitive()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_on_wrong_primitive() throws Throwable {\n        validator.validate(new Returns(1), new InvocationBuilder().method(\"doubleReturningMethod\").toInvocation());\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 115)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_on_null_with_primitive()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_fail_on_null_with_primitive() throws Throwable {\n        validator.validate(new Returns(null), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 119)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_when_calling_real_method_on_interface()",
        "snippet": "    @Test\n    public void should_fail_when_calling_real_method_on_interface() throws Throwable {\n        //given\n        Invocation invocationOnInterface = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n        try {\n            //when\n            validator.validate(new CallsRealMethods(), invocationOnInterface);\n            //then\n            fail();\n        } catch (MockitoException expected) {}\n    }",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 105)",
            "(line 98,col 9)-(line 103,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_be_OK_when_calling_real_method_on_concrete_class()",
        "snippet": "    @Test\n    public void should_be_OK_when_calling_real_method_on_concrete_class() throws Throwable {\n        //given\n        ArrayList mock = mock(ArrayList.class);\n        mock.clear();\n        Invocation invocationOnClass = new MockitoCore().getLastInvocation();\n        //when\n        validator.validate(new CallsRealMethods(), invocationOnClass);\n        //then no exception is thrown\n    }",
        "begin_line": 106,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 47)",
            "(line 110,col 9)-(line 110,col 21)",
            "(line 111,col 9)-(line 111,col 77)",
            "(line 113,col 9)-(line 113,col 70)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_allow_possible_argument_types()",
        "snippet": "    @Test\n    public void should_allow_possible_argument_types() throws Exception {\n        validator.validate(\n                new ReturnsArgumentAt(0),\n                new InvocationBuilder().method(\"intArgumentReturningInt\").argTypes(int.class).arg(1000).toInvocation()\n        );\n        validator.validate(\n                new ReturnsArgumentAt(0),\n                new InvocationBuilder().method(\"toString\").argTypes(String.class).arg(\"whatever\").toInvocation()\n        );\n        validator.validate(\n                new ReturnsArgumentAt(2),\n                new InvocationBuilder().method(\"varargsObject\")\n                                       .argTypes(int.class, Object[].class)\n                                       .args(1000, \"Object\", \"Object\")\n                                       .toInvocation()\n        );\n        validator.validate(\n                new ReturnsArgumentAt(1),\n                new InvocationBuilder().method(\"threeArgumentMethod\")\n                                       .argTypes(int.class, Object.class, String.class)\n                                       .args(1000, \"Object\", \"String\")\n                                       .toInvocation()\n        );\n    }",
        "begin_line": 117,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 122,col 10)",
            "(line 123,col 9)-(line 126,col 10)",
            "(line 127,col 9)-(line 133,col 10)",
            "(line 134,col 9)-(line 140,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_if_index_is_not_in_range_for_one_arg_invocation()",
        "snippet": "    @Test\n    public void should_fail_if_index_is_not_in_range_for_one_arg_invocation() throws Throwable {\n        try {\n            validator.validate(new ReturnsArgumentAt(30), new InvocationBuilder().method(\"oneArg\").arg(\"A\").toInvocation());\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"invalid argument index\")\n                    .containsIgnoringCase(\"iMethods.oneArg\")\n                    .containsIgnoringCase(\"[0] String\")\n                    .containsIgnoringCase(\"position\")\n                    .contains(\"30\");\n        }\n    }",
        "begin_line": 143,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 155,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_if_index_is_not_in_range_for_example_with_no_arg_invocation()",
        "snippet": "    @Test\n    public void should_fail_if_index_is_not_in_range_for_example_with_no_arg_invocation() throws Throwable {\n        try {\n            validator.validate(\n                    new ReturnsArgumentAt(ReturnsArgumentAt.LAST_ARGUMENT),\n                    new InvocationBuilder().simpleMethod().toInvocation()\n            );\n            fail();\n        } catch (MockitoException e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"invalid argument index\")\n                    .containsIgnoringCase(\"iMethods.simpleMethod\")\n                    .containsIgnoringCase(\"no arguments\")\n                    .containsIgnoringCase(\"last parameter wanted\");\n        }\n    }",
        "begin_line": 158,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 172,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_if_argument_type_of_signature_is_incompatible_with_return_type()",
        "snippet": "    @Test\n    public void should_fail_if_argument_type_of_signature_is_incompatible_with_return_type() throws Throwable {\n        try {\n            validator.validate(\n                    new ReturnsArgumentAt(2),\n                    new InvocationBuilder().method(\"varargsReturningString\")\n                                           .argTypes(Object[].class)\n                                           .args(\"anyString\", new Object(), \"anyString\")\n                                           .toInvocation()\n            );\n            fail();\n        } catch (WrongTypeOfReturnValue e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"argument of type\")\n                    .containsIgnoringCase(\"Object\")\n                    .containsIgnoringCase(\"varargsReturningString\")\n                    .containsIgnoringCase(\"should return\")\n                    .containsIgnoringCase(\"String\")\n                    .containsIgnoringCase(\"possible argument indexes\");\n        }\n    }",
        "begin_line": 175,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 194,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_if_returned_value_of_answer_is_incompatible_with_return_type()",
        "snippet": "    @Test\n    public void should_fail_if_returned_value_of_answer_is_incompatible_with_return_type() throws Throwable {\n        try {\n            validator.validateDefaultAnswerReturnedValue(\n                    new InvocationBuilder().method(\"toString\").toInvocation(),\n                    AWrongType.WRONG_TYPE\n            );\n            fail();\n        } catch (WrongTypeOfReturnValue e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"Default answer returned a result with the wrong type\")\n                    .containsIgnoringCase(\"AWrongType cannot be returned by toString()\")\n                    .containsIgnoringCase(\"toString() should return String\");\n        }\n    }",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 210,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.AnswersValidatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java",
        "signature": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_not_fail_if_returned_value_of_answer_is_null()",
        "snippet": "    @Test\n    public void should_not_fail_if_returned_value_of_answer_is_null() throws Throwable {\n        validator.validateDefaultAnswerReturnedValue(\n                new InvocationBuilder().method(\"toString\").toInvocation(),\n                null\n        );\n    }",
        "begin_line": 213,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 218,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.MethodInfoTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/MethodInfoTest.java",
        "signature": "org.mockito.internal.stubbing.answers.MethodInfoTest.shouldKnowValidThrowables()",
        "snippet": "    @Test\n    public void shouldKnowValidThrowables() throws Exception {\n        //when\n        Invocation invocation = new InvocationBuilder().method(\"canThrowException\").toInvocation();\n        MethodInfo info = new MethodInfo(invocation);\n\n        //then\n        assertFalse(info.isValidException(new Exception()));\n        assertTrue(info.isValidException(new CharacterCodingException()));\n    }",
        "begin_line": 20,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 99)",
            "(line 24,col 9)-(line 24,col 53)",
            "(line 27,col 9)-(line 27,col 60)",
            "(line 28,col 9)-(line 28,col 74)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java",
        "signature": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_be_able_to_return_the_first_parameter()",
        "snippet": "    @Test\n    public void should_be_able_to_return_the_first_parameter() throws Throwable {\n        assertThat(new ReturnsArgumentAt(0).answer(invocationWith(\"A\", \"B\"))).isEqualTo(\"A\");\n    }",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java",
        "signature": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_be_able_to_return_the_second_parameter()",
        "snippet": "    @Test\n    public void should_be_able_to_return_the_second_parameter()\n            throws Throwable {\n        assertThat(new ReturnsArgumentAt(1).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"B\");\n    }",
        "begin_line": 19,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 98)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java",
        "signature": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_be_able_to_return_the_last_parameter()",
        "snippet": "    @Test\n    public void should_be_able_to_return_the_last_parameter() throws Throwable {\n        assertThat(new ReturnsArgumentAt(-1).answer(invocationWith(\"A\"))).isEqualTo(\"A\");\n        assertThat(new ReturnsArgumentAt(-1).answer(invocationWith(\"A\", \"B\"))).isEqualTo(\"B\");\n    }",
        "begin_line": 25,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 89)",
            "(line 28,col 9)-(line 28,col 94)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java",
        "signature": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_be_able_to_return_the_specified_parameter()",
        "snippet": "    @Test\n    public void should_be_able_to_return_the_specified_parameter() throws Throwable {\n        assertThat(new ReturnsArgumentAt(0).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"A\");\n        assertThat(new ReturnsArgumentAt(1).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"B\");\n        assertThat(new ReturnsArgumentAt(2).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"C\");\n    }",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 98)",
            "(line 34,col 9)-(line 34,col 98)",
            "(line 35,col 9)-(line 35,col 98)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java",
        "signature": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_raise_an_exception_if_index_is_not_in_allowed_range_at_creation_time()",
        "snippet": "    @Test\n    public void should_raise_an_exception_if_index_is_not_in_allowed_range_at_creation_time() throws Throwable {\n        try {\n            new ReturnsArgumentAt(-30);\n            fail();\n        } catch (Exception e) {\n            assertThat(e.getMessage())\n                    .containsIgnoringCase(\"argument index\")\n                    .containsIgnoringCase(\"positive number\")\n                    .contains(\"1\")\n                    .containsIgnoringCase(\"last argument\");\n        }\n    }",
        "begin_line": 38,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 49,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java",
        "signature": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.invocationWith(java.lang.Object...)",
        "snippet": "    private static InvocationOnMock invocationWith(Object... parameters) {\n        return new InvocationBuilder().method(\"varargsReturningString\").argTypes(Object[].class)\n             .args(parameters).toInvocation();\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 54,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowSettingNullInterface()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowSettingNullInterface() {\n        mockSettingsImpl.extraInterfaces(List.class, null);\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNonInterfaces()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowNonInterfaces() {\n        mockSettingsImpl.extraInterfaces(List.class, LinkedList.class);\n    }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowUsingTheSameInterfaceAsExtra()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowUsingTheSameInterfaceAsExtra() {\n        mockSettingsImpl.extraInterfaces(List.class, LinkedList.class);\n    }",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowEmptyExtraInterfaces()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowEmptyExtraInterfaces() {\n        mockSettingsImpl.extraInterfaces();\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNullArrayOfExtraInterfaces()",
        "snippet": "    @Test(expected=MockitoException.class)\n    public void shouldNotAllowNullArrayOfExtraInterfaces() {\n        mockSettingsImpl.extraInterfaces((Class[]) null);\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 57)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldAllowMultipleInterfaces()",
        "snippet": "    @Test\n    public void shouldAllowMultipleInterfaces() {\n        //when\n        mockSettingsImpl.extraInterfaces(List.class, Set.class);\n        \n        //then\n        assertEquals(2, mockSettingsImpl.getExtraInterfaces().size());\n        assertTrue(mockSettingsImpl.getExtraInterfaces().contains(List.class));\n        assertTrue(mockSettingsImpl.getExtraInterfaces().contains(Set.class));\n    }",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 64)",
            "(line 56,col 9)-(line 56,col 70)",
            "(line 57,col 9)-(line 57,col 79)",
            "(line 58,col 9)-(line 58,col 78)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldSetMockToBeSerializable()",
        "snippet": "    @Test\n    public void shouldSetMockToBeSerializable() throws Exception {\n        //when\n        mockSettingsImpl.serializable();\n\n        //then\n        assertTrue(mockSettingsImpl.isSerializable());\n    }",
        "begin_line": 61,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 40)",
            "(line 67,col 9)-(line 67,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldKnowIfIsSerializable()",
        "snippet": "    @Test\n    public void shouldKnowIfIsSerializable() throws Exception {\n        //given\n        assertFalse(mockSettingsImpl.isSerializable());\n\n        //when\n        mockSettingsImpl.serializable();\n\n        //then\n        assertTrue(mockSettingsImpl.isSerializable());\n    }",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 55)",
            "(line 76,col 9)-(line 76,col 40)",
            "(line 79,col 9)-(line 79,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldAddVerboseLoggingListener()",
        "snippet": "    @Test\n    public void shouldAddVerboseLoggingListener() {\n        //given\n        assertFalse(mockSettingsImpl.hasInvocationListeners());\n\n        //when\n        mockSettingsImpl.verboseLogging();\n\n        //then\n        assertContainsType(mockSettingsImpl.getInvocationListeners(), VerboseMockInvocationLogger.class);\n    }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 63)",
            "(line 88,col 9)-(line 88,col 42)",
            "(line 91,col 9)-(line 91,col 105)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldAddVerboseLoggingListenerOnlyOnce()",
        "snippet": "    @Test\n    public void shouldAddVerboseLoggingListenerOnlyOnce() {\n        //given\n        assertFalse(mockSettingsImpl.hasInvocationListeners());\n        \n        //when\n        mockSettingsImpl.verboseLogging().verboseLogging();\n        \n        //then\n        Assertions.assertThat(mockSettingsImpl.getInvocationListeners()).hasSize(1);\n    }",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 63)",
            "(line 100,col 9)-(line 100,col 59)",
            "(line 103,col 9)-(line 103,col 84)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNullListener()",
        "snippet": "    @SuppressWarnings(\"all\")\n    @Test(expected=MockitoException.class)\n    public void shouldNotAllowNullListener() {\n        mockSettingsImpl.invocationListeners((InvocationListener[])null);\n    }",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 73)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldAddInvocationListener()",
        "snippet": "    @Test\n    public void shouldAddInvocationListener() {\n        //given\n        assertFalse(mockSettingsImpl.hasInvocationListeners());\n        \n        //when\n        mockSettingsImpl.invocationListeners(invocationListener);\n        \n        //then\n        Assertions.assertThat(mockSettingsImpl.getInvocationListeners()).contains(invocationListener);\n    }",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 63)",
            "(line 118,col 9)-(line 118,col 65)",
            "(line 121,col 9)-(line 121,col 102)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.canAddDuplicateInvocationListeners_ItsNotOurBusinessThere()",
        "snippet": "    @Test\n    public void canAddDuplicateInvocationListeners_ItsNotOurBusinessThere() {\n        //given\n        assertFalse(mockSettingsImpl.hasInvocationListeners());\n        \n        //when\n        mockSettingsImpl.invocationListeners(invocationListener, invocationListener).invocationListeners(invocationListener);\n        \n        //then\n        Assertions.assertThat(mockSettingsImpl.getInvocationListeners()).containsSequence(invocationListener, invocationListener, invocationListener);\n    }",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 63)",
            "(line 130,col 9)-(line 130,col 125)",
            "(line 133,col 9)-(line 133,col 150)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldReportErrorWhenAddingNoInvocationListeners()",
        "snippet": "    @Test\n    public void shouldReportErrorWhenAddingNoInvocationListeners() throws Exception {\n        try {\n            mockSettingsImpl.invocationListeners();\n            fail();\n        } catch (Exception e) {\n            Assertions.assertThat(e.getMessage()).contains(\"at least one listener\");\n        }\n    }",
        "begin_line": 136,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 143,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.MockSettingsImplTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/MockSettingsImplTest.java",
        "signature": "org.mockito.internal.creation.MockSettingsImplTest.shouldReportErrorWhenAddingANullInvocationListener()",
        "snippet": "    @Test\n    public void shouldReportErrorWhenAddingANullInvocationListener() throws Exception {\n        try {\n            mockSettingsImpl.invocationListeners(invocationListener, null);\n            fail();\n        } catch (Exception e) {\n            Assertions.assertThat(e.getMessage()).contains(\"does not accept null\");\n        }\n    }",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 153,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.setup()",
        "snippet": "    @Before\n    public void setup() throws Exception {\n        someMethod = Something.class.getMethod(\"someMethod\", Object.class);\n        otherMethod = Something.class.getMethod(\"otherMethod\", Object.class);\n        delegatingMethod = new DelegatingMethod(someMethod);\n    }",
        "begin_line": 14,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 75)",
            "(line 17,col 9)-(line 17,col 77)",
            "(line 18,col 9)-(line 18,col 60)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_false_when_not_equal()",
        "snippet": "    @Test\n    public void equals_should_return_false_when_not_equal() throws Exception {\n        DelegatingMethod notEqual = new DelegatingMethod(otherMethod);\n        assertFalse(delegatingMethod.equals(notEqual));\n    }",
        "begin_line": 21,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 70)",
            "(line 24,col 9)-(line 24,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_true_when_equal()",
        "snippet": "    @Test\n    public void equals_should_return_true_when_equal() throws Exception {\n        DelegatingMethod equal = new DelegatingMethod(someMethod);\n        assertTrue(delegatingMethod.equals(equal));\n    }",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 66)",
            "(line 30,col 9)-(line 30,col 51)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_true_when_self()",
        "snippet": "    @Test\n    public void equals_should_return_true_when_self() throws Exception {\n        assertTrue(delegatingMethod.equals(delegatingMethod));\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_false_when_not_equal_to_method()",
        "snippet": "    @Test\n    public void equals_should_return_false_when_not_equal_to_method() throws Exception {\n        assertFalse(delegatingMethod.equals(otherMethod));\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_true_when_equal_to_method()",
        "snippet": "    @Test\n    public void equals_should_return_true_when_equal_to_method() throws Exception {\n        assertTrue(delegatingMethod.equals(someMethod));\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.Something.someMethod(java.lang.Object)",
        "snippet": "        public Object someMethod(Object param);",
        "begin_line": 50,
        "end_line": 50,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.creation.DelegatingMethodTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/DelegatingMethodTest.java",
        "signature": "org.mockito.internal.creation.DelegatingMethodTest.Something.otherMethod(java.lang.Object)",
        "snippet": "        public Object otherMethod(Object param);",
        "begin_line": 52,
        "end_line": 52,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest.SomeClass2.SomeClass2(java.lang.String)",
        "snippet": "        SomeClass2(String x) {}",
        "begin_line": 12,
        "end_line": 12,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest.creates_instances()",
        "snippet": "    @Test public void creates_instances() {\n        assertEquals(new ConstructorInstantiator(null).newInstance(SomeClass.class).getClass(), SomeClass.class);\n    }",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 113)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest.creates_instances_of_inner_classes()",
        "snippet": "    @Test public void creates_instances_of_inner_classes() {\n        assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);\n        assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);\n    }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 123)",
            "(line 21,col 9)-(line 21,col 136)"
        ]
    },
    {
        "class_name": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java",
        "signature": "org.mockito.internal.creation.instance.ConstructorInstantiatorTest.explains_when_constructor_cannot_be_found()",
        "snippet": "    @Test public void explains_when_constructor_cannot_be_found() {\n        try {\n            new ConstructorInstantiator(null).newInstance(SomeClass2.class);\n            fail();\n        } catch (InstantiationException e) {\n            assertContains(\"Unable to create instance of 'SomeClass2'.\\n\" +\n                    \"Please ensure it has 0-arg constructor which invokes cleanly.\", e.getMessage());\n        }\n    }",
        "begin_line": 24,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 31,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.reset()",
        "snippet": "    @After\n    public void reset() throws Exception {\n        withConstructor = null;\n        withoutConstructor = null;\n    }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 31)",
            "(line 29,col 9)-(line 29,col 34)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.should_not_allow_null_on_field()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void should_not_allow_null_on_field() {\n        MockInjection.onField((Field) null, this);\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.should_not_allow_null_on_fields()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void should_not_allow_null_on_fields() {\n        MockInjection.onFields((Set<Field>) null, this);\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 56)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.should_not_allow_null_on_instance_owning_the_field()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void should_not_allow_null_on_instance_owning_the_field() throws Exception {\n        MockInjection.onField(field(\"withConstructor\"), null);\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 62)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.should_not_allow_null_on_mocks()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void should_not_allow_null_on_mocks() throws Exception {\n        MockInjection.onField(field(\"withConstructor\"), this).withMocks(null);\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 78)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.can_try_constructor_injection()",
        "snippet": "    @Test\n    public void can_try_constructor_injection() throws Exception {\n        MockInjection.onField(field(\"withConstructor\"), this).withMocks(oneSetMock()).tryConstructorInjection().apply();\n\n        assertThat(withConstructor.initializedWithConstructor).isEqualTo(true);\n    }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 120)",
            "(line 57,col 9)-(line 57,col 79)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.should_not_fail_if_constructor_injection_is_not_possible()",
        "snippet": "    @Test\n    public void should_not_fail_if_constructor_injection_is_not_possible() throws Exception {\n        MockInjection.onField(field(\"withoutConstructor\"), this).withMocks(otherKindOfMocks()).tryConstructorInjection().apply();\n\n        assertThat(withoutConstructor).isNull();\n    }",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 129)",
            "(line 64,col 9)-(line 64,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.can_try_property_or_setter_injection()",
        "snippet": "    @Test\n    public void can_try_property_or_setter_injection() throws Exception {\n        MockInjection.onField(field(\"withoutConstructor\"), this).withMocks(oneSetMock()).tryPropertyOrFieldInjection().apply();\n\n        assertThat(withoutConstructor.theSet).isNotNull();\n    }",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 127)",
            "(line 71,col 9)-(line 71,col 58)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.should_not_fail_if_property_or_field_injection_is_not_possible()",
        "snippet": "    @Test\n    public void should_not_fail_if_property_or_field_injection_is_not_possible() throws Exception {\n        MockInjection.onField(field(\"withoutConstructor\"), this).withMocks(otherKindOfMocks()).tryPropertyOrFieldInjection().apply();\n\n        assertThat(withoutConstructor.theSet).isNull();\n    }",
        "begin_line": 74,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 133)",
            "(line 78,col 9)-(line 78,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.oneSetMock()",
        "snippet": "    private Set oneSetMock() {\n        return Collections.singleton(mock(Set.class));\n    }",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.otherKindOfMocks()",
        "snippet": "    private Set otherKindOfMocks() {\n        return Collections.singleton(mock(Observer.class));\n    }",
        "begin_line": 85,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.field(java.lang.String)",
        "snippet": "    private Field field(String field) throws NoSuchFieldException {\n        return getClass().getDeclaredField(field);\n    }",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 50)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.MockInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/MockInjectionTest.java",
        "signature": "org.mockito.internal.configuration.MockInjectionTest.AnObjectWithConstructor.AnObjectWithConstructor(java.util.Set<java.lang.String>)",
        "snippet": "        public AnObjectWithConstructor(Set<String> strings) {\n            initializedWithConstructor = true;\n        }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 13)-(line 97,col 46)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.ConfigurationAccess",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/ConfigurationAccess.java",
        "signature": "org.mockito.internal.configuration.ConfigurationAccess.getConfig()",
        "snippet": "    public static MockitoConfiguration getConfig() {\n        return (MockitoConfiguration) new GlobalConfiguration().getIt();\n    }",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 72)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.ClassPathLoaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/ClassPathLoaderTest.java",
        "signature": "org.mockito.internal.configuration.ClassPathLoaderTest.shouldReadConfigurationClassFromClassPath()",
        "snippet": "    @Test\n    public void shouldReadConfigurationClassFromClassPath() {\n        ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n            public Object answer(InvocationOnMock invocation) {\n                return \"foo\";\n            }});\n\n        IMethods mock = mock(IMethods.class);\n        assertEquals(\"foo\", mock.simpleMethod());\n    }",
        "begin_line": 14,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 19,col 16)",
            "(line 21,col 9)-(line 21,col 45)",
            "(line 22,col 9)-(line 22,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.ClassPathLoaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/ClassPathLoaderTest.java",
        "signature": "org.mockito.internal.configuration.ClassPathLoaderTest.Anonymous-ad239d33-f74a-4b28-b934-dd968cb00584.answer(org.mockito.invocation.InvocationOnMock)",
        "snippet": "            public Object answer(InvocationOnMock invocation) {\n                return \"foo\";\n            }});",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 18,col 17)-(line 18,col 29)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.ConstructorInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java",
        "signature": "org.mockito.internal.configuration.injection.ConstructorInjectionTest.initialize_dependencies()",
        "snippet": "    @Before\n    public void initialize_dependencies() {\n        underTest = new ConstructorInjection(resolver);\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.ConstructorInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java",
        "signature": "org.mockito.internal.configuration.injection.ConstructorInjectionTest.should_do_the_trick_of_instantiating()",
        "snippet": "    @Test\n    public void should_do_the_trick_of_instantiating() throws Exception {\n        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[] { observer });\n\n        boolean result = underTest.process(field(\"whatever\"), this, newSetOf(observer));\n\n        assertTrue(result);\n        assertNotNull(whatever);\n    }",
        "begin_line": 39,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 117)",
            "(line 43,col 9)-(line 43,col 88)",
            "(line 45,col 9)-(line 45,col 27)",
            "(line 46,col 9)-(line 46,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.ConstructorInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java",
        "signature": "org.mockito.internal.configuration.injection.ConstructorInjectionTest.newSetOf(java.lang.Object)",
        "snippet": "    private Set<Object> newSetOf(Object item) {\n        HashSet<Object> mocks = new HashSet<Object>();\n        mocks.add(item);\n        return mocks;\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 54)",
            "(line 51,col 9)-(line 51,col 24)",
            "(line 52,col 9)-(line 52,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.ConstructorInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java",
        "signature": "org.mockito.internal.configuration.injection.ConstructorInjectionTest.field(java.lang.String)",
        "snippet": "    private Field field(String fieldName) throws NoSuchFieldException {\n        return this.getClass().getDeclaredField(fieldName);\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.ConstructorInjectionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java",
        "signature": "org.mockito.internal.configuration.injection.ConstructorInjectionTest.ArgConstructor.ArgConstructor(java.util.Observer)",
        "snippet": "        ArgConstructor(Observer observer) {}",
        "begin_line": 60,
        "end_line": 60,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java",
        "signature": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest.should_return_object_matching_given_types()",
        "snippet": "    @Test\n    public void should_return_object_matching_given_types() throws Exception {\n        ConstructorInjection.SimpleArgumentResolver resolver =\n                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashSet(), new ByteArrayOutputStream(), new HashMap()));\n\n        Object[] resolvedInstance = resolver.resolveTypeInstances(Set.class, Map.class, OutputStream.class);\n\n        assertEquals(3, resolvedInstance.length);\n        assertTrue(resolvedInstance[0] instanceof Set);\n        assertTrue(resolvedInstance[1] instanceof Map);\n        assertTrue(resolvedInstance[2] instanceof OutputStream);\n    }",
        "begin_line": 20,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 23,col 133)",
            "(line 25,col 9)-(line 25,col 108)",
            "(line 27,col 9)-(line 27,col 49)",
            "(line 28,col 9)-(line 28,col 55)",
            "(line 29,col 9)-(line 29,col 55)",
            "(line 30,col 9)-(line 30,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java",
        "signature": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest.should_return_null_when_match_is_not_possible_on_given_types()",
        "snippet": "    @Test\n    public void should_return_null_when_match_is_not_possible_on_given_types() throws Exception {\n        ConstructorInjection.SimpleArgumentResolver resolver =\n                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashSet(), new ByteArrayOutputStream()));\n\n        Object[] resolvedInstance = resolver.resolveTypeInstances(Set.class, Map.class, OutputStream.class);\n\n        assertEquals(3, resolvedInstance.length);\n        assertTrue(resolvedInstance[0] instanceof Set);\n        assertNull(resolvedInstance[1]);\n        assertTrue(resolvedInstance[2] instanceof OutputStream);\n    }",
        "begin_line": 33,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 36,col 118)",
            "(line 38,col 9)-(line 38,col 108)",
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java",
        "signature": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest.should_return_null_when_types_are_primitives()",
        "snippet": "    @Test\n    public void should_return_null_when_types_are_primitives() throws Exception {\n        ConstructorInjection.SimpleArgumentResolver resolver =\n                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashMap(), new TreeSet()));\n\n        Object[] resolvedInstance = resolver.resolveTypeInstances(Set.class, Map.class, Boolean.class);\n\n        assertEquals(3, resolvedInstance.length);\n        assertTrue(resolvedInstance[0] instanceof Set);\n        assertTrue(resolvedInstance[1] instanceof Map);\n        assertNull(resolvedInstance[2]);\n    }",
        "begin_line": 46,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 49,col 104)",
            "(line 51,col 9)-(line 51,col 103)",
            "(line 53,col 9)-(line 53,col 49)",
            "(line 54,col 9)-(line 54,col 55)",
            "(line 55,col 9)-(line 55,col 55)",
            "(line 56,col 9)-(line 56,col 40)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java",
        "signature": "org.mockito.internal.configuration.injection.SimpleArgumentResolverTest.newSetOf(java.lang.Object...)",
        "snippet": "    private Set<Object> newSetOf(Object... objects) {\n        return new HashSet<Object>(Arrays.asList(objects));\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 59)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFileReaderTest.no_class_in_resource()",
        "snippet": "    @Test\n    public void no_class_in_resource() throws IOException {\n        //no class\n        assertNull(reader.readPluginClass(impl(\"\")));\n        assertNull(reader.readPluginClass(impl(\"  \")));\n        assertNull(reader.readPluginClass(impl(\" \\n \")));\n\n        //commented out\n        assertNull(reader.readPluginClass(impl(\"#foo\")));\n        assertNull(reader.readPluginClass(impl(\"  # foo  \")));\n        assertNull(reader.readPluginClass(impl(\"  # # # java.langString # \")));\n        assertNull(reader.readPluginClass(impl(\"  \\n # foo \\n # foo \\n \")));\n    }",
        "begin_line": 27,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 53)",
            "(line 31,col 9)-(line 31,col 55)",
            "(line 32,col 9)-(line 32,col 57)",
            "(line 35,col 9)-(line 35,col 57)",
            "(line 36,col 9)-(line 36,col 62)",
            "(line 37,col 9)-(line 37,col 79)",
            "(line 38,col 9)-(line 38,col 76)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFileReaderTest.impl(java.lang.String)",
        "snippet": "    private InputStream impl(String s) {\n        return new ByteArrayInputStream(s.getBytes());\n    }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 54)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFileReaderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFileReaderTest.reads_class_name()",
        "snippet": "    @Test\n    public void reads_class_name() throws IOException {\n        assertEquals(\"java.lang.String\", reader.readPluginClass(impl(\"java.lang.String\")));\n        assertEquals(\"x\", reader.readPluginClass(impl(\"x\")));\n        assertEquals(\"x y z\", reader.readPluginClass(impl(\" x y z \")));\n        assertEquals(\"foo.Foo\", reader.readPluginClass(impl(\" #my class\\n  foo.Foo \\n #other class \")));\n        assertEquals(\"foo.Foo\", reader.readPluginClass(impl(\"foo.Foo  # cool class\")));\n    }",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 91)",
            "(line 48,col 9)-(line 48,col 61)",
            "(line 49,col 9)-(line 49,col 71)",
            "(line 50,col 9)-(line 50,col 104)",
            "(line 51,col 9)-(line 51,col 87)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.empty_resources()",
        "snippet": "    @Test public void empty_resources() {\n        assertNull(finder.findPluginClass((Iterable) asList()));\n    }",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 64)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.no_valid_impl()",
        "snippet": "    @Test public void no_valid_impl() throws Exception {\n        File f = tmp.newFile();\n\n        //when\n        IOUtil.writeText(\"  \\n  \", f);\n\n        //then\n        assertNull(finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n    }",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 31)",
            "(line 33,col 9)-(line 33,col 38)",
            "(line 36,col 9)-(line 36,col 81)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.single_implementation()",
        "snippet": "    @Test public void single_implementation() throws Exception {\n        File f = tmp.newFile();\n        when(switcher.isEnabled(\"foo.Foo\")).thenReturn(true);\n\n        //when\n        IOUtil.writeText(\"  foo.Foo  \", f);\n\n        //then\n        assertEquals(\"foo.Foo\", finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n    }",
        "begin_line": 39,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 31)",
            "(line 41,col 9)-(line 41,col 61)",
            "(line 44,col 9)-(line 44,col 43)",
            "(line 47,col 9)-(line 47,col 94)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.single_implementation_disabled()",
        "snippet": "    @Test public void single_implementation_disabled() throws Exception {\n        File f = tmp.newFile();\n        when(switcher.isEnabled(\"foo.Foo\")).thenReturn(false);\n\n        //when\n        IOUtil.writeText(\"  foo.Foo  \", f);\n\n        //then\n        assertEquals(null, finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n    }",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 31)",
            "(line 52,col 9)-(line 52,col 62)",
            "(line 55,col 9)-(line 55,col 43)",
            "(line 58,col 9)-(line 58,col 89)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.multiple_implementations_only_one_enabled()",
        "snippet": "    @Test public void multiple_implementations_only_one_enabled() throws Exception {\n        File f1 = tmp.newFile(); File f2 = tmp.newFile();\n\n        when(switcher.isEnabled(\"Bar\")).thenReturn(true);\n\n        //when\n        IOUtil.writeText(\"Foo\", f1); IOUtil.writeText(\"Bar\", f2);\n\n        //then\n        assertEquals(\"Bar\", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));\n    }",
        "begin_line": 61,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 32)",
            "(line 62,col 34)-(line 62,col 57)",
            "(line 64,col 9)-(line 64,col 57)",
            "(line 67,col 9)-(line 67,col 36)",
            "(line 67,col 38)-(line 67,col 65)",
            "(line 70,col 9)-(line 70,col 111)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.multiple_implementations_only_one_useful()",
        "snippet": "    @Test public void multiple_implementations_only_one_useful() throws Exception {\n        File f1 = tmp.newFile(); File f2 = tmp.newFile();\n\n        when(switcher.isEnabled(anyString())).thenReturn(true);\n\n        //when\n        IOUtil.writeText(\"   \", f1); IOUtil.writeText(\"X\", f2);\n\n        //then\n        assertEquals(\"X\", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));\n    }",
        "begin_line": 73,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 32)",
            "(line 74,col 34)-(line 74,col 57)",
            "(line 76,col 9)-(line 76,col 63)",
            "(line 79,col 9)-(line 79,col 36)",
            "(line 79,col 38)-(line 79,col 63)",
            "(line 82,col 9)-(line 82,col 109)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.multiple_empty_implementations()",
        "snippet": "    @Test public void multiple_empty_implementations() throws Exception {\n        File f1 = tmp.newFile(); File f2 = tmp.newFile();\n\n        when(switcher.isEnabled(anyString())).thenReturn(true);\n\n        //when\n        IOUtil.writeText(\"   \", f1); IOUtil.writeText(\"\\n\", f2);\n\n        //then\n        assertEquals(null, finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));\n    }",
        "begin_line": 85,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 32)",
            "(line 86,col 34)-(line 86,col 57)",
            "(line 88,col 9)-(line 88,col 63)",
            "(line 91,col 9)-(line 91,col 36)",
            "(line 91,col 38)-(line 91,col 64)",
            "(line 94,col 9)-(line 94,col 110)"
        ]
    },
    {
        "class_name": "org.mockito.internal.configuration.plugins.PluginFinderTest",
        "child_classes": [],
        "src_path": "test/org/mockito/internal/configuration/plugins/PluginFinderTest.java",
        "signature": "org.mockito.internal.configuration.plugins.PluginFinderTest.problems_loading_impl()",
        "snippet": "    @Test public void problems_loading_impl() throws Exception {\n        when(switcher.isEnabled(anyString())).thenThrow(new RuntimeException(\"Boo!\"));\n\n        try {\n            //when\n            finder.findPluginClass((Iterable) asList(new File(\"xxx\").toURI().toURL()));\n            //then\n            fail();\n        } catch(Exception e) {\n            assertContains(\"xxx\", e.getMessage());\n            e.getCause().getMessage().equals(\"Boo!\");\n        }\n    }",
        "begin_line": 97,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 86)",
            "(line 100,col 9)-(line 108,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.DummyTest.dummy()",
        "snippet": "        @Test public void dummy() throws Exception {}",
        "begin_line": 26,
        "end_line": 26,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.RunNotifierStub.addListener(org.junit.runner.notification.RunListener)",
        "snippet": "        @Override\n        public void addListener(RunListener listener) {\n            addedListeners.add(listener);\n        }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 13)-(line 35,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithDefaultRunner()",
        "snippet": "    @Test\n    public void shouldValidateWithDefaultRunner() throws Exception {\n        //given\n        runner = new MockitoJUnitRunner(DummyTest.class);\n\n        //when\n        runner.run(notifier);\n        \n        //then\n        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n    }",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 57)",
            "(line 45,col 9)-(line 45,col 29)",
            "(line 48,col 9)-(line 48,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithD44Runner()",
        "snippet": "    @Test\n    public void shouldValidateWithD44Runner() throws Exception {\n        //given\n        runner = new MockitoJUnit44Runner(DummyTest.class);\n\n        //when\n        runner.run(notifier);\n        \n        //then\n        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 59)",
            "(line 57,col 9)-(line 57,col 29)",
            "(line 60,col 9)-(line 60,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.runners.RunnersValidateFrameworkUsageTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java",
        "signature": "org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithVerboseRunner()",
        "snippet": "    @Test\n    public void shouldValidateWithVerboseRunner() throws Exception {\n        //given\n        runner = new ConsoleSpammingMockitoJUnitRunner(DummyTest.class);\n        \n        //when\n        runner.run(notifier);\n        \n        //then\n        assertEquals(2, notifier.addedListeners.size());\n        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n    }",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 72)",
            "(line 69,col 9)-(line 69,col 29)",
            "(line 72,col 9)-(line 72,col 56)",
            "(line 73,col 9)-(line 73,col 92)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.setup()",
        "snippet": "    @Before\n    public void setup() throws InitializationError {\n        loggerStub = new MockitoLoggerStub();\n        notifier = new RunNotifier();\n    }",
        "begin_line": 24,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 45)",
            "(line 27,col 9)-(line 27,col 37)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldDelegateToGetDescription()",
        "snippet": "    @Test\n    public void shouldDelegateToGetDescription() throws Exception {\n        //given\n        final Description expectedDescription = Description.createSuiteDescription(this.getClass());\n        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n            public Description getDescription() {\n                return expectedDescription;\n            }\n        });\n        \n        //when\n        Description description = runner.getDescription();\n        \n        //then\n        assertEquals(expectedDescription, description);\n    }",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 100)",
            "(line 36,col 9)-(line 40,col 11)",
            "(line 43,col 9)-(line 43,col 58)",
            "(line 46,col 9)-(line 46,col 55)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.Anonymous-6cd100bb-9bdc-41f3-89df-52f07b70211c.getDescription()",
        "snippet": "            public Description getDescription() {\n                return expectedDescription;\n            }",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 17)-(line 38,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.MockitoLoggerStub.log(java.lang.Object)",
        "snippet": "        public void log(Object what) {\n            super.log(what);\n            loggedInfo.append(what);\n        }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 13)-(line 54,col 28)",
            "(line 55,col 13)-(line 55,col 36)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.MockitoLoggerStub.getLoggedInfo()",
        "snippet": "        public String getLoggedInfo() {\n            return loggedInfo.toString();\n        }",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 13)-(line 59,col 41)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.RunnerImplStub.getDescription()",
        "snippet": "        public Description getDescription() {\n            return null;\n        }",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 24)"
        ]
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.RunnerImplStub.run(org.junit.runner.notification.RunNotifier)",
        "snippet": "        public void run(RunNotifier notifier) {}",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest",
        "child_classes": [],
        "src_path": "test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java",
        "signature": "org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.RunnerImplStub.filter(org.junit.runner.manipulation.Filter)",
        "snippet": "        public void filter(Filter filter) throws NoTestsRemainException {}",
        "begin_line": 71,
        "end_line": 71,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.verification.TimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockito/verification/TimeoutTest.java",
        "signature": "org.mockito.verification.TimeoutTest.should_pass_when_verification_passes()",
        "snippet": "    @Test\n    public void should_pass_when_verification_passes() {\n        Timeout t = new Timeout(1, mode, timer);\n\n        when(timer.isCounting()).thenReturn(true);\n        doNothing().when(mode).verify(data);\n\n        t.verify(data);\n\n        InOrder inOrder = inOrder(timer);\n        inOrder.verify(timer).start();\n        inOrder.verify(timer).isCounting();\n    }",
        "begin_line": 25,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 48)",
            "(line 29,col 9)-(line 29,col 50)",
            "(line 30,col 9)-(line 30,col 44)",
            "(line 32,col 9)-(line 32,col 23)",
            "(line 34,col 9)-(line 34,col 41)",
            "(line 35,col 9)-(line 35,col 38)",
            "(line 36,col 9)-(line 36,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.verification.TimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockito/verification/TimeoutTest.java",
        "signature": "org.mockito.verification.TimeoutTest.should_fail_because_verification_fails()",
        "snippet": "    @Test\n    public void should_fail_because_verification_fails() {\n        Timeout t = new Timeout(1, mode, timer);\n\n        when(timer.isCounting()).thenReturn(true, true, true, false);\n        doThrow(error).\n        doThrow(error).\n        doThrow(error).\n        when(mode).verify(data);\n        \n        try {\n            t.verify(data);\n            fail();\n        } catch (MockitoAssertionError e) {}\n\n        verify(timer, times(4)).isCounting();\n    }",
        "begin_line": 39,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 48)",
            "(line 43,col 9)-(line 43,col 69)",
            "(line 44,col 9)-(line 47,col 32)",
            "(line 49,col 9)-(line 52,col 44)",
            "(line 54,col 9)-(line 54,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.verification.TimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockito/verification/TimeoutTest.java",
        "signature": "org.mockito.verification.TimeoutTest.should_pass_even_if_first_verification_fails()",
        "snippet": "    @Test\n    public void should_pass_even_if_first_verification_fails() {\n        Timeout t = new Timeout(1, mode, timer);\n\n        when(timer.isCounting()).thenReturn(true, true, true, false);\n        doThrow(error).\n        doThrow(error).\n        doNothing().\n        when(mode).verify(data);\n        \n        t.verify(data);\n        verify(timer, times(3)).isCounting();\n    }",
        "begin_line": 57,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 48)",
            "(line 61,col 9)-(line 61,col 69)",
            "(line 62,col 9)-(line 65,col 32)",
            "(line 67,col 9)-(line 67,col 23)",
            "(line 68,col 9)-(line 68,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.verification.TimeoutTest",
        "child_classes": [],
        "src_path": "test/org/mockito/verification/TimeoutTest.java",
        "signature": "org.mockito.verification.TimeoutTest.should_try_to_verify_correct_number_of_times()",
        "snippet": "    @Test\n    public void should_try_to_verify_correct_number_of_times() {}",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.mockito.verification.NegativeDurationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/verification/NegativeDurationTest.java",
        "signature": "org.mockito.verification.NegativeDurationTest.should_throw_exception_when_duration_is_negative_for_timeout_method()",
        "snippet": "    @Test\n    public void should_throw_exception_when_duration_is_negative_for_timeout_method() {\n        try {\n            Mockito.timeout(-1);\n            Assert.fail(\"It is forbidden to invoke Mockito.timeout() with negative value.\");\n        } catch (FriendlyReminderException e) {\n            Assert.assertTrue(true);\n        }\n    }",
        "begin_line": 10,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 17,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.verification.NegativeDurationTest",
        "child_classes": [],
        "src_path": "test/org/mockito/verification/NegativeDurationTest.java",
        "signature": "org.mockito.verification.NegativeDurationTest.should_throw_exception_when_duration_is_negative_for_after_method()",
        "snippet": "    @Test\n    public void should_throw_exception_when_duration_is_negative_for_after_method() {\n        try {\n            Mockito.after(-1);\n            Assert.fail(\"It is forbidden to invoke Mockito.after() with negative value.\");\n        } catch (FriendlyReminderException e) {\n            Assert.assertTrue(true);\n        }\n    }",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 27,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.should_let_passing_null_last_actual_stack_trace()",
        "snippet": "    @Test(expected = TooLittleActualInvocations.class)\n    public void should_let_passing_null_last_actual_stack_trace() throws Exception {\n        new Reporter().tooLittleActualInvocations(new org.mockito.internal.reporting.Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 150)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.should_throw_correct_exception_for_null_invocation_listener()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void should_throw_correct_exception_for_null_invocation_listener() throws Exception {\n        new Reporter().invocationListenerDoesNotAcceptNullParameters();\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 71)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted()",
        "snippet": "    @Test(expected = NoInteractionsWanted.class)\n    public void can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n    }",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 144)",
            "(line 41,col 9)-(line 41,col 140)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order()",
        "snippet": "    @Test(expected = VerificationInOrderFailure.class)\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 144)",
            "(line 47,col 9)-(line 47,col 93)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_invalid_argument_position()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_invalid_argument_position() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().invalidArgumentPositionRangeAtInvocationTime(invocation_with_bogus_default_answer, true, 0);\n    }",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 144)",
            "(line 53,col 9)-(line 53,col 115)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_wrong_argument_to_return()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_wrong_argument_to_return() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().wrongTypeOfArgumentToReturn(invocation_with_bogus_default_answer, \"\", String.class, 0);\n    }",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 144)",
            "(line 59,col 9)-(line 59,col 110)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_dont_exists()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_dont_exists() throws Exception {\n        Invocation dumb_invocation = new InvocationBuilder().toInvocation();\n        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\n        new Reporter().delegatedMethodDoesNotExistOnDelegate(dumb_invocation.getMethod(), mock_with_bogus_default_answer, String.class);\n    }",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 76)",
            "(line 65,col 9)-(line 65,col 91)",
            "(line 66,col 9)-(line 66,col 136)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_has_wrong_return_type()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_has_wrong_return_type() throws Exception {\n        Invocation dumb_invocation = new InvocationBuilder().toInvocation();\n        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\n        new Reporter().delegatedMethodHasWrongReturnType(dumb_invocation.getMethod(), dumb_invocation.getMethod(), mock_with_bogus_default_answer, String.class);\n    }",
        "begin_line": 69,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 76)",
            "(line 72,col 9)-(line 72,col 91)",
            "(line 73,col 9)-(line 73,col 161)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure()",
        "snippet": "    @Test(expected = MockitoException.class)\n    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure() throws Exception {\n        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\n        new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n    }",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 91)",
            "(line 79,col 9)-(line 79,col 108)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.ReporterTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/ReporterTest.java",
        "signature": "org.mockito.exceptions.ReporterTest.someField()",
        "snippet": "    private Field someField() {\n        return Mockito.class.getDeclaredFields()[0];\n    }",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 52)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoExceptionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoExceptionTest.java",
        "signature": "org.mockito.exceptions.base.MockitoExceptionTest.throwIt()",
        "snippet": "    private void throwIt() {\n        throw new MockitoException(\"boom\");\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 43)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoExceptionTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoExceptionTest.java",
        "signature": "org.mockito.exceptions.base.MockitoExceptionTest.shouldKeepUnfilteredStackTrace()",
        "snippet": "    @Test\n    public void shouldKeepUnfilteredStackTrace() {\n        try {\n            throwIt();\n            fail();\n        } catch (MockitoException e) {\n            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n        }\n    }",
        "begin_line": 17,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 24,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.toThrowable()",
        "snippet": "    public Throwable toThrowable() {\n        RuntimeException exception = new RuntimeException();\n        exception.setStackTrace(toTraceArray());\n        return exception;\n    }",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 60)",
            "(line 19,col 9)-(line 19,col 48)",
            "(line 20,col 9)-(line 20,col 25)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.toTraceList()",
        "snippet": "    private List<StackTraceElement> toTraceList() {\n        assert methods.length == 0 || classes.length == 0;\n        \n        List<StackTraceElement> trace = new LinkedList<StackTraceElement>();\n        for (String method : methods) {\n            trace.add(new StackTraceElement(\"SomeClass\", method, \"SomeClass.java\", 50));\n        }\n        for (String clazz : classes) {\n            trace.add(new StackTraceElement(clazz, \"someMethod\", clazz + \".java\", 50));\n        }\n        \n        Collections.reverse(trace);\n        return trace;\n    }",
        "begin_line": 23,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 58)",
            "(line 26,col 9)-(line 26,col 76)",
            "(line 27,col 9)-(line 29,col 9)",
            "(line 30,col 9)-(line 32,col 9)",
            "(line 34,col 9)-(line 34,col 35)",
            "(line 35,col 9)-(line 35,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.toTraceArray()",
        "snippet": "    public StackTraceElement[] toTraceArray() {\n        return toTraceList().toArray(new StackTraceElement[0]);\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 63)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.classes(java.lang.String...)",
        "snippet": "    public TraceBuilder classes(String ... classes) {\n        this.classes = classes;\n        return this;\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 31)",
            "(line 44,col 9)-(line 44,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.TraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/TraceBuilder.java",
        "signature": "org.mockito.exceptions.base.TraceBuilder.methods(java.lang.String...)",
        "snippet": "    public TraceBuilder methods(String ... methods) {\n        this.methods = methods;\n        return this;\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 31)",
            "(line 49,col 9)-(line 49,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoAssertionErrorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java",
        "signature": "org.mockito.exceptions.base.MockitoAssertionErrorTest.throwIt()",
        "snippet": "    private void throwIt() {\n        throw new MockitoAssertionError(\"boom\");\n    }",
        "begin_line": 13,
        "end_line": 15,
        "comment": "",
        "child_ranges": [
            "(line 14,col 9)-(line 14,col 48)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.MockitoAssertionErrorTest",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java",
        "signature": "org.mockito.exceptions.base.MockitoAssertionErrorTest.shouldKeepUnfilteredStackTrace()",
        "snippet": "    @Test\n    public void shouldKeepUnfilteredStackTrace() {\n        try {\n            throwIt();\n            fail();\n        } catch (MockitoAssertionError e) {\n            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n        }\n    }",
        "begin_line": 17,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 24,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.StackTraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/StackTraceBuilder.java",
        "signature": "org.mockito.exceptions.base.StackTraceBuilder.methods(java.lang.String...)",
        "snippet": "    public StackTraceBuilder methods(String ... methods) {\n        this.methods = methods;\n        return this;\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 31)",
            "(line 17,col 9)-(line 17,col 20)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.StackTraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/StackTraceBuilder.java",
        "signature": "org.mockito.exceptions.base.StackTraceBuilder.toStackTrace()",
        "snippet": "    public StackTraceElement[] toStackTrace() {\n        StackTraceElement[] trace = new StackTraceElement[methods.length];\n        \n        for (int i = 0; i < methods.length; i++) {\n            trace[i] = new StackTraceElement(\"DummyClass\", methods[i], \"DummyClass.java\", 100);\n        }\n        \n        return trace;\n    }",
        "begin_line": 20,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 74)",
            "(line 23,col 9)-(line 25,col 9)",
            "(line 27,col 9)-(line 27,col 21)"
        ]
    },
    {
        "class_name": "org.mockito.exceptions.base.StackTraceBuilder",
        "child_classes": [],
        "src_path": "test/org/mockito/exceptions/base/StackTraceBuilder.java",
        "signature": "org.mockito.exceptions.base.StackTraceBuilder.toStackTraceList()",
        "snippet": "    public List<StackTraceElement> toStackTraceList() {\n        return Arrays.asList(toStackTrace());\n    }",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 45)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.overrideDefaultAnswer(org.mockito.stubbing.Answer<java.lang.Object>)",
        "snippet": "    public void overrideDefaultAnswer(Answer<Object> defaultAnswer) {\n        this.overriddenDefaultAnswer = defaultAnswer;\n    }",
        "begin_line": 23,
        "end_line": 25,
        "comment": "for testing purposes, allow to override the configuration",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 53)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.overrideCleansStackTrace(boolean)",
        "snippet": "    public void overrideCleansStackTrace(boolean cleansStackTrace) {\n        this.cleansStackTrace = cleansStackTrace;\n    }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "for testing purposes, allow to override the configuration",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.overrideAnnotationEngine(org.mockito.configuration.AnnotationEngine)",
        "snippet": "    public void overrideAnnotationEngine(AnnotationEngine engine) {\n        this.overriddenEngine = engine;\n    }",
        "begin_line": 33,
        "end_line": 35,
        "comment": "for testing purposes, allow to override the annotation engine",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 39)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.overrideEnableClassCache(boolean)",
        "snippet": "    public void overrideEnableClassCache(boolean enableClassCache) {\n        this.enableClassCache = enableClassCache;\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "for testing purposes, allow to override the annotation engine",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 49)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.getDefaultAnswer()",
        "snippet": "    @Override\n    public Answer<Object> getDefaultAnswer() {\n        if (overriddenDefaultAnswer == null) {\n            return super.getDefaultAnswer();\n        } else {\n            return overriddenDefaultAnswer;\n        }\n    }",
        "begin_line": 42,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 48,col 9)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.getAnnotationEngine()",
        "snippet": "    @Override\n    public AnnotationEngine getAnnotationEngine() {\n        if (this.overriddenEngine != null) {\n            return this.overriddenEngine;\n        }\n        return new InjectingAnnotationEngine() {\n            @Override\n            public Object createMockFor(Annotation annotation, Field field) {\n                if (annotation instanceof SmartMock) {\n                    return Mockito.mock(field.getType(), Mockito.RETURNS_SMART_NULLS);\n                } else {\n                    return super.createMockFor(annotation, field);\n                }\n            }\n        };\n    }",
        "begin_line": 51,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 55,col 9)",
            "(line 56,col 9)-(line 65,col 10)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.Anonymous-e0d8b188-d07b-4d48-9c76-510f8983eb7a.createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)",
        "snippet": "            @Override\n            public Object createMockFor(Annotation annotation, Field field) {\n                if (annotation instanceof SmartMock) {\n                    return Mockito.mock(field.getType(), Mockito.RETURNS_SMART_NULLS);\n                } else {\n                    return super.createMockFor(annotation, field);\n                }\n            }",
        "begin_line": 57,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 59,col 17)-(line 63,col 17)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.cleansStackTrace()",
        "snippet": "    @Override\n    public boolean cleansStackTrace() {\n        return cleansStackTrace;\n    }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 32)"
        ]
    },
    {
        "class_name": "org.mockito.configuration.MockitoConfiguration",
        "child_classes": [],
        "src_path": "test/org/mockito/configuration/MockitoConfiguration.java",
        "signature": "org.mockito.configuration.MockitoConfiguration.enableClassCache()",
        "snippet": "    @Override\n    public boolean enableClassCache() {\n        return enableClassCache;\n    }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 32)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.AllTestsRunner.run()",
        "snippet": "        public void run() {\n            Result result = JUnitCore.runClasses(\n                    EqualsTest.class,\n                    ListUtilTest.class,\n                    MockingProgressImplTest.class,\n                    TimesTest.class,\n                    MockHandlerImplTest.class,\n                    AllInvocationsFinderTest.class,\n                    ReturnsEmptyValuesTest.class,\n                    NumberOfInvocationsCheckerTest.class,\n                    DefaultRegisteredInvocationsTest.class,\n                    MissingInvocationCheckerTest.class,\n                    NumberOfInvocationsInOrderCheckerTest.class,\n                    MissingInvocationInOrderCheckerTest.class,\n                    CachingMockBytecodeGeneratorTest.class,\n                    InvocationMatcherTest.class,\n                    InvocationsFinderTest.class,\n                    InvocationImplTest.class,\n                    MockitoTest.class,\n                    MockUtilTest.class,\n                    ReporterTest.class,\n                    MockitoAssertionErrorTest.class,\n                    MockitoExceptionTest.class,\n                    StackTraceFilteringTest.class,\n                    BridgeMethodPuzzleTest.class,\n                    OverloadingPuzzleTest.class,\n                    InvalidUsageTest.class,\n                    UsingVarargsTest.class,\n                    CustomMatchersTest.class,\n                    ComparableMatchersTest.class,\n                    InvalidUseOfMatchersTest.class,\n                    MatchersTest.class,\n                    MatchersToStringTest.class,\n                    VerificationAndStubbingUsingMatchersTest.class,\n                    BasicStubbingTest.class,\n                    ReturningDefaultValuesTest.class,\n                    StubbingWithThrowablesTest.class,\n                    AtMostXVerificationTest.class,\n                    BasicVerificationTest.class,\n                    ExactNumberOfTimesVerificationTest.class,\n                    VerificationInOrderTest.class,\n                    NoMoreInteractionsVerificationTest.class,\n                    SelectedMocksInOrderVerificationTest.class,\n                    VerificationOnMultipleMocksUsingMatchersTest.class,\n                    VerificationUsingMatchersTest.class,\n                    RelaxedVerificationInOrderTest.class,\n                    DescriptiveMessagesWhenVerificationFailsTest.class,\n                    DescriptiveMessagesWhenTimesXVerificationFailsTest.class,\n                    BasicVerificationInOrderTest.class,\n                    VerificationInOrderMixedWithOrdiraryVerificationTest.class,\n                    DescriptiveMessagesOnVerificationInOrderErrorsTest.class,\n                    InvalidStateDetectionTest.class,\n                    ReplacingObjectMethodsTest.class,\n                    ClickableStackTracesTest.class,\n                    ExampleTest.class,\n                    PointingStackTraceToActualInvocationTest.class,\n                    VerificationInOrderFromMultipleThreadsTest.class,\n                    ResetTest.class,\n                    ReturnsGenericDeepStubsTest.class\n                );\n\n                if (!result.wasSuccessful()) {\n                    System.err.println(\"Thread[\" + Thread.currentThread().getId() + \"]: error!\");\n                    List<Failure> failures = result.getFailures();\n                    System.err.println(failures.size());\n                    for (Failure failure : failures) {\n                        System.err.println(failure.getTrace());\n                        failed = true;\n                    }\n                }\n        }",
        "begin_line": 77,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 78,col 13)-(line 136,col 18)",
            "(line 138,col 17)-(line 146,col 17)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.AllTestsRunner.isFailed()",
        "snippet": "        public boolean isFailed() {\n            return failed;\n        }",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 13)-(line 150,col 26)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.shouldRunInMultipleThreads()",
        "snippet": "    @Test\n    public void shouldRunInMultipleThreads() {}",
        "begin_line": 154,
        "end_line": 155,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.runInMultipleThreads(int)",
        "snippet": "    public static boolean runInMultipleThreads(int numberOfThreads) throws Exception {\n        List<AllTestsRunner> threads = new LinkedList<AllTestsRunner>();\n        for (int i = 1; i <= numberOfThreads; i++) {\n            threads.add(new AllTestsRunner());\n        }\n\n        for (Thread t : threads) {\n            t.start();\n        }\n\n        boolean failed = false;\n        for (AllTestsRunner t : threads) {\n            t.join();\n            failed = failed ? true : t.isFailed();\n        }\n\n        return failed;\n    }",
        "begin_line": 163,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 72)",
            "(line 165,col 9)-(line 167,col 9)",
            "(line 169,col 9)-(line 171,col 9)",
            "(line 173,col 9)-(line 173,col 31)",
            "(line 174,col 9)-(line 177,col 9)",
            "(line 179,col 9)-(line 179,col 22)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java",
        "signature": "org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) throws Exception {\n        int numberOfThreads = 20;\n        long before = System.currentTimeMillis();\n        runInMultipleThreads(numberOfThreads);\n        long after = System.currentTimeMillis();\n        long executionTime = (after-before)/1000;\n        System.out.println(\"Finished tests in \" + numberOfThreads + \" threads in \" + executionTime + \" seconds.\");\n    }",
        "begin_line": 182,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 33)",
            "(line 184,col 9)-(line 184,col 49)",
            "(line 185,col 9)-(line 185,col 46)",
            "(line 186,col 9)-(line 186,col 48)",
            "(line 187,col 9)-(line 187,col 49)",
            "(line 188,col 9)-(line 188,col 114)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsStubSharedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsStubSharedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsStubSharedMockTest.shouldStubFineConcurrently()",
        "snippet": "    @Ignore(\"stubbing from multiple threads is not supported\")\n    @Test\n    public void shouldStubFineConcurrently() throws Exception {\n        for(int i = 0; i < 100; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 19,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 24,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsStubSharedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsStubSharedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsStubSharedMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock = mock(IMethods.class);\n        final Thread[] listeners = new Thread[3];\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i] = new Thread() {\n                @SuppressWarnings(\"deprecation\")\n                @Override\n                public void run() {\n                    when(mock.simpleMethod(getId()))\n                        .thenReturn(getId() + \"\")\n                        .thenReturn(\"foo\")\n                        .thenReturn(\"bar\");\n                        \n                    stubVoid(mock)\n                        .toThrow(new RuntimeException(getId() + \"\"))\n                        .toReturn()\n                        .toThrow(new RuntimeException())\n                        .on().differentMethod();\n                }\n            };\n            listeners[i].start();\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n    }",
        "begin_line": 27,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 36)",
            "(line 29,col 9)-(line 29,col 49)",
            "(line 30,col 9)-(line 48,col 9)",
            "(line 49,col 9)-(line 51,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsStubSharedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsStubSharedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsStubSharedMockTest.Anonymous-10ad310e-558d-4e1d-b711-7fd847e9695f.run()",
        "snippet": "                @SuppressWarnings(\"deprecation\")\n                @Override\n                public void run() {\n                    when(mock.simpleMethod(getId()))\n                        .thenReturn(getId() + \"\")\n                        .thenReturn(\"foo\")\n                        .thenReturn(\"bar\");\n                        \n                    stubVoid(mock)\n                        .toThrow(new RuntimeException(getId() + \"\"))\n                        .toReturn()\n                        .toThrow(new RuntimeException())\n                        .on().differentMethod();\n                }",
        "begin_line": 32,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 35,col 21)-(line 38,col 43)",
            "(line 40,col 21)-(line 44,col 48)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.shouldVerifyInOrderWhenMultipleThreadsInteractWithMock()",
        "snippet": "    @Test\n    public void shouldVerifyInOrderWhenMultipleThreadsInteractWithMock() throws Exception {\n        final Foo testInf = mock(Foo.class);\n        \n        Thread threadOne = new Thread(new Runnable(){\n            public void run() {\n                testInf.methodOne();\n            }\n        });\n        threadOne.start();\n        threadOne.join();\n        \n        Thread threadTwo = new Thread(new Runnable(){\n            public void run() {\n                testInf.methodTwo();\n            }\n        });\n        threadTwo.start();\n        threadTwo.join();\n        \n        InOrder inOrder = inOrder(testInf);\n        inOrder.verify(testInf).methodOne();\n        inOrder.verify(testInf).methodTwo();\n    }",
        "begin_line": 15,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 44)",
            "(line 19,col 9)-(line 23,col 11)",
            "(line 24,col 9)-(line 24,col 26)",
            "(line 25,col 9)-(line 25,col 25)",
            "(line 27,col 9)-(line 31,col 11)",
            "(line 32,col 9)-(line 32,col 26)",
            "(line 33,col 9)-(line 33,col 25)",
            "(line 35,col 9)-(line 35,col 43)",
            "(line 36,col 9)-(line 36,col 44)",
            "(line 37,col 9)-(line 37,col 44)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Anonymous-0d66164f-db93-4cb1-ad97-7db953a81b08.run()",
        "snippet": "            public void run() {\n                testInf.methodOne();\n            }",
        "begin_line": 20,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 21,col 17)-(line 21,col 36)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Anonymous-6b3a5094-a508-43bf-8391-4e19812533d2.run()",
        "snippet": "            public void run() {\n                testInf.methodTwo();\n            }",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 17)-(line 29,col 36)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Foo.methodOne()",
        "snippet": "        void methodOne();",
        "begin_line": 41,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java",
        "signature": "org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.Foo.methodTwo()",
        "snippet": "        void methodTwo();",
        "begin_line": 42,
        "end_line": 42,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareAMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareAMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareAMockTest.shouldAllowVerifyingInThreads()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInThreads() throws Exception {\n        for(int i = 0; i < 100; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 18,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 22,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareAMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareAMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareAMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock = mock(IMethods.class);\n        final Thread[] listeners = new Thread[3];\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i] = new Thread() {\n                @Override\n                public void run() {\n                    mock.simpleMethod(\"foo\");\n                }\n            };\n            listeners[i].start();\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n        verify(mock, times(listeners.length)).simpleMethod(\"foo\");\n    }",
        "begin_line": 25,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 36)",
            "(line 27,col 9)-(line 27,col 49)",
            "(line 28,col 9)-(line 36,col 9)",
            "(line 37,col 9)-(line 39,col 9)",
            "(line 40,col 9)-(line 40,col 66)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareAMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareAMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareAMockTest.Anonymous-d1770ab0-6d24-4159-9808-22526747dc7b.run()",
        "snippet": "                @Override\n                public void run() {\n                    mock.simpleMethod(\"foo\");\n                }",
        "begin_line": 30,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 21)-(line 32,col 45)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java",
        "signature": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.shouldAllowVerifyingInThreads()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInThreads() throws Exception {\n        for(int i = 0; i < 100; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 24,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java",
        "signature": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock.simpleMethod();\n        final Thread[] listeners = new Thread[2];\n        for (int i = 0; i < listeners.length; i++) {\n            final int x = i;\n            listeners[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(x * 10);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    mock.simpleMethod();\n                }\n            };\n            listeners[i].start();\n        }\n        \n        verify(mock, atLeastOnce()).simpleMethod();\n        \n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n    }",
        "begin_line": 27,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 28)",
            "(line 29,col 9)-(line 29,col 49)",
            "(line 30,col 9)-(line 44,col 9)",
            "(line 46,col 9)-(line 46,col 51)",
            "(line 48,col 9)-(line 50,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java",
        "signature": "org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.Anonymous-4a29a653-bc57-4962-8c79-b65e8fc37c4b.run()",
        "snippet": "                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(x * 10);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    mock.simpleMethod();\n                }",
        "begin_line": 33,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 35,col 21)-(line 39,col 21)",
            "(line 40,col 21)-(line 40,col 40)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.shouldAllowVerifyingInThreads()",
        "snippet": "    @Test\n    public void shouldAllowVerifyingInThreads() throws Exception {\n        for(int i = 0; i < 50; i++) {\n            performTest();\n        }\n    }",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 24,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.performTest()",
        "snippet": "    private void performTest() throws InterruptedException {\n        mock = mock(IMethods.class);\n        \n        when(mock.simpleMethod(\"foo\"))\n            .thenReturn(\"foo\")\n            .thenReturn(\"bar\")\n            .thenReturn(\"baz\")\n            .thenReturn(\"foo\")\n            .thenReturn(\"bar\")\n            .thenReturn(\"baz\");\n        \n        final Thread[] listeners = new Thread[100];\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n            listeners[i].start();\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            listeners[i].join();\n        }\n    }",
        "begin_line": 27,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 36)",
            "(line 30,col 9)-(line 36,col 31)",
            "(line 38,col 9)-(line 38,col 51)",
            "(line 39,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 59,col 9)"
        ]
    },
    {
        "class_name": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest",
        "child_classes": [],
        "src_path": "test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java",
        "signature": "org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.Anonymous-4bf4d3c5-e6c0-4e5a-b2a5-15f15b05dede.run()",
        "snippet": "                @Override\n                public void run() {\n                    try {\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                        mock.simpleMethod(\"foo\");\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }",
        "begin_line": 41,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 43,col 21)-(line 52,col 21)"
        ]
    }
]