{
  "filepath": "/tmp/Mockito-18b/src/org/mockito/Matchers.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "Matchers",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 97,
      "end_line": 811,
      "comment": "\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * \u003cp\u003e\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *  \n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *  \n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * \u003c/code\u003e\u003c/pre\u003e\n * Scroll down to see all methods - full list of matchers.\n * \u003cp\u003e\n * \u003cb\u003eWarning:\u003c/b\u003e\n * \u003cp\u003e\n * If you are using argument matchers, \u003cb\u003eall arguments\u003c/b\u003e have to be provided by matchers.\n * \u003cp\u003e\n * E.g: (example shows verification but the same applies to stubbing):\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   verify(mock).someMethod(anyInt(), anyString(), \u003cb\u003eeq(\"third argument\")\u003c/b\u003e);\n *   //above is correct - eq() is also an argument matcher\n *   \n *   verify(mock).someMethod(anyInt(), anyString(), \u003cb\u003e\"third argument\"\u003c/b\u003e);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * \u003c/code\u003e\u003c/pre\u003e\n * \u003cp\u003e\n * Matcher methods like \u003ccode\u003eanyObject()\u003c/code\u003e, \u003ccode\u003eeq()\u003c/code\u003e \u003cb\u003edo not\u003c/b\u003e return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use \u003ccode\u003eanyObject()\u003c/code\u003e, \u003ccode\u003eeq()\u003c/code\u003e methods outside of verified/stubbed method.\n *\n * \u003ch1\u003eCustom Argument Matchers\u003c/h1\u003e\n * \n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * \u003cp\u003e\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * \u003cp\u003e\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses \u003cb\u003edecamelized class name\u003c/b\u003e - to promote meaningful class names.\n * \u003cp\u003e\n * Example:\n * \n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   class IsListOfTwoElements extends ArgumentMatcher\u0026lt;List\u0026gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() \u003d\u003d 2;\n *      }\n *   }\n *   \n *   List mock \u003d mock(List.class);\n *   \n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *   \n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *   \n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * \u003c/code\u003e\u003c/pre\u003e\n * \n * To keep it readable you may want to extract method, e.g:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   verify(mock).addAll(\u003cb\u003eargThat(new IsListOfTwoElements())\u003c/b\u003e);\n *   //becomes\n *   verify(mock).addAll(\u003cb\u003elistOfTwoElements()\u003c/b\u003e);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cb\u003eWarning:\u003c/b\u003e Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable. \n * Sometimes it\u0027s better to implement equals() for arguments that are passed to mocks \n * (Mockito naturally uses equals() for argument matching). \n * This can make the test cleaner. \n * \u003cp\u003e\n * Also, \u003cb\u003esometimes {@link ArgumentCaptor} may be a better fit\u003c/b\u003e than custom matcher. \n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n "
    },
    {
      "type": "field",
      "varNames": [
        "MOCKING_PROGRESS"
      ],
      "begin_line": 100,
      "end_line": 100,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyBoolean()",
      "begin_line": 109,
      "end_line": 111,
      "comment": "\n     * Any \u003ccode\u003eboolean\u003c/code\u003e or non-null \u003ccode\u003eBoolean\u003c/code\u003e\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003efalse\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 110,col 9)-(line 110,col 74)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyByte()",
      "begin_line": 120,
      "end_line": 122,
      "comment": "\n     * Any \u003ccode\u003ebyte\u003c/code\u003e or non-null \u003ccode\u003eByte\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 121,col 9)-(line 121,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyChar()",
      "begin_line": 131,
      "end_line": 133,
      "comment": "\n     * Any \u003ccode\u003echar\u003c/code\u003e or non-null \u003ccode\u003eCharacter\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 132,col 9)-(line 132,col 75)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyInt()",
      "begin_line": 142,
      "end_line": 144,
      "comment": "\n     * Any int or non-null Integer.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 143,col 9)-(line 143,col 73)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyLong()",
      "begin_line": 153,
      "end_line": 155,
      "comment": "\n     * Any \u003ccode\u003elong\u003c/code\u003e or non-null \u003ccode\u003eLong\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 154,col 9)-(line 154,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyFloat()",
      "begin_line": 164,
      "end_line": 166,
      "comment": "\n     * Any \u003ccode\u003efloat\u003c/code\u003e or non-null \u003ccode\u003eFloat\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 165,col 9)-(line 165,col 71)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyDouble()",
      "begin_line": 175,
      "end_line": 177,
      "comment": "\n     * Any \u003ccode\u003edouble\u003c/code\u003e or non-null \u003ccode\u003eDouble\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 176,col 9)-(line 176,col 72)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyShort()",
      "begin_line": 186,
      "end_line": 188,
      "comment": "\n     * Any \u003ccode\u003eshort\u003c/code\u003e or non-null \u003ccode\u003eShort\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 187,col 9)-(line 187,col 71)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyObject()",
      "begin_line": 199,
      "end_line": 201,
      "comment": "\n     * Matches anything, including null.\n     * \u003cp\u003e\n     * This is an alias of: {@link #any()} and {@link #any(java.lang.Class)}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 200,col 9)-(line 200,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyVararg()",
      "begin_line": 226,
      "end_line": 228,
      "comment": "\n     * Any vararg, meaning any number and values of arguments.\n     * \u003cp\u003e\n     * Example:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //verification:\n     *   mock.foo(1, 2);\n     *   mock.foo(1, 2, 3, 4);\n     *\n     *   verify(mock, times(2)).foo(anyVararg());\n     *\n     *   //stubbing:\n     *   when(mock.foo(anyVararg()).thenReturn(100);\n     *\n     *   //prints 100\n     *   System.out.println(mock.foo(1, 2));\n     *   //also prints 100\n     *   System.out.println(mock.foo(1, 2, 3, 4));\n     * \u003c/code\u003e\u003c/pre\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 227,col 9)-(line 227,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.any(java.lang.Class\u003cT\u003e)",
      "begin_line": 243,
      "end_line": 245,
      "comment": "\n     * Matches any object, including nulls\n     * \u003cp\u003e\n     * This method doesn\u0027t do type checks with the given parameter, it is only there\n     * to avoid casting in your code. This might however change (type checks could\n     * be added) in a future major release.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \u003cp\u003e\n     * This is an alias of: {@link #any()} and {@link #anyObject()}\n     * \u003cp\u003e\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 244,col 9)-(line 244,col 59)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.any()",
      "begin_line": 258,
      "end_line": 260,
      "comment": "\n     * Matches anything, including nulls\n     * \u003cp\u003e\n     * Shorter alias to {@link Matchers#anyObject()}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \u003cp\u003e\n     * This is an alias of: {@link #anyObject()} and {@link #any(java.lang.Class)}\n     * \u003cp\u003e\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 259,col 9)-(line 259,col 27)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyString()",
      "begin_line": 269,
      "end_line": 271,
      "comment": "\n     * Any non-null \u003ccode\u003eString\u003c/code\u003e\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty String (\"\")\n     ",
      "child_ranges": [
        "(line 270,col 9)-(line 270,col 74)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyList()",
      "begin_line": 280,
      "end_line": 282,
      "comment": "\n     * Any non-null \u003ccode\u003eList\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty List.\n     ",
      "child_ranges": [
        "(line 281,col 9)-(line 281,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyListOf(java.lang.Class\u003cT\u003e)",
      "begin_line": 299,
      "end_line": 301,
      "comment": "\n     * Generic friendly alias to {@link Matchers#anyList()}.\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * \u003cp\u003e\n     * Any non-null \u003ccode\u003eList\u003c/code\u003e.\n     * \u003cp\u003e\n     * This method doesn\u0027t do type checks with the given parameter, it is only there\n     * to avoid casting in your code. This might however change (type checks could\n     * be added) in a future major release.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param clazz Type owned by the list to avoid casting\n     * @return empty List.\n     ",
      "child_ranges": [
        "(line 300,col 9)-(line 300,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anySet()",
      "begin_line": 310,
      "end_line": 312,
      "comment": "\n     * Any non-null \u003ccode\u003eSet\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @return empty Set\n     ",
      "child_ranges": [
        "(line 311,col 9)-(line 311,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anySetOf(java.lang.Class\u003cT\u003e)",
      "begin_line": 329,
      "end_line": 331,
      "comment": "\n     * Generic friendly alias to {@link Matchers#anySet()}.\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * \u003cp\u003e\n     * Any non-null \u003ccode\u003eSet\u003c/code\u003e.\n     * \u003cp\u003e\n     * This method doesn\u0027t do type checks with the given parameter, it is only there\n     * to avoid casting in your code. This might however change (type checks could\n     * be added) in a future major release.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param clazz Type owned by the Set to avoid casting\n     * @return empty Set\n     ",
      "child_ranges": [
        "(line 330,col 9)-(line 330,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyMap()",
      "begin_line": 340,
      "end_line": 342,
      "comment": "\n     * Any non-null \u003ccode\u003eMap\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty Map.\n     ",
      "child_ranges": [
        "(line 341,col 9)-(line 341,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyMapOf(java.lang.Class\u003cK\u003e, java.lang.Class\u003cV\u003e)",
      "begin_line": 360,
      "end_line": 362,
      "comment": "\n     * Generic friendly alias to {@link Matchers#anyMap()}.\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * \u003cp\u003e\n     * Any non-null \u003ccode\u003eMap\u003c/code\u003e.\n     * \u003cp\u003e\n     * This method doesn\u0027t do type checks with the given parameter, it is only there\n     * to avoid casting in your code. This might however change (type checks could\n     * be added) in a future major release.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param keyClazz Type of the map key to avoid casting\n     * @param valueClazz Type of the value to avoid casting\n     * @return empty Map.\n     ",
      "child_ranges": [
        "(line 361,col 9)-(line 361,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyCollection()",
      "begin_line": 371,
      "end_line": 373,
      "comment": "\n     * Any non-null \u003ccode\u003eCollection\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty Collection.\n     ",
      "child_ranges": [
        "(line 372,col 9)-(line 372,col 76)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.anyCollectionOf(java.lang.Class\u003cT\u003e)",
      "begin_line": 390,
      "end_line": 392,
      "comment": "\n     * Generic friendly alias to {@link Matchers#anyCollection()}.\n     * It\u0027s an alternative to \u0026#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * \u003cp\u003e\n     * Any non-null \u003ccode\u003eCollection\u003c/code\u003e.\n     * \u003cp\u003e\n     * This method doesn\u0027t do type checks with the given parameter, it is only there\n     * to avoid casting in your code. This might however change (type checks could\n     * be added) in a future major release.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param clazz Type owned by the collection to avoid casting\n     * @return empty Collection.\n     ",
      "child_ranges": [
        "(line 391,col 9)-(line 391,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isA(java.lang.Class\u003cT\u003e)",
      "begin_line": 405,
      "end_line": 407,
      "comment": "\n     * \u003ccode\u003eObject\u003c/code\u003e argument that implements the given class.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param \u003cT\u003e\n     *            the accepted type.\n     * @param clazz\n     *            the class of the accepted type.\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 406,col 9)-(line 406,col 72)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(boolean)",
      "begin_line": 418,
      "end_line": 420,
      "comment": "\n     * \u003ccode\u003eboolean\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 419,col 9)-(line 419,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(byte)",
      "begin_line": 431,
      "end_line": 433,
      "comment": "\n     * \u003ccode\u003ebyte\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 432,col 9)-(line 432,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(char)",
      "begin_line": 444,
      "end_line": 446,
      "comment": "\n     * \u003ccode\u003echar\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 445,col 9)-(line 445,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(double)",
      "begin_line": 457,
      "end_line": 459,
      "comment": "\n     * \u003ccode\u003edouble\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 458,col 9)-(line 458,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(float)",
      "begin_line": 470,
      "end_line": 472,
      "comment": "\n     * \u003ccode\u003efloat\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 471,col 9)-(line 471,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(int)",
      "begin_line": 483,
      "end_line": 485,
      "comment": "\n     * \u003ccode\u003eint\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 484,col 9)-(line 484,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(long)",
      "begin_line": 496,
      "end_line": 498,
      "comment": "\n     * \u003ccode\u003elong\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 497,col 9)-(line 497,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(short)",
      "begin_line": 509,
      "end_line": 511,
      "comment": "\n     * \u003ccode\u003eshort\u003c/code\u003e argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 510,col 9)-(line 510,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.eq(T)",
      "begin_line": 522,
      "end_line": 524,
      "comment": "\n     * Object argument that is equal to the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 523,col 9)-(line 523,col 72)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.refEq(T, java.lang.String...)",
      "begin_line": 546,
      "end_line": 548,
      "comment": "\n     * Object argument that is reflection-equal to the given value with support for excluding\n     * selected fields from a class.\n     * \u003cp\u003e\n     * This matcher can be used when equals() is not implemented on compared objects.\n     * Matcher uses java reflection API to compare fields of wanted and actual object.\n     * \u003cp\u003e\n     * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from\n     * apache commons library.\n     * \u003cp\u003e\n     * \u003cb\u003eWarning\u003c/b\u003e The equality check is shallow!\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @param excludeFields\n     *            fields to exclude, if field does not exist it is ignored.\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 547,col 9)-(line 547,col 89)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.same(T)",
      "begin_line": 561,
      "end_line": 563,
      "comment": "\n     * Object argument that is the same as the given value.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param \u003cT\u003e\n     *            the type of the object, it is passed through to prevent casts.\n     * @param value\n     *            the given value.\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 562,col 9)-(line 562,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isNull()",
      "begin_line": 572,
      "end_line": 574,
      "comment": "\n     * \u003ccode\u003enull\u003c/code\u003e argument.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 573,col 9)-(line 573,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isNull(java.lang.Class\u003cT\u003e)",
      "begin_line": 585,
      "end_line": 587,
      "comment": "\n     * \u003ccode\u003enull\u003c/code\u003e argument.\n     * The class argument is provided to avoid casting.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param clazz Type to avoid casting\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 586,col 9)-(line 586,col 57)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.notNull()",
      "begin_line": 598,
      "end_line": 600,
      "comment": "\n     * Not \u003ccode\u003enull\u003c/code\u003e argument.\n     * \u003cp\u003e\n     * alias to {@link Matchers#isNotNull()}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 599,col 9)-(line 599,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.notNull(java.lang.Class\u003cT\u003e)",
      "begin_line": 613,
      "end_line": 615,
      "comment": "\n     * Not \u003ccode\u003enull\u003c/code\u003e argument, not necessary of the given class.\n     * The class argument is provided to avoid casting.\n     * \u003cp\u003e\n     * alias to {@link Matchers#isNotNull(Class)}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param clazz Type to avoid casting\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 614,col 9)-(line 614,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isNotNull()",
      "begin_line": 626,
      "end_line": 628,
      "comment": "\n     * Not \u003ccode\u003enull\u003c/code\u003e argument.\n     * \u003cp\u003e\n     * alias to {@link Matchers#notNull()}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 627,col 9)-(line 627,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.isNotNull(java.lang.Class\u003cT\u003e)",
      "begin_line": 641,
      "end_line": 643,
      "comment": "\n     * Not \u003ccode\u003enull\u003c/code\u003e argument, not necessary of the given class.\n     * The class argument is provided to avoid casting.\n     * \u003cp\u003e\n     * alias to {@link Matchers#notNull(Class)}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param clazz Type to avoid casting\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 642,col 9)-(line 642,col 30)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.contains(java.lang.String)",
      "begin_line": 654,
      "end_line": 656,
      "comment": "\n     * \u003ccode\u003eString\u003c/code\u003e argument that contains the given substring.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param substring\n     *            the substring.\n     * @return empty String (\"\").\n     ",
      "child_ranges": [
        "(line 655,col 9)-(line 655,col 69)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.matches(java.lang.String)",
      "begin_line": 667,
      "end_line": 669,
      "comment": "\n     * \u003ccode\u003eString\u003c/code\u003e argument that matches the given regular expression.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param regex\n     *            the regular expression.\n     * @return empty String (\"\").\n     ",
      "child_ranges": [
        "(line 668,col 9)-(line 668,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.endsWith(java.lang.String)",
      "begin_line": 680,
      "end_line": 682,
      "comment": "\n     * \u003ccode\u003eString\u003c/code\u003e argument that ends with the given suffix.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param suffix\n     *            the suffix.\n     * @return empty String (\"\").\n     ",
      "child_ranges": [
        "(line 681,col 9)-(line 681,col 66)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.startsWith(java.lang.String)",
      "begin_line": 693,
      "end_line": 695,
      "comment": "\n     * \u003ccode\u003eString\u003c/code\u003e argument that starts with the given prefix.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param prefix\n     *            the prefix.\n     * @return empty String (\"\").\n     ",
      "child_ranges": [
        "(line 694,col 9)-(line 694,col 68)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.argThat(org.hamcrest.Matcher\u003cT\u003e)",
      "begin_line": 708,
      "end_line": 710,
      "comment": "\n     * Allows creating custom argument matchers.\n     * \u003cp\u003e\n     * In rare cases when the parameter is a primitive then you \u003cb\u003e*must*\u003c/b\u003e use relevant intThat(), floatThat(), etc. method.\n     * This way you will avoid \u003ccode\u003eNullPointerException\u003c/code\u003e during auto-unboxing.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link ArgumentMatcher} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003enull\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 709,col 9)-(line 709,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.charThat(org.hamcrest.Matcher\u003cjava.lang.Character\u003e)",
      "begin_line": 720,
      "end_line": 722,
      "comment": "\n     * Allows creating custom \u003ccode\u003eCharacter\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 721,col 9)-(line 721,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.booleanThat(org.hamcrest.Matcher\u003cjava.lang.Boolean\u003e)",
      "begin_line": 732,
      "end_line": 734,
      "comment": "\n     * Allows creating custom \u003ccode\u003eBoolean\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003efalse\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 733,col 9)-(line 733,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.byteThat(org.hamcrest.Matcher\u003cjava.lang.Byte\u003e)",
      "begin_line": 744,
      "end_line": 746,
      "comment": "\n     * Allows creating custom \u003ccode\u003eByte\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 745,col 9)-(line 745,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.shortThat(org.hamcrest.Matcher\u003cjava.lang.Short\u003e)",
      "begin_line": 756,
      "end_line": 758,
      "comment": "\n     * Allows creating custom \u003ccode\u003eShort\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 757,col 9)-(line 757,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.intThat(org.hamcrest.Matcher\u003cjava.lang.Integer\u003e)",
      "begin_line": 768,
      "end_line": 770,
      "comment": "\n     * Allows creating custom \u003ccode\u003eInteger\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 769,col 9)-(line 769,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.longThat(org.hamcrest.Matcher\u003cjava.lang.Long\u003e)",
      "begin_line": 780,
      "end_line": 782,
      "comment": "\n     * Allows creating custom \u003ccode\u003eLong\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 781,col 9)-(line 781,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.floatThat(org.hamcrest.Matcher\u003cjava.lang.Float\u003e)",
      "begin_line": 792,
      "end_line": 794,
      "comment": "\n     * Allows creating custom \u003ccode\u003eFloat\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 793,col 9)-(line 793,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.doubleThat(org.hamcrest.Matcher\u003cjava.lang.Double\u003e)",
      "begin_line": 804,
      "end_line": 806,
      "comment": "\n     * Allows creating custom \u003ccode\u003eDouble\u003c/code\u003e argument matchers.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param matcher decides whether argument matches\n     * @return \u003ccode\u003e0\u003c/code\u003e.\n     ",
      "child_ranges": [
        "(line 805,col 9)-(line 805,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Matchers.reportMatcher(org.hamcrest.Matcher\u003c?\u003e)",
      "begin_line": 808,
      "end_line": 810,
      "comment": "",
      "child_ranges": [
        "(line 809,col 9)-(line 809,col 83)"
      ]
    }
  ]
}