{
  "filepath": "/tmp/Mockito-18b/src/org/mockito/Mockito.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "Mockito",
      "is_interface": false,
      "parent_types": [
        "org.mockito.Matchers"
      ],
      "begin_line": 1066,
      "end_line": 2390,
      "comment": "\n * \u003cp align\u003d\"left\"\u003e\u003cimg src\u003d\"logo.jpg\"/\u003e\u003c/p\u003e\n * Mockito library enables mocks creation, verification and stubbing.\n * \u003cp\u003e\n * This javadoc content is also available on the \u003ca href\u003d\"http://mockito.org\"\u003ehttp://mockito.org\u003c/a\u003e web page.\n * All documentation is kept in javadocs because it guarantees consistency between what\u0027s on the web and what\u0027s in the source code.\n * Also, it makes possible to access documentation straight from the IDE even if you work offline.\n *\n * \u003ch1\u003eContents\u003c/h1\u003e\n *\n * \u003cb\u003e\n *      \u003ca href\u003d\"#1\"\u003e1. Let\u0027s verify some behaviour! \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#2\"\u003e2. How about some stubbing? \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#3\"\u003e3. Argument matchers \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#4\"\u003e4. Verifying exact number of invocations / at least once / never \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#5\"\u003e5. Stubbing void methods with exceptions \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#6\"\u003e6. Verification in order \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#7\"\u003e7. Making sure interaction(s) never happened on mock \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#8\"\u003e8. Finding redundant invocations \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#9\"\u003e9. Shorthand for mocks creation - \u003ccode\u003e\u0026#064;Mock\u003c/code\u003e annotation \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#10\"\u003e10. Stubbing consecutive calls (iterator-style stubbing) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#11\"\u003e11. Stubbing with callbacks \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#12\"\u003e12. \u003ccode\u003edoReturn()\u003c/code\u003e|\u003ccode\u003edoThrow()\u003c/code\u003e|\u003ccode\u003edoAnswer()\u003c/code\u003e|\u003ccode\u003edoNothing()\u003c/code\u003e|\u003ccode\u003edoCallRealMethod()\u003c/code\u003e family of methods\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#13\"\u003e13. Spying on real objects \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#14\"\u003e14. Changing default return values of unstubbed invocations (Since 1.7) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#15\"\u003e15. Capturing arguments for further assertions (Since 1.8.0) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#16\"\u003e16. Real partial mocks (Since 1.8.0) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#17\"\u003e17. Resetting mocks (Since 1.8.0) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#18\"\u003e18. Troubleshooting \u0026 validating framework usage (Since 1.8.0) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#19\"\u003e19. Aliases for behavior driven development (Since 1.8.0) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#20\"\u003e20. Serializable mocks (Since 1.8.1) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#21\"\u003e21. New annotations: \u003ccode\u003e\u0026#064;Captor\u003c/code\u003e, \u003ccode\u003e\u0026#064;Spy\u003c/code\u003e, \u003ccode\u003e\u0026#064;InjectMocks\u003c/code\u003e (Since 1.8.3) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#22\"\u003e22. Verification with timeout (Since 1.8.5) \u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#23\"\u003e23. Automatic instantiation of \u003ccode\u003e\u0026#064;Spies\u003c/code\u003e, \u003ccode\u003e\u0026#064;InjectMocks\u003c/code\u003e and constructor injection goodness (Since 1.9.0)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#24\"\u003e24. One-liner stubs (Since 1.9.0)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#25\"\u003e25. Verification ignoring stubs (Since 1.9.0)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#26\"\u003e26. Mocking details (Since 1.9.5)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#27\"\u003e27. Delegate calls to real instance (Since 1.9.5)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#28\"\u003e28. \u003ccode\u003eMockMaker\u003c/code\u003e API (Since 1.9.5)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#29\"\u003e29. (new) BDD style verification (Since 1.10.0)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#30\"\u003e30. (new) Spying or mocking abstract classes (Since 1.10.12)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#31\"\u003e31. (new) Mockito mocks can be \u003cem\u003eserialized\u003c/em\u003e / \u003cem\u003edeserialized\u003c/em\u003e across classloaders (Since 1.10.0)\u003c/a\u003e\u003c/h3\u003e\n *      \u003ca href\u003d\"#32\"\u003e32. (new) Better generic support with deep stubs (Since 1.10.0)\u003c/a\u003e\u003c/h3\u003e\n *      \u003ca href\u003d\"#32\"\u003e33. (new) Mockito JUnit rule (Since 1.10.17)\u003c/a\u003e\u003cbr/\u003e\n *      \u003ca href\u003d\"#34\"\u003e34. (new) Switch \u003cem\u003eon\u003c/em\u003e or \u003cem\u003eoff\u003c/em\u003e plugins (Since 1.10.15)\u003c/a\u003e\u003cbr/\u003e\n * \u003c/b\u003e\n *\n * \u003cp\u003e\n * Following examples mock a List, because everyone knows its interface (methods\n * like \u003ccode\u003eadd()\u003c/code\u003e, \u003ccode\u003eget()\u003c/code\u003e, \u003ccode\u003eclear()\u003c/code\u003e will be used). \u003cbr\u003e\n * You probably wouldn\u0027t mock List class \u0027in real\u0027.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"1\"\u003e1. \u003ca class\u003d\"meaningful_link\" href\u003d\"#verification\"\u003eLet\u0027s verify some behaviour!\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //Let\u0027s import Mockito statically so that the code looks clearer\n * import static org.mockito.Mockito.*;\n *\n * //mock creation\n * List mockedList \u003d mock(List.class);\n *\n * //using mock object\n * mockedList.add(\"one\");\n * mockedList.clear();\n *\n * //verification\n * verify(mockedList).add(\"one\");\n * verify(mockedList).clear();\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003e\n * Once created, mock will remember all interactions. Then you can selectively\n * verify whatever interaction you are interested in.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"2\"\u003e2. \u003ca class\u003d\"meaningful_link\" href\u003d\"#stubbing\"\u003eHow about some stubbing?\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //You can mock concrete classes, not only interfaces\n * LinkedList mockedList \u003d mock(LinkedList.class);\n *\n * //stubbing\n * when(mockedList.get(0)).thenReturn(\"first\");\n * when(mockedList.get(1)).thenThrow(new RuntimeException());\n *\n * //following prints \"first\"\n * System.out.println(mockedList.get(0));\n *\n * //following throws runtime exception\n * System.out.println(mockedList.get(1));\n *\n * //following prints \"null\" because get(999) was not stubbed\n * System.out.println(mockedList.get(999));\n *\n * //Although it is possible to verify a stubbed invocation, usually \u003cb\u003eit\u0027s just redundant\u003c/b\u003e\n * //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).\n * //If your code doesn\u0027t care what get(0) returns then it should not be stubbed. Not convinced? See \u003ca href\u003d\"http://monkeyisland.pl/2008/04/26/asking-and-telling\"\u003ehere\u003c/a\u003e.\n * verify(mockedList).get(0);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cul\u003e\n * \u003cli\u003e By default, for all methods that return value, mock returns null, an\n * empty collection or appropriate primitive/primitive wrapper value (e.g: 0,\n * false, ... for int/Integer, boolean/Boolean, ...). \u003c/li\u003e\n *\n * \u003cli\u003e Stubbing can be overridden: for example common stubbing can go to\n * fixture setup but the test methods can override it.\n * Please note that overridding stubbing is a potential code smell that points out too much stubbing\u003c/li\u003e\n *\n * \u003cli\u003e Once stubbed, the method will always return stubbed value regardless\n * of how many times it is called. \u003c/li\u003e\n *\n * \u003cli\u003e Last stubbing is more important - when you stubbed the same method with\n * the same arguments many times.\n * Other words: \u003cb\u003ethe order of stubbing matters\u003c/b\u003e but it is only meaningful rarely,\n * e.g. when stubbing exactly the same method calls or sometimes when argument matchers are used, etc.\u003c/li\u003e\n *\n * \u003c/ul\u003e\n *\n *\n *\n * \u003ch3 id\u003d\"3\"\u003e3. \u003ca class\u003d\"meaningful_link\" href\u003d\"#argument_matchers\"\u003eArgument matchers\u003c/a\u003e\u003c/h3\u003e\n *\n * Mockito verifies argument values in natural java style: by using an \u003ccode\u003eequals()\u003c/code\u003e method.\n * Sometimes, when extra flexibility is required then you might use argument matchers:\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //stubbing using built-in anyInt() argument matcher\n * when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n * //stubbing using hamcrest (let\u0027s say isValid() returns your own hamcrest matcher):\n * when(mockedList.contains(argThat(isValid()))).thenReturn(\"element\");\n *\n * //following prints \"element\"\n * System.out.println(mockedList.get(999));\n *\n * //\u003cb\u003eyou can also verify using an argument matcher\u003c/b\u003e\n * verify(mockedList).get(anyInt());\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003e\n * Argument matchers allow flexible verification or stubbing.\n * {@link Matchers Click here to see} more built-in matchers\n * and examples of \u003cb\u003ecustom argument matchers / hamcrest matchers\u003c/b\u003e.\n * \u003cp\u003e\n * For information solely on \u003cb\u003ecustom argument matchers\u003c/b\u003e check out javadoc for {@link ArgumentMatcher} class.\n * \u003cp\u003e\n * Be reasonable with using complicated argument matching.\n * The natural matching style using \u003ccode\u003eequals()\u003c/code\u003e with occasional \u003ccode\u003eanyX()\u003c/code\u003e matchers tend to give clean \u0026 simple tests.\n * Sometimes it\u0027s just better to refactor the code to allow \u003ccode\u003eequals()\u003c/code\u003e matching or even implement \u003ccode\u003eequals()\u003c/code\u003e method to help out with testing.\n * \u003cp\u003e\n * Also, read \u003ca href\u003d\"#15\"\u003esection 15\u003c/a\u003e or javadoc for {@link ArgumentCaptor} class.\n * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.\n * \u003cp\u003e\n * \u003cb\u003eWarning on argument matchers:\u003c/b\u003e\n * \u003cp\u003e\n * If you are using argument matchers, \u003cb\u003eall arguments\u003c/b\u003e have to be provided\n * by matchers.\n * \u003cp\u003e\n * E.g: (example shows verification but the same applies to stubbing):\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   verify(mock).someMethod(anyInt(), anyString(), \u003cb\u003eeq(\"third argument\")\u003c/b\u003e);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), \u003cb\u003e\"third argument\"\u003c/b\u003e);\n *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003e\n * Matcher methods like \u003ccode\u003eanyObject()\u003c/code\u003e, \u003ccode\u003eeq()\u003c/code\u003e \u003cb\u003edo not\u003c/b\u003e return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use \u003ccode\u003eanyObject()\u003c/code\u003e, \u003ccode\u003eeq()\u003c/code\u003e methods outside of verified/stubbed method.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"4\"\u003e4. \u003ca class\u003d\"meaningful_link\" href\u003d\"#exact_verification\"\u003eVerifying exact number of invocations\u003c/a\u003e /\n * \u003ca class\u003d\"meaningful_link\" href\u003d\"#at_least_verification\"\u003eat least x\u003c/a\u003e / never\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //using mock\n * mockedList.add(\"once\");\n *\n * mockedList.add(\"twice\");\n * mockedList.add(\"twice\");\n *\n * mockedList.add(\"three times\");\n * mockedList.add(\"three times\");\n * mockedList.add(\"three times\");\n *\n * //following two verifications work exactly the same - times(1) is used by default\n * verify(mockedList).add(\"once\");\n * verify(mockedList, times(1)).add(\"once\");\n *\n * //exact number of invocations verification\n * verify(mockedList, times(2)).add(\"twice\");\n * verify(mockedList, times(3)).add(\"three times\");\n *\n * //verification using never(). never() is an alias to times(0)\n * verify(mockedList, never()).add(\"never happened\");\n *\n * //verification using atLeast()/atMost()\n * verify(mockedList, atLeastOnce()).add(\"three times\");\n * verify(mockedList, atLeast(2)).add(\"five times\");\n * verify(mockedList, atMost(5)).add(\"three times\");\n *\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003e\n * \u003cb\u003etimes(1) is the default.\u003c/b\u003e Therefore using times(1) explicitly can be\n * omitted.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"5\"\u003e5. \u003ca class\u003d\"meaningful_link\" href\u003d\"#stubbing_with_exceptions\"\u003eStubbing void methods with exceptions\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   doThrow(new RuntimeException()).when(mockedList).clear();\n *\n *   //following throws RuntimeException:\n *   mockedList.clear();\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * Read more about doThrow|doAnswer family of methods in paragraph 12.\n * \u003cp\u003e\n * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n * Currently \u003ccode\u003estubVoid()\u003c/code\u003e is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"6\"\u003e6. \u003ca class\u003d\"meaningful_link\" href\u003d\"#in_order_verification\"\u003eVerification in order\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * // A. Single mock whose methods must be invoked in a particular order\n * List singleMock \u003d mock(List.class);\n *\n * //using a single mock\n * singleMock.add(\"was added first\");\n * singleMock.add(\"was added second\");\n *\n * //create an inOrder verifier for a single mock\n * InOrder inOrder \u003d inOrder(singleMock);\n *\n * //following will make sure that add is first called with \"was added first, then with \"was added second\"\n * inOrder.verify(singleMock).add(\"was added first\");\n * inOrder.verify(singleMock).add(\"was added second\");\n *\n * // B. Multiple mocks that must be used in a particular order\n * List firstMock \u003d mock(List.class);\n * List secondMock \u003d mock(List.class);\n *\n * //using mocks\n * firstMock.add(\"was called first\");\n * secondMock.add(\"was called second\");\n *\n * //create inOrder object passing any mocks that need to be verified in order\n * InOrder inOrder \u003d inOrder(firstMock, secondMock);\n *\n * //following will make sure that firstMock was called before secondMock\n * inOrder.verify(firstMock).add(\"was called first\");\n * inOrder.verify(secondMock).add(\"was called second\");\n *\n * // Oh, and A + B can be mixed together at will\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * Verification in order is flexible - \u003cb\u003eyou don\u0027t have to verify all\n * interactions\u003c/b\u003e one-by-one but only those that you are interested in\n * testing in order.\n * \u003cp\u003e\n * Also, you can create InOrder object passing only mocks that are relevant for\n * in-order verification.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"7\"\u003e7. \u003ca class\u003d\"meaningful_link\" href\u003d\"#never_verification\"\u003eMaking sure interaction(s) never happened on mock\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //using mocks - only mockOne is interacted\n * mockOne.add(\"one\");\n *\n * //ordinary verification\n * verify(mockOne).add(\"one\");\n *\n * //verify that method was never called on a mock\n * verify(mockOne, never()).add(\"two\");\n *\n * //verify that other mocks were not interacted\n * verifyZeroInteractions(mockTwo, mockThree);\n *\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"8\"\u003e8. \u003ca class\u003d\"meaningful_link\" href\u003d\"#finding_redundant_invocations\"\u003eFinding redundant invocations\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //using mocks\n * mockedList.add(\"one\");\n * mockedList.add(\"two\");\n *\n * verify(mockedList).add(\"one\");\n *\n * //following verification will fail\n * verifyNoMoreInteractions(mockedList);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * A word of \u003cb\u003ewarning\u003c/b\u003e:\n * Some users who did a lot of classic, expect-run-verify mocking tend to use \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e very often, even in every test method.\n * \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e is not recommended to use in every test method.\n * \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e is a handy assertion from the interaction testing toolkit. Use it only when it\u0027s relevant.\n * Abusing it leads to \u003cstrong\u003eoverspecified\u003c/strong\u003e, \u003cstrong\u003eless maintainable\u003c/strong\u003e tests. You can find further reading\n * \u003ca href\u003d\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\"\u003ehere\u003c/a\u003e.\n *\n * \u003cp\u003e\n * See also {@link Mockito#never()} - it is more explicit and\n * communicates the intent well.\n * \u003cp\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"9\"\u003e9. \u003ca class\u003d\"meaningful_link\" href\u003d\"#mock_annotation\"\u003eShorthand for mocks creation - \u003ccode\u003e\u0026#064;Mock\u003c/code\u003e annotation\u003c/a\u003e\u003c/h3\u003e\n *\n * \u003cul\u003e\n * \u003cli\u003eMinimizes repetitive mock creation code.\u003c/li\u003e\n * \u003cli\u003eMakes the test class more readable.\u003c/li\u003e\n * \u003cli\u003eMakes the verification error easier to read because the \u003cb\u003efield name\u003c/b\u003e\n * is used to identify the mock.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   public class ArticleManagerTest {\n *\n *       \u0026#064;Mock private ArticleCalculator calculator;\n *       \u0026#064;Mock private ArticleDatabase database;\n *       \u0026#064;Mock private UserProvider userProvider;\n *\n *       private ArticleManager manager;\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cb\u003eImportant!\u003c/b\u003e This needs to be somewhere in the base class or a test\n * runner:\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * MockitoAnnotations.initMocks(testClass);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * You can use built-in runner: {@link MockitoJUnitRunner} or a rule: {@link MockitoRule}.\n * \u003cp\u003e\n * Read more here: {@link MockitoAnnotations}\n *\n *\n *\n *\n * \u003ch3 id\u003d\"10\"\u003e10. \u003ca class\u003d\"meaningful_link\" href\u003d\"#stubbing_consecutive_calls\"\u003eStubbing consecutive calls\u003c/a\u003e (iterator-style stubbing)\u003c/h3\u003e\n *\n * Sometimes we need to stub with different return value/exception for the same\n * method call. Typical use case could be mocking iterators.\n * Original version of Mockito did not have this feature to promote simple mocking.\n * For example, instead of iterators one could use {@link Iterable} or simply\n * collections. Those offer natural ways of stubbing (e.g. using real\n * collections). In rare scenarios stubbing consecutive calls could be useful,\n * though:\n * \u003cp\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * when(mock.someMethod(\"some arg\"))\n *   .thenThrow(new RuntimeException())\n *   .thenReturn(\"foo\");\n *\n * //First call: throws runtime exception:\n * mock.someMethod(\"some arg\");\n *\n * //Second call: prints \"foo\"\n * System.out.println(mock.someMethod(\"some arg\"));\n *\n * //Any consecutive call: prints \"foo\" as well (last stubbing wins).\n * System.out.println(mock.someMethod(\"some arg\"));\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * Alternative, shorter version of consecutive stubbing:\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * when(mock.someMethod(\"some arg\"))\n *   .thenReturn(\"one\", \"two\", \"three\");\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"11\"\u003e11. \u003ca class\u003d\"meaningful_link\" href\u003d\"#answer_stubs\"\u003eStubbing with callbacks\u003c/a\u003e\u003c/h3\u003e\n *\n * Allows stubbing with generic {@link Answer} interface.\n * \u003cp\u003e\n * Yet another controversial feature which was not included in Mockito\n * originally. We recommend using simple stubbing with \u003ccode\u003ethenReturn()\u003c/code\u003e or\n * \u003ccode\u003ethenThrow()\u003c/code\u003e only. Those two should be \u003cb\u003ejust enough\u003c/b\u003e to test/test-drive\n * any clean \u0026 simple code.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n *     Object answer(InvocationOnMock invocation) {\n *         Object[] args \u003d invocation.getArguments();\n *         Object mock \u003d invocation.getMock();\n *         return \"called with arguments: \" + args;\n *     }\n * });\n *\n * //Following prints \"called with arguments: foo\"\n * System.out.println(mock.someMethod(\"foo\"));\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"12\"\u003e12. \u003ca class\u003d\"meaningful_link\" href\u003d\"#do_family_methods_stubs\"\u003e\u003ccode\u003edoReturn()\u003c/code\u003e|\u003ccode\u003edoThrow()\u003c/code\u003e|\n * \u003ccode\u003edoAnswer()\u003c/code\u003e|\u003ccode\u003edoNothing()\u003c/code\u003e|\u003ccode\u003edoCallRealMethod()\u003c/code\u003e family of methods\u003c/a\u003e\u003c/h3\u003e\n *\n * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not\n * like void methods inside brackets...\n * \u003cp\u003e\n * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids.\n * The main reason is improved readability and consistency with the family of \u003ccode\u003edoAnswer()\u003c/code\u003e methods.\n * \u003cp\u003e\n * Use \u003ccode\u003edoThrow()\u003c/code\u003e when you want to stub a void method with an exception:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   doThrow(new RuntimeException()).when(mockedList).clear();\n *\n *   //following throws RuntimeException:\n *   mockedList.clear();\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003e\n * You can use \u003ccode\u003edoThrow()\u003c/code\u003e, \u003ccode\u003edoAnswer()\u003c/code\u003e, \u003ccode\u003edoNothing()\u003c/code\u003e, \u003ccode\u003edoReturn()\u003c/code\u003e\n * and \u003ccode\u003edoCallRealMethod()\u003c/code\u003e in place of the corresponding call with \u003ccode\u003ewhen()\u003c/code\u003e, for any method.\n * It is necessary when you\n * \u003cul\u003e\n *     \u003cli\u003estub void methods\u003c/li\u003e\n *     \u003cli\u003estub methods on spy objects (see below)\u003c/li\u003e\n *     \u003cli\u003estub the same method more than once, to change the behaviour of a mock in the middle of a test.\u003c/li\u003e\n * \u003c/ul\u003e\n * but you may prefer to use these methods in place of the alternative with \u003ccode\u003ewhen()\u003c/code\u003e, for all of your stubbing calls.\n * \u003cp\u003e\n * Read more about these methods:\n * \u003cp\u003e\n * {@link Mockito#doReturn(Object)}\n * \u003cp\u003e\n * {@link Mockito#doThrow(Throwable)}\n * \u003cp\u003e\n * {@link Mockito#doThrow(Class)}\n * \u003cp\u003e\n * {@link Mockito#doAnswer(Answer)}\n * \u003cp\u003e\n * {@link Mockito#doNothing()}\n * \u003cp\u003e\n * {@link Mockito#doCallRealMethod()}\n *\n *\n *\n *\n * \u003ch3 id\u003d\"13\"\u003e13. \u003ca class\u003d\"meaningful_link\" href\u003d\"#spy\"\u003eSpying on real objects\u003c/a\u003e\u003c/h3\u003e\n *\n * You can create spies of real objects. When you use the spy then the \u003cb\u003ereal\u003c/b\u003e methods are called\n * (unless a method was stubbed).\n * \u003cp\u003e\n * Real spies should be used \u003cb\u003ecarefully and occasionally\u003c/b\u003e, for example when dealing with legacy code.\n *\n * \u003cp\u003e\n * Spying on real objects can be associated with \"partial mocking\" concept.\n * \u003cb\u003eBefore the release 1.8\u003c/b\u003e, Mockito spies were not real partial mocks.\n * The reason was we thought partial mock is a code smell.\n * At some point we found legitimate use cases for partial mocks\n * (3rd party interfaces, interim refactoring of legacy code, the full article is \u003ca href\u003d\n * \"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\"\n * \u003ehere\u003c/a\u003e)\n * \u003cp\u003e\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   List list \u003d new LinkedList();\n *   List spy \u003d spy(list);\n *\n *   //optionally, you can stub out some methods:\n *   when(spy.size()).thenReturn(100);\n *\n *   //using the spy calls \u003cb\u003e*real*\u003c/b\u003e methods\n *   spy.add(\"one\");\n *   spy.add(\"two\");\n *\n *   //prints \"one\" - the first element of a list\n *   System.out.println(spy.get(0));\n *\n *   //size() method was stubbed - 100 is printed\n *   System.out.println(spy.size());\n *\n *   //optionally, you can verify\n *   verify(spy).add(\"one\");\n *   verify(spy).add(\"two\");\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003ch4\u003eImportant gotcha on spying real objects!\u003c/h4\u003e\n * \u003col\u003e\n * \u003cli\u003eSometimes it\u0027s impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n * Therefore when using spies please consider \u003ccode\u003edoReturn\u003c/code\u003e|\u003ccode\u003eAnswer\u003c/code\u003e|\u003ccode\u003eThrow()\u003c/code\u003e family of\n * methods for stubbing. Example:\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   List list \u003d new LinkedList();\n *   List spy \u003d spy(list);\n *\n *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n *   when(spy.get(0)).thenReturn(\"foo\");\n *\n *   //You have to use doReturn() for stubbing\n *   doReturn(\"foo\").when(spy).get(0);\n * \u003c/code\u003e\u003c/pre\u003e\n * \u003c/li\u003e\n *\n * \u003cli\u003eMockito \u003cb\u003e*does not*\u003c/b\u003e delegate calls to the passed real instance, instead it actually creates a copy of it.\n * So if you keep the real instance and interact with it, don\u0027t expect the spied to be aware of those interaction\n * and their effect on real instance state.\n * The corollary is that when an \u003cb\u003e*unstubbed*\u003c/b\u003e method is called \u003cb\u003e*on the spy*\u003c/b\u003e but \u003cb\u003e*not on the real instance*\u003c/b\u003e,\n * you won\u0027t see any effects on the real instance.\n * \u003c/li\u003e\n *\n * \u003cli\u003eWatch out for final methods.\n * Mockito doesn\u0027t mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method \u003d trouble.\n * Also you won\u0027t be able to verify those method as well.\n * \u003c/li\u003e\n * \u003c/ol\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"14\"\u003e14. Changing \u003ca class\u003d\"meaningful_link\" href\u003d\"#defaultreturn\"\u003edefault return values of unstubbed invocations\u003c/a\u003e (Since 1.7)\u003c/h3\u003e\n *\n * You can create a mock with specified strategy for its return values.\n * It\u0027s quite advanced feature and typically you don\u0027t need it to write decent tests.\n * However, it can be helpful for working with \u003cb\u003elegacy systems\u003c/b\u003e.\n * \u003cp\u003e\n * It is the default answer so it will be used \u003cb\u003eonly when you don\u0027t\u003c/b\u003e stub the method call.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   Foo mock \u003d mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n *   Foo mockTwo \u003d mock(Foo.class, new YourOwnAnswer());\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003e\n * Read more about this interesting implementation of \u003ci\u003eAnswer\u003c/i\u003e: {@link Mockito#RETURNS_SMART_NULLS}\n *\n *\n *\n *\n * \u003ch3 id\u003d\"15\"\u003e15. \u003ca class\u003d\"meaningful_link\" href\u003d\"#captors\"\u003eCapturing arguments\u003c/a\u003e for further assertions (Since 1.8.0)\u003c/h3\u003e\n *\n * Mockito verifies argument values in natural java style: by using an \u003ccode\u003eequals()\u003c/code\u003e method.\n * This is also the recommended way of matching arguments because it makes tests clean \u0026 simple.\n * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n * For example:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   ArgumentCaptor\u0026lt;Person\u0026gt; argument \u003d ArgumentCaptor.forClass(Person.class);\n *   verify(mock).doSomething(argument.capture());\n *   assertEquals(\"John\", argument.getValue().getName());\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cb\u003eWarning:\u003c/b\u003e it is recommended to use ArgumentCaptor with verification \u003cb\u003ebut not\u003c/b\u003e with stubbing.\n * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or \u0027then\u0027) block.\n * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.\n * \u003cp\u003e\n * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).\n * Both techniques can be used for making sure certain arguments where passed to mocks.\n * However, ArgumentCaptor may be a better fit if:\n * \u003cul\u003e\n * \u003cli\u003ecustom argument matcher is not likely to be reused\u003c/li\u003e\n * \u003cli\u003eyou just need it to assert on argument values to complete verification\u003c/li\u003e\n * \u003c/ul\u003e\n * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"16\"\u003e16. \u003ca class\u003d\"meaningful_link\" href\u003d\"#partial_mocks\"\u003eReal partial mocks\u003c/a\u003e (Since 1.8.0)\u003c/h3\u003e\n *\n *  Finally, after many internal debates \u0026 discussions on the mailing list, partial mock support was added to Mockito.\n *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n *  \u003ca href\u003d\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\"\u003ehere\u003c/a\u003e\n *  \u003cp\u003e\n *  \u003cb\u003eBefore release 1.8\u003c/b\u003e \u003ccode\u003espy()\u003c/code\u003e was not producing real partial mocks and it was confusing for some users.\n *  Read more about spying: \u003ca href\u003d\"#13\"\u003ehere\u003c/a\u003e or in javadoc for {@link Mockito#spy(Object)} method.\n *  \u003cp\u003e\n *  \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *    //you can create partial mock with spy() method:\n *    List list \u003d spy(new LinkedList());\n *\n *    //you can enable partial mock capabilities selectively on mocks:\n *    Foo mock \u003d mock(Foo.class);\n *    //Be sure the real implementation is \u0027safe\u0027.\n *    //If real implementation throws exceptions or depends on specific state of the object then you\u0027re in trouble.\n *    when(mock.someMethod()).thenCallRealMethod();\n *  \u003c/code\u003e\u003c/pre\u003e\n *\n * As usual you are going to read \u003cb\u003ethe partial mock warning\u003c/b\u003e:\n * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n * How does partial mock fit into this paradigm? Well, it just doesn\u0027t...\n * Partial mock usually means that the complexity has been moved to a different method on the same object.\n * In most cases, this is not the way you want to design your application.\n * \u003cp\u003e\n * However, there are rare cases when partial mocks come handy:\n * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n * However, I wouldn\u0027t use partial mocks for new, test-driven \u0026 well-designed code.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"17\"\u003e17. \u003ca class\u003d\"meaningful_link\" href\u003d\"#resetting_mocks\"\u003eResetting mocks\u003c/a\u003e (Since 1.8.0)\u003c/h3\u003e\n *\n * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n * Normally, you don\u0027t need to reset your mocks, just create new mocks for each test method.\n * \u003cp\u003e\n * Instead of \u003ccode\u003ereset()\u003c/code\u003e please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n * \u003cb\u003eFirst potential code smell is \u003ccode\u003ereset()\u003c/code\u003e in the middle of the test method.\u003c/b\u003e This probably means you\u0027re testing too much.\n * Follow the whisper of your test methods: \"Please keep us small \u0026 focused on single behavior\".\n * There are several threads about it on mockito mailing list.\n * \u003cp\u003e\n * The only reason we added \u003ccode\u003ereset()\u003c/code\u003e method is to\n * make it possible to work with container-injected mocks.\n * See issue 55 (\u003ca href\u003d\"http://code.google.com/p/mockito/issues/detail?id\u003d55\"\u003ehere\u003c/a\u003e)\n * or FAQ (\u003ca href\u003d\"http://code.google.com/p/mockito/wiki/FAQ\"\u003ehere\u003c/a\u003e).\n * \u003cp\u003e\n * \u003cb\u003eDon\u0027t harm yourself.\u003c/b\u003e \u003ccode\u003ereset()\u003c/code\u003e in the middle of the test method is a code smell (you\u0027re probably testing too much).\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   List mock \u003d mock(List.class);\n *   when(mock.size()).thenReturn(10);\n *   mock.add(1);\n *\n *   reset(mock);\n *   //at this point the mock forgot any interactions \u0026 stubbing\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"18\"\u003e18. \u003ca class\u003d\"meaningful_link\" href\u003d\"#framework_validation\"\u003eTroubleshooting \u0026 validating framework usage\u003c/a\u003e (Since 1.8.0)\u003c/h3\u003e\n *\n * First of all, in case of any trouble, I encourage you to read the Mockito FAQ:\n * \u003ca href\u003d\"http://code.google.com/p/mockito/wiki/FAQ\"\u003ehttp://code.google.com/p/mockito/wiki/FAQ\u003c/a\u003e\n * \u003cp\u003e\n * In case of questions you may also post to mockito mailing list:\n * \u003ca href\u003d\"http://groups.google.com/group/mockito\"\u003ehttp://groups.google.com/group/mockito\u003c/a\u003e\n * \u003cp\u003e\n * Next, you should know that Mockito validates if you use it correctly \u003cb\u003eall the time\u003c/b\u003e.\n * However, there\u0027s a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n *\n *\n *\n *\n * \u003ch3 id\u003d\"19\"\u003e19. \u003ca class\u003d\"meaningful_link\" href\u003d\"#bdd_mockito\"\u003eAliases for behavior driven development\u003c/a\u003e (Since 1.8.0)\u003c/h3\u003e\n *\n * Behavior Driven Development style of writing tests uses \u003cb\u003e//given //when //then\u003c/b\u003e comments as fundamental parts of your test methods.\n * This is exactly how we write our tests and we warmly encourage you to do so!\n * \u003cp\u003e\n * Start learning about BDD here: \u003ca href\u003d\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\"\u003ehttp://en.wikipedia.org/wiki/Behavior_Driven_Development\u003c/a\u003e\n * \u003cp\u003e\n * The problem is that current stubbing api with canonical role of \u003cb\u003ewhen\u003c/b\u003e word does not integrate nicely with \u003cb\u003e//given //when //then\u003c/b\u003e comments.\n * It\u0027s because stubbing belongs to \u003cb\u003egiven\u003c/b\u003e component of the test and not to the \u003cb\u003ewhen\u003c/b\u003e component of the test.\n * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method.\n * Now it really nicely integrates with the \u003cb\u003egiven\u003c/b\u003e component of a BDD style test!\n * \u003cp\u003e\n * Here is how the test might look like:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * import static org.mockito.BDDMockito.*;\n *\n * Seller seller \u003d mock(Seller.class);\n * Shop shop \u003d new Shop(seller);\n *\n * public void shouldBuyBread() throws Exception {\n *   //given\n *   given(seller.askForBread()).willReturn(new Bread());\n *\n *   //when\n *   Goods goods \u003d shop.buyBread();\n *\n *   //then\n *   assertThat(goods, containBread());\n * }\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"20\"\u003e20. \u003ca class\u003d\"meaningful_link\" href\u003d\"#serializable_mocks\"\u003eSerializable mocks\u003c/a\u003e (Since 1.8.1)\u003c/h3\u003e\n *\n * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n * \u003cp\u003e\n * WARNING: This should be rarely used in unit testing.\n * \u003cp\u003e\n * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n * was in a web environment and the objects from the external dependency were being serialized to pass between layers.\n * \u003cp\u003e\n * To create serializable mock use {@link MockSettings#serializable()}:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   List serializableMock \u003d mock(List.class, withSettings().serializable());\n * \u003c/code\u003e\u003c/pre\u003e\n * \u003cp\u003e\n * The mock can be serialized assuming all the normal \u003ca href\u003d\u0027http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html\u0027\u003e\n * serialization requirements\u003c/a\u003e are met by the class.\n * \u003cp\u003e\n * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version\n * which accepts MockSettings. No worries, you will hardly ever use it.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * List\u0026lt;Object\u0026gt; list \u003d new ArrayList\u0026lt;Object\u0026gt;();\n * List\u0026lt;Object\u0026gt; spy \u003d mock(ArrayList.class, withSettings()\n *                 .spiedInstance(list)\n *                 .defaultAnswer(CALLS_REAL_METHODS)\n *                 .serializable());\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"21\"\u003e21. New annotations: \u003ca class\u003d\"meaningful_link\" href\u003d\"#captor_annotation\"\u003e\u003ccode\u003e\u0026#064;Captor\u003c/code\u003e\u003c/a\u003e,\n * \u003ca class\u003d\"meaningful_link\" href\u003d\"#spy_annotation\"\u003e\u003ccode\u003e\u0026#064;Spy\u003c/code\u003e\u003c/a\u003e,\n * \u003ca class\u003d\"meaningful_link\" href\u003d\"#injectmocks_annotation\"\u003e\u003ccode\u003e\u0026#064;InjectMocks\u003c/code\u003e\u003c/a\u003e (Since 1.8.3)\u003c/h3\u003e\n *\n * \u003cp\u003e\n * Release 1.8.3 brings new annotations that may be helpful on occasion:\n *\n * \u003cul\u003e\n * \u003cli\u003e\u0026#064;{@link Captor} simplifies creation of {@link ArgumentCaptor}\n * - useful when the argument to capture is a nasty generic class and you want to avoid compiler warnings\n * \u003cli\u003e\u0026#064;{@link Spy} - you can use it instead {@link Mockito#spy(Object)}.\n * \u003cli\u003e\u0026#064;{@link InjectMocks} - injects mock or spy fields into tested object automatically.\n * \u003c/ul\u003e\n *\n * \u003cp\u003e\n * Note that \u0026#064;{@link InjectMocks} can also be used in combination with the \u0026#064;{@link Spy} annotation, it means\n * that Mockito will inject mocks into the partial mock under test. This complexity is another good reason why you\n * should only use partial mocks as a last resort. See point 16 about partial mocks.\n *\n * \u003cp\u003e\n * All new annotations are \u003cb\u003e*only*\u003c/b\u003e processed on {@link MockitoAnnotations#initMocks(Object)}.\n * Just like for \u0026#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner} or rule:\n * {@link MockitoRule}.\n * \u003cp\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"22\"\u003e22. \u003ca class\u003d\"meaningful_link\" href\u003d\"#verification_timeout\"\u003eVerification with timeout\u003c/a\u003e (Since 1.8.5)\u003c/h3\u003e\n * \u003cp\u003e\n * Allows verifying with timeout. It causes a verify to wait for a specified period of time for a desired\n * interaction rather than fails immediately if had not already happened. May be useful for testing in concurrent\n * conditions.\n * \u003cp\u003e\n * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system.\n * \u003cp\u003e\n * Not yet implemented to work with InOrder verification.\n * \u003cp\u003e\n * Examples:\n * \u003cp\u003e\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *   //passes when someMethod() is called within given time span\n *   verify(mock, timeout(100)).someMethod();\n *   //above is an alias to:\n *   verify(mock, timeout(100).times(1)).someMethod();\n *\n *   //passes when someMethod() is called \u003cb\u003e*exactly*\u003c/b\u003e 2 times within given time span\n *   verify(mock, timeout(100).times(2)).someMethod();\n *\n *   //passes when someMethod() is called \u003cb\u003e*at least*\u003c/b\u003e 2 times within given time span\n *   verify(mock, timeout(100).atLeast(2)).someMethod();\n *\n *   //verifies someMethod() within given time span using given verification mode\n *   //useful only if you have your own custom verification modes.\n *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"23\"\u003e23. \u003ca class\u003d\"meaningful_link\" href\u003d\"#automatic_instantiation\"\u003eAutomatic instantiation of \u003ccode\u003e\u0026#064;Spies\u003c/code\u003e,\n * \u003ccode\u003e\u0026#064;InjectMocks\u003c/code\u003e\u003c/a\u003e and \u003ca class\u003d\"meaningful_link\" href\u003d\"#constructor_injection\"\u003econstructor injection goodness\u003c/a\u003e (Since 1.9.0)\u003c/h3\u003e\n *\n * \u003cp\u003e\n * Mockito will now try to instantiate \u0026#064;{@link Spy} and will instantiate \u0026#064;{@link InjectMocks} fields\n * using \u003cb\u003econstructor\u003c/b\u003e injection, \u003cb\u003esetter\u003c/b\u003e injection, or \u003cb\u003efield\u003c/b\u003e injection.\n * \u003cp\u003e\n * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)}, {@link MockitoJUnitRunner}\n * or {@link MockitoRule}.\n * \u003cp\u003e\n * Read more about available tricks and the rules of injection in the javadoc for {@link InjectMocks}\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //instead:\n * \u0026#064;Spy BeerDrinker drinker \u003d new BeerDrinker();\n * //you can write:\n * \u0026#064;Spy BeerDrinker drinker;\n *\n * //same applies to \u0026#064;InjectMocks annotation:\n * \u0026#064;InjectMocks LocalPub;\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"24\"\u003e24. \u003ca class\u003d\"meaningful_link\" href\u003d\"#one_liner_stub\"\u003eOne-liner stubs\u003c/a\u003e (Since 1.9.0)\u003c/h3\u003e\n * \u003cp\u003e\n * Mockito will now allow you to create mocks when stubbing.\n * Basically, it allows to create a stub in one line of code.\n * This can be helpful to keep test code clean.\n * For example, some boring stub can be created \u0026 stubbed at field initialization in a test:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * public class CarTest {\n *   Car boringStubbedCar \u003d when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();\n *\n *   \u0026#064;Test public void should... {}\n * \u003c/code\u003e\u003c/pre\u003e\n *\n *\n *\n *\n * \u003ch3 id\u003d\"25\"\u003e25. \u003ca class\u003d\"meaningful_link\" href\u003d\"#ignore_stubs_verification\"\u003eVerification ignoring stubs\u003c/a\u003e (Since 1.9.0)\u003c/h3\u003e\n * \u003cp\u003e\n * Mockito will now allow to ignore stubbing for the sake of verification.\n * Sometimes useful when coupled with \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e or verification \u003ccode\u003einOrder()\u003c/code\u003e.\n * Helps avoiding redundant verification of stubbed calls - typically we\u0027re not interested in verifying stubs.\n * \u003cp\u003e\n * \u003cb\u003eWarning\u003c/b\u003e, \u003ccode\u003eignoreStubs()\u003c/code\u003e might lead to overuse of verifyNoMoreInteractions(ignoreStubs(...));\n * Bear in mind that Mockito does not recommend bombarding every test with \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e\n * for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}\n * \u003cp\u003eSome examples:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * verify(mock).foo();\n * verify(mockTwo).bar();\n *\n * //ignores all stubbed methods:\n * verifyNoMoreInvocations(ignoreStubs(mock, mockTwo));\n *\n * //creates InOrder that will ignore stubbed\n * InOrder inOrder \u003d inOrder(ignoreStubs(mock, mockTwo));\n * inOrder.verify(mock).foo();\n * inOrder.verify(mockTwo).bar();\n * inOrder.verifyNoMoreInteractions();\n * \u003c/code\u003e\u003c/pre\u003e\n * \u003cp\u003e\n * Advanced examples and more details can be found in javadoc for {@link Mockito#ignoreStubs(Object...)}\n *\n *\n *\n *\n * \u003ch3 id\u003d\"26\"\u003e26. \u003ca class\u003d\"meaningful_link\" href\u003d\"#mocking_details\"\u003eMocking details\u003c/a\u003e (Since 1.9.5)\u003c/h3\u003e\n * \u003cp\u003e\n * To identify whether a particular object is a mock or a spy:\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n *     Mockito.mockingDetails(someObject).isMock();\n *     Mockito.mockingDetails(someObject).isSpy();\n * \u003c/code\u003e\u003c/pre\u003e\n * Both the {@link MockingDetails#isMock} and {@link MockingDetails#isSpy()} methods return \u003ccode\u003eboolean\u003c/code\u003e.\n * As a spy is just a different kind of mock, \u003ccode\u003eisMock()\u003c/code\u003e returns true if the object is a spy.\n * In future Mockito versions MockingDetails may grow and provide other useful information about the mock,\n * e.g. invocations, stubbing info, etc.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"27\"\u003e27. \u003ca class\u003d\"meaningful_link\" href\u003d\"#delegating_call_to_real_instance\"\u003eDelegate calls to real instance\u003c/a\u003e (Since 1.9.5)\u003c/h3\u003e\n *\n * \u003cp\u003eUseful for spies or partial mocks of objects \u003cstrong\u003ethat are difficult to mock or spy\u003c/strong\u003e using the usual spy API.\n * Since Mockito 1.10.11, the delegate may or may not be of the same type as the mock.\n * If the type is different, a matching method needs to be found on delegate type otherwise an exception is thrown.\n *\n * Possible use cases for this feature:\n * \u003cul\u003e\n *     \u003cli\u003eFinal classes but with an interface\u003c/li\u003e\n *     \u003cli\u003eAlready custom proxied object\u003c/li\u003e\n *     \u003cli\u003eSpecial objects with a finalize method, i.e. to avoid executing it 2 times\u003c/li\u003e\n * \u003c/ul\u003e\n *\n * \u003cp\u003eThe difference with the regular spy:\n * \u003cul\u003e\n *   \u003cli\u003e\n *     The regular spy ({@link #spy(Object)}) contains \u003cstrong\u003eall\u003c/strong\u003e state from the spied instance\n *     and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.\n *     If you call a method on a regular spy and it internally calls other methods on this spy, those calls are remembered\n *     for verifications, and they can be effectively stubbed.\n *   \u003c/li\u003e\n *   \u003cli\u003e\n *     The mock that delegates simply delegates all methods to the delegate.\n *     The delegate is used all the time as methods are delegated onto it.\n *     If you call a method on a mock that delegates and it internally calls other methods on this mock,\n *     those calls are \u003cstrong\u003enot\u003c/strong\u003e remembered for verifications, stubbing does not have effect on them, too.\n *     Mock that delegates is less powerful than the regular spy but it is useful when the regular spy cannot be created.\n *   \u003c/li\u003e\n * \u003c/ul\u003e\n *\n * \u003cp\u003e\n * See more information in docs for {@link AdditionalAnswers#delegatesTo(Object)}.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"28\"\u003e28. \u003ca class\u003d\"meaningful_link\" href\u003d\"#mock_maker_plugin\"\u003e\u003ccode\u003eMockMaker\u003c/code\u003e API\u003c/a\u003e (Since 1.9.5)\u003c/h3\u003e\n * \u003cp\u003eDriven by requirements and patches from Google Android guys Mockito now offers an extension point\n *   that allows replacing the proxy generation engine. By default, Mockito uses cglib to create dynamic proxies.\n * \u003cp\u003eThe extension point is for advanced users that want to extend Mockito. For example, it is now possible\n *   to use Mockito for Android testing with a help of dexmaker.\n * \u003cp\u003eFor more details, motivations and examples please refer to\n * the docs for {@link org.mockito.plugins.MockMaker}.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"29\"\u003e29. \u003ca class\u003d\"meaningful_link\" href\u003d\"#BDD_behavior_verification\"\u003e(new) BDD style verification\u003c/a\u003e (Since 1.10.0)\u003c/h3\u003e\n *\n * Enables Behavior Driven Development (BDD) style verification by starting verification with the BDD \u003cb\u003ethen\u003c/b\u003e keyword.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * given(dog.bark()).willReturn(2);\n *\n * // when\n * ...\n *\n * then(person).should(times(2)).ride(bike);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * For more information and an example see {@link BDDMockito#then(Object)}}\n *\n *\n *\n *\n * \u003ch3 id\u003d\"30\"\u003e30. \u003ca class\u003d\"meaningful_link\" href\u003d\"#spying_abstract_classes\"\u003e(new) Spying or mocking abstract classes (Since 1.10.12)\u003c/a\u003e\u003c/h3\u003e\n *\n * It is now possible to conveniently spy on abstract classes. Note that overusing spies hints at code design smells (see {@link #spy(Object)}).\n * \u003cp\u003e\n * Previously, spying was only possible on instances of objects.\n * New API makes it possible to use constructor when creating an instance of the mock.\n * This is particularly useful for mocking abstract classes because the user is no longer required to provide an instance of the abstract class.\n * At the moment, only parameter-less constructor is supported, let us know if it is not enough.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * //convenience API, new overloaded spy() method:\n * SomeAbstract spy \u003d spy(SomeAbstract.class);\n *\n * //Robust API, via settings builder:\n * OtherAbstract spy \u003d mock(OtherAbstract.class, withSettings()\n *    .useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n *\n * //Mocking a non-static inner abstract class:\n * InnerAbstract spy \u003d mock(InnerAbstract.class, withSettings()\n *    .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * For more information please see {@link MockSettings#useConstructor()}.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"31\"\u003e31. \u003ca class\u003d\"meaningful_link\" href\u003d\"#serilization_across_classloader\"\u003e(new) Mockito mocks can be \u003cem\u003eserialized\u003c/em\u003e / \u003cem\u003edeserialized\u003c/em\u003e across classloaders (Since 1.10.0)\u003c/a\u003e\u003c/h3\u003e\n *\n * Mockito introduces serialization across classloader.\n *\n * Like with any other form of serialization, all types in the mock hierarchy have to serializable, inclusing answers.\n * As this serialization mode require considerably more work, this is an opt-in setting.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * // use regular serialization\n * mock(Book.class, withSettings().serializable());\n *\n * // use serialization across classloaders\n * mock(Book.class, withSettings().serializable(ACROSS_CLASSLOADERS));\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * For more details see {@link MockSettings#serializable(SerializableMode)}.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"32\"\u003e32. \u003ca class\u003d\"meaningful_link\" href\u003d\"#better_generic_support_with_deep_stubs\"\u003e(new) Better generic support with deep stubs (Since 1.10.0)\u003c/a\u003e\u003c/h3\u003e\n *\n * Deep stubbing has been improved to find generic information if available in the class.\n * That means that classes like this can be used without having to mock the behavior.\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * class Lines extends List\u0026lt;Line\u0026gt; {\n *     // ...\n * }\n *\n * lines \u003d mock(Lines.class, RETURNS_DEEP_STUBS);\n *\n * // Now Mockito understand this is not an Object but a Line\n * Line line \u003d lines.iterator().next();\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * Please note that in most scenarios a mock returning a mock is wrong.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"33\"\u003e33. \u003ca class\u003d\"meaningful_link\" href\u003d\"#mockito_junit_rule\"\u003e(new) Mockito JUnit rule (Since 1.10.17)\u003c/a\u003e\u003c/h3\u003e\n *\n * Mockito now offers a JUnit rule. Until now in JUnit there was two wasy to initialize fields annotated by Mockito annotations\n * such as \u003ccode\u003e\u0026#064;{@link Mock}\u003c/code\u003e, \u003ccode\u003e\u0026#064;{@link Spy}\u003c/code\u003e, \u003ccode\u003e\u0026#064;{@link InjectMocks}\u003c/code\u003e, etc.\n *\n * \u003cul\u003e\n *     \u003cli\u003eAnnotating the JUnit test class with a \u003ccode\u003e\u0026#064;{@link org.junit.runner.RunWith}(\u0026#064;{@link MockitoJUnitRunner}.class)\u003c/code\u003e\u003c/li\u003e\n *     \u003cli\u003eInvoking \u003ccode\u003e{@link MockitoAnnotations#initMocks(Object)}\u003c/code\u003e in the \u003ccode\u003e\u0026#064;{@link org.junit.Before}\u003c/code\u003e method\u003c/li\u003e\n * \u003c/ul\u003e\n *\n * Now you can choose to use a rule :\n *\n * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n * \u0026#064;RunWith(YetAnotherRunner.class)\n * public class TheTest {\n *     \u0026#064;Rule public MockitoRule mockito \u003d MockitoJUnit.rule();\n *     // ...\n * }\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * For more information see {@link MockitoJUnit#rule()}.\n *\n *\n *\n *\n * \u003ch3 id\u003d\"34\"\u003e34. \u003ca class\u003d\"meaningful_link\" href\u003d\"#plugin_switch\"\u003e(new) Switch \u003cem\u003eon\u003c/em\u003e or \u003cem\u003eoff\u003c/em\u003e plugins (Since 1.10.15)\u003c/a\u003e\u003c/h3\u003e\n *\n * An incubating feature made it\u0027s way in mockito that will allow to toggle a mockito-plugin.\n *\n * More information here {@link org.mockito.plugins.PluginSwitch}.\n *\n *\n *\n *\n *\n *\n "
    },
    {
      "type": "field",
      "varNames": [
        "MOCKITO_CORE"
      ],
      "begin_line": 1069,
      "end_line": 1069,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "RETURNS_DEFAULTS"
      ],
      "begin_line": 1080,
      "end_line": 1080,
      "comment": "\n     * The default \u003ccode\u003eAnswer\u003c/code\u003e of every mock \u003cb\u003eif\u003c/b\u003e the mock was not stubbed.\n     * Typically it just returns some empty value.\n     * \u003cp\u003e\n     * {@link Answer} can be used to define the return values of unstubbed invocations.\n     * \u003cp\u003e\n     * This implementation first tries the global configuration.\n     * If there is no global configuration then it uses {@link ReturnsEmptyValues} (returns zeros, empty collections, nulls, etc.)\n     "
    },
    {
      "type": "field",
      "varNames": [
        "RETURNS_SMART_NULLS"
      ],
      "begin_line": 1112,
      "end_line": 1112,
      "comment": "\n     * Optional \u003ccode\u003eAnswer\u003c/code\u003e to be used with {@link Mockito#mock(Class, Answer)}.\n     * \u003cp\u003e\n     * {@link Answer} can be used to define the return values of unstubbed invocations.\n     * \u003cp\u003e\n     * This implementation can be helpful when working with legacy code.\n     * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n     * This implementation of Answer \u003cb\u003ereturns SmartNull instead of null\u003c/b\u003e.\n     * \u003ccode\u003eSmartNull\u003c/code\u003e gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n     * \u003cp\u003e\n     * \u003ccode\u003eReturnsSmartNulls\u003c/code\u003e first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n     * then it tries to return SmartNull. If the return type is final then plain null is returned.\n     * \u003cp\u003e\n     * \u003ccode\u003eReturnsSmartNulls\u003c/code\u003e will be probably the default return values strategy in Mockito 2.0.\n     * \u003cp\u003e\n     * Example:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   Foo mock \u003d (Foo.class, RETURNS_SMART_NULLS);\n     *\n     *   //calling unstubbed method here:\n     *   Stuff stuff \u003d mock.getStuff();\n     *\n     *   //using object returned by unstubbed call:\n     *   stuff.doSomething();\n     *\n     *   //Above doesn\u0027t yield NullPointerException this time!\n     *   //Instead, SmartNullPointerException is thrown.\n     *   //Exception\u0027s cause links to unstubbed \u003ci\u003emock.getStuff()\u003c/i\u003e - just click on the stack trace.\n     * \u003c/code\u003e\u003c/pre\u003e\n     "
    },
    {
      "type": "field",
      "varNames": [
        "RETURNS_MOCKS"
      ],
      "begin_line": 1125,
      "end_line": 1125,
      "comment": "\n     * Optional \u003ccode\u003eAnswer\u003c/code\u003e to be used with {@link Mockito#mock(Class, Answer)}\n     * \u003cp\u003e\n     * {@link Answer} can be used to define the return values of unstubbed invocations.\n     * \u003cp\u003e\n     * This implementation can be helpful when working with legacy code.\n     * \u003cp\u003e\n     * ReturnsMocks first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n     * then it tries to return mocks. If the return type cannot be mocked (e.g. is final) then plain null is returned.\n     * \u003cp\u003e\n     "
    },
    {
      "type": "field",
      "varNames": [
        "RETURNS_DEEP_STUBS"
      ],
      "begin_line": 1212,
      "end_line": 1212,
      "comment": "\n     * Optional \u003ccode\u003eAnswer\u003c/code\u003e to be used with {@link Mockito#mock(Class, Answer)}.\n     * \u003cp\u003e\n     * Example that shows how deep stub works:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   Foo mock \u003d mock(Foo.class, RETURNS_DEEP_STUBS);\n     *\n     *   // note that we\u0027re stubbing a chain of methods here: getBar().getName()\n     *   when(mock.getBar().getName()).thenReturn(\"deep\");\n     *\n     *   // note that we\u0027re chaining method calls: getBar().getName()\n     *   assertEquals(\"deep\", mock.getBar().getName());\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * \u003cstrong\u003eWARNING: \u003c/strong\u003e\n     * This feature should rarely be required for regular clean code! Leave it for legacy code.\n     * Mocking a mock to return a mock, to return a mock, (...), to return something meaningful\n     * hints at violation of Law of Demeter or mocking a value object (a well known anti-pattern).\n     * \u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * Good quote I\u0027ve seen one day on the web: \u003cstrong\u003eevery time a mock returns a mock a fairy dies\u003c/strong\u003e.\n     * \u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * Please note that this answer will return existing mocks that matches the stub. This\n     * behavior is ok with deep stubs and allows verification to work on the last mock of the chain.\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   when(mock.getBar(anyString()).getThingy().getName()).thenReturn(\"deep\");\n     *\n     *   mock.getBar(\"candy bar\").getThingy().getName();\n     *\n     *   assertSame(mock.getBar(anyString()).getThingy().getName(), mock.getBar(anyString()).getThingy().getName());\n     *   verify(mock.getBar(\"candy bar\").getThingy()).getName();\n     *   verify(mock.getBar(anyString()).getThingy()).getName();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * Verification only works with the last mock in the chain. You can use verification modes.\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   when(person.getAddress(anyString()).getStreet().getName()).thenReturn(\"deep\");\n     *   when(person.getAddress(anyString()).getStreet(Locale.ITALIAN).getName()).thenReturn(\"deep\");\n     *   when(person.getAddress(anyString()).getStreet(Locale.CHINESE).getName()).thenReturn(\"deep\");\n     *\n     *   person.getAddress(\"the docks\").getStreet().getName();\n     *   person.getAddress(\"the docks\").getStreet().getLongName();\n     *   person.getAddress(\"the docks\").getStreet(Locale.ITALIAN).getName();\n     *   person.getAddress(\"the docks\").getStreet(Locale.CHINESE).getName();\n     *\n     *   // note that we are actually referring to the very last mock in the stubbing chain.\n     *   InOrder inOrder \u003d inOrder(\n     *       person.getAddress(\"the docks\").getStreet(),\n     *       person.getAddress(\"the docks\").getStreet(Locale.CHINESE),\n     *       person.getAddress(\"the docks\").getStreet(Locale.ITALIAN)\n     *   );\n     *   inOrder.verify(person.getAddress(\"the docks\").getStreet(), times(1)).getName();\n     *   inOrder.verify(person.getAddress(\"the docks\").getStreet()).getLongName();\n     *   inOrder.verify(person.getAddress(\"the docks\").getStreet(Locale.ITALIAN), atLeast(1)).getName();\n     *   inOrder.verify(person.getAddress(\"the docks\").getStreet(Locale.CHINESE)).getName();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * How deep stub work internally?\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //this:\n     *   Foo mock \u003d mock(Foo.class, RETURNS_DEEP_STUBS);\n     *   when(mock.getBar().getName(), \"deep\");\n     *\n     *   //is equivalent of\n     *   Foo foo \u003d mock(Foo.class);\n     *   Bar bar \u003d mock(Bar.class);\n     *   when(foo.getBar()).thenReturn(bar);\n     *   when(bar.getName()).thenReturn(\"deep\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * This feature will not work when any return type of methods included in the chain cannot be mocked\n     * (for example: is a primitive or a final class). This is because of java type system.\n     * \u003c/p\u003e\n     "
    },
    {
      "type": "field",
      "varNames": [
        "CALLS_REAL_METHODS"
      ],
      "begin_line": 1246,
      "end_line": 1246,
      "comment": "\n     * Optional \u003ccode\u003eAnswer\u003c/code\u003e to be used with {@link Mockito#mock(Class, Answer)}\n     * \u003cp\u003e\n     * {@link Answer} can be used to define the return values of unstubbed invocations.\n     * \u003cp\u003e\n     * This implementation can be helpful when working with legacy code.\n     * When this implementation is used, unstubbed methods will delegate to the real implementation.\n     * This is a way to create a partial mock object that calls real methods by default.\n     * \u003cp\u003e\n     * As usual you are going to read \u003cb\u003ethe partial mock warning\u003c/b\u003e:\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n     * How does partial mock fit into this paradigm? Well, it just doesn\u0027t...\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\n     * In most cases, this is not the way you want to design your application.\n     * \u003cp\u003e\n     * However, there are rare cases when partial mocks come handy:\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n     * However, I wouldn\u0027t use partial mocks for new, test-driven \u0026 well-designed code.\n     * \u003cp\u003e\n     * Example:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     * Foo mock \u003d mock(Foo.class, CALLS_REAL_METHODS);\n     *\n     * // this calls the real implementation of Foo.getSomething()\n     * value \u003d mock.getSomething();\n     *\n     * when(mock.getSomething()).thenReturn(fakeValue);\n     *\n     * // now fakeValue is returned\n     * value \u003d mock.getSomething();\n     * \u003c/code\u003e\u003c/pre\u003e\n     "
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e)",
      "begin_line": 1255,
      "end_line": 1257,
      "comment": "\n     * Creates mock object of given class or interface.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param classToMock class or interface to mock\n     * @return mock object\n     ",
      "child_ranges": [
        "(line 1256,col 9)-(line 1256,col 81)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, java.lang.String)",
      "begin_line": 1274,
      "end_line": 1278,
      "comment": "\n     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.\n     * \u003cp\u003e\n     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.\n     * \u003cb\u003eIf you have too many mocks then refactor the code\u003c/b\u003e so that it\u0027s easy to test/debug without necessity of naming mocks.\n     * \u003cp\u003e\n     * \u003cb\u003eIf you use \u003ccode\u003e\u0026#064;Mock\u003c/code\u003e annotation then you\u0027ve got naming mocks for free!\u003c/b\u003e \u003ccode\u003e\u0026#064;Mock\u003c/code\u003e uses field name as mock name. {@link Mock Read more.}\n     * \u003cp\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param classToMock class or interface to mock\n     * @param name of the mock\n     * @return mock object\n     ",
      "child_ranges": [
        "(line 1275,col 9)-(line 1277,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.mockingDetails(java.lang.Object)",
      "begin_line": 1292,
      "end_line": 1294,
      "comment": "\n     * Returns a MockingDetails instance that enables inspecting a particular object for Mockito related information.\n     * Can be used to find out if given object is a Mockito mock\n     * or to find out if a given mock is a spy or mock.\n     * \u003cp\u003e\n     * In future Mockito versions MockingDetails may grow and provide other useful information about the mock,\n     * e.g. invocations, stubbing info, etc.\n     *\n     * @param toInspect - object to inspect. null input is allowed.\n     * @return A {@link org.mockito.MockingDetails} instance.\n     * @since 1.9.5\n     ",
      "child_ranges": [
        "(line 1293,col 9)-(line 1293,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, org.mockito.ReturnValues)",
      "begin_line": 1326,
      "end_line": 1329,
      "comment": "\n     * \u003cb\u003eDeprecated : Please use mock(Foo.class, defaultAnswer);\u003c/b\u003e\n     * \u003cp\u003e\n     * See {@link Mockito#mock(Class, Answer)}\n     * \u003cp\u003e\n     * Why it is deprecated? ReturnValues is being replaced by Answer\n     * for better consistency \u0026 interoperability of the framework.\n     * Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.\n     * There\u0027s no point in mainting exactly the same interfaces.\n     * \u003cp\u003e\n     * Creates mock with a specified strategy for its return values.\n     * It\u0027s quite advanced feature and typically you don\u0027t need it to write decent tests.\n     * However it can be helpful when working with legacy systems.\n     * \u003cp\u003e\n     * Obviously return values are used only when you don\u0027t stub the method call.\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   Foo mock \u003d mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n     *   Foo mockTwo \u003d mock(Foo.class, new YourOwnReturnValues());\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * \u003cp\u003eSee examples in javadoc for {@link Mockito} class\u003c/p\u003e\n     *\n     * @param classToMock class or interface to mock\n     * @param returnValues default return values for unstubbed methods\n     *\n     * @return mock object\n     *\n     * @deprecated \u003cb\u003ePlease use mock(Foo.class, defaultAnswer);\u003c/b\u003e\n     ",
      "child_ranges": [
        "(line 1328,col 9)-(line 1328,col 108)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, org.mockito.stubbing.Answer)",
      "begin_line": 1350,
      "end_line": 1352,
      "comment": "\n     * Creates mock with a specified strategy for its answers to interactions.\n     * It\u0027s quite advanced feature and typically you don\u0027t need it to write decent tests.\n     * However it can be helpful when working with legacy systems.\n     * \u003cp\u003e\n     * It is the default answer so it will be used \u003cb\u003eonly when you don\u0027t\u003c/b\u003e stub the method call.\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   Foo mock \u003d mock(Foo.class, RETURNS_SMART_NULLS);\n     *   Foo mockTwo \u003d mock(Foo.class, new YourOwnAnswer());\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * \u003cp\u003eSee examples in javadoc for {@link Mockito} class\u003c/p\u003e\n     *\n     * @param classToMock class or interface to mock\n     * @param defaultAnswer default answer for unstubbed methods\n     *\n     * @return mock object\n     ",
      "child_ranges": [
        "(line 1351,col 9)-(line 1351,col 78)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.mock(java.lang.Class\u003cT\u003e, org.mockito.MockSettings)",
      "begin_line": 1377,
      "end_line": 1379,
      "comment": "\n     * Creates a mock with some non-standard settings.\n     * \u003cp\u003e\n     * The number of configuration points for a mock grows\n     * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods.\n     * Hence {@link MockSettings}.\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   Listener mock \u003d mock(Listener.class, withSettings()\n     *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\n     *   );\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003cb\u003eUse it carefully and occasionally\u003c/b\u003e. What might be reason your test needs non-standard mocks?\n     * Is the code under test so complicated that it requires non-standard mocks?\n     * Wouldn\u0027t you prefer to refactor the code under test so it is testable in a simple way?\n     * \u003cp\u003e\n     * See also {@link Mockito#withSettings()}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param classToMock class or interface to mock\n     * @param mockSettings additional mock settings\n     * @return mock object\n     ",
      "child_ranges": [
        "(line 1378,col 9)-(line 1378,col 60)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.spy(T)",
      "begin_line": 1460,
      "end_line": 1464,
      "comment": "\n     * Creates a spy of the real object. The spy calls \u003cb\u003ereal\u003c/b\u003e methods unless they are stubbed.\n     * \u003cp\u003e\n     * Real spies should be used \u003cb\u003ecarefully and occasionally\u003c/b\u003e, for example when dealing with legacy code.\n     * \u003cp\u003e\n     * As usual you are going to read \u003cb\u003ethe partial mock warning\u003c/b\u003e:\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n     * How does partial mock fit into this paradigm? Well, it just doesn\u0027t...\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\n     * In most cases, this is not the way you want to design your application.\n     * \u003cp\u003e\n     * However, there are rare cases when partial mocks come handy:\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n     * However, I wouldn\u0027t use partial mocks for new, test-driven \u0026 well-designed code.\n     * \u003cp\u003e\n     * Example:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   List list \u003d new LinkedList();\n     *   List spy \u003d spy(list);\n     *\n     *   //optionally, you can stub out some methods:\n     *   when(spy.size()).thenReturn(100);\n     *\n     *   //using the spy calls \u003cb\u003ereal\u003c/b\u003e methods\n     *   spy.add(\"one\");\n     *   spy.add(\"two\");\n     *\n     *   //prints \"one\" - the first element of a list\n     *   System.out.println(spy.get(0));\n     *\n     *   //size() method was stubbed - 100 is printed\n     *   System.out.println(spy.size());\n     *\n     *   //optionally, you can verify\n     *   verify(spy).add(\"one\");\n     *   verify(spy).add(\"two\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * \u003ch4\u003eImportant gotcha on spying real objects!\u003c/h4\u003e\n     * \u003col\u003e\n     * \u003cli\u003eSometimes it\u0027s impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n     * Therefore for spies it is recommended to always use \u003ccode\u003edoReturn\u003c/code\u003e|\u003ccode\u003eAnswer\u003c/code\u003e|\u003ccode\u003eThrow()\u003c/code\u003e|\u003ccode\u003eCallRealMethod\u003c/code\u003e\n     * family of methods for stubbing. Example:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   List list \u003d new LinkedList();\n     *   List spy \u003d spy(list);\n     *\n     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n     *   when(spy.get(0)).thenReturn(\"foo\");\n     *\n     *   //You have to use doReturn() for stubbing\n     *   doReturn(\"foo\").when(spy).get(0);\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/li\u003e\n     *\n     * \u003cli\u003eMockito \u003cb\u003e*does not*\u003c/b\u003e delegate calls to the passed real instance, instead it actually creates a copy of it.\n     * So if you keep the real instance and interact with it, don\u0027t expect the spied to be aware of those interaction\n     * and their effect on real instance state.\n     * The corollary is that when an \u003cb\u003e*unstubbed*\u003c/b\u003e method is called \u003cb\u003e*on the spy*\u003c/b\u003e but \u003cb\u003e*not on the real instance*\u003c/b\u003e,\n     * you won\u0027t see any effects on the real instance.\u003c/li\u003e\n     *\n     * \u003cli\u003eWatch out for final methods.\n     * Mockito doesn\u0027t mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method \u003d trouble.\n     * Also you won\u0027t be able to verify those method as well.\n     * \u003c/li\u003e\n     * \u003c/ol\u003e\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * \u003cp\u003eNote that the spy won\u0027t have any annotations of the spied type, because CGLIB won\u0027t rewrite them.\n     * It may troublesome for code that rely on the spy to have these annotations.\u003c/p\u003e\n     *\n     *\n     * @param object\n     *            to spy on\n     * @return a spy of the real object\n     ",
      "child_ranges": [
        "(line 1461,col 9)-(line 1463,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.spy(java.lang.Class\u003cT\u003e)",
      "begin_line": 1493,
      "end_line": 1498,
      "comment": "\n     * Please refer to the documentation of {@link #spy(Object)}.\n     * Overusing spies hints at code design smells.\n     * \u003cp\u003e\n     * This method, in contrast to the original {@link #spy(Object)}, creates a spy based on class instead of an object.\n     * Sometimes it is more convenient to create spy based on the class and avoid providing an instance of a spied object.\n     * This is particularly useful for spying on abstract classes because they cannot be instantiated.\n     * See also {@link MockSettings#useConstructor()}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   SomeAbstract spy \u003d spy(SomeAbstract.class);\n     *\n     *   //Robust API, via settings builder:\n     *   OtherAbstract spy \u003d mock(OtherAbstract.class, withSettings()\n     *      .useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n     *\n     *   //Mocking a non-static inner abstract class:\n     *   InnerAbstract spy \u003d mock(InnerAbstract.class, withSettings()\n     *      .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * @param classToSpy the class to spy\n     * @param \u003cT\u003e type of the spy\n     * @return a spy of the provided class\n     * @since 1.10.12\n     ",
      "child_ranges": [
        "(line 1495,col 9)-(line 1497,col 52)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.stub(T)",
      "begin_line": 1549,
      "end_line": 1551,
      "comment": "\n     * Stubs a method call with return value or an exception. E.g:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     * stub(mock.someMethod()).toReturn(10);\n     *\n     * //you can use flexible argument matchers, e.g:\n     * stub(mock.someMethod(\u003cb\u003eanyString()\u003c/b\u003e)).toReturn(10);\n     *\n     * //setting exception to be thrown:\n     * stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n     *\n     * //you can stub with different behavior for consecutive method calls.\n     * //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.\n     * stub(mock.someMethod(\"some arg\"))\n     *  .toThrow(new RuntimeException())\n     *  .toReturn(\"foo\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003cp\u003e\n     * Some users find stub() confusing therefore {@link Mockito#when(Object)} is recommended over stub()\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //Instead of:\n     *   stub(mock.count()).toReturn(10);\n     *\n     *   //You can do:\n     *   when(mock.count()).thenReturn(10);\n     * \u003c/code\u003e\u003c/pre\u003e\n     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable)}\n     * \u003cp\u003e\n     * Stubbing can be overridden: for example common stubbing can go to fixture\n     * setup but the test methods can override it.\n     * Please note that overridding stubbing is a potential code smell that points out too much stubbing.\n     * \u003cp\u003e\n     * Once stubbed, the method will always return stubbed value regardless\n     * of how many times it is called.\n     * \u003cp\u003e\n     * Last stubbing is more important - when you stubbed the same method with\n     * the same arguments many times.\n     * \u003cp\u003e\n     * Although it is possible to verify a stubbed invocation, usually \u003cb\u003eit\u0027s just redundant\u003c/b\u003e.\n     * Let\u0027s say you\u0027ve stubbed foo.bar().\n     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).\n     * If your code doesn\u0027t care what get(0) returns then it should not be stubbed.\n     * Not convinced? See \u003ca href\u003d\"http://monkeyisland.pl/2008/04/26/asking-and-telling\"\u003ehere\u003c/a\u003e.\n     *\n     * @param methodCall\n     *            method call\n     * @return DeprecatedOngoingStubbing object to set stubbed value/exception\n     ",
      "child_ranges": [
        "(line 1550,col 9)-(line 1550,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.when(T)",
      "begin_line": 1615,
      "end_line": 1617,
      "comment": "\n     * Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called.\n     * \u003cp\u003e\n     * Simply put: \"\u003cb\u003eWhen\u003c/b\u003e the x method is called \u003cb\u003ethen\u003c/b\u003e return y\".\n     * \u003cp\u003e\n     * \u003cb\u003ewhen() is a successor of deprecated {@link Mockito#stub(Object)}\u003c/b\u003e\n     * \u003cp\u003e\n     * Examples:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     * \u003cb\u003ewhen\u003c/b\u003e(mock.someMethod()).\u003cb\u003ethenReturn\u003c/b\u003e(10);\n     *\n     * //you can use flexible argument matchers, e.g:\n     * when(mock.someMethod(\u003cb\u003eanyString()\u003c/b\u003e)).thenReturn(10);\n     *\n     * //setting exception to be thrown:\n     * when(mock.someMethod(\"some arg\")).thenThrow(new RuntimeException());\n     *\n     * //you can set different behavior for consecutive method calls.\n     * //Last stubbing (e.g: thenReturn(\"foo\")) determines the behavior of further consecutive calls.\n     * when(mock.someMethod(\"some arg\"))\n     *  .thenThrow(new RuntimeException())\n     *  .thenReturn(\"foo\");\n     *\n     * //Alternative, shorter version for consecutive stubbing:\n     * when(mock.someMethod(\"some arg\"))\n     *  .thenReturn(\"one\", \"two\");\n     * //is the same as:\n     * when(mock.someMethod(\"some arg\"))\n     *  .thenReturn(\"one\")\n     *  .thenReturn(\"two\");\n     *\n     * //shorter version for consecutive method calls throwing exceptions:\n     * when(mock.someMethod(\"some arg\"))\n     *  .thenThrow(new RuntimeException(), new NullPointerException();\n     *\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable)}\n     * \u003cp\u003e\n     * Stubbing can be overridden: for example common stubbing can go to fixture\n     * setup but the test methods can override it.\n     * Please note that overridding stubbing is a potential code smell that points out too much stubbing.\n     * \u003cp\u003e\n     * Once stubbed, the method will always return stubbed value regardless\n     * of how many times it is called.\n     * \u003cp\u003e\n     * Last stubbing is more important - when you stubbed the same method with\n     * the same arguments many times.\n     * \u003cp\u003e\n     * Although it is possible to verify a stubbed invocation, usually \u003cb\u003eit\u0027s just redundant\u003c/b\u003e.\n     * Let\u0027s say you\u0027ve stubbed \u003ccode\u003efoo.bar()\u003c/code\u003e.\n     * If your code cares what \u003ccode\u003efoo.bar()\u003c/code\u003e returns then something else breaks(often before even \u003ccode\u003everify()\u003c/code\u003e gets executed).\n     * If your code doesn\u0027t care what \u003ccode\u003eget(0)\u003c/code\u003e returns then it should not be stubbed.\n     * Not convinced? See \u003ca href\u003d\"http://monkeyisland.pl/2008/04/26/asking-and-telling\"\u003ehere\u003c/a\u003e.\n     *\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     * @param methodCall method to be stubbed\n     * @return OngoingStubbing object used to stub fluently.\n     *         \u003cstrong\u003eDo not\u003c/strong\u003e create a reference to this returned object.\n     ",
      "child_ranges": [
        "(line 1616,col 9)-(line 1616,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.verify(T)",
      "begin_line": 1646,
      "end_line": 1648,
      "comment": "\n     * Verifies certain behavior \u003cb\u003ehappened once\u003c/b\u003e.\n     * \u003cp\u003e\n     * Alias to \u003ccode\u003everify(mock, times(1))\u003c/code\u003e E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock).someMethod(\"some arg\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     * Above is equivalent to:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, times(1)).someMethod(\"some arg\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003cp\u003e\n     * Arguments passed are compared using \u003ccode\u003eequals()\u003c/code\u003e method.\n     * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.\n     * \u003cp\u003e\n     * Although it is possible to verify a stubbed invocation, usually \u003cb\u003eit\u0027s just redundant\u003c/b\u003e.\n     * Let\u0027s say you\u0027ve stubbed \u003ccode\u003efoo.bar()\u003c/code\u003e.\n     * If your code cares what \u003ccode\u003efoo.bar()\u003c/code\u003e returns then something else breaks(often before even \u003ccode\u003everify()\u003c/code\u003e gets executed).\n     * If your code doesn\u0027t care what \u003ccode\u003eget(0)\u003c/code\u003e returns then it should not be stubbed.\n     * Not convinced? See \u003ca href\u003d\"http://monkeyisland.pl/2008/04/26/asking-and-telling\"\u003ehere\u003c/a\u003e.\n     *\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param mock to be verified\n     * @return mock object itself\n     ",
      "child_ranges": [
        "(line 1647,col 9)-(line 1647,col 51)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.verify(T, org.mockito.verification.VerificationMode)",
      "begin_line": 1672,
      "end_line": 1674,
      "comment": "\n     * Verifies certain behavior happened at least once / exact number of times / never. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, times(5)).someMethod(\"was called five times\");\n     *\n     *   verify(mock, atLeast(2)).someMethod(\"was called at least two times\");\n     *\n     *   //you can use flexible argument matchers, e.g:\n     *   verify(mock, atLeastOnce()).someMethod(\u003cb\u003eanyString()\u003c/b\u003e);\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * \u003cb\u003etimes(1) is the default\u003c/b\u003e and can be omitted\n     * \u003cp\u003e\n     * Arguments passed are compared using \u003ccode\u003eequals()\u003c/code\u003e method.\n     * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.\n     * \u003cp\u003e\n     *\n     * @param mock to be verified\n     * @param mode times(x), atLeastOnce() or never()\n     *\n     * @return mock object itself\n     ",
      "child_ranges": [
        "(line 1673,col 9)-(line 1673,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.reset(T...)",
      "begin_line": 1703,
      "end_line": 1705,
      "comment": "\n     * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n     * Normally, you don\u0027t need to reset your mocks, just create new mocks for each test method.\n     * \u003cp\u003e\n     * Instead of \u003ccode\u003e#reset()\u003c/code\u003e please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n     * \u003cb\u003eFirst potential code smell is \u003ccode\u003ereset()\u003c/code\u003e in the middle of the test method.\u003c/b\u003e This probably means you\u0027re testing too much.\n     * Follow the whisper of your test methods: \"Please keep us small \u0026 focused on single behavior\".\n     * There are several threads about it on mockito mailing list.\n     * \u003cp\u003e\n     * The only reason we added \u003ccode\u003ereset()\u003c/code\u003e method is to\n     * make it possible to work with container-injected mocks.\n     * See issue 55 (\u003ca href\u003d\"http://code.google.com/p/mockito/issues/detail?id\u003d55\"\u003ehere\u003c/a\u003e)\n     * or FAQ (\u003ca href\u003d\"http://code.google.com/p/mockito/wiki/FAQ\"\u003ehere\u003c/a\u003e).\n     * \u003cp\u003e\n     * \u003cb\u003eDon\u0027t harm yourself.\u003c/b\u003e \u003ccode\u003ereset()\u003c/code\u003e in the middle of the test method is a code smell (you\u0027re probably testing too much).\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   List mock \u003d mock(List.class);\n     *   when(mock.size()).thenReturn(10);\n     *   mock.add(1);\n     *\n     *   reset(mock);\n     *   //at this point the mock forgot any interactions \u0026 stubbing\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * @param \u003cT\u003e The Type of the mocks\n     * @param mocks to be reset\n     ",
      "child_ranges": [
        "(line 1704,col 9)-(line 1704,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.verifyNoMoreInteractions(java.lang.Object...)",
      "begin_line": 1748,
      "end_line": 1750,
      "comment": "\n     * Checks if any of given mocks has any unverified interaction.\n     * \u003cp\u003e\n     * You can use this method after you verified your mocks - to make sure that nothing\n     * else was invoked on your mocks.\n     * \u003cp\u003e\n     * See also {@link Mockito#never()} - it is more explicit and communicates the intent well.\n     * \u003cp\u003e\n     * Stubbed invocations (if called) are also treated as interactions.\n     * \u003cp\u003e\n     * A word of \u003cb\u003ewarning\u003c/b\u003e:\n     * Some users who did a lot of classic, expect-run-verify mocking tend to use \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e very often, even in every test method.\n     * \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e is not recommended to use in every test method.\n     * \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e is a handy assertion from the interaction testing toolkit. Use it only when it\u0027s relevant.\n     * Abusing it leads to overspecified, less maintainable tests. You can find further reading\n     * \u003ca href\u003d\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\"\u003ehere\u003c/a\u003e.\n     * \u003cp\u003e\n     * This method will also detect unverified invocations that occurred before the test method,\n     * for example: in \u003ccode\u003esetUp()\u003c/code\u003e, \u003ccode\u003e\u0026#064;Before\u003c/code\u003e method or in constructor.\n     * Consider writing nice code that makes interactions only in test methods.\n     *\n     * \u003cp\u003e\n     * Example:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     * //interactions\n     * mock.doSomething();\n     * mock.doSomethingUnexpected();\n     *\n     * //verification\n     * verify(mock).doSomething();\n     *\n     * //following will fail because \u0027doSomethingUnexpected()\u0027 is unexpected\n     * verifyNoMoreInteractions(mock);\n     *\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param mocks to be verified\n     ",
      "child_ranges": [
        "(line 1749,col 9)-(line 1749,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.verifyZeroInteractions(java.lang.Object...)",
      "begin_line": 1767,
      "end_line": 1769,
      "comment": "\n     * Verifies that no interactions happened on given mocks.\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verifyZeroInteractions(mockOne, mockTwo);\n     * \u003c/code\u003e\u003c/pre\u003e\n     * This method will also detect invocations\n     * that occurred before the test method, for example: in \u003ccode\u003esetUp()\u003c/code\u003e, \u003ccode\u003e\u0026#064;Before\u003c/code\u003e method or in constructor.\n     * Consider writing nice code that makes interactions only in test methods.\n     * \u003cp\u003e\n     * See also {@link Mockito#never()} - it is more explicit and communicates the intent well.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param mocks to be verified\n     ",
      "child_ranges": [
        "(line 1768,col 9)-(line 1768,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.stubVoid(T)",
      "begin_line": 1803,
      "end_line": 1805,
      "comment": "\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //Instead of:\n     *   stubVoid(mock).toThrow(e).on().someVoidMethod();\n     *\n     *   //Please do:\n     *   doThrow(e).when(mock).someVoidMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods.\n     * \u003cp\u003e\n     * Originally, \u003ccode\u003estubVoid()\u003c/code\u003e was used for stubbing void methods with exceptions. E.g:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n     *\n     * //you can stub with different behavior for consecutive calls.\n     * //Last stubbing (e.g. toReturn()) determines the behavior for further consecutive calls.\n     * stubVoid(mock)\n     *   .toThrow(new RuntimeException())\n     *   .toReturn()\n     *   .on().someMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @deprecated Use {@link Mockito#doThrow(Throwable)} method for stubbing voids\n     *\n     * @param mock\n     *            to stub\n     * @return stubbable object that allows stubbing with throwable\n     ",
      "child_ranges": [
        "(line 1804,col 9)-(line 1804,col 43)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.doThrow(java.lang.Throwable)",
      "begin_line": 1821,
      "end_line": 1823,
      "comment": "\n     * Use \u003ccode\u003edoThrow()\u003c/code\u003e when you want to stub the void method with an exception.\n     * \u003cp\u003e\n     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n     * \u003cp\u003e\n     * Example:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   doThrow(new RuntimeException()).when(mock).someVoidMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * @param toBeThrown to be thrown when the stubbed method is called\n     * @return stubber - to select a method for stubbing\n     ",
      "child_ranges": [
        "(line 1822,col 9)-(line 1822,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.doThrow(java.lang.Class\u003c? extends java.lang.Throwable\u003e)",
      "begin_line": 1842,
      "end_line": 1844,
      "comment": "\n     * Use \u003ccode\u003edoThrow()\u003c/code\u003e when you want to stub the void method to throw exception of specified class.\n     * \u003cp\u003e\n     * A new exception instance will be created for each method invocation.\n     * \u003cp\u003e\n     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n     * \u003cp\u003e\n     * Example:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   doThrow(RuntimeException.class).when(mock).someVoidMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * @param toBeThrown to be thrown when the stubbed method is called\n     * @return stubber - to select a method for stubbing\n     * @since 1.9.0\n     ",
      "child_ranges": [
        "(line 1843,col 9)-(line 1843,col 75)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.doCallRealMethod()",
      "begin_line": 1878,
      "end_line": 1880,
      "comment": "\n     * Use \u003ccode\u003edoCallRealMethod()\u003c/code\u003e when you want to call the real implementation of a method.\n     * \u003cp\u003e\n     * As usual you are going to read \u003cb\u003ethe partial mock warning\u003c/b\u003e:\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n     * How does partial mock fit into this paradigm? Well, it just doesn\u0027t...\n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\n     * In most cases, this is not the way you want to design your application.\n     * \u003cp\u003e\n     * However, there are rare cases when partial mocks come handy:\n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n     * However, I wouldn\u0027t use partial mocks for new, test-driven \u0026 well-designed code.\n     * \u003cp\u003e\n     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks.\n     * \u003cb\u003eMockito.spy() is a recommended way of creating partial mocks.\u003c/b\u003e\n     * The reason is it guarantees real methods are called against correctly constructed object because you\u0027re responsible for constructing the object passed to spy() method.\n     * \u003cp\u003e\n     * Example:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   Foo mock \u003d mock(Foo.class);\n     *   doCallRealMethod().when(mock).someVoidMethod();\n     *\n     *   // this will call the real implementation of Foo.someVoidMethod()\n     *   mock.someVoidMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @return stubber - to select a method for stubbing\n     * @since 1.9.5\n     ",
      "child_ranges": [
        "(line 1879,col 9)-(line 1879,col 61)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.doAnswer(org.mockito.stubbing.Answer)",
      "begin_line": 1904,
      "end_line": 1906,
      "comment": "\n     * Use \u003ccode\u003edoAnswer()\u003c/code\u003e when you want to stub a void method with generic {@link Answer}.\n     * \u003cp\u003e\n     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n     * \u003cp\u003e\n     * Example:\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *  doAnswer(new Answer() {\n     *      public Object answer(InvocationOnMock invocation) {\n     *          Object[] args \u003d invocation.getArguments();\n     *          Mock mock \u003d invocation.getMock();\n     *          return null;\n     *      }})\n     *  .when(mock).someMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param answer to answer when the stubbed method is called\n     * @return stubber - to select a method for stubbing\n     ",
      "child_ranges": [
        "(line 1905,col 9)-(line 1905,col 45)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.doNothing()",
      "begin_line": 1946,
      "end_line": 1948,
      "comment": "\n     * Use \u003ccode\u003edoNothing()\u003c/code\u003e for setting void methods to do nothing. \u003cb\u003eBeware that void methods on mocks do nothing by default!\u003c/b\u003e\n     * However, there are rare situations when doNothing() comes handy:\n     * \u003cp\u003e\n     * \u003col\u003e\n     * \u003cli\u003eStubbing consecutive calls on a void method:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   doNothing().\n     *   doThrow(new RuntimeException())\n     *   .when(mock).someVoidMethod();\n     *\n     *   //does nothing the first time:\n     *   mock.someVoidMethod();\n     *\n     *   //throws RuntimeException the next time:\n     *   mock.someVoidMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/li\u003e\n     * \u003cli\u003eWhen you spy real objects and you want the void method to do nothing:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   List list \u003d new LinkedList();\n     *   List spy \u003d spy(list);\n     *\n     *   //let\u0027s make clear() do nothing\n     *   doNothing().when(spy).clear();\n     *\n     *   spy.add(\"one\");\n     *\n     *   //clear() does nothing, so the list still contains \"one\"\n     *   spy.clear();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/li\u003e\n     * \u003c/ol\u003e\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @return stubber - to select a method for stubbing\n     ",
      "child_ranges": [
        "(line 1947,col 9)-(line 1947,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.doReturn(java.lang.Object)",
      "begin_line": 1996,
      "end_line": 1998,
      "comment": "\n     * Use \u003ccode\u003edoReturn()\u003c/code\u003e in those rare occasions when you cannot use {@link Mockito#when(Object)}.\n     * \u003cp\u003e\n     * \u003cb\u003eBeware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe\n     * and more readable\u003c/b\u003e (especially when stubbing consecutive calls).\n     * \u003cp\u003e\n     * Here are those rare occasions when doReturn() comes handy:\n     * \u003cp\u003e\n     *\n     * \u003col\u003e\n     * \u003cli\u003eWhen spying real objects and calling real methods on a spy brings side effects\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   List list \u003d new LinkedList();\n     *   List spy \u003d spy(list);\n     *\n     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n     *   when(spy.get(0)).thenReturn(\"foo\");\n     *\n     *   //You have to use doReturn() for stubbing:\n     *   doReturn(\"foo\").when(spy).get(0);\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/li\u003e\n     *\n     * \u003cli\u003eOverriding a previous exception-stubbing:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   when(mock.foo()).thenThrow(new RuntimeException());\n     *\n     *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.\n     *   when(mock.foo()).thenReturn(\"bar\");\n     *\n     *   //You have to use doReturn() for stubbing:\n     *   doReturn(\"bar\").when(mock).foo();\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003c/li\u003e\n     * \u003c/ol\u003e\n     *\n     * Above scenarios shows a tradeoff of Mockito\u0027s elegant syntax. Note that the scenarios are very rare, though.\n     * Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general\n     * overridding stubbing is a potential code smell that points out too much stubbing.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param toBeReturned to be returned when the stubbed method is called\n     * @return stubber - to select a method for stubbing\n     ",
      "child_ranges": [
        "(line 1997,col 9)-(line 1997,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.inOrder(java.lang.Object...)",
      "begin_line": 2027,
      "end_line": 2029,
      "comment": "\n     * Creates {@link org.mockito.InOrder} object that allows verifying mocks in order.\n     *\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   InOrder inOrder \u003d inOrder(firstMock, secondMock);\n     *\n     *   inOrder.verify(firstMock).add(\"was called first\");\n     *   inOrder.verify(secondMock).add(\"was called second\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * Verification in order is flexible - \u003cb\u003eyou don\u0027t have to verify all interactions\u003c/b\u003e one-by-one\n     * but only those that you are interested in testing in order.\n     * \u003cp\u003e\n     * Also, you can create InOrder object passing only mocks that are relevant for in-order verification.\n     * \u003cp\u003e\n     * \u003ccode\u003eInOrder\u003c/code\u003e verification is \u0027greedy\u0027. You will hardly every notice it but\n     * if you want to find out more search for \u0027greedy\u0027 on the Mockito\n     * \u003ca href\u003d\"http://code.google.com/p/mockito/w/list\"\u003ewiki pages\u003c/a\u003e.\n     * \u003cp\u003e\n     * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param mocks to be verified in order\n     *\n     * @return InOrder object to be used to verify in order\n     ",
      "child_ranges": [
        "(line 2028,col 9)-(line 2028,col 43)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.ignoreStubs(java.lang.Object...)",
      "begin_line": 2094,
      "end_line": 2096,
      "comment": "\n     * Ignores stubbed methods of given mocks for the sake of verification.\n     * Sometimes useful when coupled with \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e or verification \u003ccode\u003einOrder()\u003c/code\u003e.\n     * Helps avoiding redundant verification of stubbed calls - typically we\u0027re not interested in verifying stubs.\n     * \u003cp\u003e\n     * \u003cb\u003eWarning\u003c/b\u003e, \u003ccode\u003eignoreStubs()\u003c/code\u003e might lead to overuse of \u003ccode\u003everifyNoMoreInteractions(ignoreStubs(...));\u003c/code\u003e\n     * Bear in mind that Mockito does not recommend bombarding every test with \u003ccode\u003everifyNoMoreInteractions()\u003c/code\u003e\n     * for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}\n     * Other words: all \u003cb\u003e*stubbed*\u003c/b\u003e methods of given mocks are marked \u003cb\u003e*verified*\u003c/b\u003e so that they don\u0027t get in a way during verifyNoMoreInteractions().\n     * \u003cp\u003e\n     * This method \u003cb\u003echanges the input mocks\u003c/b\u003e! This method returns input mocks just for convenience.\n     * \u003cp\u003e\n     * Ignored stubs will also be ignored for verification inOrder, including {@link org.mockito.InOrder#verifyNoMoreInteractions()}.\n     * See the second example.\n     * \u003cp\u003e\n     * Example:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *  //mocking lists for the sake of the example (if you mock List in real you will burn in hell)\n     *  List mock1 \u003d mock(List.class), mock2 \u003d mock(List.class);\n     *\n     *  //stubbing mocks:\n     *  when(mock1.get(0)).thenReturn(10);\n     *  when(mock2.get(0)).thenReturn(20);\n     *\n     *  //using mocks by calling stubbed get(0) methods:\n     *  System.out.println(mock1.get(0)); //prints 10\n     *  System.out.println(mock2.get(0)); //prints 20\n     *\n     *  //using mocks by calling clear() methods:\n     *  mock1.clear();\n     *  mock2.clear();\n     *\n     *  //verification:\n     *  verify(mock1).clear();\n     *  verify(mock2).clear();\n     *\n     *  //verifyNoMoreInteractions() fails because get() methods were not accounted for.\n     *  try { verifyNoMoreInteractions(mock1, mock2); } catch (NoInteractionsWanted e);\n     *\n     *  //However, if we ignore stubbed methods then we can verifyNoMoreInteractions()\n     *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));\n     *\n     *  //Remember that ignoreStubs() \u003cb\u003e*changes*\u003c/b\u003e the input mocks and returns them for convenience.\n     * \u003c/code\u003e\u003c/pre\u003e\n     * Ignoring stubs can be used with \u003cb\u003everification in order\u003c/b\u003e:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *  List list \u003d mock(List.class);\n     *  when(mock.get(0)).thenReturn(\"foo\");\n     *\n     *  list.add(0);\n     *  System.out.println(list.get(0)); //we don\u0027t want to verify this\n     *  list.clear();\n     *\n     *  InOrder inOrder \u003d inOrder(ignoreStubs(list));\n     *  inOrder.verify(list).add(0);\n     *  inOrder.verify(list).clear();\n     *  inOrder.verifyNoMoreInteractions();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * @since 1.9.0\n     * @param mocks input mocks that will be changed\n     * @return the same mocks that were passed in as parameters\n     ",
      "child_ranges": [
        "(line 2095,col 9)-(line 2095,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.times(int)",
      "begin_line": 2110,
      "end_line": 2112,
      "comment": "\n     * Allows verifying exact number of invocations. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, times(2)).someMethod(\"some arg\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param wantedNumberOfInvocations wanted number of invocations\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2111,col 9)-(line 2111,col 72)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.never()",
      "begin_line": 2131,
      "end_line": 2133,
      "comment": "\n     * Alias to \u003ccode\u003etimes(0)\u003c/code\u003e, see {@link Mockito#times(int)}\n     * \u003cp\u003e\n     * Verifies that interaction did not happen. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, never()).someMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * \u003cp\u003e\n     * If you want to verify there were NO interactions with the mock\n     * check out {@link Mockito#verifyZeroInteractions(Object...)}\n     * or {@link Mockito#verifyNoMoreInteractions(Object...)}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2132,col 9)-(line 2132,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.atLeastOnce()",
      "begin_line": 2146,
      "end_line": 2148,
      "comment": "\n     * Allows at-least-once verification. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     * Alias to \u003ccode\u003eatLeast(1)\u003c/code\u003e.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2147,col 9)-(line 2147,col 53)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.atLeast(int)",
      "begin_line": 2162,
      "end_line": 2164,
      "comment": "\n     * Allows at-least-x verification. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, atLeast(3)).someMethod(\"some arg\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param minNumberOfInvocations minimum number of invocations\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2163,col 9)-(line 2163,col 71)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.atMost(int)",
      "begin_line": 2178,
      "end_line": 2180,
      "comment": "\n     * Allows at-most-x verification. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, atMost(3)).someMethod(\"some arg\");\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param maxNumberOfInvocations max number of invocations\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2179,col 9)-(line 2179,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.calls(int)",
      "begin_line": 2195,
      "end_line": 2197,
      "comment": "\n     * Allows non-greedy verification in order.  For example\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   inOrder.verify( mock, calls( 2 )).someMethod( \"some arg\" );\n     * \u003c/code\u003e\u003c/pre\u003e\n     * \u003cul\u003e\n     * \u003cli\u003ewill not fail if the method is called 3 times, unlike times( 2 )\u003c/li\u003e\n     * \u003cli\u003ewill not mark the third invocation as verified, unlike atLeast( 2 )\u003c/li\u003e\n     * \u003c/ul\u003e\n     * This verification mode can only be used with in order verification.\n     * @param wantedNumberOfInvocations number of invocations to verify\n     * @return  verification mode\n     ",
      "child_ranges": [
        "(line 2196,col 9)-(line 2196,col 74)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.only()",
      "begin_line": 2215,
      "end_line": 2217,
      "comment": "\n     * Allows checking if given method was the only one invoked. E.g:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   verify(mock, only()).someMethod();\n     *   //above is a shorthand for following 2 lines of code:\n     *   verify(mock).someMethod();\n     *   verifyNoMoreInvocations(mock);\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * \u003cp\u003e\n     * See also {@link Mockito#verifyNoMoreInteractions(Object...)}\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2216,col 9)-(line 2216,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.timeout(long)",
      "begin_line": 2256,
      "end_line": 2258,
      "comment": "\n     * Allows verifying with timeout. It causes a verify to wait for a specified period of time for a desired\n     * interaction rather than fails immediately if has not already happened. May be useful for testing in concurrent\n     * conditions.\n     * \u003cp\u003e\n     * This differs from {@link Mockito#after after()} in that after() will wait the full period, unless\n     * the final test result is known early (e.g. if a never() fails), whereas timeout() will stop early as soon\n     * as verification passes, producing different behaviour when used with times(2), for example, which can pass\n     * and then later fail. In that case, timeout would pass as soon as times(2) passes, whereas after would run until\n     * times(2) failed, and then fail.\n     * \u003cp\u003e\n     * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system\n     * \u003cp\u003e\n     * Not yet implemented to work with InOrder verification.\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //passes when someMethod() is called within given time span\n     *   verify(mock, timeout(100)).someMethod();\n     *   //above is an alias to:\n     *   verify(mock, timeout(100).times(1)).someMethod();\n     *\n     *   //passes as soon as someMethod() has been called 2 times before the given timeout\n     *   verify(mock, timeout(100).times(2)).someMethod();\n     *\n     *   //equivalent: this also passes as soon as someMethod() has been called 2 times before the given timeout\n     *   verify(mock, timeout(100).atLeast(2)).someMethod();\n     *\n     *   //verifies someMethod() within given time span using given verification mode\n     *   //useful only if you have your own custom verification modes.\n     *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param millis - time span in milliseconds\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2257,col 9)-(line 2257,col 69)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.after(long)",
      "begin_line": 2296,
      "end_line": 2298,
      "comment": "\n     * Allows verifying over a given period. It causes a verify to wait for a specified period of time for a desired\n     * interaction rather than failing immediately if has not already happened. May be useful for testing in concurrent\n     * conditions.\n     * \u003cp\u003e\n     * This differs from {@link Mockito#timeout timeout()} in that after() will wait the full period, whereas timeout()\n     * will stop early as soon as verification passes, producing different behaviour when used with times(2), for example,\n     * which can pass and then later fail. In that case, timeout would pass as soon as times(2) passes, whereas after would\n     * run the full time, which point it will fail, as times(2) has failed.\n     * \u003cp\u003e\n     * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system\n     * \u003cp\u003e\n     * Not yet implemented to work with InOrder verification.\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //passes after 100ms, if someMethod() has only been called once at that time.\n     *   verify(mock, after(100)).someMethod();\n     *   //above is an alias to:\n     *   verify(mock, after(100).times(1)).someMethod();\n     *\n     *   //passes if someMethod() is called \u003cb\u003e*exactly*\u003c/b\u003e 2 times after the given timespan\n     *   verify(mock, after(100).times(2)).someMethod();\n     *\n     *   //passes if someMethod() has not been called after the given timespan\n     *   verify(mock, after(100).never()).someMethod();\n     *\n     *   //verifies someMethod() after a given time span using given verification mode\n     *   //useful only if you have your own custom verification modes.\n     *   verify(mock, new After(100, yourOwnVerificationMode)).someMethod();\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * See examples in javadoc for {@link Mockito} class\n     *\n     * @param millis - time span in milliseconds\n     *\n     * @return verification mode\n     ",
      "child_ranges": [
        "(line 2297,col 9)-(line 2297,col 67)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.validateMockitoUsage()",
      "begin_line": 2345,
      "end_line": 2347,
      "comment": "\n     * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \u003ca href\u003d\"http://code.google.com/p/mockito/wiki/FAQ\"\u003ehttp://code.google.com/p/mockito/wiki/FAQ\u003c/a\u003e\n     * \u003cp\u003e\n     * In case of questions you may also post to mockito mailing list: \u003ca href\u003d\"http://groups.google.com/group/mockito\"\u003ehttp://groups.google.com/group/mockito\u003c/a\u003e\n     * \u003cp\u003e\n     * \u003ccode\u003evalidateMockitoUsage()\u003c/code\u003e \u003cb\u003eexplicitly validates\u003c/b\u003e the framework state to detect invalid use of Mockito.\n     * However, this feature is optional \u003cb\u003ebecause Mockito validates the usage all the time...\u003c/b\u003e but there is a gotcha so read on.\n     * \u003cp\u003e\n     * Examples of incorrect use:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     * //Oops, thenReturn() part is missing:\n     * when(mock.get());\n     *\n     * //Oops, verified method call is inside verify() where it should be on the outside:\n     * verify(mock.execute());\n     *\n     * //Oops, missing method to verify:\n     * verify(mock);\n     * \u003c/code\u003e\u003c/pre\u003e\n     *\n     * Mockito throws exceptions if you misuse it so that you know if your tests are written correctly.\n     * The gotcha is that Mockito does the validation \u003cb\u003enext time\u003c/b\u003e you use the framework (e.g. next time you verify, stub, call mock etc.).\n     * But even though the exception might be thrown in the next test,\n     * the exception \u003cb\u003emessage contains a navigable stack trace element\u003c/b\u003e with location of the defect.\n     * Hence you can click and find the place where Mockito was misused.\n     * \u003cp\u003e\n     * Sometimes though, you might want to validate the framework usage explicitly.\n     * For example, one of the users wanted to put \u003ccode\u003evalidateMockitoUsage()\u003c/code\u003e in his \u003ccode\u003e\u0026#064;After\u003c/code\u003e method\n     * so that he knows immediately when he misused Mockito.\n     * Without it, he would have known about it not sooner than \u003cb\u003enext time\u003c/b\u003e he used the framework.\n     * One more benefit of having \u003ccode\u003evalidateMockitoUsage()\u003c/code\u003e in \u003ccode\u003e\u0026#064;After\u003c/code\u003e is that jUnit runner and rule will always fail in the test method with defect\n     * whereas ordinary \u0027next-time\u0027 validation might fail the \u003cb\u003enext\u003c/b\u003e test method.\n     * But even though JUnit might report next test as red, don\u0027t worry about it\n     * and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.\n     * \u003cp\u003e\n     * \u003cb\u003eBoth built-in runner: {@link MockitoJUnitRunner} and rule: {@link MockitoRule}\u003c/b\u003e do validateMockitoUsage() after each test method.\n     * \u003cp\u003e\n     * Bear in mind that \u003cb\u003eusually you don\u0027t have to \u003ccode\u003evalidateMockitoUsage()\u003c/code\u003e\u003c/b\u003e\n     * and framework validation triggered on next-time basis should be just enough,\n     * mainly because of enhanced exception message with clickable location of defect.\n     * However, I would recommend validateMockitoUsage() if you already have sufficient test infrastructure\n     * (like your own runner or base class for all tests) because adding a special action to \u003ccode\u003e\u0026#064;After\u003c/code\u003e has zero cost.\n     * \u003cp\u003e\n     * See examples in javadoc for {@link Mockito} class\n     ",
      "child_ranges": [
        "(line 2346,col 9)-(line 2346,col 44)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.withSettings()",
      "begin_line": 2379,
      "end_line": 2381,
      "comment": "\n     * Allows mock creation with additional mock settings.\n     * \u003cp\u003e\n     * Don\u0027t use it too often.\n     * Consider writing simple tests that use simple mocks.\n     * Repeat after me: simple tests push simple, KISSy, readable \u0026 maintainable code.\n     * If you cannot write a test in a simple way - refactor the code under test.\n     * \u003cp\u003e\n     * Examples of mock settings:\n     * \u003cpre class\u003d\"code\"\u003e\u003ccode class\u003d\"java\"\u003e\n     *   //Creates mock with different default answer \u0026 name\n     *   Foo mock \u003d mock(Foo.class, withSettings()\n     *       .defaultAnswer(RETURNS_SMART_NULLS)\n     *       .name(\"cool mockie\"));\n     *\n     *   //Creates mock with different default answer, descriptive name and extra interfaces\n     *   Foo mock \u003d mock(Foo.class, withSettings()\n     *       .defaultAnswer(RETURNS_SMART_NULLS)\n     *       .name(\"cool mockie\")\n     *       .extraInterfaces(Bar.class));\n     * \u003c/code\u003e\u003c/pre\u003e\n     * {@link MockSettings} has been introduced for two reasons.\n     * Firstly, to make it easy to add another mock settings when the demand comes.\n     * Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.\n     * \u003cp\u003e\n     * See javadoc for {@link MockSettings} to learn about possible mock settings.\n     * \u003cp\u003e\n     *\n     * @return mock settings instance with defaults.\n     ",
      "child_ranges": [
        "(line 2380,col 9)-(line 2380,col 70)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockito.Mockito.debug()",
      "begin_line": 2386,
      "end_line": 2389,
      "comment": "\n     * Helps debugging failing tests. Experimental - use at your own risk. We\u0027re not sure if this method will stay in public api.\n     ",
      "child_ranges": [
        "(line 2388,col 9)-(line 2388,col 41)"
      ]
    }
  ]
}