{
  "filepath": "/tmp/Mockito-18b/test/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "BridgeMethodPuzzleTest",
      "is_interface": false,
      "parent_types": [
        "TestBase"
      ],
      "begin_line": 21,
      "end_line": 67,
      "comment": "\n * Bridge method is generated by compiler when erasure in parent class is\n * different. When is different then it means that in runtime we will have\n * overloading rather than overridding Therefore the compiler generates bridge\n * method in Subclass so that erasures are the same, signatures of methods match\n * and overridding is ON.\n "
    },
    {
      "type": "class_interface",
      "name": "Super",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 24,
      "end_line": 28,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super.say(T)",
      "begin_line": 25,
      "end_line": 27,
      "comment": "",
      "child_ranges": [
        "(line 26,col 13)-(line 26,col 38)"
      ]
    },
    {
      "type": "class_interface",
      "name": "Sub",
      "is_interface": false,
      "parent_types": [
        "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super\u003cjava.lang.String\u003e"
      ],
      "begin_line": 30,
      "end_line": 35,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Sub.say(java.lang.String)",
      "begin_line": 31,
      "end_line": 34,
      "comment": "",
      "child_ranges": [
        "(line 33,col 13)-(line 33,col 38)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "mock"
      ],
      "begin_line": 37,
      "end_line": 37,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.setMockWithDownCast(org.mockitousage.puzzlers.BridgeMethodPuzzleTest.Super)",
      "begin_line": 39,
      "end_line": 41,
      "comment": "",
      "child_ranges": [
        "(line 40,col 9)-(line 40,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.say(java.lang.String)",
      "begin_line": 43,
      "end_line": 45,
      "comment": "",
      "child_ranges": [
        "(line 44,col 9)-(line 44,col 25)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldHaveBridgeMethod()",
      "begin_line": 47,
      "end_line": 55,
      "comment": "",
      "child_ranges": [
        "(line 49,col 9)-(line 49,col 28)",
        "(line 51,col 9)-(line 51,col 58)",
        "(line 53,col 9)-(line 53,col 54)",
        "(line 54,col 9)-(line 54,col 46)"
      ]
    },
    {
      "type": "method",
      "signature": "org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldVerifyCorrectlyWhenBridgeMethodCalled()",
      "begin_line": 57,
      "end_line": 66,
      "comment": "",
      "child_ranges": [
        "(line 61,col 9)-(line 61,col 32)",
        "(line 62,col 9)-(line 62,col 31)",
        "(line 63,col 9)-(line 63,col 21)",
        "(line 65,col 9)-(line 65,col 31)"
      ]
    }
  ]
}