[
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructor0()",
        "snippet": "    @Test\n    public void testConstructor0() {\n        final DecoderException e = new DecoderException();\n        assertNull(e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 58)",
            "(line 39,col 9)-(line 39,col 35)",
            "(line 40,col 9)-(line 40,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructorString()",
        "snippet": "    @Test\n    public void testConstructorString() {\n        final DecoderException e = new DecoderException(MSG);\n        assertEquals(MSG, e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 61)",
            "(line 46,col 9)-(line 46,col 42)",
            "(line 47,col 9)-(line 47,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructorStringThrowable()",
        "snippet": "    @Test\n    public void testConstructorStringThrowable() {\n        final DecoderException e = new DecoderException(MSG, t);\n        assertEquals(MSG, e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 64)",
            "(line 53,col 9)-(line 53,col 42)",
            "(line 54,col 9)-(line 54,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.DecoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/DecoderExceptionTest.java",
        "signature": "org.apache.commons.codec.DecoderExceptionTest.testConstructorThrowable()",
        "snippet": "    @Test\n    public void testConstructorThrowable() {\n        final DecoderException e = new DecoderException(t);\n        assertEquals(t.getClass().getName(), e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 59)",
            "(line 60,col 9)-(line 60,col 61)",
            "(line 61,col 9)-(line 61,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        new CharEncoding();\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "\n     * We could make the constructor private in the future, it's a matter a style.\n     ",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testIso8859_1()",
        "snippet": "    @Test\n    public void testIso8859_1() {\n        Assert.assertEquals(\"ISO-8859-1\", CharEncoding.ISO_8859_1);\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUsAscii()",
        "snippet": "    @Test\n    public void testUsAscii() {\n        Assert.assertEquals(\"US-ASCII\", CharEncoding.US_ASCII);\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf16()",
        "snippet": "    @Test\n    public void testUtf16() {\n        Assert.assertEquals(\"UTF-16\", CharEncoding.UTF_16);\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf16Be()",
        "snippet": "    @Test\n    public void testUtf16Be() {\n        Assert.assertEquals(\"UTF-16BE\", CharEncoding.UTF_16BE);\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf16Le()",
        "snippet": "    @Test\n    public void testUtf16Le() {\n        Assert.assertEquals(\"UTF-16LE\", CharEncoding.UTF_16LE);\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharEncodingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
        "signature": "org.apache.commons.codec.CharEncodingTest.testUtf8()",
        "snippet": "    @Test\n    public void testUtf8() {\n        Assert.assertEquals(\"UTF-8\", CharEncoding.UTF_8);\n    }",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.makeEncoder()",
        "snippet": "    protected abstract BinaryEncoder makeEncoder();",
        "begin_line": 27,
        "end_line": 27,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeEmpty()",
        "snippet": "    @Test\n    public void testEncodeEmpty() throws Exception {\n        final BinaryEncoder encoder = makeEncoder();\n        encoder.encode(new byte[0]);\n    }",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 52)",
            "(line 32,col 9)-(line 32,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.BinaryEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull()",
        "snippet": "    @Test\n    public void testEncodeNull() throws Exception {\n        final BinaryEncoder encoder = makeEncoder();\n        try {\n            encoder.encode(null);\n        } catch (final EncoderException ee) {\n            // An exception should be thrown\n        }\n    }",
        "begin_line": 35,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 52)",
            "(line 38,col 9)-(line 42,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructor0()",
        "snippet": "    @Test\n    public void testConstructor0() {\n        final EncoderException e = new EncoderException();\n        assertNull(e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 58)",
            "(line 39,col 9)-(line 39,col 35)",
            "(line 40,col 9)-(line 40,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructorString()",
        "snippet": "    @Test\n    public void testConstructorString() {\n        final EncoderException e = new EncoderException(MSG);\n        assertEquals(MSG, e.getMessage());\n        assertNull(e.getCause());\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 61)",
            "(line 46,col 9)-(line 46,col 42)",
            "(line 47,col 9)-(line 47,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructorStringThrowable()",
        "snippet": "    @Test\n    public void testConstructorStringThrowable() {\n        final EncoderException e = new EncoderException(MSG, t);\n        assertEquals(MSG, e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 64)",
            "(line 53,col 9)-(line 53,col 42)",
            "(line 54,col 9)-(line 54,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.EncoderExceptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/EncoderExceptionTest.java",
        "signature": "org.apache.commons.codec.EncoderExceptionTest.testConstructorThrowable()",
        "snippet": "    @Test\n    public void testConstructorThrowable() {\n        final EncoderException e = new EncoderException(t);\n        assertEquals(t.getClass().getName(), e.getMessage());\n        assertEquals(t, e.getCause());\n    }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 59)",
            "(line 60,col 9)-(line 60,col 61)",
            "(line 61,col 9)-(line 61,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testToCharset()",
        "snippet": "    @Test\n    public void testToCharset() {\n        Assert.assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null));\n        Assert.assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null));\n        Assert.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset()));\n        Assert.assertEquals(Charset.forName(\"UTF-8\"), Charsets.toCharset(Charset.forName(\"UTF-8\")));\n    }",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 89)",
            "(line 35,col 9)-(line 35,col 90)",
            "(line 36,col 9)-(line 36,col 100)",
            "(line 37,col 9)-(line 37,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testIso8859_1()",
        "snippet": "    @Test\n    public void testIso8859_1() {\n        Assert.assertEquals(\"ISO-8859-1\", Charsets.ISO_8859_1.name());\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testUsAscii()",
        "snippet": "    @Test\n    public void testUsAscii() {\n        Assert.assertEquals(\"US-ASCII\", Charsets.US_ASCII.name());\n    }",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testUtf16()",
        "snippet": "    @Test\n    public void testUtf16() {\n        Assert.assertEquals(\"UTF-16\", Charsets.UTF_16.name());\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testUtf16Be()",
        "snippet": "    @Test\n    public void testUtf16Be() {\n        Assert.assertEquals(\"UTF-16BE\", Charsets.UTF_16BE.name());\n    }",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testUtf16Le()",
        "snippet": "    @Test\n    public void testUtf16Le() {\n        Assert.assertEquals(\"UTF-16LE\", Charsets.UTF_16LE.name());\n    }",
        "begin_line": 60,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.CharsetsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
        "signature": "org.apache.commons.codec.CharsetsTest.testUtf8()",
        "snippet": "    @Test\n    public void testUtf8() {\n        Assert.assertEquals(\"UTF-8\", Charsets.UTF_8.name());\n    }",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex()",
        "snippet": "    @Test\n    public void testComparatorWithSoundex() throws Exception {\n        final StringEncoderComparator sCompare =\n            new StringEncoderComparator( new Soundex() );\n\n        assertTrue( \"O'Brien and O'Brian didn't come out with \" +\n                    \"the same Soundex, something must be wrong here\",\n                    0 == sCompare.compare( \"O'Brien\", \"O'Brian\" ) );\n    }",
        "begin_line": 38,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 41,col 57)",
            "(line 43,col 9)-(line 45,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone()",
        "snippet": "    @SuppressWarnings(\"unchecked\") // cannot easily avoid this warning\n    @Test\n    public void testComparatorWithDoubleMetaphone() throws Exception {\n        final StringEncoderComparator sCompare = new StringEncoderComparator(new DoubleMetaphone());\n\n        final String[] testArray = { \"Jordan\", \"Sosa\", \"Prior\", \"Pryor\" };\n        final List<String> testList = Arrays.asList(testArray);\n\n        final String[] controlArray = { \"Jordan\", \"Prior\", \"Pryor\", \"Sosa\" };\n\n        Collections.sort(testList, sCompare); // unchecked\n\n        final String[] resultArray = testList.toArray(new String[0]);\n\n        for (int i = 0; i < resultArray.length; i++) {\n            assertEquals(\"Result Array not Equal to Control Array at index: \" + i, controlArray[i], resultArray[i]);\n        }\n    }",
        "begin_line": 48,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 100)",
            "(line 53,col 9)-(line 53,col 74)",
            "(line 54,col 9)-(line 54,col 63)",
            "(line 56,col 9)-(line 56,col 77)",
            "(line 58,col 9)-(line 58,col 45)",
            "(line 60,col 9)-(line 60,col 69)",
            "(line 62,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderComparatorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
        "signature": "org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput()",
        "snippet": "    @Test\n    public void testComparatorWithDoubleMetaphoneAndInvalidInput() throws Exception {\n        final StringEncoderComparator sCompare =\n            new StringEncoderComparator( new DoubleMetaphone() );\n\n        final int compare = sCompare.compare(new Double(3.0), Long.valueOf(3));\n        assertEquals( \"Trying to compare objects that make no sense to the underlying encoder should return a zero compare code\",\n                                0, compare);\n    }",
        "begin_line": 67,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 70,col 65)",
            "(line 72,col 9)-(line 72,col 79)",
            "(line 73,col 9)-(line 74,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding(java.lang.String, java.lang.String)",
        "snippet": "    public void checkEncoding(final String expected, final String source) throws EncoderException {\n        Assert.assertEquals(\"Source: \" + source, expected, this.getStringEncoder().encode(source));\n    }",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings(java.lang.String[][])",
        "snippet": "    protected void checkEncodings(final String[][] data) throws EncoderException {\n        for (final String[] element : data) {\n            this.checkEncoding(element[1], element[0]);\n        }\n    }",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 39,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations(java.lang.String, java.lang.String[])",
        "snippet": "    protected void checkEncodingVariations(final String expected, final String data[]) throws EncoderException {\n        for (final String element : data) {\n            this.checkEncoding(expected, element);\n        }\n    }",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 45,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.createStringEncoder()",
        "snippet": "    protected abstract T createStringEncoder();",
        "begin_line": 48,
        "end_line": 48,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.getStringEncoder()",
        "snippet": "    public T getStringEncoder() {\n        return this.stringEncoder;\n    }",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testEncodeEmpty()",
        "snippet": "    @Test\n    public void testEncodeEmpty() throws Exception {\n        final Encoder encoder = this.getStringEncoder();\n        encoder.encode(\"\");\n        encoder.encode(\" \");\n        encoder.encode(\"\\t\");\n    }",
        "begin_line": 54,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 56)",
            "(line 57,col 9)-(line 57,col 27)",
            "(line 58,col 9)-(line 58,col 28)",
            "(line 59,col 9)-(line 59,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testEncodeNull()",
        "snippet": "    @Test\n    public void testEncodeNull() throws Exception {\n        final StringEncoder encoder = this.getStringEncoder();\n        try {\n            encoder.encode(null);\n        } catch (final EncoderException ee) {\n            // An exception should be thrown\n        }\n    }",
        "begin_line": 62,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 62)",
            "(line 65,col 9)-(line 69,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject()",
        "snippet": "    @Test\n    public void testEncodeWithInvalidObject() throws Exception {\n        boolean exceptionThrown = false;\n        try {\n            final StringEncoder encoder = this.getStringEncoder();\n            encoder.encode(new Float(3.4));\n        } catch (final Exception e) {\n            exceptionThrown = true;\n        }\n        Assert.assertTrue(\"An exception was not thrown when we tried to encode \" + \"a Float object\", exceptionThrown);\n    }",
        "begin_line": 72,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 40)",
            "(line 75,col 9)-(line 80,col 9)",
            "(line 81,col 9)-(line 81,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.StringEncoderAbstractTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
        "signature": "org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence()",
        "snippet": "    @Test\n    public void testLocaleIndependence() throws Exception {\n        final StringEncoder encoder = this.getStringEncoder();\n\n        final String[] data = {\"I\", \"i\",};\n\n        final Locale orig = Locale.getDefault();\n        final Locale[] locales = {Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault()};\n\n        try {\n            for (final String element : data) {\n                String ref = null;\n                for (int j = 0; j < locales.length; j++) {\n                    Locale.setDefault(locales[j]);\n                    if (j <= 0) {\n                        ref = encoder.encode(element);\n                    } else {\n                        String cur = null;\n                        try {\n                            cur = encoder.encode(element);\n                        } catch (final Exception e) {\n                            Assert.fail(Locale.getDefault().toString() + \": \" + e.getMessage());\n                        }\n                        Assert.assertEquals(Locale.getDefault().toString() + \": \", ref, cur);\n                    }\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }",
        "begin_line": 84,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 62)",
            "(line 88,col 9)-(line 88,col 42)",
            "(line 90,col 9)-(line 90,col 48)",
            "(line 91,col 9)-(line 91,col 89)",
            "(line 93,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testEmptyKey() {\n        HmacUtils.getHmacMd5(new byte[] {});\n    }",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac()",
        "snippet": "    @Test\n    public void testGetHMac() throws IOException {\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_BYTES,\n                HmacUtils.getHmacMd5(HmacAlgorithmsTest.STANDARD_KEY_BYTES).doFinal(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_BYTES,\n                HmacUtils.getHmacSha1(HmacAlgorithmsTest.STANDARD_KEY_BYTES).doFinal(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_BYTES,\n                HmacUtils.getHmacSha256(HmacAlgorithmsTest.STANDARD_KEY_BYTES).doFinal(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_BYTES,\n                HmacUtils.getHmacSha384(HmacAlgorithmsTest.STANDARD_KEY_BYTES).doFinal(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_BYTES,\n                HmacUtils.getHmacSha512(HmacAlgorithmsTest.STANDARD_KEY_BYTES).doFinal(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n    }",
        "begin_line": 45,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 48,col 127)",
            "(line 49,col 9)-(line 50,col 128)",
            "(line 51,col 9)-(line 52,col 130)",
            "(line 53,col 9)-(line 54,col 130)",
            "(line 55,col 9)-(line 56,col 130)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex()",
        "snippet": "    @Test\n    public void testHmacMd5Hex() throws IOException {\n        assertEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_STRING,\n                HmacUtils.hmacMd5Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, \"The quick brown fox jumps over the lazy dog\"));\n        assertEquals(\"750c783e6ab0b503eaa86e310a5db738\", HmacUtils.hmacMd5Hex(\"Jefe\", \"what do ya want for nothing?\"));\n        assertEquals(\n                \"750c783e6ab0b503eaa86e310a5db738\",\n                HmacUtils.hmacMd5Hex(\"Jefe\".getBytes(),\n                        new ByteArrayInputStream(\"what do ya want for nothing?\".getBytes())));\n    }",
        "begin_line": 59,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 62,col 125)",
            "(line 63,col 9)-(line 63,col 119)",
            "(line 64,col 9)-(line 67,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex()",
        "snippet": "    @Test\n    public void testHmacSha1Hex() throws IOException {\n        assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING, HmacUtils.hmacSha1Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n        assertEquals(\"f42bb0eeb018ebbd4597ae7213711ec60760843f\", HmacUtils.hmacSha1Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, \"\"));\n        assertEquals(\"effcdf6ae5eb2fa2d27416d5f184df9c259a7c79\",\n                HmacUtils.hmacSha1Hex(\"Jefe\", \"what do ya want for nothing?\"));\n        assertEquals(\n                \"effcdf6ae5eb2fa2d27416d5f184df9c259a7c79\",\n                HmacUtils.hmacSha1Hex(\"Jefe\".getBytes(),\n                        new ByteArrayInputStream(\"what do ya want for nothing?\".getBytes())));\n    }",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 175)",
            "(line 73,col 9)-(line 73,col 132)",
            "(line 74,col 9)-(line 75,col 79)",
            "(line 76,col 9)-(line 79,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray()",
        "snippet": "    @Test\n    public void testHmacSha1UpdateWithByteArray() throws IOException {\n        final Mac mac = HmacUtils.getHmacSha1(HmacAlgorithmsTest.STANDARD_KEY_BYTES);\n        HmacUtils.updateHmac(mac, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES);\n        assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING, Hex.encodeHexString(mac.doFinal()));\n        HmacUtils.updateHmac(mac, \"\".getBytes());\n        assertEquals(\"f42bb0eeb018ebbd4597ae7213711ec60760843f\", Hex.encodeHexString(mac.doFinal()));\n    }",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 85)",
            "(line 85,col 9)-(line 85,col 76)",
            "(line 86,col 9)-(line 86,col 105)",
            "(line 87,col 9)-(line 87,col 49)",
            "(line 88,col 9)-(line 88,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream()",
        "snippet": "    @Test\n    public void testHmacSha1UpdateWithInpustream() throws IOException {\n        final Mac mac = HmacUtils.getHmacSha1(HmacAlgorithmsTest.STANDARD_KEY_BYTES);\n        HmacUtils.updateHmac(mac, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING, Hex.encodeHexString(mac.doFinal()));\n        HmacUtils.updateHmac(mac, new ByteArrayInputStream(\"\".getBytes()));\n        assertEquals(\"f42bb0eeb018ebbd4597ae7213711ec60760843f\", Hex.encodeHexString(mac.doFinal()));\n    }",
        "begin_line": 91,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 85)",
            "(line 94,col 9)-(line 94,col 102)",
            "(line 95,col 9)-(line 95,col 105)",
            "(line 96,col 9)-(line 96,col 75)",
            "(line 97,col 9)-(line 97,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString()",
        "snippet": "    @Test\n    public void testHmacSha1UpdateWithString() throws IOException {\n        final Mac mac = HmacUtils.getHmacSha1(HmacAlgorithmsTest.STANDARD_KEY_BYTES);\n        HmacUtils.updateHmac(mac, HmacAlgorithmsTest.STANDARD_PHRASE_STRING);\n        assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING, Hex.encodeHexString(mac.doFinal()));\n        HmacUtils.updateHmac(mac, \"\");\n        assertEquals(\"f42bb0eeb018ebbd4597ae7213711ec60760843f\", Hex.encodeHexString(mac.doFinal()));\n    }",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 85)",
            "(line 103,col 9)-(line 103,col 77)",
            "(line 104,col 9)-(line 104,col 105)",
            "(line 105,col 9)-(line 105,col 38)",
            "(line 106,col 9)-(line 106,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac()",
        "snippet": "    @Test\n    public void testInitializedMac() throws IOException {\n        final Mac md5Mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_MD5, HmacAlgorithmsTest.STANDARD_KEY_BYTES);\n        final Mac md5Mac2 = HmacUtils.getInitializedMac(\"HmacMD5\", HmacAlgorithmsTest.STANDARD_KEY_BYTES);\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_BYTES, HmacUtils.updateHmac(md5Mac, HmacAlgorithmsTest.STANDARD_PHRASE_STRING)\n                .doFinal());\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_BYTES, HmacUtils.updateHmac(md5Mac2, HmacAlgorithmsTest.STANDARD_PHRASE_STRING)\n                .doFinal());\n    }",
        "begin_line": 109,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 119)",
            "(line 112,col 9)-(line 112,col 106)",
            "(line 113,col 9)-(line 114,col 28)",
            "(line 115,col 9)-(line 116,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullAlgo()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInitializedMacNullAlgo() throws IOException {\n        HmacUtils.getInitializedMac((String) null, HmacAlgorithmsTest.STANDARD_KEY_BYTES);\n    }",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInitializedMacNullKey() throws IOException {\n        HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_MD5, null);\n    }",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInternalNoSuchAlgorithmException() {\n        HmacUtils.getInitializedMac(\"Bogus Bogus\", StringUtils.getBytesUtf8(\"akey\"));\n    }",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac()",
        "snippet": "    @Test\n    public void testMd5HMac() throws IOException {\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_BYTES,\n                HmacUtils.hmacMd5(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_BYTES,\n                HmacUtils.hmacMd5(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_BYTES,\n                HmacUtils.hmacMd5(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_STRING, HmacUtils.hmacMd5Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_STRING,\n                HmacUtils.hmacMd5Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_MD5_RESULT_STRING,\n                HmacUtils.hmacMd5Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 134,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 137,col 116)",
            "(line 138,col 9)-(line 139,col 142)",
            "(line 140,col 9)-(line 141,col 118)",
            "(line 142,col 9)-(line 142,col 178)",
            "(line 143,col 9)-(line 144,col 145)",
            "(line 145,col 9)-(line 146,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMd5HMacFail() throws IOException {\n        HmacUtils.hmacMd5((byte[]) null, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 149,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testNullKey()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testNullKey() {\n        HmacUtils.getHmacMd5(null);\n    }",
        "begin_line": 154,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSecretKeySpecAllowsEmtyKeys()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSecretKeySpecAllowsEmtyKeys() {\n        new SecretKeySpec(new byte[] {}, \"HmacMD5\");\n    }",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac()",
        "snippet": "    @Test\n    public void testSha1HMac() throws IOException {\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_BYTES,\n                HmacUtils.hmacSha1(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_BYTES,\n                HmacUtils.hmacSha1(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_BYTES,\n                HmacUtils.hmacSha1(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING,\n                HmacUtils.hmacSha1Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING,\n                HmacUtils.hmacSha1Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA1_RESULT_STRING,\n                HmacUtils.hmacSha1Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 164,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 167,col 117)",
            "(line 168,col 9)-(line 169,col 143)",
            "(line 170,col 9)-(line 171,col 119)",
            "(line 172,col 9)-(line 173,col 120)",
            "(line 174,col 9)-(line 175,col 146)",
            "(line 176,col 9)-(line 177,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha1HMacFail() throws IOException {\n        HmacUtils.hmacSha1((byte[]) null, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac()",
        "snippet": "    @Test\n    public void testSha256HMac() throws IOException {\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_BYTES,\n                HmacUtils.hmacSha256(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_BYTES,\n                HmacUtils.hmacSha256(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_BYTES,\n                HmacUtils.hmacSha256(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_STRING,\n                HmacUtils.hmacSha256Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_STRING,\n                HmacUtils.hmacSha256Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA256_RESULT_STRING,\n                HmacUtils.hmacSha256Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 185,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 188,col 119)",
            "(line 189,col 9)-(line 190,col 145)",
            "(line 191,col 9)-(line 192,col 121)",
            "(line 193,col 9)-(line 194,col 122)",
            "(line 195,col 9)-(line 196,col 148)",
            "(line 197,col 9)-(line 198,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha256HMacFail() throws IOException {\n        HmacUtils.hmacSha256((byte[]) null, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 201,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac()",
        "snippet": "    @Test\n    public void testSha384HMac() throws IOException {\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_BYTES,\n                HmacUtils.hmacSha384(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_BYTES,\n                HmacUtils.hmacSha384(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_BYTES,\n                HmacUtils.hmacSha384(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_STRING,\n                HmacUtils.hmacSha384Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_STRING,\n                HmacUtils.hmacSha384Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA384_RESULT_STRING,\n                HmacUtils.hmacSha384Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 206,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 209,col 119)",
            "(line 210,col 9)-(line 211,col 145)",
            "(line 212,col 9)-(line 213,col 121)",
            "(line 214,col 9)-(line 215,col 122)",
            "(line 216,col 9)-(line 217,col 148)",
            "(line 218,col 9)-(line 219,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha384HMacFail() throws IOException {\n        HmacUtils.hmacSha384((byte[]) null, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac()",
        "snippet": "    @Test\n    public void testSha512HMac() throws IOException {\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_BYTES,\n                HmacUtils.hmacSha512(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_BYTES,\n                HmacUtils.hmacSha512(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertArrayEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_BYTES,\n                HmacUtils.hmacSha512(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_STRING,\n                HmacUtils.hmacSha512Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_STRING,\n                HmacUtils.hmacSha512Hex(HmacAlgorithmsTest.STANDARD_KEY_BYTES, new ByteArrayInputStream(HmacAlgorithmsTest.STANDARD_PHRASE_BYTES)));\n        Assert.assertEquals(HmacAlgorithmsTest.STANDARD_SHA512_RESULT_STRING,\n                HmacUtils.hmacSha512Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, HmacAlgorithmsTest.STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 227,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 230,col 119)",
            "(line 231,col 9)-(line 232,col 145)",
            "(line 233,col 9)-(line 234,col 121)",
            "(line 235,col 9)-(line 236,col 122)",
            "(line 237,col 9)-(line 238,col 148)",
            "(line 239,col 9)-(line 240,col 124)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha512HMacFail() throws IOException {\n        HmacUtils.hmacSha512((byte[]) null, HmacAlgorithmsTest.STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha2CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha2CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha2CryptTest.testCtor()",
        "snippet": "    @Test\n    public void testCtor() {\n        assertNotNull(new Sha2Crypt());\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32CTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32CTest.testZeros()",
        "snippet": "    @Test\n    public void testZeros() {\n        for(int i = 0; i < data.length; i ++) {\n            data[i]= (byte) 0;\n        }\n        check(0x8a9136aa); // aa 36 91 8a\n    }",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 37,col 9)",
            "(line 38,col 9)-(line 38,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32CTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32CTest.testOnes()",
        "snippet": "    @Test\n    public void testOnes() {\n        for(int i = 0; i < data.length; i ++) {\n            data[i]= (byte) 0xFF;\n        }\n        check(0x62a8ab43); // 43 ab a8 62\n    }",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 45,col 9)",
            "(line 46,col 9)-(line 46,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32CTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32CTest.testIncreasing()",
        "snippet": "    @Test\n    public void testIncreasing() {\n        for(int i = 0; i < data.length; i ++) {\n            data[i]= (byte) i;\n        }\n        check(0x46dd794e); // 4e 79 dd 46\n    }",
        "begin_line": 49,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 53,col 9)",
            "(line 54,col 9)-(line 54,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32CTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32CTest.testDecreasing()",
        "snippet": "    @Test\n    public void testDecreasing() {\n        for(int i = 0; i < data.length; i ++) {\n            data[i]= (byte) (31-i);\n        }\n        check(0x113fdb5c); // 5c db 3f 11\n    }",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 61,col 9)",
            "(line 62,col 9)-(line 62,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32CTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32CTest.check(int)",
        "snippet": "    private void check(int expected) {\n        crc.reset();\n        crc.update(data, 0, data.length);\n        int actual = (int) crc.getValue();\n        Assert.assertEquals(Integer.toHexString(expected), Integer.toHexString(actual));\n    }",
        "begin_line": 66,
        "end_line": 71,
        "comment": " Using int because only want 32 bits",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 20)",
            "(line 68,col 9)-(line 68,col 41)",
            "(line 69,col 9)-(line 69,col 42)",
            "(line 70,col 9)-(line 70,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings()",
        "snippet": "    @Test\n    public void testSha512CryptStrings() {\n        // empty data\n        assertEquals(\"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/\", Crypt.crypt(\"\", \"$6$foo\"));\n        // salt gets cut at dollar sign\n        assertEquals(\"$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5.\", Crypt.crypt(\"secret\", \"$6$45678\"));\n        assertEquals(\"$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5.\", Crypt.crypt(\"secret\", \"$6$45678$012\"));\n        assertEquals(\"$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5.\", Crypt.crypt(\"secret\", \"$6$45678$012$456\"));\n        // salt gets cut at maximum length\n        assertEquals(\"$6$1234567890123456$d2HCAnimIF5VMqUnwaZ/4JhNDJ.ttsjm0nbbmc9eE7xUYiw79GMvXUc5ZqG5BlqkXSbASZxrvR0QefAgdLbeH.\", Crypt.crypt(\"secret\", \"$6$1234567890123456\"));\n        assertEquals(\"$6$1234567890123456$d2HCAnimIF5VMqUnwaZ/4JhNDJ.ttsjm0nbbmc9eE7xUYiw79GMvXUc5ZqG5BlqkXSbASZxrvR0QefAgdLbeH.\", Crypt.crypt(\"secret\", \"$6$1234567890123456789\"));\n    }",
        "begin_line": 30,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 145)",
            "(line 35,col 9)-(line 35,col 155)",
            "(line 36,col 9)-(line 36,col 159)",
            "(line 37,col 9)-(line 37,col 163)",
            "(line 39,col 9)-(line 39,col 177)",
            "(line 40,col 9)-(line 40,col 180)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes()",
        "snippet": "    @Test\n    public void testSha512CryptBytes() {\n        // An empty Bytearray equals an empty String\n        assertEquals(\"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/\", Crypt.crypt(new byte[0], \"$6$foo\"));\n        // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n        assertEquals(\"$6$./$fKtWqslQkwI8ZxjdWoeS.jHHrte97bZxiwB5gwCRHX6LG62fUhT6Bb5MRrjWvieh0C/gxh8ItFuTsVy80VrED1\", Crypt.crypt(\"t\\u00e4st\", \"$6$./$\"));\n        // ISO-8859-1 stores \"a with diaeresis\" as single byte 0xe4.\n        assertEquals(\"$6$./$L49DSK.d2df/LxGLJQMyS5A/Um.TdHqgc46j5FpScEPlqQHP5dEazltaDNDZ6UEs2mmNI6kPwtH/rsP9g5zBI.\", Crypt.crypt(\"t\\u00e4st\".getBytes(Charsets.ISO_8859_1), \"$6$./$\"));\n    }",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 154)",
            "(line 48,col 9)-(line 48,col 153)",
            "(line 50,col 9)-(line 50,col 183)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall()",
        "snippet": "    @Test\n    public void testSha512CryptExplicitCall() {\n        assertTrue(Sha2Crypt.sha512Crypt(\"secret\".getBytes()).matches(\"^\\\\$6\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n        assertTrue(Sha2Crypt.sha512Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$6\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n    }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 111)",
            "(line 56,col 9)-(line 56,col 117)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void testSha512CryptNullData() {\n        Sha2Crypt.sha512Crypt((byte[]) null);\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullSalt()",
        "snippet": "    @Ignore\n    public void testSha512CryptNullSalt() {\n        // cannot be tested as sha512Crypt() with all params is private and\n        // all public methods check for salt==null.\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds()",
        "snippet": "    @Test\n    public void testSha2CryptRounds() {\n        // minimum rounds?\n        assertEquals(\"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva.\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=50$abcd$\"));\n        assertEquals(\"$5$rounds=1001$abcd$SQsJZs7KXKdd2DtklI3TY3tkD7UYA99RD0FBLm4Sk48\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=1001$abcd$\"));\n        assertEquals(\"$5$rounds=9999$abcd$Rh/8ngVh9oyuS6lL3.fsq.9xbvXJsfyKWxSjO2mPIa7\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=9999$abcd\"));\n    }",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 168)",
            "(line 74,col 9)-(line 74,col 170)",
            "(line 75,col 9)-(line 75,col 169)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha2CryptWrongSalt() {\n        Sha2Crypt.sha512Crypt(\"secret\".getBytes(Charsets.UTF_8), \"xx\");\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha512CryptWithEmptySalt() {\n        Sha2Crypt.sha512Crypt(\"secret\".getBytes(), \"\");\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha512CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize()",
        "snippet": "    @Test\n    public void testSha256LargetThanBlocksize() {\n        final byte[] buffer = new byte[200];\n        Arrays.fill(buffer, 0, 200, (byte)'A');\n        assertEquals(\"$6$abc$oP/h8PRhCKIA66KSTjGwNsQMSLLZnuFOTjOhrqNrDkKgjTlpePSqibB0qtmDapMbP/zN1cUEYSeHFrpgqZ.GG1\", Sha2Crypt.sha512Crypt(buffer, \"$6$abc\"));\n    }",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 47)",
            "(line 92,col 9)-(line 92,col 159)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.data()",
        "snippet": "    @Parameters(name = \"{0}\")\n    public static Collection<Object[]> data() {\n        return Arrays.asList(\n                new Object[][] { { HmacAlgorithms.HMAC_MD5, STANDARD_MD5_RESULT_BYTES, STANDARD_MD5_RESULT_STRING },\n                        { HmacAlgorithms.HMAC_SHA_1, STANDARD_SHA1_RESULT_BYTES, STANDARD_SHA1_RESULT_STRING },\n                        { HmacAlgorithms.HMAC_SHA_256, STANDARD_SHA256_RESULT_BYTES, STANDARD_SHA256_RESULT_STRING },\n                        { HmacAlgorithms.HMAC_SHA_384, STANDARD_SHA384_RESULT_BYTES, STANDARD_SHA384_RESULT_STRING },\n                        { HmacAlgorithms.HMAC_SHA_512, STANDARD_SHA512_RESULT_BYTES, STANDARD_SHA512_RESULT_STRING } });\n    }",
        "begin_line": 85,
        "end_line": 93,
        "comment": " TODO HMAC_SHA_224",
        "child_ranges": [
            "(line 87,col 9)-(line 92,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.HmacAlgorithmsTest(org.apache.commons.codec.digest.HmacAlgorithms, byte[], java.lang.String)",
        "snippet": "    public HmacAlgorithmsTest(HmacAlgorithms hmacAlgorithm, byte[] standardResultBytes, String standardResultString) {\n        Assume.assumeTrue(HmacUtils.isAvailable(hmacAlgorithm));\n        this.hmacAlgorithm = hmacAlgorithm;\n        this.standardResultBytes = standardResultBytes;\n        this.standardResultString = standardResultString;\n    }",
        "begin_line": 102,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 64)",
            "(line 104,col 9)-(line 104,col 43)",
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        digestUtilsTest = new DigestUtilsTest();\n        digestUtilsTest.setUp();\n    }",
        "begin_line": 109,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 48)",
            "(line 112,col 9)-(line 112,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() throws Exception {\n        digestUtilsTest.tearDown();\n        digestUtilsTest = null;\n    }",
        "begin_line": 115,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 35)",
            "(line 118,col 9)-(line 118,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm()",
        "snippet": "    @Test\n    public void testAlgorithm() throws IOException, NoSuchAlgorithmException {\n        final String algorithm = hmacAlgorithm.getName();\n        Assert.assertNotNull(algorithm);\n        Assert.assertFalse(algorithm.isEmpty());\n        Assume.assumeTrue(HmacUtils.isAvailable(hmacAlgorithm));\n        Mac.getInstance(algorithm);\n    }",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 57)",
            "(line 124,col 9)-(line 124,col 40)",
            "(line 125,col 9)-(line 125,col 48)",
            "(line 126,col 9)-(line 126,col 64)",
            "(line 127,col 9)-(line 127,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testGetHmacEmptyKey() {\n        HmacUtils.getInitializedMac(hmacAlgorithm, EMPTY_BYTE_ARRAY);\n    }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testGetHmacNullKey() {\n        HmacUtils.getInitializedMac(hmacAlgorithm, null);\n    }",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testHmacFailByteArray() throws IOException {\n        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testHmacFailInputStream() throws IOException {\n        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(new ByteArrayInputStream(STANDARD_PHRASE_BYTES));\n    }",
        "begin_line": 145,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testHmacFailString() throws IOException {\n        new HmacUtils(hmacAlgorithm, (String) null).hmac(STANDARD_PHRASE_STRING);\n    }",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testHmacHexFailByteArray() throws IOException {\n        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(STANDARD_PHRASE_BYTES);\n    }",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testHmacHexFailInputStream() throws IOException {\n        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(new ByteArrayInputStream(STANDARD_PHRASE_BYTES));\n    }",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testHmacHexFailString() throws IOException {\n        new HmacUtils(hmacAlgorithm, (String) null).hmac(STANDARD_PHRASE_STRING);\n    }",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac()",
        "snippet": "    @Test\n    public void testInitializedMac() throws IOException {\n        final Mac mac = HmacUtils.getInitializedMac(hmacAlgorithm, STANDARD_KEY_BYTES);\n        final Mac mac2 = HmacUtils.getInitializedMac(hmacAlgorithm.getName(), STANDARD_KEY_BYTES);\n        Assert.assertArrayEquals(standardResultBytes, HmacUtils.updateHmac(mac, STANDARD_PHRASE_STRING).doFinal());\n        Assert.assertArrayEquals(standardResultBytes, HmacUtils.updateHmac(mac2, STANDARD_PHRASE_STRING).doFinal());\n    }",
        "begin_line": 170,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 87)",
            "(line 173,col 9)-(line 173,col 98)",
            "(line 174,col 9)-(line 174,col 115)",
            "(line 175,col 9)-(line 175,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary()",
        "snippet": "    @Test\n    public void testMacByteArary() throws IOException {\n        Assert.assertArrayEquals(standardResultBytes, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmac(STANDARD_PHRASE_BYTES));\n    }",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 132)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray()",
        "snippet": "    @Test\n    public void testMacHexByteArray() throws IOException {\n        Assert.assertEquals(standardResultString, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmacHex(STANDARD_PHRASE_BYTES));\n    }",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream()",
        "snippet": "    @Test\n    public void testMacHexInputStream() throws IOException {\n        Assert.assertEquals(standardResultString,\n                new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmacHex(new ByteArrayInputStream(STANDARD_PHRASE_BYTES)));\n    }",
        "begin_line": 188,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 191,col 123)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString()",
        "snippet": "    @Test\n    public void testMacHexString() throws IOException {\n        Assert.assertEquals(standardResultString, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmacHex(STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 194,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 132)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream()",
        "snippet": "    @Test\n    public void testMacInputStream() throws IOException {\n        Assert.assertArrayEquals(standardResultBytes,\n                new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmac(new ByteArrayInputStream(STANDARD_PHRASE_BYTES)));\n    }",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 202,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.HmacAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString()",
        "snippet": "    @Test\n    public void testMacString() throws IOException {\n        Assert.assertArrayEquals(standardResultBytes, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmac(STANDARD_PHRASE_STRING));\n    }",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 133)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testCtor()",
        "snippet": "    @Test\n    public void testCtor() {\n        assertNotNull(new UnixCrypt());\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings()",
        "snippet": "    @Test\n    public void testUnixCryptStrings() {\n        // trivial test\n        assertEquals(\"xxWAum7tHdIUw\", Crypt.crypt(\"secret\", \"xx\"));\n        // empty data\n        assertEquals(\"12UFlHxel6uMM\", Crypt.crypt(\"\", \"12\"));\n        // salt gets cut at maximum length\n        assertEquals(\"12FJgqDtVOg7Q\", Crypt.crypt(\"secret\", \"12\"));\n        assertEquals(\"12FJgqDtVOg7Q\", Crypt.crypt(\"secret\", \"12345678\"));\n    }",
        "begin_line": 34,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 67)",
            "(line 39,col 9)-(line 39,col 61)",
            "(line 41,col 9)-(line 41,col 67)",
            "(line 42,col 9)-(line 42,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes()",
        "snippet": "    @Test\n    public void testUnixCryptBytes() {\n        // An empty Bytearray equals an empty String\n        assertEquals(\"12UFlHxel6uMM\", Crypt.crypt(new byte[0], \"12\"));\n        // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n        assertEquals(\"./287bds2PjVw\", Crypt.crypt(\"t\\u00e4st\", \"./\"));\n        // ISO-8859-1 stores \"a with diaeresis\" as single byte 0xe4.\n        assertEquals(\"./bLIFNqo9XKQ\", Crypt.crypt(\"t\\u00e4st\".getBytes(Charsets.ISO_8859_1), \"./\"));\n        assertEquals(\"./bLIFNqo9XKQ\", Crypt.crypt(new byte[]{(byte) 0x74, (byte) 0xe4, (byte) 0x73, (byte) 0x74}, \"./\"));\n    }",
        "begin_line": 45,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 70)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 52,col 9)-(line 52,col 100)",
            "(line 53,col 9)-(line 53,col 121)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall()",
        "snippet": "    @Test\n    public void testUnixCryptExplicitCall() {\n        // A call to crypt() with an empty salt would result in a \"$6$\" hash.\n        // Using unixCrypt() explicitly results in a random salt.\n        assertTrue(UnixCrypt.crypt(\"secret\".getBytes()).matches(\"^[a-zA-Z0-9./]{13}$\"));\n        assertTrue(UnixCrypt.crypt(\"secret\".getBytes(), null).matches(\"^[a-zA-Z0-9./]{13}$\"));\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "\n     * Some salts are invalid for crypt(3) but not for unixCrypt().\n     ",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 88)",
            "(line 64,col 9)-(line 64,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithHalfSalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testUnixCryptWithHalfSalt() {\n        UnixCrypt.crypt(\"secret\", \"x\");\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\n     * Single character salts are illegal!\n     * E.g. with glibc 2.13, crypt(\"secret\", \"x\") = \"xxZREZpkHZpkI\" but\n     * crypt(\"secret\", \"xx\") = \"xxWAum7tHdIUw\" which makes it unverifyable.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnicCryptInvalidSalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testUnicCryptInvalidSalt() {\n        UnixCrypt.crypt(\"secret\", \"$a\");\n    }",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\n     * Unimplemented \"$foo$\" salt prefixes would be threated as UnixCrypt salt.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptNullData()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void testUnixCryptNullData() {\n        UnixCrypt.crypt((byte[]) null);\n    }",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithEmptySalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testUnixCryptWithEmptySalt() {\n        UnixCrypt.crypt(\"secret\", \"\");\n    }",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.UnixCryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
        "signature": "org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt()",
        "snippet": "    @Test\n    public void testUnixCryptWithoutSalt() {\n        final String hash = UnixCrypt.crypt(\"foo\");\n        assertTrue(hash.matches(\"^[a-zA-Z0-9./]{13}$\"));\n        final String hash2 = UnixCrypt.crypt(\"foo\");\n        assertNotSame(hash, hash2);\n    }",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 51)",
            "(line 98,col 9)-(line 98,col 56)",
            "(line 99,col 9)-(line 99,col 52)",
            "(line 100,col 9)-(line 100,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testCtor()",
        "snippet": "    @Test\n    public void testCtor() {\n        assertNotNull(new Md5Crypt()); // for code-coverage\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings()",
        "snippet": "    @Test\n    public void testMd5CryptStrings() {\n        // empty data\n        assertEquals(\"$1$foo$9mS5ExwgIECGE5YKlD5o91\", Crypt.crypt(\"\", \"$1$foo\"));\n        // salt gets cut at dollar sign\n        assertEquals(\"$1$1234$ImZYBLmYC.rbBKg9ERxX70\", Crypt.crypt(\"secret\", \"$1$1234\"));\n        assertEquals(\"$1$1234$ImZYBLmYC.rbBKg9ERxX70\", Crypt.crypt(\"secret\", \"$1$1234$567\"));\n        assertEquals(\"$1$1234$ImZYBLmYC.rbBKg9ERxX70\", Crypt.crypt(\"secret\", \"$1$1234$567$890\"));\n        // salt gets cut at maximum length\n        assertEquals(\"$1$12345678$hj0uLpdidjPhbMMZeno8X/\", Crypt.crypt(\"secret\", \"$1$1234567890123456\"));\n        assertEquals(\"$1$12345678$hj0uLpdidjPhbMMZeno8X/\", Crypt.crypt(\"secret\", \"$1$123456789012345678\"));\n    }",
        "begin_line": 33,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 81)",
            "(line 38,col 9)-(line 38,col 89)",
            "(line 39,col 9)-(line 39,col 93)",
            "(line 40,col 9)-(line 40,col 97)",
            "(line 42,col 9)-(line 42,col 105)",
            "(line 43,col 9)-(line 43,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes()",
        "snippet": "    @Test\n    public void testMd5CryptBytes() {\n        // An empty Bytearray equals an empty String\n        assertEquals(\"$1$foo$9mS5ExwgIECGE5YKlD5o91\", Crypt.crypt(new byte[0], \"$1$foo\"));\n        // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n        assertEquals(\"$1$./$52agTEQZs877L9jyJnCNZ1\", Crypt.crypt(\"t\\u00e4st\", \"$1$./$\"));\n        // ISO-8859-1 stores \"a with diaeresis\" as single byte 0xe4.\n        assertEquals(\"$1$./$J2UbKzGe0Cpe63WZAt6p//\", Crypt.crypt(\"t\\u00e4st\".getBytes(Charsets.ISO_8859_1), \"$1$./$\"));\n    }",
        "begin_line": 46,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 90)",
            "(line 51,col 9)-(line 51,col 89)",
            "(line 53,col 9)-(line 53,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall()",
        "snippet": "    @Test\n    public void testMd5CryptExplicitCall() {\n        assertTrue(Md5Crypt.md5Crypt(\"secret\".getBytes()).matches(\"^\\\\$1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n        assertTrue(Md5Crypt.md5Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n    }",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 106)",
            "(line 59,col 9)-(line 59,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput()",
        "snippet": "    @Test\n    public void testMd5CryptLongInput() {\n        assertEquals(\"$1$1234$MoxekaNNUgfPRVqoeYjCD/\", Crypt.crypt(\"12345678901234567890\", \"$1$1234\"));\n    }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptNullData()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void testMd5CryptNullData() {\n        Md5Crypt.md5Crypt((byte[]) null);\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Md5CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptWithEmptySalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMd5CryptWithEmptySalt() {\n        Md5Crypt.md5Crypt(\"secret\".getBytes(), \"\");\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.B64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/B64Test.java",
        "signature": "org.apache.commons.codec.digest.B64Test.testB64T()",
        "snippet": "    @Test\n    public void testB64T() {\n        assertNotNull(new B64()); // for the 100% code coverage :)\n        assertEquals(64, B64.B64T.length());\n    }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 33)",
            "(line 29,col 9)-(line 29,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.B64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/B64Test.java",
        "signature": "org.apache.commons.codec.digest.B64Test.testB64from24bit()",
        "snippet": "    @Test\n    public void testB64from24bit() {\n        final StringBuilder buffer = new StringBuilder(\"\");\n        B64.b64from24bit((byte) 8, (byte) 16, (byte) 64, 2, buffer);\n        B64.b64from24bit((byte) 7, (byte) 77, (byte) 120, 4, buffer);\n        assertEquals(\"./spo/\", buffer.toString());\n    }",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 59)",
            "(line 35,col 9)-(line 35,col 68)",
            "(line 36,col 9)-(line 36,col 69)",
            "(line 37,col 9)-(line 37,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.assumeJava8()",
        "snippet": "    private void assumeJava8() {\n        Assume.assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\n    }",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.getTestData()",
        "snippet": "    byte[] getTestData() {\n        return testData;\n    }",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.getTestFile()",
        "snippet": "    File getTestFile() {\n        return testFile;\n    }",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        new Random().nextBytes(testData);\n        testFile = File.createTempFile(DigestUtilsTest.class.getName(), \".dat\");\n        FileOutputStream fos = new FileOutputStream(testFile);\n        fos.write(testData);\n        fos.close();\n    }",
        "begin_line": 63,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 41)",
            "(line 66,col 9)-(line 66,col 80)",
            "(line 67,col 9)-(line 67,col 62)",
            "(line 68,col 9)-(line 68,col 28)",
            "(line 69,col 9)-(line 69,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() {\n        if (!testFile.delete()) {\n            testFile.deleteOnExit();\n        }\n    }",
        "begin_line": 72,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 76,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException()",
        "snippet": "    @Test(expected=IllegalArgumentException.class)\n    public void testInternalNoSuchAlgorithmException() {\n        DigestUtils.getDigest(\"Bogus Bogus\");\n    }",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex()",
        "snippet": "    @Test\n    public void testMd2Hex() throws IOException {\n        // Examples from RFC 1319\n        assertEquals(\"8350e5a3e24c153df2275c9f80692773\", DigestUtils.md2Hex(\"\"));\n\n        assertEquals(\"32ec01ec4a6dac72c0ab96fb34c0b5d1\", DigestUtils.md2Hex(\"a\"));\n\n        assertEquals(\"da853b0d3f88d99b30283a69e6ded6bb\", DigestUtils.md2Hex(\"abc\"));\n\n        assertEquals(\"ab4f496bfb2a530b219ff33031fe06b0\", DigestUtils.md2Hex(\"message digest\"));\n\n        assertEquals(\"4e8ddff3650292ab5a4108c3aa47940b\", DigestUtils.md2Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n\n        assertEquals(\n            \"da33def2a42df13975352846c30338cd\",\n            DigestUtils.md2Hex(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"));\n\n        assertEquals(\n            \"d5976f79d83d3a0dc9806c3c66f3efd8\",\n            DigestUtils.md2Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n\n        assertEquals(DigestUtils.md2Hex(testData),\n                DigestUtils.md2Hex(new ByteArrayInputStream(testData)));\n}",
        "begin_line": 84,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 81)",
            "(line 89,col 9)-(line 89,col 82)",
            "(line 91,col 9)-(line 91,col 84)",
            "(line 93,col 9)-(line 93,col 95)",
            "(line 95,col 9)-(line 95,col 107)",
            "(line 97,col 9)-(line 99,col 108)",
            "(line 101,col 9)-(line 103,col 121)",
            "(line 105,col 9)-(line 106,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength()",
        "snippet": "    @Test\n    public void testMd2HexLength() {\n        String hashMe = \"this is some string that is longer than 32 characters\";\n        String hash = DigestUtils.md2Hex(getBytesUtf8(hashMe));\n        assertEquals(32, hash.length());\n\n        hashMe = \"length < 32\";\n        hash = DigestUtils.md2Hex(getBytesUtf8(hashMe));\n        assertEquals(32, hash.length());\n    }",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\n     * An MD2 hash converted to hex should always be 32 characters.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 80)",
            "(line 115,col 9)-(line 115,col 63)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 118,col 9)-(line 118,col 31)",
            "(line 119,col 9)-(line 119,col 56)",
            "(line 120,col 9)-(line 120,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length()",
        "snippet": "    @Test\n    public void testMd2Length() {\n        String hashMe = \"this is some string that is longer than 16 characters\";\n        byte[] hash = DigestUtils.md2(getBytesUtf8(hashMe));\n        assertEquals(16, hash.length);\n\n        hashMe = \"length < 16\";\n        hash = DigestUtils.md2(getBytesUtf8(hashMe));\n        assertEquals(16, hash.length);\n    }",
        "begin_line": 126,
        "end_line": 135,
        "comment": "\n     * An MD2 hash should always be a 16 element byte[].\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 80)",
            "(line 129,col 9)-(line 129,col 60)",
            "(line 130,col 9)-(line 130,col 38)",
            "(line 132,col 9)-(line 132,col 31)",
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex()",
        "snippet": "    @Test\n    public void testMd5Hex() throws IOException {\n        // Examples from RFC 1321\n        assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n\n        assertEquals(\"0cc175b9c0f1b6a831c399e269772661\", DigestUtils.md5Hex(\"a\"));\n\n        assertEquals(\"900150983cd24fb0d6963f7d28e17f72\", DigestUtils.md5Hex(\"abc\"));\n\n        assertEquals(\"f96b697d7cb7938d525a2f31aaf161d0\", DigestUtils.md5Hex(\"message digest\"));\n\n        assertEquals(\"c3fcd3d76192e4007dfb496cca67e13b\", DigestUtils.md5Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n\n        assertEquals(\n            \"d174ab98d277d9f5a5611c2c9f419d9f\",\n            DigestUtils.md5Hex(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"));\n\n        assertEquals(\n            \"57edf4a22be3c955ac49da2e2107b67a\",\n            DigestUtils.md5Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n\n        assertEquals(DigestUtils.md5Hex(testData),\n                DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n}",
        "begin_line": 137,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 81)",
            "(line 142,col 9)-(line 142,col 82)",
            "(line 144,col 9)-(line 144,col 84)",
            "(line 146,col 9)-(line 146,col 95)",
            "(line 148,col 9)-(line 148,col 107)",
            "(line 150,col 9)-(line 152,col 108)",
            "(line 154,col 9)-(line 156,col 121)",
            "(line 158,col 9)-(line 159,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLengthForBytes()",
        "snippet": "    @Test\n    public void testMd5HexLengthForBytes() {\n        String hashMe = \"this is some string that is longer than 32 characters\";\n        String hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n        assertEquals(32, hash.length());\n\n        hashMe = \"length < 32\";\n        hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n        assertEquals(32, hash.length());\n    }",
        "begin_line": 165,
        "end_line": 174,
        "comment": "\n     * An MD5 hash converted to hex should always be 32 characters.\n     ",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 80)",
            "(line 168,col 9)-(line 168,col 63)",
            "(line 169,col 9)-(line 169,col 40)",
            "(line 171,col 9)-(line 171,col 31)",
            "(line 172,col 9)-(line 172,col 56)",
            "(line 173,col 9)-(line 173,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testMd5LengthForBytes()",
        "snippet": "    @Test\n    public void testMd5LengthForBytes() {\n        String hashMe = \"this is some string that is longer than 16 characters\";\n        byte[] hash = DigestUtils.md5(getBytesUtf8(hashMe));\n        assertEquals(16, hash.length);\n\n        hashMe = \"length < 16\";\n        hash = DigestUtils.md5(getBytesUtf8(hashMe));\n        assertEquals(16, hash.length);\n    }",
        "begin_line": 179,
        "end_line": 188,
        "comment": "\n     * An MD5 hash should always be a 16 element byte[].\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 80)",
            "(line 182,col 9)-(line 182,col 60)",
            "(line 183,col 9)-(line 183,col 38)",
            "(line 185,col 9)-(line 185,col 31)",
            "(line 186,col 9)-(line 186,col 53)",
            "(line 187,col 9)-(line 187,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex()",
        "snippet": "    @Test\n    public void testSha1Hex() throws IOException {\n        // Examples from FIPS 180-1\n        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.sha1Hex(\"abc\"));\n\n        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.sha1Hex(getBytesUtf8(\"abc\")));\n\n        assertEquals(\n            \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n            DigestUtils.sha1Hex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n        assertEquals(DigestUtils.sha1Hex(testData),\n                DigestUtils.sha1Hex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 190,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 93)",
            "(line 195,col 9)-(line 195,col 107)",
            "(line 197,col 9)-(line 199,col 98)",
            "(line 200,col 9)-(line 201,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray()",
        "snippet": "    @Test\n    public void testSha1UpdateWithByteArray(){\n        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n\n        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n        messageDigest.update(d1.getBytes());\n        messageDigest.update(d2.getBytes());\n        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n\n        messageDigest = DigestUtils.getSha1Digest();\n        DigestUtils.updateDigest(messageDigest, d1.getBytes());\n        DigestUtils.updateDigest(messageDigest, d2.getBytes());\n        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n\n        assertEquals(expectedResult, actualResult);\n    }",
        "begin_line": 204,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 77)",
            "(line 207,col 9)-(line 207,col 114)",
            "(line 209,col 9)-(line 209,col 66)",
            "(line 210,col 9)-(line 210,col 44)",
            "(line 211,col 9)-(line 211,col 44)",
            "(line 212,col 9)-(line 212,col 82)",
            "(line 214,col 9)-(line 214,col 52)",
            "(line 215,col 9)-(line 215,col 63)",
            "(line 216,col 9)-(line 216,col 63)",
            "(line 217,col 9)-(line 217,col 80)",
            "(line 219,col 9)-(line 219,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteBuffer()",
        "snippet": "    @Test\n    public void testSha1UpdateWithByteBuffer(){\n        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n\n        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n        messageDigest.update(d1.getBytes());\n        messageDigest.update(d2.getBytes());\n        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n\n        messageDigest = DigestUtils.getSha1Digest();\n        DigestUtils.updateDigest(messageDigest, ByteBuffer.wrap(d1.getBytes()));\n        DigestUtils.updateDigest(messageDigest, ByteBuffer.wrap(d2.getBytes()));\n        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n\n        assertEquals(expectedResult, actualResult);\n    }",
        "begin_line": 222,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 77)",
            "(line 225,col 9)-(line 225,col 114)",
            "(line 227,col 9)-(line 227,col 66)",
            "(line 228,col 9)-(line 228,col 44)",
            "(line 229,col 9)-(line 229,col 44)",
            "(line 230,col 9)-(line 230,col 82)",
            "(line 232,col 9)-(line 232,col 52)",
            "(line 233,col 9)-(line 233,col 80)",
            "(line 234,col 9)-(line 234,col 80)",
            "(line 235,col 9)-(line 235,col 80)",
            "(line 237,col 9)-(line 237,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString()",
        "snippet": "    @Test\n    public void testSha1UpdateWithString(){\n        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n\n        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n        messageDigest.update(StringUtils.getBytesUtf8(d1));\n        messageDigest.update(StringUtils.getBytesUtf8(d2));\n        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n\n        messageDigest = DigestUtils.getSha1Digest();\n        DigestUtils.updateDigest(messageDigest, d1);\n        DigestUtils.updateDigest(messageDigest, d2);\n        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n\n        assertEquals(expectedResult, actualResult);\n    }",
        "begin_line": 240,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 77)",
            "(line 243,col 9)-(line 243,col 114)",
            "(line 245,col 9)-(line 245,col 66)",
            "(line 246,col 9)-(line 246,col 59)",
            "(line 247,col 9)-(line 247,col 59)",
            "(line 248,col 9)-(line 248,col 82)",
            "(line 250,col 9)-(line 250,col 52)",
            "(line 251,col 9)-(line 251,col 52)",
            "(line 252,col 9)-(line 252,col 52)",
            "(line 253,col 9)-(line 253,col 80)",
            "(line 255,col 9)-(line 255,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha224()",
        "snippet": "    @Test\n    public void testSha224() throws IOException {\n        assumeJava8();\n        assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\n                new DigestUtils(MessageDigestAlgorithms.SHA_224).digestAsHex((\"\")));\n        assertEquals(\"730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525\",\n                new DigestUtils(MessageDigestAlgorithms.SHA_224).digestAsHex(\"The quick brown fox jumps over the lazy dog\"));\n\n        // Examples from FIPS 180-4?\n    }",
        "begin_line": 258,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 22)",
            "(line 261,col 9)-(line 262,col 84)",
            "(line 263,col 9)-(line 264,col 125)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha256()",
        "snippet": "    @Test\n    public void testSha256() throws IOException {\n    // Examples from FIPS 180-2\n    assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n             DigestUtils.sha256Hex(\"abc\"));\n    assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n             DigestUtils.sha256Hex(getBytesUtf8(\"abc\")));\n    assertEquals(\"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\",\n             DigestUtils.sha256Hex(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\"));\n\n    assertEquals(DigestUtils.sha256Hex(testData),\n            DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 269,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 273,col 43)",
            "(line 274,col 5)-(line 275,col 57)",
            "(line 276,col 5)-(line 277,col 96)",
            "(line 279,col 5)-(line 280,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha384()",
        "snippet": "    @Test\n    public void testSha384() throws IOException {\n    // Examples from FIPS 180-2\n    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" +\n             \"8086072ba1e7cc2358baeca134c825a7\",\n             DigestUtils.sha384Hex(\"abc\"));\n    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" +\n             \"8086072ba1e7cc2358baeca134c825a7\",\n             DigestUtils.sha384Hex(getBytesUtf8(\"abc\")));\n    assertEquals(\"09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712\" +\n            \"fcc7c71a557e2db966c3e9fa91746039\",\n             DigestUtils.sha384Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n                       \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n    assertEquals(DigestUtils.sha384Hex(testData),\n            DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 283,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 288,col 43)",
            "(line 289,col 5)-(line 291,col 57)",
            "(line 292,col 5)-(line 295,col 84)",
            "(line 296,col 5)-(line 297,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha512()",
        "snippet": "    @Test\n    public void testSha512() throws IOException {\n    // Examples from FIPS 180-2\n    assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n            \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n             DigestUtils.sha512Hex(\"abc\"));\n    assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n             \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n             DigestUtils.sha512Hex(getBytesUtf8(\"abc\")));\n    assertEquals(\"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\" +\n             \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n             DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n                       \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n    }",
        "begin_line": 300,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 305,col 43)",
            "(line 306,col 5)-(line 308,col 57)",
            "(line 309,col 5)-(line 312,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testSha512HexInputStream()",
        "snippet": "    @Test\n    public void testSha512HexInputStream() throws IOException {\n        assertEquals(DigestUtils.sha512Hex(testData),\n                DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 315,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 318,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testShaHex()",
        "snippet": "    @SuppressWarnings(\"deprecation\") // deliberate tests of deprecated code\n    @Test\n    public void testShaHex() throws IOException {\n        // Examples from FIPS 180-1\n        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\"));\n\n        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(getBytesUtf8(\"abc\")));\n\n        assertEquals(\n            \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n            DigestUtils.shaHex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n        assertEquals(DigestUtils.shaHex(testData),\n                DigestUtils.shaHex(new ByteArrayInputStream(testData)));\n    }",
        "begin_line": 321,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 92)",
            "(line 327,col 9)-(line 327,col 106)",
            "(line 329,col 9)-(line 331,col 97)",
            "(line 332,col 9)-(line 333,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray()",
        "snippet": "    @SuppressWarnings(\"deprecation\") // deliberate tests of deprecated code\n    @Test\n    public void testShaUpdateWithByteArray(){\n        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n\n        MessageDigest messageDigest = DigestUtils.getShaDigest();\n        messageDigest.update(d1.getBytes());\n        messageDigest.update(d2.getBytes());\n        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n\n        messageDigest = DigestUtils.getShaDigest();\n        DigestUtils.updateDigest(messageDigest, d1.getBytes());\n        DigestUtils.updateDigest(messageDigest, d2.getBytes());\n        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n\n        assertEquals(expectedResult, actualResult);\n    }",
        "begin_line": 336,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 77)",
            "(line 340,col 9)-(line 340,col 114)",
            "(line 342,col 9)-(line 342,col 65)",
            "(line 343,col 9)-(line 343,col 44)",
            "(line 344,col 9)-(line 344,col 44)",
            "(line 345,col 9)-(line 345,col 82)",
            "(line 347,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 348,col 63)",
            "(line 349,col 9)-(line 349,col 63)",
            "(line 350,col 9)-(line 350,col 80)",
            "(line 352,col 9)-(line 352,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.DigestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
        "signature": "org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString()",
        "snippet": "    @SuppressWarnings(\"deprecation\") // deliberate tests of deprecated code\n    @Test\n    public void testShaUpdateWithString(){\n        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n\n        MessageDigest messageDigest = DigestUtils.getShaDigest();\n        messageDigest.update(StringUtils.getBytesUtf8(d1));\n        messageDigest.update(StringUtils.getBytesUtf8(d2));\n        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n\n        messageDigest = DigestUtils.getShaDigest();\n        DigestUtils.updateDigest(messageDigest, d1);\n        DigestUtils.updateDigest(messageDigest, d2);\n        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n\n        assertEquals(expectedResult, actualResult);\n    }",
        "begin_line": 355,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 77)",
            "(line 359,col 9)-(line 359,col 114)",
            "(line 361,col 9)-(line 361,col 65)",
            "(line 362,col 9)-(line 362,col 59)",
            "(line 363,col 9)-(line 363,col 59)",
            "(line 364,col 9)-(line 364,col 82)",
            "(line 366,col 9)-(line 366,col 51)",
            "(line 367,col 9)-(line 367,col 52)",
            "(line 368,col 9)-(line 368,col 52)",
            "(line 369,col 9)-(line 369,col 80)",
            "(line 371,col 9)-(line 371,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.testCorrectness()",
        "snippet": "  @Test\n  public void testCorrectness() throws Exception {\n    checkSame();\n\n    theirs.update(104);\n    ours.update(104);\n    checkSame();\n\n    checkOnBytes(new byte[] {40, 60, 97, -70}, false);\n\n    checkOnBytes(\"hello world!\".getBytes(\"UTF-8\"), false);\n\n    for (int i = 0; i < 10000; i++) {\n      byte randomBytes[] = new byte[new Random().nextInt(2048)];\n      new Random().nextBytes(randomBytes);\n      checkOnBytes(randomBytes, false);\n    }\n\n  }",
        "begin_line": 45,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 16)",
            "(line 49,col 5)-(line 49,col 23)",
            "(line 50,col 5)-(line 50,col 21)",
            "(line 51,col 5)-(line 51,col 16)",
            "(line 53,col 5)-(line 53,col 54)",
            "(line 55,col 5)-(line 55,col 58)",
            "(line 57,col 5)-(line 61,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.checkOnBytes(byte[], boolean)",
        "snippet": "  private void checkOnBytes(byte[] bytes, boolean print) {\n    theirs.reset();\n    ours.reset();\n    checkSame();\n\n    for (int i = 0; i < bytes.length; i++) {\n      ours.update(bytes[i]);\n      theirs.update(bytes[i]);\n      checkSame();\n    }\n\n    if (print) {\n      System.out.println(\"theirs:\\t\" + Long.toHexString(theirs.getValue())\n                         + \"\\nours:\\t\" + Long.toHexString(ours.getValue()));\n    }\n\n    theirs.reset();\n    ours.reset();\n\n    ours.update(bytes, 0, bytes.length);\n    theirs.update(bytes, 0, bytes.length);\n    if (print) {\n      System.out.println(\"theirs:\\t\" + Long.toHexString(theirs.getValue())\n                         + \"\\nours:\\t\" + Long.toHexString(ours.getValue()));\n    }\n\n    checkSame();\n\n    if (bytes.length >= 10) {\n      ours.update(bytes, 5, 5);\n      theirs.update(bytes, 5, 5);\n      checkSame();\n    }\n  }",
        "begin_line": 65,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 66,col 19)",
            "(line 67,col 5)-(line 67,col 17)",
            "(line 68,col 5)-(line 68,col 16)",
            "(line 70,col 5)-(line 74,col 5)",
            "(line 76,col 5)-(line 79,col 5)",
            "(line 81,col 5)-(line 81,col 19)",
            "(line 82,col 5)-(line 82,col 17)",
            "(line 84,col 5)-(line 84,col 40)",
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 89,col 5)",
            "(line 91,col 5)-(line 91,col 16)",
            "(line 93,col 5)-(line 97,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.checkSame()",
        "snippet": "  private void checkSame() {\n    Assert.assertEquals(theirs.getValue(), ours.getValue());\n  }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.Table.Table(int, int, long)",
        "snippet": "    private Table(final int nBits, final int nTables,\n        long polynomial) {\n      tables = new int[nTables][];\n      final int size = 1 << nBits;\n      for(int i = 0; i < tables.length; i++) {\n        tables[i] = new int[size];\n      }\n\n      //compute the first table\n      final int[] first = tables[0];\n      for (int i = 0; i < first.length; i++) {\n        int crc = i;\n        for (int j = 0; j < nBits; j++) {\n          if ((crc & 1) == 1) {\n            crc >>>= 1;\n            crc ^= polynomial;\n          } else {\n            crc >>>= 1;\n          }\n        }\n        first[i] = crc;\n      }\n\n      //compute the remaining tables\n      final int mask = first.length - 1;\n      for(int j = 1; j < tables.length; j++) {\n        final int[] previous = tables[j-1];\n        final int[] current = tables[j];\n        for (int i = 0; i < current.length; i++) {\n          current[i] = (previous[i] >>> nBits) ^ first[previous[i] & mask];\n        }\n      }\n    }",
        "begin_line": 111,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 113,col 7)-(line 113,col 34)",
            "(line 114,col 7)-(line 114,col 34)",
            "(line 115,col 7)-(line 117,col 7)",
            "(line 120,col 7)-(line 120,col 36)",
            "(line 121,col 7)-(line 132,col 7)",
            "(line 135,col 7)-(line 135,col 40)",
            "(line 136,col 7)-(line 142,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.Table.toStrings(java.lang.String)",
        "snippet": "    String[] toStrings(String nameformat) {\n      final String[] s = new String[tables.length];\n      for (int j = 0; j < tables.length; j++) {\n        final int[] t = tables[j];\n        final StringBuilder b = new StringBuilder();\n        b.append(String.format(\"    /* \"+ nameformat +\" */\", j));\n        for (int i = 0; i < t.length;) {\n          b.append(\"\\n    \");\n          for(int k = 0; k < 4; k++) {\n            b.append(String.format(\"0x%08X, \", t[i++]));\n          }\n        }\n        s[j] = b.toString();\n      }\n      return s;\n    }",
        "begin_line": 145,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 146,col 7)-(line 146,col 51)",
            "(line 147,col 7)-(line 158,col 7)",
            "(line 159,col 7)-(line 159,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.Table.toString()",
        "snippet": "    @Override\n    public String toString() {\n      final StringBuilder b = new StringBuilder();\n\n      final String tableFormat = String.format(\"T%d_\",\n        Integer.numberOfTrailingZeros(tables[0].length)) + \"%d\";\n      final String startFormat = \"  private static final int \"+tableFormat+\"_start = %d*256;\";\n\n      for (int j = 0; j < tables.length; j++) {\n        b.append(String.format(startFormat, j, j));\n        b.append(\"\\n\");\n      }\n\n      b.append(\"  private static final int[] T = new int[] {\");\n      for(String s : toStrings(tableFormat)) {\n        b.append(\"\\n\");\n        b.append(s);\n      }\n      b.setCharAt(b.length() - 2, '\\n');\n      b.append(\" };\\n\");\n      return b.toString();\n    }",
        "begin_line": 162,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 164,col 7)-(line 164,col 50)",
            "(line 166,col 7)-(line 167,col 64)",
            "(line 168,col 7)-(line 168,col 94)",
            "(line 170,col 7)-(line 173,col 7)",
            "(line 175,col 7)-(line 175,col 63)",
            "(line 176,col 7)-(line 179,col 7)",
            "(line 180,col 7)-(line 180,col 40)",
            "(line 181,col 7)-(line 181,col 24)",
            "(line 182,col 7)-(line 182,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.Table.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) throws FileNotFoundException {\n      if (args.length != 1) {\n        System.err.println(\"Usage: \" + Table.class.getName() +\n            \" <polynomial>\");\n        System.exit(1);\n      }\n      long polynomial = Long.parseLong(args[0], 16);\n\n      int i = 8;\n      final Table t = new Table(i, 16, polynomial);\n      final String s = t.toString();\n      System.out.println(s);\n\n      //print to a file\n      final PrintStream out = new PrintStream(\n          new FileOutputStream(\"table\" + i + \".txt\"), true);\n      try {\n        out.println(s);\n      } finally {\n        out.close();\n      }\n    }",
        "begin_line": 186,
        "end_line": 207,
        "comment": " Generate CRC-32 lookup tables ",
        "child_ranges": [
            "(line 187,col 7)-(line 191,col 7)",
            "(line 192,col 7)-(line 192,col 52)",
            "(line 194,col 7)-(line 194,col 16)",
            "(line 195,col 7)-(line 195,col 51)",
            "(line 196,col 7)-(line 196,col 36)",
            "(line 197,col 7)-(line 197,col 28)",
            "(line 200,col 7)-(line 201,col 60)",
            "(line 202,col 7)-(line 206,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.main(java.lang.String[])",
        "snippet": "    public static void main(String args[]) throws Exception {\n      printSystemProperties(System.out);\n      doBench(CRCS, System.out);\n    }",
        "begin_line": 232,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 233,col 7)-(line 233,col 40)",
            "(line 234,col 7)-(line 234,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.printCell(java.lang.String, int, java.io.PrintStream)",
        "snippet": "    private static void printCell(String s, int width, PrintStream out) {\n      final int w = s.length() > width? s.length(): width;\n      out.printf(\" %\" + w + \"s |\", s);\n    }",
        "begin_line": 237,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 238,col 7)-(line 238,col 58)",
            "(line 239,col 7)-(line 239,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.doBench(java.util.List<java.lang.Class<? extends java.util.zip.Checksum>>, java.io.PrintStream)",
        "snippet": "    private static void doBench(final List<Class<? extends Checksum>> crcs,\n        final PrintStream out) throws Exception {\n      final byte[] bytes = new byte[MAX_LEN];\n      new Random().nextBytes(bytes);\n\n      // Print header\n      out.printf(\"\\nPerformance Table (The unit is MB/sec; #T = #Theads)\\n\");\n\n      // Warm up implementations to get jit going.\n      for (Class<? extends Checksum> c : crcs) {\n        doBench(c, 1, bytes, 2);\n        doBench(c, 1, bytes, 2101);\n      }\n\n      // Test on a variety of sizes with different number of threads\n      for (int size = 32; size <= MAX_LEN; size <<= 1) {\n        doBench(crcs, bytes, size, out);\n      }\n    }",
        "begin_line": 242,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 244,col 7)-(line 244,col 45)",
            "(line 245,col 7)-(line 245,col 36)",
            "(line 248,col 7)-(line 248,col 77)",
            "(line 251,col 7)-(line 254,col 7)",
            "(line 257,col 7)-(line 259,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.doBench(java.util.List<java.lang.Class<? extends java.util.zip.Checksum>>, byte[], int, java.io.PrintStream)",
        "snippet": "    private static void doBench(final List<Class<? extends Checksum>> crcs,\n        final byte[] bytes, final int size, final PrintStream out) throws Exception {\n      final String numBytesStr = \" #Bytes \";\n      final String numThreadsStr = \"#T\";\n      final String diffStr = \"% diff\";\n\n      out.print('|');\n      printCell(numBytesStr, 0, out);\n      printCell(numThreadsStr, 0, out);\n      for (int i = 0; i < crcs.size(); i++) {\n        final Class<? extends Checksum> c = crcs.get(i);\n        out.print('|');\n        printCell(c.getSimpleName(), 8, out);\n        for(int j = 0; j < i; j++) {\n          printCell(diffStr, diffStr.length(), out);\n        }\n      }\n      out.printf(\"\\n\");\n\n      for(int numThreads = 1; numThreads <= 16; numThreads <<= 1) {\n        out.printf(\"|\");\n        printCell(String.valueOf(size), numBytesStr.length(), out);\n        printCell(String.valueOf(numThreads), numThreadsStr.length(), out);\n\n        BenchResult expected = null;\n        final List<BenchResult> previous = new ArrayList<BenchResult>();\n        for(Class<? extends Checksum> c : crcs) {\n          System.gc();\n\n          final BenchResult result = doBench(c, numThreads, bytes, size);\n          printCell(String.format(\"%9.1f\", result.mbps),\n              c.getSimpleName().length()+1, out);\n\n          //check result\n          if(c == zip) {\n            expected = result;\n          } else if (expected == null) {\n            throw new RuntimeException(\"The first class is \"\n                + c.getName() + \" but not \" + zip.getName());\n          } else if (result.value != expected.value) {\n            throw new RuntimeException(c + \" has bugs!\");\n          }\n\n          //compare result with previous\n          for(BenchResult p : previous) {\n            final double diff = (result.mbps - p.mbps) / p.mbps * 100;\n            printCell(String.format(\"%5.1f%%\", diff), diffStr.length(), out);\n          }\n          previous.add(result);\n        }\n        out.printf(\"\\n\");\n      }\n    }",
        "begin_line": 262,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 264,col 7)-(line 264,col 44)",
            "(line 265,col 7)-(line 265,col 40)",
            "(line 266,col 7)-(line 266,col 38)",
            "(line 268,col 7)-(line 268,col 21)",
            "(line 269,col 7)-(line 269,col 37)",
            "(line 270,col 7)-(line 270,col 39)",
            "(line 271,col 7)-(line 278,col 7)",
            "(line 279,col 7)-(line 279,col 23)",
            "(line 281,col 7)-(line 313,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.doBench(java.lang.Class<? extends java.util.zip.Checksum>, int, byte[], int)",
        "snippet": "    private static BenchResult doBench(Class<? extends Checksum> clazz,\n        final int numThreads, final byte[] bytes, final int size)\n            throws Exception {\n\n      final Thread[] threads = new Thread[numThreads];\n      final BenchResult[] results = new BenchResult[threads.length];\n\n      {\n        final int trials = BYTES_PER_SIZE / size;\n        final double mbProcessed = trials * size / 1024.0 / 1024.0;\n        final Constructor<? extends Checksum> ctor = clazz.getConstructor();\n\n        for(int i = 0; i < threads.length; i++) {\n          final int index = i;\n          threads[i] = new Thread() {\n            final Checksum crc = ctor.newInstance();\n\n            @Override\n            public void run() {\n              final long st = System.nanoTime();\n              crc.reset();\n              for (int i = 0; i < trials; i++) {\n                crc.update(bytes, 0, size);\n              }\n              final long et = System.nanoTime();\n              double secsElapsed = (et - st) / 1000000000.0d;\n              results[index] = new BenchResult(crc.getValue(), mbProcessed/secsElapsed);\n            }\n          };\n        }\n      }\n\n      for(int i = 0; i < threads.length; i++) {\n        threads[i].start();\n      }\n      for(int i = 0; i < threads.length; i++) {\n        threads[i].join();\n      }\n\n      final long expected = results[0].value;\n      double sum = results[0].mbps;\n      for(int i = 1; i < results.length; i++) {\n        if (results[i].value != expected) {\n          throw new AssertionError(clazz.getSimpleName() + \" results not matched.\");\n        }\n        sum += results[i].mbps;\n      }\n      return new BenchResult(expected, sum/results.length);\n    }",
        "begin_line": 316,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 320,col 7)-(line 320,col 54)",
            "(line 321,col 7)-(line 321,col 68)",
            "(line 323,col 7)-(line 346,col 7)",
            "(line 348,col 7)-(line 350,col 7)",
            "(line 351,col 7)-(line 353,col 7)",
            "(line 355,col 7)-(line 355,col 45)",
            "(line 356,col 7)-(line 356,col 35)",
            "(line 357,col 7)-(line 362,col 7)",
            "(line 363,col 7)-(line 363,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.Anonymous-41de8959-53e6-4d5e-9db9-5a2bc6168fd8.run()",
        "snippet": "            @Override\n            public void run() {\n              final long st = System.nanoTime();\n              crc.reset();\n              for (int i = 0; i < trials; i++) {\n                crc.update(bytes, 0, size);\n              }\n              final long et = System.nanoTime();\n              double secsElapsed = (et - st) / 1000000000.0d;\n              results[index] = new BenchResult(crc.getValue(), mbProcessed/secsElapsed);\n            }",
        "begin_line": 333,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 335,col 15)-(line 335,col 48)",
            "(line 336,col 15)-(line 336,col 26)",
            "(line 337,col 15)-(line 339,col 15)",
            "(line 340,col 15)-(line 340,col 48)",
            "(line 341,col 15)-(line 341,col 61)",
            "(line 342,col 15)-(line 342,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.BenchResult.BenchResult(long, double)",
        "snippet": "      BenchResult(long value, double mbps) {\n        this.value = value;\n        this.mbps = mbps;\n      }",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 27)",
            "(line 374,col 9)-(line 374,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.PureJavaCrc32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
        "signature": "org.apache.commons.codec.digest.PureJavaCrc32Test.PerformanceTest.printSystemProperties(java.io.PrintStream)",
        "snippet": "    private static void printSystemProperties(PrintStream out) {\n      final String[] names = {\n          \"java.version\",\n          \"java.runtime.name\",\n          \"java.runtime.version\",\n          \"java.vm.version\",\n          \"java.vm.vendor\",\n          \"java.vm.name\",\n          \"java.vm.specification.version\",\n          \"java.specification.version\",\n          \"os.arch\",\n          \"os.name\",\n          \"os.version\"\n      };\n      final Properties p = System.getProperties();\n      for(String n : names) {\n        out.println(n + \" = \" + p.getProperty(n));\n      }\n    }",
        "begin_line": 378,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 379,col 7)-(line 391,col 8)",
            "(line 392,col 7)-(line 392,col 50)",
            "(line 393,col 7)-(line 395,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/CryptTest.java",
        "signature": "org.apache.commons.codec.digest.CryptTest.testCrypt()",
        "snippet": "    @Test\n    public void testCrypt() {\n        assertNotNull(new Crypt()); // just for Test Coverage\n    }",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/CryptTest.java",
        "signature": "org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant()",
        "snippet": "    @Test\n    public void testDefaultCryptVariant() {\n        // If salt is null or completely omitted, a random \"$6$\" is used.\n        assertTrue(Crypt.crypt(\"secret\").startsWith(\"$6$\"));\n        assertTrue(Crypt.crypt(\"secret\", null).startsWith(\"$6$\"));\n    }",
        "begin_line": 32,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 60)",
            "(line 36,col 9)-(line 36,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/CryptTest.java",
        "signature": "org.apache.commons.codec.digest.CryptTest.testCryptWithBytes()",
        "snippet": "    @Test\n    public void testCryptWithBytes() {\n        final byte[] keyBytes = new byte[] { 'b', 'y', 't', 'e' };\n        final String hash = Crypt.crypt(keyBytes);\n        assertEquals(hash, Crypt.crypt(\"byte\", hash));\n    }",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 66)",
            "(line 42,col 9)-(line 42,col 50)",
            "(line 43,col 9)-(line 43,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/CryptTest.java",
        "signature": "org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testCryptWithEmptySalt() {\n        Crypt.crypt(\"secret\", \"\");\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n     * An empty string as salt is invalid.\n     *\n     * The C and Perl implementations return an empty string, PHP threads it\n     * as NULL. Our implementation should throw an Exception as any resulting\n     * hash would not be verifyable with other implementations of crypt().\n     ",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings()",
        "snippet": "    @Test\n    public void testApr1CryptStrings() {\n        // A random example using htpasswd\n        assertEquals(\"$apr1$TqI9WECO$LHZB2DqRlk9nObiB6vJG9.\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$TqI9WECO\"));\n        // empty data\n        assertEquals(\"$apr1$foo$P27KyD1htb4EllIPEYhqi0\", Md5Crypt.apr1Crypt(\"\", \"$apr1$foo\"));\n        // salt gets cut at dollar sign\n        assertEquals(\"$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$1234\"));\n        assertEquals(\"$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$1234$567\"));\n        assertEquals(\"$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$1234$567$890\"));\n        // salt gets cut at maximum length\n        assertEquals(\"$apr1$12345678$0lqb/6VUFP8JY/s/jTrIk0\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$1234567890123456\"));\n        assertEquals(\"$apr1$12345678$0lqb/6VUFP8JY/s/jTrIk0\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$123456789012345678\"));\n    }",
        "begin_line": 28,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 110)",
            "(line 33,col 9)-(line 33,col 94)",
            "(line 35,col 9)-(line 35,col 102)",
            "(line 36,col 9)-(line 36,col 106)",
            "(line 37,col 9)-(line 37,col 110)",
            "(line 39,col 9)-(line 39,col 118)",
            "(line 40,col 9)-(line 40,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes()",
        "snippet": "    @Test\n    public void testApr1CryptBytes() {\n        // random salt\n        final byte[] keyBytes = new byte[] { '!', 'b', 'c', '.' };\n        final String hash = Md5Crypt.apr1Crypt(keyBytes);\n        assertEquals(hash, Md5Crypt.apr1Crypt(\"!bc.\", hash));\n\n        // An empty Bytearray equals an empty String\n        assertEquals(\"$apr1$foo$P27KyD1htb4EllIPEYhqi0\", Md5Crypt.apr1Crypt(new byte[0], \"$apr1$foo\"));\n        // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n        assertEquals(\"$apr1$./$EeFrYzWWbmTyGdf4xULYc.\", Md5Crypt.apr1Crypt(\"t\\u00e4st\", \"$apr1$./$\"));\n        // ISO-8859-1 stores \"a with diaeresis\" as single byte 0xe4.\n        assertEquals(\"$apr1$./$kCwT1pY9qXAJElYG9q1QE1\", Md5Crypt.apr1Crypt(\"t\\u00e4st\".getBytes(Charsets.ISO_8859_1), \"$apr1$./$\"));\n    }",
        "begin_line": 43,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 66)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 48,col 9)-(line 48,col 61)",
            "(line 51,col 9)-(line 51,col 103)",
            "(line 53,col 9)-(line 53,col 102)",
            "(line 55,col 9)-(line 55,col 132)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall()",
        "snippet": "    @Test\n    public void testApr1CryptExplicitCall() {\n        // When explicitly called the prefix is optional\n        assertEquals(\"$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1\", Md5Crypt.apr1Crypt(\"secret\", \"1234\"));\n        // When explicitly called without salt, a random one will be used.\n        assertTrue(Md5Crypt.apr1Crypt(\"secret\".getBytes()).matches(\"^\\\\$apr1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n        assertTrue(Md5Crypt.apr1Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$apr1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n    }",
        "begin_line": 58,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 96)",
            "(line 63,col 9)-(line 63,col 110)",
            "(line 64,col 9)-(line 64,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt()",
        "snippet": "    @Test\n    public void testApr1LongSalt() {\n        assertEquals(\"$apr1$12345678$0lqb/6VUFP8JY/s/jTrIk0\", Md5Crypt.apr1Crypt(\"secret\", \"12345678901234567890\"));\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void testApr1CryptNullData() {\n        Md5Crypt.apr1Crypt((byte[]) null);\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testApr1CryptWithEmptySalt() {\n        Md5Crypt.apr1Crypt(\"secret\".getBytes(), \"\");\n    }",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt()",
        "snippet": "    @Test\n    public void testApr1CryptWithoutSalt() {\n        // Without salt, a random is generated\n        final String hash = Md5Crypt.apr1Crypt(\"secret\");\n        assertTrue(hash.matches(\"^\\\\$apr1\\\\$[a-zA-Z0-9\\\\./]{8}\\\\$[a-zA-Z0-9\\\\./]{22}$\"));\n        final String hash2 = Md5Crypt.apr1Crypt(\"secret\");\n        assertNotSame(hash, hash2);\n    }",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 57)",
            "(line 86,col 9)-(line 86,col 89)",
            "(line 87,col 9)-(line 87,col 58)",
            "(line 88,col 9)-(line 88,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Apr1CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testApr1CryptWithInvalidSalt() {\n        Md5Crypt.apr1Crypt(new byte[0], \"!\");\n    }",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.data()",
        "snippet": "    @Parameters(name = \"{0}\")\n    public static Object[] data() {\n        return MessageDigestAlgorithms.values();\n    }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.contains(java.lang.String)",
        "snippet": "    private static boolean contains(String key) {\n        for(String s : MessageDigestAlgorithms.values()) {\n            if (s.equals(key)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 57,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.checkValues()",
        "snippet": "    @BeforeClass\n    public static void checkValues() throws Exception {\n        Field [] fields = MessageDigestAlgorithms.class.getDeclaredFields();\n        boolean ok = true;\n        int psf = 0;\n        for(Field f : fields) {\n            // Only interested in public fields\n            final int modifiers = f.getModifiers();\n            if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n                psf++;\n                if (!contains((String) f.get(null))) {\n                    System.out.println(\"Not found in MessageDigestAlgorithms.values(): \"+f.getName());\n                    ok = false;\n                }\n            }\n        }\n        if (!ok) {\n            Assert.fail(\"One or more entries are missing from the MessageDigestAlgorithms.values() array\");\n        }\n        if (psf != MessageDigestAlgorithms.values().length) {\n            Assert.fail(\"One or more unexpected entries found in the MessageDigestAlgorithms.values() array\");\n        }\n    }",
        "begin_line": 60,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 76)",
            "(line 63,col 9)-(line 63,col 26)",
            "(line 64,col 9)-(line 64,col 20)",
            "(line 65,col 9)-(line 75,col 9)",
            "(line 76,col 9)-(line 78,col 9)",
            "(line 79,col 9)-(line 81,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.MessageDigestAlgorithmsTest(java.lang.String)",
        "snippet": "    public MessageDigestAlgorithmsTest(String messageDigestAlgorithm) {\n        this.messageDigestAlgorithm = messageDigestAlgorithm;\n    }",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.digestTestData()",
        "snippet": "    private byte[] digestTestData() throws IOException {\n        return DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestData());\n    }",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.getTestData()",
        "snippet": "    private byte[] getTestData() {\n        return digestUtilsTest.getTestData();\n    }",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.getTestFile()",
        "snippet": "    private File getTestFile() {\n        return digestUtilsTest.getTestFile();\n    }",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        digestUtilsTest = new DigestUtilsTest();\n        digestUtilsTest.setUp();\n    }",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 48)",
            "(line 107,col 9)-(line 107,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() throws Exception {\n        digestUtilsTest.tearDown();\n        digestUtilsTest = null;\n    }",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 113,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm()",
        "snippet": "    @Test\n    public void testAlgorithm() throws IOException, NoSuchAlgorithmException {\n        final String algorithm = messageDigestAlgorithm;\n        Assert.assertNotNull(algorithm);\n        Assert.assertFalse(algorithm.isEmpty());\n        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n        MessageDigest.getInstance(algorithm);\n    }",
        "begin_line": 116,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 56)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 48)",
            "(line 121,col 9)-(line 121,col 75)",
            "(line 122,col 9)-(line 122,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray()",
        "snippet": "    @Test\n    public void testDigestByteArray() throws IOException {\n        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n        Assert.assertArrayEquals(digestTestData(),\n                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), getTestData()));\n        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestData()));\n    }",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 75)",
            "(line 128,col 9)-(line 129,col 98)",
            "(line 130,col 9)-(line 130,col 132)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer()",
        "snippet": "    @Test\n    public void testDigestByteBuffer() throws IOException {\n        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n        Assert.assertArrayEquals(digestTestData(),\n                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), ByteBuffer.wrap(getTestData())));\n        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),ByteBuffer.wrap(getTestData())));\n    }",
        "begin_line": 133,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 75)",
            "(line 136,col 9)-(line 137,col 115)",
            "(line 138,col 9)-(line 138,col 149)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile()",
        "snippet": "    @Test\n    public void testDigestFile() throws IOException {\n        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n        Assert.assertArrayEquals(digestTestData(),\n                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), getTestFile()));\n        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestFile()));\n    }",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 75)",
            "(line 144,col 9)-(line 145,col 98)",
            "(line 146,col 9)-(line 146,col 132)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream()",
        "snippet": "    @Test\n    public void testDigestInputStream() throws IOException {\n        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n        Assert.assertArrayEquals(digestTestData(),\n                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), new ByteArrayInputStream(getTestData())));\n        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),new ByteArrayInputStream(getTestData())));\n    }",
        "begin_line": 149,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 75)",
            "(line 152,col 9)-(line 153,col 124)",
            "(line 154,col 9)-(line 154,col 158)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
        "signature": "org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest()",
        "snippet": "    @Test\n    public void testGetMessageDigest() throws IOException, NoSuchAlgorithmException {\n        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n        final MessageDigest messageDigest = DigestUtils.getDigest(messageDigestAlgorithm);\n        Assert.assertEquals(messageDigestAlgorithm, messageDigest.getAlgorithm());\n    }",
        "begin_line": 157,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 75)",
            "(line 160,col 9)-(line 160,col 90)",
            "(line 161,col 9)-(line 161,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings()",
        "snippet": "    @Test\n    public void testSha256CryptStrings() {\n        // empty data\n        assertEquals(\"$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B\", Crypt.crypt(\"\", \"$5$foo\"));\n        // salt gets cut at dollar sign\n        assertEquals(\"$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/\", Crypt.crypt(\"secret\", \"$5$45678\"));\n        assertEquals(\"$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/\", Crypt.crypt(\"secret\", \"$5$45678$012\"));\n        assertEquals(\"$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/\", Crypt.crypt(\"secret\", \"$5$45678$012$456\"));\n        // salt gets cut at maximum length\n        assertEquals(\"$5$1234567890123456$GUiFKBSTUAGvcK772ulTDPltkTOLtFvPOmp9o.9FNPB\", Crypt.crypt(\"secret\", \"$5$1234567890123456\"));\n        assertEquals(\"$5$1234567890123456$GUiFKBSTUAGvcK772ulTDPltkTOLtFvPOmp9o.9FNPB\", Crypt.crypt(\"secret\", \"$5$1234567890123456789\"));\n    }",
        "begin_line": 29,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 102)",
            "(line 34,col 9)-(line 34,col 112)",
            "(line 35,col 9)-(line 35,col 116)",
            "(line 36,col 9)-(line 36,col 120)",
            "(line 38,col 9)-(line 38,col 134)",
            "(line 39,col 9)-(line 39,col 137)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes()",
        "snippet": "    @Test\n    public void testSha256CryptBytes() {\n        // An empty Bytearray equals an empty String\n        assertEquals(\"$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B\", Crypt.crypt(new byte[0], \"$5$foo\"));\n        // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n        assertEquals(\"$5$./$iH66LwY5sTDTdHeOxq5nvNDVAxuoCcyH/y6Ptte82P8\", Crypt.crypt(\"t\\u00e4st\", \"$5$./$\"));\n        // ISO-8859-1 stores \"a with diaeresis\" as single byte 0xe4.\n        assertEquals(\"$5$./$qx5gFfCzjuWUOvsDDy.5Nor3UULPIqLVBZhgGNS0c14\", Crypt.crypt(\"t\\u00e4st\".getBytes(Charsets.ISO_8859_1), \"$5$./$\"));\n    }",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 111)",
            "(line 47,col 9)-(line 47,col 110)",
            "(line 49,col 9)-(line 49,col 140)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds()",
        "snippet": "    @Test\n    public void testSha2CryptRounds() {\n        // minimum rounds?\n        assertEquals(\"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva.\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=50$abcd$\"));\n        assertEquals(\"$5$rounds=1001$abcd$SQsJZs7KXKdd2DtklI3TY3tkD7UYA99RD0FBLm4Sk48\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=1001$abcd$\"));\n        assertEquals(\"$5$rounds=9999$abcd$Rh/8ngVh9oyuS6lL3.fsq.9xbvXJsfyKWxSjO2mPIa7\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=9999$abcd\"));\n    }",
        "begin_line": 52,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 168)",
            "(line 56,col 9)-(line 56,col 170)",
            "(line 57,col 9)-(line 57,col 169)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall()",
        "snippet": "    @Test\n    public void testSha256CryptExplicitCall() {\n        assertTrue(Sha2Crypt.sha256Crypt(\"secret\".getBytes()).matches(\"^\\\\$5\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n        assertTrue(Sha2Crypt.sha256Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$5\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n    }",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 111)",
            "(line 63,col 9)-(line 63,col 117)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptNullData()",
        "snippet": "    @Test(expected = NullPointerException.class)\n    public void testSha256CryptNullData() {\n        Sha2Crypt.sha256Crypt((byte[]) null);\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptWithEmptySalt()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSha256CryptWithEmptySalt() {\n        Sha2Crypt.sha256Crypt(\"secret\".getBytes(), \"\");\n    }",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.digest.Sha256CryptTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
        "signature": "org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize()",
        "snippet": "    @Test\n    public void testSha256LargetThanBlocksize() {\n        final byte[] buffer = new byte[200];\n        Arrays.fill(buffer, 0, 200, (byte)'A');\n        assertEquals(\"$5$abc$HbF3RRc15OwNKB/RZZ5F.1I6zsLcKXHQoSdB9Owx/Q8\", Sha2Crypt.sha256Crypt(buffer, \"$5$abc\"));\n    }",
        "begin_line": 76,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 44)",
            "(line 79,col 9)-(line 79,col 47)",
            "(line 80,col 9)-(line 80,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferStart()",
        "snippet": "    @Test\n    public void testBase64AtBufferStart() {\n        testBase64InBuffer(0, 100);\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferEnd()",
        "snippet": "    @Test\n    public void testBase64AtBufferEnd() {\n        testBase64InBuffer(100, 0);\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase64AtBufferMiddle()",
        "snippet": "    @Test\n    public void testBase64AtBufferMiddle() {\n        testBase64InBuffer(100, 100);\n    }",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase64InBuffer(int, int)",
        "snippet": "    private void testBase64InBuffer(int startPasSize, int endPadSize) {\n        final Base32 codec = new Base32();\n        for (final String[] element : BASE32_TEST_CASES) {\n            final byte[] bytes = element[0].getBytes(CHARSET_UTF8);\n            byte[] buffer = ArrayUtils.addAll(bytes, new byte[endPadSize]);\n            buffer = ArrayUtils.addAll(new byte[startPasSize], buffer);\n            assertEquals(element[1], StringUtils.newStringUtf8(codec.encode(buffer, startPasSize, bytes.length)));\n        }\n    }",
        "begin_line": 93,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 100,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase32Chunked()",
        "snippet": "    @Test\n    public void testBase32Chunked () throws Exception {\n        final Base32 codec = new Base32(20);\n        for (final String[] element : BASE32_TEST_CASES_CHUNKED) {\n                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n        }\n    }",
        "begin_line": 103,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 44)",
            "(line 106,col 9)-(line 108,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase32HexSamples()",
        "snippet": "    @Test\n    public void testBase32HexSamples() throws Exception {\n        final Base32 codec = new Base32(true);\n        for (final String[] element : BASE32HEX_TEST_CASES) {\n                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n        }\n    }",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 46)",
            "(line 114,col 9)-(line 116,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase32Samples()",
        "snippet": "    @Test\n    public void testBase32Samples() throws Exception {\n        final Base32 codec = new Base32();\n        for (final String[] element : BASE32_TEST_CASES) {\n                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n        }\n    }",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 42)",
            "(line 122,col 9)-(line 124,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding()",
        "snippet": "    @Test\n    public void testBase32SamplesNonDefaultPadding() throws Exception {\n        final Base32 codec = new Base32((byte)0x25); // '%' <=> 0x25\n\n        for (final String[] element : BASE32_PAD_TEST_CASES) {\n                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n        }\n    }",
        "begin_line": 127,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 52)",
            "(line 131,col 9)-(line 133,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testCodec200()",
        "snippet": "    @Test\n    public void testCodec200() {\n        final Base32 codec = new Base32(true, (byte)'W'); // should be allowed\n        assertNotNull(codec);\n    }",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 57)",
            "(line 139,col 9)-(line 139,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testRandomBytes()",
        "snippet": "    @Test\n    public void testRandomBytes() {\n        for (int i = 0; i < 20; i++) {\n            final Base32 codec = new Base32();\n            final byte[][] b = Base32TestData.randomData(codec, i);\n            assertEquals(\"\"+i+\" \"+codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));\n            //assertEquals(b[0],codec.decode(b[1]));\n        }\n    }",
        "begin_line": 142,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 149,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked()",
        "snippet": "    @Test\n    public void testRandomBytesChunked() {\n        for (int i = 0; i < 20; i++) {\n            final Base32 codec = new Base32(10);\n            final byte[][] b = Base32TestData.randomData(codec, i);\n            assertEquals(\"\"+i+\" \"+codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));\n            //assertEquals(b[0],codec.decode(b[1]));\n        }\n    }",
        "begin_line": 152,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 159,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testRandomBytesHex()",
        "snippet": "    @Test\n    public void testRandomBytesHex() {\n        for (int i = 0; i < 20; i++) {\n            final Base32 codec = new Base32(true);\n            final byte[][] b = Base32TestData.randomData(codec, i);\n            assertEquals(\"\"+i+\" \"+codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));\n            //assertEquals(b[0],codec.decode(b[1]));\n        }\n    }",
        "begin_line": 162,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 169,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
        "signature": "org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding()",
        "snippet": "    @Test\n    public void testSingleCharEncoding() {\n        for (int i = 0; i < 20; i++) {\n            Base32 codec = new Base32();\n            final BaseNCodec.Context context = new BaseNCodec.Context();\n            final byte unencoded[] = new byte[i];\n            final byte allInOne[] = codec.encode(unencoded);\n            codec = new Base32();\n            for (int j=0; j< unencoded.length; j++) {\n                codec.encode(unencoded, j, 1, context);\n            }\n            codec.encode(unencoded, 0, -1, context);\n            final byte singly[] = new byte[allInOne.length];\n            codec.readResults(singly, 0, 100, context);\n            if (!Arrays.equals(allInOne, singly)){\n                fail();\n            }\n        }\n    }",
        "begin_line": 172,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 189,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream)",
        "snippet": "    static byte[] streamToBytes(final InputStream in) throws IOException {\n        // new byte[7] is obviously quite slow, but helps exercise the code.\n        return streamToBytes(in, new byte[7]);\n    }",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.streamToBytes(java.io.InputStream, byte[])",
        "snippet": "    static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {\n        try {\n            int[] status = fill(buf, 0, in);\n            int size = status[SIZE_KEY];\n            int lastRead = status[LAST_READ_KEY];\n            while (lastRead != -1) {\n                buf = resizeArray(buf);\n                status = fill(buf, size, in);\n                size = status[SIZE_KEY];\n                lastRead = status[LAST_READ_KEY];\n            }\n            if (buf.length != size) {\n                final byte[] smallerBuf = new byte[size];\n                System.arraycopy(buf, 0, smallerBuf, 0, size);\n                buf = smallerBuf;\n            }\n        }\n        finally {\n            in.close();\n        }\n        return buf;\n    }",
        "begin_line": 147,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.fill(byte[], int, java.io.InputStream)",
        "snippet": "    private static int[] fill(final byte[] buf, final int offset, final InputStream in)\n            throws IOException {\n        int read = in.read(buf, offset, buf.length - offset);\n        int lastRead = read;\n        if (read == -1) {\n            read = 0;\n        }\n        while (lastRead != -1 && read + offset < buf.length) {\n            lastRead = in.read(buf, offset + read, buf.length - read - offset);\n            if (lastRead != -1) {\n                read += lastRead;\n            }\n        }\n        return new int[]{offset + read, lastRead};\n    }",
        "begin_line": 170,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 61)",
            "(line 173,col 9)-(line 173,col 28)",
            "(line 174,col 9)-(line 176,col 9)",
            "(line 177,col 9)-(line 182,col 9)",
            "(line 183,col 9)-(line 183,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.resizeArray(byte[])",
        "snippet": "    private static byte[] resizeArray(final byte[] bytes) {\n        final byte[] biggerBytes = new byte[bytes.length * 2];\n        System.arraycopy(bytes, 0, biggerBytes, 0, bytes.length);\n        return biggerBytes;\n    }",
        "begin_line": 186,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 62)",
            "(line 188,col 9)-(line 188,col 65)",
            "(line 189,col 9)-(line 189,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.randomData(int, boolean)",
        "snippet": "    static byte[][] randomData(final int size, final boolean urlSafe) {\n        final Random r = new Random();\n        final byte[] decoded = new byte[size];\n        r.nextBytes(decoded);\n        final byte[] encoded = urlSafe ? Base64.encodeBase64URLSafe(decoded) : Base64.encodeBase64(decoded);\n        return new byte[][] {decoded, encoded};\n    }",
        "begin_line": 200,
        "end_line": 206,
        "comment": "\n     * Returns an encoded and decoded copy of the same random data.\n     *\n     * @param size amount of random data to generate and encode\n     * @param urlSafe true if encoding be urlSafe\n     * @return two byte[] arrays:  [0] = decoded, [1] = encoded\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 38)",
            "(line 202,col 9)-(line 202,col 46)",
            "(line 203,col 9)-(line 203,col 29)",
            "(line 204,col 9)-(line 204,col 108)",
            "(line 205,col 9)-(line 205,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
        "signature": "org.apache.commons.codec.binary.Base64TestData.bytesContain(byte[], byte)",
        "snippet": "    static boolean bytesContain(final byte[] bytes, final byte c) {\n        for (final byte b : bytes) {\n            if (b == c) { return true; }\n        }\n        return false;\n    }",
        "begin_line": 215,
        "end_line": 220,
        "comment": "\n     * Tests the supplied byte[] array to see if it contains the specified byte c.\n     *\n     * @param bytes byte[] array to test\n     * @param c byte to look for\n     * @return true if bytes contains c, false otherwise\n     ",
        "child_ranges": [
            "(line 216,col 9)-(line 218,col 9)",
            "(line 219,col 9)-(line 219,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE()",
        "snippet": "    @Test\n    public void testCodec98NPE() throws Exception {\n        final byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n        final byte[] codec98_1024 = new byte[1024];\n        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);\n        final ByteArrayOutputStream data = new ByteArrayOutputStream(1024);\n        final Base64OutputStream stream = new Base64OutputStream(data, false);\n        stream.write(codec98_1024, 0, 1024);\n        stream.close();\n\n        final byte[] decodedBytes = data.toByteArray();\n        final String decoded = StringUtils.newStringUtf8(decodedBytes);\n        assertEquals(\n            \"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n        );\n    }",
        "begin_line": 48,
        "end_line": 63,
        "comment": "\n     * Test the Base64OutputStream implementation against the special NPE inducing input\n     * identified in the CODEC-98 bug.\n     *\n     * @throws Exception for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 85)",
            "(line 51,col 9)-(line 51,col 51)",
            "(line 52,col 9)-(line 52,col 70)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 54,col 9)-(line 54,col 78)",
            "(line 55,col 9)-(line 55,col 44)",
            "(line 56,col 9)-(line 56,col 23)",
            "(line 58,col 9)-(line 58,col 55)",
            "(line 59,col 9)-(line 59,col 71)",
            "(line 60,col 9)-(line 62,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize()",
        "snippet": "    @Test\n    public void testBase64EmptyOutputStreamMimeChunkSize() throws Exception {\n        testBase64EmptyOutputStream(BaseNCodec.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\n     * Test the Base64OutputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize()",
        "snippet": "    @Test\n    public void testBase64EmptyOutputStreamPemChunkSize() throws Exception {\n        testBase64EmptyOutputStream(BaseNCodec.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\n     * Test the Base64OutputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(int)",
        "snippet": "    private void testBase64EmptyOutputStream(final int chunkSize) throws Exception {\n        final byte[] emptyEncoded = new byte[0];\n        final byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chunkSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chunkSize, CRLF);\n    }",
        "begin_line": 88,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 48)",
            "(line 90,col 9)-(line 90,col 48)",
            "(line 91,col 9)-(line 91,col 68)",
            "(line 92,col 9)-(line 92,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk()",
        "snippet": "    @Test\n    public void testBase64OutputStreamByChunk() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[]{(byte) 0};\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, BaseNCodec.PEM_CHUNK_SIZE, LF);\n\n        // Single Line test.\n        final String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByChunk(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 101,
        "end_line": 131,
        "comment": "\n     * Test the Base64OutputStream implementation\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 74)",
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 72)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 111,col 72)",
            "(line 114,col 9)-(line 114,col 85)",
            "(line 115,col 9)-(line 115,col 41)",
            "(line 116,col 9)-(line 116,col 69)",
            "(line 119,col 9)-(line 119,col 96)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 45)",
            "(line 125,col 9)-(line 130,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte()",
        "snippet": "    @Test\n    public void testBase64OutputStreamByteByByte() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByteByByte(encoded, decoded, 76, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[]{(byte) 0};\n        testByteByByte(encoded, decoded, 76, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, 64, LF);\n\n        // Single Line test.\n        final String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByteByByte(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 139,
        "end_line": 169,
        "comment": "\n     * Test the Base64OutputStream implementation\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 74)",
            "(line 143,col 9)-(line 143,col 66)",
            "(line 144,col 9)-(line 144,col 51)",
            "(line 147,col 9)-(line 147,col 55)",
            "(line 148,col 9)-(line 148,col 39)",
            "(line 149,col 9)-(line 149,col 51)",
            "(line 152,col 9)-(line 152,col 85)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 49)",
            "(line 157,col 9)-(line 157,col 96)",
            "(line 158,col 9)-(line 158,col 55)",
            "(line 159,col 9)-(line 159,col 41)",
            "(line 160,col 9)-(line 160,col 48)",
            "(line 163,col 9)-(line 168,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk(byte[], byte[], int, byte[])",
        "snippet": "    private void testByChunk(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        OutputStream out = new Base64OutputStream(byteOut, true, chunkSize, separator);\n        out.write(decoded);\n        out.close();\n        byte[] output = byteOut.toByteArray();\n        assertTrue(\"Streaming chunked base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base64OutputStream(byteOut, false);\n        out.write(encoded);\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming chunked base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        byteOut = new ByteArrayOutputStream();\n        out = byteOut;\n        for (int i = 0; i < 10; i++) {\n            out = new Base64OutputStream(out, false);\n            out = new Base64OutputStream(out, true, chunkSize, separator);\n        }\n        out.write(decoded);\n        out.close();\n        output = byteOut.toByteArray();\n\n        assertTrue(\"Streaming chunked base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 189,
        "end_line": 219,
        "comment": "\n     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64OutputStream wraps itself in encode and decode\n     * mode over and over again.\n     *\n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param separator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 68)",
            "(line 193,col 9)-(line 193,col 87)",
            "(line 194,col 9)-(line 194,col 27)",
            "(line 195,col 9)-(line 195,col 20)",
            "(line 196,col 9)-(line 196,col 46)",
            "(line 197,col 9)-(line 197,col 86)",
            "(line 200,col 9)-(line 200,col 46)",
            "(line 201,col 9)-(line 201,col 53)",
            "(line 202,col 9)-(line 202,col 27)",
            "(line 203,col 9)-(line 203,col 20)",
            "(line 204,col 9)-(line 204,col 39)",
            "(line 205,col 9)-(line 205,col 86)",
            "(line 208,col 9)-(line 208,col 46)",
            "(line 209,col 9)-(line 209,col 22)",
            "(line 210,col 9)-(line 213,col 9)",
            "(line 214,col 9)-(line 214,col 27)",
            "(line 215,col 9)-(line 215,col 20)",
            "(line 216,col 9)-(line 216,col 39)",
            "(line 218,col 9)-(line 218,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(byte[], byte[], int, byte[])",
        "snippet": "    private void testByteByByte(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        OutputStream out = new Base64OutputStream(byteOut, true, chunkSize, separator);\n        for (final byte element : decoded) {\n            out.write(element);\n        }\n        out.close();\n        byte[] output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte base64 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base64OutputStream(byteOut, false);\n        for (final byte element : encoded) {\n            out.write(element);\n        }\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte base64 decode\", Arrays.equals(output, decoded));\n\n        // Now let's try decode with tonnes of flushes.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base64OutputStream(byteOut, false);\n        for (final byte element : encoded) {\n            out.write(element);\n            out.flush();\n        }\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte flush() base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        byteOut = new ByteArrayOutputStream();\n        out = byteOut;\n        for (int i = 0; i < 10; i++) {\n            out = new Base64OutputStream(out, false);\n            out = new Base64OutputStream(out, true, chunkSize, separator);\n        }\n        for (final byte element : decoded) {\n            out.write(element);\n        }\n        out.close();\n        output = byteOut.toByteArray();\n\n        assertTrue(\"Streaming byte-by-byte base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 239,
        "end_line": 286,
        "comment": "\n     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64OutputStream wraps itself in encode and decode\n     * mode over and over again.\n     *\n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param separator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 68)",
            "(line 243,col 9)-(line 243,col 87)",
            "(line 244,col 9)-(line 246,col 9)",
            "(line 247,col 9)-(line 247,col 20)",
            "(line 248,col 9)-(line 248,col 46)",
            "(line 249,col 9)-(line 249,col 91)",
            "(line 252,col 9)-(line 252,col 46)",
            "(line 253,col 9)-(line 253,col 53)",
            "(line 254,col 9)-(line 256,col 9)",
            "(line 257,col 9)-(line 257,col 20)",
            "(line 258,col 9)-(line 258,col 39)",
            "(line 259,col 9)-(line 259,col 91)",
            "(line 262,col 9)-(line 262,col 46)",
            "(line 263,col 9)-(line 263,col 53)",
            "(line 264,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 268,col 20)",
            "(line 269,col 9)-(line 269,col 39)",
            "(line 270,col 9)-(line 270,col 99)",
            "(line 273,col 9)-(line 273,col 46)",
            "(line 274,col 9)-(line 274,col 22)",
            "(line 275,col 9)-(line 278,col 9)",
            "(line 279,col 9)-(line 281,col 9)",
            "(line 282,col 9)-(line 282,col 20)",
            "(line 283,col 9)-(line 283,col 39)",
            "(line 285,col 9)-(line 285,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds()",
        "snippet": "    @Test\n    public void testWriteOutOfBounds() throws Exception {\n        final byte[] buf = new byte[1024];\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final Base64OutputStream out = new Base64OutputStream(bout);\n\n        try {\n            out.write(buf, -1, 1);\n            fail(\"Expected Base64OutputStream.write(buf, -1, 1) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, 1, -1);\n            fail(\"Expected Base64OutputStream.write(buf, 1, -1) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, buf.length + 1, 0);\n            fail(\"Expected Base64OutputStream.write(buf, buf.length + 1, 0) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, buf.length - 1, 2);\n            fail(\"Expected Base64OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n        out.close();\n    }",
        "begin_line": 294,
        "end_line": 328,
        "comment": "\n     * Tests Base64OutputStream.write for expected IndexOutOfBoundsException conditions.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 42)",
            "(line 297,col 9)-(line 297,col 71)",
            "(line 298,col 9)-(line 298,col 68)",
            "(line 300,col 9)-(line 305,col 9)",
            "(line 307,col 9)-(line 312,col 9)",
            "(line 314,col 9)-(line 319,col 9)",
            "(line 321,col 9)-(line 326,col 9)",
            "(line 327,col 9)-(line 327,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage()",
        "snippet": "    @Test\n    public void testWriteToNullCoverage() throws Exception {\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final Base64OutputStream out = new Base64OutputStream(bout);\n        try {\n            out.write(null, 0, 0);\n            fail(\"Expcted Base64OutputStream.write(null) to throw a NullPointerException\");\n        } catch (final NullPointerException e) {\n            // Expected\n        } finally {\n            out.close();\n        }\n    }",
        "begin_line": 336,
        "end_line": 348,
        "comment": "\n     * Tests Base64OutputStream.write(null).\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 71)",
            "(line 339,col 9)-(line 339,col 68)",
            "(line 340,col 9)-(line 347,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32TestData.java",
        "signature": "org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream)",
        "snippet": "    static byte[] streamToBytes(final InputStream in) throws IOException {\n        // new byte[7] is obviously quite slow, but helps exercise the code.\n        return streamToBytes(in, new byte[7]);\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32TestData.java",
        "signature": "org.apache.commons.codec.binary.Base32TestData.streamToBytes(java.io.InputStream, byte[])",
        "snippet": "    static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {\n        try {\n            int[] status = fill(buf, 0, in);\n            int size = status[SIZE_KEY];\n            int lastRead = status[LAST_READ_KEY];\n            while (lastRead != -1) {\n                buf = resizeArray(buf);\n                status = fill(buf, size, in);\n                size = status[SIZE_KEY];\n                lastRead = status[LAST_READ_KEY];\n            }\n            if (buf.length != size) {\n                final byte[] smallerBuf = new byte[size];\n                System.arraycopy(buf, 0, smallerBuf, 0, size);\n                buf = smallerBuf;\n            }\n        }\n        finally {\n            in.close();\n        }\n        return buf;\n    }",
        "begin_line": 49,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 68,col 9)",
            "(line 69,col 9)-(line 69,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32TestData.java",
        "signature": "org.apache.commons.codec.binary.Base32TestData.fill(byte[], int, java.io.InputStream)",
        "snippet": "    private static int[] fill(final byte[] buf, final int offset, final InputStream in)\n            throws IOException {\n        int read = in.read(buf, offset, buf.length - offset);\n        int lastRead = read;\n        if (read == -1) {\n            read = 0;\n        }\n        while (lastRead != -1 && read + offset < buf.length) {\n            lastRead = in.read(buf, offset + read, buf.length - read - offset);\n            if (lastRead != -1) {\n                read += lastRead;\n            }\n        }\n        return new int[]{offset + read, lastRead};\n    }",
        "begin_line": 72,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 28)",
            "(line 76,col 9)-(line 78,col 9)",
            "(line 79,col 9)-(line 84,col 9)",
            "(line 85,col 9)-(line 85,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32TestData.java",
        "signature": "org.apache.commons.codec.binary.Base32TestData.resizeArray(byte[])",
        "snippet": "    private static byte[] resizeArray(final byte[] bytes) {\n        final byte[] biggerBytes = new byte[bytes.length * 2];\n        System.arraycopy(bytes, 0, biggerBytes, 0, bytes.length);\n        return biggerBytes;\n    }",
        "begin_line": 88,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 62)",
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32TestData.java",
        "signature": "org.apache.commons.codec.binary.Base32TestData.randomData(org.apache.commons.codec.binary.BaseNCodec, int)",
        "snippet": "    static byte[][] randomData(final BaseNCodec codec, final int size) {\n        final Random r = new Random();\n        final byte[] decoded = new byte[size];\n        r.nextBytes(decoded);\n        final byte[] encoded = codec.encode(decoded);\n        return new byte[][] {decoded, encoded};\n    }",
        "begin_line": 102,
        "end_line": 108,
        "comment": "\n     * Returns an encoded and decoded copy of the same random data.\n     *\n     * @param codec the codec to use\n     * @param size amount of random data to generate and encode\n     * @return two byte[] arrays:  [0] = decoded, [1] = encoded\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 38)",
            "(line 104,col 9)-(line 104,col 46)",
            "(line 105,col 9)-(line 105,col 29)",
            "(line 106,col 9)-(line 106,col 53)",
            "(line 107,col 9)-(line 107,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32TestData",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32TestData.java",
        "signature": "org.apache.commons.codec.binary.Base32TestData.bytesContain(byte[], byte)",
        "snippet": "    static boolean bytesContain(final byte[] bytes, final byte c) {\n        for (final byte b : bytes) {\n            if (b == c) { return true; }\n        }\n        return false;\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "\n     * Tests the supplied byte[] array to see if it contains the specified byte c.\n     *\n     * @param bytes byte[] array to test\n     * @param c byte to look for\n     * @return true if bytes contains c, false otherwise\n     ",
        "child_ranges": [
            "(line 118,col 9)-(line 120,col 9)",
            "(line 121,col 9)-(line 121,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.setUp()",
        "snippet": "    @Before\n    public void setUp() throws Exception {\n        this.instance = new BinaryCodec();\n    }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() throws Exception {\n        this.instance = null;\n    }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException()",
        "snippet": "    @Test\n    public void testDecodeObjectException() {\n        try {\n            this.instance.decode(new Object());\n        } catch (final DecoderException e) {\n            // all is well.\n            return;\n        }\n        fail(\"Expected DecoderException\");\n    }",
        "begin_line": 86,
        "end_line": 95,
        "comment": "\n     * Tests for Object decode(Object)\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 93,col 9)",
            "(line 94,col 9)-(line 94,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject()",
        "snippet": "    @Test\n    public void testDecodeObject() throws Exception {\n        byte[] bits;\n        // With a single raw binary\n        bits = new byte[1];\n        assertDecodeObject(bits, \"00000000\");\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        assertDecodeObject(bits, \"00000001\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        assertDecodeObject(bits, \"00000011\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        assertDecodeObject(bits, \"00000111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        assertDecodeObject(bits, \"00001111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        assertDecodeObject(bits, \"00011111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        assertDecodeObject(bits, \"00111111\");\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        assertDecodeObject(bits, \"01111111\");\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"11111111\");\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000000011111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000000111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000001111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000011111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0000111111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0001111111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0011111111111111\");\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"0111111111111111\");\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        assertDecodeObject(bits, \"1111111111111111\");\n        assertDecodeObject(new byte[0], null);\n    }",
        "begin_line": 100,
        "end_line": 167,
        "comment": "\n     * Tests for Object decode(Object)\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 20)",
            "(line 104,col 9)-(line 104,col 27)",
            "(line 105,col 9)-(line 105,col 45)",
            "(line 106,col 9)-(line 106,col 27)",
            "(line 107,col 9)-(line 107,col 24)",
            "(line 108,col 9)-(line 108,col 45)",
            "(line 109,col 9)-(line 109,col 27)",
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 111,col 45)",
            "(line 112,col 9)-(line 112,col 27)",
            "(line 113,col 9)-(line 113,col 40)",
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 27)",
            "(line 116,col 9)-(line 116,col 48)",
            "(line 117,col 9)-(line 117,col 45)",
            "(line 118,col 9)-(line 118,col 27)",
            "(line 119,col 9)-(line 119,col 56)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 27)",
            "(line 122,col 9)-(line 122,col 64)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 27)",
            "(line 125,col 9)-(line 125,col 72)",
            "(line 126,col 9)-(line 126,col 45)",
            "(line 127,col 9)-(line 127,col 27)",
            "(line 128,col 9)-(line 128,col 89)",
            "(line 129,col 9)-(line 129,col 45)",
            "(line 131,col 9)-(line 131,col 27)",
            "(line 132,col 9)-(line 132,col 89)",
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 27)",
            "(line 135,col 9)-(line 135,col 24)",
            "(line 136,col 9)-(line 136,col 89)",
            "(line 137,col 9)-(line 137,col 53)",
            "(line 138,col 9)-(line 138,col 27)",
            "(line 139,col 9)-(line 139,col 32)",
            "(line 140,col 9)-(line 140,col 89)",
            "(line 141,col 9)-(line 141,col 53)",
            "(line 142,col 9)-(line 142,col 27)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 144,col 9)-(line 144,col 89)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 146,col 27)",
            "(line 147,col 9)-(line 147,col 48)",
            "(line 148,col 9)-(line 148,col 89)",
            "(line 149,col 9)-(line 149,col 53)",
            "(line 150,col 9)-(line 150,col 27)",
            "(line 151,col 9)-(line 151,col 56)",
            "(line 152,col 9)-(line 152,col 89)",
            "(line 153,col 9)-(line 153,col 53)",
            "(line 154,col 9)-(line 154,col 27)",
            "(line 155,col 9)-(line 155,col 64)",
            "(line 156,col 9)-(line 156,col 89)",
            "(line 157,col 9)-(line 157,col 53)",
            "(line 158,col 9)-(line 158,col 27)",
            "(line 159,col 9)-(line 159,col 72)",
            "(line 160,col 9)-(line 160,col 89)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 162,col 9)-(line 162,col 27)",
            "(line 163,col 9)-(line 163,col 89)",
            "(line 164,col 9)-(line 164,col 89)",
            "(line 165,col 9)-(line 165,col 53)",
            "(line 166,col 9)-(line 166,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.assertDecodeObject(byte[], java.lang.String)",
        "snippet": "    void assertDecodeObject(final byte[] bits, final String encodeMe) throws DecoderException {\n        byte[] decoded;\n        decoded = (byte[]) instance.decode(encodeMe);\n        assertEquals(new String(bits), new String(decoded));\n        if (encodeMe == null) {\n            decoded = instance.decode((byte[]) null);\n        } else {\n            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(CHARSET_UTF8));\n        }\n        assertEquals(new String(bits), new String(decoded));\n        if (encodeMe == null) {\n            decoded = (byte[]) instance.decode((char[]) null);\n        } else {\n            decoded = (byte[]) instance.decode(encodeMe.toCharArray());\n        }\n        assertEquals(new String(bits), new String(decoded));\n    }",
        "begin_line": 182,
        "end_line": 198,
        "comment": "\n     * Utility used to assert the encoded and decoded values.\n     *\n     * @param bits\n     *            the pre-encoded data\n     * @param encodeMe\n     *            data to encode and compare\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 23)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 60)",
            "(line 186,col 9)-(line 190,col 9)",
            "(line 191,col 9)-(line 191,col 60)",
            "(line 192,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 197,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray()",
        "snippet": "    @Test\n    public void testDecodeByteArray() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = instance.decode(\"00000000\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = instance.decode(\"00000001\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = instance.decode(\"00000011\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = instance.decode(\"00000111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = instance.decode(\"00001111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = instance.decode(\"00011111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = instance.decode(\"00111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = instance.decode(\"01111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"11111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000000011111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000000111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000001111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000011111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0000111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0001111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0011111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"0111111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.decode(\"1111111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n    }",
        "begin_line": 203,
        "end_line": 286,
        "comment": "\n     * Tests for byte[] decode(byte[])\n     ",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 34)",
            "(line 207,col 9)-(line 207,col 76)",
            "(line 208,col 9)-(line 208,col 60)",
            "(line 209,col 9)-(line 209,col 27)",
            "(line 210,col 9)-(line 210,col 24)",
            "(line 211,col 9)-(line 211,col 69)",
            "(line 212,col 9)-(line 212,col 60)",
            "(line 213,col 9)-(line 213,col 27)",
            "(line 214,col 9)-(line 214,col 32)",
            "(line 215,col 9)-(line 215,col 69)",
            "(line 216,col 9)-(line 216,col 60)",
            "(line 217,col 9)-(line 217,col 27)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 219,col 9)-(line 219,col 69)",
            "(line 220,col 9)-(line 220,col 60)",
            "(line 221,col 9)-(line 221,col 27)",
            "(line 222,col 9)-(line 222,col 48)",
            "(line 223,col 9)-(line 223,col 69)",
            "(line 224,col 9)-(line 224,col 60)",
            "(line 225,col 9)-(line 225,col 27)",
            "(line 226,col 9)-(line 226,col 56)",
            "(line 227,col 9)-(line 227,col 69)",
            "(line 228,col 9)-(line 228,col 60)",
            "(line 229,col 9)-(line 229,col 27)",
            "(line 230,col 9)-(line 230,col 64)",
            "(line 231,col 9)-(line 231,col 69)",
            "(line 232,col 9)-(line 232,col 60)",
            "(line 233,col 9)-(line 233,col 27)",
            "(line 234,col 9)-(line 234,col 72)",
            "(line 235,col 9)-(line 235,col 69)",
            "(line 236,col 9)-(line 236,col 60)",
            "(line 237,col 9)-(line 237,col 27)",
            "(line 238,col 9)-(line 238,col 89)",
            "(line 239,col 9)-(line 239,col 69)",
            "(line 240,col 9)-(line 240,col 60)",
            "(line 242,col 9)-(line 242,col 27)",
            "(line 243,col 9)-(line 243,col 89)",
            "(line 244,col 9)-(line 244,col 77)",
            "(line 245,col 9)-(line 245,col 60)",
            "(line 246,col 9)-(line 246,col 27)",
            "(line 247,col 9)-(line 247,col 24)",
            "(line 248,col 9)-(line 248,col 89)",
            "(line 249,col 9)-(line 249,col 77)",
            "(line 250,col 9)-(line 250,col 60)",
            "(line 251,col 9)-(line 251,col 27)",
            "(line 252,col 9)-(line 252,col 32)",
            "(line 253,col 9)-(line 253,col 89)",
            "(line 254,col 9)-(line 254,col 77)",
            "(line 255,col 9)-(line 255,col 60)",
            "(line 256,col 9)-(line 256,col 27)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 258,col 9)-(line 258,col 89)",
            "(line 259,col 9)-(line 259,col 77)",
            "(line 260,col 9)-(line 260,col 60)",
            "(line 261,col 9)-(line 261,col 27)",
            "(line 262,col 9)-(line 262,col 48)",
            "(line 263,col 9)-(line 263,col 89)",
            "(line 264,col 9)-(line 264,col 77)",
            "(line 265,col 9)-(line 265,col 60)",
            "(line 266,col 9)-(line 266,col 27)",
            "(line 267,col 9)-(line 267,col 56)",
            "(line 268,col 9)-(line 268,col 89)",
            "(line 269,col 9)-(line 269,col 77)",
            "(line 270,col 9)-(line 270,col 60)",
            "(line 271,col 9)-(line 271,col 27)",
            "(line 272,col 9)-(line 272,col 64)",
            "(line 273,col 9)-(line 273,col 89)",
            "(line 274,col 9)-(line 274,col 77)",
            "(line 275,col 9)-(line 275,col 60)",
            "(line 276,col 9)-(line 276,col 27)",
            "(line 277,col 9)-(line 277,col 72)",
            "(line 278,col 9)-(line 278,col 89)",
            "(line 279,col 9)-(line 279,col 77)",
            "(line 280,col 9)-(line 280,col 60)",
            "(line 281,col 9)-(line 281,col 27)",
            "(line 282,col 9)-(line 282,col 89)",
            "(line 283,col 9)-(line 283,col 89)",
            "(line 284,col 9)-(line 284,col 77)",
            "(line 285,col 9)-(line 285,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString()",
        "snippet": "    @Test\n    public void testToByteArrayFromString() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = instance.toByteArray(\"00000000\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = instance.toByteArray(\"00000001\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = instance.toByteArray(\"00000011\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = instance.toByteArray(\"00000111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = instance.toByteArray(\"00001111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = instance.toByteArray(\"00011111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = instance.toByteArray(\"00111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = instance.toByteArray(\"01111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"11111111\");\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000000011111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000000111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000001111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000011111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0000111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0001111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0011111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"0111111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = instance.toByteArray(\"1111111111111111\");\n        assertEquals(new String(bits), new String(decoded));\n        assertEquals(0, instance.toByteArray((String) null).length);\n    }",
        "begin_line": 296,
        "end_line": 380,
        "comment": "\n     * Tests for byte[] toByteArray(String)\n     ",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 34)",
            "(line 300,col 9)-(line 300,col 58)",
            "(line 301,col 9)-(line 301,col 60)",
            "(line 302,col 9)-(line 302,col 27)",
            "(line 303,col 9)-(line 303,col 24)",
            "(line 304,col 9)-(line 304,col 51)",
            "(line 305,col 9)-(line 305,col 60)",
            "(line 306,col 9)-(line 306,col 27)",
            "(line 307,col 9)-(line 307,col 32)",
            "(line 308,col 9)-(line 308,col 51)",
            "(line 309,col 9)-(line 309,col 60)",
            "(line 310,col 9)-(line 310,col 27)",
            "(line 311,col 9)-(line 311,col 40)",
            "(line 312,col 9)-(line 312,col 51)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 27)",
            "(line 315,col 9)-(line 315,col 48)",
            "(line 316,col 9)-(line 316,col 51)",
            "(line 317,col 9)-(line 317,col 60)",
            "(line 318,col 9)-(line 318,col 27)",
            "(line 319,col 9)-(line 319,col 56)",
            "(line 320,col 9)-(line 320,col 51)",
            "(line 321,col 9)-(line 321,col 60)",
            "(line 322,col 9)-(line 322,col 27)",
            "(line 323,col 9)-(line 323,col 64)",
            "(line 324,col 9)-(line 324,col 51)",
            "(line 325,col 9)-(line 325,col 60)",
            "(line 326,col 9)-(line 326,col 27)",
            "(line 327,col 9)-(line 327,col 72)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 60)",
            "(line 330,col 9)-(line 330,col 27)",
            "(line 331,col 9)-(line 331,col 89)",
            "(line 332,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 335,col 9)-(line 335,col 27)",
            "(line 336,col 9)-(line 336,col 89)",
            "(line 337,col 9)-(line 337,col 59)",
            "(line 338,col 9)-(line 338,col 60)",
            "(line 339,col 9)-(line 339,col 27)",
            "(line 340,col 9)-(line 340,col 24)",
            "(line 341,col 9)-(line 341,col 89)",
            "(line 342,col 9)-(line 342,col 59)",
            "(line 343,col 9)-(line 343,col 60)",
            "(line 344,col 9)-(line 344,col 27)",
            "(line 345,col 9)-(line 345,col 32)",
            "(line 346,col 9)-(line 346,col 89)",
            "(line 347,col 9)-(line 347,col 59)",
            "(line 348,col 9)-(line 348,col 60)",
            "(line 349,col 9)-(line 349,col 27)",
            "(line 350,col 9)-(line 350,col 40)",
            "(line 351,col 9)-(line 351,col 89)",
            "(line 352,col 9)-(line 352,col 59)",
            "(line 353,col 9)-(line 353,col 60)",
            "(line 354,col 9)-(line 354,col 27)",
            "(line 355,col 9)-(line 355,col 48)",
            "(line 356,col 9)-(line 356,col 89)",
            "(line 357,col 9)-(line 357,col 59)",
            "(line 358,col 9)-(line 358,col 60)",
            "(line 359,col 9)-(line 359,col 27)",
            "(line 360,col 9)-(line 360,col 56)",
            "(line 361,col 9)-(line 361,col 89)",
            "(line 362,col 9)-(line 362,col 59)",
            "(line 363,col 9)-(line 363,col 60)",
            "(line 364,col 9)-(line 364,col 27)",
            "(line 365,col 9)-(line 365,col 64)",
            "(line 366,col 9)-(line 366,col 89)",
            "(line 367,col 9)-(line 367,col 59)",
            "(line 368,col 9)-(line 368,col 60)",
            "(line 369,col 9)-(line 369,col 27)",
            "(line 370,col 9)-(line 370,col 72)",
            "(line 371,col 9)-(line 371,col 89)",
            "(line 372,col 9)-(line 372,col 59)",
            "(line 373,col 9)-(line 373,col 60)",
            "(line 374,col 9)-(line 374,col 27)",
            "(line 375,col 9)-(line 375,col 89)",
            "(line 376,col 9)-(line 376,col 89)",
            "(line 377,col 9)-(line 377,col 59)",
            "(line 378,col 9)-(line 378,col 60)",
            "(line 379,col 9)-(line 379,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray()",
        "snippet": "    @Test\n    public void testFromAsciiCharArray() {\n        assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n        assertEquals(0, BinaryCodec.fromAscii(new char[0]).length);\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = BinaryCodec.fromAscii(\"00000001\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = BinaryCodec.fromAscii(\"00000011\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = BinaryCodec.fromAscii(\"00000111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = BinaryCodec.fromAscii(\"00001111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = BinaryCodec.fromAscii(\"00011111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = BinaryCodec.fromAscii(\"00111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = BinaryCodec.fromAscii(\"01111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"11111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000011111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000001111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000011111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0001111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0011111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0111111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"1111111111111111\".toCharArray());\n        assertEquals(new String(bits), new String(decoded));\n        assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n    }",
        "begin_line": 390,
        "end_line": 476,
        "comment": "\n     * Tests for byte[] fromAscii(char[])\n     ",
        "child_ranges": [
            "(line 392,col 9)-(line 392,col 69)",
            "(line 393,col 9)-(line 393,col 67)",
            "(line 395,col 9)-(line 395,col 34)",
            "(line 396,col 9)-(line 396,col 73)",
            "(line 397,col 9)-(line 397,col 60)",
            "(line 398,col 9)-(line 398,col 27)",
            "(line 399,col 9)-(line 399,col 24)",
            "(line 400,col 9)-(line 400,col 66)",
            "(line 401,col 9)-(line 401,col 60)",
            "(line 402,col 9)-(line 402,col 27)",
            "(line 403,col 9)-(line 403,col 32)",
            "(line 404,col 9)-(line 404,col 66)",
            "(line 405,col 9)-(line 405,col 60)",
            "(line 406,col 9)-(line 406,col 27)",
            "(line 407,col 9)-(line 407,col 40)",
            "(line 408,col 9)-(line 408,col 66)",
            "(line 409,col 9)-(line 409,col 60)",
            "(line 410,col 9)-(line 410,col 27)",
            "(line 411,col 9)-(line 411,col 48)",
            "(line 412,col 9)-(line 412,col 66)",
            "(line 413,col 9)-(line 413,col 60)",
            "(line 414,col 9)-(line 414,col 27)",
            "(line 415,col 9)-(line 415,col 56)",
            "(line 416,col 9)-(line 416,col 66)",
            "(line 417,col 9)-(line 417,col 60)",
            "(line 418,col 9)-(line 418,col 27)",
            "(line 419,col 9)-(line 419,col 64)",
            "(line 420,col 9)-(line 420,col 66)",
            "(line 421,col 9)-(line 421,col 60)",
            "(line 422,col 9)-(line 422,col 27)",
            "(line 423,col 9)-(line 423,col 72)",
            "(line 424,col 9)-(line 424,col 66)",
            "(line 425,col 9)-(line 425,col 60)",
            "(line 426,col 9)-(line 426,col 27)",
            "(line 427,col 9)-(line 427,col 89)",
            "(line 428,col 9)-(line 428,col 66)",
            "(line 429,col 9)-(line 429,col 60)",
            "(line 431,col 9)-(line 431,col 27)",
            "(line 432,col 9)-(line 432,col 89)",
            "(line 433,col 9)-(line 433,col 74)",
            "(line 434,col 9)-(line 434,col 60)",
            "(line 435,col 9)-(line 435,col 27)",
            "(line 436,col 9)-(line 436,col 24)",
            "(line 437,col 9)-(line 437,col 89)",
            "(line 438,col 9)-(line 438,col 74)",
            "(line 439,col 9)-(line 439,col 60)",
            "(line 440,col 9)-(line 440,col 27)",
            "(line 441,col 9)-(line 441,col 32)",
            "(line 442,col 9)-(line 442,col 89)",
            "(line 443,col 9)-(line 443,col 74)",
            "(line 444,col 9)-(line 444,col 60)",
            "(line 445,col 9)-(line 445,col 27)",
            "(line 446,col 9)-(line 446,col 40)",
            "(line 447,col 9)-(line 447,col 89)",
            "(line 448,col 9)-(line 448,col 74)",
            "(line 449,col 9)-(line 449,col 60)",
            "(line 450,col 9)-(line 450,col 27)",
            "(line 451,col 9)-(line 451,col 48)",
            "(line 452,col 9)-(line 452,col 89)",
            "(line 453,col 9)-(line 453,col 74)",
            "(line 454,col 9)-(line 454,col 60)",
            "(line 455,col 9)-(line 455,col 27)",
            "(line 456,col 9)-(line 456,col 56)",
            "(line 457,col 9)-(line 457,col 89)",
            "(line 458,col 9)-(line 458,col 74)",
            "(line 459,col 9)-(line 459,col 60)",
            "(line 460,col 9)-(line 460,col 27)",
            "(line 461,col 9)-(line 461,col 64)",
            "(line 462,col 9)-(line 462,col 89)",
            "(line 463,col 9)-(line 463,col 74)",
            "(line 464,col 9)-(line 464,col 60)",
            "(line 465,col 9)-(line 465,col 27)",
            "(line 466,col 9)-(line 466,col 72)",
            "(line 467,col 9)-(line 467,col 89)",
            "(line 468,col 9)-(line 468,col 74)",
            "(line 469,col 9)-(line 469,col 60)",
            "(line 470,col 9)-(line 470,col 27)",
            "(line 471,col 9)-(line 471,col 89)",
            "(line 472,col 9)-(line 472,col 89)",
            "(line 473,col 9)-(line 473,col 74)",
            "(line 474,col 9)-(line 474,col 60)",
            "(line 475,col 9)-(line 475,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray()",
        "snippet": "    @Test\n    public void testFromAsciiByteArray() {\n        assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n        assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        // With a two raw binaries\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        bits = new byte[2];\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(CHARSET_UTF8));\n        assertEquals(new String(bits), new String(decoded));\n        assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n    }",
        "begin_line": 486,
        "end_line": 572,
        "comment": "\n     * Tests for byte[] fromAscii(byte[])\n     ",
        "child_ranges": [
            "(line 488,col 9)-(line 488,col 69)",
            "(line 489,col 9)-(line 489,col 67)",
            "(line 491,col 9)-(line 491,col 34)",
            "(line 492,col 9)-(line 492,col 82)",
            "(line 493,col 9)-(line 493,col 60)",
            "(line 494,col 9)-(line 494,col 27)",
            "(line 495,col 9)-(line 495,col 24)",
            "(line 496,col 9)-(line 496,col 75)",
            "(line 497,col 9)-(line 497,col 60)",
            "(line 498,col 9)-(line 498,col 27)",
            "(line 499,col 9)-(line 499,col 32)",
            "(line 500,col 9)-(line 500,col 75)",
            "(line 501,col 9)-(line 501,col 60)",
            "(line 502,col 9)-(line 502,col 27)",
            "(line 503,col 9)-(line 503,col 40)",
            "(line 504,col 9)-(line 504,col 75)",
            "(line 505,col 9)-(line 505,col 60)",
            "(line 506,col 9)-(line 506,col 27)",
            "(line 507,col 9)-(line 507,col 48)",
            "(line 508,col 9)-(line 508,col 75)",
            "(line 509,col 9)-(line 509,col 60)",
            "(line 510,col 9)-(line 510,col 27)",
            "(line 511,col 9)-(line 511,col 56)",
            "(line 512,col 9)-(line 512,col 75)",
            "(line 513,col 9)-(line 513,col 60)",
            "(line 514,col 9)-(line 514,col 27)",
            "(line 515,col 9)-(line 515,col 64)",
            "(line 516,col 9)-(line 516,col 75)",
            "(line 517,col 9)-(line 517,col 60)",
            "(line 518,col 9)-(line 518,col 27)",
            "(line 519,col 9)-(line 519,col 72)",
            "(line 520,col 9)-(line 520,col 75)",
            "(line 521,col 9)-(line 521,col 60)",
            "(line 522,col 9)-(line 522,col 27)",
            "(line 523,col 9)-(line 523,col 89)",
            "(line 524,col 9)-(line 524,col 75)",
            "(line 525,col 9)-(line 525,col 60)",
            "(line 527,col 9)-(line 527,col 27)",
            "(line 528,col 9)-(line 528,col 89)",
            "(line 529,col 9)-(line 529,col 83)",
            "(line 530,col 9)-(line 530,col 60)",
            "(line 531,col 9)-(line 531,col 27)",
            "(line 532,col 9)-(line 532,col 24)",
            "(line 533,col 9)-(line 533,col 89)",
            "(line 534,col 9)-(line 534,col 83)",
            "(line 535,col 9)-(line 535,col 60)",
            "(line 536,col 9)-(line 536,col 27)",
            "(line 537,col 9)-(line 537,col 32)",
            "(line 538,col 9)-(line 538,col 89)",
            "(line 539,col 9)-(line 539,col 83)",
            "(line 540,col 9)-(line 540,col 60)",
            "(line 541,col 9)-(line 541,col 27)",
            "(line 542,col 9)-(line 542,col 40)",
            "(line 543,col 9)-(line 543,col 89)",
            "(line 544,col 9)-(line 544,col 83)",
            "(line 545,col 9)-(line 545,col 60)",
            "(line 546,col 9)-(line 546,col 27)",
            "(line 547,col 9)-(line 547,col 48)",
            "(line 548,col 9)-(line 548,col 89)",
            "(line 549,col 9)-(line 549,col 83)",
            "(line 550,col 9)-(line 550,col 60)",
            "(line 551,col 9)-(line 551,col 27)",
            "(line 552,col 9)-(line 552,col 56)",
            "(line 553,col 9)-(line 553,col 89)",
            "(line 554,col 9)-(line 554,col 83)",
            "(line 555,col 9)-(line 555,col 60)",
            "(line 556,col 9)-(line 556,col 27)",
            "(line 557,col 9)-(line 557,col 64)",
            "(line 558,col 9)-(line 558,col 89)",
            "(line 559,col 9)-(line 559,col 83)",
            "(line 560,col 9)-(line 560,col 60)",
            "(line 561,col 9)-(line 561,col 27)",
            "(line 562,col 9)-(line 562,col 72)",
            "(line 563,col 9)-(line 563,col 89)",
            "(line 564,col 9)-(line 564,col 83)",
            "(line 565,col 9)-(line 565,col 60)",
            "(line 566,col 9)-(line 566,col 27)",
            "(line 567,col 9)-(line 567,col 89)",
            "(line 568,col 9)-(line 568,col 89)",
            "(line 569,col 9)-(line 569,col 83)",
            "(line 570,col 9)-(line 570,col 60)",
            "(line 571,col 9)-(line 571,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray()",
        "snippet": "    @Test\n    public void testEncodeByteArray() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(instance.encode(bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n        assertEquals(0, instance.encode((byte[]) null).length);\n    }",
        "begin_line": 582,
        "end_line": 698,
        "comment": "\n     * Tests for byte[] encode(byte[])\n     ",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 34)",
            "(line 586,col 9)-(line 586,col 61)",
            "(line 587,col 9)-(line 587,col 44)",
            "(line 588,col 9)-(line 588,col 27)",
            "(line 589,col 9)-(line 589,col 24)",
            "(line 590,col 9)-(line 590,col 54)",
            "(line 591,col 9)-(line 591,col 44)",
            "(line 592,col 9)-(line 592,col 27)",
            "(line 593,col 9)-(line 593,col 32)",
            "(line 594,col 9)-(line 594,col 54)",
            "(line 595,col 9)-(line 595,col 44)",
            "(line 596,col 9)-(line 596,col 27)",
            "(line 597,col 9)-(line 597,col 40)",
            "(line 598,col 9)-(line 598,col 54)",
            "(line 599,col 9)-(line 599,col 44)",
            "(line 600,col 9)-(line 600,col 27)",
            "(line 601,col 9)-(line 601,col 48)",
            "(line 602,col 9)-(line 602,col 54)",
            "(line 603,col 9)-(line 603,col 44)",
            "(line 604,col 9)-(line 604,col 27)",
            "(line 605,col 9)-(line 605,col 56)",
            "(line 606,col 9)-(line 606,col 54)",
            "(line 607,col 9)-(line 607,col 44)",
            "(line 608,col 9)-(line 608,col 27)",
            "(line 609,col 9)-(line 609,col 64)",
            "(line 610,col 9)-(line 610,col 54)",
            "(line 611,col 9)-(line 611,col 44)",
            "(line 612,col 9)-(line 612,col 27)",
            "(line 613,col 9)-(line 613,col 72)",
            "(line 614,col 9)-(line 614,col 54)",
            "(line 615,col 9)-(line 615,col 44)",
            "(line 616,col 9)-(line 616,col 27)",
            "(line 617,col 9)-(line 617,col 89)",
            "(line 618,col 9)-(line 618,col 54)",
            "(line 619,col 9)-(line 619,col 44)",
            "(line 621,col 9)-(line 621,col 27)",
            "(line 622,col 9)-(line 622,col 54)",
            "(line 623,col 9)-(line 623,col 52)",
            "(line 624,col 9)-(line 624,col 27)",
            "(line 625,col 9)-(line 625,col 24)",
            "(line 626,col 9)-(line 626,col 54)",
            "(line 627,col 9)-(line 627,col 52)",
            "(line 628,col 9)-(line 628,col 27)",
            "(line 629,col 9)-(line 629,col 32)",
            "(line 630,col 9)-(line 630,col 54)",
            "(line 631,col 9)-(line 631,col 52)",
            "(line 632,col 9)-(line 632,col 27)",
            "(line 633,col 9)-(line 633,col 40)",
            "(line 634,col 9)-(line 634,col 54)",
            "(line 635,col 9)-(line 635,col 52)",
            "(line 636,col 9)-(line 636,col 27)",
            "(line 637,col 9)-(line 637,col 48)",
            "(line 638,col 9)-(line 638,col 54)",
            "(line 639,col 9)-(line 639,col 52)",
            "(line 640,col 9)-(line 640,col 27)",
            "(line 641,col 9)-(line 641,col 56)",
            "(line 642,col 9)-(line 642,col 54)",
            "(line 643,col 9)-(line 643,col 52)",
            "(line 644,col 9)-(line 644,col 27)",
            "(line 645,col 9)-(line 645,col 64)",
            "(line 646,col 9)-(line 646,col 54)",
            "(line 647,col 9)-(line 647,col 52)",
            "(line 648,col 9)-(line 648,col 27)",
            "(line 649,col 9)-(line 649,col 72)",
            "(line 650,col 9)-(line 650,col 54)",
            "(line 651,col 9)-(line 651,col 52)",
            "(line 652,col 9)-(line 652,col 27)",
            "(line 653,col 9)-(line 653,col 89)",
            "(line 654,col 9)-(line 654,col 54)",
            "(line 655,col 9)-(line 655,col 52)",
            "(line 657,col 9)-(line 657,col 27)",
            "(line 658,col 9)-(line 658,col 24)",
            "(line 659,col 9)-(line 659,col 89)",
            "(line 660,col 9)-(line 660,col 54)",
            "(line 661,col 9)-(line 661,col 52)",
            "(line 662,col 9)-(line 662,col 27)",
            "(line 663,col 9)-(line 663,col 32)",
            "(line 664,col 9)-(line 664,col 89)",
            "(line 665,col 9)-(line 665,col 54)",
            "(line 666,col 9)-(line 666,col 52)",
            "(line 667,col 9)-(line 667,col 27)",
            "(line 668,col 9)-(line 668,col 40)",
            "(line 669,col 9)-(line 669,col 89)",
            "(line 670,col 9)-(line 670,col 54)",
            "(line 671,col 9)-(line 671,col 52)",
            "(line 672,col 9)-(line 672,col 27)",
            "(line 673,col 9)-(line 673,col 48)",
            "(line 674,col 9)-(line 674,col 89)",
            "(line 675,col 9)-(line 675,col 54)",
            "(line 676,col 9)-(line 676,col 52)",
            "(line 677,col 9)-(line 677,col 27)",
            "(line 678,col 9)-(line 678,col 56)",
            "(line 679,col 9)-(line 679,col 89)",
            "(line 680,col 9)-(line 680,col 54)",
            "(line 681,col 9)-(line 681,col 52)",
            "(line 682,col 9)-(line 682,col 27)",
            "(line 683,col 9)-(line 683,col 64)",
            "(line 684,col 9)-(line 684,col 89)",
            "(line 685,col 9)-(line 685,col 54)",
            "(line 686,col 9)-(line 686,col 52)",
            "(line 687,col 9)-(line 687,col 27)",
            "(line 688,col 9)-(line 688,col 72)",
            "(line 689,col 9)-(line 689,col 89)",
            "(line 690,col 9)-(line 690,col 54)",
            "(line 691,col 9)-(line 691,col 52)",
            "(line 692,col 9)-(line 692,col 27)",
            "(line 693,col 9)-(line 693,col 89)",
            "(line 694,col 9)-(line 694,col 89)",
            "(line 695,col 9)-(line 695,col 54)",
            "(line 696,col 9)-(line 696,col 52)",
            "(line 697,col 9)-(line 697,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes()",
        "snippet": "    @Test\n    public void testToAsciiBytes() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n        assertEquals(0, BinaryCodec.toAsciiBytes((byte[]) null).length);\n    }",
        "begin_line": 705,
        "end_line": 821,
        "comment": " ------------------------------------------------------------------------",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 34)",
            "(line 709,col 9)-(line 709,col 70)",
            "(line 710,col 9)-(line 710,col 44)",
            "(line 711,col 9)-(line 711,col 27)",
            "(line 712,col 9)-(line 712,col 24)",
            "(line 713,col 9)-(line 713,col 63)",
            "(line 714,col 9)-(line 714,col 44)",
            "(line 715,col 9)-(line 715,col 27)",
            "(line 716,col 9)-(line 716,col 32)",
            "(line 717,col 9)-(line 717,col 63)",
            "(line 718,col 9)-(line 718,col 44)",
            "(line 719,col 9)-(line 719,col 27)",
            "(line 720,col 9)-(line 720,col 40)",
            "(line 721,col 9)-(line 721,col 63)",
            "(line 722,col 9)-(line 722,col 44)",
            "(line 723,col 9)-(line 723,col 27)",
            "(line 724,col 9)-(line 724,col 48)",
            "(line 725,col 9)-(line 725,col 63)",
            "(line 726,col 9)-(line 726,col 44)",
            "(line 727,col 9)-(line 727,col 27)",
            "(line 728,col 9)-(line 728,col 56)",
            "(line 729,col 9)-(line 729,col 63)",
            "(line 730,col 9)-(line 730,col 44)",
            "(line 731,col 9)-(line 731,col 27)",
            "(line 732,col 9)-(line 732,col 64)",
            "(line 733,col 9)-(line 733,col 63)",
            "(line 734,col 9)-(line 734,col 44)",
            "(line 735,col 9)-(line 735,col 27)",
            "(line 736,col 9)-(line 736,col 72)",
            "(line 737,col 9)-(line 737,col 63)",
            "(line 738,col 9)-(line 738,col 44)",
            "(line 739,col 9)-(line 739,col 27)",
            "(line 740,col 9)-(line 740,col 89)",
            "(line 741,col 9)-(line 741,col 63)",
            "(line 742,col 9)-(line 742,col 44)",
            "(line 744,col 9)-(line 744,col 27)",
            "(line 745,col 9)-(line 745,col 63)",
            "(line 746,col 9)-(line 746,col 52)",
            "(line 747,col 9)-(line 747,col 27)",
            "(line 748,col 9)-(line 748,col 24)",
            "(line 749,col 9)-(line 749,col 63)",
            "(line 750,col 9)-(line 750,col 52)",
            "(line 751,col 9)-(line 751,col 27)",
            "(line 752,col 9)-(line 752,col 32)",
            "(line 753,col 9)-(line 753,col 63)",
            "(line 754,col 9)-(line 754,col 52)",
            "(line 755,col 9)-(line 755,col 27)",
            "(line 756,col 9)-(line 756,col 40)",
            "(line 757,col 9)-(line 757,col 63)",
            "(line 758,col 9)-(line 758,col 52)",
            "(line 759,col 9)-(line 759,col 27)",
            "(line 760,col 9)-(line 760,col 48)",
            "(line 761,col 9)-(line 761,col 63)",
            "(line 762,col 9)-(line 762,col 52)",
            "(line 763,col 9)-(line 763,col 27)",
            "(line 764,col 9)-(line 764,col 56)",
            "(line 765,col 9)-(line 765,col 63)",
            "(line 766,col 9)-(line 766,col 52)",
            "(line 767,col 9)-(line 767,col 27)",
            "(line 768,col 9)-(line 768,col 64)",
            "(line 769,col 9)-(line 769,col 63)",
            "(line 770,col 9)-(line 770,col 52)",
            "(line 771,col 9)-(line 771,col 27)",
            "(line 772,col 9)-(line 772,col 72)",
            "(line 773,col 9)-(line 773,col 63)",
            "(line 774,col 9)-(line 774,col 52)",
            "(line 775,col 9)-(line 775,col 27)",
            "(line 776,col 9)-(line 776,col 89)",
            "(line 777,col 9)-(line 777,col 63)",
            "(line 778,col 9)-(line 778,col 52)",
            "(line 780,col 9)-(line 780,col 27)",
            "(line 781,col 9)-(line 781,col 24)",
            "(line 782,col 9)-(line 782,col 89)",
            "(line 783,col 9)-(line 783,col 63)",
            "(line 784,col 9)-(line 784,col 52)",
            "(line 785,col 9)-(line 785,col 27)",
            "(line 786,col 9)-(line 786,col 32)",
            "(line 787,col 9)-(line 787,col 89)",
            "(line 788,col 9)-(line 788,col 63)",
            "(line 789,col 9)-(line 789,col 52)",
            "(line 790,col 9)-(line 790,col 27)",
            "(line 791,col 9)-(line 791,col 40)",
            "(line 792,col 9)-(line 792,col 89)",
            "(line 793,col 9)-(line 793,col 63)",
            "(line 794,col 9)-(line 794,col 52)",
            "(line 795,col 9)-(line 795,col 27)",
            "(line 796,col 9)-(line 796,col 48)",
            "(line 797,col 9)-(line 797,col 89)",
            "(line 798,col 9)-(line 798,col 63)",
            "(line 799,col 9)-(line 799,col 52)",
            "(line 800,col 9)-(line 800,col 27)",
            "(line 801,col 9)-(line 801,col 56)",
            "(line 802,col 9)-(line 802,col 89)",
            "(line 803,col 9)-(line 803,col 63)",
            "(line 804,col 9)-(line 804,col 52)",
            "(line 805,col 9)-(line 805,col 27)",
            "(line 806,col 9)-(line 806,col 64)",
            "(line 807,col 9)-(line 807,col 89)",
            "(line 808,col 9)-(line 808,col 63)",
            "(line 809,col 9)-(line 809,col 52)",
            "(line 810,col 9)-(line 810,col 27)",
            "(line 811,col 9)-(line 811,col 72)",
            "(line 812,col 9)-(line 812,col 89)",
            "(line 813,col 9)-(line 813,col 63)",
            "(line 814,col 9)-(line 814,col 52)",
            "(line 815,col 9)-(line 815,col 27)",
            "(line 816,col 9)-(line 816,col 89)",
            "(line 817,col 9)-(line 817,col 89)",
            "(line 818,col 9)-(line 818,col 63)",
            "(line 819,col 9)-(line 819,col 52)",
            "(line 820,col 9)-(line 820,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars()",
        "snippet": "    @Test\n    public void testToAsciiChars() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n        assertEquals(0, BinaryCodec.toAsciiChars((byte[]) null).length);\n    }",
        "begin_line": 828,
        "end_line": 944,
        "comment": " ------------------------------------------------------------------------",
        "child_ranges": [
            "(line 831,col 9)-(line 831,col 34)",
            "(line 832,col 9)-(line 832,col 70)",
            "(line 833,col 9)-(line 833,col 44)",
            "(line 834,col 9)-(line 834,col 27)",
            "(line 835,col 9)-(line 835,col 24)",
            "(line 836,col 9)-(line 836,col 63)",
            "(line 837,col 9)-(line 837,col 44)",
            "(line 838,col 9)-(line 838,col 27)",
            "(line 839,col 9)-(line 839,col 32)",
            "(line 840,col 9)-(line 840,col 63)",
            "(line 841,col 9)-(line 841,col 44)",
            "(line 842,col 9)-(line 842,col 27)",
            "(line 843,col 9)-(line 843,col 40)",
            "(line 844,col 9)-(line 844,col 63)",
            "(line 845,col 9)-(line 845,col 44)",
            "(line 846,col 9)-(line 846,col 27)",
            "(line 847,col 9)-(line 847,col 48)",
            "(line 848,col 9)-(line 848,col 63)",
            "(line 849,col 9)-(line 849,col 44)",
            "(line 850,col 9)-(line 850,col 27)",
            "(line 851,col 9)-(line 851,col 56)",
            "(line 852,col 9)-(line 852,col 63)",
            "(line 853,col 9)-(line 853,col 44)",
            "(line 854,col 9)-(line 854,col 27)",
            "(line 855,col 9)-(line 855,col 64)",
            "(line 856,col 9)-(line 856,col 63)",
            "(line 857,col 9)-(line 857,col 44)",
            "(line 858,col 9)-(line 858,col 27)",
            "(line 859,col 9)-(line 859,col 72)",
            "(line 860,col 9)-(line 860,col 63)",
            "(line 861,col 9)-(line 861,col 44)",
            "(line 862,col 9)-(line 862,col 27)",
            "(line 863,col 9)-(line 863,col 89)",
            "(line 864,col 9)-(line 864,col 63)",
            "(line 865,col 9)-(line 865,col 44)",
            "(line 867,col 9)-(line 867,col 27)",
            "(line 868,col 9)-(line 868,col 63)",
            "(line 869,col 9)-(line 869,col 52)",
            "(line 870,col 9)-(line 870,col 27)",
            "(line 871,col 9)-(line 871,col 24)",
            "(line 872,col 9)-(line 872,col 63)",
            "(line 873,col 9)-(line 873,col 52)",
            "(line 874,col 9)-(line 874,col 27)",
            "(line 875,col 9)-(line 875,col 32)",
            "(line 876,col 9)-(line 876,col 63)",
            "(line 877,col 9)-(line 877,col 52)",
            "(line 878,col 9)-(line 878,col 27)",
            "(line 879,col 9)-(line 879,col 40)",
            "(line 880,col 9)-(line 880,col 63)",
            "(line 881,col 9)-(line 881,col 52)",
            "(line 882,col 9)-(line 882,col 27)",
            "(line 883,col 9)-(line 883,col 48)",
            "(line 884,col 9)-(line 884,col 63)",
            "(line 885,col 9)-(line 885,col 52)",
            "(line 886,col 9)-(line 886,col 27)",
            "(line 887,col 9)-(line 887,col 56)",
            "(line 888,col 9)-(line 888,col 63)",
            "(line 889,col 9)-(line 889,col 52)",
            "(line 890,col 9)-(line 890,col 27)",
            "(line 891,col 9)-(line 891,col 64)",
            "(line 892,col 9)-(line 892,col 63)",
            "(line 893,col 9)-(line 893,col 52)",
            "(line 894,col 9)-(line 894,col 27)",
            "(line 895,col 9)-(line 895,col 72)",
            "(line 896,col 9)-(line 896,col 63)",
            "(line 897,col 9)-(line 897,col 52)",
            "(line 898,col 9)-(line 898,col 27)",
            "(line 899,col 9)-(line 899,col 89)",
            "(line 900,col 9)-(line 900,col 63)",
            "(line 901,col 9)-(line 901,col 52)",
            "(line 903,col 9)-(line 903,col 27)",
            "(line 904,col 9)-(line 904,col 24)",
            "(line 905,col 9)-(line 905,col 89)",
            "(line 906,col 9)-(line 906,col 63)",
            "(line 907,col 9)-(line 907,col 52)",
            "(line 908,col 9)-(line 908,col 27)",
            "(line 909,col 9)-(line 909,col 32)",
            "(line 910,col 9)-(line 910,col 89)",
            "(line 911,col 9)-(line 911,col 63)",
            "(line 912,col 9)-(line 912,col 52)",
            "(line 913,col 9)-(line 913,col 27)",
            "(line 914,col 9)-(line 914,col 40)",
            "(line 915,col 9)-(line 915,col 89)",
            "(line 916,col 9)-(line 916,col 63)",
            "(line 917,col 9)-(line 917,col 52)",
            "(line 918,col 9)-(line 918,col 27)",
            "(line 919,col 9)-(line 919,col 48)",
            "(line 920,col 9)-(line 920,col 89)",
            "(line 921,col 9)-(line 921,col 63)",
            "(line 922,col 9)-(line 922,col 52)",
            "(line 923,col 9)-(line 923,col 27)",
            "(line 924,col 9)-(line 924,col 56)",
            "(line 925,col 9)-(line 925,col 89)",
            "(line 926,col 9)-(line 926,col 63)",
            "(line 927,col 9)-(line 927,col 52)",
            "(line 928,col 9)-(line 928,col 27)",
            "(line 929,col 9)-(line 929,col 64)",
            "(line 930,col 9)-(line 930,col 89)",
            "(line 931,col 9)-(line 931,col 63)",
            "(line 932,col 9)-(line 932,col 52)",
            "(line 933,col 9)-(line 933,col 27)",
            "(line 934,col 9)-(line 934,col 72)",
            "(line 935,col 9)-(line 935,col 89)",
            "(line 936,col 9)-(line 936,col 63)",
            "(line 937,col 9)-(line 937,col 52)",
            "(line 938,col 9)-(line 938,col 27)",
            "(line 939,col 9)-(line 939,col 89)",
            "(line 940,col 9)-(line 940,col 89)",
            "(line 941,col 9)-(line 941,col 63)",
            "(line 942,col 9)-(line 942,col 52)",
            "(line 943,col 9)-(line 943,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString()",
        "snippet": "    @Test\n    public void testToAsciiString() {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = BinaryCodec.toAsciiString(bits);\n        assertEquals(\"1111111111111111\", l_encoded);\n    }",
        "begin_line": 954,
        "end_line": 1069,
        "comment": "\n     * Tests the toAsciiString(byte[]) method\n     ",
        "child_ranges": [
            "(line 957,col 9)-(line 957,col 34)",
            "(line 958,col 9)-(line 958,col 59)",
            "(line 959,col 9)-(line 959,col 44)",
            "(line 960,col 9)-(line 960,col 27)",
            "(line 961,col 9)-(line 961,col 24)",
            "(line 962,col 9)-(line 962,col 52)",
            "(line 963,col 9)-(line 963,col 44)",
            "(line 964,col 9)-(line 964,col 27)",
            "(line 965,col 9)-(line 965,col 32)",
            "(line 966,col 9)-(line 966,col 52)",
            "(line 967,col 9)-(line 967,col 44)",
            "(line 968,col 9)-(line 968,col 27)",
            "(line 969,col 9)-(line 969,col 40)",
            "(line 970,col 9)-(line 970,col 52)",
            "(line 971,col 9)-(line 971,col 44)",
            "(line 972,col 9)-(line 972,col 27)",
            "(line 973,col 9)-(line 973,col 48)",
            "(line 974,col 9)-(line 974,col 52)",
            "(line 975,col 9)-(line 975,col 44)",
            "(line 976,col 9)-(line 976,col 27)",
            "(line 977,col 9)-(line 977,col 56)",
            "(line 978,col 9)-(line 978,col 52)",
            "(line 979,col 9)-(line 979,col 44)",
            "(line 980,col 9)-(line 980,col 27)",
            "(line 981,col 9)-(line 981,col 64)",
            "(line 982,col 9)-(line 982,col 52)",
            "(line 983,col 9)-(line 983,col 44)",
            "(line 984,col 9)-(line 984,col 27)",
            "(line 985,col 9)-(line 985,col 72)",
            "(line 986,col 9)-(line 986,col 52)",
            "(line 987,col 9)-(line 987,col 44)",
            "(line 988,col 9)-(line 988,col 27)",
            "(line 989,col 9)-(line 989,col 89)",
            "(line 990,col 9)-(line 990,col 52)",
            "(line 991,col 9)-(line 991,col 44)",
            "(line 993,col 9)-(line 993,col 27)",
            "(line 994,col 9)-(line 994,col 52)",
            "(line 995,col 9)-(line 995,col 52)",
            "(line 996,col 9)-(line 996,col 27)",
            "(line 997,col 9)-(line 997,col 24)",
            "(line 998,col 9)-(line 998,col 52)",
            "(line 999,col 9)-(line 999,col 52)",
            "(line 1000,col 9)-(line 1000,col 27)",
            "(line 1001,col 9)-(line 1001,col 32)",
            "(line 1002,col 9)-(line 1002,col 52)",
            "(line 1003,col 9)-(line 1003,col 52)",
            "(line 1004,col 9)-(line 1004,col 27)",
            "(line 1005,col 9)-(line 1005,col 40)",
            "(line 1006,col 9)-(line 1006,col 52)",
            "(line 1007,col 9)-(line 1007,col 52)",
            "(line 1008,col 9)-(line 1008,col 27)",
            "(line 1009,col 9)-(line 1009,col 48)",
            "(line 1010,col 9)-(line 1010,col 52)",
            "(line 1011,col 9)-(line 1011,col 52)",
            "(line 1012,col 9)-(line 1012,col 27)",
            "(line 1013,col 9)-(line 1013,col 56)",
            "(line 1014,col 9)-(line 1014,col 52)",
            "(line 1015,col 9)-(line 1015,col 52)",
            "(line 1016,col 9)-(line 1016,col 27)",
            "(line 1017,col 9)-(line 1017,col 64)",
            "(line 1018,col 9)-(line 1018,col 52)",
            "(line 1019,col 9)-(line 1019,col 52)",
            "(line 1020,col 9)-(line 1020,col 27)",
            "(line 1021,col 9)-(line 1021,col 72)",
            "(line 1022,col 9)-(line 1022,col 52)",
            "(line 1023,col 9)-(line 1023,col 52)",
            "(line 1024,col 9)-(line 1024,col 27)",
            "(line 1025,col 9)-(line 1025,col 89)",
            "(line 1026,col 9)-(line 1026,col 52)",
            "(line 1027,col 9)-(line 1027,col 52)",
            "(line 1029,col 9)-(line 1029,col 27)",
            "(line 1030,col 9)-(line 1030,col 24)",
            "(line 1031,col 9)-(line 1031,col 89)",
            "(line 1032,col 9)-(line 1032,col 52)",
            "(line 1033,col 9)-(line 1033,col 52)",
            "(line 1034,col 9)-(line 1034,col 27)",
            "(line 1035,col 9)-(line 1035,col 32)",
            "(line 1036,col 9)-(line 1036,col 89)",
            "(line 1037,col 9)-(line 1037,col 52)",
            "(line 1038,col 9)-(line 1038,col 52)",
            "(line 1039,col 9)-(line 1039,col 27)",
            "(line 1040,col 9)-(line 1040,col 40)",
            "(line 1041,col 9)-(line 1041,col 89)",
            "(line 1042,col 9)-(line 1042,col 52)",
            "(line 1043,col 9)-(line 1043,col 52)",
            "(line 1044,col 9)-(line 1044,col 27)",
            "(line 1045,col 9)-(line 1045,col 48)",
            "(line 1046,col 9)-(line 1046,col 89)",
            "(line 1047,col 9)-(line 1047,col 52)",
            "(line 1048,col 9)-(line 1048,col 52)",
            "(line 1049,col 9)-(line 1049,col 27)",
            "(line 1050,col 9)-(line 1050,col 56)",
            "(line 1051,col 9)-(line 1051,col 89)",
            "(line 1052,col 9)-(line 1052,col 52)",
            "(line 1053,col 9)-(line 1053,col 52)",
            "(line 1054,col 9)-(line 1054,col 27)",
            "(line 1055,col 9)-(line 1055,col 64)",
            "(line 1056,col 9)-(line 1056,col 89)",
            "(line 1057,col 9)-(line 1057,col 52)",
            "(line 1058,col 9)-(line 1058,col 52)",
            "(line 1059,col 9)-(line 1059,col 27)",
            "(line 1060,col 9)-(line 1060,col 72)",
            "(line 1061,col 9)-(line 1061,col 89)",
            "(line 1062,col 9)-(line 1062,col 52)",
            "(line 1063,col 9)-(line 1063,col 52)",
            "(line 1064,col 9)-(line 1064,col 27)",
            "(line 1065,col 9)-(line 1065,col 89)",
            "(line 1066,col 9)-(line 1066,col 89)",
            "(line 1067,col 9)-(line 1067,col 52)",
            "(line 1068,col 9)-(line 1068,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull()",
        "snippet": "    @Test\n    public void testEncodeObjectNull() throws Exception {\n        final Object obj = new byte[0];\n        assertEquals(0, ((char[]) instance.encode(obj)).length);\n    }",
        "begin_line": 1079,
        "end_line": 1083,
        "comment": "\n     * Tests for Object encode(Object)\n     ",
        "child_ranges": [
            "(line 1081,col 9)-(line 1081,col 39)",
            "(line 1082,col 9)-(line 1082,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException()",
        "snippet": "    @Test\n    public void testEncodeObjectException() {\n        try {\n            instance.encode(\"\");\n        } catch (final EncoderException e) {\n            // all is well.\n            return;\n        }\n        fail(\"Expected EncoderException\");\n    }",
        "begin_line": 1088,
        "end_line": 1097,
        "comment": "\n     * Tests for Object encode(Object)\n     ",
        "child_ranges": [
            "(line 1090,col 9)-(line 1095,col 9)",
            "(line 1096,col 9)-(line 1096,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BinaryCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject()",
        "snippet": "    @Test\n    public void testEncodeObject() throws Exception {\n        // With a single raw binary\n        byte[] bits = new byte[1];\n        String l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000000\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000001\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000011\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00000111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00001111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00011111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"00111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"01111111\", l_encoded);\n        bits = new byte[1];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"11111111\", l_encoded);\n        // With a two raw binaries\n        bits = new byte[2];\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000000\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000001\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000011\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000000111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000001111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000011111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000000111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000001111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000011111111\", l_encoded);\n        // work on the other byte now\n        bits = new byte[2];\n        bits[1] = BIT_0;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000000111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000001111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000011111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0000111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0001111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0011111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"0111111111111111\", l_encoded);\n        bits = new byte[2];\n        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n        l_encoded = new String((char[]) instance.encode((Object) bits));\n        assertEquals(\"1111111111111111\", l_encoded);\n    }",
        "begin_line": 1102,
        "end_line": 1217,
        "comment": "\n     * Tests for Object encode(Object)\n     ",
        "child_ranges": [
            "(line 1105,col 9)-(line 1105,col 34)",
            "(line 1106,col 9)-(line 1106,col 79)",
            "(line 1107,col 9)-(line 1107,col 44)",
            "(line 1108,col 9)-(line 1108,col 27)",
            "(line 1109,col 9)-(line 1109,col 24)",
            "(line 1110,col 9)-(line 1110,col 72)",
            "(line 1111,col 9)-(line 1111,col 44)",
            "(line 1112,col 9)-(line 1112,col 27)",
            "(line 1113,col 9)-(line 1113,col 32)",
            "(line 1114,col 9)-(line 1114,col 72)",
            "(line 1115,col 9)-(line 1115,col 44)",
            "(line 1116,col 9)-(line 1116,col 27)",
            "(line 1117,col 9)-(line 1117,col 40)",
            "(line 1118,col 9)-(line 1118,col 72)",
            "(line 1119,col 9)-(line 1119,col 44)",
            "(line 1120,col 9)-(line 1120,col 27)",
            "(line 1121,col 9)-(line 1121,col 48)",
            "(line 1122,col 9)-(line 1122,col 72)",
            "(line 1123,col 9)-(line 1123,col 44)",
            "(line 1124,col 9)-(line 1124,col 27)",
            "(line 1125,col 9)-(line 1125,col 56)",
            "(line 1126,col 9)-(line 1126,col 72)",
            "(line 1127,col 9)-(line 1127,col 44)",
            "(line 1128,col 9)-(line 1128,col 27)",
            "(line 1129,col 9)-(line 1129,col 64)",
            "(line 1130,col 9)-(line 1130,col 72)",
            "(line 1131,col 9)-(line 1131,col 44)",
            "(line 1132,col 9)-(line 1132,col 27)",
            "(line 1133,col 9)-(line 1133,col 72)",
            "(line 1134,col 9)-(line 1134,col 72)",
            "(line 1135,col 9)-(line 1135,col 44)",
            "(line 1136,col 9)-(line 1136,col 27)",
            "(line 1137,col 9)-(line 1137,col 89)",
            "(line 1138,col 9)-(line 1138,col 72)",
            "(line 1139,col 9)-(line 1139,col 44)",
            "(line 1141,col 9)-(line 1141,col 27)",
            "(line 1142,col 9)-(line 1142,col 72)",
            "(line 1143,col 9)-(line 1143,col 52)",
            "(line 1144,col 9)-(line 1144,col 27)",
            "(line 1145,col 9)-(line 1145,col 24)",
            "(line 1146,col 9)-(line 1146,col 72)",
            "(line 1147,col 9)-(line 1147,col 52)",
            "(line 1148,col 9)-(line 1148,col 27)",
            "(line 1149,col 9)-(line 1149,col 32)",
            "(line 1150,col 9)-(line 1150,col 72)",
            "(line 1151,col 9)-(line 1151,col 52)",
            "(line 1152,col 9)-(line 1152,col 27)",
            "(line 1153,col 9)-(line 1153,col 40)",
            "(line 1154,col 9)-(line 1154,col 72)",
            "(line 1155,col 9)-(line 1155,col 52)",
            "(line 1156,col 9)-(line 1156,col 27)",
            "(line 1157,col 9)-(line 1157,col 48)",
            "(line 1158,col 9)-(line 1158,col 72)",
            "(line 1159,col 9)-(line 1159,col 52)",
            "(line 1160,col 9)-(line 1160,col 27)",
            "(line 1161,col 9)-(line 1161,col 56)",
            "(line 1162,col 9)-(line 1162,col 72)",
            "(line 1163,col 9)-(line 1163,col 52)",
            "(line 1164,col 9)-(line 1164,col 27)",
            "(line 1165,col 9)-(line 1165,col 64)",
            "(line 1166,col 9)-(line 1166,col 72)",
            "(line 1167,col 9)-(line 1167,col 52)",
            "(line 1168,col 9)-(line 1168,col 27)",
            "(line 1169,col 9)-(line 1169,col 72)",
            "(line 1170,col 9)-(line 1170,col 72)",
            "(line 1171,col 9)-(line 1171,col 52)",
            "(line 1172,col 9)-(line 1172,col 27)",
            "(line 1173,col 9)-(line 1173,col 89)",
            "(line 1174,col 9)-(line 1174,col 72)",
            "(line 1175,col 9)-(line 1175,col 52)",
            "(line 1177,col 9)-(line 1177,col 27)",
            "(line 1178,col 9)-(line 1178,col 24)",
            "(line 1179,col 9)-(line 1179,col 89)",
            "(line 1180,col 9)-(line 1180,col 72)",
            "(line 1181,col 9)-(line 1181,col 52)",
            "(line 1182,col 9)-(line 1182,col 27)",
            "(line 1183,col 9)-(line 1183,col 32)",
            "(line 1184,col 9)-(line 1184,col 89)",
            "(line 1185,col 9)-(line 1185,col 72)",
            "(line 1186,col 9)-(line 1186,col 52)",
            "(line 1187,col 9)-(line 1187,col 27)",
            "(line 1188,col 9)-(line 1188,col 40)",
            "(line 1189,col 9)-(line 1189,col 89)",
            "(line 1190,col 9)-(line 1190,col 72)",
            "(line 1191,col 9)-(line 1191,col 52)",
            "(line 1192,col 9)-(line 1192,col 27)",
            "(line 1193,col 9)-(line 1193,col 48)",
            "(line 1194,col 9)-(line 1194,col 89)",
            "(line 1195,col 9)-(line 1195,col 72)",
            "(line 1196,col 9)-(line 1196,col 52)",
            "(line 1197,col 9)-(line 1197,col 27)",
            "(line 1198,col 9)-(line 1198,col 56)",
            "(line 1199,col 9)-(line 1199,col 89)",
            "(line 1200,col 9)-(line 1200,col 72)",
            "(line 1201,col 9)-(line 1201,col 52)",
            "(line 1202,col 9)-(line 1202,col 27)",
            "(line 1203,col 9)-(line 1203,col 64)",
            "(line 1204,col 9)-(line 1204,col 89)",
            "(line 1205,col 9)-(line 1205,col 72)",
            "(line 1206,col 9)-(line 1206,col 52)",
            "(line 1207,col 9)-(line 1207,col 27)",
            "(line 1208,col 9)-(line 1208,col 72)",
            "(line 1209,col 9)-(line 1209,col 89)",
            "(line 1210,col 9)-(line 1210,col 72)",
            "(line 1211,col 9)-(line 1211,col 52)",
            "(line 1212,col 9)-(line 1212,col 27)",
            "(line 1213,col 9)-(line 1213,col 89)",
            "(line 1214,col 9)-(line 1214,col 89)",
            "(line 1215,col 9)-(line 1215,col 72)",
            "(line 1216,col 9)-(line 1216,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130()",
        "snippet": "    @Test\n    public void testCodec130() throws IOException {\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        final Base64OutputStream base64os = new Base64OutputStream(bos);\n\n        base64os.write(StringUtils.getBytesUtf8(STRING_FIXTURE));\n        base64os.close();\n\n        final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n        final Base64InputStream ins = new Base64InputStream(bis);\n\n        // we skip the first character read from the reader\n        ins.skip(1);\n        final byte[] decodedBytes = Base64TestData.streamToBytes(ins, new byte[64]);\n        final String str = StringUtils.newStringUtf8(decodedBytes);\n\n        assertEquals(STRING_FIXTURE.substring(1), str);\n    }",
        "begin_line": 57,
        "end_line": 74,
        "comment": "\n     * Tests the problem reported in CODEC-130. Missing / wrong implementation of skip.\n     ",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 70)",
            "(line 60,col 9)-(line 60,col 72)",
            "(line 62,col 9)-(line 62,col 65)",
            "(line 63,col 9)-(line 63,col 25)",
            "(line 65,col 9)-(line 65,col 85)",
            "(line 66,col 9)-(line 66,col 65)",
            "(line 69,col 9)-(line 69,col 20)",
            "(line 70,col 9)-(line 70,col 84)",
            "(line 71,col 9)-(line 71,col 67)",
            "(line 73,col 9)-(line 73,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105()",
        "snippet": "    @Test\n    public void testCodec105() throws IOException {\n        final Base64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);\n        try {\n            for (int i = 0; i < 5; i++) {\n                in.read();\n            }\n        } finally {\n            in.close();\n        }\n    }",
        "begin_line": 79,
        "end_line": 89,
        "comment": "\n     * Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 106)",
            "(line 82,col 9)-(line 88,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101()",
        "snippet": "    @Test\n    public void testCodec101() throws Exception {\n        final byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);\n        final ByteArrayInputStream bais = new ByteArrayInputStream(codec101);\n        final Base64InputStream in = new Base64InputStream(bais);\n        final byte[] result = new byte[8192];\n        int c = in.read(result);\n        assertTrue(\"Codec101: First read successful [c=\" + c + \"]\", c > 0);\n\n        c = in.read(result);\n        assertTrue(\"Codec101: Second read should report end-of-stream [c=\" + c + \"]\", c < 0);\n        in.close();\n    }",
        "begin_line": 97,
        "end_line": 109,
        "comment": "\n     * Test for the CODEC-101 bug: InputStream.read(byte[]) should never return 0 because Java's builtin InputStreamReader hates that.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 97)",
            "(line 100,col 9)-(line 100,col 77)",
            "(line 101,col 9)-(line 101,col 65)",
            "(line 102,col 9)-(line 102,col 45)",
            "(line 103,col 9)-(line 103,col 32)",
            "(line 104,col 9)-(line 104,col 75)",
            "(line 106,col 9)-(line 106,col 28)",
            "(line 107,col 9)-(line 107,col 93)",
            "(line 108,col 9)-(line 108,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader()",
        "snippet": "    @Test\n    public void testInputStreamReader() throws Exception {\n        final byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);\n        final ByteArrayInputStream bais = new ByteArrayInputStream(codec101);\n        final Base64InputStream in = new Base64InputStream(bais);\n        final InputStreamReader isr = new InputStreamReader(in);\n        final BufferedReader br = new BufferedReader(isr);\n        final String line = br.readLine();\n        assertNotNull(\"Codec101:  InputStreamReader works!\", line);\n        br.close();\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Another test for the CODEC-101 bug: In commons-codec-1.4 this test shows InputStreamReader explicitly hating an\n     * InputStream.read(byte[]) return of 0:\n     *\n     * java.io.IOException: Underlying input stream returned zero bytes at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268) at\n     * sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306) at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158) at\n     * java.io.InputStreamReader.read(InputStreamReader.java:167) at java.io.BufferedReader.fill(BufferedReader.java:136) at\n     * java.io.BufferedReader.readLine(BufferedReader.java:299) at java.io.BufferedReader.readLine(BufferedReader.java:362) at\n     * org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(Base64InputStreamTest.java:75)\n     *\n     * But in commons-codec-1.5 it's fixed. :-)\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 97)",
            "(line 129,col 9)-(line 129,col 77)",
            "(line 130,col 9)-(line 130,col 65)",
            "(line 131,col 9)-(line 131,col 64)",
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 42)",
            "(line 134,col 9)-(line 134,col 67)",
            "(line 135,col 9)-(line 135,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE()",
        "snippet": "    @Test\n    public void testCodec98NPE() throws Exception {\n        final byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n        final ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n        final Base64InputStream stream = new Base64InputStream(data);\n\n        // This line causes an NPE in commons-codec-1.4.jar:\n        final byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n\n        final String decoded = StringUtils.newStringUtf8(decodedBytes);\n        assertEquals(\"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded);\n    }",
        "begin_line": 144,
        "end_line": 155,
        "comment": "\n     * Test the Base64InputStream implementation against the special NPE inducing input identified in the CODEC-98 bug.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 85)",
            "(line 147,col 9)-(line 147,col 76)",
            "(line 148,col 9)-(line 148,col 69)",
            "(line 151,col 9)-(line 151,col 89)",
            "(line 153,col 9)-(line 153,col 71)",
            "(line 154,col 9)-(line 154,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable()",
        "snippet": "    @Test\n    public void testAvailable() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        final Base64InputStream b64stream = new Base64InputStream(ins);\n        assertEquals(1, b64stream.available());\n        assertEquals(6, b64stream.skip(10));\n        // End of stream reached\n        assertEquals(0, b64stream.available());\n        assertEquals(-1, b64stream.read());\n        assertEquals(-1, b64stream.read());\n        assertEquals(0, b64stream.available());\n        b64stream.close();\n    }",
        "begin_line": 162,
        "end_line": 174,
        "comment": "\n     * Tests skipping past the end of a stream.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 101)",
            "(line 165,col 9)-(line 165,col 71)",
            "(line 166,col 9)-(line 166,col 47)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 169,col 9)-(line 169,col 47)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 43)",
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 173,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize()",
        "snippet": "    @Test\n    public void testBase64EmptyInputStreamMimeChuckSize() throws Exception {\n        testBase64EmptyInputStream(BaseNCodec.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 182,
        "end_line": 185,
        "comment": "\n     * Tests the Base64InputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize()",
        "snippet": "    @Test\n    public void testBase64EmptyInputStreamPemChuckSize() throws Exception {\n        testBase64EmptyInputStream(BaseNCodec.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 193,
        "end_line": 196,
        "comment": "\n     * Tests the Base64InputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(int)",
        "snippet": "    private void testBase64EmptyInputStream(final int chuckSize) throws Exception {\n        final byte[] emptyEncoded = new byte[0];\n        final byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }",
        "begin_line": 198,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 48)",
            "(line 200,col 9)-(line 200,col 48)",
            "(line 201,col 9)-(line 201,col 68)",
            "(line 202,col 9)-(line 202,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk()",
        "snippet": "    @Test\n    public void testBase64InputStreamByChunk() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[] { (byte) 0 };\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, BaseNCodec.PEM_CHUNK_SIZE, LF);\n\n        // Single Line test.\n        final String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByChunk(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByChunk(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 211,
        "end_line": 241,
        "comment": "\n     * Tests the Base64InputStream implementation.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 74)",
            "(line 215,col 9)-(line 215,col 66)",
            "(line 216,col 9)-(line 216,col 72)",
            "(line 219,col 9)-(line 219,col 55)",
            "(line 220,col 9)-(line 220,col 42)",
            "(line 221,col 9)-(line 221,col 72)",
            "(line 224,col 9)-(line 224,col 85)",
            "(line 225,col 9)-(line 225,col 41)",
            "(line 226,col 9)-(line 226,col 69)",
            "(line 229,col 9)-(line 229,col 96)",
            "(line 230,col 9)-(line 230,col 55)",
            "(line 231,col 9)-(line 231,col 41)",
            "(line 232,col 9)-(line 232,col 45)",
            "(line 235,col 9)-(line 240,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte()",
        "snippet": "    @Test\n    public void testBase64InputStreamByteByByte() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n        byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n        decoded = new byte[] { (byte) 0 };\n        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // OpenSSL interop test.\n        encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, BaseNCodec.PEM_CHUNK_SIZE, LF);\n\n        // Single Line test.\n        final String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        encoded = StringUtils.getBytesUtf8(singleLine);\n        decoded = Base64TestData.DECODED;\n        testByteByByte(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base64TestData.randomData(i, false);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByteByByte(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 249,
        "end_line": 279,
        "comment": "\n     * Tests the Base64InputStream implementation.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 252,col 9)-(line 252,col 74)",
            "(line 253,col 9)-(line 253,col 66)",
            "(line 254,col 9)-(line 254,col 75)",
            "(line 257,col 9)-(line 257,col 55)",
            "(line 258,col 9)-(line 258,col 42)",
            "(line 259,col 9)-(line 259,col 75)",
            "(line 262,col 9)-(line 262,col 85)",
            "(line 263,col 9)-(line 263,col 41)",
            "(line 264,col 9)-(line 264,col 72)",
            "(line 267,col 9)-(line 267,col 96)",
            "(line 268,col 9)-(line 268,col 55)",
            "(line 269,col 9)-(line 269,col 41)",
            "(line 270,col 9)-(line 270,col 48)",
            "(line 273,col 9)-(line 278,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk(byte[], byte[], int, byte[])",
        "snippet": "    private void testByChunk(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        InputStream in;\n        in = new Base64InputStream(new ByteArrayInputStream(decoded), true, chunkSize, separator);\n        byte[] output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        in.close();\n\n        // Now let's try decode.\n        in = new Base64InputStream(new ByteArrayInputStream(encoded));\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, separator);\n            in = new Base64InputStream(in, false);\n        }\n        output = Base64TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n        in.close();\n    }",
        "begin_line": 299,
        "end_line": 332,
        "comment": "\n     * Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]--> encoded 3. decoded\n     * ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64InputStream wraps itself in encode and decode mode over and over\n     * again.\n     *\n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param separator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 23)",
            "(line 303,col 9)-(line 303,col 98)",
            "(line 304,col 9)-(line 304,col 57)",
            "(line 306,col 9)-(line 306,col 43)",
            "(line 307,col 9)-(line 307,col 49)",
            "(line 308,col 9)-(line 308,col 78)",
            "(line 310,col 9)-(line 310,col 19)",
            "(line 313,col 9)-(line 313,col 70)",
            "(line 314,col 9)-(line 314,col 50)",
            "(line 316,col 9)-(line 316,col 43)",
            "(line 317,col 9)-(line 317,col 49)",
            "(line 318,col 9)-(line 318,col 78)",
            "(line 321,col 9)-(line 321,col 47)",
            "(line 322,col 9)-(line 325,col 9)",
            "(line 326,col 9)-(line 326,col 50)",
            "(line 328,col 9)-(line 328,col 43)",
            "(line 329,col 9)-(line 329,col 49)",
            "(line 330,col 9)-(line 330,col 87)",
            "(line 331,col 9)-(line 331,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(byte[], byte[], int, byte[])",
        "snippet": "    private void testByteByByte(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        InputStream in;\n        in = new Base64InputStream(new ByteArrayInputStream(decoded), true, chunkSize, separator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 encode\", Arrays.equals(output, encoded));\n\n        in.close();\n        // Now let's try decode.\n        in = new Base64InputStream(new ByteArrayInputStream(encoded));\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 decode\", Arrays.equals(output, decoded));\n\n        in.close();\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base64InputStream(in, true, chunkSize, separator);\n            in = new Base64InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base64 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n        in.close();\n    }",
        "begin_line": 352,
        "end_line": 395,
        "comment": "\n     * Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]--> encoded 3. decoded\n     * ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64InputStream wraps itself in encode and decode mode over and over\n     * again.\n     *\n     * @param encoded\n     *            base64 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base64 encoded data.\n     * @param separator\n     *            Line separator in the base64 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base64 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 23)",
            "(line 356,col 9)-(line 356,col 98)",
            "(line 357,col 9)-(line 357,col 49)",
            "(line 358,col 9)-(line 360,col 9)",
            "(line 362,col 9)-(line 362,col 43)",
            "(line 363,col 9)-(line 363,col 49)",
            "(line 364,col 9)-(line 364,col 78)",
            "(line 366,col 9)-(line 366,col 19)",
            "(line 368,col 9)-(line 368,col 70)",
            "(line 369,col 9)-(line 369,col 42)",
            "(line 370,col 9)-(line 372,col 9)",
            "(line 374,col 9)-(line 374,col 43)",
            "(line 375,col 9)-(line 375,col 49)",
            "(line 376,col 9)-(line 376,col 78)",
            "(line 378,col 9)-(line 378,col 19)",
            "(line 381,col 9)-(line 381,col 47)",
            "(line 382,col 9)-(line 385,col 9)",
            "(line 386,col 9)-(line 386,col 42)",
            "(line 387,col 9)-(line 389,col 9)",
            "(line 391,col 9)-(line 391,col 43)",
            "(line 392,col 9)-(line 392,col 49)",
            "(line 393,col 9)-(line 393,col 87)",
            "(line 394,col 9)-(line 394,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported()",
        "snippet": "    @Test\n    public void testMarkSupported() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n        // Always returns false for now.\n        assertFalse(\"Base64InputStream.markSupported() is false\", in.markSupported());\n        in.close();\n    }",
        "begin_line": 402,
        "end_line": 410,
        "comment": "\n     * Tests markSupported.\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 72)",
            "(line 405,col 9)-(line 405,col 75)",
            "(line 406,col 9)-(line 406,col 97)",
            "(line 408,col 9)-(line 408,col 86)",
            "(line 409,col 9)-(line 409,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testRead0()",
        "snippet": "    @Test\n    public void testRead0() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        final byte[] buf = new byte[1024];\n        int bytesRead = 0;\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n        bytesRead = in.read(buf, 0, 0);\n        assertEquals(\"Base64InputStream.read(buf, 0, 0) returns 0\", 0, bytesRead);\n        in.close();\n    }",
        "begin_line": 417,
        "end_line": 427,
        "comment": "\n     * Tests read returning 0\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 419,col 9)-(line 419,col 72)",
            "(line 420,col 9)-(line 420,col 42)",
            "(line 421,col 9)-(line 421,col 26)",
            "(line 422,col 9)-(line 422,col 75)",
            "(line 423,col 9)-(line 423,col 97)",
            "(line 424,col 9)-(line 424,col 39)",
            "(line 425,col 9)-(line 425,col 82)",
            "(line 426,col 9)-(line 426,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull()",
        "snippet": "    @Test\n    public void testReadNull() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n        try {\n            in.read(null, 0, 0);\n            fail(\"Base64InputStream.read(null, 0, 0) to throw a NullPointerException\");\n        } catch (final NullPointerException e) {\n            // Expected\n        }\n        in.close();\n    }",
        "begin_line": 435,
        "end_line": 447,
        "comment": "\n     * Tests read with null.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 72)",
            "(line 438,col 9)-(line 438,col 75)",
            "(line 439,col 9)-(line 439,col 97)",
            "(line 440,col 9)-(line 445,col 9)",
            "(line 446,col 9)-(line 446,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds()",
        "snippet": "    @Test\n    public void testReadOutOfBounds() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        final byte[] buf = new byte[1024];\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n\n        try {\n            in.read(buf, -1, 0);\n            fail(\"Expected Base64InputStream.read(buf, -1, 0) to throw IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, 0, -1);\n            fail(\"Expected Base64InputStream.read(buf, 0, -1) to throw IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, buf.length + 1, 0);\n            fail(\"Base64InputStream.read(buf, buf.length + 1, 0) throws IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, buf.length - 1, 2);\n            fail(\"Base64InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n        in.close();\n    }",
        "begin_line": 454,
        "end_line": 489,
        "comment": "\n     * Tests read throwing IndexOutOfBoundsException\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 72)",
            "(line 457,col 9)-(line 457,col 42)",
            "(line 458,col 9)-(line 458,col 75)",
            "(line 459,col 9)-(line 459,col 97)",
            "(line 461,col 9)-(line 466,col 9)",
            "(line 468,col 9)-(line 473,col 9)",
            "(line 475,col 9)-(line 480,col 9)",
            "(line 482,col 9)-(line 487,col 9)",
            "(line 488,col 9)-(line 488,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig()",
        "snippet": "    @Test\n    public void testSkipBig() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        final Base64InputStream b64stream = new Base64InputStream(ins);\n        assertEquals(6, b64stream.skip(Integer.MAX_VALUE));\n        // End of stream reached\n        assertEquals(-1, b64stream.read());\n        assertEquals(-1, b64stream.read());\n        b64stream.close();\n    }",
        "begin_line": 496,
        "end_line": 505,
        "comment": "\n     * Tests skipping number of characters larger than the internal buffer.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 101)",
            "(line 499,col 9)-(line 499,col 71)",
            "(line 500,col 9)-(line 500,col 59)",
            "(line 502,col 9)-(line 502,col 43)",
            "(line 503,col 9)-(line 503,col 43)",
            "(line 504,col 9)-(line 504,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone()",
        "snippet": "    @Test\n    public void testSkipNone() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        final Base64InputStream b64stream = new Base64InputStream(ins);\n        final byte[] actualBytes = new byte[6];\n        assertEquals(0, b64stream.skip(0));\n        b64stream.read(actualBytes, 0, actualBytes.length);\n        assertArrayEquals(actualBytes, new byte[] { 0, 0, 0, (byte) 255, (byte) 255, (byte) 255 });\n        // End of stream reached\n        assertEquals(-1, b64stream.read());\n        b64stream.close();\n    }",
        "begin_line": 512,
        "end_line": 523,
        "comment": "\n     * Tests skipping as a noop\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 101)",
            "(line 515,col 9)-(line 515,col 71)",
            "(line 516,col 9)-(line 516,col 47)",
            "(line 517,col 9)-(line 517,col 43)",
            "(line 518,col 9)-(line 518,col 59)",
            "(line 519,col 9)-(line 519,col 99)",
            "(line 521,col 9)-(line 521,col 43)",
            "(line 522,col 9)-(line 522,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd()",
        "snippet": "    @Test\n    public void testSkipPastEnd() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        final Base64InputStream b64stream = new Base64InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(6, b64stream.skip(10));\n        // End of stream reached\n        assertEquals(-1, b64stream.read());\n        assertEquals(-1, b64stream.read());\n        b64stream.close();\n    }",
        "begin_line": 530,
        "end_line": 540,
        "comment": "\n     * Tests skipping past the end of a stream.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 532,col 9)-(line 532,col 101)",
            "(line 533,col 9)-(line 533,col 71)",
            "(line 535,col 9)-(line 535,col 44)",
            "(line 537,col 9)-(line 537,col 43)",
            "(line 538,col 9)-(line 538,col 43)",
            "(line 539,col 9)-(line 539,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd()",
        "snippet": "    @Test\n    public void testSkipToEnd() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        final Base64InputStream b64stream = new Base64InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(6, b64stream.skip(6));\n        // End of stream reached\n        assertEquals(-1, b64stream.read());\n        assertEquals(-1, b64stream.read());\n        b64stream.close();\n    }",
        "begin_line": 547,
        "end_line": 557,
        "comment": "\n     * Tests skipping to the end of a stream.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 549,col 9)-(line 549,col 101)",
            "(line 550,col 9)-(line 550,col 71)",
            "(line 552,col 9)-(line 552,col 43)",
            "(line 554,col 9)-(line 554,col 43)",
            "(line 555,col 9)-(line 555,col 43)",
            "(line 556,col 9)-(line 556,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument()",
        "snippet": "    @Test(expected=IllegalArgumentException.class)\n    public void testSkipWrongArgument() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        final Base64InputStream b64stream = new Base64InputStream(ins);\n        b64stream.skip(-10);\n        b64stream.close();\n    }",
        "begin_line": 564,
        "end_line": 570,
        "comment": "\n     * Tests if negative arguments to skip are handled correctly.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 566,col 9)-(line 566,col 101)",
            "(line 567,col 9)-(line 567,col 71)",
            "(line 568,col 9)-(line 568,col 28)",
            "(line 569,col 9)-(line 569,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130()",
        "snippet": "    @Test\n    public void testCodec130() throws IOException {\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        final Base32OutputStream base32os = new Base32OutputStream(bos);\n\n        base32os.write(StringUtils.getBytesUtf8(STRING_FIXTURE));\n        base32os.close();\n\n        final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n        final Base32InputStream ins = new Base32InputStream(bis);\n\n        // we skip the first character read from the reader\n        ins.skip(1);\n        final byte[] decodedBytes = Base32TestData.streamToBytes(ins, new byte[64]);\n        final String str = StringUtils.newStringUtf8(decodedBytes);\n\n        assertEquals(STRING_FIXTURE.substring(1), str);\n    }",
        "begin_line": 47,
        "end_line": 64,
        "comment": "\n     * Tests the problem reported in CODEC-130. Missing / wrong implementation of skip.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 70)",
            "(line 50,col 9)-(line 50,col 72)",
            "(line 52,col 9)-(line 52,col 65)",
            "(line 53,col 9)-(line 53,col 25)",
            "(line 55,col 9)-(line 55,col 85)",
            "(line 56,col 9)-(line 56,col 65)",
            "(line 59,col 9)-(line 59,col 20)",
            "(line 60,col 9)-(line 60,col 84)",
            "(line 61,col 9)-(line 61,col 67)",
            "(line 63,col 9)-(line 63,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105()",
        "snippet": "    @Test\n    public void testCodec105() throws IOException {\n        final Base32InputStream in = new Base32InputStream(new Codec105ErrorInputStream(), true, 0, null);\n        try {\n            for (int i = 0; i < 5; i++) {\n                in.read();\n            }\n        } finally {\n            in.close();\n        }\n    }",
        "begin_line": 69,
        "end_line": 79,
        "comment": "\n     * Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.\n     ",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 106)",
            "(line 72,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable()",
        "snippet": "    @Test\n    public void testAvailable() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        final Base32InputStream b32stream = new Base32InputStream(ins);\n        assertEquals(1, b32stream.available());\n        assertEquals(3, b32stream.skip(10));\n        // End of stream reached\n        assertEquals(0, b32stream.available());\n        assertEquals(-1, b32stream.read());\n        assertEquals(-1, b32stream.read());\n        assertEquals(0, b32stream.available());\n        b32stream.close();\n    }",
        "begin_line": 152,
        "end_line": 164,
        "comment": "\n     * Tests skipping past the end of a stream.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 101)",
            "(line 155,col 9)-(line 155,col 71)",
            "(line 156,col 9)-(line 156,col 47)",
            "(line 157,col 9)-(line 157,col 44)",
            "(line 159,col 9)-(line 159,col 47)",
            "(line 160,col 9)-(line 160,col 43)",
            "(line 161,col 9)-(line 161,col 43)",
            "(line 162,col 9)-(line 162,col 47)",
            "(line 163,col 9)-(line 163,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize()",
        "snippet": "    @Test\n    public void testBase32EmptyInputStreamMimeChuckSize() throws Exception {\n        testBase32EmptyInputStream(BaseNCodec.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 172,
        "end_line": 175,
        "comment": "\n     * Tests the Base32InputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize()",
        "snippet": "    @Test\n    public void testBase32EmptyInputStreamPemChuckSize() throws Exception {\n        testBase32EmptyInputStream(BaseNCodec.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 183,
        "end_line": 186,
        "comment": "\n     * Tests the Base32InputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStream(int)",
        "snippet": "    private void testBase32EmptyInputStream(final int chuckSize) throws Exception {\n        final byte[] emptyEncoded = new byte[0];\n        final byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);\n    }",
        "begin_line": 188,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 48)",
            "(line 190,col 9)-(line 190,col 48)",
            "(line 191,col 9)-(line 191,col 68)",
            "(line 192,col 9)-(line 192,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk()",
        "snippet": "    @Test\n    public void testBase32InputStreamByChunk() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n        byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA======\\r\\n\");\n        decoded = new byte[] { (byte) 0 };\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // // OpenSSL interop test.\n        // encoded = StringUtils.getBytesUtf8(Base32TestData.ENCODED_32_CHARS_PER_LINE);\n        // decoded = Base32TestData.DECODED;\n        // testByChunk(encoded, decoded, Base32.PEM_CHUNK_SIZE, LF);\n        //\n        // // Single Line test.\n        // String singleLine = Base32TestData.ENCODED_32_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        // encoded = StringUtils.getBytesUtf8(singleLine);\n        // decoded = Base32TestData.DECODED;\n        // testByChunk(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        final BaseNCodec codec = new Base32();\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base32TestData.randomData(codec, i);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByChunk(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 201,
        "end_line": 232,
        "comment": "\n     * Tests the Base32InputStream implementation.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 81)",
            "(line 205,col 9)-(line 205,col 81)",
            "(line 206,col 9)-(line 206,col 72)",
            "(line 209,col 9)-(line 209,col 59)",
            "(line 210,col 9)-(line 210,col 42)",
            "(line 211,col 9)-(line 211,col 72)",
            "(line 225,col 9)-(line 225,col 46)",
            "(line 226,col 9)-(line 231,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte()",
        "snippet": "    @Test\n    public void testBase32InputStreamByteByByte() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n        byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // Single Byte test.\n        encoded = StringUtils.getBytesUtf8(\"AA======\\r\\n\");\n        decoded = new byte[] { (byte) 0 };\n        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n        // // Single Line test.\n        // String singleLine = Base32TestData.ENCODED_32_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n        // encoded = StringUtils.getBytesUtf8(singleLine);\n        // decoded = Base32TestData.DECODED;\n        // testByteByByte(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        final BaseNCodec codec = new Base32();\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base32TestData.randomData(codec, i);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByteByByte(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 240,
        "end_line": 266,
        "comment": "\n     * Tests the Base32InputStream implementation.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 81)",
            "(line 244,col 9)-(line 244,col 81)",
            "(line 245,col 9)-(line 245,col 75)",
            "(line 248,col 9)-(line 248,col 59)",
            "(line 249,col 9)-(line 249,col 42)",
            "(line 250,col 9)-(line 250,col 75)",
            "(line 259,col 9)-(line 259,col 46)",
            "(line 260,col 9)-(line 265,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk(byte[], byte[], int, byte[])",
        "snippet": "    private void testByChunk(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        InputStream in;\n\n        in = new Base32InputStream(new ByteArrayInputStream(decoded), true, chunkSize, separator);\n        byte[] output = Base32TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        in = new Base32InputStream(new ByteArrayInputStream(encoded));\n        output = Base32TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base32InputStream(in, true, chunkSize, separator);\n            in = new Base32InputStream(in, false);\n        }\n        output = Base32TestData.streamToBytes(in);\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n        in.close();\n    }",
        "begin_line": 286,
        "end_line": 318,
        "comment": "\n     * Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]--> encoded 3. decoded\n     * ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32InputStream wraps itself in encode and decode mode over and over\n     * again.\n     *\n     * @param encoded\n     *            base32 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base32 encoded data.\n     * @param separator\n     *            Line separator in the base32 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base32 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 23)",
            "(line 291,col 9)-(line 291,col 98)",
            "(line 292,col 9)-(line 292,col 57)",
            "(line 294,col 9)-(line 294,col 43)",
            "(line 295,col 9)-(line 295,col 49)",
            "(line 296,col 9)-(line 296,col 78)",
            "(line 299,col 9)-(line 299,col 70)",
            "(line 300,col 9)-(line 300,col 50)",
            "(line 302,col 9)-(line 302,col 43)",
            "(line 303,col 9)-(line 303,col 49)",
            "(line 304,col 9)-(line 304,col 78)",
            "(line 307,col 9)-(line 307,col 47)",
            "(line 308,col 9)-(line 311,col 9)",
            "(line 312,col 9)-(line 312,col 50)",
            "(line 314,col 9)-(line 314,col 43)",
            "(line 315,col 9)-(line 315,col 49)",
            "(line 316,col 9)-(line 316,col 87)",
            "(line 317,col 9)-(line 317,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte(byte[], byte[], int, byte[])",
        "snippet": "    private void testByteByByte(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        InputStream in;\n        in = new Base32InputStream(new ByteArrayInputStream(decoded), true, chunkSize, separator);\n        byte[] output = new byte[encoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 encode\", Arrays.equals(output, encoded));\n\n        in.close();\n\n        // Now let's try decode.\n        in = new Base32InputStream(new ByteArrayInputStream(encoded));\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 decode\", Arrays.equals(output, decoded));\n\n        in.close();\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        in = new ByteArrayInputStream(decoded);\n        for (int i = 0; i < 10; i++) {\n            in = new Base32InputStream(in, true, chunkSize, separator);\n            in = new Base32InputStream(in, false);\n        }\n        output = new byte[decoded.length];\n        for (int i = 0; i < output.length; i++) {\n            output[i] = (byte) in.read();\n        }\n\n        assertEquals(\"EOF\", -1, in.read());\n        assertEquals(\"Still EOF\", -1, in.read());\n        assertTrue(\"Streaming base32 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 338,
        "end_line": 381,
        "comment": "\n     * Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]--> encoded 3. decoded\n     * ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32InputStream wraps itself in encode and decode mode over and over\n     * again.\n     *\n     * @param encoded\n     *            base32 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the base32 encoded data.\n     * @param separator\n     *            Line separator in the base32 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base32 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 23)",
            "(line 342,col 9)-(line 342,col 98)",
            "(line 343,col 9)-(line 343,col 49)",
            "(line 344,col 9)-(line 346,col 9)",
            "(line 348,col 9)-(line 348,col 43)",
            "(line 349,col 9)-(line 349,col 49)",
            "(line 350,col 9)-(line 350,col 78)",
            "(line 352,col 9)-(line 352,col 19)",
            "(line 355,col 9)-(line 355,col 70)",
            "(line 356,col 9)-(line 356,col 42)",
            "(line 357,col 9)-(line 359,col 9)",
            "(line 361,col 9)-(line 361,col 43)",
            "(line 362,col 9)-(line 362,col 49)",
            "(line 363,col 9)-(line 363,col 78)",
            "(line 365,col 9)-(line 365,col 19)",
            "(line 368,col 9)-(line 368,col 47)",
            "(line 369,col 9)-(line 372,col 9)",
            "(line 373,col 9)-(line 373,col 42)",
            "(line 374,col 9)-(line 376,col 9)",
            "(line 378,col 9)-(line 378,col 43)",
            "(line 379,col 9)-(line 379,col 49)",
            "(line 380,col 9)-(line 380,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported()",
        "snippet": "    @Test\n    public void testMarkSupported() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n        // Always returns false for now.\n        assertFalse(\"Base32InputStream.markSupported() is false\", in.markSupported());\n        in.close();\n    }",
        "begin_line": 388,
        "end_line": 396,
        "comment": "\n     * Tests markSupported.\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 87)",
            "(line 391,col 9)-(line 391,col 75)",
            "(line 392,col 9)-(line 392,col 97)",
            "(line 394,col 9)-(line 394,col 86)",
            "(line 395,col 9)-(line 395,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testRead0()",
        "snippet": "    @Test\n    public void testRead0() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        final byte[] buf = new byte[1024];\n        int bytesRead = 0;\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n        bytesRead = in.read(buf, 0, 0);\n        assertEquals(\"Base32InputStream.read(buf, 0, 0) returns 0\", 0, bytesRead);\n        in.close();\n    }",
        "begin_line": 403,
        "end_line": 413,
        "comment": "\n     * Tests read returning 0\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 87)",
            "(line 406,col 9)-(line 406,col 42)",
            "(line 407,col 9)-(line 407,col 26)",
            "(line 408,col 9)-(line 408,col 75)",
            "(line 409,col 9)-(line 409,col 97)",
            "(line 410,col 9)-(line 410,col 39)",
            "(line 411,col 9)-(line 411,col 82)",
            "(line 412,col 9)-(line 412,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull()",
        "snippet": "    @Test\n    public void testReadNull() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n        try {\n            in.read(null, 0, 0);\n            fail(\"Base32InputStream.read(null, 0, 0) to throw a NullPointerException\");\n        } catch (final NullPointerException e) {\n            // Expected\n        }\n        in.close();\n    }",
        "begin_line": 421,
        "end_line": 433,
        "comment": "\n     * Tests read with null.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 87)",
            "(line 424,col 9)-(line 424,col 75)",
            "(line 425,col 9)-(line 425,col 97)",
            "(line 426,col 9)-(line 431,col 9)",
            "(line 432,col 9)-(line 432,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds()",
        "snippet": "    @Test\n    public void testReadOutOfBounds() throws Exception {\n        final byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        final byte[] buf = new byte[1024];\n        final ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n        final Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[] { 0, 0, 0 });\n\n        try {\n            in.read(buf, -1, 0);\n            fail(\"Expected Base32InputStream.read(buf, -1, 0) to throw IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, 0, -1);\n            fail(\"Expected Base32InputStream.read(buf, 0, -1) to throw IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, buf.length + 1, 0);\n            fail(\"Base32InputStream.read(buf, buf.length + 1, 0) throws IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n\n        try {\n            in.read(buf, buf.length - 1, 2);\n            fail(\"Base32InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException e) {\n            // Expected\n        }\n        in.close();\n    }",
        "begin_line": 440,
        "end_line": 475,
        "comment": "\n     * Tests read throwing IndexOutOfBoundsException\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 87)",
            "(line 443,col 9)-(line 443,col 42)",
            "(line 444,col 9)-(line 444,col 75)",
            "(line 445,col 9)-(line 445,col 97)",
            "(line 447,col 9)-(line 452,col 9)",
            "(line 454,col 9)-(line 459,col 9)",
            "(line 461,col 9)-(line 466,col 9)",
            "(line 468,col 9)-(line 473,col 9)",
            "(line 474,col 9)-(line 474,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone()",
        "snippet": "    @Test\n    public void testSkipNone() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        final Base32InputStream b32stream = new Base32InputStream(ins);\n        final byte[] actualBytes = new byte[6];\n        assertEquals(0, b32stream.skip(0));\n        b32stream.read(actualBytes, 0, actualBytes.length);\n        assertArrayEquals(actualBytes, new byte[] { 102, 111, 111, 0, 0, 0 });\n        // End of stream reached\n        assertEquals(-1, b32stream.read());\n        b32stream.close();\n    }",
        "begin_line": 482,
        "end_line": 493,
        "comment": "\n     * Tests skipping as a noop\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 101)",
            "(line 485,col 9)-(line 485,col 71)",
            "(line 486,col 9)-(line 486,col 47)",
            "(line 487,col 9)-(line 487,col 43)",
            "(line 488,col 9)-(line 488,col 59)",
            "(line 489,col 9)-(line 489,col 78)",
            "(line 491,col 9)-(line 491,col 43)",
            "(line 492,col 9)-(line 492,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig()",
        "snippet": "    @Test\n    public void testSkipBig() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        final Base32InputStream b32stream = new Base32InputStream(ins);\n        assertEquals(3, b32stream.skip(1024));\n        // End of stream reached\n        assertEquals(-1, b32stream.read());\n        assertEquals(-1, b32stream.read());\n        b32stream.close();\n    }",
        "begin_line": 500,
        "end_line": 509,
        "comment": "\n     * Tests skipping number of characters larger than the internal buffer.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 502,col 9)-(line 502,col 101)",
            "(line 503,col 9)-(line 503,col 71)",
            "(line 504,col 9)-(line 504,col 46)",
            "(line 506,col 9)-(line 506,col 43)",
            "(line 507,col 9)-(line 507,col 43)",
            "(line 508,col 9)-(line 508,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd()",
        "snippet": "    @Test\n    public void testSkipPastEnd() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        final Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(3, b32stream.skip(10));\n        // End of stream reached\n        assertEquals(-1, b32stream.read());\n        assertEquals(-1, b32stream.read());\n        b32stream.close();\n}",
        "begin_line": 516,
        "end_line": 526,
        "comment": "\n     * Tests skipping past the end of a stream.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 101)",
            "(line 519,col 9)-(line 519,col 71)",
            "(line 521,col 9)-(line 521,col 44)",
            "(line 523,col 9)-(line 523,col 43)",
            "(line 524,col 9)-(line 524,col 43)",
            "(line 525,col 9)-(line 525,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd()",
        "snippet": "    @Test\n    public void testSkipToEnd() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        final Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(3, b32stream.skip(3));\n        // End of stream reached\n        assertEquals(-1, b32stream.read());\n        assertEquals(-1, b32stream.read());\n        b32stream.close();\n    }",
        "begin_line": 533,
        "end_line": 543,
        "comment": "\n     * Tests skipping to the end of a stream.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 535,col 9)-(line 535,col 101)",
            "(line 536,col 9)-(line 536,col 71)",
            "(line 538,col 9)-(line 538,col 43)",
            "(line 540,col 9)-(line 540,col 43)",
            "(line 541,col 9)-(line 541,col 43)",
            "(line 542,col 9)-(line 542,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32InputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument()",
        "snippet": "    @Test(expected=IllegalArgumentException.class)\n    public void testSkipWrongArgument() throws Throwable {\n        final InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        final Base32InputStream b32stream = new Base32InputStream(ins);\n        b32stream.skip(-10);\n        b32stream.close();\n    }",
        "begin_line": 550,
        "end_line": 556,
        "comment": "\n     * Tests if negative arguments to skip are handled correctly.\n     *\n     * @throws Throwable\n     ",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 101)",
            "(line 553,col 9)-(line 553,col 71)",
            "(line 554,col 9)-(line 554,col 28)",
            "(line 555,col 9)-(line 555,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Codec105ErrorInputStream",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java",
        "signature": "org.apache.commons.codec.binary.Codec105ErrorInputStream.read()",
        "snippet": "    @Override\n    public int read() throws IOException {\n        if (this.countdown-- > 0) {\n            return '\\n';\n        }\n        return EOF;\n    }",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 40,col 9)",
            "(line 41,col 9)-(line 41,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Codec105ErrorInputStream",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java",
        "signature": "org.apache.commons.codec.binary.Codec105ErrorInputStream.read(byte[], int, int)",
        "snippet": "    @Override\n    public int read(final byte b[], final int pos, final int len) throws IOException {\n        if (this.countdown-- > 0) {\n            b[pos] = '\\n';\n            return 1;\n        }\n        return EOF;\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 49,col 9)",
            "(line 50,col 9)-(line 50,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        codec = new BaseNCodec(0, 0, 0, 0) {\n            @Override\n            protected boolean isInAlphabet(final byte b) {\n                return b=='O' || b == 'K'; // allow OK\n            }\n\n            @Override\n            void encode(final byte[] pArray, final int i, final int length, final Context context) {\n            }\n\n            @Override\n            void decode(final byte[] pArray, final int i, final int length, final Context context) {\n            }\n        };\n    }",
        "begin_line": 33,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 48,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.Anonymous-6144c30e-9f86-43a8-a0d9-06184fd32a42.isInAlphabet(byte)",
        "snippet": "            @Override\n            protected boolean isInAlphabet(final byte b) {\n                return b=='O' || b == 'K'; // allow OK\n            }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 17)-(line 38,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.Anonymous-a14a2b4b-8fa7-4dee-a04f-0c70c388e822.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context)",
        "snippet": "            @Override\n            void encode(final byte[] pArray, final int i, final int length, final Context context) {\n            }",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.Anonymous-d53e314a-9b5c-40f3-b40d-6fc30d4905a4.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context)",
        "snippet": "            @Override\n            void decode(final byte[] pArray, final int i, final int length, final Context context) {\n            }",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testBaseNCodec()",
        "snippet": "    @Test\n    public void testBaseNCodec() {\n        assertNotNull(codec);\n    }",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace()",
        "snippet": "    @Test\n    public void testIsWhiteSpace() {\n        assertTrue(BaseNCodec.isWhiteSpace((byte) ' '));\n        assertTrue(BaseNCodec.isWhiteSpace((byte) '\\n'));\n        assertTrue(BaseNCodec.isWhiteSpace((byte) '\\r'));\n        assertTrue(BaseNCodec.isWhiteSpace((byte) '\\t'));\n    }",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 56)",
            "(line 79,col 9)-(line 79,col 57)",
            "(line 80,col 9)-(line 80,col 57)",
            "(line 81,col 9)-(line 81,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByte()",
        "snippet": "    @Test\n    public void testIsInAlphabetByte() {\n        assertFalse(codec.isInAlphabet((byte) 0));\n        assertFalse(codec.isInAlphabet((byte) 'a'));\n        assertTrue(codec.isInAlphabet((byte) 'O'));\n        assertTrue(codec.isInAlphabet((byte) 'K'));\n    }",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 50)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 134,col 9)-(line 134,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean()",
        "snippet": "    @Test\n    public void testIsInAlphabetByteArrayBoolean() {\n        assertTrue(codec.isInAlphabet(new byte[]{}, false));\n        assertTrue(codec.isInAlphabet(new byte[]{'O'}, false));\n        assertFalse(codec.isInAlphabet(new byte[]{'O',' '}, false));\n        assertFalse(codec.isInAlphabet(new byte[]{' '}, false));\n        assertTrue(codec.isInAlphabet(new byte[]{}, true));\n        assertTrue(codec.isInAlphabet(new byte[]{'O'}, true));\n        assertTrue(codec.isInAlphabet(new byte[]{'O',' '}, true));\n        assertTrue(codec.isInAlphabet(new byte[]{' '}, true));\n    }",
        "begin_line": 137,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 60)",
            "(line 140,col 9)-(line 140,col 63)",
            "(line 141,col 9)-(line 141,col 68)",
            "(line 142,col 9)-(line 142,col 64)",
            "(line 143,col 9)-(line 143,col 59)",
            "(line 144,col 9)-(line 144,col 62)",
            "(line 145,col 9)-(line 145,col 66)",
            "(line 146,col 9)-(line 146,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString()",
        "snippet": "    @Test\n    public void testIsInAlphabetString() {\n        assertTrue(codec.isInAlphabet(\"OK\"));\n        assertTrue(codec.isInAlphabet(\"O=K= \\t\\n\\r\"));\n    }",
        "begin_line": 149,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 45)",
            "(line 152,col 9)-(line 152,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad()",
        "snippet": "    @Test\n    public void testContainsAlphabetOrPad() {\n        assertFalse(codec.containsAlphabetOrPad(null));\n        assertFalse(codec.containsAlphabetOrPad(new byte[]{}));\n        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n        assertTrue(codec.containsAlphabetOrPad(\"OK \".getBytes()));\n        assertFalse(codec.containsAlphabetOrPad(\"ok \".getBytes()));\n        assertTrue(codec.containsAlphabetOrPad(new byte[]{codec.pad}));\n    }",
        "begin_line": 155,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 55)",
            "(line 158,col 9)-(line 158,col 63)",
            "(line 159,col 9)-(line 159,col 65)",
            "(line 160,col 9)-(line 160,col 66)",
            "(line 161,col 9)-(line 161,col 67)",
            "(line 162,col 9)-(line 162,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.testProvidePaddingByte()",
        "snippet": "    @Test\n    public void testProvidePaddingByte() {\n        // Given\n        codec = new BaseNCodec(0, 0, 0, 0, (byte)0x25) {\n            @Override\n            protected boolean isInAlphabet(final byte b) {\n                return b=='O' || b == 'K'; // allow OK\n            }\n\n            @Override\n            void encode(final byte[] pArray, final int i, final int length, final Context context) {\n            }\n\n            @Override\n            void decode(final byte[] pArray, final int i, final int length, final Context context) {\n            }\n        };\n\n        // When\n        final byte actualPaddingByte = codec.pad;\n\n        // Then\n        assertEquals(0x25, actualPaddingByte);\n    }",
        "begin_line": 170,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 186,col 10)",
            "(line 189,col 9)-(line 189,col 49)",
            "(line 192,col 9)-(line 192,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.Anonymous-7852f600-1842-40db-a55f-09a52b7b9077.isInAlphabet(byte)",
        "snippet": "            @Override\n            protected boolean isInAlphabet(final byte b) {\n                return b=='O' || b == 'K'; // allow OK\n            }",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 17)-(line 176,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.Anonymous-731b51de-a821-438b-8a1b-9ddef67d6deb.encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context)",
        "snippet": "            @Override\n            void encode(final byte[] pArray, final int i, final int length, final Context context) {\n            }",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.binary.BaseNCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
        "signature": "org.apache.commons.codec.binary.BaseNCodecTest.Anonymous-1e4365ab-94f0-4c8d-b0b6-d80cba89aa59.decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec.Context)",
        "snippet": "            @Override\n            void decode(final byte[] pArray, final int i, final int length, final Context context) {\n            }",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.charsetSanityCheck(java.lang.String)",
        "snippet": "    private boolean charsetSanityCheck(final String name) {\n        final String source = \"the quick brown dog jumped over the lazy fox\";\n        try {\n            final byte[] bytes = source.getBytes(name);\n            final String str = new String(bytes, name);\n            final boolean equals = source.equals(str);\n            if (equals == false) {\n                // Here with:\n                //\n                // Java Sun 1.4.2_19 x86 32-bits on Windows XP\n                // JIS_X0212-1990\n                // x-JIS0208\n                //\n                // Java Sun 1.5.0_17 x86 32-bits on Windows XP\n                // JIS_X0212-1990\n                // x-IBM834\n                // x-JIS0208\n                // x-MacDingbat\n                // x-MacSymbol\n                //\n                // Java Sun 1.6.0_14 x86 32-bits\n                // JIS_X0212-1990\n                // x-IBM834\n                // x-JIS0208\n                // x-MacDingbat\n                // x-MacSymbol\n                //\n                log(\"FAILED charsetSanityCheck=Interesting Java charset oddity: Roundtrip failed for \" + name);\n            }\n            return equals;\n        } catch (final UnsupportedEncodingException e) {\n            // Should NEVER happen since we are getting the name from the Charset class.\n            if (LOG) {\n                log(\"FAILED charsetSanityCheck=\" + name + \", e=\" + e);\n                log(e);\n            }\n            return false;\n        } catch (final UnsupportedOperationException e) {\n            // Caught here with:\n            // x-JISAutoDetect on Windows XP and Java Sun 1.4.2_19 x86 32-bits\n            // x-JISAutoDetect on Windows XP and Java Sun 1.5.0_17 x86 32-bits\n            // x-JISAutoDetect on Windows XP and Java Sun 1.6.0_14 x86 32-bits\n            if (LOG) {\n                log(\"FAILED charsetSanityCheck=\" + name + \", e=\" + e);\n                log(e);\n            }\n            return false;\n        }\n    }",
        "begin_line": 49,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 77)",
            "(line 51,col 9)-(line 96,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(char[])",
        "snippet": "    private void checkDecodeHexCharArrayOddCharacters(final char[] data) {\n        try {\n            Hex.decodeHex(data);\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 99,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 105,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters(java.lang.String)",
        "snippet": "    private void checkDecodeHexCharArrayOddCharacters(String data) {\n        try {\n            Hex.decodeHex(data);\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.log(java.lang.String)",
        "snippet": "    private void log(final String s) {\n        if (LOG) {\n            System.out.println(s);\n            System.out.flush();\n        }\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 121,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.log(java.lang.Throwable)",
        "snippet": "    private void log(final Throwable t) {\n        if (LOG) {\n            t.printStackTrace(System.out);\n            System.out.flush();\n        }\n    }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 128,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharset()",
        "snippet": "    @Test\n    public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {\n        for (final String name : Charset.availableCharsets().keySet()) {\n            testCustomCharset(name, \"testCustomCharset\");\n        }\n    }",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 135,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharset(java.lang.String, java.lang.String)",
        "snippet": "    private void testCustomCharset(final String name, final String parent) throws UnsupportedEncodingException,\n            DecoderException {\n        if (charsetSanityCheck(name) == false) {\n            return;\n        }\n        log(parent + \"=\" + name);\n        final Hex customCodec = new Hex(name);\n        // source data\n        final String sourceString = \"Hello World\";\n        final byte[] sourceBytes = sourceString.getBytes(name);\n        // test 1\n        // encode source to hex string to bytes with charset\n        final byte[] actualEncodedBytes = customCodec.encode(sourceBytes);\n        // encode source to hex string...\n        String expectedHexString = Hex.encodeHexString(sourceBytes);\n        // ... and get the bytes in the expected charset\n        final byte[] expectedHexStringBytes = expectedHexString.getBytes(name);\n        Assert.assertTrue(Arrays.equals(expectedHexStringBytes, actualEncodedBytes));\n        // test 2\n        String actualStringFromBytes = new String(actualEncodedBytes, name);\n        assertEquals(name + \", expectedHexString=\" + expectedHexString + \", actualStringFromBytes=\" +\n                actualStringFromBytes, expectedHexString, actualStringFromBytes);\n        // second test:\n        final Hex utf8Codec = new Hex();\n        expectedHexString = \"48656c6c6f20576f726c64\";\n        final byte[] decodedUtf8Bytes = (byte[]) utf8Codec.decode(expectedHexString);\n        actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharset());\n        // sanity check:\n        assertEquals(name, sourceString, actualStringFromBytes);\n        // actual check:\n        final byte[] decodedCustomBytes = customCodec.decode(actualEncodedBytes);\n        actualStringFromBytes = new String(decodedCustomBytes, name);\n        assertEquals(name, sourceString, actualStringFromBytes);\n    }",
        "begin_line": 144,
        "end_line": 177,
        "comment": "\n     * @param name\n     * @param parent\n     * @throws UnsupportedEncodingException\n     * @throws DecoderException\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 33)",
            "(line 150,col 9)-(line 150,col 46)",
            "(line 152,col 9)-(line 152,col 50)",
            "(line 153,col 9)-(line 153,col 63)",
            "(line 156,col 9)-(line 156,col 74)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 160,col 9)-(line 160,col 79)",
            "(line 161,col 9)-(line 161,col 85)",
            "(line 163,col 9)-(line 163,col 76)",
            "(line 164,col 9)-(line 165,col 81)",
            "(line 167,col 9)-(line 167,col 40)",
            "(line 168,col 9)-(line 168,col 53)",
            "(line 169,col 9)-(line 169,col 85)",
            "(line 170,col 9)-(line 170,col 85)",
            "(line 172,col 9)-(line 172,col 64)",
            "(line 174,col 9)-(line 174,col 81)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharsetBadName()",
        "snippet": "    @Test(expected = UnsupportedCharsetException.class)\n    public void testCustomCharsetBadName() {\n        new Hex(BAD_ENCODING_NAME);\n    }",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testCustomCharsetToString()",
        "snippet": "    @Test\n    public void testCustomCharsetToString() {\n        assertTrue(new Hex().toString().indexOf(Hex.DEFAULT_CHARSET_NAME) >= 0);\n    }",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0()",
        "snippet": "    @Test\n    public void testDecodeBadCharacterPos0() {\n        try {\n            new Hex().decode(\"q0\");\n            fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 189,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1()",
        "snippet": "    @Test\n    public void testDecodeBadCharacterPos1() {\n        try {\n            new Hex().decode(\"0q\");\n            fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 199,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 206,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayEmpty()",
        "snippet": "    @Test\n    public void testDecodeByteArrayEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], new Hex().decode(new byte[0])));\n    }",
        "begin_line": 209,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayObjectEmpty()",
        "snippet": "    @Test\n    public void testDecodeByteArrayObjectEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode((Object) new byte[0])));\n    }",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters()",
        "snippet": "    @Test\n    public void testDecodeByteArrayOddCharacters() {\n        try {\n            new Hex().decode(new byte[] { 65 });\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 219,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 226,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferEmpty()",
        "snippet": "    @Test\n    public void testDecodeByteBufferEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], new Hex().decode(ByteBuffer.allocate(0))));\n    }",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferObjectEmpty()",
        "snippet": "    @Test\n    public void testDecodeByteBufferObjectEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode((Object) ByteBuffer.allocate(0))));\n    }",
        "begin_line": 234,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters()",
        "snippet": "    @Test\n    public void testDecodeByteBufferOddCharacters() {\n        final ByteBuffer buffer = ByteBuffer.allocate(1);\n        buffer.put((byte) 65);\n        try {\n            new Hex().decode(buffer);\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 239,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 57)",
            "(line 242,col 9)-(line 242,col 30)",
            "(line 243,col 9)-(line 248,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayEmpty()",
        "snippet": "    @Test\n    public void testDecodeHexCharArrayEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n    }",
        "begin_line": 251,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexStringEmpty()",
        "snippet": "    @Test\n    public void testDecodeHexStringEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(\"\")));\n    }",
        "begin_line": 256,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeClassCastException()",
        "snippet": "    @Test\n    public void testDecodeClassCastException() {\n        try {\n            new Hex().decode(new int[] { 65 });\n            fail(\"An exception wasn't thrown when trying to decode.\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 261,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 268,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters1()",
        "snippet": "    @Test\n    public void testDecodeHexCharArrayOddCharacters1() {\n        checkDecodeHexCharArrayOddCharacters(new char[] { 'A' });\n    }",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters1()",
        "snippet": "    @Test\n    public void testDecodeHexStringOddCharacters1() {\n        checkDecodeHexCharArrayOddCharacters(\"A\");\n    }",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters3()",
        "snippet": "    @Test\n    public void testDecodeHexCharArrayOddCharacters3() {\n        checkDecodeHexCharArrayOddCharacters(new char[] { 'A', 'B', 'C' });\n    }",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOddCharacters5()",
        "snippet": "    @Test\n    public void testDecodeHexCharArrayOddCharacters5() {\n        checkDecodeHexCharArrayOddCharacters(new char[] { 'A', 'B', 'C', 'D', 'E' });\n    }",
        "begin_line": 286,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters()",
        "snippet": "    @Test\n    public void testDecodeHexStringOddCharacters() {\n        try {\n            new Hex().decode(\"6\");\n            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n        } catch (final DecoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 291,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 298,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testDecodeStringEmpty()",
        "snippet": "    @Test\n    public void testDecodeStringEmpty() throws DecoderException {\n        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode(\"\")));\n    }",
        "begin_line": 301,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayEmpty()",
        "snippet": "    @Test\n    public void testEncodeByteArrayEmpty() {\n        assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n    }",
        "begin_line": 306,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeByteArrayObjectEmpty()",
        "snippet": "    @Test\n    public void testEncodeByteArrayObjectEmpty() throws EncoderException {\n        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode((Object) new byte[0])));\n    }",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferEmpty()",
        "snippet": "    @Test\n    public void testEncodeByteBufferEmpty() {\n        assertTrue(Arrays.equals(new byte[0], new Hex().encode(ByteBuffer.allocate(0))));\n    }",
        "begin_line": 316,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeByteBufferObjectEmpty()",
        "snippet": "    @Test\n    public void testEncodeByteBufferObjectEmpty() throws EncoderException {\n        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode((Object) ByteBuffer.allocate(0))));\n    }",
        "begin_line": 321,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 107)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeClassCastException()",
        "snippet": "    @Test\n    public void testEncodeClassCastException() {\n        try {\n            new Hex().encode(new int[] { 65 });\n            fail(\"An exception wasn't thrown when trying to encode.\");\n        } catch (final EncoderException e) {\n            // Expected exception\n        }\n    }",
        "begin_line": 326,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 333,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeDecodeHexCharArrayRandom()",
        "snippet": "    @Test\n    public void testEncodeDecodeHexCharArrayRandom() throws DecoderException, EncoderException {\n        final Random random = new Random();\n\n        final Hex hex = new Hex();\n        for (int i = 5; i > 0; i--) {\n            final byte[] data = new byte[random.nextInt(10000) + 1];\n            random.nextBytes(data);\n\n            // static API\n            final char[] encodedChars = Hex.encodeHex(data);\n            byte[] decodedBytes = Hex.decodeHex(encodedChars);\n            assertTrue(Arrays.equals(data, decodedBytes));\n\n            // instance API with array parameter\n            final byte[] encodedStringBytes = hex.encode(data);\n            decodedBytes = hex.decode(encodedStringBytes);\n            assertTrue(Arrays.equals(data, decodedBytes));\n\n            // instance API with char[] (Object) parameter\n            String dataString = new String(encodedChars);\n            char[] encodedStringChars = (char[]) hex.encode(dataString);\n            decodedBytes = (byte[]) hex.decode(encodedStringChars);\n            assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString), decodedBytes));\n\n            // instance API with String (Object) parameter\n            dataString = new String(encodedChars);\n            encodedStringChars = (char[]) hex.encode(dataString);\n            decodedBytes = (byte[]) hex.decode(new String(encodedStringChars));\n            assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString), decodedBytes));\n        }\n    }",
        "begin_line": 336,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 43)",
            "(line 340,col 9)-(line 340,col 34)",
            "(line 341,col 9)-(line 366,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayEmpty()",
        "snippet": "    @Test\n    public void testEncodeHexByteArrayEmpty() {\n        assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0])));\n        assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n    }",
        "begin_line": 369,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 75)",
            "(line 372,col 9)-(line 372,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldLowerCaseHex()",
        "snippet": "    @Test\n    public void testEncodeHexByteArrayHelloWorldLowerCaseHex() {\n        final byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n        final String expected = \"48656c6c6f20576f726c64\";\n        char[] actual;\n        actual = Hex.encodeHex(b);\n        assertEquals(expected, new String(actual));\n        actual = Hex.encodeHex(b, true);\n        assertEquals(expected, new String(actual));\n        actual = Hex.encodeHex(b, false);\n        assertFalse(expected.equals(new String(actual)));\n    }",
        "begin_line": 375,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 65)",
            "(line 378,col 9)-(line 378,col 57)",
            "(line 379,col 9)-(line 379,col 22)",
            "(line 380,col 9)-(line 380,col 34)",
            "(line 381,col 9)-(line 381,col 51)",
            "(line 382,col 9)-(line 382,col 40)",
            "(line 383,col 9)-(line 383,col 51)",
            "(line 384,col 9)-(line 384,col 41)",
            "(line 385,col 9)-(line 385,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayHelloWorldUpperCaseHex()",
        "snippet": "    @Test\n    public void testEncodeHexByteArrayHelloWorldUpperCaseHex() {\n        final byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n        final String expected = \"48656C6C6F20576F726C64\";\n        char[] actual;\n        actual = Hex.encodeHex(b);\n        assertFalse(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, true);\n        assertFalse(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, false);\n        assertTrue(expected.equals(new String(actual)));\n    }",
        "begin_line": 388,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 65)",
            "(line 391,col 9)-(line 391,col 57)",
            "(line 392,col 9)-(line 392,col 22)",
            "(line 393,col 9)-(line 393,col 34)",
            "(line 394,col 9)-(line 394,col 57)",
            "(line 395,col 9)-(line 395,col 40)",
            "(line 396,col 9)-(line 396,col 57)",
            "(line 397,col 9)-(line 397,col 41)",
            "(line 398,col 9)-(line 398,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteArrayZeroes()",
        "snippet": "    @Test\n    public void testEncodeHexByteArrayZeroes() {\n        final char[] c = Hex.encodeHex(new byte[36]);\n        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n    }",
        "begin_line": 401,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 53)",
            "(line 404,col 9)-(line 404,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferEmpty()",
        "snippet": "    @Test\n    public void testEncodeHexByteBufferEmpty() {\n        assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocate(0))));\n        assertTrue(Arrays.equals(new byte[0], new Hex().encode(ByteBuffer.allocate(0))));\n    }",
        "begin_line": 407,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 86)",
            "(line 410,col 9)-(line 410,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex()",
        "snippet": "    @Test\n    public void testEncodeHexByteBufferHelloWorldLowerCaseHex() {\n        final ByteBuffer b = StringUtils.getByteBufferUtf8(\"Hello World\");\n        final String expected = \"48656c6c6f20576f726c64\";\n        char[] actual;\n        actual = Hex.encodeHex(b);\n        assertEquals(expected, new String(actual));\n        actual = Hex.encodeHex(b, true);\n        assertEquals(expected, new String(actual));\n        actual = Hex.encodeHex(b, false);\n        assertFalse(expected.equals(new String(actual)));\n    }",
        "begin_line": 413,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 74)",
            "(line 416,col 9)-(line 416,col 57)",
            "(line 417,col 9)-(line 417,col 22)",
            "(line 418,col 9)-(line 418,col 34)",
            "(line 419,col 9)-(line 419,col 51)",
            "(line 420,col 9)-(line 420,col 40)",
            "(line 421,col 9)-(line 421,col 51)",
            "(line 422,col 9)-(line 422,col 41)",
            "(line 423,col 9)-(line 423,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex()",
        "snippet": "    @Test\n    public void testEncodeHexByteBufferHelloWorldUpperCaseHex() {\n        final ByteBuffer b = StringUtils.getByteBufferUtf8(\"Hello World\");\n        final String expected = \"48656C6C6F20576F726C64\";\n        char[] actual;\n        actual = Hex.encodeHex(b);\n        assertFalse(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, true);\n        assertFalse(expected.equals(new String(actual)));\n        actual = Hex.encodeHex(b, false);\n        assertTrue(expected.equals(new String(actual)));\n    }",
        "begin_line": 426,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 428,col 9)-(line 428,col 74)",
            "(line 429,col 9)-(line 429,col 57)",
            "(line 430,col 9)-(line 430,col 22)",
            "(line 431,col 9)-(line 431,col 34)",
            "(line 432,col 9)-(line 432,col 57)",
            "(line 433,col 9)-(line 433,col 40)",
            "(line 434,col 9)-(line 434,col 57)",
            "(line 435,col 9)-(line 435,col 41)",
            "(line 436,col 9)-(line 436,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferOfZeroes()",
        "snippet": "    @Test\n    public void testEncodeHex_ByteBufferOfZeroes() {\n        final char[] c = Hex.encodeHex(ByteBuffer.allocate(36));\n        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n    }",
        "begin_line": 439,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 64)",
            "(line 442,col 9)-(line 442,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroes()",
        "snippet": "    @Test\n    public void testEncodeHexByteString_ByteBufferOfZeroes() {\n        final String c = Hex.encodeHexString(ByteBuffer.allocate(36));\n        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", c);\n    }",
        "begin_line": 445,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 447,col 9)-(line 447,col 70)",
            "(line 448,col 9)-(line 448,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayOfZeroes()",
        "snippet": "    @Test\n    public void testEncodeHexByteString_ByteArrayOfZeroes() {\n        final String c = Hex.encodeHexString(new byte[36]);\n        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", c);\n    }",
        "begin_line": 451,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 59)",
            "(line 454,col 9)-(line 454,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToLowerCase()",
        "snippet": "    @Test\n    public void testEncodeHexByteString_ByteArrayBoolean_ToLowerCase() {\n        assertEquals(\"0a\", Hex.encodeHexString(new byte[] { 10 }, true));\n    }",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteArrayBoolean_ToUpperCase()",
        "snippet": "    @Test\n    public void testEncodeHexByteString_ByteArrayBoolean_ToUpperCase() {\n        assertEquals(\"0A\", Hex.encodeHexString(new byte[] { 10 }, false));\n    }",
        "begin_line": 462,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase()",
        "snippet": "    @Test\n    public void testEncodeHexByteString_ByteBufferBoolean_ToLowerCase() {\n        assertEquals(\"0a\", Hex.encodeHexString(ByteBuffer.wrap(new byte[] { 10 }), true));\n    }",
        "begin_line": 467,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase()",
        "snippet": "    @Test\n    public void testEncodeHexByteString_ByteBufferBoolean_ToUpperCase() {\n        assertEquals(\"0A\", Hex.encodeHexString(ByteBuffer.wrap(new byte[] { 10 }), false));\n    }",
        "begin_line": 472,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testEncodeStringEmpty()",
        "snippet": "    @Test\n    public void testEncodeStringEmpty() throws EncoderException {\n        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode(\"\")));\n    }",
        "begin_line": 477,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testGetCharset()",
        "snippet": "    @Test\n    public void testGetCharset() {\n        Assert.assertEquals(Charsets.UTF_8, new Hex(Charsets.UTF_8).getCharset());\n    }",
        "begin_line": 482,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testGetCharsetName()",
        "snippet": "    @Test\n    public void testGetCharsetName() {\n        Assert.assertEquals(Charsets.UTF_8.name(), new Hex(Charsets.UTF_8).getCharsetName());\n    }",
        "begin_line": 487,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.HexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
        "signature": "org.apache.commons.codec.binary.HexTest.testRequiredCharset()",
        "snippet": "    @Test\n    public void testRequiredCharset() throws UnsupportedEncodingException, DecoderException {\n        testCustomCharset(\"UTF-8\", \"testRequiredCharset\");\n        testCustomCharset(\"UTF-16\", \"testRequiredCharset\");\n        testCustomCharset(\"UTF-16BE\", \"testRequiredCharset\");\n        testCustomCharset(\"UTF-16LE\", \"testRequiredCharset\");\n        testCustomCharset(\"US-ASCII\", \"testRequiredCharset\");\n        testCustomCharset(\"ISO8859_1\", \"testRequiredCharset\");\n    }",
        "begin_line": 492,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 58)",
            "(line 495,col 9)-(line 495,col 59)",
            "(line 496,col 9)-(line 496,col 61)",
            "(line 497,col 9)-(line 497,col 61)",
            "(line 498,col 9)-(line 498,col 61)",
            "(line 499,col 9)-(line 499,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.initSTRINGS()",
        "snippet": "    private static void initSTRINGS() {\n        final String[] s = STRINGS;\n        s[0] = \"\";\n        s[1] = \"uA==\";\n        s[2] = \"z9w=\";\n        s[3] = \"TQ+Z\";\n        s[4] = \"bhjUYA==\";\n        s[5] = \"1cO9td8=\";\n        s[6] = \"sMxHoJf5\";\n        s[7] = \"jQcPlDsZzw==\";\n        s[8] = \"TAaPnfW/CYU=\";\n        s[9] = \"cXTZuwzXPONS\";\n        s[10] = \"Ltn/ZTV4IjT6OA==\";\n        s[11] = \"6fh+jdU31SOmWrc=\";\n        s[12] = \"E/5MoD4qCvDuTcFA\";\n        s[13] = \"2n9YyfCMyMXembtssQ==\";\n        s[14] = \"qBka3Bq6V31HmcmHjkY=\";\n        s[15] = \"WvyZe6kQ8py7m25ucawJ\";\n        s[16] = \"oYpxMy6BSpZXhVpOR6dXmA==\";\n        s[63] = \"yexFaNKaP+VkVwEUvxQXbC0HSCi/srOY7c036lT25frs4xjIvp214JHCg7OL/XZW3IMe6CDgSMCaaI91eRgM\";\n        s[64] = \"vkqgnuJ3plxNtoveiMJuYLN6wZQLpb3Fg48/zHkdFuDucuMKWVRO/niFRgKsFqcxq6VgCxwQbePiP9sRnxz7wg==\";\n        s[65] = \"YHks3GCb2uVF47Y2tCieiDGJ879Rm5dBhQhQizYhfWOo+BrB2/K+E7wZWTid14lMpM60+5C0N9JNKAcBESeqZZI=\";\n        s[66] = \"z8551jmQp/Qs95tw226+HCHWruKx/JvfBCfQ5p0fF77mkSpp66E552ik2gycrBBsMC/NbznAgTZoMzZxehfJwu49\";\n        s[67] = \"VsR2whqq/qQm342+TNz1lgOZMoWbpCz+kj2zflq0nx7S/ReEVPUJcqgMtVzrr2FVQPfBAH5VRjR+hkxwv4bssQms8Q==\";\n        s[68] = \"5xmIp8dUJZzkisIkuEPsnPXvzDeMo48qWFfHIn2av3jr5qoZHCs0LfNEyepC3v2sa0nCU0FlqsmDyTI5/2jt5zsLtV0=\";\n        s[69] = \"tGEgXjglUB9NbCtiS88AetLtRqhCAnhzOUKVgvbJZHqOA6x8uOorA1t3NcaIA00ZqbPYALu4LzIm4i4lAL9QgiH/Jg7b\";\n        s[70] = \"gFtxEhYJahDmU5dpudYs6ZTsqAx+s2j+06A0zeyb3U7nhZFsbkCDlds0EYUoqerZqZPm7F6CDOOD3dU7nYmelE0DxyMO9A==\";\n        s[71] = \"j/h/1JygYA5bjttxzQxr5gBtgh+AYVozhF4WgvcU/g49v0hUy6FdhfZewGK+Phtzj7RabI5p2zXyzvkmLQdFhdI5Um4O5sw=\";\n        s[72] = \"m+kYVGojIR5pgbz7pGJm2g+3qqk7fhl3cowa2eVrhki7WofyywnRezqTxOkBgVFz6nKs8qxpbbbzALctcPeMsp9dpXUfuUJr\";\n        s[73] = \"pPaGnMr0UYmldnJVk/F+3WCJJ1r2otvD5KJdt2u1RnS6LwhHhwLCqfW8O/QEg43WdxKomGL/JM33tn/B9pMPoIU0QTGjq2GRow==\";\n        s[74] = \"mOxzGyym6T/BxCV5nSiIYMlfAUmCN7gt7+ZTMg1kd8Ptirk+JF5dk8USbWBu/9ZvNg5ZuiJCeGwfaVpqpZ3K9ySF7C87Jvu1RUE=\";\n        s[75] = \"VYLOIE4DnhxJn3FKS/2RHHHYLlZiGVdV/k4uBbtAYHUSTpRzaaYPGNAVjdNwbTHIihmeuk/5YQUy8NFsxIom+Li7bnWiBoHKBPP7\";\n        s[76] = \"7foMpJ0TknCatjUiSxtnuKSiz4Qvl/idWY9UKiTljoQHZ+C8bcUscnI/bZr13e6AvyUh47MlpdGvzIm05qUdMWWLoZJOaGYvDmvrWQ==\";\n        s[77] = \"jxQSGiFs+b1TfE4lDUAPUPJ0SWeUgl03rK6auieWJcarDIHM97gGOHMmyHudRMqkZmIkxYRgYgCCUg/JeU91OZD3tL4U+wNhShywe88=\";\n        s[78] = \"UGmH/gl7t3Dk801vRhRDEbgsfShtHZ1gZQn4KNZ5Qsw3WiGjW0ImInVHa+LSHBzLUjwC0Z3nXO4i4+CiKYqAspOViE6WqVUY8ZSV0Og4\";\n        s[79] = \"wdEoYmJuRng2z2IkAiSgJ1CW2VE7H7oXpYWEFFO8nG0bZn7PHhT8KyhaO2ridl8eUEysja0VXFDyQqSgZnvdUKrCGepWGZbw0/0bDws3Ag==\";\n        s[80] = \"5kZqgrUbt+rN5BWAddeUtm9TGT43vYpB6PeyQwTyy9Vbr0+U/4Qzy0Iw37Ra293HmkmpgQzuScVpcIiFGXPAFWwToR+bovwu7aXji/FnMwk=\";\n        s[81] = \"E467MMmJbmwv8Omc2TdcyMr/30B8izWbf+CAuJtw67b1g9trhC6n4GYnXjeW9DYvmWoIJPx0zvU/Q+gqv0cteg2bx9P2mrgMDARb6egowqjx\";\n        s[82] = \"Vpt8hYb4jx1F+7REX7K65v6eO5F1GDg/K8SVLWDSp0srupYEQkBVRxnB9dmhSo9XHpz4C8pRl8r82fxXZummEf4U2Oh0Dip5rnNtDL+IJvL8lQ==\";\n        s[121] = \"hf69xr9mtFf4N3j2uA9MgLL5Zy94Hjv+VQi94+LS8972JJgDHCQOwP5whdQkV+SJpXkiyHGaSsQ4fhepPwzuZcEpYER+beny1j+M0HSZe36MdRIhlTqno+4qsXckL0CjXsYkJJM0NAfOYjHAus5G1bgi9VhmiMfAMA==\";\n        s[122] = \"yKzTh5hPp9/PBeZtrZXsFHAR9ywOM3hRaBDkgG9E09wFW8MZD0xMGegcp0QrTJcP8QYOaYhTDVimPqsNTVOmjdjkvS+2WhjJW4mVOXQ8KID91yaBtPo+DStL5GMgctcP5MoVf1Vp8w/mYtofqbllfDm5NfYzh2A7ijY=\";\n        s[123] = \"csFmwvDzoO4IO6ySDA4B2V7emEetAwCgO66zzlfWb3KDrPfFZc3Jgr4+dlaUkEIDHYeLHETdTssWOl2KrPHBEsULpDTR+3OhurXb1Qr2NvHiHFuqT3Geb6EYw2albfTmXxch82ablt4WKl4qPcSey54v6tsCuUuZzrkt\";\n        s[124] = \"5InxvKwpoCV7EK78OzU/tL9/NmK14Prw9tOCAyK+xpUNLZriuVEVdgpoZ05rliufaUDGHH8dPAem8G9DN/VOPktB6vXKtc2kMUgnMTiZwv/UVd+xyqnT8PLEdNQ8rCWxyiCcLdXFf0+xcE7qCcwzC+D7+cRW+i6dnpZkyw==\";\n        s[125] = \"cEx7oTsSHWUFPj92cstdy5wGbRcxH+VRWN8kaNTTCPWqSckyU9Xk/jj5/gj9DFwjfsCSp60xutf4/rFanjtwqtRg6dJLP4JAgpOKswDlHi6Vt7zF/w7HidMf2sdtlsqzayZmT2Hn7iOo3CExzr5Z5JfmMFAX8R9peUN4t5U=\";\n        s[126] = \"AeXetVbj+7mmGiCs3BGUSZDLlq2odMsN8JAHQM64Cly8y5jw75PpISocWRFFQmmXYP7ckKmtuhIvD69HtZxGhNRsl1l1gXzKFhsWykcRtG87F8sS1Uv/i6QvGiRIDVEGGIzWrzRIISkBb9wCxJ2HESfleWwrz/GqryjoN26B\";\n        s[127] = \"aj1/8/+U8VO3D2iAwvQXZ4H0KwtuzDm4JCC8+22ccqk+UzKvqjGs87XngwfsMfSkeGVAi6VB6tfNJTjYctaj7R8dwh2PIfLSrvaphw4wNB2REjplnPojoOb9bNUNtUvdK3b1bArOWugIRJWLnMl72yEHFb1iBfBmn7uIa7KT2Q==\";\n        s[128] = \"kiMuF/1CMRlgoS/uLKn1mNZFZNHJNkRQnivOrzj8HQAagwzvTXvsGgI9hXX3qaeZL9/x/Oq+Y5F6Dh+wXo+0kp6JagFjvbTJcQSowFzIwg7/V9sans0NE0Ejow5BfZKvihFI46sHiALl1qzoXqLQq+5fZGIFRyyY8wFW1uiNu9k=\";\n        s[129] = \"YXmCWhiNz4/IhyxQIYjgNvjX+XwDiPTSBMaFELm5X8Y4knGRnkF4/zix8l9wHBb+7Cgfrr46rF7eiIzaAFLjLjjewy63duBJiVbEWjqFO0fu6T9iIjuEaF2sTppvuZNPHx80vN+HLAnAVmgFESw5APXWn15dizvuUfVHd5isCqbA\";\n        s[130] = \"GJfUoBivW5uqDpUxTRfjGWNYfN3/dTFtdRqCIH5L2c1nWX0dgY3ba1+fW/YX1Oh5aw4lC6BIiiThjJoV1VrNnlXzbcUcMy+GsDUUB8Qe8lBvfe/t4RmNPB0hVgrS89ntbuU0SsCmWw+9DqM3nidPebANKERig1zZTBBKgpVf7HPFCA==\";\n        s[131] = \"eTerNs7dOqJAxAxcMQRnUDc2cBj2x0jU1g1D3G+b22kDz7JBzOy/mxhGXAQ3130lavWMhImSBkReU+z0A13EYVMUv9PFzD747KCvns+SCo52YNHB0896b4l47q8hu8jsD17TZ2uWWJhS4cNnSE1jeM6NoXGKvf90yxfzwucNYc4RdaQ=\";\n        s[132] = \"lbrGsjbzE521q8tzVHV7vcTPchUnzI/UfeR2R+cmOa29YljPWLht9Wx2JrjiKv4Of5nXe7kvhi+LYUuFVqgaqIFhC/PLbqOFiT2VZcXorToaRT9CLiqV5b6nHN/Txz6SI7MiD3hnk7psDbglPOo+ytqc9sFHj7UkR1ZctQjwFYwJjlxf\";\n        s[133] = \"mQwAPzYzfxz9FXEiZ6M8u1oN3EJbFYmNVfpm+j0DqgU+OPI4URHBIrF4xvdMvAPn0WuarbQy/ZVN0eKL7S4K3Mvan0flAwaZdI+e5HpkfxOoGTp8Dk5EFTXjmZ/s+GonePEQEGNVPL1WYoD6xXqAAvMLKtyrFcpoiGS9eDBlsZDQzPzz/g==\";\n        s[134] = \"3G6d12UY4l5W7Nnw0BL0HnViVg9SdEuLMqeZwy0RlJR/Ytcgd/mIxIuXXAlGhvhoX6Xc2BGU7RpTi1jYKzA86yul0j96dbcE4OtrP9lUBJlcY9eWz59dvLqKxwt3cEOBwrPf69MHuIa256es3AOCobfC8RQScW0PQ0QUa1VHB/eXSsVTSWg=\";\n        s[135] = \"AxgrZKTFk5JvLC3DBACHwp266FxKI/yn9F+1tYkzL57RVs5HCJYS47VuG0T0E2wqzHqcLKPQMZWU7vbRoyMGNL3ZtaHoZqTqcq9KWtODC+OnEvSS7+1P4SmQDuyL2MJ/eJABJKNcu1K/Lk0buAaO0FvX6OGBcPzu1+dv/ZkwuORK07qRnxqQ\";\n        s[136] = \"atkG8l2U/Nnm+zLu7zjenrfcAVQJMUqHimFZ3cQfaUp4qyrFn1UiwZ33j66Vt63eVaT/FXx+LlEnsHn6ATPBMp3iEYoBJYyNpjz/zROhBbcznQAMdWUTcyKInvnG3x6ExgBXpyqfxxp/Pm8by7LlSUT5MKHdcu+TEfUXRokCr2iPnt7NYsNDfA==\";\n        s[137] = \"dciU1mSHGcBxOAVBgJx75J6DaQdBZfTIzQ04WhkkdRMupOZWSnv19xhz8hiO+ZnbBtDJuO5rHsUGzH/jYacfZyCQ924roRvkh3T1yxsLq3abZJUCD9HYnPTELVhv1+cEF4aoO3vGOu2FpfLUn5QTd0PozsIqcqZVB2V57B7DjfizUe3D8Yf5Vco=\";\n        s[138] = \"dgR1PPacBvtILBmg33s9KWtuc67ndh3rCHZ/lIN7sENgbFqJQy5DC3XIeHTV7oWd+tJQaXxoC71/SU7Rz6OClAMKXLbMz8U6RPiqn3M7MRCQcDfNjA5cCNknXT9Ehz/IZF/7lcWrwxBKYm4B98lPkpZtR2QHndiQ3venzWrP0P5y27mReaFuaJ++\";\n        s[139] = \"1Q8rfp1HuGsxurTgGMakxj5SwNF7EixXxVPnfGADWDcygh5C1BMXqiL1AuVXOVFOsaydfLWGC8Kbh/JiL6H+12lYrNGUT9yJRIzRDi4XylMnrYwBtwCJjoHSi4exz5K2ih54utVAuzXZg6mnc9ied/mNRjj9d2HFD5mv0w/qTN/WFxEmtuZM/nMMag==\";\n        s[140] = \"w01TnPP/F3Vni3fBdV32Bnbb4J1FcbaE+Xn44no5ug77U8FS1gSm3LqJ8yTyXduzl5v2dwBEfziEfTuyqgeLLsCYTBjXmYOIHQosEl6DyAknu4XK52eQW+Fes9eSs2Nq+G4aaR4y4leeFNmCoZ9BQmAAZr0LFkqnvqaKmBVgcgxPs7/8SQHnpqvaU6Y=\";\n        s[141] = \"OfzIF38Tp5g1W5eVbrkrMe0Mm7e0wBYg5hVvLpn/5MW5OFcmRDuBp15ayRBnJ1sBI93+CNl0LwP8Q0z9IXFjTER5gHZ1KfG8NV+oacKNG7aYrbUftkSL/oPfRNPez6U0FuWgvVrXUB6cwKTWvwb9KoD7s6AGYRdH50ZgJdBniFD7dKoOQnJ/ECuTUXI+\";\n        s[142] = \"4hoX0sjqlkSJPUq627iJkNYRbtD+V2qErCuTikaeRDEZvVHWvzdvwj4W1xxJjz+yHAN6z2EjCWidcSsVgTejQ1bH8uTzJgh/zq3yGUSsJoJWrecqxsge8bEBjkm+qUO8G3kAnC6FMjJ2NYQeXf6OK6OgsqyJwlHPTyAms2/IoYTB4iEqgIFG/2fNEJEIag==\";\n        s[143] = \"M/dy14xNbZMRfHiKKFdmD/OrEB+8MexrRO8mMh0i5LrNA5WUtLXdwUfAysYmal94MSoNJfgmwGCoqNwlWZBW1kpQaPdqsrn2cvc6JcZW9FlOx07DERJGbZ6l6ofbzZWgF+yf+hvT6jnJvXBVCTT3lfO3qo4leNuEJwsuU6erXGC3Ch53uPtGIrdDUpcX6/U=\";\n        s[144] = \"GgLr2hd3nK64IZv0JksKAT/yJNQ38ayuWyBnWLjXbEmT048UDppsrrnP6hikRo5v2TlHGhD2dcwG9NLK3Ph8IoIo9Wf2vZWBB+SMI9FpgZxBWLEjwHbOWsHaEQMVsQfk38EWQP0Fr6VyMKlEQfpsRkuCpp1KxscaxK7g5BgXUlb0a2x0F+C9hEB0OVPsj4JN\";\n        s[145] = \"W9lKcLDqNGQAG/sKQNaRmeOUmLJ7GcMNqBaGZ659Rnjr6RTrfnmkp5Z9meALnwXoHjPjzSQDJnVYsY+xyMnuPgl6gMVAhAm+XprYVpsne4vt+7ojUqavVPBqLy5dtnhp1qfcnAiV5cZhHXX7NbxkUOzptjEGCQjnhSH4rPbZtgoIWE8Z6boF3l/thLnFX+AiiQ==\";\n        s[146] = \"iYLn5h9lIhD/x9moaPRnTX6mJEJKThg4WXxS7IrR2zblH26uOkINz0dJNTJVets0ZNYDnsnT7J2iI3Y6hTVWPGoYU49J3B2LhCREs0DZQ3C7080FtiOcfHbfBLNn0DyCK1LeAC7YB/bNdiyhLqH8fKl+0+KhiPDIUBJY2e7IbZR/9t0sxJbIXx6cRvI5AXex12o=\";\n        s[147] = \"SlRJEc7npTUvQq8SgBYKmVY/3wHYp2gsDxafN/JLUuEqEjmWMtW7fxASi+ePX4gmJJqLhD5t+AZxiCwYK3L3ceuJx4TiqVgJz8d6sc7fgWXluh1K+BcGPbZ7+Cq4Vsga7JEBVekviEZ5Ah4apNr8RkB7oMOUVPGxRcyyaVE4zBW+scA6c1yi/HQXddQ9rWyLUsVo\";\n        s[148] = \"AAlbGR6ekLOzx4hpqZTUqVUQ0FL2CFpgCMOp6CuuUzkSnWXpUjvOiSDkNPgoTPgpgmg3uYvMsX43mkPGUGC9awDThXyGQh6u3WfWtmhiPRqXnjFek+EPd0LYXps71non6C9m7nUlYNWzBJ1YzrzWjlB5LLPBN8bsZG6RbdZkYMxJ9J5ta/c30m8wDDNuTm0nEE0ZVQ==\";\n        s[149] = \"nWWbBhzObqwEFh/TiKREcsqLYbRjIcZflJpol16Mi4YDL6EZri22qRnTgrBtIY+HieTYWuLaCSk/B9WcYujoS6Jb5dyg3FQ6XF9bYaNQGx2w8DHgx0k2nqH/0U1sAU0kft32aD2orqCMIprbO1WJIt2auRnvcOTFoOax926nAkxvR3nrFVDevFjDbugpWHkGwic6G7o=\";\n        s[150] = \"WNk1Rn2qtG+gk0AEewrgo+aRbNrG4CgQpOR8Uo7c2m2XQY8MVDu4uRA6rzYGGdgqTcICKky9MvHeJeNWVAXOxmA4EdXQ2xItFJdQtxBt56cad9FBXXsz21yVsPr5d453abi7T3XfHVTToekiOlxAJs+bpat9cFRbIdHghO9wc/ucoArT53vpYsnyeVnmZG2PX48lXpNS\";\n        s[151] = \"wVmiO6mdf2aahrJlcmnBD0Qa58y8AvzXtJ54ImxgPLPn0NCQIrmUxzNZNTODE3WO6kZMECaT/REqT3PoOBp9stCHCFNXOM7979J44C1ZRU0yPCha00kQZBF5EmcLitVCz10tP8gG1fiIvMjwpd2ZTOaY4/g4NeJHLjJPll0c5nbH7n4v+1I+xG7/7k7G6N8sp21pbgpTYA==\";\n        s[152] = \"OoiVZosI+KG0EZTu+WpH7kKISxmO1zRYaSPMBMW0AyRiC2iZVEkOMiKn12XPqIDSW/kVA58cvv/ysTAzKLTu78Uo+sVcJe3AtLdgeA9vORFELTP4v9DQ/mAmehe3N8xk+VTLY6xHWi6f4j9cTDW/BDyJSDRY00oYoHlvnjgHo4CHBo0sMGgX3CwcnK2hpMFVtB/3qPl6v2w=\";\n        s[153] = \"97ZVsTYwD8VrgN1FOIRZ8jm8OMgrxG3o1aJoYtPVWXp9cjjlgXqTMZVsoWr3pr7pudw+LYo1Ejz3JpiUPHqWcZ2PWrWs7PR1akYGuwdCBHYvCGTcZYFe/yu1AB8w5zYsl1eJR45g0u1DlXfx5BUAUzc4yJDjc48Ls62bn8t0EJ7+30sWwifqKuz2EHpsqp1j/iMlwzKJGjGE\";\n        s[154] = \"0NSYKTvBKKInwL9PJ/pWUWVX4gjF3igsA2qqQMsRew0lI1LcCB18eGCYk0AnyUCe99w5lWHGFUMMeH6DZciAylWGeDn19JdzVOTevBWk3LIujI1GvsEB3oVqf2Zl9IZeDGCT4+bQKBWvgcXHjysZfnn/5z9Xz06qrPqac5LfS36fDcwnkrUYQWDsL2Ike32ALmOnkcDjNq1BoA==\";\n        s[155] = \"5ok+rYI4LCgGa2psGUN/fdkT2gQEToB9HRiFXQpe2YcQvEN2z7YlJCETx4jSWw06p5Y8tZcp08moKNYwUJ40DvPpGlDG+wUpFhC4kkfo6vj6TrCj5yoWJi5D+qdgH2T0JeWM80cYN0bsOsetdaqNhDONlYXZ2lVYkyVS/wzw8K5xX87EWktwOwFq/yYhuWCYJ9GZL7QuDipJjEE=\";\n        s[156] = \"KHzTalU9wPSnIjh5g0eHi1HUaFufxJpXpjDe0N3wEKINqbgzhbj3Kf4qWjb2d1A+0Mlu9tYF/kA9ONjda5jYfRgCHm5mUrjU0TAyT7EQFZ2u6WFK/sFHP++ycJQk8k7KLPUWA5OWScy1EO+dYF4d0r6K5O+7H/rpknxN6M9FlP8sH83DXK1Sd+UXL32D+4flF580FaZ5B3Tkx3dH\";\n        s[157] = \"RrJVxIKoDXtCviWMv/SXMO42Dn6UWOKDy2hh2ASXssT0e+G6m7F1230iJWlEN0wBR8p+BlTdBhQrn25098P3K16rBmZpzw/5dmesIJxhYPaM4GiaOgztFjuScTgkmV0Jl/vZ9eCXdEVNISeXkIixM4pssTFuUV7PY/Upzdj55rDKGLr1eT7AFVSNP30PhL8zZs8MANqKBeKBBDvtww==\";\n        s[158] = \"sy4t5rFA75GRBE+Dqa9sQxjPluKt/JnEY54guHnKqccmx3HGiyJ0jUA+et4XO8Xg69wCA9xVxJZQL73z80mVfIf43HIKOxgxT2IjG7EKMOD/qx6NnMTve4BryggLtbLQUeRfhriQeY7h65tD9ierhccXoXDpGnmBn9m2BQP78y+Qhc4eIsa3LcxbQJUIwvURjFp/rgMD7lhOLboa/2Y=\";\n        s[159] = \"Zs/BfFoWImYau2dZLb7JneeTQp7sQ06yonEq0Ya4BNOJGy/5dGH42ozt0PpP2IZ/S58X7esVgc6jA1y3Bcxj3MPoDjQJSZHFEtR3G31T8eF5OpPVC4dw9s9clllM05tvcemssLdcd85UP/xBaDrmpAl8ZDSc73zflK3nJw8e0HQFYntNnlZPFyyyBLHnLycb6Jlvq7F2OqrZR+FXZnL3\";\n        s[160] = \"hdeDJuRnmb8q9EYec8+futT/CvqhpqoUdtmG6E31RrYJDs96M5Wfng90IEqrncZe4rVYDocRZK23dvqtJaPhTUBXXh42IyMlUnro69KI+075FvYYwgVaUd10r7ExWM5Z7DCQ2x8Tm1meK2YCTPkF1VXXexl1UjYCnRQuQxppdophMwroJK8VqlJbFFslchTSBFuI7wgcdy+f/LHMbMsusQ==\";\n        s[161] = \"ClCCOv0mD9//LR0OisHfamxcTvmlwMLgAIQt3hbOjRPkXwEgaDzP0u6LN8BNwdOVw+LhrbzMI8zQzHvo7mGPkQICeeim/x+xmGPQtmWnXxCWiL1uf/8eR5Wuy9Er8skTB8rG4/ubb2ssvCkubObPAkMSOgFnX9UtxnCN4+nMNV2vvn4xMTSvvQyYWewfnlNkflTyva1epE9RVW2RqRtJikY=\";\n        s[162] = \"Fs+AmFCnUr/imw8D0GpNidIP9qwW8yRAzmtqPS+vT6n5U4YFQcpgbznrYO4TPqkVF2oz1mpgLYIgx/u2XsrtljGX46LfY8OyUPaw4/da38QGngoIlS2cN01cgN3efSjMlnZFo1x8T9p0Nn1IgRgevOd5ezVUL7WdY7eeiE1pXXcGBgDYn7NDQph0dC6HDlBiS95bDFcZ+6FYigE4WybpsOHL\";\n        s[163] = \"wgO4DdGZy9g13IuOhkJGJcToyLuCBVm9T/c8qY4NOheVU1NW2g8sPIo+RiEsSST8sx6+Jh/A/kaCxYvJ9CsgnBjZMMWRsd383HZAoJtkxwKvyoeXzzD+puFvqKQBEKrlBEwffXhLDoFQAW2ycYtBGztl0GsUtoOob2nv7ienx1xD6KNZNaxYx2ObRAYS/e8LS3pg5dku9MPBp1X12m8ZIXRAaw==\";\n        s[164] = \"EkXt02SaRUIjFmoLxyO6N+giL4iA4fY0Exao+mjgEfZ+Wv6w95GXHBI1xlYMVLkOcnu9nescvcXQH0OrqL9uforEUTGTSg2ci67m4GrwAryMy+5eUo77Q5GpWKfsg8nDbD8a3gUI/9EE0sCNp7tMaKwoJ56cxhbG3TJYpqWTpq3/S3q76x+3ETL+zxh6EMh8MJPfWcIxlDS7evKqdPgS00KgUtk=\";\n        s[165] = \"OuBqx5LFJroRbDn41+4azFHlKgw6bMgbsRGaK9UnPvi5xfmV4SLQ2YzIhopGi1F57L6vKukaW0XlFk/Ff5Td5IMC7U+kvXKlf8fGIIQ8FaHI0vbIX89OJlBqlICqftSNiVRxtaE+aCh0rBoDfgPwuC8qBC20I1O3ZLuKfeUVGkMOLEWeZLS6mmcn3cSERj9o/dEl8QYwQvhH+VG6YWF//yki1Vu8\";\n        s[166] = \"SO/vDsqZDdImOdH19sZI7FUVhlx1EI0XRr8ArTuAG5F8LDK76Bct2C7fXTUowilXnJWhQxvbGiulkUGSuVjVP12zac9bShRpr1L3ucde7n1f9y/NcHJCwdqTLq7RYygItQ4ppQGiP9jXf2Dn/qmVZZTh+SY3AZCIS+OVo2LAiYJHWnzzoX8Zt+dOYiOA/ZQKZieVJlc8ks+2xqYPD55eH0btZn5hzA==\";\n        s[167] = \"tZL/qACMO9SzmgJhWQMsbKgE5lPAEbxn3NR7504ilgArR8j7uv1KF46uQyjrkEnyBormYB/6nLGlHht62IQftMYf5gHpHFfTvukRKF8728yIYAAYHPQ/WjHzHdVSqUJqF2a8RE6SvvY+KSKWLMU3hjn1f6dqX599hYD7AnbPGTpFKDU5sLFOXbuynU1sPUhP+a4Hev9yNU6atLDo4CkX/Yq3FbpWVuQ=\";\n        s[168] = \"GRe7uF1wH5/71B3vmGF+pN3H9PKO1tLwsnb0D4/Pm7Pu5KAe4OfelkfFIBgyjuoZrpeEkGZnb+qf+Kn7Kt1hDwYr/Mb9ewuwOXsbIpLQMgfh0I5XsPrWocduVzn+u/cm3cr0Z11zsx0AZjTqvslACkDqiquY41JhtGdc22RCvIYom2l+zzMIMyCPsHeCSB1MBu8EWK3iP7SD3dWttwzMg0xanoPDgk0U\";\n        s[169] = \"8BDFu+29lptlGSjcZe7ghWaUgIzbuUpM5XDFbtJVQPEd3bAE0cGRlQE9EhKXi5J/IskYNrQ357tBhA+UNDNXCibT2AZGpzWAcwE6dP+14FuRL5Gxqh/teuPYKr5IIn7M3SbgOychZzLI7HGCvVhBUiJBu8orI3WmAIVcUhAsMGHsFveck/ZCXQA+Uq/WVnW1VNs6hSmIhsAFc51qsmsQK07z2Wptx4rRjw==\";\n        s[170] = \"siPSXD4u36WYtTvvDzRlFPiuZMnRczrL3eA15955JDCc6/V2Cvu6m/HPO6JxogxO0aYTZ5tejYDOIZgBy40DgUZMqPJ2IpYjsmUbjjJU8u/OpwhMon525m3v0EYlvyj2Qp3pwFKDkvncK3aNjN3KaaX6HuIy6kyqsDl0BTEnB5iJyHLRBCkeznTK019u48Yfsrz2oGuZcWzNj5/vKMdxQPiyJ9EHyox8Ark=\";\n        s[171] = \"+/14PnFQVZ7BTHKUvkTtRrYS7WnPND5gZ5byMhUrDLkJa6UPBV7z0nrDMifEo/dQfUq3EjCiG6xGVhrUvAzgxqOQZTW1Y9p9M0KWW+E0XvCQppHFpuMqF1vYsF0OD6AMiE9JtGnWs3JcaWP/XBF/CvhQlFGbHi3fbrD/haTEBnmpJWBgMdKribdbXHtBSFZ2MzCX2eDtxoDdRdEVGs4v/q8gVBS+WsnZ3TTF\";\n        s[172] = \"31I1ja+B+aopKkztGzJYvJEWAshyoAAV5yve4LnP0kdImUQaVETSuo5CDIYr7zM8MCD1eYPpLicmGnA+C927o9QGAVL3ctO/DCWhNinW7NmeYIM+o4diKBkDPjHmSWa+nq4nr+gOap4CtwL2wW2B5Yqt26pKgN9uAU5CmTL26hYFgMEOZfrkQ7XdYGy2CN8RJLmjeSFVVNBG/FTaK7tpuy0LQSkko6wczBYGeg==\";\n        s[173] = \"XbRfDqGe3eeI1tHx8UnPneDB57N8VeSSzXzVCNSgxOEfd6d/un5CDxHG+m4w3tIbtSky4R2+zMF+S5cRvTOwZ/veegYtLKTxA0mVedWLFkfh/v4NgPJ+NEU+cylbSSZLAeBofDvoJwnYKujN2KFa8PGAxr3Y8ry3qdkS8Ob1ZiHYAmLvKS9sGb/vjTvRy+a4Q7kOepsm7PYisinKelBAvDnjli6/lOutGrenjX4=\";\n        s[174] = \"jGEj/AaBefac9uOcmGuO9nH+N+zMsC4qAe6ZUEMMIXdTGnSWl7Xt0/nKqyOj3ZH249HwkJ8bn5C+0bzOpQ1eA3PxEq6RfKMrjHJPJmTZXrSESTjfj3oNLU/CqqDOqd8znTgN6nvnUdCeStLMh9bmWF1+0G11nDwg6GQWWQ0zjVDTq5j7ocXcFOyUcu0cyl5YDcUP0i2mA2JullInU2uBte7nToeSGB3FJxKueBbv\";\n        s[175] = \"RAzNCxlP2S/8LfbGtlSDShox8cSgmJMOc2xPFs8egZVJiwlmnS3aBWKPRbbxkZiVVYlu4GNJNwbocc6dgrl28HXAsYikE5wwoQ1MeOJWU3zzFiYENh7SLBQfjVPQHucctr8P6Rl7YL5wHc+aC+m92R3bnzm5rp1PeHm7uzy2iUUN0cgfbwJ4FrpXhVMTsAUpTbg1+037EWcGOuxir4dG2xBfgOwa+ejFHkw7y0LWRw==\";\n        s[176] = \"08hmZptBGKKqR6Qz9GNc2Wk1etgU/KogbiPQmAh5IXlTBc97DuEToL4Bb889nfObVQ/WelmiCS8wEjSBdmnlkkU7/b5UT3P4k1pB6ZxPH9Qldj5aazkA/yCb0kzDfJlcdFOh1eAcu5LvwTXOizmPwsDvJEnOkaDZrKESZshsHU2A6Mx6awk9/orf6iBlJHQIIH3l4o3b1gx2TNb/hUgdAlwtQDhvKO3skB0PS+rcWAw=\";\n        s[177] = \"0GhrgbSSHPLWtyS2mnSxrNAj/dyrFQcxIgPjT7+78SZ1ZTGc03vsmlZ4Z/bOO84E9yKblaI5dSHVXrx57L0kikL8tgKCsAkUNO3l/4zv5FfCrRTgGx4sFTFB1NNcLcwagkvFzde764DjYmj4YZhYsXSZCVKi0uu5M8fpgGDZ9UMSFR008cbhaIoFLWSANqiNJYSvTQZhGWfLtIPGLN+gIOMcaKhx1b5vg6OYSz6ScAM/\";\n        s[178] = \"2VGiMV/f2hNZAjw3fdeHx/wRIVzeP018lZynzwSySG/zQBxyRmi3YmKVZmh3aJunuiqmvdt0kJ6lX7M8BajYHPCBkqJOx8oPJ/K1oADxVgnavZ69dKYrSy9/Pm6sHxjFrdSz9TelUK9sgoFTWS6GxgzWEqXRBDDpGUnsNbSEcWLPKVLNNoYAcltY98JZaNSZBXcpa9FeSN7sVU43q2IEcDx3ZkJzRJpl/lb7n+ivMwX/OQ==\";\n        s[179] = \"iMSCh1m5vct3C7LEn5wKRYtalzvG6pKahG19rTb6Z9q7+buDsML5yM6NqDvoVxt3Dv7KRwdS3xG/Pyb7bJGvQ2a4FhRnTa4HvPvl3cpJdMgCCvsXeXXoML4pHzFlpP0bNsMoupmhQ0khAW51PAr4B165u1y5ULpruxE+dGx/HJUQyMfGhOSZ5jDKKxD5TNYQkDEY28Xqln6Fj8duzQLzMIgSoD8KGZKD8jm6/f8Vwvf43NE=\";\n        s[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8h8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+FFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39YSfbE890TPBgm\";\n    }",
        "begin_line": 52,
        "end_line": 151,
        "comment": " These strings were generated from random byte[] arrays fed into commons-codec-1.3.jar ",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 35)",
            "(line 54,col 9)-(line 54,col 18)",
            "(line 55,col 9)-(line 55,col 22)",
            "(line 56,col 9)-(line 56,col 22)",
            "(line 57,col 9)-(line 57,col 22)",
            "(line 58,col 9)-(line 58,col 26)",
            "(line 59,col 9)-(line 59,col 26)",
            "(line 60,col 9)-(line 60,col 26)",
            "(line 61,col 9)-(line 61,col 30)",
            "(line 62,col 9)-(line 62,col 30)",
            "(line 63,col 9)-(line 63,col 30)",
            "(line 64,col 9)-(line 64,col 35)",
            "(line 65,col 9)-(line 65,col 35)",
            "(line 66,col 9)-(line 66,col 35)",
            "(line 67,col 9)-(line 67,col 39)",
            "(line 68,col 9)-(line 68,col 39)",
            "(line 69,col 9)-(line 69,col 39)",
            "(line 70,col 9)-(line 70,col 43)",
            "(line 71,col 9)-(line 71,col 103)",
            "(line 72,col 9)-(line 72,col 107)",
            "(line 73,col 9)-(line 73,col 107)",
            "(line 74,col 9)-(line 74,col 107)",
            "(line 75,col 9)-(line 75,col 111)",
            "(line 76,col 9)-(line 76,col 111)",
            "(line 77,col 9)-(line 77,col 111)",
            "(line 78,col 9)-(line 78,col 115)",
            "(line 79,col 9)-(line 79,col 115)",
            "(line 80,col 9)-(line 80,col 115)",
            "(line 81,col 9)-(line 81,col 119)",
            "(line 82,col 9)-(line 82,col 119)",
            "(line 83,col 9)-(line 83,col 119)",
            "(line 84,col 9)-(line 84,col 123)",
            "(line 85,col 9)-(line 85,col 123)",
            "(line 86,col 9)-(line 86,col 123)",
            "(line 87,col 9)-(line 87,col 127)",
            "(line 88,col 9)-(line 88,col 127)",
            "(line 89,col 9)-(line 89,col 127)",
            "(line 90,col 9)-(line 90,col 131)",
            "(line 91,col 9)-(line 91,col 184)",
            "(line 92,col 9)-(line 92,col 184)",
            "(line 93,col 9)-(line 93,col 184)",
            "(line 94,col 9)-(line 94,col 188)",
            "(line 95,col 9)-(line 95,col 188)",
            "(line 96,col 9)-(line 96,col 188)",
            "(line 97,col 9)-(line 97,col 192)",
            "(line 98,col 9)-(line 98,col 192)",
            "(line 99,col 9)-(line 99,col 192)",
            "(line 100,col 9)-(line 100,col 196)",
            "(line 101,col 9)-(line 101,col 196)",
            "(line 102,col 9)-(line 102,col 196)",
            "(line 103,col 9)-(line 103,col 200)",
            "(line 104,col 9)-(line 104,col 200)",
            "(line 105,col 9)-(line 105,col 200)",
            "(line 106,col 9)-(line 106,col 204)",
            "(line 107,col 9)-(line 107,col 204)",
            "(line 108,col 9)-(line 108,col 204)",
            "(line 109,col 9)-(line 109,col 208)",
            "(line 110,col 9)-(line 110,col 208)",
            "(line 111,col 9)-(line 111,col 208)",
            "(line 112,col 9)-(line 112,col 212)",
            "(line 113,col 9)-(line 113,col 212)",
            "(line 114,col 9)-(line 114,col 212)",
            "(line 115,col 9)-(line 115,col 216)",
            "(line 116,col 9)-(line 116,col 216)",
            "(line 117,col 9)-(line 117,col 216)",
            "(line 118,col 9)-(line 118,col 220)",
            "(line 119,col 9)-(line 119,col 220)",
            "(line 120,col 9)-(line 120,col 220)",
            "(line 121,col 9)-(line 121,col 224)",
            "(line 122,col 9)-(line 122,col 224)",
            "(line 123,col 9)-(line 123,col 224)",
            "(line 124,col 9)-(line 124,col 228)",
            "(line 125,col 9)-(line 125,col 228)",
            "(line 126,col 9)-(line 126,col 228)",
            "(line 127,col 9)-(line 127,col 232)",
            "(line 128,col 9)-(line 128,col 232)",
            "(line 129,col 9)-(line 129,col 232)",
            "(line 130,col 9)-(line 130,col 236)",
            "(line 131,col 9)-(line 131,col 236)",
            "(line 132,col 9)-(line 132,col 236)",
            "(line 133,col 9)-(line 133,col 240)",
            "(line 134,col 9)-(line 134,col 240)",
            "(line 135,col 9)-(line 135,col 240)",
            "(line 136,col 9)-(line 136,col 244)",
            "(line 137,col 9)-(line 137,col 244)",
            "(line 138,col 9)-(line 138,col 244)",
            "(line 139,col 9)-(line 139,col 248)",
            "(line 140,col 9)-(line 140,col 248)",
            "(line 141,col 9)-(line 141,col 248)",
            "(line 142,col 9)-(line 142,col 252)",
            "(line 143,col 9)-(line 143,col 252)",
            "(line 144,col 9)-(line 144,col 252)",
            "(line 145,col 9)-(line 145,col 256)",
            "(line 146,col 9)-(line 146,col 256)",
            "(line 147,col 9)-(line 147,col 256)",
            "(line 148,col 9)-(line 148,col 260)",
            "(line 149,col 9)-(line 149,col 260)",
            "(line 150,col 9)-(line 150,col 260)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.initCHUNKED_STRINGS()",
        "snippet": "    private static void initCHUNKED_STRINGS() {\n        final String[] c = CHUNKED_STRINGS;\n        c[0] = \"\";\n        c[1] = \"uA==\\r\\n\";\n        c[2] = \"z9w=\\r\\n\";\n        c[3] = \"TQ+Z\\r\\n\";\n        c[4] = \"bhjUYA==\\r\\n\";\n        c[5] = \"1cO9td8=\\r\\n\";\n        c[6] = \"sMxHoJf5\\r\\n\";\n        c[7] = \"jQcPlDsZzw==\\r\\n\";\n        c[8] = \"TAaPnfW/CYU=\\r\\n\";\n        c[9] = \"cXTZuwzXPONS\\r\\n\";\n        c[10] = \"Ltn/ZTV4IjT6OA==\\r\\n\";\n        c[11] = \"6fh+jdU31SOmWrc=\\r\\n\";\n        c[12] = \"E/5MoD4qCvDuTcFA\\r\\n\";\n        c[13] = \"2n9YyfCMyMXembtssQ==\\r\\n\";\n        c[14] = \"qBka3Bq6V31HmcmHjkY=\\r\\n\";\n        c[15] = \"WvyZe6kQ8py7m25ucawJ\\r\\n\";\n        c[16] = \"oYpxMy6BSpZXhVpOR6dXmA==\\r\\n\";\n        c[63] = \"yexFaNKaP+VkVwEUvxQXbC0HSCi/srOY7c036lT25frs4xjIvp214JHCg7OL/XZW3IMe6CDgSMCa\\r\\naI91eRgM\\r\\n\";\n        c[64] = \"vkqgnuJ3plxNtoveiMJuYLN6wZQLpb3Fg48/zHkdFuDucuMKWVRO/niFRgKsFqcxq6VgCxwQbePi\\r\\nP9sRnxz7wg==\\r\\n\";\n        c[65] = \"YHks3GCb2uVF47Y2tCieiDGJ879Rm5dBhQhQizYhfWOo+BrB2/K+E7wZWTid14lMpM60+5C0N9JN\\r\\nKAcBESeqZZI=\\r\\n\";\n        c[66] = \"z8551jmQp/Qs95tw226+HCHWruKx/JvfBCfQ5p0fF77mkSpp66E552ik2gycrBBsMC/NbznAgTZo\\r\\nMzZxehfJwu49\\r\\n\";\n        c[67] = \"VsR2whqq/qQm342+TNz1lgOZMoWbpCz+kj2zflq0nx7S/ReEVPUJcqgMtVzrr2FVQPfBAH5VRjR+\\r\\nhkxwv4bssQms8Q==\\r\\n\";\n        c[68] = \"5xmIp8dUJZzkisIkuEPsnPXvzDeMo48qWFfHIn2av3jr5qoZHCs0LfNEyepC3v2sa0nCU0FlqsmD\\r\\nyTI5/2jt5zsLtV0=\\r\\n\";\n        c[69] = \"tGEgXjglUB9NbCtiS88AetLtRqhCAnhzOUKVgvbJZHqOA6x8uOorA1t3NcaIA00ZqbPYALu4LzIm\\r\\n4i4lAL9QgiH/Jg7b\\r\\n\";\n        c[70] = \"gFtxEhYJahDmU5dpudYs6ZTsqAx+s2j+06A0zeyb3U7nhZFsbkCDlds0EYUoqerZqZPm7F6CDOOD\\r\\n3dU7nYmelE0DxyMO9A==\\r\\n\";\n        c[71] = \"j/h/1JygYA5bjttxzQxr5gBtgh+AYVozhF4WgvcU/g49v0hUy6FdhfZewGK+Phtzj7RabI5p2zXy\\r\\nzvkmLQdFhdI5Um4O5sw=\\r\\n\";\n        c[72] = \"m+kYVGojIR5pgbz7pGJm2g+3qqk7fhl3cowa2eVrhki7WofyywnRezqTxOkBgVFz6nKs8qxpbbbz\\r\\nALctcPeMsp9dpXUfuUJr\\r\\n\";\n        c[73] = \"pPaGnMr0UYmldnJVk/F+3WCJJ1r2otvD5KJdt2u1RnS6LwhHhwLCqfW8O/QEg43WdxKomGL/JM33\\r\\ntn/B9pMPoIU0QTGjq2GRow==\\r\\n\";\n        c[74] = \"mOxzGyym6T/BxCV5nSiIYMlfAUmCN7gt7+ZTMg1kd8Ptirk+JF5dk8USbWBu/9ZvNg5ZuiJCeGwf\\r\\naVpqpZ3K9ySF7C87Jvu1RUE=\\r\\n\";\n        c[75] = \"VYLOIE4DnhxJn3FKS/2RHHHYLlZiGVdV/k4uBbtAYHUSTpRzaaYPGNAVjdNwbTHIihmeuk/5YQUy\\r\\n8NFsxIom+Li7bnWiBoHKBPP7\\r\\n\";\n        c[76] = \"7foMpJ0TknCatjUiSxtnuKSiz4Qvl/idWY9UKiTljoQHZ+C8bcUscnI/bZr13e6AvyUh47MlpdGv\\r\\nzIm05qUdMWWLoZJOaGYvDmvrWQ==\\r\\n\";\n        c[77] = \"jxQSGiFs+b1TfE4lDUAPUPJ0SWeUgl03rK6auieWJcarDIHM97gGOHMmyHudRMqkZmIkxYRgYgCC\\r\\nUg/JeU91OZD3tL4U+wNhShywe88=\\r\\n\";\n        c[78] = \"UGmH/gl7t3Dk801vRhRDEbgsfShtHZ1gZQn4KNZ5Qsw3WiGjW0ImInVHa+LSHBzLUjwC0Z3nXO4i\\r\\n4+CiKYqAspOViE6WqVUY8ZSV0Og4\\r\\n\";\n        c[79] = \"wdEoYmJuRng2z2IkAiSgJ1CW2VE7H7oXpYWEFFO8nG0bZn7PHhT8KyhaO2ridl8eUEysja0VXFDy\\r\\nQqSgZnvdUKrCGepWGZbw0/0bDws3Ag==\\r\\n\";\n        c[80] = \"5kZqgrUbt+rN5BWAddeUtm9TGT43vYpB6PeyQwTyy9Vbr0+U/4Qzy0Iw37Ra293HmkmpgQzuScVp\\r\\ncIiFGXPAFWwToR+bovwu7aXji/FnMwk=\\r\\n\";\n        c[81] = \"E467MMmJbmwv8Omc2TdcyMr/30B8izWbf+CAuJtw67b1g9trhC6n4GYnXjeW9DYvmWoIJPx0zvU/\\r\\nQ+gqv0cteg2bx9P2mrgMDARb6egowqjx\\r\\n\";\n        c[82] = \"Vpt8hYb4jx1F+7REX7K65v6eO5F1GDg/K8SVLWDSp0srupYEQkBVRxnB9dmhSo9XHpz4C8pRl8r8\\r\\n2fxXZummEf4U2Oh0Dip5rnNtDL+IJvL8lQ==\\r\\n\";\n        c[121] = \"hf69xr9mtFf4N3j2uA9MgLL5Zy94Hjv+VQi94+LS8972JJgDHCQOwP5whdQkV+SJpXkiyHGaSsQ4\\r\\nfhepPwzuZcEpYER+beny1j+M0HSZe36MdRIhlTqno+4qsXckL0CjXsYkJJM0NAfOYjHAus5G1bgi\\r\\n9VhmiMfAMA==\\r\\n\";\n        c[122] = \"yKzTh5hPp9/PBeZtrZXsFHAR9ywOM3hRaBDkgG9E09wFW8MZD0xMGegcp0QrTJcP8QYOaYhTDVim\\r\\nPqsNTVOmjdjkvS+2WhjJW4mVOXQ8KID91yaBtPo+DStL5GMgctcP5MoVf1Vp8w/mYtofqbllfDm5\\r\\nNfYzh2A7ijY=\\r\\n\";\n        c[123] = \"csFmwvDzoO4IO6ySDA4B2V7emEetAwCgO66zzlfWb3KDrPfFZc3Jgr4+dlaUkEIDHYeLHETdTssW\\r\\nOl2KrPHBEsULpDTR+3OhurXb1Qr2NvHiHFuqT3Geb6EYw2albfTmXxch82ablt4WKl4qPcSey54v\\r\\n6tsCuUuZzrkt\\r\\n\";\n        c[124] = \"5InxvKwpoCV7EK78OzU/tL9/NmK14Prw9tOCAyK+xpUNLZriuVEVdgpoZ05rliufaUDGHH8dPAem\\r\\n8G9DN/VOPktB6vXKtc2kMUgnMTiZwv/UVd+xyqnT8PLEdNQ8rCWxyiCcLdXFf0+xcE7qCcwzC+D7\\r\\n+cRW+i6dnpZkyw==\\r\\n\";\n        c[125] = \"cEx7oTsSHWUFPj92cstdy5wGbRcxH+VRWN8kaNTTCPWqSckyU9Xk/jj5/gj9DFwjfsCSp60xutf4\\r\\n/rFanjtwqtRg6dJLP4JAgpOKswDlHi6Vt7zF/w7HidMf2sdtlsqzayZmT2Hn7iOo3CExzr5Z5Jfm\\r\\nMFAX8R9peUN4t5U=\\r\\n\";\n        c[126] = \"AeXetVbj+7mmGiCs3BGUSZDLlq2odMsN8JAHQM64Cly8y5jw75PpISocWRFFQmmXYP7ckKmtuhIv\\r\\nD69HtZxGhNRsl1l1gXzKFhsWykcRtG87F8sS1Uv/i6QvGiRIDVEGGIzWrzRIISkBb9wCxJ2HESfl\\r\\neWwrz/GqryjoN26B\\r\\n\";\n        c[127] = \"aj1/8/+U8VO3D2iAwvQXZ4H0KwtuzDm4JCC8+22ccqk+UzKvqjGs87XngwfsMfSkeGVAi6VB6tfN\\r\\nJTjYctaj7R8dwh2PIfLSrvaphw4wNB2REjplnPojoOb9bNUNtUvdK3b1bArOWugIRJWLnMl72yEH\\r\\nFb1iBfBmn7uIa7KT2Q==\\r\\n\";\n        c[128] = \"kiMuF/1CMRlgoS/uLKn1mNZFZNHJNkRQnivOrzj8HQAagwzvTXvsGgI9hXX3qaeZL9/x/Oq+Y5F6\\r\\nDh+wXo+0kp6JagFjvbTJcQSowFzIwg7/V9sans0NE0Ejow5BfZKvihFI46sHiALl1qzoXqLQq+5f\\r\\nZGIFRyyY8wFW1uiNu9k=\\r\\n\";\n        c[129] = \"YXmCWhiNz4/IhyxQIYjgNvjX+XwDiPTSBMaFELm5X8Y4knGRnkF4/zix8l9wHBb+7Cgfrr46rF7e\\r\\niIzaAFLjLjjewy63duBJiVbEWjqFO0fu6T9iIjuEaF2sTppvuZNPHx80vN+HLAnAVmgFESw5APXW\\r\\nn15dizvuUfVHd5isCqbA\\r\\n\";\n        c[130] = \"GJfUoBivW5uqDpUxTRfjGWNYfN3/dTFtdRqCIH5L2c1nWX0dgY3ba1+fW/YX1Oh5aw4lC6BIiiTh\\r\\njJoV1VrNnlXzbcUcMy+GsDUUB8Qe8lBvfe/t4RmNPB0hVgrS89ntbuU0SsCmWw+9DqM3nidPebAN\\r\\nKERig1zZTBBKgpVf7HPFCA==\\r\\n\";\n        c[131] = \"eTerNs7dOqJAxAxcMQRnUDc2cBj2x0jU1g1D3G+b22kDz7JBzOy/mxhGXAQ3130lavWMhImSBkRe\\r\\nU+z0A13EYVMUv9PFzD747KCvns+SCo52YNHB0896b4l47q8hu8jsD17TZ2uWWJhS4cNnSE1jeM6N\\r\\noXGKvf90yxfzwucNYc4RdaQ=\\r\\n\";\n        c[132] = \"lbrGsjbzE521q8tzVHV7vcTPchUnzI/UfeR2R+cmOa29YljPWLht9Wx2JrjiKv4Of5nXe7kvhi+L\\r\\nYUuFVqgaqIFhC/PLbqOFiT2VZcXorToaRT9CLiqV5b6nHN/Txz6SI7MiD3hnk7psDbglPOo+ytqc\\r\\n9sFHj7UkR1ZctQjwFYwJjlxf\\r\\n\";\n        c[133] = \"mQwAPzYzfxz9FXEiZ6M8u1oN3EJbFYmNVfpm+j0DqgU+OPI4URHBIrF4xvdMvAPn0WuarbQy/ZVN\\r\\n0eKL7S4K3Mvan0flAwaZdI+e5HpkfxOoGTp8Dk5EFTXjmZ/s+GonePEQEGNVPL1WYoD6xXqAAvML\\r\\nKtyrFcpoiGS9eDBlsZDQzPzz/g==\\r\\n\";\n        c[134] = \"3G6d12UY4l5W7Nnw0BL0HnViVg9SdEuLMqeZwy0RlJR/Ytcgd/mIxIuXXAlGhvhoX6Xc2BGU7RpT\\r\\ni1jYKzA86yul0j96dbcE4OtrP9lUBJlcY9eWz59dvLqKxwt3cEOBwrPf69MHuIa256es3AOCobfC\\r\\n8RQScW0PQ0QUa1VHB/eXSsVTSWg=\\r\\n\";\n        c[135] = \"AxgrZKTFk5JvLC3DBACHwp266FxKI/yn9F+1tYkzL57RVs5HCJYS47VuG0T0E2wqzHqcLKPQMZWU\\r\\n7vbRoyMGNL3ZtaHoZqTqcq9KWtODC+OnEvSS7+1P4SmQDuyL2MJ/eJABJKNcu1K/Lk0buAaO0FvX\\r\\n6OGBcPzu1+dv/ZkwuORK07qRnxqQ\\r\\n\";\n        c[136] = \"atkG8l2U/Nnm+zLu7zjenrfcAVQJMUqHimFZ3cQfaUp4qyrFn1UiwZ33j66Vt63eVaT/FXx+LlEn\\r\\nsHn6ATPBMp3iEYoBJYyNpjz/zROhBbcznQAMdWUTcyKInvnG3x6ExgBXpyqfxxp/Pm8by7LlSUT5\\r\\nMKHdcu+TEfUXRokCr2iPnt7NYsNDfA==\\r\\n\";\n        c[137] = \"dciU1mSHGcBxOAVBgJx75J6DaQdBZfTIzQ04WhkkdRMupOZWSnv19xhz8hiO+ZnbBtDJuO5rHsUG\\r\\nzH/jYacfZyCQ924roRvkh3T1yxsLq3abZJUCD9HYnPTELVhv1+cEF4aoO3vGOu2FpfLUn5QTd0Po\\r\\nzsIqcqZVB2V57B7DjfizUe3D8Yf5Vco=\\r\\n\";\n        c[138] = \"dgR1PPacBvtILBmg33s9KWtuc67ndh3rCHZ/lIN7sENgbFqJQy5DC3XIeHTV7oWd+tJQaXxoC71/\\r\\nSU7Rz6OClAMKXLbMz8U6RPiqn3M7MRCQcDfNjA5cCNknXT9Ehz/IZF/7lcWrwxBKYm4B98lPkpZt\\r\\nR2QHndiQ3venzWrP0P5y27mReaFuaJ++\\r\\n\";\n        c[139] = \"1Q8rfp1HuGsxurTgGMakxj5SwNF7EixXxVPnfGADWDcygh5C1BMXqiL1AuVXOVFOsaydfLWGC8Kb\\r\\nh/JiL6H+12lYrNGUT9yJRIzRDi4XylMnrYwBtwCJjoHSi4exz5K2ih54utVAuzXZg6mnc9ied/mN\\r\\nRjj9d2HFD5mv0w/qTN/WFxEmtuZM/nMMag==\\r\\n\";\n        c[140] = \"w01TnPP/F3Vni3fBdV32Bnbb4J1FcbaE+Xn44no5ug77U8FS1gSm3LqJ8yTyXduzl5v2dwBEfziE\\r\\nfTuyqgeLLsCYTBjXmYOIHQosEl6DyAknu4XK52eQW+Fes9eSs2Nq+G4aaR4y4leeFNmCoZ9BQmAA\\r\\nZr0LFkqnvqaKmBVgcgxPs7/8SQHnpqvaU6Y=\\r\\n\";\n        c[141] = \"OfzIF38Tp5g1W5eVbrkrMe0Mm7e0wBYg5hVvLpn/5MW5OFcmRDuBp15ayRBnJ1sBI93+CNl0LwP8\\r\\nQ0z9IXFjTER5gHZ1KfG8NV+oacKNG7aYrbUftkSL/oPfRNPez6U0FuWgvVrXUB6cwKTWvwb9KoD7\\r\\ns6AGYRdH50ZgJdBniFD7dKoOQnJ/ECuTUXI+\\r\\n\";\n        c[142] = \"4hoX0sjqlkSJPUq627iJkNYRbtD+V2qErCuTikaeRDEZvVHWvzdvwj4W1xxJjz+yHAN6z2EjCWid\\r\\ncSsVgTejQ1bH8uTzJgh/zq3yGUSsJoJWrecqxsge8bEBjkm+qUO8G3kAnC6FMjJ2NYQeXf6OK6Og\\r\\nsqyJwlHPTyAms2/IoYTB4iEqgIFG/2fNEJEIag==\\r\\n\";\n        c[143] = \"M/dy14xNbZMRfHiKKFdmD/OrEB+8MexrRO8mMh0i5LrNA5WUtLXdwUfAysYmal94MSoNJfgmwGCo\\r\\nqNwlWZBW1kpQaPdqsrn2cvc6JcZW9FlOx07DERJGbZ6l6ofbzZWgF+yf+hvT6jnJvXBVCTT3lfO3\\r\\nqo4leNuEJwsuU6erXGC3Ch53uPtGIrdDUpcX6/U=\\r\\n\";\n        c[144] = \"GgLr2hd3nK64IZv0JksKAT/yJNQ38ayuWyBnWLjXbEmT048UDppsrrnP6hikRo5v2TlHGhD2dcwG\\r\\n9NLK3Ph8IoIo9Wf2vZWBB+SMI9FpgZxBWLEjwHbOWsHaEQMVsQfk38EWQP0Fr6VyMKlEQfpsRkuC\\r\\npp1KxscaxK7g5BgXUlb0a2x0F+C9hEB0OVPsj4JN\\r\\n\";\n        c[145] = \"W9lKcLDqNGQAG/sKQNaRmeOUmLJ7GcMNqBaGZ659Rnjr6RTrfnmkp5Z9meALnwXoHjPjzSQDJnVY\\r\\nsY+xyMnuPgl6gMVAhAm+XprYVpsne4vt+7ojUqavVPBqLy5dtnhp1qfcnAiV5cZhHXX7NbxkUOzp\\r\\ntjEGCQjnhSH4rPbZtgoIWE8Z6boF3l/thLnFX+AiiQ==\\r\\n\";\n        c[146] = \"iYLn5h9lIhD/x9moaPRnTX6mJEJKThg4WXxS7IrR2zblH26uOkINz0dJNTJVets0ZNYDnsnT7J2i\\r\\nI3Y6hTVWPGoYU49J3B2LhCREs0DZQ3C7080FtiOcfHbfBLNn0DyCK1LeAC7YB/bNdiyhLqH8fKl+\\r\\n0+KhiPDIUBJY2e7IbZR/9t0sxJbIXx6cRvI5AXex12o=\\r\\n\";\n        c[147] = \"SlRJEc7npTUvQq8SgBYKmVY/3wHYp2gsDxafN/JLUuEqEjmWMtW7fxASi+ePX4gmJJqLhD5t+AZx\\r\\niCwYK3L3ceuJx4TiqVgJz8d6sc7fgWXluh1K+BcGPbZ7+Cq4Vsga7JEBVekviEZ5Ah4apNr8RkB7\\r\\noMOUVPGxRcyyaVE4zBW+scA6c1yi/HQXddQ9rWyLUsVo\\r\\n\";\n        c[148] = \"AAlbGR6ekLOzx4hpqZTUqVUQ0FL2CFpgCMOp6CuuUzkSnWXpUjvOiSDkNPgoTPgpgmg3uYvMsX43\\r\\nmkPGUGC9awDThXyGQh6u3WfWtmhiPRqXnjFek+EPd0LYXps71non6C9m7nUlYNWzBJ1YzrzWjlB5\\r\\nLLPBN8bsZG6RbdZkYMxJ9J5ta/c30m8wDDNuTm0nEE0ZVQ==\\r\\n\";\n        c[149] = \"nWWbBhzObqwEFh/TiKREcsqLYbRjIcZflJpol16Mi4YDL6EZri22qRnTgrBtIY+HieTYWuLaCSk/\\r\\nB9WcYujoS6Jb5dyg3FQ6XF9bYaNQGx2w8DHgx0k2nqH/0U1sAU0kft32aD2orqCMIprbO1WJIt2a\\r\\nuRnvcOTFoOax926nAkxvR3nrFVDevFjDbugpWHkGwic6G7o=\\r\\n\";\n        c[150] = \"WNk1Rn2qtG+gk0AEewrgo+aRbNrG4CgQpOR8Uo7c2m2XQY8MVDu4uRA6rzYGGdgqTcICKky9MvHe\\r\\nJeNWVAXOxmA4EdXQ2xItFJdQtxBt56cad9FBXXsz21yVsPr5d453abi7T3XfHVTToekiOlxAJs+b\\r\\npat9cFRbIdHghO9wc/ucoArT53vpYsnyeVnmZG2PX48lXpNS\\r\\n\";\n        c[151] = \"wVmiO6mdf2aahrJlcmnBD0Qa58y8AvzXtJ54ImxgPLPn0NCQIrmUxzNZNTODE3WO6kZMECaT/REq\\r\\nT3PoOBp9stCHCFNXOM7979J44C1ZRU0yPCha00kQZBF5EmcLitVCz10tP8gG1fiIvMjwpd2ZTOaY\\r\\n4/g4NeJHLjJPll0c5nbH7n4v+1I+xG7/7k7G6N8sp21pbgpTYA==\\r\\n\";\n        c[152] = \"OoiVZosI+KG0EZTu+WpH7kKISxmO1zRYaSPMBMW0AyRiC2iZVEkOMiKn12XPqIDSW/kVA58cvv/y\\r\\nsTAzKLTu78Uo+sVcJe3AtLdgeA9vORFELTP4v9DQ/mAmehe3N8xk+VTLY6xHWi6f4j9cTDW/BDyJ\\r\\nSDRY00oYoHlvnjgHo4CHBo0sMGgX3CwcnK2hpMFVtB/3qPl6v2w=\\r\\n\";\n        c[153] = \"97ZVsTYwD8VrgN1FOIRZ8jm8OMgrxG3o1aJoYtPVWXp9cjjlgXqTMZVsoWr3pr7pudw+LYo1Ejz3\\r\\nJpiUPHqWcZ2PWrWs7PR1akYGuwdCBHYvCGTcZYFe/yu1AB8w5zYsl1eJR45g0u1DlXfx5BUAUzc4\\r\\nyJDjc48Ls62bn8t0EJ7+30sWwifqKuz2EHpsqp1j/iMlwzKJGjGE\\r\\n\";\n        c[154] = \"0NSYKTvBKKInwL9PJ/pWUWVX4gjF3igsA2qqQMsRew0lI1LcCB18eGCYk0AnyUCe99w5lWHGFUMM\\r\\neH6DZciAylWGeDn19JdzVOTevBWk3LIujI1GvsEB3oVqf2Zl9IZeDGCT4+bQKBWvgcXHjysZfnn/\\r\\n5z9Xz06qrPqac5LfS36fDcwnkrUYQWDsL2Ike32ALmOnkcDjNq1BoA==\\r\\n\";\n        c[155] = \"5ok+rYI4LCgGa2psGUN/fdkT2gQEToB9HRiFXQpe2YcQvEN2z7YlJCETx4jSWw06p5Y8tZcp08mo\\r\\nKNYwUJ40DvPpGlDG+wUpFhC4kkfo6vj6TrCj5yoWJi5D+qdgH2T0JeWM80cYN0bsOsetdaqNhDON\\r\\nlYXZ2lVYkyVS/wzw8K5xX87EWktwOwFq/yYhuWCYJ9GZL7QuDipJjEE=\\r\\n\";\n        c[156] = \"KHzTalU9wPSnIjh5g0eHi1HUaFufxJpXpjDe0N3wEKINqbgzhbj3Kf4qWjb2d1A+0Mlu9tYF/kA9\\r\\nONjda5jYfRgCHm5mUrjU0TAyT7EQFZ2u6WFK/sFHP++ycJQk8k7KLPUWA5OWScy1EO+dYF4d0r6K\\r\\n5O+7H/rpknxN6M9FlP8sH83DXK1Sd+UXL32D+4flF580FaZ5B3Tkx3dH\\r\\n\";\n        c[157] = \"RrJVxIKoDXtCviWMv/SXMO42Dn6UWOKDy2hh2ASXssT0e+G6m7F1230iJWlEN0wBR8p+BlTdBhQr\\r\\nn25098P3K16rBmZpzw/5dmesIJxhYPaM4GiaOgztFjuScTgkmV0Jl/vZ9eCXdEVNISeXkIixM4ps\\r\\nsTFuUV7PY/Upzdj55rDKGLr1eT7AFVSNP30PhL8zZs8MANqKBeKBBDvtww==\\r\\n\";\n        c[158] = \"sy4t5rFA75GRBE+Dqa9sQxjPluKt/JnEY54guHnKqccmx3HGiyJ0jUA+et4XO8Xg69wCA9xVxJZQ\\r\\nL73z80mVfIf43HIKOxgxT2IjG7EKMOD/qx6NnMTve4BryggLtbLQUeRfhriQeY7h65tD9ierhccX\\r\\noXDpGnmBn9m2BQP78y+Qhc4eIsa3LcxbQJUIwvURjFp/rgMD7lhOLboa/2Y=\\r\\n\";\n        c[159] = \"Zs/BfFoWImYau2dZLb7JneeTQp7sQ06yonEq0Ya4BNOJGy/5dGH42ozt0PpP2IZ/S58X7esVgc6j\\r\\nA1y3Bcxj3MPoDjQJSZHFEtR3G31T8eF5OpPVC4dw9s9clllM05tvcemssLdcd85UP/xBaDrmpAl8\\r\\nZDSc73zflK3nJw8e0HQFYntNnlZPFyyyBLHnLycb6Jlvq7F2OqrZR+FXZnL3\\r\\n\";\n        c[160] = \"hdeDJuRnmb8q9EYec8+futT/CvqhpqoUdtmG6E31RrYJDs96M5Wfng90IEqrncZe4rVYDocRZK23\\r\\ndvqtJaPhTUBXXh42IyMlUnro69KI+075FvYYwgVaUd10r7ExWM5Z7DCQ2x8Tm1meK2YCTPkF1VXX\\r\\nexl1UjYCnRQuQxppdophMwroJK8VqlJbFFslchTSBFuI7wgcdy+f/LHMbMsusQ==\\r\\n\";\n        c[161] = \"ClCCOv0mD9//LR0OisHfamxcTvmlwMLgAIQt3hbOjRPkXwEgaDzP0u6LN8BNwdOVw+LhrbzMI8zQ\\r\\nzHvo7mGPkQICeeim/x+xmGPQtmWnXxCWiL1uf/8eR5Wuy9Er8skTB8rG4/ubb2ssvCkubObPAkMS\\r\\nOgFnX9UtxnCN4+nMNV2vvn4xMTSvvQyYWewfnlNkflTyva1epE9RVW2RqRtJikY=\\r\\n\";\n        c[162] = \"Fs+AmFCnUr/imw8D0GpNidIP9qwW8yRAzmtqPS+vT6n5U4YFQcpgbznrYO4TPqkVF2oz1mpgLYIg\\r\\nx/u2XsrtljGX46LfY8OyUPaw4/da38QGngoIlS2cN01cgN3efSjMlnZFo1x8T9p0Nn1IgRgevOd5\\r\\nezVUL7WdY7eeiE1pXXcGBgDYn7NDQph0dC6HDlBiS95bDFcZ+6FYigE4WybpsOHL\\r\\n\";\n        c[163] = \"wgO4DdGZy9g13IuOhkJGJcToyLuCBVm9T/c8qY4NOheVU1NW2g8sPIo+RiEsSST8sx6+Jh/A/kaC\\r\\nxYvJ9CsgnBjZMMWRsd383HZAoJtkxwKvyoeXzzD+puFvqKQBEKrlBEwffXhLDoFQAW2ycYtBGztl\\r\\n0GsUtoOob2nv7ienx1xD6KNZNaxYx2ObRAYS/e8LS3pg5dku9MPBp1X12m8ZIXRAaw==\\r\\n\";\n        c[164] = \"EkXt02SaRUIjFmoLxyO6N+giL4iA4fY0Exao+mjgEfZ+Wv6w95GXHBI1xlYMVLkOcnu9nescvcXQ\\r\\nH0OrqL9uforEUTGTSg2ci67m4GrwAryMy+5eUo77Q5GpWKfsg8nDbD8a3gUI/9EE0sCNp7tMaKwo\\r\\nJ56cxhbG3TJYpqWTpq3/S3q76x+3ETL+zxh6EMh8MJPfWcIxlDS7evKqdPgS00KgUtk=\\r\\n\";\n        c[165] = \"OuBqx5LFJroRbDn41+4azFHlKgw6bMgbsRGaK9UnPvi5xfmV4SLQ2YzIhopGi1F57L6vKukaW0Xl\\r\\nFk/Ff5Td5IMC7U+kvXKlf8fGIIQ8FaHI0vbIX89OJlBqlICqftSNiVRxtaE+aCh0rBoDfgPwuC8q\\r\\nBC20I1O3ZLuKfeUVGkMOLEWeZLS6mmcn3cSERj9o/dEl8QYwQvhH+VG6YWF//yki1Vu8\\r\\n\";\n        c[166] = \"SO/vDsqZDdImOdH19sZI7FUVhlx1EI0XRr8ArTuAG5F8LDK76Bct2C7fXTUowilXnJWhQxvbGiul\\r\\nkUGSuVjVP12zac9bShRpr1L3ucde7n1f9y/NcHJCwdqTLq7RYygItQ4ppQGiP9jXf2Dn/qmVZZTh\\r\\n+SY3AZCIS+OVo2LAiYJHWnzzoX8Zt+dOYiOA/ZQKZieVJlc8ks+2xqYPD55eH0btZn5hzA==\\r\\n\";\n        c[167] = \"tZL/qACMO9SzmgJhWQMsbKgE5lPAEbxn3NR7504ilgArR8j7uv1KF46uQyjrkEnyBormYB/6nLGl\\r\\nHht62IQftMYf5gHpHFfTvukRKF8728yIYAAYHPQ/WjHzHdVSqUJqF2a8RE6SvvY+KSKWLMU3hjn1\\r\\nf6dqX599hYD7AnbPGTpFKDU5sLFOXbuynU1sPUhP+a4Hev9yNU6atLDo4CkX/Yq3FbpWVuQ=\\r\\n\";\n        c[168] = \"GRe7uF1wH5/71B3vmGF+pN3H9PKO1tLwsnb0D4/Pm7Pu5KAe4OfelkfFIBgyjuoZrpeEkGZnb+qf\\r\\n+Kn7Kt1hDwYr/Mb9ewuwOXsbIpLQMgfh0I5XsPrWocduVzn+u/cm3cr0Z11zsx0AZjTqvslACkDq\\r\\niquY41JhtGdc22RCvIYom2l+zzMIMyCPsHeCSB1MBu8EWK3iP7SD3dWttwzMg0xanoPDgk0U\\r\\n\";\n        c[169] = \"8BDFu+29lptlGSjcZe7ghWaUgIzbuUpM5XDFbtJVQPEd3bAE0cGRlQE9EhKXi5J/IskYNrQ357tB\\r\\nhA+UNDNXCibT2AZGpzWAcwE6dP+14FuRL5Gxqh/teuPYKr5IIn7M3SbgOychZzLI7HGCvVhBUiJB\\r\\nu8orI3WmAIVcUhAsMGHsFveck/ZCXQA+Uq/WVnW1VNs6hSmIhsAFc51qsmsQK07z2Wptx4rRjw==\\r\\n\";\n        c[170] = \"siPSXD4u36WYtTvvDzRlFPiuZMnRczrL3eA15955JDCc6/V2Cvu6m/HPO6JxogxO0aYTZ5tejYDO\\r\\nIZgBy40DgUZMqPJ2IpYjsmUbjjJU8u/OpwhMon525m3v0EYlvyj2Qp3pwFKDkvncK3aNjN3KaaX6\\r\\nHuIy6kyqsDl0BTEnB5iJyHLRBCkeznTK019u48Yfsrz2oGuZcWzNj5/vKMdxQPiyJ9EHyox8Ark=\\r\\n\";\n        c[171] = \"+/14PnFQVZ7BTHKUvkTtRrYS7WnPND5gZ5byMhUrDLkJa6UPBV7z0nrDMifEo/dQfUq3EjCiG6xG\\r\\nVhrUvAzgxqOQZTW1Y9p9M0KWW+E0XvCQppHFpuMqF1vYsF0OD6AMiE9JtGnWs3JcaWP/XBF/CvhQ\\r\\nlFGbHi3fbrD/haTEBnmpJWBgMdKribdbXHtBSFZ2MzCX2eDtxoDdRdEVGs4v/q8gVBS+WsnZ3TTF\\r\\n\";\n        c[172] = \"31I1ja+B+aopKkztGzJYvJEWAshyoAAV5yve4LnP0kdImUQaVETSuo5CDIYr7zM8MCD1eYPpLicm\\r\\nGnA+C927o9QGAVL3ctO/DCWhNinW7NmeYIM+o4diKBkDPjHmSWa+nq4nr+gOap4CtwL2wW2B5Yqt\\r\\n26pKgN9uAU5CmTL26hYFgMEOZfrkQ7XdYGy2CN8RJLmjeSFVVNBG/FTaK7tpuy0LQSkko6wczBYG\\r\\neg==\\r\\n\";\n        c[173] = \"XbRfDqGe3eeI1tHx8UnPneDB57N8VeSSzXzVCNSgxOEfd6d/un5CDxHG+m4w3tIbtSky4R2+zMF+\\r\\nS5cRvTOwZ/veegYtLKTxA0mVedWLFkfh/v4NgPJ+NEU+cylbSSZLAeBofDvoJwnYKujN2KFa8PGA\\r\\nxr3Y8ry3qdkS8Ob1ZiHYAmLvKS9sGb/vjTvRy+a4Q7kOepsm7PYisinKelBAvDnjli6/lOutGren\\r\\njX4=\\r\\n\";\n        c[174] = \"jGEj/AaBefac9uOcmGuO9nH+N+zMsC4qAe6ZUEMMIXdTGnSWl7Xt0/nKqyOj3ZH249HwkJ8bn5C+\\r\\n0bzOpQ1eA3PxEq6RfKMrjHJPJmTZXrSESTjfj3oNLU/CqqDOqd8znTgN6nvnUdCeStLMh9bmWF1+\\r\\n0G11nDwg6GQWWQ0zjVDTq5j7ocXcFOyUcu0cyl5YDcUP0i2mA2JullInU2uBte7nToeSGB3FJxKu\\r\\neBbv\\r\\n\";\n        c[175] = \"RAzNCxlP2S/8LfbGtlSDShox8cSgmJMOc2xPFs8egZVJiwlmnS3aBWKPRbbxkZiVVYlu4GNJNwbo\\r\\ncc6dgrl28HXAsYikE5wwoQ1MeOJWU3zzFiYENh7SLBQfjVPQHucctr8P6Rl7YL5wHc+aC+m92R3b\\r\\nnzm5rp1PeHm7uzy2iUUN0cgfbwJ4FrpXhVMTsAUpTbg1+037EWcGOuxir4dG2xBfgOwa+ejFHkw7\\r\\ny0LWRw==\\r\\n\";\n        c[176] = \"08hmZptBGKKqR6Qz9GNc2Wk1etgU/KogbiPQmAh5IXlTBc97DuEToL4Bb889nfObVQ/WelmiCS8w\\r\\nEjSBdmnlkkU7/b5UT3P4k1pB6ZxPH9Qldj5aazkA/yCb0kzDfJlcdFOh1eAcu5LvwTXOizmPwsDv\\r\\nJEnOkaDZrKESZshsHU2A6Mx6awk9/orf6iBlJHQIIH3l4o3b1gx2TNb/hUgdAlwtQDhvKO3skB0P\\r\\nS+rcWAw=\\r\\n\";\n        c[177] = \"0GhrgbSSHPLWtyS2mnSxrNAj/dyrFQcxIgPjT7+78SZ1ZTGc03vsmlZ4Z/bOO84E9yKblaI5dSHV\\r\\nXrx57L0kikL8tgKCsAkUNO3l/4zv5FfCrRTgGx4sFTFB1NNcLcwagkvFzde764DjYmj4YZhYsXSZ\\r\\nCVKi0uu5M8fpgGDZ9UMSFR008cbhaIoFLWSANqiNJYSvTQZhGWfLtIPGLN+gIOMcaKhx1b5vg6OY\\r\\nSz6ScAM/\\r\\n\";\n        c[178] = \"2VGiMV/f2hNZAjw3fdeHx/wRIVzeP018lZynzwSySG/zQBxyRmi3YmKVZmh3aJunuiqmvdt0kJ6l\\r\\nX7M8BajYHPCBkqJOx8oPJ/K1oADxVgnavZ69dKYrSy9/Pm6sHxjFrdSz9TelUK9sgoFTWS6GxgzW\\r\\nEqXRBDDpGUnsNbSEcWLPKVLNNoYAcltY98JZaNSZBXcpa9FeSN7sVU43q2IEcDx3ZkJzRJpl/lb7\\r\\nn+ivMwX/OQ==\\r\\n\";\n        c[179] = \"iMSCh1m5vct3C7LEn5wKRYtalzvG6pKahG19rTb6Z9q7+buDsML5yM6NqDvoVxt3Dv7KRwdS3xG/\\r\\nPyb7bJGvQ2a4FhRnTa4HvPvl3cpJdMgCCvsXeXXoML4pHzFlpP0bNsMoupmhQ0khAW51PAr4B165\\r\\nu1y5ULpruxE+dGx/HJUQyMfGhOSZ5jDKKxD5TNYQkDEY28Xqln6Fj8duzQLzMIgSoD8KGZKD8jm6\\r\\n/f8Vwvf43NE=\\r\\n\";\n        c[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8\\r\\nh8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+\\r\\nFFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39Y\\r\\nSfbE890TPBgm\\r\\n\";\n\n    }",
        "begin_line": 154,
        "end_line": 254,
        "comment": " These are chunked versions of the strings above (chunked by commons-codec-1.3.jar) ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 43)",
            "(line 156,col 9)-(line 156,col 18)",
            "(line 157,col 9)-(line 157,col 26)",
            "(line 158,col 9)-(line 158,col 26)",
            "(line 159,col 9)-(line 159,col 26)",
            "(line 160,col 9)-(line 160,col 30)",
            "(line 161,col 9)-(line 161,col 30)",
            "(line 162,col 9)-(line 162,col 30)",
            "(line 163,col 9)-(line 163,col 34)",
            "(line 164,col 9)-(line 164,col 34)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 39)",
            "(line 167,col 9)-(line 167,col 39)",
            "(line 168,col 9)-(line 168,col 39)",
            "(line 169,col 9)-(line 169,col 43)",
            "(line 170,col 9)-(line 170,col 43)",
            "(line 171,col 9)-(line 171,col 43)",
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 173,col 111)",
            "(line 174,col 9)-(line 174,col 115)",
            "(line 175,col 9)-(line 175,col 115)",
            "(line 176,col 9)-(line 176,col 115)",
            "(line 177,col 9)-(line 177,col 119)",
            "(line 178,col 9)-(line 178,col 119)",
            "(line 179,col 9)-(line 179,col 119)",
            "(line 180,col 9)-(line 180,col 123)",
            "(line 181,col 9)-(line 181,col 123)",
            "(line 182,col 9)-(line 182,col 123)",
            "(line 183,col 9)-(line 183,col 127)",
            "(line 184,col 9)-(line 184,col 127)",
            "(line 185,col 9)-(line 185,col 127)",
            "(line 186,col 9)-(line 186,col 131)",
            "(line 187,col 9)-(line 187,col 131)",
            "(line 188,col 9)-(line 188,col 131)",
            "(line 189,col 9)-(line 189,col 135)",
            "(line 190,col 9)-(line 190,col 135)",
            "(line 191,col 9)-(line 191,col 135)",
            "(line 192,col 9)-(line 192,col 139)",
            "(line 193,col 9)-(line 193,col 196)",
            "(line 194,col 9)-(line 194,col 196)",
            "(line 195,col 9)-(line 195,col 196)",
            "(line 196,col 9)-(line 196,col 200)",
            "(line 197,col 9)-(line 197,col 200)",
            "(line 198,col 9)-(line 198,col 200)",
            "(line 199,col 9)-(line 199,col 204)",
            "(line 200,col 9)-(line 200,col 204)",
            "(line 201,col 9)-(line 201,col 204)",
            "(line 202,col 9)-(line 202,col 208)",
            "(line 203,col 9)-(line 203,col 208)",
            "(line 204,col 9)-(line 204,col 208)",
            "(line 205,col 9)-(line 205,col 212)",
            "(line 206,col 9)-(line 206,col 212)",
            "(line 207,col 9)-(line 207,col 212)",
            "(line 208,col 9)-(line 208,col 216)",
            "(line 209,col 9)-(line 209,col 216)",
            "(line 210,col 9)-(line 210,col 216)",
            "(line 211,col 9)-(line 211,col 220)",
            "(line 212,col 9)-(line 212,col 220)",
            "(line 213,col 9)-(line 213,col 220)",
            "(line 214,col 9)-(line 214,col 224)",
            "(line 215,col 9)-(line 215,col 224)",
            "(line 216,col 9)-(line 216,col 224)",
            "(line 217,col 9)-(line 217,col 228)",
            "(line 218,col 9)-(line 218,col 228)",
            "(line 219,col 9)-(line 219,col 228)",
            "(line 220,col 9)-(line 220,col 232)",
            "(line 221,col 9)-(line 221,col 232)",
            "(line 222,col 9)-(line 222,col 232)",
            "(line 223,col 9)-(line 223,col 236)",
            "(line 224,col 9)-(line 224,col 236)",
            "(line 225,col 9)-(line 225,col 236)",
            "(line 226,col 9)-(line 226,col 240)",
            "(line 227,col 9)-(line 227,col 240)",
            "(line 228,col 9)-(line 228,col 240)",
            "(line 229,col 9)-(line 229,col 244)",
            "(line 230,col 9)-(line 230,col 244)",
            "(line 231,col 9)-(line 231,col 244)",
            "(line 232,col 9)-(line 232,col 248)",
            "(line 233,col 9)-(line 233,col 248)",
            "(line 234,col 9)-(line 234,col 248)",
            "(line 235,col 9)-(line 235,col 252)",
            "(line 236,col 9)-(line 236,col 252)",
            "(line 237,col 9)-(line 237,col 252)",
            "(line 238,col 9)-(line 238,col 256)",
            "(line 239,col 9)-(line 239,col 256)",
            "(line 240,col 9)-(line 240,col 256)",
            "(line 241,col 9)-(line 241,col 260)",
            "(line 242,col 9)-(line 242,col 260)",
            "(line 243,col 9)-(line 243,col 260)",
            "(line 244,col 9)-(line 244,col 268)",
            "(line 245,col 9)-(line 245,col 268)",
            "(line 246,col 9)-(line 246,col 268)",
            "(line 247,col 9)-(line 247,col 272)",
            "(line 248,col 9)-(line 248,col 272)",
            "(line 249,col 9)-(line 249,col 272)",
            "(line 250,col 9)-(line 250,col 276)",
            "(line 251,col 9)-(line 251,col 276)",
            "(line 252,col 9)-(line 252,col 276)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.initBYTES()",
        "snippet": "    private static void initBYTES() {\n        final byte[][] b = BYTES;\n        b[0] = new byte[]{};\n        b[1] = new byte[]{-72};\n        b[2] = new byte[]{-49, -36};\n        b[3] = new byte[]{77, 15, -103};\n        b[4] = new byte[]{110, 24, -44, 96};\n        b[5] = new byte[]{-43, -61, -67, -75, -33};\n        b[6] = new byte[]{-80, -52, 71, -96, -105, -7};\n        b[7] = new byte[]{-115, 7, 15, -108, 59, 25, -49};\n        b[8] = new byte[]{76, 6, -113, -99, -11, -65, 9, -123};\n        b[9] = new byte[]{113, 116, -39, -69, 12, -41, 60, -29, 82};\n        b[10] = new byte[]{46, -39, -1, 101, 53, 120, 34, 52, -6, 56};\n        b[11] = new byte[]{-23, -8, 126, -115, -43, 55, -43, 35, -90, 90, -73};\n        b[12] = new byte[]{19, -2, 76, -96, 62, 42, 10, -16, -18, 77, -63, 64};\n        b[13] = new byte[]{-38, 127, 88, -55, -16, -116, -56, -59, -34, -103, -69, 108, -79};\n        b[14] = new byte[]{-88, 25, 26, -36, 26, -70, 87, 125, 71, -103, -55, -121, -114, 70};\n        b[15] = new byte[]{90, -4, -103, 123, -87, 16, -14, -100, -69, -101, 110, 110, 113, -84, 9};\n        b[16] = new byte[]{-95, -118, 113, 51, 46, -127, 74, -106, 87, -123, 90, 78, 71, -89, 87, -104};\n        b[63] = new byte[]{-55, -20, 69, 104, -46, -102, 63, -27, 100, 87, 1, 20, -65, 20, 23, 108, 45, 7, 72, 40, -65, -78, -77, -104, -19, -51, 55, -22, 84, -10, -27, -6, -20, -29, 24, -56, -66, -99, -75, -32, -111, -62, -125, -77, -117, -3, 118, 86, -36, -125, 30, -24, 32, -32, 72, -64, -102, 104, -113, 117, 121, 24, 12};\n        b[64] = new byte[]{-66, 74, -96, -98, -30, 119, -90, 92, 77, -74, -117, -34, -120, -62, 110, 96, -77, 122, -63, -108, 11, -91, -67, -59, -125, -113, 63, -52, 121, 29, 22, -32, -18, 114, -29, 10, 89, 84, 78, -2, 120, -123, 70, 2, -84, 22, -89, 49, -85, -91, 96, 11, 28, 16, 109, -29, -30, 63, -37, 17, -97, 28, -5, -62};\n        b[65] = new byte[]{96, 121, 44, -36, 96, -101, -38, -27, 69, -29, -74, 54, -76, 40, -98, -120, 49, -119, -13, -65, 81, -101, -105, 65, -123, 8, 80, -117, 54, 33, 125, 99, -88, -8, 26, -63, -37, -14, -66, 19, -68, 25, 89, 56, -99, -41, -119, 76, -92, -50, -76, -5, -112, -76, 55, -46, 77, 40, 7, 1, 17, 39, -86, 101, -110};\n        b[66] = new byte[]{-49, -50, 121, -42, 57, -112, -89, -12, 44, -9, -101, 112, -37, 110, -66, 28, 33, -42, -82, -30, -79, -4, -101, -33, 4, 39, -48, -26, -99, 31, 23, -66, -26, -111, 42, 105, -21, -95, 57, -25, 104, -92, -38, 12, -100, -84, 16, 108, 48, 47, -51, 111, 57, -64, -127, 54, 104, 51, 54, 113, 122, 23, -55, -62, -18, 61};\n        b[67] = new byte[]{86, -60, 118, -62, 26, -86, -2, -92, 38, -33, -115, -66, 76, -36, -11, -106, 3, -103, 50, -123, -101, -92, 44, -2, -110, 61, -77, 126, 90, -76, -97, 30, -46, -3, 23, -124, 84, -11, 9, 114, -88, 12, -75, 92, -21, -81, 97, 85, 64, -9, -63, 0, 126, 85, 70, 52, 126, -122, 76, 112, -65, -122, -20, -79, 9, -84, -15};\n        b[68] = new byte[]{-25, 25, -120, -89, -57, 84, 37, -100, -28, -118, -62, 36, -72, 67, -20, -100, -11, -17, -52, 55, -116, -93, -113, 42, 88, 87, -57, 34, 125, -102, -65, 120, -21, -26, -86, 25, 28, 43, 52, 45, -13, 68, -55, -22, 66, -34, -3, -84, 107, 73, -62, 83, 65, 101, -86, -55, -125, -55, 50, 57, -1, 104, -19, -25, 59, 11, -75, 93};\n        b[69] = new byte[]{-76, 97, 32, 94, 56, 37, 80, 31, 77, 108, 43, 98, 75, -49, 0, 122, -46, -19, 70, -88, 66, 2, 120, 115, 57, 66, -107, -126, -10, -55, 100, 122, -114, 3, -84, 124, -72, -22, 43, 3, 91, 119, 53, -58, -120, 3, 77, 25, -87, -77, -40, 0, -69, -72, 47, 50, 38, -30, 46, 37, 0, -65, 80, -126, 33, -1, 38, 14, -37};\n        b[70] = new byte[]{-128, 91, 113, 18, 22, 9, 106, 16, -26, 83, -105, 105, -71, -42, 44, -23, -108, -20, -88, 12, 126, -77, 104, -2, -45, -96, 52, -51, -20, -101, -35, 78, -25, -123, -111, 108, 110, 64, -125, -107, -37, 52, 17, -123, 40, -87, -22, -39, -87, -109, -26, -20, 94, -126, 12, -29, -125, -35, -43, 59, -99, -119, -98, -108, 77, 3, -57, 35, 14, -12};\n        b[71] = new byte[]{-113, -8, 127, -44, -100, -96, 96, 14, 91, -114, -37, 113, -51, 12, 107, -26, 0, 109, -126, 31, -128, 97, 90, 51, -124, 94, 22, -126, -9, 20, -2, 14, 61, -65, 72, 84, -53, -95, 93, -123, -10, 94, -64, 98, -66, 62, 27, 115, -113, -76, 90, 108, -114, 105, -37, 53, -14, -50, -7, 38, 45, 7, 69, -123, -46, 57, 82, 110, 14, -26, -52};\n        b[72] = new byte[]{-101, -23, 24, 84, 106, 35, 33, 30, 105, -127, -68, -5, -92, 98, 102, -38, 15, -73, -86, -87, 59, 126, 25, 119, 114, -116, 26, -39, -27, 107, -122, 72, -69, 90, -121, -14, -53, 9, -47, 123, 58, -109, -60, -23, 1, -127, 81, 115, -22, 114, -84, -14, -84, 105, 109, -74, -13, 0, -73, 45, 112, -9, -116, -78, -97, 93, -91, 117, 31, -71, 66, 107};\n        b[73] = new byte[]{-92, -10, -122, -100, -54, -12, 81, -119, -91, 118, 114, 85, -109, -15, 126, -35, 96, -119, 39, 90, -10, -94, -37, -61, -28, -94, 93, -73, 107, -75, 70, 116, -70, 47, 8, 71, -121, 2, -62, -87, -11, -68, 59, -12, 4, -125, -115, -42, 119, 18, -88, -104, 98, -1, 36, -51, -9, -74, 127, -63, -10, -109, 15, -96, -123, 52, 65, 49, -93, -85, 97, -111, -93};\n        b[74] = new byte[]{-104, -20, 115, 27, 44, -90, -23, 63, -63, -60, 37, 121, -99, 40, -120, 96, -55, 95, 1, 73, -126, 55, -72, 45, -17, -26, 83, 50, 13, 100, 119, -61, -19, -118, -71, 62, 36, 94, 93, -109, -59, 18, 109, 96, 110, -1, -42, 111, 54, 14, 89, -70, 34, 66, 120, 108, 31, 105, 90, 106, -91, -99, -54, -9, 36, -123, -20, 47, 59, 38, -5, -75, 69, 65};\n        b[75] = new byte[]{85, -126, -50, 32, 78, 3, -98, 28, 73, -97, 113, 74, 75, -3, -111, 28, 113, -40, 46, 86, 98, 25, 87, 85, -2, 78, 46, 5, -69, 64, 96, 117, 18, 78, -108, 115, 105, -90, 15, 24, -48, 21, -115, -45, 112, 109, 49, -56, -118, 25, -98, -70, 79, -7, 97, 5, 50, -16, -47, 108, -60, -118, 38, -8, -72, -69, 110, 117, -94, 6, -127, -54, 4, -13, -5};\n        b[76] = new byte[]{-19, -6, 12, -92, -99, 19, -110, 112, -102, -74, 53, 34, 75, 27, 103, -72, -92, -94, -49, -124, 47, -105, -8, -99, 89, -113, 84, 42, 36, -27, -114, -124, 7, 103, -32, -68, 109, -59, 44, 114, 114, 63, 109, -102, -11, -35, -18, -128, -65, 37, 33, -29, -77, 37, -91, -47, -81, -52, -119, -76, -26, -91, 29, 49, 101, -117, -95, -110, 78, 104, 102, 47, 14, 107, -21, 89};\n        b[77] = new byte[]{-113, 20, 18, 26, 33, 108, -7, -67, 83, 124, 78, 37, 13, 64, 15, 80, -14, 116, 73, 103, -108, -126, 93, 55, -84, -82, -102, -70, 39, -106, 37, -58, -85, 12, -127, -52, -9, -72, 6, 56, 115, 38, -56, 123, -99, 68, -54, -92, 102, 98, 36, -59, -124, 96, 98, 0, -126, 82, 15, -55, 121, 79, 117, 57, -112, -9, -76, -66, 20, -5, 3, 97, 74, 28, -80, 123, -49};\n        b[78] = new byte[]{80, 105, -121, -2, 9, 123, -73, 112, -28, -13, 77, 111, 70, 20, 67, 17, -72, 44, 125, 40, 109, 29, -99, 96, 101, 9, -8, 40, -42, 121, 66, -52, 55, 90, 33, -93, 91, 66, 38, 34, 117, 71, 107, -30, -46, 28, 28, -53, 82, 60, 2, -47, -99, -25, 92, -18, 34, -29, -32, -94, 41, -118, -128, -78, -109, -107, -120, 78, -106, -87, 85, 24, -15, -108, -107, -48, -24, 56};\n        b[79] = new byte[]{-63, -47, 40, 98, 98, 110, 70, 120, 54, -49, 98, 36, 2, 36, -96, 39, 80, -106, -39, 81, 59, 31, -70, 23, -91, -123, -124, 20, 83, -68, -100, 109, 27, 102, 126, -49, 30, 20, -4, 43, 40, 90, 59, 106, -30, 118, 95, 30, 80, 76, -84, -115, -83, 21, 92, 80, -14, 66, -92, -96, 102, 123, -35, 80, -86, -62, 25, -22, 86, 25, -106, -16, -45, -3, 27, 15, 11, 55, 2};\n        b[80] = new byte[]{-26, 70, 106, -126, -75, 27, -73, -22, -51, -28, 21, -128, 117, -41, -108, -74, 111, 83, 25, 62, 55, -67, -118, 65, -24, -9, -78, 67, 4, -14, -53, -43, 91, -81, 79, -108, -1, -124, 51, -53, 66, 48, -33, -76, 90, -37, -35, -57, -102, 73, -87, -127, 12, -18, 73, -59, 105, 112, -120, -123, 25, 115, -64, 21, 108, 19, -95, 31, -101, -94, -4, 46, -19, -91, -29, -117, -15, 103, 51, 9};\n        b[81] = new byte[]{19, -114, -69, 48, -55, -119, 110, 108, 47, -16, -23, -100, -39, 55, 92, -56, -54, -1, -33, 64, 124, -117, 53, -101, 127, -32, -128, -72, -101, 112, -21, -74, -11, -125, -37, 107, -124, 46, -89, -32, 102, 39, 94, 55, -106, -12, 54, 47, -103, 106, 8, 36, -4, 116, -50, -11, 63, 67, -24, 42, -65, 71, 45, 122, 13, -101, -57, -45, -10, -102, -72, 12, 12, 4, 91, -23, -24, 40, -62, -88, -15};\n        b[82] = new byte[]{86, -101, 124, -123, -122, -8, -113, 29, 69, -5, -76, 68, 95, -78, -70, -26, -2, -98, 59, -111, 117, 24, 56, 63, 43, -60, -107, 45, 96, -46, -89, 75, 43, -70, -106, 4, 66, 64, 85, 71, 25, -63, -11, -39, -95, 74, -113, 87, 30, -100, -8, 11, -54, 81, -105, -54, -4, -39, -4, 87, 102, -23, -90, 17, -2, 20, -40, -24, 116, 14, 42, 121, -82, 115, 109, 12, -65, -120, 38, -14, -4, -107};\n        b[121] = new byte[]{-123, -2, -67, -58, -65, 102, -76, 87, -8, 55, 120, -10, -72, 15, 76, -128, -78, -7, 103, 47, 120, 30, 59, -2, 85, 8, -67, -29, -30, -46, -13, -34, -10, 36, -104, 3, 28, 36, 14, -64, -2, 112, -123, -44, 36, 87, -28, -119, -91, 121, 34, -56, 113, -102, 74, -60, 56, 126, 23, -87, 63, 12, -18, 101, -63, 41, 96, 68, 126, 109, -23, -14, -42, 63, -116, -48, 116, -103, 123, 126, -116, 117, 18, 33, -107, 58, -89, -93, -18, 42, -79, 119, 36, 47, 64, -93, 94, -58, 36, 36, -109, 52, 52, 7, -50, 98, 49, -64, -70, -50, 70, -43, -72, 34, -11, 88, 102, -120, -57, -64, 48};\n        b[122] = new byte[]{-56, -84, -45, -121, -104, 79, -89, -33, -49, 5, -26, 109, -83, -107, -20, 20, 112, 17, -9, 44, 14, 51, 120, 81, 104, 16, -28, -128, 111, 68, -45, -36, 5, 91, -61, 25, 15, 76, 76, 25, -24, 28, -89, 68, 43, 76, -105, 15, -15, 6, 14, 105, -120, 83, 13, 88, -90, 62, -85, 13, 77, 83, -90, -115, -40, -28, -67, 47, -74, 90, 24, -55, 91, -119, -107, 57, 116, 60, 40, -128, -3, -41, 38, -127, -76, -6, 62, 13, 43, 75, -28, 99, 32, 114, -41, 15, -28, -54, 21, 127, 85, 105, -13, 15, -26, 98, -38, 31, -87, -71, 101, 124, 57, -71, 53, -10, 51, -121, 96, 59, -118, 54};\n        b[123] = new byte[]{114, -63, 102, -62, -16, -13, -96, -18, 8, 59, -84, -110, 12, 14, 1, -39, 94, -34, -104, 71, -83, 3, 0, -96, 59, -82, -77, -50, 87, -42, 111, 114, -125, -84, -9, -59, 101, -51, -55, -126, -66, 62, 118, 86, -108, -112, 66, 3, 29, -121, -117, 28, 68, -35, 78, -53, 22, 58, 93, -118, -84, -15, -63, 18, -59, 11, -92, 52, -47, -5, 115, -95, -70, -75, -37, -43, 10, -10, 54, -15, -30, 28, 91, -86, 79, 113, -98, 111, -95, 24, -61, 102, -91, 109, -12, -26, 95, 23, 33, -13, 102, -101, -106, -34, 22, 42, 94, 42, 61, -60, -98, -53, -98, 47, -22, -37, 2, -71, 75, -103, -50, -71, 45};\n        b[124] = new byte[]{-28, -119, -15, -68, -84, 41, -96, 37, 123, 16, -82, -4, 59, 53, 63, -76, -65, 127, 54, 98, -75, -32, -6, -16, -10, -45, -126, 3, 34, -66, -58, -107, 13, 45, -102, -30, -71, 81, 21, 118, 10, 104, 103, 78, 107, -106, 43, -97, 105, 64, -58, 28, 127, 29, 60, 7, -90, -16, 111, 67, 55, -11, 78, 62, 75, 65, -22, -11, -54, -75, -51, -92, 49, 72, 39, 49, 56, -103, -62, -1, -44, 85, -33, -79, -54, -87, -45, -16, -14, -60, 116, -44, 60, -84, 37, -79, -54, 32, -100, 45, -43, -59, 127, 79, -79, 112, 78, -22, 9, -52, 51, 11, -32, -5, -7, -60, 86, -6, 46, -99, -98, -106, 100, -53};\n        b[125] = new byte[]{112, 76, 123, -95, 59, 18, 29, 101, 5, 62, 63, 118, 114, -53, 93, -53, -100, 6, 109, 23, 49, 31, -27, 81, 88, -33, 36, 104, -44, -45, 8, -11, -86, 73, -55, 50, 83, -43, -28, -2, 56, -7, -2, 8, -3, 12, 92, 35, 126, -64, -110, -89, -83, 49, -70, -41, -8, -2, -79, 90, -98, 59, 112, -86, -44, 96, -23, -46, 75, 63, -126, 64, -126, -109, -118, -77, 0, -27, 30, 46, -107, -73, -68, -59, -1, 14, -57, -119, -45, 31, -38, -57, 109, -106, -54, -77, 107, 38, 102, 79, 97, -25, -18, 35, -88, -36, 33, 49, -50, -66, 89, -28, -105, -26, 48, 80, 23, -15, 31, 105, 121, 67, 120, -73, -107};\n        b[126] = new byte[]{1, -27, -34, -75, 86, -29, -5, -71, -90, 26, 32, -84, -36, 17, -108, 73, -112, -53, -106, -83, -88, 116, -53, 13, -16, -112, 7, 64, -50, -72, 10, 92, -68, -53, -104, -16, -17, -109, -23, 33, 42, 28, 89, 17, 69, 66, 105, -105, 96, -2, -36, -112, -87, -83, -70, 18, 47, 15, -81, 71, -75, -100, 70, -124, -44, 108, -105, 89, 117, -127, 124, -54, 22, 27, 22, -54, 71, 17, -76, 111, 59, 23, -53, 18, -43, 75, -1, -117, -92, 47, 26, 36, 72, 13, 81, 6, 24, -116, -42, -81, 52, 72, 33, 41, 1, 111, -36, 2, -60, -99, -121, 17, 39, -27, 121, 108, 43, -49, -15, -86, -81, 40, -24, 55, 110, -127};\n        b[127] = new byte[]{106, 61, 127, -13, -1, -108, -15, 83, -73, 15, 104, -128, -62, -12, 23, 103, -127, -12, 43, 11, 110, -52, 57, -72, 36, 32, -68, -5, 109, -100, 114, -87, 62, 83, 50, -81, -86, 49, -84, -13, -75, -25, -125, 7, -20, 49, -12, -92, 120, 101, 64, -117, -91, 65, -22, -41, -51, 37, 56, -40, 114, -42, -93, -19, 31, 29, -62, 29, -113, 33, -14, -46, -82, -10, -87, -121, 14, 48, 52, 29, -111, 18, 58, 101, -100, -6, 35, -96, -26, -3, 108, -43, 13, -75, 75, -35, 43, 118, -11, 108, 10, -50, 90, -24, 8, 68, -107, -117, -100, -55, 123, -37, 33, 7, 21, -67, 98, 5, -16, 102, -97, -69, -120, 107, -78, -109, -39};\n        b[128] = new byte[]{-110, 35, 46, 23, -3, 66, 49, 25, 96, -95, 47, -18, 44, -87, -11, -104, -42, 69, 100, -47, -55, 54, 68, 80, -98, 43, -50, -81, 56, -4, 29, 0, 26, -125, 12, -17, 77, 123, -20, 26, 2, 61, -123, 117, -9, -87, -89, -103, 47, -33, -15, -4, -22, -66, 99, -111, 122, 14, 31, -80, 94, -113, -76, -110, -98, -119, 106, 1, 99, -67, -76, -55, 113, 4, -88, -64, 92, -56, -62, 14, -1, 87, -37, 26, -98, -51, 13, 19, 65, 35, -93, 14, 65, 125, -110, -81, -118, 17, 72, -29, -85, 7, -120, 2, -27, -42, -84, -24, 94, -94, -48, -85, -18, 95, 100, 98, 5, 71, 44, -104, -13, 1, 86, -42, -24, -115, -69, -39};\n        b[129] = new byte[]{97, 121, -126, 90, 24, -115, -49, -113, -56, -121, 44, 80, 33, -120, -32, 54, -8, -41, -7, 124, 3, -120, -12, -46, 4, -58, -123, 16, -71, -71, 95, -58, 56, -110, 113, -111, -98, 65, 120, -1, 56, -79, -14, 95, 112, 28, 22, -2, -20, 40, 31, -82, -66, 58, -84, 94, -34, -120, -116, -38, 0, 82, -29, 46, 56, -34, -61, 46, -73, 118, -32, 73, -119, 86, -60, 90, 58, -123, 59, 71, -18, -23, 63, 98, 34, 59, -124, 104, 93, -84, 78, -102, 111, -71, -109, 79, 31, 31, 52, -68, -33, -121, 44, 9, -64, 86, 104, 5, 17, 44, 57, 0, -11, -42, -97, 94, 93, -117, 59, -18, 81, -11, 71, 119, -104, -84, 10, -90, -64};\n        b[130] = new byte[]{24, -105, -44, -96, 24, -81, 91, -101, -86, 14, -107, 49, 77, 23, -29, 25, 99, 88, 124, -35, -1, 117, 49, 109, 117, 26, -126, 32, 126, 75, -39, -51, 103, 89, 125, 29, -127, -115, -37, 107, 95, -97, 91, -10, 23, -44, -24, 121, 107, 14, 37, 11, -96, 72, -118, 36, -31, -116, -102, 21, -43, 90, -51, -98, 85, -13, 109, -59, 28, 51, 47, -122, -80, 53, 20, 7, -60, 30, -14, 80, 111, 125, -17, -19, -31, 25, -115, 60, 29, 33, 86, 10, -46, -13, -39, -19, 110, -27, 52, 74, -64, -90, 91, 15, -67, 14, -93, 55, -98, 39, 79, 121, -80, 13, 40, 68, 98, -125, 92, -39, 76, 16, 74, -126, -107, 95, -20, 115, -59, 8};\n        b[131] = new byte[]{121, 55, -85, 54, -50, -35, 58, -94, 64, -60, 12, 92, 49, 4, 103, 80, 55, 54, 112, 24, -10, -57, 72, -44, -42, 13, 67, -36, 111, -101, -37, 105, 3, -49, -78, 65, -52, -20, -65, -101, 24, 70, 92, 4, 55, -41, 125, 37, 106, -11, -116, -124, -119, -110, 6, 68, 94, 83, -20, -12, 3, 93, -60, 97, 83, 20, -65, -45, -59, -52, 62, -8, -20, -96, -81, -98, -49, -110, 10, -114, 118, 96, -47, -63, -45, -49, 122, 111, -119, 120, -18, -81, 33, -69, -56, -20, 15, 94, -45, 103, 107, -106, 88, -104, 82, -31, -61, 103, 72, 77, 99, 120, -50, -115, -95, 113, -118, -67, -1, 116, -53, 23, -13, -62, -25, 13, 97, -50, 17, 117, -92};\n        b[132] = new byte[]{-107, -70, -58, -78, 54, -13, 19, -99, -75, -85, -53, 115, 84, 117, 123, -67, -60, -49, 114, 21, 39, -52, -113, -44, 125, -28, 118, 71, -25, 38, 57, -83, -67, 98, 88, -49, 88, -72, 109, -11, 108, 118, 38, -72, -30, 42, -2, 14, 127, -103, -41, 123, -71, 47, -122, 47, -117, 97, 75, -123, 86, -88, 26, -88, -127, 97, 11, -13, -53, 110, -93, -123, -119, 61, -107, 101, -59, -24, -83, 58, 26, 69, 63, 66, 46, 42, -107, -27, -66, -89, 28, -33, -45, -57, 62, -110, 35, -77, 34, 15, 120, 103, -109, -70, 108, 13, -72, 37, 60, -22, 62, -54, -38, -100, -10, -63, 71, -113, -75, 36, 71, 86, 92, -75, 8, -16, 21, -116, 9, -114, 92, 95};\n        b[133] = new byte[]{-103, 12, 0, 63, 54, 51, 127, 28, -3, 21, 113, 34, 103, -93, 60, -69, 90, 13, -36, 66, 91, 21, -119, -115, 85, -6, 102, -6, 61, 3, -86, 5, 62, 56, -14, 56, 81, 17, -63, 34, -79, 120, -58, -9, 76, -68, 3, -25, -47, 107, -102, -83, -76, 50, -3, -107, 77, -47, -30, -117, -19, 46, 10, -36, -53, -38, -97, 71, -27, 3, 6, -103, 116, -113, -98, -28, 122, 100, 127, 19, -88, 25, 58, 124, 14, 78, 68, 21, 53, -29, -103, -97, -20, -8, 106, 39, 120, -15, 16, 16, 99, 85, 60, -67, 86, 98, -128, -6, -59, 122, -128, 2, -13, 11, 42, -36, -85, 21, -54, 104, -120, 100, -67, 120, 48, 101, -79, -112, -48, -52, -4, -13, -2};\n        b[134] = new byte[]{-36, 110, -99, -41, 101, 24, -30, 94, 86, -20, -39, -16, -48, 18, -12, 30, 117, 98, 86, 15, 82, 116, 75, -117, 50, -89, -103, -61, 45, 17, -108, -108, 127, 98, -41, 32, 119, -7, -120, -60, -117, -105, 92, 9, 70, -122, -8, 104, 95, -91, -36, -40, 17, -108, -19, 26, 83, -117, 88, -40, 43, 48, 60, -21, 43, -91, -46, 63, 122, 117, -73, 4, -32, -21, 107, 63, -39, 84, 4, -103, 92, 99, -41, -106, -49, -97, 93, -68, -70, -118, -57, 11, 119, 112, 67, -127, -62, -77, -33, -21, -45, 7, -72, -122, -74, -25, -89, -84, -36, 3, -126, -95, -73, -62, -15, 20, 18, 113, 109, 15, 67, 68, 20, 107, 85, 71, 7, -9, -105, 74, -59, 83, 73, 104};\n        b[135] = new byte[]{3, 24, 43, 100, -92, -59, -109, -110, 111, 44, 45, -61, 4, 0, -121, -62, -99, -70, -24, 92, 74, 35, -4, -89, -12, 95, -75, -75, -119, 51, 47, -98, -47, 86, -50, 71, 8, -106, 18, -29, -75, 110, 27, 68, -12, 19, 108, 42, -52, 122, -100, 44, -93, -48, 49, -107, -108, -18, -10, -47, -93, 35, 6, 52, -67, -39, -75, -95, -24, 102, -92, -22, 114, -81, 74, 90, -45, -125, 11, -29, -89, 18, -12, -110, -17, -19, 79, -31, 41, -112, 14, -20, -117, -40, -62, 127, 120, -112, 1, 36, -93, 92, -69, 82, -65, 46, 77, 27, -72, 6, -114, -48, 91, -41, -24, -31, -127, 112, -4, -18, -41, -25, 111, -3, -103, 48, -72, -28, 74, -45, -70, -111, -97, 26, -112};\n        b[136] = new byte[]{106, -39, 6, -14, 93, -108, -4, -39, -26, -5, 50, -18, -17, 56, -34, -98, -73, -36, 1, 84, 9, 49, 74, -121, -118, 97, 89, -35, -60, 31, 105, 74, 120, -85, 42, -59, -97, 85, 34, -63, -99, -9, -113, -82, -107, -73, -83, -34, 85, -92, -1, 21, 124, 126, 46, 81, 39, -80, 121, -6, 1, 51, -63, 50, -99, -30, 17, -118, 1, 37, -116, -115, -90, 60, -1, -51, 19, -95, 5, -73, 51, -99, 0, 12, 117, 101, 19, 115, 34, -120, -98, -7, -58, -33, 30, -124, -58, 0, 87, -89, 42, -97, -57, 26, 127, 62, 111, 27, -53, -78, -27, 73, 68, -7, 48, -95, -35, 114, -17, -109, 17, -11, 23, 70, -119, 2, -81, 104, -113, -98, -34, -51, 98, -61, 67, 124};\n        b[137] = new byte[]{117, -56, -108, -42, 100, -121, 25, -64, 113, 56, 5, 65, -128, -100, 123, -28, -98, -125, 105, 7, 65, 101, -12, -56, -51, 13, 56, 90, 25, 36, 117, 19, 46, -92, -26, 86, 74, 123, -11, -9, 24, 115, -14, 24, -114, -7, -103, -37, 6, -48, -55, -72, -18, 107, 30, -59, 6, -52, 127, -29, 97, -89, 31, 103, 32, -112, -9, 110, 43, -95, 27, -28, -121, 116, -11, -53, 27, 11, -85, 118, -101, 100, -107, 2, 15, -47, -40, -100, -12, -60, 45, 88, 111, -41, -25, 4, 23, -122, -88, 59, 123, -58, 58, -19, -123, -91, -14, -44, -97, -108, 19, 119, 67, -24, -50, -62, 42, 114, -90, 85, 7, 101, 121, -20, 30, -61, -115, -8, -77, 81, -19, -61, -15, -121, -7, 85, -54};\n        b[138] = new byte[]{118, 4, 117, 60, -10, -100, 6, -5, 72, 44, 25, -96, -33, 123, 61, 41, 107, 110, 115, -82, -25, 118, 29, -21, 8, 118, 127, -108, -125, 123, -80, 67, 96, 108, 90, -119, 67, 46, 67, 11, 117, -56, 120, 116, -43, -18, -123, -99, -6, -46, 80, 105, 124, 104, 11, -67, 127, 73, 78, -47, -49, -93, -126, -108, 3, 10, 92, -74, -52, -49, -59, 58, 68, -8, -86, -97, 115, 59, 49, 16, -112, 112, 55, -51, -116, 14, 92, 8, -39, 39, 93, 63, 68, -121, 63, -56, 100, 95, -5, -107, -59, -85, -61, 16, 74, 98, 110, 1, -9, -55, 79, -110, -106, 109, 71, 100, 7, -99, -40, -112, -34, -9, -89, -51, 106, -49, -48, -2, 114, -37, -71, -111, 121, -95, 110, 104, -97, -66};\n        b[139] = new byte[]{-43, 15, 43, 126, -99, 71, -72, 107, 49, -70, -76, -32, 24, -58, -92, -58, 62, 82, -64, -47, 123, 18, 44, 87, -59, 83, -25, 124, 96, 3, 88, 55, 50, -126, 30, 66, -44, 19, 23, -86, 34, -11, 2, -27, 87, 57, 81, 78, -79, -84, -99, 124, -75, -122, 11, -62, -101, -121, -14, 98, 47, -95, -2, -41, 105, 88, -84, -47, -108, 79, -36, -119, 68, -116, -47, 14, 46, 23, -54, 83, 39, -83, -116, 1, -73, 0, -119, -114, -127, -46, -117, -121, -79, -49, -110, -74, -118, 30, 120, -70, -43, 64, -69, 53, -39, -125, -87, -89, 115, -40, -98, 119, -7, -115, 70, 56, -3, 119, 97, -59, 15, -103, -81, -45, 15, -22, 76, -33, -42, 23, 17, 38, -74, -26, 76, -2, 115, 12, 106};\n        b[140] = new byte[]{-61, 77, 83, -100, -13, -1, 23, 117, 103, -117, 119, -63, 117, 93, -10, 6, 118, -37, -32, -99, 69, 113, -74, -124, -7, 121, -8, -30, 122, 57, -70, 14, -5, 83, -63, 82, -42, 4, -90, -36, -70, -119, -13, 36, -14, 93, -37, -77, -105, -101, -10, 119, 0, 68, 127, 56, -124, 125, 59, -78, -86, 7, -117, 46, -64, -104, 76, 24, -41, -103, -125, -120, 29, 10, 44, 18, 94, -125, -56, 9, 39, -69, -123, -54, -25, 103, -112, 91, -31, 94, -77, -41, -110, -77, 99, 106, -8, 110, 26, 105, 30, 50, -30, 87, -98, 20, -39, -126, -95, -97, 65, 66, 96, 0, 102, -67, 11, 22, 74, -89, -66, -90, -118, -104, 21, 96, 114, 12, 79, -77, -65, -4, 73, 1, -25, -90, -85, -38, 83, -90};\n        b[141] = new byte[]{57, -4, -56, 23, 127, 19, -89, -104, 53, 91, -105, -107, 110, -71, 43, 49, -19, 12, -101, -73, -76, -64, 22, 32, -26, 21, 111, 46, -103, -1, -28, -59, -71, 56, 87, 38, 68, 59, -127, -89, 94, 90, -55, 16, 103, 39, 91, 1, 35, -35, -2, 8, -39, 116, 47, 3, -4, 67, 76, -3, 33, 113, 99, 76, 68, 121, -128, 118, 117, 41, -15, -68, 53, 95, -88, 105, -62, -115, 27, -74, -104, -83, -75, 31, -74, 68, -117, -2, -125, -33, 68, -45, -34, -49, -91, 52, 22, -27, -96, -67, 90, -41, 80, 30, -100, -64, -92, -42, -65, 6, -3, 42, -128, -5, -77, -96, 6, 97, 23, 71, -25, 70, 96, 37, -48, 103, -120, 80, -5, 116, -86, 14, 66, 114, 127, 16, 43, -109, 81, 114, 62};\n        b[142] = new byte[]{-30, 26, 23, -46, -56, -22, -106, 68, -119, 61, 74, -70, -37, -72, -119, -112, -42, 17, 110, -48, -2, 87, 106, -124, -84, 43, -109, -118, 70, -98, 68, 49, 25, -67, 81, -42, -65, 55, 111, -62, 62, 22, -41, 28, 73, -113, 63, -78, 28, 3, 122, -49, 97, 35, 9, 104, -99, 113, 43, 21, -127, 55, -93, 67, 86, -57, -14, -28, -13, 38, 8, 127, -50, -83, -14, 25, 68, -84, 38, -126, 86, -83, -25, 42, -58, -56, 30, -15, -79, 1, -114, 73, -66, -87, 67, -68, 27, 121, 0, -100, 46, -123, 50, 50, 118, 53, -124, 30, 93, -2, -114, 43, -93, -96, -78, -84, -119, -62, 81, -49, 79, 32, 38, -77, 111, -56, -95, -124, -63, -30, 33, 42, -128, -127, 70, -1, 103, -51, 16, -111, 8, 106};\n        b[143] = new byte[]{51, -9, 114, -41, -116, 77, 109, -109, 17, 124, 120, -118, 40, 87, 102, 15, -13, -85, 16, 31, -68, 49, -20, 107, 68, -17, 38, 50, 29, 34, -28, -70, -51, 3, -107, -108, -76, -75, -35, -63, 71, -64, -54, -58, 38, 106, 95, 120, 49, 42, 13, 37, -8, 38, -64, 96, -88, -88, -36, 37, 89, -112, 86, -42, 74, 80, 104, -9, 106, -78, -71, -10, 114, -9, 58, 37, -58, 86, -12, 89, 78, -57, 78, -61, 17, 18, 70, 109, -98, -91, -22, -121, -37, -51, -107, -96, 23, -20, -97, -6, 27, -45, -22, 57, -55, -67, 112, 85, 9, 52, -9, -107, -13, -73, -86, -114, 37, 120, -37, -124, 39, 11, 46, 83, -89, -85, 92, 96, -73, 10, 30, 119, -72, -5, 70, 34, -73, 67, 82, -105, 23, -21, -11};\n        b[144] = new byte[]{26, 2, -21, -38, 23, 119, -100, -82, -72, 33, -101, -12, 38, 75, 10, 1, 63, -14, 36, -44, 55, -15, -84, -82, 91, 32, 103, 88, -72, -41, 108, 73, -109, -45, -113, 20, 14, -102, 108, -82, -71, -49, -22, 24, -92, 70, -114, 111, -39, 57, 71, 26, 16, -10, 117, -52, 6, -12, -46, -54, -36, -8, 124, 34, -126, 40, -11, 103, -10, -67, -107, -127, 7, -28, -116, 35, -47, 105, -127, -100, 65, 88, -79, 35, -64, 118, -50, 90, -63, -38, 17, 3, 21, -79, 7, -28, -33, -63, 22, 64, -3, 5, -81, -91, 114, 48, -87, 68, 65, -6, 108, 70, 75, -126, -90, -99, 74, -58, -57, 26, -60, -82, -32, -28, 24, 23, 82, 86, -12, 107, 108, 116, 23, -32, -67, -124, 64, 116, 57, 83, -20, -113, -126, 77};\n        b[145] = new byte[]{91, -39, 74, 112, -80, -22, 52, 100, 0, 27, -5, 10, 64, -42, -111, -103, -29, -108, -104, -78, 123, 25, -61, 13, -88, 22, -122, 103, -82, 125, 70, 120, -21, -23, 20, -21, 126, 121, -92, -89, -106, 125, -103, -32, 11, -97, 5, -24, 30, 51, -29, -51, 36, 3, 38, 117, 88, -79, -113, -79, -56, -55, -18, 62, 9, 122, -128, -59, 64, -124, 9, -66, 94, -102, -40, 86, -101, 39, 123, -117, -19, -5, -70, 35, 82, -90, -81, 84, -16, 106, 47, 46, 93, -74, 120, 105, -42, -89, -36, -100, 8, -107, -27, -58, 97, 29, 117, -5, 53, -68, 100, 80, -20, -23, -74, 49, 6, 9, 8, -25, -123, 33, -8, -84, -10, -39, -74, 10, 8, 88, 79, 25, -23, -70, 5, -34, 95, -19, -124, -71, -59, 95, -32, 34, -119};\n        b[146] = new byte[]{-119, -126, -25, -26, 31, 101, 34, 16, -1, -57, -39, -88, 104, -12, 103, 77, 126, -90, 36, 66, 74, 78, 24, 56, 89, 124, 82, -20, -118, -47, -37, 54, -27, 31, 110, -82, 58, 66, 13, -49, 71, 73, 53, 50, 85, 122, -37, 52, 100, -42, 3, -98, -55, -45, -20, -99, -94, 35, 118, 58, -123, 53, 86, 60, 106, 24, 83, -113, 73, -36, 29, -117, -124, 36, 68, -77, 64, -39, 67, 112, -69, -45, -51, 5, -74, 35, -100, 124, 118, -33, 4, -77, 103, -48, 60, -126, 43, 82, -34, 0, 46, -40, 7, -10, -51, 118, 44, -95, 46, -95, -4, 124, -87, 126, -45, -30, -95, -120, -16, -56, 80, 18, 88, -39, -18, -56, 109, -108, 127, -10, -35, 44, -60, -106, -56, 95, 30, -100, 70, -14, 57, 1, 119, -79, -41, 106};\n        b[147] = new byte[]{74, 84, 73, 17, -50, -25, -91, 53, 47, 66, -81, 18, -128, 22, 10, -103, 86, 63, -33, 1, -40, -89, 104, 44, 15, 22, -97, 55, -14, 75, 82, -31, 42, 18, 57, -106, 50, -43, -69, 127, 16, 18, -117, -25, -113, 95, -120, 38, 36, -102, -117, -124, 62, 109, -8, 6, 113, -120, 44, 24, 43, 114, -9, 113, -21, -119, -57, -124, -30, -87, 88, 9, -49, -57, 122, -79, -50, -33, -127, 101, -27, -70, 29, 74, -8, 23, 6, 61, -74, 123, -8, 42, -72, 86, -56, 26, -20, -111, 1, 85, -23, 47, -120, 70, 121, 2, 30, 26, -92, -38, -4, 70, 64, 123, -96, -61, -108, 84, -15, -79, 69, -52, -78, 105, 81, 56, -52, 21, -66, -79, -64, 58, 115, 92, -94, -4, 116, 23, 117, -44, 61, -83, 108, -117, 82, -59, 104};\n        b[148] = new byte[]{0, 9, 91, 25, 30, -98, -112, -77, -77, -57, -120, 105, -87, -108, -44, -87, 85, 16, -48, 82, -10, 8, 90, 96, 8, -61, -87, -24, 43, -82, 83, 57, 18, -99, 101, -23, 82, 59, -50, -119, 32, -28, 52, -8, 40, 76, -8, 41, -126, 104, 55, -71, -117, -52, -79, 126, 55, -102, 67, -58, 80, 96, -67, 107, 0, -45, -123, 124, -122, 66, 30, -82, -35, 103, -42, -74, 104, 98, 61, 26, -105, -98, 49, 94, -109, -31, 15, 119, 66, -40, 94, -101, 59, -42, 122, 39, -24, 47, 102, -18, 117, 37, 96, -43, -77, 4, -99, 88, -50, -68, -42, -114, 80, 121, 44, -77, -63, 55, -58, -20, 100, 110, -111, 109, -42, 100, 96, -52, 73, -12, -98, 109, 107, -9, 55, -46, 111, 48, 12, 51, 110, 78, 109, 39, 16, 77, 25, 85};\n        b[149] = new byte[]{-99, 101, -101, 6, 28, -50, 110, -84, 4, 22, 31, -45, -120, -92, 68, 114, -54, -117, 97, -76, 99, 33, -58, 95, -108, -102, 104, -105, 94, -116, -117, -122, 3, 47, -95, 25, -82, 45, -74, -87, 25, -45, -126, -80, 109, 33, -113, -121, -119, -28, -40, 90, -30, -38, 9, 41, 63, 7, -43, -100, 98, -24, -24, 75, -94, 91, -27, -36, -96, -36, 84, 58, 92, 95, 91, 97, -93, 80, 27, 29, -80, -16, 49, -32, -57, 73, 54, -98, -95, -1, -47, 77, 108, 1, 77, 36, 126, -35, -10, 104, 61, -88, -82, -96, -116, 34, -102, -37, 59, 85, -119, 34, -35, -102, -71, 25, -17, 112, -28, -59, -96, -26, -79, -9, 110, -89, 2, 76, 111, 71, 121, -21, 21, 80, -34, -68, 88, -61, 110, -24, 41, 88, 121, 6, -62, 39, 58, 27, -70};\n        b[150] = new byte[]{88, -39, 53, 70, 125, -86, -76, 111, -96, -109, 64, 4, 123, 10, -32, -93, -26, -111, 108, -38, -58, -32, 40, 16, -92, -28, 124, 82, -114, -36, -38, 109, -105, 65, -113, 12, 84, 59, -72, -71, 16, 58, -81, 54, 6, 25, -40, 42, 77, -62, 2, 42, 76, -67, 50, -15, -34, 37, -29, 86, 84, 5, -50, -58, 96, 56, 17, -43, -48, -37, 18, 45, 20, -105, 80, -73, 16, 109, -25, -89, 26, 119, -47, 65, 93, 123, 51, -37, 92, -107, -80, -6, -7, 119, -114, 119, 105, -72, -69, 79, 117, -33, 29, 84, -45, -95, -23, 34, 58, 92, 64, 38, -49, -101, -91, -85, 125, 112, 84, 91, 33, -47, -32, -124, -17, 112, 115, -5, -100, -96, 10, -45, -25, 123, -23, 98, -55, -14, 121, 89, -26, 100, 109, -113, 95, -113, 37, 94, -109, 82};\n        b[151] = new byte[]{-63, 89, -94, 59, -87, -99, 127, 102, -102, -122, -78, 101, 114, 105, -63, 15, 68, 26, -25, -52, -68, 2, -4, -41, -76, -98, 120, 34, 108, 96, 60, -77, -25, -48, -48, -112, 34, -71, -108, -57, 51, 89, 53, 51, -125, 19, 117, -114, -22, 70, 76, 16, 38, -109, -3, 17, 42, 79, 115, -24, 56, 26, 125, -78, -48, -121, 8, 83, 87, 56, -50, -3, -17, -46, 120, -32, 45, 89, 69, 77, 50, 60, 40, 90, -45, 73, 16, 100, 17, 121, 18, 103, 11, -118, -43, 66, -49, 93, 45, 63, -56, 6, -43, -8, -120, -68, -56, -16, -91, -35, -103, 76, -26, -104, -29, -8, 56, 53, -30, 71, 46, 50, 79, -106, 93, 28, -26, 118, -57, -18, 126, 47, -5, 82, 62, -60, 110, -1, -18, 78, -58, -24, -33, 44, -89, 109, 105, 110, 10, 83, 96};\n        b[152] = new byte[]{58, -120, -107, 102, -117, 8, -8, -95, -76, 17, -108, -18, -7, 106, 71, -18, 66, -120, 75, 25, -114, -41, 52, 88, 105, 35, -52, 4, -59, -76, 3, 36, 98, 11, 104, -103, 84, 73, 14, 50, 34, -89, -41, 101, -49, -88, -128, -46, 91, -7, 21, 3, -97, 28, -66, -1, -14, -79, 48, 51, 40, -76, -18, -17, -59, 40, -6, -59, 92, 37, -19, -64, -76, -73, 96, 120, 15, 111, 57, 17, 68, 45, 51, -8, -65, -48, -48, -2, 96, 38, 122, 23, -73, 55, -52, 100, -7, 84, -53, 99, -84, 71, 90, 46, -97, -30, 63, 92, 76, 53, -65, 4, 60, -119, 72, 52, 88, -45, 74, 24, -96, 121, 111, -98, 56, 7, -93, -128, -121, 6, -115, 44, 48, 104, 23, -36, 44, 28, -100, -83, -95, -92, -63, 85, -76, 31, -9, -88, -7, 122, -65, 108};\n        b[153] = new byte[]{-9, -74, 85, -79, 54, 48, 15, -59, 107, -128, -35, 69, 56, -124, 89, -14, 57, -68, 56, -56, 43, -60, 109, -24, -43, -94, 104, 98, -45, -43, 89, 122, 125, 114, 56, -27, -127, 122, -109, 49, -107, 108, -95, 106, -9, -90, -66, -23, -71, -36, 62, 45, -118, 53, 18, 60, -9, 38, -104, -108, 60, 122, -106, 113, -99, -113, 90, -75, -84, -20, -12, 117, 106, 70, 6, -69, 7, 66, 4, 118, 47, 8, 100, -36, 101, -127, 94, -1, 43, -75, 0, 31, 48, -25, 54, 44, -105, 87, -119, 71, -114, 96, -46, -19, 67, -107, 119, -15, -28, 21, 0, 83, 55, 56, -56, -112, -29, 115, -113, 11, -77, -83, -101, -97, -53, 116, 16, -98, -2, -33, 75, 22, -62, 39, -22, 42, -20, -10, 16, 122, 108, -86, -99, 99, -2, 35, 37, -61, 50, -119, 26, 49, -124};\n        b[154] = new byte[]{-48, -44, -104, 41, 59, -63, 40, -94, 39, -64, -65, 79, 39, -6, 86, 81, 101, 87, -30, 8, -59, -34, 40, 44, 3, 106, -86, 64, -53, 17, 123, 13, 37, 35, 82, -36, 8, 29, 124, 120, 96, -104, -109, 64, 39, -55, 64, -98, -9, -36, 57, -107, 97, -58, 21, 67, 12, 120, 126, -125, 101, -56, -128, -54, 85, -122, 120, 57, -11, -12, -105, 115, 84, -28, -34, -68, 21, -92, -36, -78, 46, -116, -115, 70, -66, -63, 1, -34, -123, 106, 127, 102, 101, -12, -122, 94, 12, 96, -109, -29, -26, -48, 40, 21, -81, -127, -59, -57, -113, 43, 25, 126, 121, -1, -25, 63, 87, -49, 78, -86, -84, -6, -102, 115, -110, -33, 75, 126, -97, 13, -52, 39, -110, -75, 24, 65, 96, -20, 47, 98, 36, 123, 125, -128, 46, 99, -89, -111, -64, -29, 54, -83, 65, -96};\n        b[155] = new byte[]{-26, -119, 62, -83, -126, 56, 44, 40, 6, 107, 106, 108, 25, 67, 127, 125, -39, 19, -38, 4, 4, 78, -128, 125, 29, 24, -123, 93, 10, 94, -39, -121, 16, -68, 67, 118, -49, -74, 37, 36, 33, 19, -57, -120, -46, 91, 13, 58, -89, -106, 60, -75, -105, 41, -45, -55, -88, 40, -42, 48, 80, -98, 52, 14, -13, -23, 26, 80, -58, -5, 5, 41, 22, 16, -72, -110, 71, -24, -22, -8, -6, 78, -80, -93, -25, 42, 22, 38, 46, 67, -6, -89, 96, 31, 100, -12, 37, -27, -116, -13, 71, 24, 55, 70, -20, 58, -57, -83, 117, -86, -115, -124, 51, -115, -107, -123, -39, -38, 85, 88, -109, 37, 82, -1, 12, -16, -16, -82, 113, 95, -50, -60, 90, 75, 112, 59, 1, 106, -1, 38, 33, -71, 96, -104, 39, -47, -103, 47, -76, 46, 14, 42, 73, -116, 65};\n        b[156] = new byte[]{40, 124, -45, 106, 85, 61, -64, -12, -89, 34, 56, 121, -125, 71, -121, -117, 81, -44, 104, 91, -97, -60, -102, 87, -90, 48, -34, -48, -35, -16, 16, -94, 13, -87, -72, 51, -123, -72, -9, 41, -2, 42, 90, 54, -10, 119, 80, 62, -48, -55, 110, -10, -42, 5, -2, 64, 61, 56, -40, -35, 107, -104, -40, 125, 24, 2, 30, 110, 102, 82, -72, -44, -47, 48, 50, 79, -79, 16, 21, -99, -82, -23, 97, 74, -2, -63, 71, 63, -17, -78, 112, -108, 36, -14, 78, -54, 44, -11, 22, 3, -109, -106, 73, -52, -75, 16, -17, -99, 96, 94, 29, -46, -66, -118, -28, -17, -69, 31, -6, -23, -110, 124, 77, -24, -49, 69, -108, -1, 44, 31, -51, -61, 92, -83, 82, 119, -27, 23, 47, 125, -125, -5, -121, -27, 23, -97, 52, 21, -90, 121, 7, 116, -28, -57, 119, 71};\n        b[157] = new byte[]{70, -78, 85, -60, -126, -88, 13, 123, 66, -66, 37, -116, -65, -12, -105, 48, -18, 54, 14, 126, -108, 88, -30, -125, -53, 104, 97, -40, 4, -105, -78, -60, -12, 123, -31, -70, -101, -79, 117, -37, 125, 34, 37, 105, 68, 55, 76, 1, 71, -54, 126, 6, 84, -35, 6, 20, 43, -97, 110, 116, -9, -61, -9, 43, 94, -85, 6, 102, 105, -49, 15, -7, 118, 103, -84, 32, -100, 97, 96, -10, -116, -32, 104, -102, 58, 12, -19, 22, 59, -110, 113, 56, 36, -103, 93, 9, -105, -5, -39, -11, -32, -105, 116, 69, 77, 33, 39, -105, -112, -120, -79, 51, -118, 108, -79, 49, 110, 81, 94, -49, 99, -11, 41, -51, -40, -7, -26, -80, -54, 24, -70, -11, 121, 62, -64, 21, 84, -115, 63, 125, 15, -124, -65, 51, 102, -49, 12, 0, -38, -118, 5, -30, -127, 4, 59, -19, -61};\n        b[158] = new byte[]{-77, 46, 45, -26, -79, 64, -17, -111, -111, 4, 79, -125, -87, -81, 108, 67, 24, -49, -106, -30, -83, -4, -103, -60, 99, -98, 32, -72, 121, -54, -87, -57, 38, -57, 113, -58, -117, 34, 116, -115, 64, 62, 122, -34, 23, 59, -59, -32, -21, -36, 2, 3, -36, 85, -60, -106, 80, 47, -67, -13, -13, 73, -107, 124, -121, -8, -36, 114, 10, 59, 24, 49, 79, 98, 35, 27, -79, 10, 48, -32, -1, -85, 30, -115, -100, -60, -17, 123, -128, 107, -54, 8, 11, -75, -78, -48, 81, -28, 95, -122, -72, -112, 121, -114, -31, -21, -101, 67, -10, 39, -85, -123, -57, 23, -95, 112, -23, 26, 121, -127, -97, -39, -74, 5, 3, -5, -13, 47, -112, -123, -50, 30, 34, -58, -73, 45, -52, 91, 64, -107, 8, -62, -11, 17, -116, 90, 127, -82, 3, 3, -18, 88, 78, 45, -70, 26, -1, 102};\n        b[159] = new byte[]{102, -49, -63, 124, 90, 22, 34, 102, 26, -69, 103, 89, 45, -66, -55, -99, -25, -109, 66, -98, -20, 67, 78, -78, -94, 113, 42, -47, -122, -72, 4, -45, -119, 27, 47, -7, 116, 97, -8, -38, -116, -19, -48, -6, 79, -40, -122, 127, 75, -97, 23, -19, -21, 21, -127, -50, -93, 3, 92, -73, 5, -52, 99, -36, -61, -24, 14, 52, 9, 73, -111, -59, 18, -44, 119, 27, 125, 83, -15, -31, 121, 58, -109, -43, 11, -121, 112, -10, -49, 92, -106, 89, 76, -45, -101, 111, 113, -23, -84, -80, -73, 92, 119, -50, 84, 63, -4, 65, 104, 58, -26, -92, 9, 124, 100, 52, -100, -17, 124, -33, -108, -83, -25, 39, 15, 30, -48, 116, 5, 98, 123, 77, -98, 86, 79, 23, 44, -78, 4, -79, -25, 47, 39, 27, -24, -103, 111, -85, -79, 118, 58, -86, -39, 71, -31, 87, 102, 114, -9};\n        b[160] = new byte[]{-123, -41, -125, 38, -28, 103, -103, -65, 42, -12, 70, 30, 115, -49, -97, -70, -44, -1, 10, -6, -95, -90, -86, 20, 118, -39, -122, -24, 77, -11, 70, -74, 9, 14, -49, 122, 51, -107, -97, -98, 15, 116, 32, 74, -85, -99, -58, 94, -30, -75, 88, 14, -121, 17, 100, -83, -73, 118, -6, -83, 37, -93, -31, 77, 64, 87, 94, 30, 54, 35, 35, 37, 82, 122, -24, -21, -46, -120, -5, 78, -7, 22, -10, 24, -62, 5, 90, 81, -35, 116, -81, -79, 49, 88, -50, 89, -20, 48, -112, -37, 31, 19, -101, 89, -98, 43, 102, 2, 76, -7, 5, -43, 85, -41, 123, 25, 117, 82, 54, 2, -99, 20, 46, 67, 26, 105, 118, -118, 97, 51, 10, -24, 36, -81, 21, -86, 82, 91, 20, 91, 37, 114, 20, -46, 4, 91, -120, -17, 8, 28, 119, 47, -97, -4, -79, -52, 108, -53, 46, -79};\n        b[161] = new byte[]{10, 80, -126, 58, -3, 38, 15, -33, -1, 45, 29, 14, -118, -63, -33, 106, 108, 92, 78, -7, -91, -64, -62, -32, 0, -124, 45, -34, 22, -50, -115, 19, -28, 95, 1, 32, 104, 60, -49, -46, -18, -117, 55, -64, 77, -63, -45, -107, -61, -30, -31, -83, -68, -52, 35, -52, -48, -52, 123, -24, -18, 97, -113, -111, 2, 2, 121, -24, -90, -1, 31, -79, -104, 99, -48, -74, 101, -89, 95, 16, -106, -120, -67, 110, 127, -1, 30, 71, -107, -82, -53, -47, 43, -14, -55, 19, 7, -54, -58, -29, -5, -101, 111, 107, 44, -68, 41, 46, 108, -26, -49, 2, 67, 18, 58, 1, 103, 95, -43, 45, -58, 112, -115, -29, -23, -52, 53, 93, -81, -66, 126, 49, 49, 52, -81, -67, 12, -104, 89, -20, 31, -98, 83, 100, 126, 84, -14, -67, -83, 94, -92, 79, 81, 85, 109, -111, -87, 27, 73, -118, 70};\n        b[162] = new byte[]{22, -49, -128, -104, 80, -89, 82, -65, -30, -101, 15, 3, -48, 106, 77, -119, -46, 15, -10, -84, 22, -13, 36, 64, -50, 107, 106, 61, 47, -81, 79, -87, -7, 83, -122, 5, 65, -54, 96, 111, 57, -21, 96, -18, 19, 62, -87, 21, 23, 106, 51, -42, 106, 96, 45, -126, 32, -57, -5, -74, 94, -54, -19, -106, 49, -105, -29, -94, -33, 99, -61, -78, 80, -10, -80, -29, -9, 90, -33, -60, 6, -98, 10, 8, -107, 45, -100, 55, 77, 92, -128, -35, -34, 125, 40, -52, -106, 118, 69, -93, 92, 124, 79, -38, 116, 54, 125, 72, -127, 24, 30, -68, -25, 121, 123, 53, 84, 47, -75, -99, 99, -73, -98, -120, 77, 105, 93, 119, 6, 6, 0, -40, -97, -77, 67, 66, -104, 116, 116, 46, -121, 14, 80, 98, 75, -34, 91, 12, 87, 25, -5, -95, 88, -118, 1, 56, 91, 38, -23, -80, -31, -53};\n        b[163] = new byte[]{-62, 3, -72, 13, -47, -103, -53, -40, 53, -36, -117, -114, -122, 66, 70, 37, -60, -24, -56, -69, -126, 5, 89, -67, 79, -9, 60, -87, -114, 13, 58, 23, -107, 83, 83, 86, -38, 15, 44, 60, -118, 62, 70, 33, 44, 73, 36, -4, -77, 30, -66, 38, 31, -64, -2, 70, -126, -59, -117, -55, -12, 43, 32, -100, 24, -39, 48, -59, -111, -79, -35, -4, -36, 118, 64, -96, -101, 100, -57, 2, -81, -54, -121, -105, -49, 48, -2, -90, -31, 111, -88, -92, 1, 16, -86, -27, 4, 76, 31, 125, 120, 75, 14, -127, 80, 1, 109, -78, 113, -117, 65, 27, 59, 101, -48, 107, 20, -74, -125, -88, 111, 105, -17, -18, 39, -89, -57, 92, 67, -24, -93, 89, 53, -84, 88, -57, 99, -101, 68, 6, 18, -3, -17, 11, 75, 122, 96, -27, -39, 46, -12, -61, -63, -89, 85, -11, -38, 111, 25, 33, 116, 64, 107};\n        b[164] = new byte[]{18, 69, -19, -45, 100, -102, 69, 66, 35, 22, 106, 11, -57, 35, -70, 55, -24, 34, 47, -120, -128, -31, -10, 52, 19, 22, -88, -6, 104, -32, 17, -10, 126, 90, -2, -80, -9, -111, -105, 28, 18, 53, -58, 86, 12, 84, -71, 14, 114, 123, -67, -99, -21, 28, -67, -59, -48, 31, 67, -85, -88, -65, 110, 126, -118, -60, 81, 49, -109, 74, 13, -100, -117, -82, -26, -32, 106, -16, 2, -68, -116, -53, -18, 94, 82, -114, -5, 67, -111, -87, 88, -89, -20, -125, -55, -61, 108, 63, 26, -34, 5, 8, -1, -47, 4, -46, -64, -115, -89, -69, 76, 104, -84, 40, 39, -98, -100, -58, 22, -58, -35, 50, 88, -90, -91, -109, -90, -83, -1, 75, 122, -69, -21, 31, -73, 17, 50, -2, -49, 24, 122, 16, -56, 124, 48, -109, -33, 89, -62, 49, -108, 52, -69, 122, -14, -86, 116, -8, 18, -45, 66, -96, 82, -39};\n        b[165] = new byte[]{58, -32, 106, -57, -110, -59, 38, -70, 17, 108, 57, -8, -41, -18, 26, -52, 81, -27, 42, 12, 58, 108, -56, 27, -79, 17, -102, 43, -43, 39, 62, -8, -71, -59, -7, -107, -31, 34, -48, -39, -116, -56, -122, -118, 70, -117, 81, 121, -20, -66, -81, 42, -23, 26, 91, 69, -27, 22, 79, -59, 127, -108, -35, -28, -125, 2, -19, 79, -92, -67, 114, -91, 127, -57, -58, 32, -124, 60, 21, -95, -56, -46, -10, -56, 95, -49, 78, 38, 80, 106, -108, -128, -86, 126, -44, -115, -119, 84, 113, -75, -95, 62, 104, 40, 116, -84, 26, 3, 126, 3, -16, -72, 47, 42, 4, 45, -76, 35, 83, -73, 100, -69, -118, 125, -27, 21, 26, 67, 14, 44, 69, -98, 100, -76, -70, -102, 103, 39, -35, -60, -124, 70, 63, 104, -3, -47, 37, -15, 6, 48, 66, -8, 71, -7, 81, -70, 97, 97, 127, -1, 41, 34, -43, 91, -68};\n        b[166] = new byte[]{72, -17, -17, 14, -54, -103, 13, -46, 38, 57, -47, -11, -10, -58, 72, -20, 85, 21, -122, 92, 117, 16, -115, 23, 70, -65, 0, -83, 59, -128, 27, -111, 124, 44, 50, -69, -24, 23, 45, -40, 46, -33, 93, 53, 40, -62, 41, 87, -100, -107, -95, 67, 27, -37, 26, 43, -91, -111, 65, -110, -71, 88, -43, 63, 93, -77, 105, -49, 91, 74, 20, 105, -81, 82, -9, -71, -57, 94, -18, 125, 95, -9, 47, -51, 112, 114, 66, -63, -38, -109, 46, -82, -47, 99, 40, 8, -75, 14, 41, -91, 1, -94, 63, -40, -41, 127, 96, -25, -2, -87, -107, 101, -108, -31, -7, 38, 55, 1, -112, -120, 75, -29, -107, -93, 98, -64, -119, -126, 71, 90, 124, -13, -95, 127, 25, -73, -25, 78, 98, 35, -128, -3, -108, 10, 102, 39, -107, 38, 87, 60, -110, -49, -74, -58, -90, 15, 15, -98, 94, 31, 70, -19, 102, 126, 97, -52};\n        b[167] = new byte[]{-75, -110, -1, -88, 0, -116, 59, -44, -77, -102, 2, 97, 89, 3, 44, 108, -88, 4, -26, 83, -64, 17, -68, 103, -36, -44, 123, -25, 78, 34, -106, 0, 43, 71, -56, -5, -70, -3, 74, 23, -114, -82, 67, 40, -21, -112, 73, -14, 6, -118, -26, 96, 31, -6, -100, -79, -91, 30, 27, 122, -40, -124, 31, -76, -58, 31, -26, 1, -23, 28, 87, -45, -66, -23, 17, 40, 95, 59, -37, -52, -120, 96, 0, 24, 28, -12, 63, 90, 49, -13, 29, -43, 82, -87, 66, 106, 23, 102, -68, 68, 78, -110, -66, -10, 62, 41, 34, -106, 44, -59, 55, -122, 57, -11, 127, -89, 106, 95, -97, 125, -123, -128, -5, 2, 118, -49, 25, 58, 69, 40, 53, 57, -80, -79, 78, 93, -69, -78, -99, 77, 108, 61, 72, 79, -7, -82, 7, 122, -1, 114, 53, 78, -102, -76, -80, -24, -32, 41, 23, -3, -118, -73, 21, -70, 86, 86, -28};\n        b[168] = new byte[]{25, 23, -69, -72, 93, 112, 31, -97, -5, -44, 29, -17, -104, 97, 126, -92, -35, -57, -12, -14, -114, -42, -46, -16, -78, 118, -12, 15, -113, -49, -101, -77, -18, -28, -96, 30, -32, -25, -34, -106, 71, -59, 32, 24, 50, -114, -22, 25, -82, -105, -124, -112, 102, 103, 111, -22, -97, -8, -87, -5, 42, -35, 97, 15, 6, 43, -4, -58, -3, 123, 11, -80, 57, 123, 27, 34, -110, -48, 50, 7, -31, -48, -114, 87, -80, -6, -42, -95, -57, 110, 87, 57, -2, -69, -9, 38, -35, -54, -12, 103, 93, 115, -77, 29, 0, 102, 52, -22, -66, -55, 64, 10, 64, -22, -118, -85, -104, -29, 82, 97, -76, 103, 92, -37, 100, 66, -68, -122, 40, -101, 105, 126, -49, 51, 8, 51, 32, -113, -80, 119, -126, 72, 29, 76, 6, -17, 4, 88, -83, -30, 63, -76, -125, -35, -43, -83, -73, 12, -52, -125, 76, 90, -98, -125, -61, -126, 77, 20};\n        b[169] = new byte[]{-16, 16, -59, -69, -19, -67, -106, -101, 101, 25, 40, -36, 101, -18, -32, -123, 102, -108, -128, -116, -37, -71, 74, 76, -27, 112, -59, 110, -46, 85, 64, -15, 29, -35, -80, 4, -47, -63, -111, -107, 1, 61, 18, 18, -105, -117, -110, 127, 34, -55, 24, 54, -76, 55, -25, -69, 65, -124, 15, -108, 52, 51, 87, 10, 38, -45, -40, 6, 70, -89, 53, -128, 115, 1, 58, 116, -1, -75, -32, 91, -111, 47, -111, -79, -86, 31, -19, 122, -29, -40, 42, -66, 72, 34, 126, -52, -35, 38, -32, 59, 39, 33, 103, 50, -56, -20, 113, -126, -67, 88, 65, 82, 34, 65, -69, -54, 43, 35, 117, -90, 0, -123, 92, 82, 16, 44, 48, 97, -20, 22, -9, -100, -109, -10, 66, 93, 0, 62, 82, -81, -42, 86, 117, -75, 84, -37, 58, -123, 41, -120, -122, -64, 5, 115, -99, 106, -78, 107, 16, 43, 78, -13, -39, 106, 109, -57, -118, -47, -113};\n        b[170] = new byte[]{-78, 35, -46, 92, 62, 46, -33, -91, -104, -75, 59, -17, 15, 52, 101, 20, -8, -82, 100, -55, -47, 115, 58, -53, -35, -32, 53, -25, -34, 121, 36, 48, -100, -21, -11, 118, 10, -5, -70, -101, -15, -49, 59, -94, 113, -94, 12, 78, -47, -90, 19, 103, -101, 94, -115, -128, -50, 33, -104, 1, -53, -115, 3, -127, 70, 76, -88, -14, 118, 34, -106, 35, -78, 101, 27, -114, 50, 84, -14, -17, -50, -89, 8, 76, -94, 126, 118, -26, 109, -17, -48, 70, 37, -65, 40, -10, 66, -99, -23, -64, 82, -125, -110, -7, -36, 43, 118, -115, -116, -35, -54, 105, -91, -6, 30, -30, 50, -22, 76, -86, -80, 57, 116, 5, 49, 39, 7, -104, -119, -56, 114, -47, 4, 41, 30, -50, 116, -54, -45, 95, 110, -29, -58, 31, -78, -68, -10, -96, 107, -103, 113, 108, -51, -113, -97, -17, 40, -57, 113, 64, -8, -78, 39, -47, 7, -54, -116, 124, 2, -71};\n        b[171] = new byte[]{-5, -3, 120, 62, 113, 80, 85, -98, -63, 76, 114, -108, -66, 68, -19, 70, -74, 18, -19, 105, -49, 52, 62, 96, 103, -106, -14, 50, 21, 43, 12, -71, 9, 107, -91, 15, 5, 94, -13, -46, 122, -61, 50, 39, -60, -93, -9, 80, 125, 74, -73, 18, 48, -94, 27, -84, 70, 86, 26, -44, -68, 12, -32, -58, -93, -112, 101, 53, -75, 99, -38, 125, 51, 66, -106, 91, -31, 52, 94, -16, -112, -90, -111, -59, -90, -29, 42, 23, 91, -40, -80, 93, 14, 15, -96, 12, -120, 79, 73, -76, 105, -42, -77, 114, 92, 105, 99, -1, 92, 17, 127, 10, -8, 80, -108, 81, -101, 30, 45, -33, 110, -80, -1, -123, -92, -60, 6, 121, -87, 37, 96, 96, 49, -46, -85, -119, -73, 91, 92, 123, 65, 72, 86, 118, 51, 48, -105, -39, -32, -19, -58, -128, -35, 69, -47, 21, 26, -50, 47, -2, -81, 32, 84, 20, -66, 90, -55, -39, -35, 52, -59};\n        b[172] = new byte[]{-33, 82, 53, -115, -81, -127, -7, -86, 41, 42, 76, -19, 27, 50, 88, -68, -111, 22, 2, -56, 114, -96, 0, 21, -25, 43, -34, -32, -71, -49, -46, 71, 72, -103, 68, 26, 84, 68, -46, -70, -114, 66, 12, -122, 43, -17, 51, 60, 48, 32, -11, 121, -125, -23, 46, 39, 38, 26, 112, 62, 11, -35, -69, -93, -44, 6, 1, 82, -9, 114, -45, -65, 12, 37, -95, 54, 41, -42, -20, -39, -98, 96, -125, 62, -93, -121, 98, 40, 25, 3, 62, 49, -26, 73, 102, -66, -98, -82, 39, -81, -24, 14, 106, -98, 2, -73, 2, -10, -63, 109, -127, -27, -118, -83, -37, -86, 74, -128, -33, 110, 1, 78, 66, -103, 50, -10, -22, 22, 5, -128, -63, 14, 101, -6, -28, 67, -75, -35, 96, 108, -74, 8, -33, 17, 36, -71, -93, 121, 33, 85, 84, -48, 70, -4, 84, -38, 43, -69, 105, -69, 45, 11, 65, 41, 36, -93, -84, 28, -52, 22, 6, 122};\n        b[173] = new byte[]{93, -76, 95, 14, -95, -98, -35, -25, -120, -42, -47, -15, -15, 73, -49, -99, -32, -63, -25, -77, 124, 85, -28, -110, -51, 124, -43, 8, -44, -96, -60, -31, 31, 119, -89, 127, -70, 126, 66, 15, 17, -58, -6, 110, 48, -34, -46, 27, -75, 41, 50, -31, 29, -66, -52, -63, 126, 75, -105, 17, -67, 51, -80, 103, -5, -34, 122, 6, 45, 44, -92, -15, 3, 73, -107, 121, -43, -117, 22, 71, -31, -2, -2, 13, -128, -14, 126, 52, 69, 62, 115, 41, 91, 73, 38, 75, 1, -32, 104, 124, 59, -24, 39, 9, -40, 42, -24, -51, -40, -95, 90, -16, -15, -128, -58, -67, -40, -14, -68, -73, -87, -39, 18, -16, -26, -11, 102, 33, -40, 2, 98, -17, 41, 47, 108, 25, -65, -17, -115, 59, -47, -53, -26, -72, 67, -71, 14, 122, -101, 38, -20, -10, 34, -78, 41, -54, 122, 80, 64, -68, 57, -29, -106, 46, -65, -108, -21, -83, 26, -73, -89, -115, 126};\n        b[174] = new byte[]{-116, 97, 35, -4, 6, -127, 121, -10, -100, -10, -29, -100, -104, 107, -114, -10, 113, -2, 55, -20, -52, -80, 46, 42, 1, -18, -103, 80, 67, 12, 33, 119, 83, 26, 116, -106, -105, -75, -19, -45, -7, -54, -85, 35, -93, -35, -111, -10, -29, -47, -16, -112, -97, 27, -97, -112, -66, -47, -68, -50, -91, 13, 94, 3, 115, -15, 18, -82, -111, 124, -93, 43, -116, 114, 79, 38, 100, -39, 94, -76, -124, 73, 56, -33, -113, 122, 13, 45, 79, -62, -86, -96, -50, -87, -33, 51, -99, 56, 13, -22, 123, -25, 81, -48, -98, 74, -46, -52, -121, -42, -26, 88, 93, 126, -48, 109, 117, -100, 60, 32, -24, 100, 22, 89, 13, 51, -115, 80, -45, -85, -104, -5, -95, -59, -36, 20, -20, -108, 114, -19, 28, -54, 94, 88, 13, -59, 15, -46, 45, -90, 3, 98, 110, -106, 82, 39, 83, 107, -127, -75, -18, -25, 78, -121, -110, 24, 29, -59, 39, 18, -82, 120, 22, -17};\n        b[175] = new byte[]{68, 12, -51, 11, 25, 79, -39, 47, -4, 45, -10, -58, -74, 84, -125, 74, 26, 49, -15, -60, -96, -104, -109, 14, 115, 108, 79, 22, -49, 30, -127, -107, 73, -117, 9, 102, -99, 45, -38, 5, 98, -113, 69, -74, -15, -111, -104, -107, 85, -119, 110, -32, 99, 73, 55, 6, -24, 113, -50, -99, -126, -71, 118, -16, 117, -64, -79, -120, -92, 19, -100, 48, -95, 13, 76, 120, -30, 86, 83, 124, -13, 22, 38, 4, 54, 30, -46, 44, 20, 31, -115, 83, -48, 30, -25, 28, -74, -65, 15, -23, 25, 123, 96, -66, 112, 29, -49, -102, 11, -23, -67, -39, 29, -37, -97, 57, -71, -82, -99, 79, 120, 121, -69, -69, 60, -74, -119, 69, 13, -47, -56, 31, 111, 2, 120, 22, -70, 87, -123, 83, 19, -80, 5, 41, 77, -72, 53, -5, 77, -5, 17, 103, 6, 58, -20, 98, -81, -121, 70, -37, 16, 95, -128, -20, 26, -7, -24, -59, 30, 76, 59, -53, 66, -42, 71};\n        b[176] = new byte[]{-45, -56, 102, 102, -101, 65, 24, -94, -86, 71, -92, 51, -12, 99, 92, -39, 105, 53, 122, -40, 20, -4, -86, 32, 110, 35, -48, -104, 8, 121, 33, 121, 83, 5, -49, 123, 14, -31, 19, -96, -66, 1, 111, -49, 61, -99, -13, -101, 85, 15, -42, 122, 89, -94, 9, 47, 48, 18, 52, -127, 118, 105, -27, -110, 69, 59, -3, -66, 84, 79, 115, -8, -109, 90, 65, -23, -100, 79, 31, -44, 37, 118, 62, 90, 107, 57, 0, -1, 32, -101, -46, 76, -61, 124, -103, 92, 116, 83, -95, -43, -32, 28, -69, -110, -17, -63, 53, -50, -117, 57, -113, -62, -64, -17, 36, 73, -50, -111, -96, -39, -84, -95, 18, 102, -56, 108, 29, 77, -128, -24, -52, 122, 107, 9, 61, -2, -118, -33, -22, 32, 101, 36, 116, 8, 32, 125, -27, -30, -115, -37, -42, 12, 118, 76, -42, -1, -123, 72, 29, 2, 92, 45, 64, 56, 111, 40, -19, -20, -112, 29, 15, 75, -22, -36, 88, 12};\n        b[177] = new byte[]{-48, 104, 107, -127, -76, -110, 28, -14, -42, -73, 36, -74, -102, 116, -79, -84, -48, 35, -3, -36, -85, 21, 7, 49, 34, 3, -29, 79, -65, -69, -15, 38, 117, 101, 49, -100, -45, 123, -20, -102, 86, 120, 103, -10, -50, 59, -50, 4, -9, 34, -101, -107, -94, 57, 117, 33, -43, 94, -68, 121, -20, -67, 36, -118, 66, -4, -74, 2, -126, -80, 9, 20, 52, -19, -27, -1, -116, -17, -28, 87, -62, -83, 20, -32, 27, 30, 44, 21, 49, 65, -44, -45, 92, 45, -52, 26, -126, 75, -59, -51, -41, -69, -21, -128, -29, 98, 104, -8, 97, -104, 88, -79, 116, -103, 9, 82, -94, -46, -21, -71, 51, -57, -23, -128, 96, -39, -11, 67, 18, 21, 29, 52, -15, -58, -31, 104, -118, 5, 45, 100, -128, 54, -88, -115, 37, -124, -81, 77, 6, 97, 25, 103, -53, -76, -125, -58, 44, -33, -96, 32, -29, 28, 104, -88, 113, -43, -66, 111, -125, -93, -104, 75, 62, -110, 112, 3, 63};\n        b[178] = new byte[]{-39, 81, -94, 49, 95, -33, -38, 19, 89, 2, 60, 55, 125, -41, -121, -57, -4, 17, 33, 92, -34, 63, 77, 124, -107, -100, -89, -49, 4, -78, 72, 111, -13, 64, 28, 114, 70, 104, -73, 98, 98, -107, 102, 104, 119, 104, -101, -89, -70, 42, -90, -67, -37, 116, -112, -98, -91, 95, -77, 60, 5, -88, -40, 28, -16, -127, -110, -94, 78, -57, -54, 15, 39, -14, -75, -96, 0, -15, 86, 9, -38, -67, -98, -67, 116, -90, 43, 75, 47, 127, 62, 110, -84, 31, 24, -59, -83, -44, -77, -11, 55, -91, 80, -81, 108, -126, -127, 83, 89, 46, -122, -58, 12, -42, 18, -91, -47, 4, 48, -23, 25, 73, -20, 53, -76, -124, 113, 98, -49, 41, 82, -51, 54, -122, 0, 114, 91, 88, -9, -62, 89, 104, -44, -103, 5, 119, 41, 107, -47, 94, 72, -34, -20, 85, 78, 55, -85, 98, 4, 112, 60, 119, 102, 66, 115, 68, -102, 101, -2, 86, -5, -97, -24, -81, 51, 5, -1, 57};\n        b[179] = new byte[]{-120, -60, -126, -121, 89, -71, -67, -53, 119, 11, -78, -60, -97, -100, 10, 69, -117, 90, -105, 59, -58, -22, -110, -102, -124, 109, 125, -83, 54, -6, 103, -38, -69, -7, -69, -125, -80, -62, -7, -56, -50, -115, -88, 59, -24, 87, 27, 119, 14, -2, -54, 71, 7, 82, -33, 17, -65, 63, 38, -5, 108, -111, -81, 67, 102, -72, 22, 20, 103, 77, -82, 7, -68, -5, -27, -35, -54, 73, 116, -56, 2, 10, -5, 23, 121, 117, -24, 48, -66, 41, 31, 49, 101, -92, -3, 27, 54, -61, 40, -70, -103, -95, 67, 73, 33, 1, 110, 117, 60, 10, -8, 7, 94, -71, -69, 92, -71, 80, -70, 107, -69, 17, 62, 116, 108, 127, 28, -107, 16, -56, -57, -58, -124, -28, -103, -26, 48, -54, 43, 16, -7, 76, -42, 16, -112, 49, 24, -37, -59, -22, -106, 126, -123, -113, -57, 110, -51, 2, -13, 48, -120, 18, -96, 63, 10, 25, -110, -125, -14, 57, -70, -3, -1, 21, -62, -9, -8, -36, -47};\n        b[180] = new byte[]{-124, -34, 62, -57, -5, 10, -12, 84, 89, -97, -103, 101, 107, 14, -1, 92, 49, -80, -122, -35, -63, 112, -116, 64, 20, -2, 9, -96, 106, -107, 64, 44, 60, 115, -110, 14, -107, 42, -118, 16, -27, 98, 98, -53, 53, -102, 123, -28, -93, -87, 21, -83, -51, -94, 48, 64, 60, -121, -60, 108, -80, -98, 29, 36, 26, 69, 13, -97, -37, -111, -24, 66, -54, 20, 38, 90, -101, 41, 102, -48, 47, 68, -34, 125, -102, 62, -89, -57, 68, -127, -126, 86, 6, 113, -61, -14, -82, 125, -34, -46, -21, -17, 24, -98, 103, 98, 104, -45, 3, -72, 42, 7, 70, 62, 20, 81, -128, 99, 8, 0, 59, 126, 57, -118, -100, 83, -84, -63, 108, -100, -97, 26, -9, 93, -58, -50, -102, 27, 37, -41, 7, -117, 14, 97, 126, -90, 10, -38, 42, -88, -15, 36, -13, 86, 88, -38, 24, -57, 57, 89, 44, -49, -21, -37, -59, 13, 49, -46, 75, 127, 88, 73, -10, -60, -13, -35, 19, 60, 24, 38};\n    }",
        "begin_line": 257,
        "end_line": 356,
        "comment": " Here are the randomly generated byte[] arrays we generated to exercise commons-codec-1.3.jar ",
        "child_ranges": [
            "(line 258,col 9)-(line 258,col 33)",
            "(line 259,col 9)-(line 259,col 28)",
            "(line 260,col 9)-(line 260,col 31)",
            "(line 261,col 9)-(line 261,col 36)",
            "(line 262,col 9)-(line 262,col 40)",
            "(line 263,col 9)-(line 263,col 44)",
            "(line 264,col 9)-(line 264,col 51)",
            "(line 265,col 9)-(line 265,col 55)",
            "(line 266,col 9)-(line 266,col 58)",
            "(line 267,col 9)-(line 267,col 63)",
            "(line 268,col 9)-(line 268,col 68)",
            "(line 269,col 9)-(line 269,col 70)",
            "(line 270,col 9)-(line 270,col 79)",
            "(line 271,col 9)-(line 271,col 79)",
            "(line 272,col 9)-(line 272,col 93)",
            "(line 273,col 9)-(line 273,col 94)",
            "(line 274,col 9)-(line 274,col 100)",
            "(line 275,col 9)-(line 275,col 104)",
            "(line 276,col 9)-(line 276,col 326)",
            "(line 277,col 9)-(line 277,col 327)",
            "(line 278,col 9)-(line 278,col 330)",
            "(line 279,col 9)-(line 279,col 340)",
            "(line 280,col 9)-(line 280,col 339)",
            "(line 281,col 9)-(line 281,col 348)",
            "(line 282,col 9)-(line 282,col 333)",
            "(line 283,col 9)-(line 283,col 367)",
            "(line 284,col 9)-(line 284,col 357)",
            "(line 285,col 9)-(line 285,col 369)",
            "(line 286,col 9)-(line 286,col 378)",
            "(line 287,col 9)-(line 287,col 366)",
            "(line 288,col 9)-(line 288,col 365)",
            "(line 289,col 9)-(line 289,col 393)",
            "(line 290,col 9)-(line 290,col 379)",
            "(line 291,col 9)-(line 291,col 387)",
            "(line 292,col 9)-(line 292,col 383)",
            "(line 293,col 9)-(line 293,col 408)",
            "(line 294,col 9)-(line 294,col 415)",
            "(line 295,col 9)-(line 295,col 408)",
            "(line 296,col 9)-(line 296,col 592)",
            "(line 297,col 9)-(line 297,col 588)",
            "(line 298,col 9)-(line 298,col 604)",
            "(line 299,col 9)-(line 299,col 602)",
            "(line 300,col 9)-(line 300,col 604)",
            "(line 301,col 9)-(line 301,col 613)",
            "(line 302,col 9)-(line 302,col 628)",
            "(line 303,col 9)-(line 303,col 616)",
            "(line 304,col 9)-(line 304,col 626)",
            "(line 305,col 9)-(line 305,col 630)",
            "(line 306,col 9)-(line 306,col 642)",
            "(line 307,col 9)-(line 307,col 653)",
            "(line 308,col 9)-(line 308,col 636)",
            "(line 309,col 9)-(line 309,col 655)",
            "(line 310,col 9)-(line 310,col 666)",
            "(line 311,col 9)-(line 311,col 653)",
            "(line 312,col 9)-(line 312,col 675)",
            "(line 313,col 9)-(line 313,col 673)",
            "(line 314,col 9)-(line 314,col 680)",
            "(line 315,col 9)-(line 315,col 684)",
            "(line 316,col 9)-(line 316,col 673)",
            "(line 317,col 9)-(line 317,col 691)",
            "(line 318,col 9)-(line 318,col 688)",
            "(line 319,col 9)-(line 319,col 699)",
            "(line 320,col 9)-(line 320,col 704)",
            "(line 321,col 9)-(line 321,col 706)",
            "(line 322,col 9)-(line 322,col 706)",
            "(line 323,col 9)-(line 323,col 712)",
            "(line 324,col 9)-(line 324,col 722)",
            "(line 325,col 9)-(line 325,col 726)",
            "(line 326,col 9)-(line 326,col 723)",
            "(line 327,col 9)-(line 327,col 717)",
            "(line 328,col 9)-(line 328,col 743)",
            "(line 329,col 9)-(line 329,col 750)",
            "(line 330,col 9)-(line 330,col 737)",
            "(line 331,col 9)-(line 331,col 751)",
            "(line 332,col 9)-(line 332,col 761)",
            "(line 333,col 9)-(line 333,col 770)",
            "(line 334,col 9)-(line 334,col 767)",
            "(line 335,col 9)-(line 335,col 753)",
            "(line 336,col 9)-(line 336,col 777)",
            "(line 337,col 9)-(line 337,col 771)",
            "(line 338,col 9)-(line 338,col 782)",
            "(line 339,col 9)-(line 339,col 795)",
            "(line 340,col 9)-(line 340,col 794)",
            "(line 341,col 9)-(line 341,col 798)",
            "(line 342,col 9)-(line 342,col 787)",
            "(line 343,col 9)-(line 343,col 819)",
            "(line 344,col 9)-(line 344,col 821)",
            "(line 345,col 9)-(line 345,col 831)",
            "(line 346,col 9)-(line 346,col 811)",
            "(line 347,col 9)-(line 347,col 808)",
            "(line 348,col 9)-(line 348,col 837)",
            "(line 349,col 9)-(line 349,col 855)",
            "(line 350,col 9)-(line 350,col 834)",
            "(line 351,col 9)-(line 351,col 840)",
            "(line 352,col 9)-(line 352,col 859)",
            "(line 353,col 9)-(line 353,col 845)",
            "(line 354,col 9)-(line 354,col 864)",
            "(line 355,col 9)-(line 355,col 859)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testEncoder()",
        "snippet": "    @Test\n    public void testEncoder() throws EncoderException {\n        final Encoder enc = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64 = utf8(STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(base64, (byte[]) enc.encode(binary));\n                assertTrue(\"Encoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 364,
        "end_line": 375,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.Encoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 366,col 9)-(line 366,col 41)",
            "(line 367,col 9)-(line 374,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testDecoder()",
        "snippet": "    @Test\n    public void testDecoder() throws DecoderException {\n        final Decoder dec = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64 = utf8(STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(binary, (byte[]) dec.decode(base64));\n                assertTrue(\"Decoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 383,
        "end_line": 394,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.Decoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 41)",
            "(line 386,col 9)-(line 393,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder()",
        "snippet": "    @Test\n    public void testBinaryEncoder() throws EncoderException {\n        final BinaryEncoder enc = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64 = utf8(STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(base64, enc.encode(binary));\n                assertTrue(\"BinaryEncoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 402,
        "end_line": 413,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.BinaryEncoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 47)",
            "(line 405,col 9)-(line 412,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder()",
        "snippet": "    @Test\n    public void testBinaryDecoder() throws DecoderException {\n        final BinaryDecoder dec = new Base64();\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64 = utf8(STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(binary, dec.decode(base64));\n                assertTrue(\"BinaryDecoder test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 421,
        "end_line": 432,
        "comment": "\n     * Tests to make sure Base64's implementation of the org.apache.commons.codec.BinaryDecoder\n     * interface is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 47)",
            "(line 424,col 9)-(line 431,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode()",
        "snippet": "    @Test\n    public void testStaticEncode() throws EncoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64 = utf8(STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(base64, Base64.encodeBase64(binary));\n                assertTrue(\"static Base64.encodeBase64() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 440,
        "end_line": 450,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.encodeBase64()\n     * static method is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 442,col 9)-(line 449,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode()",
        "snippet": "    @Test\n    public void testStaticDecode() throws DecoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64 = utf8(STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(binary, Base64.decodeBase64(base64));\n                assertTrue(\"static Base64.decodeBase64() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 458,
        "end_line": 468,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.decodeBase64()\n     * static method is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 460,col 9)-(line 467,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked()",
        "snippet": "    @Test\n    public void testStaticEncodeChunked() throws EncoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64Chunked = utf8(CHUNKED_STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(base64Chunked, Base64.encodeBase64Chunked(binary));\n                assertTrue(\"static Base64.encodeBase64Chunked() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 476,
        "end_line": 486,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.encodeBase64Chunked()\n     * static method is behaving identical to commons-codec-1.3.jar.\n     *\n     * @throws EncoderException problem\n     ",
        "child_ranges": [
            "(line 478,col 9)-(line 485,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked()",
        "snippet": "    @Test\n    public void testStaticDecodeChunked() throws DecoderException {\n        for (int i = 0; i < STRINGS.length; i++) {\n            if (STRINGS[i] != null) {\n                final byte[] base64Chunked = utf8(CHUNKED_STRINGS[i]);\n                final byte[] binary = BYTES[i];\n                final boolean b = Arrays.equals(binary, Base64.decodeBase64(base64Chunked));\n                assertTrue(\"static Base64.decodeBase64Chunked() test-\" + i, b);\n            }\n        }\n    }",
        "begin_line": 495,
        "end_line": 505,
        "comment": "\n     * Tests to make sure Base64's implementation of Base64.decodeBase64()\n     * static method is behaving identical to commons-codec-1.3.jar when\n     * supplied with chunked input.\n     *\n     * @throws DecoderException problem\n     ",
        "child_ranges": [
            "(line 497,col 9)-(line 504,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Codec13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Codec13Test.utf8(java.lang.String)",
        "snippet": "    private static byte[] utf8(final String s) {\n\n        // We would use commons-codec-1.4.jar own utility method for this, but we\n        // need this class to be able to run against commons-codec-1.3.jar, hence the\n        // duplication here.\n\n        return s != null ? s.getBytes(Charsets.UTF_8) : null;\n    }",
        "begin_line": 508,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        new StringUtils();\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "\n     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n     * to restrict instantiation right now.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1()",
        "snippet": "    @Test\n    public void testGetBytesIso8859_1() throws UnsupportedEncodingException {\n        final String charsetName = \"ISO-8859-1\";\n        testGetBytesUnchecked(charsetName);\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesIso8859_1(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 48)",
            "(line 55,col 9)-(line 55,col 43)",
            "(line 56,col 9)-(line 56,col 69)",
            "(line 57,col 9)-(line 57,col 76)",
            "(line 58,col 9)-(line 58,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked(java.lang.String)",
        "snippet": "    private void testGetBytesUnchecked(final String charsetName) throws UnsupportedEncodingException {\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUnchecked(STRING_FIXTURE, charsetName);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 69)",
            "(line 63,col 9)-(line 63,col 89)",
            "(line 64,col 9)-(line 64,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii()",
        "snippet": "    @Test\n    public void testGetBytesUsAscii() throws UnsupportedEncodingException {\n        final String charsetName = \"US-ASCII\";\n        testGetBytesUnchecked(charsetName);\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUsAscii(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 67,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 46)",
            "(line 70,col 9)-(line 70,col 43)",
            "(line 71,col 9)-(line 71,col 69)",
            "(line 72,col 9)-(line 72,col 74)",
            "(line 73,col 9)-(line 73,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16()",
        "snippet": "    @Test\n    public void testGetBytesUtf16() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-16\";\n        testGetBytesUnchecked(charsetName);\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUtf16(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 44)",
            "(line 79,col 9)-(line 79,col 43)",
            "(line 80,col 9)-(line 80,col 69)",
            "(line 81,col 9)-(line 81,col 72)",
            "(line 82,col 9)-(line 82,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be()",
        "snippet": "    @Test\n    public void testGetBytesUtf16Be() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-16BE\";\n        testGetBytesUnchecked(charsetName);\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUtf16Be(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 43)",
            "(line 89,col 9)-(line 89,col 69)",
            "(line 90,col 9)-(line 90,col 74)",
            "(line 91,col 9)-(line 91,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le()",
        "snippet": "    @Test\n    public void testGetBytesUtf16Le() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-16LE\";\n        testGetBytesUnchecked(charsetName);\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUtf16Le(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 94,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 46)",
            "(line 97,col 9)-(line 97,col 43)",
            "(line 98,col 9)-(line 98,col 69)",
            "(line 99,col 9)-(line 99,col 74)",
            "(line 100,col 9)-(line 100,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8()",
        "snippet": "    @Test\n    public void testGetBytesUtf8() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-8\";\n        testGetBytesUnchecked(charsetName);\n        final byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n        final byte[] actual = StringUtils.getBytesUtf8(STRING_FIXTURE);\n        Assert.assertTrue(Arrays.equals(expected, actual));\n    }",
        "begin_line": 103,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 43)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 108,col 71)",
            "(line 109,col 9)-(line 109,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName()",
        "snippet": "    @Test\n    public void testGetBytesUncheckedBadName() {\n        try {\n            StringUtils.getBytesUnchecked(STRING_FIXTURE, \"UNKNOWN\");\n            Assert.fail(\"Expected \" + IllegalStateException.class.getName());\n        } catch (final IllegalStateException e) {\n            // Expected\n        }\n    }",
        "begin_line": 112,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 119,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput()",
        "snippet": "    @Test\n    public void testGetBytesUncheckedNullInput() {\n        Assert.assertNull(StringUtils.getBytesUnchecked(null, \"UNKNOWN\"));\n    }",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewString(java.lang.String)",
        "snippet": "    private void testNewString(final String charsetName) throws UnsupportedEncodingException {\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newString(BYTES_FIXTURE, charsetName);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 127,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 71)",
            "(line 129,col 9)-(line 129,col 80)",
            "(line 130,col 9)-(line 130,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc()",
        "snippet": "    @Test\n    public void testNewStringBadEnc() {\n        try {\n            StringUtils.newString(BYTES_FIXTURE, \"UNKNOWN\");\n            Assert.fail(\"Expected \" + IllegalStateException.class.getName());\n        } catch (final IllegalStateException e) {\n            // Expected\n        }\n    }",
        "begin_line": 133,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 140,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput()",
        "snippet": "    @Test\n    public void testNewStringNullInput() {\n        Assert.assertNull(StringUtils.newString(null, \"UNKNOWN\"));\n    }",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229()",
        "snippet": "    @Test\n    public void testNewStringNullInput_CODEC229() {\n        Assert.assertNull(StringUtils.newStringUtf8(null));\n        Assert.assertNull(StringUtils.newStringIso8859_1(null));\n        Assert.assertNull(StringUtils.newStringUsAscii(null));\n        Assert.assertNull(StringUtils.newStringUtf16(null));\n        Assert.assertNull(StringUtils.newStringUtf16Be(null));\n        Assert.assertNull(StringUtils.newStringUtf16Le(null));\n    }",
        "begin_line": 148,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 59)",
            "(line 151,col 9)-(line 151,col 64)",
            "(line 152,col 9)-(line 152,col 62)",
            "(line 153,col 9)-(line 153,col 60)",
            "(line 154,col 9)-(line 154,col 62)",
            "(line 155,col 9)-(line 155,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1()",
        "snippet": "    @Test\n    public void testNewStringIso8859_1() throws UnsupportedEncodingException {\n        final String charsetName = \"ISO-8859-1\";\n        testNewString(charsetName);\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newStringIso8859_1(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 158,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 48)",
            "(line 161,col 9)-(line 161,col 35)",
            "(line 162,col 9)-(line 162,col 71)",
            "(line 163,col 9)-(line 163,col 76)",
            "(line 164,col 9)-(line 164,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii()",
        "snippet": "    @Test\n    public void testNewStringUsAscii() throws UnsupportedEncodingException {\n        final String charsetName = \"US-ASCII\";\n        testNewString(charsetName);\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newStringUsAscii(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 167,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 46)",
            "(line 170,col 9)-(line 170,col 35)",
            "(line 171,col 9)-(line 171,col 71)",
            "(line 172,col 9)-(line 172,col 74)",
            "(line 173,col 9)-(line 173,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16()",
        "snippet": "    @Test\n    public void testNewStringUtf16() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-16\";\n        testNewString(charsetName);\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newStringUtf16(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 176,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 44)",
            "(line 179,col 9)-(line 179,col 35)",
            "(line 180,col 9)-(line 180,col 71)",
            "(line 181,col 9)-(line 181,col 72)",
            "(line 182,col 9)-(line 182,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be()",
        "snippet": "    @Test\n    public void testNewStringUtf16Be() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-16BE\";\n        testNewString(charsetName);\n        final String expected = new String(BYTES_FIXTURE_16BE, charsetName);\n        final String actual = StringUtils.newStringUtf16Be(BYTES_FIXTURE_16BE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 185,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 46)",
            "(line 188,col 9)-(line 188,col 35)",
            "(line 189,col 9)-(line 189,col 76)",
            "(line 190,col 9)-(line 190,col 79)",
            "(line 191,col 9)-(line 191,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le()",
        "snippet": "    @Test\n    public void testNewStringUtf16Le() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-16LE\";\n        testNewString(charsetName);\n        final String expected = new String(BYTES_FIXTURE_16LE, charsetName);\n        final String actual = StringUtils.newStringUtf16Le(BYTES_FIXTURE_16LE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 194,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 46)",
            "(line 197,col 9)-(line 197,col 35)",
            "(line 198,col 9)-(line 198,col 76)",
            "(line 199,col 9)-(line 199,col 79)",
            "(line 200,col 9)-(line 200,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
        "signature": "org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8()",
        "snippet": "    @Test\n    public void testNewStringUtf8() throws UnsupportedEncodingException {\n        final String charsetName = \"UTF-8\";\n        testNewString(charsetName);\n        final String expected = new String(BYTES_FIXTURE, charsetName);\n        final String actual = StringUtils.newStringUtf8(BYTES_FIXTURE);\n        Assert.assertEquals(expected, actual);\n    }",
        "begin_line": 203,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 43)",
            "(line 206,col 9)-(line 206,col 35)",
            "(line 207,col 9)-(line 207,col 71)",
            "(line 208,col 9)-(line 208,col 71)",
            "(line 209,col 9)-(line 209,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.getRandom()",
        "snippet": "    public Random getRandom() {\n        return this.random;\n    }",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n     * @return Returns the random.\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIsStringBase64()",
        "snippet": "    @Test\n    public void testIsStringBase64() {\n        final String nullString = null;\n        final String emptyString = \"\";\n        final String validString = \"abc===defg\\n\\r123456\\r789\\r\\rABC\\n\\nDEF==GHI\\r\\nJKL==============\";\n        final String invalidString = validString + (char) 0; // append null\n                                                                // character\n\n        try {\n            Base64.isBase64(nullString);\n            fail(\"Base64.isStringBase64() should not be null-safe.\");\n        } catch (final NullPointerException npe) {\n            assertNotNull(\"Base64.isStringBase64() should not be null-safe.\", npe);\n        }\n\n        assertTrue(\"Base64.isStringBase64(empty-string) is true\", Base64.isBase64(emptyString));\n        assertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isBase64(validString));\n        assertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isBase64(invalidString));\n    }",
        "begin_line": 60,
        "end_line": 78,
        "comment": "\n     * Test the isStringBase64 method.\n     ",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 39)",
            "(line 63,col 9)-(line 63,col 38)",
            "(line 64,col 9)-(line 64,col 103)",
            "(line 65,col 9)-(line 65,col 60)",
            "(line 68,col 9)-(line 73,col 9)",
            "(line 75,col 9)-(line 75,col 96)",
            "(line 76,col 9)-(line 76,col 96)",
            "(line 77,col 9)-(line 77,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testBase64()",
        "snippet": "    @Test\n    public void testBase64() {\n        final String content = \"Hello World\";\n        String encodedContent;\n        byte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n\n        Base64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null); // null\n                                                                    // lineSeparator\n                                                                    // same as\n                                                                    // saying\n                                                                    // no-chunking\n        encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n\n        b64 = new Base64(0, null); // null lineSeparator same as saying\n                                    // no-chunking\n        encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n\n        // bogus characters to decode (to skip actually) {e-acute*6}\n        final byte[] decode = b64.decode(\"SGVsbG{\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9}8gV29ybGQ=\");\n        final String decodeString = StringUtils.newStringUtf8(decode);\n        assertEquals(\"decode hello world\", \"Hello World\", decodeString);\n    }",
        "begin_line": 83,
        "end_line": 110,
        "comment": "\n     * Test the Base64 implementation\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 45)",
            "(line 86,col 9)-(line 86,col 30)",
            "(line 87,col 9)-(line 87,col 85)",
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 81)",
            "(line 91,col 9)-(line 91,col 66)",
            "(line 96,col 9)-(line 96,col 69)",
            "(line 97,col 9)-(line 97,col 65)",
            "(line 98,col 9)-(line 98,col 81)",
            "(line 100,col 9)-(line 100,col 34)",
            "(line 102,col 9)-(line 102,col 69)",
            "(line 103,col 9)-(line 103,col 65)",
            "(line 104,col 9)-(line 104,col 81)",
            "(line 107,col 9)-(line 107,col 99)",
            "(line 108,col 9)-(line 108,col 70)",
            "(line 109,col 9)-(line 109,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferStart()",
        "snippet": "    @Test\n    public void testBase64AtBufferStart() {\n        testBase64InBuffer(0, 100);\n    }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferEnd()",
        "snippet": "    @Test\n    public void testBase64AtBufferEnd() {\n        testBase64InBuffer(100, 0);\n    }",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testBase64AtBufferMiddle()",
        "snippet": "    @Test\n    public void testBase64AtBufferMiddle() {\n        testBase64InBuffer(100, 100);\n    }",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testBase64InBuffer(int, int)",
        "snippet": "    private void testBase64InBuffer(int startPasSize, int endPadSize) {\n        final String content = \"Hello World\";\n        String encodedContent;\n        final byte[] bytesUtf8 = StringUtils.getBytesUtf8(content);\n        byte[] buffer = ArrayUtils.addAll(bytesUtf8, new byte[endPadSize]);\n        buffer = ArrayUtils.addAll(new byte[startPasSize], buffer);\n        byte[] encodedBytes = new Base64().encode(buffer, startPasSize, bytesUtf8.length);\n        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n    }",
        "begin_line": 127,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 45)",
            "(line 129,col 9)-(line 129,col 30)",
            "(line 130,col 9)-(line 130,col 67)",
            "(line 131,col 9)-(line 131,col 75)",
            "(line 132,col 9)-(line 132,col 67)",
            "(line 133,col 9)-(line 133,col 90)",
            "(line 134,col 9)-(line 134,col 65)",
            "(line 135,col 9)-(line 135,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad()",
        "snippet": "    @Test\n    public void testDecodeWithInnerPad() {\n        final String content = \"SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ=\";\n        final byte[] result = Base64.decodeBase64(content);\n        final byte[] shouldBe = StringUtils.getBytesUtf8(\"Hello World\");\n        assertTrue(\"decode should halt at pad (=)\", Arrays.equals(result, shouldBe));\n    }",
        "begin_line": 151,
        "end_line": 157,
        "comment": "\n     * Test our decode with pad character in the middle. (Our current\n     * implementation: halt decode and return what we've got so far).\n     *\n     * The point of this test is not to say\n     * \"this is the correct way to decode base64.\" The point is simply to keep\n     * us aware of the current logic since 1.4 so we don't accidentally break it\n     * without realizing.\n     *\n     * Note for historians. The 1.3 logic would decode to:\n     * \"Hello World\\u0000Hello World\" -- null in the middle --- and 1.4\n     * unwittingly changed it to current logic.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 66)",
            "(line 154,col 9)-(line 154,col 59)",
            "(line 155,col 9)-(line 155,col 72)",
            "(line 156,col 9)-(line 156,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76()",
        "snippet": "    @Test\n    public void testChunkedEncodeMultipleOf76() {\n        final byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n        // convert to \"\\r\\n\" so we're equal to the old openssl encoding test\n        // stored\n        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n        final String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n        final byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);\n        assertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n    }",
        "begin_line": 162,
        "end_line": 171,
        "comment": "\n     * Tests Base64.encodeBase64().\n     ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 88)",
            "(line 168,col 9)-(line 168,col 102)",
            "(line 169,col 9)-(line 169,col 75)",
            "(line 170,col 9)-(line 170,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodec68()",
        "snippet": "    @Test\n    public void testCodec68() {\n        final byte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };\n        Base64.decodeBase64(x);\n    }",
        "begin_line": 177,
        "end_line": 181,
        "comment": "\n     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some\n     * non-BASE64 bytes\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 72)",
            "(line 180,col 9)-(line 180,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger1()",
        "snippet": "    @Test\n    public void testCodeInteger1() {\n        final String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n        final BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n\n        assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));\n    }",
        "begin_line": 183,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 66)",
            "(line 186,col 9)-(line 186,col 107)",
            "(line 188,col 9)-(line 188,col 77)",
            "(line 189,col 9)-(line 189,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger2()",
        "snippet": "    @Test\n    public void testCodeInteger2() {\n        final String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n        final BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n\n        assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));\n    }",
        "begin_line": 192,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 66)",
            "(line 195,col 9)-(line 195,col 108)",
            "(line 197,col 9)-(line 197,col 77)",
            "(line 198,col 9)-(line 198,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger3()",
        "snippet": "    @Test\n    public void testCodeInteger3() {\n        final String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\"\n                + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n        final BigInteger bigInt3 = new BigInteger(\n                \"10806548154093873461951748545\" + \"1196989136416448805819079363524309897749044958112417136240557\"\n                        + \"4495062430572478766856090958495998158114332651671116876320938126\");\n\n        assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));\n    }",
        "begin_line": 201,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 204,col 64)",
            "(line 205,col 9)-(line 207,col 94)",
            "(line 209,col 9)-(line 209,col 77)",
            "(line 210,col 9)-(line 210,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeInteger4()",
        "snippet": "    @Test\n    public void testCodeInteger4() {\n        final String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n                + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n                + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\" + \"Q0=\";\n        final BigInteger bigInt4 = new BigInteger(\n                \"80624726256040348115552042320\" + \"6968135001872753709424419772586693950232350200555646471175944\"\n                        + \"519297087885987040810778908507262272892702303774422853675597\"\n                        + \"748008534040890923814202286633163248086055216976551456088015\"\n                        + \"338880713818192088877057717530169381044092839402438015097654\"\n                        + \"53542091716518238707344493641683483917\");\n\n        assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));\n    }",
        "begin_line": 213,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 217,col 91)",
            "(line 218,col 9)-(line 223,col 68)",
            "(line 225,col 9)-(line 225,col 77)",
            "(line 226,col 9)-(line 226,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeIntegerEdgeCases()",
        "snippet": "    @Test\n    public void testCodeIntegerEdgeCases() {\n        // TODO\n    }",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull()",
        "snippet": "    @Test\n    public void testCodeIntegerNull() {\n        try {\n            Base64.encodeInteger(null);\n            fail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n        } catch (final NullPointerException npe) {\n            // expected\n        } catch (final Exception e) {\n            fail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n        }\n    }",
        "begin_line": 234,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 243,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testConstructors()",
        "snippet": "    @Test\n    public void testConstructors() {\n        Base64 base64;\n        base64 = new Base64();\n        base64 = new Base64(-1);\n        base64 = new Base64(-1, new byte[] {});\n        base64 = new Base64(64, new byte[] {});\n        try {\n            base64 = new Base64(-1, new byte[] { 'A' }); // TODO do we need to\n                                                            // check sep if len\n                                                            // = -1?\n            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n        } catch (final IllegalArgumentException ignored) {\n            // Expected\n        }\n        try {\n            base64 = new Base64(64, new byte[] { 'A' });\n            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n        } catch (final IllegalArgumentException ignored) {\n            // Expected\n        }\n        try {\n            base64 = new Base64(64, new byte[] { '=' });\n            fail(\"Should have rejected attempt to use '=' as a line separator\");\n        } catch (final IllegalArgumentException ignored) {\n            // Expected\n        }\n        base64 = new Base64(64, new byte[] { '$' }); // OK\n        try {\n            base64 = new Base64(64, new byte[] { 'A', '$' });\n            fail(\"Should have rejected attempt to use 'A$' as a line separator\");\n        } catch (final IllegalArgumentException ignored) {\n            // Expected\n        }\n        base64 = new Base64(64, new byte[] { ' ', '$', '\\n', '\\r', '\\t' }); // OK\n        assertNotNull(base64);\n    }",
        "begin_line": 246,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 22)",
            "(line 249,col 9)-(line 249,col 30)",
            "(line 250,col 9)-(line 250,col 32)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 252,col 9)-(line 252,col 47)",
            "(line 253,col 9)-(line 260,col 9)",
            "(line 261,col 9)-(line 266,col 9)",
            "(line 267,col 9)-(line 272,col 9)",
            "(line 273,col 9)-(line 273,col 52)",
            "(line 274,col 9)-(line 279,col 9)",
            "(line 280,col 9)-(line 280,col 75)",
            "(line 281,col 9)-(line 281,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean()",
        "snippet": "    @Test\n    public void testConstructor_Int_ByteArray_Boolean() {\n        final Base64 base64 = new Base64(65, new byte[] { '\\t' }, false);\n        final byte[] encoded = base64.encode(Base64TestData.DECODED);\n        String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n        expectedResult = expectedResult.replace('\\n', '\\t');\n        final String result = StringUtils.newStringUtf8(encoded);\n        assertEquals(\"new Base64(65, \\\\t, false)\", expectedResult, result);\n    }",
        "begin_line": 284,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 73)",
            "(line 287,col 9)-(line 287,col 69)",
            "(line 288,col 9)-(line 288,col 73)",
            "(line 289,col 9)-(line 289,col 60)",
            "(line 290,col 9)-(line 290,col 65)",
            "(line 291,col 9)-(line 291,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe()",
        "snippet": "    @Test\n    public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {\n        // url-safe variation\n        final Base64 base64 = new Base64(64, new byte[] { '\\t' }, true);\n        final byte[] encoded = base64.encode(Base64TestData.DECODED);\n        String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n        expectedResult = expectedResult.replaceAll(\"=\", \"\"); // url-safe has no\n                                                                // == padding.\n        expectedResult = expectedResult.replace('\\n', '\\t');\n        expectedResult = expectedResult.replace('+', '-');\n        expectedResult = expectedResult.replace('/', '_');\n        final String result = StringUtils.newStringUtf8(encoded);\n        assertEquals(\"new Base64(64, \\\\t, true)\", result, expectedResult);\n    }",
        "begin_line": 294,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 72)",
            "(line 298,col 9)-(line 298,col 69)",
            "(line 299,col 9)-(line 299,col 73)",
            "(line 300,col 9)-(line 300,col 60)",
            "(line 302,col 9)-(line 302,col 60)",
            "(line 303,col 9)-(line 303,col 58)",
            "(line 304,col 9)-(line 304,col 58)",
            "(line 305,col 9)-(line 305,col 65)",
            "(line 306,col 9)-(line 306,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2()",
        "snippet": "    @Test\n    public void testDecodePadMarkerIndex2() {\n        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(CHARSET_UTF8))));\n    }",
        "begin_line": 312,
        "end_line": 315,
        "comment": "\n     * Tests conditional true branch for \"marker0\" test.\n     ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3()",
        "snippet": "    @Test\n    public void testDecodePadMarkerIndex3() {\n        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(CHARSET_UTF8))));\n    }",
        "begin_line": 320,
        "end_line": 324,
        "comment": "\n     * Tests conditional branches for \"marker1\" test.\n     ",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 91)",
            "(line 323,col 9)-(line 323,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadOnly()",
        "snippet": "    @Test\n    public void testDecodePadOnly() {\n        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8))));\n        // Test truncated padding\n        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(0, Base64.decodeBase64(\"\".getBytes(CHARSET_UTF8)).length);\n    }",
        "begin_line": 326,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 83)",
            "(line 329,col 9)-(line 329,col 89)",
            "(line 331,col 9)-(line 331,col 82)",
            "(line 332,col 9)-(line 332,col 81)",
            "(line 333,col 9)-(line 333,col 80)",
            "(line 334,col 9)-(line 334,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked()",
        "snippet": "    @Test\n    public void testDecodePadOnlyChunked() {\n        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8))));\n        // Test truncated padding\n        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(CHARSET_UTF8)).length);\n        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(CHARSET_UTF8)).length);\n    }",
        "begin_line": 337,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 85)",
            "(line 340,col 9)-(line 340,col 91)",
            "(line 342,col 9)-(line 342,col 84)",
            "(line 343,col 9)-(line 343,col 83)",
            "(line 344,col 9)-(line 344,col 82)",
            "(line 345,col 9)-(line 345,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace()",
        "snippet": "    @Test\n    public void testDecodeWithWhitespace() throws Exception {\n\n        final String orig = \"I am a late night coder.\";\n\n        final byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));\n        final StringBuilder intermediate = new StringBuilder(new String(encodedArray));\n\n        intermediate.insert(2, ' ');\n        intermediate.insert(5, '\\t');\n        intermediate.insert(10, '\\r');\n        intermediate.insert(15, '\\n');\n\n        final byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);\n        final byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n\n        final String dest = new String(decodedWithWS);\n\n        assertEquals(\"Dest string doesn't equal the original\", orig, dest);\n    }",
        "begin_line": 348,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 55)",
            "(line 353,col 9)-(line 353,col 85)",
            "(line 354,col 9)-(line 354,col 87)",
            "(line 356,col 9)-(line 356,col 36)",
            "(line 357,col 9)-(line 357,col 37)",
            "(line 358,col 9)-(line 358,col 38)",
            "(line 359,col 9)-(line 359,col 38)",
            "(line 361,col 9)-(line 361,col 84)",
            "(line 362,col 9)-(line 362,col 72)",
            "(line 364,col 9)-(line 364,col 54)",
            "(line 366,col 9)-(line 366,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEmptyBase64()",
        "snippet": "    @Test\n    public void testEmptyBase64() {\n        byte[] empty = new byte[0];\n        byte[] result = Base64.encodeBase64(empty);\n        assertEquals(\"empty base64 encode\", 0, result.length);\n        assertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n\n        empty = new byte[0];\n        result = Base64.decodeBase64(empty);\n        assertEquals(\"empty base64 decode\", 0, result.length);\n        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64((byte[]) null));\n    }",
        "begin_line": 372,
        "end_line": 383,
        "comment": "\n     * Test encode and decode of empty byte array.\n     ",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 35)",
            "(line 375,col 9)-(line 375,col 51)",
            "(line 376,col 9)-(line 376,col 62)",
            "(line 377,col 9)-(line 377,col 77)",
            "(line 379,col 9)-(line 379,col 28)",
            "(line 380,col 9)-(line 380,col 44)",
            "(line 381,col 9)-(line 381,col 62)",
            "(line 382,col 9)-(line 382,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom()",
        "snippet": "    @Test\n    public void testEncodeDecodeRandom() {\n        for (int i = 1; i < 5; i++) {\n            final byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n            this.getRandom().nextBytes(data);\n            final byte[] enc = Base64.encodeBase64(data);\n            assertTrue(Base64.isBase64(enc));\n            final byte[] data2 = Base64.decodeBase64(enc);\n            assertTrue(Arrays.equals(data, data2));\n        }\n    }",
        "begin_line": 386,
        "end_line": 396,
        "comment": " encode/decode a large random array",
        "child_ranges": [
            "(line 388,col 9)-(line 395,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall()",
        "snippet": "    @Test\n    public void testEncodeDecodeSmall() {\n        for (int i = 0; i < 12; i++) {\n            final byte[] data = new byte[i];\n            this.getRandom().nextBytes(data);\n            final byte[] enc = Base64.encodeBase64(data);\n            assertTrue(\"\\\"\" + new String(enc) + \"\\\" is Base64 data.\", Base64.isBase64(enc));\n            final byte[] data2 = Base64.decodeBase64(enc);\n            assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n        }\n    }",
        "begin_line": 399,
        "end_line": 409,
        "comment": " encode/decode random arrays from size 0 to size 11",
        "child_ranges": [
            "(line 401,col 9)-(line 408,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize()",
        "snippet": "    @Test\n    public void testEncodeOverMaxSize() throws Exception {\n        testEncodeOverMaxSize(-1);\n        testEncodeOverMaxSize(0);\n        testEncodeOverMaxSize(1);\n        testEncodeOverMaxSize(2);\n    }",
        "begin_line": 411,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 34)",
            "(line 414,col 9)-(line 414,col 33)",
            "(line 415,col 9)-(line 415,col 33)",
            "(line 416,col 9)-(line 416,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testCodec112()",
        "snippet": "    @Test\n    public void testCodec112() { // size calculation assumes always chunked\n        final byte[] in = new byte[] { 0 };\n        final byte[] out = Base64.encodeBase64(in);\n        Base64.encodeBase64(in, false, false, out.length);\n    }",
        "begin_line": 419,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 421,col 9)-(line 421,col 43)",
            "(line 422,col 9)-(line 422,col 51)",
            "(line 423,col 9)-(line 423,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize(int)",
        "snippet": "    private void testEncodeOverMaxSize(final int maxSize) throws Exception {\n        try {\n            Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n            fail(\"Expected \" + IllegalArgumentException.class.getName());\n        } catch (final IllegalArgumentException e) {\n            // Expected\n        }\n    }",
        "begin_line": 426,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 427,col 9)-(line 432,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode()",
        "snippet": "    @Test\n    public void testIgnoringNonBase64InDecode() throws Exception {\n        assertEquals(\"The quick brown fox jumped over the lazy dogs.\",\n                new String(Base64.decodeBase64(\n                        \"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\"\n                                .getBytes(CHARSET_UTF8))));\n    }",
        "begin_line": 435,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 437,col 9)-(line 440,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64()",
        "snippet": "    @Test\n    public void testIsArrayByteBase64() {\n        assertFalse(Base64.isBase64(new byte[] { Byte.MIN_VALUE }));\n        assertFalse(Base64.isBase64(new byte[] { -125 }));\n        assertFalse(Base64.isBase64(new byte[] { -10 }));\n        assertFalse(Base64.isBase64(new byte[] { 0 }));\n        assertFalse(Base64.isBase64(new byte[] { 64, Byte.MAX_VALUE }));\n        assertFalse(Base64.isBase64(new byte[] { Byte.MAX_VALUE }));\n        assertTrue(Base64.isBase64(new byte[] { 'A' }));\n        assertFalse(Base64.isBase64(new byte[] { 'A', Byte.MIN_VALUE }));\n        assertTrue(Base64.isBase64(new byte[] { 'A', 'Z', 'a' }));\n        assertTrue(Base64.isBase64(new byte[] { '/', '=', '+' }));\n        assertFalse(Base64.isBase64(new byte[] { '$' }));\n    }",
        "begin_line": 443,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 68)",
            "(line 446,col 9)-(line 446,col 58)",
            "(line 447,col 9)-(line 447,col 57)",
            "(line 448,col 9)-(line 448,col 55)",
            "(line 449,col 9)-(line 449,col 72)",
            "(line 450,col 9)-(line 450,col 68)",
            "(line 451,col 9)-(line 451,col 56)",
            "(line 452,col 9)-(line 452,col 73)",
            "(line 453,col 9)-(line 453,col 66)",
            "(line 454,col 9)-(line 454,col 66)",
            "(line 455,col 9)-(line 455,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testIsUrlSafe()",
        "snippet": "    @Test\n    public void testIsUrlSafe() {\n        final Base64 base64Standard = new Base64(false);\n        final Base64 base64URLSafe = new Base64(true);\n\n        assertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n        assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n\n        final byte[] whiteSpace = { ' ', '\\n', '\\r', '\\t' };\n        assertTrue(\"Base64.isBase64(whiteSpace)=true\", Base64.isBase64(whiteSpace));\n    }",
        "begin_line": 461,
        "end_line": 471,
        "comment": "\n     * Tests isUrlSafe.\n     ",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 56)",
            "(line 464,col 9)-(line 464,col 54)",
            "(line 466,col 9)-(line 466,col 74)",
            "(line 467,col 9)-(line 467,col 71)",
            "(line 469,col 9)-(line 469,col 60)",
            "(line 470,col 9)-(line 470,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testKnownDecodings()",
        "snippet": "    @Test\n    public void testKnownDecodings() {\n        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64.decodeBase64(\n                \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64.decodeBase64(\n                \"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"http://jakarta.apache.org/commmons\", new String(\n                Base64.decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64.decodeBase64(\n                \"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n                new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(CHARSET_UTF8))));\n    }",
        "begin_line": 473,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 475,col 9)-(line 476,col 109)",
            "(line 477,col 9)-(line 478,col 117)",
            "(line 479,col 9)-(line 480,col 113)",
            "(line 481,col 9)-(line 482,col 117)",
            "(line 483,col 9)-(line 484,col 120)",
            "(line 485,col 9)-(line 485,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testKnownEncodings()",
        "snippet": "    @Test\n    public void testKnownEncodings() {\n        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(\n                Base64.encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8))));\n        assertEquals(\n                \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n                new String(Base64.encodeBase64Chunked(\n                        \"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n                                .getBytes(CHARSET_UTF8))));\n        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(\n                Base64.encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",\n                new String(Base64.encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(\n                Base64.encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\",\n                new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8))));\n        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(CHARSET_UTF8))));\n    }",
        "begin_line": 488,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 490,col 9)-(line 491,col 111)",
            "(line 492,col 9)-(line 496,col 59)",
            "(line 497,col 9)-(line 498,col 117)",
            "(line 499,col 9)-(line 500,col 110)",
            "(line 501,col 9)-(line 502,col 117)",
            "(line 503,col 9)-(line 504,col 108)",
            "(line 505,col 9)-(line 505,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testNonBase64Test()",
        "snippet": "    @Test\n    public void testNonBase64Test() throws Exception {\n\n        final byte[] bArray = { '%' };\n\n        assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\",\n                Base64.isBase64(bArray));\n\n        try {\n            final Base64 b64 = new Base64();\n            final byte[] result = b64.decode(bArray);\n\n            assertEquals(\"The result should be empty as the test encoded content did \"\n                    + \"not contain any valid base 64 characters\", 0, result.length);\n        } catch (final Exception e) {\n            fail(\"Exception was thrown when trying to decode \"\n                    + \"invalid base64 encoded data - RFC 2045 requires that all \"\n                    + \"non base64 character be discarded, an exception should not\" + \" have been thrown\");\n        }\n    }",
        "begin_line": 508,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 38)",
            "(line 513,col 9)-(line 514,col 41)",
            "(line 516,col 9)-(line 526,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter()",
        "snippet": "    @Test\n    public void testObjectDecodeWithInvalidParameter() throws Exception {\n        final Base64 b64 = new Base64();\n\n        try {\n            b64.decode(Integer.valueOf(5));\n            fail(\"decode(Object) didn't throw an exception when passed an Integer object\");\n        } catch (final DecoderException e) {\n            // ignored\n        }\n\n    }",
        "begin_line": 529,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 40)",
            "(line 533,col 9)-(line 538,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter()",
        "snippet": "    @Test\n    public void testObjectDecodeWithValidParameter() throws Exception {\n\n        final String original = \"Hello World!\";\n        final Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));\n\n        final Base64 b64 = new Base64();\n        final Object oDecoded = b64.decode(o);\n        final byte[] baDecoded = (byte[]) oDecoded;\n        final String dest = new String(baDecoded);\n\n        assertEquals(\"dest string does not equal original\", original, dest);\n    }",
        "begin_line": 542,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 47)",
            "(line 546,col 9)-(line 546,col 78)",
            "(line 548,col 9)-(line 548,col 40)",
            "(line 549,col 9)-(line 549,col 46)",
            "(line 550,col 9)-(line 550,col 51)",
            "(line 551,col 9)-(line 551,col 50)",
            "(line 553,col 9)-(line 553,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter()",
        "snippet": "    @Test\n    public void testObjectEncodeWithInvalidParameter() throws Exception {\n        final Base64 b64 = new Base64();\n        try {\n            b64.encode(\"Yadayadayada\");\n            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n        } catch (final EncoderException e) {\n            // Expected\n        }\n    }",
        "begin_line": 556,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 40)",
            "(line 559,col 9)-(line 564,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter()",
        "snippet": "    @Test\n    public void testObjectEncodeWithValidParameter() throws Exception {\n\n        final String original = \"Hello World!\";\n        final Object origObj = original.getBytes(CHARSET_UTF8);\n\n        final Base64 b64 = new Base64();\n        final Object oEncoded = b64.encode(origObj);\n        final byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n        final String dest = new String(bArray);\n\n        assertEquals(\"dest string does not equal original\", original, dest);\n    }",
        "begin_line": 567,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 570,col 47)",
            "(line 571,col 9)-(line 571,col 63)",
            "(line 573,col 9)-(line 573,col 40)",
            "(line 574,col 9)-(line 574,col 52)",
            "(line 575,col 9)-(line 575,col 69)",
            "(line 576,col 9)-(line 576,col 47)",
            "(line 578,col 9)-(line 578,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testObjectEncode()",
        "snippet": "    @Test\n    public void testObjectEncode() throws Exception {\n        final Base64 b64 = new Base64();\n        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(CHARSET_UTF8))));\n    }",
        "begin_line": 581,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 583,col 9)-(line 583,col 40)",
            "(line 584,col 9)-(line 584,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testPairs()",
        "snippet": "    @Test\n    public void testPairs() {\n        assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[] { 0, 0 })));\n        for (int i = -128; i <= 127; i++) {\n            final byte test[] = { (byte) i, (byte) i };\n            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n        }\n    }",
        "begin_line": 587,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 83)",
            "(line 590,col 9)-(line 593,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition()",
        "snippet": "    @Test\n    public void testRfc2045Section2Dot1CrLfDefinition() {\n        assertTrue(Arrays.equals(new byte[] { 13, 10 }, Base64.CHUNK_SEPARATOR));\n    }",
        "begin_line": 599,
        "end_line": 602,
        "comment": "\n     * Tests RFC 2045 section 2.1 CRLF definition.\n     ",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc2045Section6Dot8ChunkSizeDefinition()",
        "snippet": "    @Test\n    public void testRfc2045Section6Dot8ChunkSizeDefinition() {\n        assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 607,
        "end_line": 610,
        "comment": "\n     * Tests RFC 2045 section 6.8 chuck size definition.\n     ",
        "child_ranges": [
            "(line 609,col 9)-(line 609,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc1421Section6Dot8ChunkSizeDefinition()",
        "snippet": "    @Test\n    public void testRfc1421Section6Dot8ChunkSizeDefinition() {\n        assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 615,
        "end_line": 618,
        "comment": "\n     * Tests RFC 1421 section 4.3.2.4 chuck size definition.\n     ",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode()",
        "snippet": "    @Test\n    public void testRfc4648Section10Decode() {\n        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\")));\n        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\")));\n        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\")));\n        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\")));\n        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\")));\n        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\")));\n    }",
        "begin_line": 635,
        "end_line": 644,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     *\n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n     *      html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 637,col 9)-(line 637,col 80)",
            "(line 638,col 9)-(line 638,col 85)",
            "(line 639,col 9)-(line 639,col 86)",
            "(line 640,col 9)-(line 640,col 87)",
            "(line 641,col 9)-(line 641,col 92)",
            "(line 642,col 9)-(line 642,col 93)",
            "(line 643,col 9)-(line 643,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf()",
        "snippet": "    @Test\n    public void testRfc4648Section10DecodeWithCrLf() {\n        final String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);\n        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\" + CRLF)));\n        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\" + CRLF)));\n        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\" + CRLF)));\n        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\" + CRLF)));\n        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\" + CRLF)));\n        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\" + CRLF)));\n        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\" + CRLF)));\n    }",
        "begin_line": 661,
        "end_line": 671,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     *\n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n     *      html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 663,col 9)-(line 663,col 81)",
            "(line 664,col 9)-(line 664,col 87)",
            "(line 665,col 9)-(line 665,col 92)",
            "(line 666,col 9)-(line 666,col 93)",
            "(line 667,col 9)-(line 667,col 94)",
            "(line 668,col 9)-(line 668,col 99)",
            "(line 669,col 9)-(line 669,col 100)",
            "(line 670,col 9)-(line 670,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode()",
        "snippet": "    @Test\n    public void testRfc4648Section10Encode() {\n        assertEquals(\"\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"\")));\n        assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n        assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n        assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n        assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n        assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n        assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n    }",
        "begin_line": 688,
        "end_line": 697,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     *\n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n     *      html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 690,col 9)-(line 690,col 82)",
            "(line 691,col 9)-(line 691,col 87)",
            "(line 692,col 9)-(line 692,col 88)",
            "(line 693,col 9)-(line 693,col 89)",
            "(line 694,col 9)-(line 694,col 94)",
            "(line 695,col 9)-(line 695,col 95)",
            "(line 696,col 9)-(line 696,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode()",
        "snippet": "    @Test\n    public void testRfc4648Section10DecodeEncode() {\n        testDecodeEncode(\"\");\n        testDecodeEncode(\"Zg==\");\n        testDecodeEncode(\"Zm8=\");\n        testDecodeEncode(\"Zm9v\");\n        testDecodeEncode(\"Zm9vYg==\");\n        testDecodeEncode(\"Zm9vYmE=\");\n        testDecodeEncode(\"Zm9vYmFy\");\n    }",
        "begin_line": 714,
        "end_line": 723,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     *\n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n     *      html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 716,col 9)-(line 716,col 29)",
            "(line 717,col 9)-(line 717,col 33)",
            "(line 718,col 9)-(line 718,col 33)",
            "(line 719,col 9)-(line 719,col 33)",
            "(line 720,col 9)-(line 720,col 37)",
            "(line 721,col 9)-(line 721,col 37)",
            "(line 722,col 9)-(line 722,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testDecodeEncode(java.lang.String)",
        "snippet": "    private void testDecodeEncode(final String encodedText) {\n        final String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        final String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n        assertEquals(encodedText, encodedText2);\n    }",
        "begin_line": 725,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 726,col 9)-(line 726,col 98)",
            "(line 727,col 9)-(line 727,col 101)",
            "(line 728,col 9)-(line 728,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode()",
        "snippet": "    @Test\n    public void testRfc4648Section10EncodeDecode() {\n        testEncodeDecode(\"\");\n        testEncodeDecode(\"f\");\n        testEncodeDecode(\"fo\");\n        testEncodeDecode(\"foo\");\n        testEncodeDecode(\"foob\");\n        testEncodeDecode(\"fooba\");\n        testEncodeDecode(\"foobar\");\n    }",
        "begin_line": 746,
        "end_line": 755,
        "comment": "\n     * Tests RFC 4648 section 10 test vectors.\n     * <ul>\n     * <li>BASE64(\"\") = \"\"</li>\n     * <li>BASE64(\"f\") = \"Zg==\"</li>\n     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n     * </ul>\n     *\n     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n     *      html/rfc4648</a>\n     ",
        "child_ranges": [
            "(line 748,col 9)-(line 748,col 29)",
            "(line 749,col 9)-(line 749,col 30)",
            "(line 750,col 9)-(line 750,col 31)",
            "(line 751,col 9)-(line 751,col 32)",
            "(line 752,col 9)-(line 752,col 33)",
            "(line 753,col 9)-(line 753,col 34)",
            "(line 754,col 9)-(line 754,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testEncodeDecode(java.lang.String)",
        "snippet": "    private void testEncodeDecode(final String plainText) {\n        final String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n        final String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n        assertEquals(plainText, decodedText);\n    }",
        "begin_line": 757,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 758,col 9)-(line 758,col 98)",
            "(line 759,col 9)-(line 759,col 98)",
            "(line 760,col 9)-(line 760,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testSingletons()",
        "snippet": "    @Test\n    public void testSingletons() {\n        assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[] { (byte) 0 })));\n        assertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 1 })));\n        assertEquals(\"Ag==\", new String(Base64.encodeBase64(new byte[] { (byte) 2 })));\n        assertEquals(\"Aw==\", new String(Base64.encodeBase64(new byte[] { (byte) 3 })));\n        assertEquals(\"BA==\", new String(Base64.encodeBase64(new byte[] { (byte) 4 })));\n        assertEquals(\"BQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 5 })));\n        assertEquals(\"Bg==\", new String(Base64.encodeBase64(new byte[] { (byte) 6 })));\n        assertEquals(\"Bw==\", new String(Base64.encodeBase64(new byte[] { (byte) 7 })));\n        assertEquals(\"CA==\", new String(Base64.encodeBase64(new byte[] { (byte) 8 })));\n        assertEquals(\"CQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 9 })));\n        assertEquals(\"Cg==\", new String(Base64.encodeBase64(new byte[] { (byte) 10 })));\n        assertEquals(\"Cw==\", new String(Base64.encodeBase64(new byte[] { (byte) 11 })));\n        assertEquals(\"DA==\", new String(Base64.encodeBase64(new byte[] { (byte) 12 })));\n        assertEquals(\"DQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 13 })));\n        assertEquals(\"Dg==\", new String(Base64.encodeBase64(new byte[] { (byte) 14 })));\n        assertEquals(\"Dw==\", new String(Base64.encodeBase64(new byte[] { (byte) 15 })));\n        assertEquals(\"EA==\", new String(Base64.encodeBase64(new byte[] { (byte) 16 })));\n        assertEquals(\"EQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 17 })));\n        assertEquals(\"Eg==\", new String(Base64.encodeBase64(new byte[] { (byte) 18 })));\n        assertEquals(\"Ew==\", new String(Base64.encodeBase64(new byte[] { (byte) 19 })));\n        assertEquals(\"FA==\", new String(Base64.encodeBase64(new byte[] { (byte) 20 })));\n        assertEquals(\"FQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 21 })));\n        assertEquals(\"Fg==\", new String(Base64.encodeBase64(new byte[] { (byte) 22 })));\n        assertEquals(\"Fw==\", new String(Base64.encodeBase64(new byte[] { (byte) 23 })));\n        assertEquals(\"GA==\", new String(Base64.encodeBase64(new byte[] { (byte) 24 })));\n        assertEquals(\"GQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 25 })));\n        assertEquals(\"Gg==\", new String(Base64.encodeBase64(new byte[] { (byte) 26 })));\n        assertEquals(\"Gw==\", new String(Base64.encodeBase64(new byte[] { (byte) 27 })));\n        assertEquals(\"HA==\", new String(Base64.encodeBase64(new byte[] { (byte) 28 })));\n        assertEquals(\"HQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 29 })));\n        assertEquals(\"Hg==\", new String(Base64.encodeBase64(new byte[] { (byte) 30 })));\n        assertEquals(\"Hw==\", new String(Base64.encodeBase64(new byte[] { (byte) 31 })));\n        assertEquals(\"IA==\", new String(Base64.encodeBase64(new byte[] { (byte) 32 })));\n        assertEquals(\"IQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 33 })));\n        assertEquals(\"Ig==\", new String(Base64.encodeBase64(new byte[] { (byte) 34 })));\n        assertEquals(\"Iw==\", new String(Base64.encodeBase64(new byte[] { (byte) 35 })));\n        assertEquals(\"JA==\", new String(Base64.encodeBase64(new byte[] { (byte) 36 })));\n        assertEquals(\"JQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 37 })));\n        assertEquals(\"Jg==\", new String(Base64.encodeBase64(new byte[] { (byte) 38 })));\n        assertEquals(\"Jw==\", new String(Base64.encodeBase64(new byte[] { (byte) 39 })));\n        assertEquals(\"KA==\", new String(Base64.encodeBase64(new byte[] { (byte) 40 })));\n        assertEquals(\"KQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 41 })));\n        assertEquals(\"Kg==\", new String(Base64.encodeBase64(new byte[] { (byte) 42 })));\n        assertEquals(\"Kw==\", new String(Base64.encodeBase64(new byte[] { (byte) 43 })));\n        assertEquals(\"LA==\", new String(Base64.encodeBase64(new byte[] { (byte) 44 })));\n        assertEquals(\"LQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 45 })));\n        assertEquals(\"Lg==\", new String(Base64.encodeBase64(new byte[] { (byte) 46 })));\n        assertEquals(\"Lw==\", new String(Base64.encodeBase64(new byte[] { (byte) 47 })));\n        assertEquals(\"MA==\", new String(Base64.encodeBase64(new byte[] { (byte) 48 })));\n        assertEquals(\"MQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 49 })));\n        assertEquals(\"Mg==\", new String(Base64.encodeBase64(new byte[] { (byte) 50 })));\n        assertEquals(\"Mw==\", new String(Base64.encodeBase64(new byte[] { (byte) 51 })));\n        assertEquals(\"NA==\", new String(Base64.encodeBase64(new byte[] { (byte) 52 })));\n        assertEquals(\"NQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 53 })));\n        assertEquals(\"Ng==\", new String(Base64.encodeBase64(new byte[] { (byte) 54 })));\n        assertEquals(\"Nw==\", new String(Base64.encodeBase64(new byte[] { (byte) 55 })));\n        assertEquals(\"OA==\", new String(Base64.encodeBase64(new byte[] { (byte) 56 })));\n        assertEquals(\"OQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 57 })));\n        assertEquals(\"Og==\", new String(Base64.encodeBase64(new byte[] { (byte) 58 })));\n        assertEquals(\"Ow==\", new String(Base64.encodeBase64(new byte[] { (byte) 59 })));\n        assertEquals(\"PA==\", new String(Base64.encodeBase64(new byte[] { (byte) 60 })));\n        assertEquals(\"PQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 61 })));\n        assertEquals(\"Pg==\", new String(Base64.encodeBase64(new byte[] { (byte) 62 })));\n        assertEquals(\"Pw==\", new String(Base64.encodeBase64(new byte[] { (byte) 63 })));\n        assertEquals(\"QA==\", new String(Base64.encodeBase64(new byte[] { (byte) 64 })));\n        assertEquals(\"QQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 65 })));\n        assertEquals(\"Qg==\", new String(Base64.encodeBase64(new byte[] { (byte) 66 })));\n        assertEquals(\"Qw==\", new String(Base64.encodeBase64(new byte[] { (byte) 67 })));\n        assertEquals(\"RA==\", new String(Base64.encodeBase64(new byte[] { (byte) 68 })));\n        assertEquals(\"RQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 69 })));\n        assertEquals(\"Rg==\", new String(Base64.encodeBase64(new byte[] { (byte) 70 })));\n        assertEquals(\"Rw==\", new String(Base64.encodeBase64(new byte[] { (byte) 71 })));\n        assertEquals(\"SA==\", new String(Base64.encodeBase64(new byte[] { (byte) 72 })));\n        assertEquals(\"SQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 73 })));\n        assertEquals(\"Sg==\", new String(Base64.encodeBase64(new byte[] { (byte) 74 })));\n        assertEquals(\"Sw==\", new String(Base64.encodeBase64(new byte[] { (byte) 75 })));\n        assertEquals(\"TA==\", new String(Base64.encodeBase64(new byte[] { (byte) 76 })));\n        assertEquals(\"TQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 77 })));\n        assertEquals(\"Tg==\", new String(Base64.encodeBase64(new byte[] { (byte) 78 })));\n        assertEquals(\"Tw==\", new String(Base64.encodeBase64(new byte[] { (byte) 79 })));\n        assertEquals(\"UA==\", new String(Base64.encodeBase64(new byte[] { (byte) 80 })));\n        assertEquals(\"UQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 81 })));\n        assertEquals(\"Ug==\", new String(Base64.encodeBase64(new byte[] { (byte) 82 })));\n        assertEquals(\"Uw==\", new String(Base64.encodeBase64(new byte[] { (byte) 83 })));\n        assertEquals(\"VA==\", new String(Base64.encodeBase64(new byte[] { (byte) 84 })));\n        assertEquals(\"VQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 85 })));\n        assertEquals(\"Vg==\", new String(Base64.encodeBase64(new byte[] { (byte) 86 })));\n        assertEquals(\"Vw==\", new String(Base64.encodeBase64(new byte[] { (byte) 87 })));\n        assertEquals(\"WA==\", new String(Base64.encodeBase64(new byte[] { (byte) 88 })));\n        assertEquals(\"WQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 89 })));\n        assertEquals(\"Wg==\", new String(Base64.encodeBase64(new byte[] { (byte) 90 })));\n        assertEquals(\"Ww==\", new String(Base64.encodeBase64(new byte[] { (byte) 91 })));\n        assertEquals(\"XA==\", new String(Base64.encodeBase64(new byte[] { (byte) 92 })));\n        assertEquals(\"XQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 93 })));\n        assertEquals(\"Xg==\", new String(Base64.encodeBase64(new byte[] { (byte) 94 })));\n        assertEquals(\"Xw==\", new String(Base64.encodeBase64(new byte[] { (byte) 95 })));\n        assertEquals(\"YA==\", new String(Base64.encodeBase64(new byte[] { (byte) 96 })));\n        assertEquals(\"YQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 97 })));\n        assertEquals(\"Yg==\", new String(Base64.encodeBase64(new byte[] { (byte) 98 })));\n        assertEquals(\"Yw==\", new String(Base64.encodeBase64(new byte[] { (byte) 99 })));\n        assertEquals(\"ZA==\", new String(Base64.encodeBase64(new byte[] { (byte) 100 })));\n        assertEquals(\"ZQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 101 })));\n        assertEquals(\"Zg==\", new String(Base64.encodeBase64(new byte[] { (byte) 102 })));\n        assertEquals(\"Zw==\", new String(Base64.encodeBase64(new byte[] { (byte) 103 })));\n        assertEquals(\"aA==\", new String(Base64.encodeBase64(new byte[] { (byte) 104 })));\n        for (int i = -128; i <= 127; i++) {\n            final byte test[] = { (byte) i };\n            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n        }\n    }",
        "begin_line": 763,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 87)",
            "(line 766,col 9)-(line 766,col 87)",
            "(line 767,col 9)-(line 767,col 87)",
            "(line 768,col 9)-(line 768,col 87)",
            "(line 769,col 9)-(line 769,col 87)",
            "(line 770,col 9)-(line 770,col 87)",
            "(line 771,col 9)-(line 771,col 87)",
            "(line 772,col 9)-(line 772,col 87)",
            "(line 773,col 9)-(line 773,col 87)",
            "(line 774,col 9)-(line 774,col 87)",
            "(line 775,col 9)-(line 775,col 88)",
            "(line 776,col 9)-(line 776,col 88)",
            "(line 777,col 9)-(line 777,col 88)",
            "(line 778,col 9)-(line 778,col 88)",
            "(line 779,col 9)-(line 779,col 88)",
            "(line 780,col 9)-(line 780,col 88)",
            "(line 781,col 9)-(line 781,col 88)",
            "(line 782,col 9)-(line 782,col 88)",
            "(line 783,col 9)-(line 783,col 88)",
            "(line 784,col 9)-(line 784,col 88)",
            "(line 785,col 9)-(line 785,col 88)",
            "(line 786,col 9)-(line 786,col 88)",
            "(line 787,col 9)-(line 787,col 88)",
            "(line 788,col 9)-(line 788,col 88)",
            "(line 789,col 9)-(line 789,col 88)",
            "(line 790,col 9)-(line 790,col 88)",
            "(line 791,col 9)-(line 791,col 88)",
            "(line 792,col 9)-(line 792,col 88)",
            "(line 793,col 9)-(line 793,col 88)",
            "(line 794,col 9)-(line 794,col 88)",
            "(line 795,col 9)-(line 795,col 88)",
            "(line 796,col 9)-(line 796,col 88)",
            "(line 797,col 9)-(line 797,col 88)",
            "(line 798,col 9)-(line 798,col 88)",
            "(line 799,col 9)-(line 799,col 88)",
            "(line 800,col 9)-(line 800,col 88)",
            "(line 801,col 9)-(line 801,col 88)",
            "(line 802,col 9)-(line 802,col 88)",
            "(line 803,col 9)-(line 803,col 88)",
            "(line 804,col 9)-(line 804,col 88)",
            "(line 805,col 9)-(line 805,col 88)",
            "(line 806,col 9)-(line 806,col 88)",
            "(line 807,col 9)-(line 807,col 88)",
            "(line 808,col 9)-(line 808,col 88)",
            "(line 809,col 9)-(line 809,col 88)",
            "(line 810,col 9)-(line 810,col 88)",
            "(line 811,col 9)-(line 811,col 88)",
            "(line 812,col 9)-(line 812,col 88)",
            "(line 813,col 9)-(line 813,col 88)",
            "(line 814,col 9)-(line 814,col 88)",
            "(line 815,col 9)-(line 815,col 88)",
            "(line 816,col 9)-(line 816,col 88)",
            "(line 817,col 9)-(line 817,col 88)",
            "(line 818,col 9)-(line 818,col 88)",
            "(line 819,col 9)-(line 819,col 88)",
            "(line 820,col 9)-(line 820,col 88)",
            "(line 821,col 9)-(line 821,col 88)",
            "(line 822,col 9)-(line 822,col 88)",
            "(line 823,col 9)-(line 823,col 88)",
            "(line 824,col 9)-(line 824,col 88)",
            "(line 825,col 9)-(line 825,col 88)",
            "(line 826,col 9)-(line 826,col 88)",
            "(line 827,col 9)-(line 827,col 88)",
            "(line 828,col 9)-(line 828,col 88)",
            "(line 829,col 9)-(line 829,col 88)",
            "(line 830,col 9)-(line 830,col 88)",
            "(line 831,col 9)-(line 831,col 88)",
            "(line 832,col 9)-(line 832,col 88)",
            "(line 833,col 9)-(line 833,col 88)",
            "(line 834,col 9)-(line 834,col 88)",
            "(line 835,col 9)-(line 835,col 88)",
            "(line 836,col 9)-(line 836,col 88)",
            "(line 837,col 9)-(line 837,col 88)",
            "(line 838,col 9)-(line 838,col 88)",
            "(line 839,col 9)-(line 839,col 88)",
            "(line 840,col 9)-(line 840,col 88)",
            "(line 841,col 9)-(line 841,col 88)",
            "(line 842,col 9)-(line 842,col 88)",
            "(line 843,col 9)-(line 843,col 88)",
            "(line 844,col 9)-(line 844,col 88)",
            "(line 845,col 9)-(line 845,col 88)",
            "(line 846,col 9)-(line 846,col 88)",
            "(line 847,col 9)-(line 847,col 88)",
            "(line 848,col 9)-(line 848,col 88)",
            "(line 849,col 9)-(line 849,col 88)",
            "(line 850,col 9)-(line 850,col 88)",
            "(line 851,col 9)-(line 851,col 88)",
            "(line 852,col 9)-(line 852,col 88)",
            "(line 853,col 9)-(line 853,col 88)",
            "(line 854,col 9)-(line 854,col 88)",
            "(line 855,col 9)-(line 855,col 88)",
            "(line 856,col 9)-(line 856,col 88)",
            "(line 857,col 9)-(line 857,col 88)",
            "(line 858,col 9)-(line 858,col 88)",
            "(line 859,col 9)-(line 859,col 88)",
            "(line 860,col 9)-(line 860,col 88)",
            "(line 861,col 9)-(line 861,col 88)",
            "(line 862,col 9)-(line 862,col 88)",
            "(line 863,col 9)-(line 863,col 88)",
            "(line 864,col 9)-(line 864,col 88)",
            "(line 865,col 9)-(line 865,col 89)",
            "(line 866,col 9)-(line 866,col 89)",
            "(line 867,col 9)-(line 867,col 89)",
            "(line 868,col 9)-(line 868,col 89)",
            "(line 869,col 9)-(line 869,col 89)",
            "(line 870,col 9)-(line 873,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testSingletonsChunked()",
        "snippet": "    @Test\n    public void testSingletonsChunked() {\n        assertEquals(\"AA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0 })));\n        assertEquals(\"AQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 1 })));\n        assertEquals(\"Ag==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 2 })));\n        assertEquals(\"Aw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 3 })));\n        assertEquals(\"BA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 4 })));\n        assertEquals(\"BQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 5 })));\n        assertEquals(\"Bg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 6 })));\n        assertEquals(\"Bw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 7 })));\n        assertEquals(\"CA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 8 })));\n        assertEquals(\"CQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 9 })));\n        assertEquals(\"Cg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 10 })));\n        assertEquals(\"Cw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 11 })));\n        assertEquals(\"DA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 12 })));\n        assertEquals(\"DQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 13 })));\n        assertEquals(\"Dg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 14 })));\n        assertEquals(\"Dw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 15 })));\n        assertEquals(\"EA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 16 })));\n        assertEquals(\"EQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 17 })));\n        assertEquals(\"Eg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 18 })));\n        assertEquals(\"Ew==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 19 })));\n        assertEquals(\"FA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 20 })));\n        assertEquals(\"FQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 21 })));\n        assertEquals(\"Fg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 22 })));\n        assertEquals(\"Fw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 23 })));\n        assertEquals(\"GA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 24 })));\n        assertEquals(\"GQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 25 })));\n        assertEquals(\"Gg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 26 })));\n        assertEquals(\"Gw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 27 })));\n        assertEquals(\"HA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 28 })));\n        assertEquals(\"HQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 29 })));\n        assertEquals(\"Hg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 30 })));\n        assertEquals(\"Hw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 31 })));\n        assertEquals(\"IA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 32 })));\n        assertEquals(\"IQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 33 })));\n        assertEquals(\"Ig==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 34 })));\n        assertEquals(\"Iw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 35 })));\n        assertEquals(\"JA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 36 })));\n        assertEquals(\"JQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 37 })));\n        assertEquals(\"Jg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 38 })));\n        assertEquals(\"Jw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 39 })));\n        assertEquals(\"KA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 40 })));\n        assertEquals(\"KQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 41 })));\n        assertEquals(\"Kg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 42 })));\n        assertEquals(\"Kw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 43 })));\n        assertEquals(\"LA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 44 })));\n        assertEquals(\"LQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 45 })));\n        assertEquals(\"Lg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 46 })));\n        assertEquals(\"Lw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 47 })));\n        assertEquals(\"MA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 48 })));\n        assertEquals(\"MQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 49 })));\n        assertEquals(\"Mg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 50 })));\n        assertEquals(\"Mw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 51 })));\n        assertEquals(\"NA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 52 })));\n        assertEquals(\"NQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 53 })));\n        assertEquals(\"Ng==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 54 })));\n        assertEquals(\"Nw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 55 })));\n        assertEquals(\"OA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 56 })));\n        assertEquals(\"OQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 57 })));\n        assertEquals(\"Og==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 58 })));\n        assertEquals(\"Ow==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 59 })));\n        assertEquals(\"PA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 60 })));\n        assertEquals(\"PQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 61 })));\n        assertEquals(\"Pg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 62 })));\n        assertEquals(\"Pw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 63 })));\n        assertEquals(\"QA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 64 })));\n        assertEquals(\"QQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 65 })));\n        assertEquals(\"Qg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 66 })));\n        assertEquals(\"Qw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 67 })));\n        assertEquals(\"RA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 68 })));\n        assertEquals(\"RQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 69 })));\n        assertEquals(\"Rg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 70 })));\n        assertEquals(\"Rw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 71 })));\n        assertEquals(\"SA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 72 })));\n        assertEquals(\"SQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 73 })));\n        assertEquals(\"Sg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 74 })));\n        assertEquals(\"Sw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 75 })));\n        assertEquals(\"TA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 76 })));\n        assertEquals(\"TQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 77 })));\n        assertEquals(\"Tg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 78 })));\n        assertEquals(\"Tw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 79 })));\n        assertEquals(\"UA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 80 })));\n        assertEquals(\"UQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 81 })));\n        assertEquals(\"Ug==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 82 })));\n        assertEquals(\"Uw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 83 })));\n        assertEquals(\"VA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 84 })));\n        assertEquals(\"VQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 85 })));\n        assertEquals(\"Vg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 86 })));\n        assertEquals(\"Vw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 87 })));\n        assertEquals(\"WA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 88 })));\n        assertEquals(\"WQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 89 })));\n        assertEquals(\"Wg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 90 })));\n        assertEquals(\"Ww==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 91 })));\n        assertEquals(\"XA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 92 })));\n        assertEquals(\"XQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 93 })));\n        assertEquals(\"Xg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 94 })));\n        assertEquals(\"Xw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 95 })));\n        assertEquals(\"YA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 96 })));\n        assertEquals(\"YQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 97 })));\n        assertEquals(\"Yg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 98 })));\n        assertEquals(\"Yw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 99 })));\n        assertEquals(\"ZA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 100 })));\n        assertEquals(\"ZQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 101 })));\n        assertEquals(\"Zg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 102 })));\n        assertEquals(\"Zw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 103 })));\n        assertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 104 })));\n    }",
        "begin_line": 876,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 878,col 9)-(line 878,col 98)",
            "(line 879,col 9)-(line 879,col 98)",
            "(line 880,col 9)-(line 880,col 98)",
            "(line 881,col 9)-(line 881,col 98)",
            "(line 882,col 9)-(line 882,col 98)",
            "(line 883,col 9)-(line 883,col 98)",
            "(line 884,col 9)-(line 884,col 98)",
            "(line 885,col 9)-(line 885,col 98)",
            "(line 886,col 9)-(line 886,col 98)",
            "(line 887,col 9)-(line 887,col 98)",
            "(line 888,col 9)-(line 888,col 99)",
            "(line 889,col 9)-(line 889,col 99)",
            "(line 890,col 9)-(line 890,col 99)",
            "(line 891,col 9)-(line 891,col 99)",
            "(line 892,col 9)-(line 892,col 99)",
            "(line 893,col 9)-(line 893,col 99)",
            "(line 894,col 9)-(line 894,col 99)",
            "(line 895,col 9)-(line 895,col 99)",
            "(line 896,col 9)-(line 896,col 99)",
            "(line 897,col 9)-(line 897,col 99)",
            "(line 898,col 9)-(line 898,col 99)",
            "(line 899,col 9)-(line 899,col 99)",
            "(line 900,col 9)-(line 900,col 99)",
            "(line 901,col 9)-(line 901,col 99)",
            "(line 902,col 9)-(line 902,col 99)",
            "(line 903,col 9)-(line 903,col 99)",
            "(line 904,col 9)-(line 904,col 99)",
            "(line 905,col 9)-(line 905,col 99)",
            "(line 906,col 9)-(line 906,col 99)",
            "(line 907,col 9)-(line 907,col 99)",
            "(line 908,col 9)-(line 908,col 99)",
            "(line 909,col 9)-(line 909,col 99)",
            "(line 910,col 9)-(line 910,col 99)",
            "(line 911,col 9)-(line 911,col 99)",
            "(line 912,col 9)-(line 912,col 99)",
            "(line 913,col 9)-(line 913,col 99)",
            "(line 914,col 9)-(line 914,col 99)",
            "(line 915,col 9)-(line 915,col 99)",
            "(line 916,col 9)-(line 916,col 99)",
            "(line 917,col 9)-(line 917,col 99)",
            "(line 918,col 9)-(line 918,col 99)",
            "(line 919,col 9)-(line 919,col 99)",
            "(line 920,col 9)-(line 920,col 99)",
            "(line 921,col 9)-(line 921,col 99)",
            "(line 922,col 9)-(line 922,col 99)",
            "(line 923,col 9)-(line 923,col 99)",
            "(line 924,col 9)-(line 924,col 99)",
            "(line 925,col 9)-(line 925,col 99)",
            "(line 926,col 9)-(line 926,col 99)",
            "(line 927,col 9)-(line 927,col 99)",
            "(line 928,col 9)-(line 928,col 99)",
            "(line 929,col 9)-(line 929,col 99)",
            "(line 930,col 9)-(line 930,col 99)",
            "(line 931,col 9)-(line 931,col 99)",
            "(line 932,col 9)-(line 932,col 99)",
            "(line 933,col 9)-(line 933,col 99)",
            "(line 934,col 9)-(line 934,col 99)",
            "(line 935,col 9)-(line 935,col 99)",
            "(line 936,col 9)-(line 936,col 99)",
            "(line 937,col 9)-(line 937,col 99)",
            "(line 938,col 9)-(line 938,col 99)",
            "(line 939,col 9)-(line 939,col 99)",
            "(line 940,col 9)-(line 940,col 99)",
            "(line 941,col 9)-(line 941,col 99)",
            "(line 942,col 9)-(line 942,col 99)",
            "(line 943,col 9)-(line 943,col 99)",
            "(line 944,col 9)-(line 944,col 99)",
            "(line 945,col 9)-(line 945,col 99)",
            "(line 946,col 9)-(line 946,col 99)",
            "(line 947,col 9)-(line 947,col 99)",
            "(line 948,col 9)-(line 948,col 99)",
            "(line 949,col 9)-(line 949,col 99)",
            "(line 950,col 9)-(line 950,col 99)",
            "(line 951,col 9)-(line 951,col 99)",
            "(line 952,col 9)-(line 952,col 99)",
            "(line 953,col 9)-(line 953,col 99)",
            "(line 954,col 9)-(line 954,col 99)",
            "(line 955,col 9)-(line 955,col 99)",
            "(line 956,col 9)-(line 956,col 99)",
            "(line 957,col 9)-(line 957,col 99)",
            "(line 958,col 9)-(line 958,col 99)",
            "(line 959,col 9)-(line 959,col 99)",
            "(line 960,col 9)-(line 960,col 99)",
            "(line 961,col 9)-(line 961,col 99)",
            "(line 962,col 9)-(line 962,col 99)",
            "(line 963,col 9)-(line 963,col 99)",
            "(line 964,col 9)-(line 964,col 99)",
            "(line 965,col 9)-(line 965,col 99)",
            "(line 966,col 9)-(line 966,col 99)",
            "(line 967,col 9)-(line 967,col 99)",
            "(line 968,col 9)-(line 968,col 99)",
            "(line 969,col 9)-(line 969,col 99)",
            "(line 970,col 9)-(line 970,col 99)",
            "(line 971,col 9)-(line 971,col 99)",
            "(line 972,col 9)-(line 972,col 99)",
            "(line 973,col 9)-(line 973,col 99)",
            "(line 974,col 9)-(line 974,col 99)",
            "(line 975,col 9)-(line 975,col 99)",
            "(line 976,col 9)-(line 976,col 99)",
            "(line 977,col 9)-(line 977,col 99)",
            "(line 978,col 9)-(line 978,col 100)",
            "(line 979,col 9)-(line 979,col 100)",
            "(line 980,col 9)-(line 980,col 100)",
            "(line 981,col 9)-(line 981,col 100)",
            "(line 982,col 9)-(line 982,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testTriplets()",
        "snippet": "    @Test\n    public void testTriplets() {\n        assertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));\n        assertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));\n        assertEquals(\"AAAC\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));\n        assertEquals(\"AAAD\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));\n        assertEquals(\"AAAE\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));\n        assertEquals(\"AAAF\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));\n        assertEquals(\"AAAG\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));\n        assertEquals(\"AAAH\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));\n        assertEquals(\"AAAI\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));\n        assertEquals(\"AAAJ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));\n        assertEquals(\"AAAK\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));\n        assertEquals(\"AAAL\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));\n        assertEquals(\"AAAM\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));\n        assertEquals(\"AAAN\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));\n        assertEquals(\"AAAO\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));\n        assertEquals(\"AAAP\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));\n        assertEquals(\"AAAQ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));\n        assertEquals(\"AAAR\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));\n        assertEquals(\"AAAS\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));\n        assertEquals(\"AAAT\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));\n        assertEquals(\"AAAU\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));\n        assertEquals(\"AAAV\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));\n        assertEquals(\"AAAW\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));\n        assertEquals(\"AAAX\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));\n        assertEquals(\"AAAY\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));\n        assertEquals(\"AAAZ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));\n        assertEquals(\"AAAa\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));\n        assertEquals(\"AAAb\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));\n        assertEquals(\"AAAc\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));\n        assertEquals(\"AAAd\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));\n        assertEquals(\"AAAe\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));\n        assertEquals(\"AAAf\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));\n        assertEquals(\"AAAg\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));\n        assertEquals(\"AAAh\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));\n        assertEquals(\"AAAi\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));\n        assertEquals(\"AAAj\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));\n        assertEquals(\"AAAk\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));\n        assertEquals(\"AAAl\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));\n        assertEquals(\"AAAm\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));\n        assertEquals(\"AAAn\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));\n        assertEquals(\"AAAo\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));\n        assertEquals(\"AAAp\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));\n        assertEquals(\"AAAq\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));\n        assertEquals(\"AAAr\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));\n        assertEquals(\"AAAs\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));\n        assertEquals(\"AAAt\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));\n        assertEquals(\"AAAu\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));\n        assertEquals(\"AAAv\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));\n        assertEquals(\"AAAw\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));\n        assertEquals(\"AAAx\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));\n        assertEquals(\"AAAy\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));\n        assertEquals(\"AAAz\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));\n        assertEquals(\"AAA0\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));\n        assertEquals(\"AAA1\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));\n        assertEquals(\"AAA2\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));\n        assertEquals(\"AAA3\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));\n        assertEquals(\"AAA4\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));\n        assertEquals(\"AAA5\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));\n        assertEquals(\"AAA6\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));\n        assertEquals(\"AAA7\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));\n        assertEquals(\"AAA8\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));\n        assertEquals(\"AAA9\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));\n        assertEquals(\"AAA+\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));\n        assertEquals(\"AAA/\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));\n    }",
        "begin_line": 985,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 987,col 9)-(line 987,col 107)",
            "(line 988,col 9)-(line 988,col 107)",
            "(line 989,col 9)-(line 989,col 107)",
            "(line 990,col 9)-(line 990,col 107)",
            "(line 991,col 9)-(line 991,col 107)",
            "(line 992,col 9)-(line 992,col 107)",
            "(line 993,col 9)-(line 993,col 107)",
            "(line 994,col 9)-(line 994,col 107)",
            "(line 995,col 9)-(line 995,col 107)",
            "(line 996,col 9)-(line 996,col 107)",
            "(line 997,col 9)-(line 997,col 108)",
            "(line 998,col 9)-(line 998,col 108)",
            "(line 999,col 9)-(line 999,col 108)",
            "(line 1000,col 9)-(line 1000,col 108)",
            "(line 1001,col 9)-(line 1001,col 108)",
            "(line 1002,col 9)-(line 1002,col 108)",
            "(line 1003,col 9)-(line 1003,col 108)",
            "(line 1004,col 9)-(line 1004,col 108)",
            "(line 1005,col 9)-(line 1005,col 108)",
            "(line 1006,col 9)-(line 1006,col 108)",
            "(line 1007,col 9)-(line 1007,col 108)",
            "(line 1008,col 9)-(line 1008,col 108)",
            "(line 1009,col 9)-(line 1009,col 108)",
            "(line 1010,col 9)-(line 1010,col 108)",
            "(line 1011,col 9)-(line 1011,col 108)",
            "(line 1012,col 9)-(line 1012,col 108)",
            "(line 1013,col 9)-(line 1013,col 108)",
            "(line 1014,col 9)-(line 1014,col 108)",
            "(line 1015,col 9)-(line 1015,col 108)",
            "(line 1016,col 9)-(line 1016,col 108)",
            "(line 1017,col 9)-(line 1017,col 108)",
            "(line 1018,col 9)-(line 1018,col 108)",
            "(line 1019,col 9)-(line 1019,col 108)",
            "(line 1020,col 9)-(line 1020,col 108)",
            "(line 1021,col 9)-(line 1021,col 108)",
            "(line 1022,col 9)-(line 1022,col 108)",
            "(line 1023,col 9)-(line 1023,col 108)",
            "(line 1024,col 9)-(line 1024,col 108)",
            "(line 1025,col 9)-(line 1025,col 108)",
            "(line 1026,col 9)-(line 1026,col 108)",
            "(line 1027,col 9)-(line 1027,col 108)",
            "(line 1028,col 9)-(line 1028,col 108)",
            "(line 1029,col 9)-(line 1029,col 108)",
            "(line 1030,col 9)-(line 1030,col 108)",
            "(line 1031,col 9)-(line 1031,col 108)",
            "(line 1032,col 9)-(line 1032,col 108)",
            "(line 1033,col 9)-(line 1033,col 108)",
            "(line 1034,col 9)-(line 1034,col 108)",
            "(line 1035,col 9)-(line 1035,col 108)",
            "(line 1036,col 9)-(line 1036,col 108)",
            "(line 1037,col 9)-(line 1037,col 108)",
            "(line 1038,col 9)-(line 1038,col 108)",
            "(line 1039,col 9)-(line 1039,col 108)",
            "(line 1040,col 9)-(line 1040,col 108)",
            "(line 1041,col 9)-(line 1041,col 108)",
            "(line 1042,col 9)-(line 1042,col 108)",
            "(line 1043,col 9)-(line 1043,col 108)",
            "(line 1044,col 9)-(line 1044,col 108)",
            "(line 1045,col 9)-(line 1045,col 108)",
            "(line 1046,col 9)-(line 1046,col 108)",
            "(line 1047,col 9)-(line 1047,col 108)",
            "(line 1048,col 9)-(line 1048,col 108)",
            "(line 1049,col 9)-(line 1049,col 108)",
            "(line 1050,col 9)-(line 1050,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testTripletsChunked()",
        "snippet": "    @Test\n    public void testTripletsChunked() {\n        assertEquals(\"AAAA\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));\n        assertEquals(\"AAAB\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));\n        assertEquals(\"AAAC\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));\n        assertEquals(\"AAAD\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));\n        assertEquals(\"AAAE\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));\n        assertEquals(\"AAAF\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));\n        assertEquals(\"AAAG\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));\n        assertEquals(\"AAAH\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));\n        assertEquals(\"AAAI\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));\n        assertEquals(\"AAAJ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));\n        assertEquals(\"AAAK\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));\n        assertEquals(\"AAAL\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));\n        assertEquals(\"AAAM\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));\n        assertEquals(\"AAAN\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));\n        assertEquals(\"AAAO\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));\n        assertEquals(\"AAAP\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));\n        assertEquals(\"AAAQ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));\n        assertEquals(\"AAAR\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));\n        assertEquals(\"AAAS\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));\n        assertEquals(\"AAAT\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));\n        assertEquals(\"AAAU\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));\n        assertEquals(\"AAAV\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));\n        assertEquals(\"AAAW\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));\n        assertEquals(\"AAAX\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));\n        assertEquals(\"AAAY\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));\n        assertEquals(\"AAAZ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));\n        assertEquals(\"AAAa\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));\n        assertEquals(\"AAAb\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));\n        assertEquals(\"AAAc\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));\n        assertEquals(\"AAAd\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));\n        assertEquals(\"AAAe\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));\n        assertEquals(\"AAAf\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));\n        assertEquals(\"AAAg\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));\n        assertEquals(\"AAAh\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));\n        assertEquals(\"AAAi\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));\n        assertEquals(\"AAAj\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));\n        assertEquals(\"AAAk\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));\n        assertEquals(\"AAAl\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));\n        assertEquals(\"AAAm\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));\n        assertEquals(\"AAAn\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));\n        assertEquals(\"AAAo\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));\n        assertEquals(\"AAAp\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));\n        assertEquals(\"AAAq\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));\n        assertEquals(\"AAAr\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));\n        assertEquals(\"AAAs\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));\n        assertEquals(\"AAAt\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));\n        assertEquals(\"AAAu\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));\n        assertEquals(\"AAAv\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));\n        assertEquals(\"AAAw\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));\n        assertEquals(\"AAAx\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));\n        assertEquals(\"AAAy\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));\n        assertEquals(\"AAAz\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));\n        assertEquals(\"AAA0\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));\n        assertEquals(\"AAA1\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));\n        assertEquals(\"AAA2\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));\n        assertEquals(\"AAA3\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));\n        assertEquals(\"AAA4\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));\n        assertEquals(\"AAA5\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));\n        assertEquals(\"AAA6\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));\n        assertEquals(\"AAA7\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));\n        assertEquals(\"AAA8\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));\n        assertEquals(\"AAA9\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));\n        assertEquals(\"AAA+\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));\n        assertEquals(\"AAA/\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));\n    }",
        "begin_line": 1053,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1055,col 9)-(line 1055,col 118)",
            "(line 1056,col 9)-(line 1056,col 118)",
            "(line 1057,col 9)-(line 1057,col 118)",
            "(line 1058,col 9)-(line 1058,col 118)",
            "(line 1059,col 9)-(line 1059,col 118)",
            "(line 1060,col 9)-(line 1060,col 118)",
            "(line 1061,col 9)-(line 1061,col 118)",
            "(line 1062,col 9)-(line 1062,col 118)",
            "(line 1063,col 9)-(line 1063,col 118)",
            "(line 1064,col 9)-(line 1064,col 118)",
            "(line 1065,col 9)-(line 1065,col 119)",
            "(line 1066,col 9)-(line 1066,col 119)",
            "(line 1067,col 9)-(line 1067,col 119)",
            "(line 1068,col 9)-(line 1068,col 119)",
            "(line 1069,col 9)-(line 1069,col 119)",
            "(line 1070,col 9)-(line 1070,col 119)",
            "(line 1071,col 9)-(line 1071,col 119)",
            "(line 1072,col 9)-(line 1072,col 119)",
            "(line 1073,col 9)-(line 1073,col 119)",
            "(line 1074,col 9)-(line 1074,col 119)",
            "(line 1075,col 9)-(line 1075,col 119)",
            "(line 1076,col 9)-(line 1076,col 119)",
            "(line 1077,col 9)-(line 1077,col 119)",
            "(line 1078,col 9)-(line 1078,col 119)",
            "(line 1079,col 9)-(line 1079,col 119)",
            "(line 1080,col 9)-(line 1080,col 119)",
            "(line 1081,col 9)-(line 1081,col 119)",
            "(line 1082,col 9)-(line 1082,col 119)",
            "(line 1083,col 9)-(line 1083,col 119)",
            "(line 1084,col 9)-(line 1084,col 119)",
            "(line 1085,col 9)-(line 1085,col 119)",
            "(line 1086,col 9)-(line 1086,col 119)",
            "(line 1087,col 9)-(line 1087,col 119)",
            "(line 1088,col 9)-(line 1088,col 119)",
            "(line 1089,col 9)-(line 1089,col 119)",
            "(line 1090,col 9)-(line 1090,col 119)",
            "(line 1091,col 9)-(line 1091,col 119)",
            "(line 1092,col 9)-(line 1092,col 119)",
            "(line 1093,col 9)-(line 1093,col 119)",
            "(line 1094,col 9)-(line 1094,col 119)",
            "(line 1095,col 9)-(line 1095,col 119)",
            "(line 1096,col 9)-(line 1096,col 119)",
            "(line 1097,col 9)-(line 1097,col 119)",
            "(line 1098,col 9)-(line 1098,col 119)",
            "(line 1099,col 9)-(line 1099,col 119)",
            "(line 1100,col 9)-(line 1100,col 119)",
            "(line 1101,col 9)-(line 1101,col 119)",
            "(line 1102,col 9)-(line 1102,col 119)",
            "(line 1103,col 9)-(line 1103,col 119)",
            "(line 1104,col 9)-(line 1104,col 119)",
            "(line 1105,col 9)-(line 1105,col 119)",
            "(line 1106,col 9)-(line 1106,col 119)",
            "(line 1107,col 9)-(line 1107,col 119)",
            "(line 1108,col 9)-(line 1108,col 119)",
            "(line 1109,col 9)-(line 1109,col 119)",
            "(line 1110,col 9)-(line 1110,col 119)",
            "(line 1111,col 9)-(line 1111,col 119)",
            "(line 1112,col 9)-(line 1112,col 119)",
            "(line 1113,col 9)-(line 1113,col 119)",
            "(line 1114,col 9)-(line 1114,col 119)",
            "(line 1115,col 9)-(line 1115,col 119)",
            "(line 1116,col 9)-(line 1116,col 119)",
            "(line 1117,col 9)-(line 1117,col 119)",
            "(line 1118,col 9)-(line 1118,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testUrlSafe()",
        "snippet": "    @Test\n    public void testUrlSafe() {\n        // test random data of sizes 0 thru 150\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base64TestData.randomData(i, true);\n            final byte[] encoded = randomData[1];\n            final byte[] decoded = randomData[0];\n            final byte[] result = Base64.decodeBase64(encoded);\n            assertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n            assertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n            assertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n        }\n\n    }",
        "begin_line": 1124,
        "end_line": 1138,
        "comment": "\n     * Tests url-safe Base64 against random data, sizes 0 to 150.\n     ",
        "child_ranges": [
            "(line 1127,col 9)-(line 1136,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testUUID()",
        "snippet": "    @Test\n    public void testUUID() throws DecoderException {\n        // The 4 UUID's below contains mixtures of + and / to help us test the\n        // URL-SAFE encoding mode.\n        final byte[][] ids = new byte[4][];\n\n        // ids[0] was chosen so that it encodes with at least one +.\n        ids[0] = Hex.decodeHex(\"94ed8d0319e4493399560fb67404d370\");\n\n        // ids[1] was chosen so that it encodes with both / and +.\n        ids[1] = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\");\n\n        // ids[2] was chosen so that it encodes with at least one /.\n        ids[2] = Hex.decodeHex(\"64be154b6ffa40258d1a01288e7c31ca\");\n\n        // ids[3] was chosen so that it encodes with both / and +, with /\n        // right at the beginning.\n        ids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\");\n\n        final byte[][] standard = new byte[4][];\n        standard[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg+2dATTcA==\");\n        standard[1] = StringUtils.getBytesUtf8(\"K/fMJwH+Q5e0nr7tWsxwkA==\");\n        standard[2] = StringUtils.getBytesUtf8(\"ZL4VS2/6QCWNGgEojnwxyg==\");\n        standard[3] = StringUtils.getBytesUtf8(\"/3+PwBzbRxqMi1qTBhg/6A==\");\n\n        final byte[][] urlSafe1 = new byte[4][];\n        // regular padding (two '==' signs).\n        urlSafe1[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA==\");\n        urlSafe1[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA==\");\n        urlSafe1[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg==\");\n        urlSafe1[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A==\");\n\n        final byte[][] urlSafe2 = new byte[4][];\n        // single padding (only one '=' sign).\n        urlSafe2[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA=\");\n        urlSafe2[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA=\");\n        urlSafe2[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg=\");\n        urlSafe2[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A=\");\n\n        final byte[][] urlSafe3 = new byte[4][];\n        // no padding (no '=' signs).\n        urlSafe3[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA\");\n        urlSafe3[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA\");\n        urlSafe3[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg\");\n        urlSafe3[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A\");\n\n        for (int i = 0; i < 4; i++) {\n            final byte[] encodedStandard = Base64.encodeBase64(ids[i]);\n            final byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);\n            final byte[] decodedStandard = Base64.decodeBase64(standard[i]);\n            final byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);\n            final byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);\n            final byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);\n\n            // Very important debugging output should anyone\n            // ever need to delve closely into this stuff.\n//            {\n//                System.out.println(\"reference: [\" + Hex.encodeHexString(ids[i]) + \"]\");\n//                System.out.println(\"standard:  [\" + Hex.encodeHexString(decodedStandard) + \"] From: [\"\n//                        + StringUtils.newStringUtf8(standard[i]) + \"]\");\n//                System.out.println(\"safe1:     [\" + Hex.encodeHexString(decodedUrlSafe1) + \"] From: [\"\n//                        + StringUtils.newStringUtf8(urlSafe1[i]) + \"]\");\n//                System.out.println(\"safe2:     [\" + Hex.encodeHexString(decodedUrlSafe2) + \"] From: [\"\n//                        + StringUtils.newStringUtf8(urlSafe2[i]) + \"]\");\n//                System.out.println(\"safe3:     [\" + Hex.encodeHexString(decodedUrlSafe3) + \"] From: [\"\n//                        + StringUtils.newStringUtf8(urlSafe3[i]) + \"]\");\n//            }\n\n            assertTrue(\"standard encode uuid\", Arrays.equals(encodedStandard, standard[i]));\n            assertTrue(\"url-safe encode uuid\", Arrays.equals(encodedUrlSafe, urlSafe3[i]));\n            assertTrue(\"standard decode uuid\", Arrays.equals(decodedStandard, ids[i]));\n            assertTrue(\"url-safe1 decode uuid\", Arrays.equals(decodedUrlSafe1, ids[i]));\n            assertTrue(\"url-safe2 decode uuid\", Arrays.equals(decodedUrlSafe2, ids[i]));\n            assertTrue(\"url-safe3 decode uuid\", Arrays.equals(decodedUrlSafe3, ids[i]));\n        }\n    }",
        "begin_line": 1148,
        "end_line": 1223,
        "comment": "\n     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE\n     * mode. This test case ends up being the \"URL-SAFE\" JUnit's.\n     *\n     * @throws DecoderException\n     *             if Hex.decode() fails - a serious problem since Hex comes\n     *             from our own commons-codec!\n     ",
        "child_ranges": [
            "(line 1152,col 9)-(line 1152,col 43)",
            "(line 1155,col 9)-(line 1155,col 67)",
            "(line 1158,col 9)-(line 1158,col 67)",
            "(line 1161,col 9)-(line 1161,col 67)",
            "(line 1165,col 9)-(line 1165,col 67)",
            "(line 1167,col 9)-(line 1167,col 48)",
            "(line 1168,col 9)-(line 1168,col 75)",
            "(line 1169,col 9)-(line 1169,col 75)",
            "(line 1170,col 9)-(line 1170,col 75)",
            "(line 1171,col 9)-(line 1171,col 75)",
            "(line 1173,col 9)-(line 1173,col 48)",
            "(line 1175,col 9)-(line 1175,col 75)",
            "(line 1176,col 9)-(line 1176,col 75)",
            "(line 1177,col 9)-(line 1177,col 75)",
            "(line 1178,col 9)-(line 1178,col 75)",
            "(line 1180,col 9)-(line 1180,col 48)",
            "(line 1182,col 9)-(line 1182,col 74)",
            "(line 1183,col 9)-(line 1183,col 74)",
            "(line 1184,col 9)-(line 1184,col 74)",
            "(line 1185,col 9)-(line 1185,col 74)",
            "(line 1187,col 9)-(line 1187,col 48)",
            "(line 1189,col 9)-(line 1189,col 73)",
            "(line 1190,col 9)-(line 1190,col 73)",
            "(line 1191,col 9)-(line 1191,col 73)",
            "(line 1192,col 9)-(line 1192,col 73)",
            "(line 1194,col 9)-(line 1222,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations()",
        "snippet": "    @Test\n    public void testByteToStringVariations() throws DecoderException {\n        final Base64 base64 = new Base64(0);\n        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n        final byte[] b2 = new byte[0];\n        final byte[] b3 = null;\n        final byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\"); // for\n                                                                                            // url-safe\n                                                                                            // tests\n\n        assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\n        assertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\n        assertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));\n        assertEquals(\"byteToString static \\\"\\\"\", \"\", Base64.encodeBase64String(b2));\n        assertEquals(\"byteToString null\", null, base64.encodeToString(b3));\n        assertEquals(\"byteToString static null\", null, Base64.encodeBase64String(b3));\n        assertEquals(\"byteToString UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", base64.encodeToString(b4));\n        assertEquals(\"byteToString static UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", Base64.encodeBase64String(b4));\n        assertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\",\n                Base64.encodeBase64URLSafeString(b4));\n    }",
        "begin_line": 1225,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1227,col 9)-(line 1227,col 44)",
            "(line 1228,col 9)-(line 1228,col 66)",
            "(line 1229,col 9)-(line 1229,col 38)",
            "(line 1230,col 9)-(line 1230,col 31)",
            "(line 1231,col 9)-(line 1231,col 76)",
            "(line 1235,col 9)-(line 1235,col 96)",
            "(line 1236,col 9)-(line 1236,col 107)",
            "(line 1237,col 9)-(line 1237,col 73)",
            "(line 1238,col 9)-(line 1238,col 84)",
            "(line 1239,col 9)-(line 1239,col 75)",
            "(line 1240,col 9)-(line 1240,col 86)",
            "(line 1241,col 9)-(line 1241,col 97)",
            "(line 1242,col 9)-(line 1242,col 108)",
            "(line 1243,col 9)-(line 1244,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testStringToByteVariations()",
        "snippet": "    @Test\n    public void testStringToByteVariations() throws DecoderException {\n        final Base64 base64 = new Base64();\n        final String s1 = \"SGVsbG8gV29ybGQ=\\r\\n\";\n        final String s2 = \"\";\n        final String s3 = null;\n        final String s4a = \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\";\n        final String s4b = \"K_fMJwH-Q5e0nr7tWsxwkA\";\n        final byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\"); // for\n                                                                                            // url-safe\n                                                                                            // tests\n\n        assertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8(base64.decode(s1)));\n        assertEquals(\"StringToByte Hello World\", \"Hello World\",\n                StringUtils.newStringUtf8((byte[]) base64.decode((Object) s1)));\n        assertEquals(\"StringToByte static Hello World\", \"Hello World\",\n                StringUtils.newStringUtf8(Base64.decodeBase64(s1)));\n        assertEquals(\"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(base64.decode(s2)));\n        assertEquals(\"StringToByte static \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));\n        assertEquals(\"StringToByte null\", null, StringUtils.newStringUtf8(base64.decode(s3)));\n        assertEquals(\"StringToByte static null\", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));\n        assertTrue(\"StringToByte UUID\", Arrays.equals(b4, base64.decode(s4b)));\n        assertTrue(\"StringToByte static UUID\", Arrays.equals(b4, Base64.decodeBase64(s4a)));\n        assertTrue(\"StringToByte static-url-safe UUID\", Arrays.equals(b4, Base64.decodeBase64(s4b)));\n    }",
        "begin_line": 1247,
        "end_line": 1271,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 9)-(line 1249,col 43)",
            "(line 1250,col 9)-(line 1250,col 49)",
            "(line 1251,col 9)-(line 1251,col 29)",
            "(line 1252,col 9)-(line 1252,col 31)",
            "(line 1253,col 9)-(line 1253,col 58)",
            "(line 1254,col 9)-(line 1254,col 52)",
            "(line 1255,col 9)-(line 1255,col 76)",
            "(line 1259,col 9)-(line 1259,col 110)",
            "(line 1260,col 9)-(line 1261,col 80)",
            "(line 1262,col 9)-(line 1263,col 68)",
            "(line 1264,col 9)-(line 1264,col 92)",
            "(line 1265,col 9)-(line 1265,col 105)",
            "(line 1266,col 9)-(line 1266,col 94)",
            "(line 1267,col 9)-(line 1267,col 107)",
            "(line 1268,col 9)-(line 1268,col 79)",
            "(line 1269,col 9)-(line 1269,col 92)",
            "(line 1270,col 9)-(line 1270,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.toString(byte[])",
        "snippet": "    private String toString(final byte[] data) {\n        final StringBuilder buf = new StringBuilder();\n        for (int i = 0; i < data.length; i++) {\n            buf.append(data[i]);\n            if (i != data.length - 1) {\n                buf.append(\",\");\n            }\n        }\n        return buf.toString();\n    }",
        "begin_line": 1273,
        "end_line": 1282,
        "comment": "",
        "child_ranges": [
            "(line 1274,col 9)-(line 1274,col 54)",
            "(line 1275,col 9)-(line 1280,col 9)",
            "(line 1281,col 9)-(line 1281,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base64Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
        "signature": "org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator()",
        "snippet": "    @Test\n    @Ignore\n    public void testHugeLineSeparator() {\n        final int BaseNCodec_DEFAULT_BUFFER_SIZE = 8192;\n        final int Base64_BYTES_PER_ENCODED_BLOCK = 4;\n        final byte[] baLineSeparator = new byte[BaseNCodec_DEFAULT_BUFFER_SIZE * 4 - 3];\n        final Base64 b64 = new Base64(Base64_BYTES_PER_ENCODED_BLOCK, baLineSeparator);\n        final String strOriginal = \"Hello World\";\n        final String strDecoded = new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));\n        assertEquals(\"testDEFAULT_BUFFER_SIZE\", strOriginal, strDecoded);\n    }",
        "begin_line": 1289,
        "end_line": 1299,
        "comment": "\n     * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.\n     *\n     * @see \"<a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'>dev@commons.apache.org</a>\"\n     ",
        "child_ranges": [
            "(line 1292,col 9)-(line 1292,col 56)",
            "(line 1293,col 9)-(line 1293,col 53)",
            "(line 1294,col 9)-(line 1294,col 88)",
            "(line 1295,col 9)-(line 1295,col 87)",
            "(line 1296,col 9)-(line 1296,col 49)",
            "(line 1297,col 9)-(line 1297,col 108)",
            "(line 1298,col 9)-(line 1298,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize()",
        "snippet": "    @Test\n    public void testBase32EmptyOutputStreamMimeChunkSize() throws Exception {\n        testBase32EmptyOutputStream(BaseNCodec.MIME_CHUNK_SIZE);\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "\n     * Test the Base32OutputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize()",
        "snippet": "    @Test\n    public void testBase32EmptyOutputStreamPemChunkSize() throws Exception {\n        testBase32EmptyOutputStream(BaseNCodec.PEM_CHUNK_SIZE);\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "\n     * Test the Base32OutputStream implementation against empty input.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream(int)",
        "snippet": "    private void testBase32EmptyOutputStream(final int chunkSize) throws Exception {\n        final byte[] emptyEncoded = new byte[0];\n        final byte[] emptyDecoded = new byte[0];\n        testByteByByte(emptyEncoded, emptyDecoded, chunkSize, CRLF);\n        testByChunk(emptyEncoded, emptyDecoded, chunkSize, CRLF);\n    }",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 48)",
            "(line 85,col 9)-(line 85,col 48)",
            "(line 86,col 9)-(line 86,col 68)",
            "(line 87,col 9)-(line 87,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk()",
        "snippet": "    @Test\n    public void testBase32OutputStreamByChunk() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n        byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n\n//        // Single Byte test.\n//        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n//        decoded = new byte[]{(byte) 0};\n//        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);\n\n\n//        // Single Line test.\n//        String singleLine = Base32TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n//        encoded = StringUtils.getBytesUtf8(singleLine);\n//        decoded = Base32TestData.DECODED;\n//        testByChunk(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        final BaseNCodec codec = new Base32();\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base32TestData.randomData(codec, i);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByChunk(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 96,
        "end_line": 123,
        "comment": "\n     * Test the Base32OutputStream implementation\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 81)",
            "(line 100,col 9)-(line 100,col 81)",
            "(line 101,col 9)-(line 101,col 72)",
            "(line 116,col 9)-(line 116,col 46)",
            "(line 117,col 9)-(line 122,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte()",
        "snippet": "    @Test\n    public void testBase32OutputStreamByteByByte() throws Exception {\n        // Hello World test.\n        byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n        byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n        testByteByByte(encoded, decoded, 76, CRLF);\n\n//        // Single Byte test.\n//        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n//        decoded = new byte[]{(byte) 0};\n//        testByteByByte(encoded, decoded, 76, CRLF);\n\n\n//        // Single Line test.\n//        String singleLine = Base32TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n//        encoded = StringUtils.getBytesUtf8(singleLine);\n//        decoded = Base32TestData.DECODED;\n//        testByteByByte(encoded, decoded, 0, LF);\n\n        // test random data of sizes 0 thru 150\n        final BaseNCodec codec = new Base32();\n        for (int i = 0; i <= 150; i++) {\n            final byte[][] randomData = Base32TestData.randomData(codec, i);\n            encoded = randomData[1];\n            decoded = randomData[0];\n            testByteByByte(encoded, decoded, 0, LF);\n        }\n    }",
        "begin_line": 131,
        "end_line": 158,
        "comment": "\n     * Test the Base32OutputStream implementation\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 81)",
            "(line 135,col 9)-(line 135,col 81)",
            "(line 136,col 9)-(line 136,col 51)",
            "(line 151,col 9)-(line 151,col 46)",
            "(line 152,col 9)-(line 157,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk(byte[], byte[], int, byte[])",
        "snippet": "    private void testByChunk(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        OutputStream out = new Base32OutputStream(byteOut, true, chunkSize, separator);\n        out.write(decoded);\n        out.close();\n        byte[] output = byteOut.toByteArray();\n        assertTrue(\"Streaming chunked Base32 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base32OutputStream(byteOut, false);\n        out.write(encoded);\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming chunked Base32 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        byteOut = new ByteArrayOutputStream();\n        out = byteOut;\n        for (int i = 0; i < 10; i++) {\n            out = new Base32OutputStream(out, false);\n            out = new Base32OutputStream(out, true, chunkSize, separator);\n        }\n        out.write(decoded);\n        out.close();\n        output = byteOut.toByteArray();\n\n        assertTrue(\"Streaming chunked Base32 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 178,
        "end_line": 208,
        "comment": "\n     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32OutputStream wraps itself in encode and decode\n     * mode over and over again.\n     *\n     * @param encoded\n     *            Base32 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the Base32 encoded data.\n     * @param separator\n     *            Line separator in the Base32 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base32 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 68)",
            "(line 182,col 9)-(line 182,col 87)",
            "(line 183,col 9)-(line 183,col 27)",
            "(line 184,col 9)-(line 184,col 20)",
            "(line 185,col 9)-(line 185,col 46)",
            "(line 186,col 9)-(line 186,col 86)",
            "(line 189,col 9)-(line 189,col 46)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 27)",
            "(line 192,col 9)-(line 192,col 20)",
            "(line 193,col 9)-(line 193,col 39)",
            "(line 194,col 9)-(line 194,col 86)",
            "(line 197,col 9)-(line 197,col 46)",
            "(line 198,col 9)-(line 198,col 22)",
            "(line 199,col 9)-(line 202,col 9)",
            "(line 203,col 9)-(line 203,col 27)",
            "(line 204,col 9)-(line 204,col 20)",
            "(line 205,col 9)-(line 205,col 39)",
            "(line 207,col 9)-(line 207,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte(byte[], byte[], int, byte[])",
        "snippet": "    private void testByteByByte(final byte[] encoded, final byte[] decoded, final int chunkSize, final byte[] separator) throws Exception {\n\n        // Start with encode.\n        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        OutputStream out = new Base32OutputStream(byteOut, true, chunkSize, separator);\n        for (final byte element : decoded) {\n            out.write(element);\n        }\n        out.close();\n        byte[] output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte Base32 encode\", Arrays.equals(output, encoded));\n\n        // Now let's try decode.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base32OutputStream(byteOut, false);\n        for (final byte element : encoded) {\n            out.write(element);\n        }\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte Base32 decode\", Arrays.equals(output, decoded));\n\n        // Now let's try decode with tonnes of flushes.\n        byteOut = new ByteArrayOutputStream();\n        out = new Base32OutputStream(byteOut, false);\n        for (final byte element : encoded) {\n            out.write(element);\n            out.flush();\n        }\n        out.close();\n        output = byteOut.toByteArray();\n        assertTrue(\"Streaming byte-by-byte flush() Base32 decode\", Arrays.equals(output, decoded));\n\n        // I always wanted to do this! (wrap encoder with decoder etc etc).\n        byteOut = new ByteArrayOutputStream();\n        out = byteOut;\n        for (int i = 0; i < 10; i++) {\n            out = new Base32OutputStream(out, false);\n            out = new Base32OutputStream(out, true, chunkSize, separator);\n        }\n        for (final byte element : decoded) {\n            out.write(element);\n        }\n        out.close();\n        output = byteOut.toByteArray();\n\n        assertTrue(\"Streaming byte-by-byte Base32 wrap-wrap-wrap!\", Arrays.equals(output, decoded));\n    }",
        "begin_line": 228,
        "end_line": 275,
        "comment": "\n     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->\n     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded\n     * <p/>\n     * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32OutputStream wraps itself in encode and decode\n     * mode over and over again.\n     *\n     * @param encoded\n     *            Base32 encoded data\n     * @param decoded\n     *            the data from above, but decoded\n     * @param chunkSize\n     *            chunk size (line-length) of the Base32 encoded data.\n     * @param separator\n     *            Line separator in the Base32 encoded data.\n     * @throws Exception\n     *             Usually signifies a bug in the Base32 commons-codec implementation.\n     ",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 68)",
            "(line 232,col 9)-(line 232,col 87)",
            "(line 233,col 9)-(line 235,col 9)",
            "(line 236,col 9)-(line 236,col 20)",
            "(line 237,col 9)-(line 237,col 46)",
            "(line 238,col 9)-(line 238,col 91)",
            "(line 241,col 9)-(line 241,col 46)",
            "(line 242,col 9)-(line 242,col 53)",
            "(line 243,col 9)-(line 245,col 9)",
            "(line 246,col 9)-(line 246,col 20)",
            "(line 247,col 9)-(line 247,col 39)",
            "(line 248,col 9)-(line 248,col 91)",
            "(line 251,col 9)-(line 251,col 46)",
            "(line 252,col 9)-(line 252,col 53)",
            "(line 253,col 9)-(line 256,col 9)",
            "(line 257,col 9)-(line 257,col 20)",
            "(line 258,col 9)-(line 258,col 39)",
            "(line 259,col 9)-(line 259,col 99)",
            "(line 262,col 9)-(line 262,col 46)",
            "(line 263,col 9)-(line 263,col 22)",
            "(line 264,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 270,col 9)",
            "(line 271,col 9)-(line 271,col 20)",
            "(line 272,col 9)-(line 272,col 39)",
            "(line 274,col 9)-(line 274,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds()",
        "snippet": "    @Test\n    public void testWriteOutOfBounds() throws Exception {\n        final byte[] buf = new byte[1024];\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final Base32OutputStream out = new Base32OutputStream(bout);\n\n        try {\n            out.write(buf, -1, 1);\n            fail(\"Expected Base32OutputStream.write(buf, -1, 1) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, 1, -1);\n            fail(\"Expected Base32OutputStream.write(buf, 1, -1) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, buf.length + 1, 0);\n            fail(\"Expected Base32OutputStream.write(buf, buf.length + 1, 0) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n\n        try {\n            out.write(buf, buf.length - 1, 2);\n            fail(\"Expected Base32OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException\");\n        } catch (final IndexOutOfBoundsException ioobe) {\n            // Expected\n        }\n        out.close();\n    }",
        "begin_line": 283,
        "end_line": 317,
        "comment": "\n     * Tests Base32OutputStream.write for expected IndexOutOfBoundsException conditions.\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 42)",
            "(line 286,col 9)-(line 286,col 71)",
            "(line 287,col 9)-(line 287,col 68)",
            "(line 289,col 9)-(line 294,col 9)",
            "(line 296,col 9)-(line 301,col 9)",
            "(line 303,col 9)-(line 308,col 9)",
            "(line 310,col 9)-(line 315,col 9)",
            "(line 316,col 9)-(line 316,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.binary.Base32OutputStreamTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
        "signature": "org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage()",
        "snippet": "    @Test\n    public void testWriteToNullCoverage() throws Exception {\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final Base32OutputStream out = new Base32OutputStream(bout);\n        try {\n            out.write(null, 0, 0);\n            fail(\"Expcted Base32OutputStream.write(null) to throw a NullPointerException\");\n        } catch (final NullPointerException e) {\n            // Expected\n        }\n        out.close();\n    }",
        "begin_line": 325,
        "end_line": 336,
        "comment": "\n     * Tests Base32OutputStream.write(null).\n     *\n     * @throws Exception\n     *             for some failure scenarios.\n     ",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 71)",
            "(line 328,col 9)-(line 328,col 68)",
            "(line 329,col 9)-(line 334,col 9)",
            "(line 335,col 9)-(line 335,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.constructString(int[])",
        "snippet": "    private String constructString(final int [] unicodeChars) {\n        final StringBuilder buffer = new StringBuilder();\n        if (unicodeChars != null) {\n            for (final int unicodeChar : unicodeChars) {\n                buffer.append((char)unicodeChar);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 50,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 57)",
            "(line 52,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 57,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testNullInput()",
        "snippet": "    @Test\n    public void testNullInput() throws Exception {\n        final QCodec qcodec = new QCodec();\n        assertNull(qcodec.doDecoding(null));\n        assertNull(qcodec.doEncoding(null));\n    }",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 43)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip()",
        "snippet": "    @Test\n    public void testUTF8RoundTrip() throws Exception {\n\n        final String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n        final String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n\n        final QCodec qcodec = new QCodec(CharEncoding.UTF_8);\n\n        assertEquals(\n            \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\",\n        qcodec.encode(ru_msg)\n        );\n        assertEquals(\"=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?=\", qcodec.encode(ch_msg));\n\n        assertEquals(ru_msg, qcodec.decode(qcodec.encode(ru_msg)));\n        assertEquals(ch_msg, qcodec.decode(qcodec.encode(ch_msg)));\n    }",
        "begin_line": 67,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 69)",
            "(line 71,col 9)-(line 71,col 74)",
            "(line 73,col 9)-(line 73,col 61)",
            "(line 75,col 9)-(line 78,col 10)",
            "(line 79,col 9)-(line 79,col 88)",
            "(line 81,col 9)-(line 81,col 67)",
            "(line 82,col 9)-(line 82,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode()",
        "snippet": "    @Test\n    public void testBasicEncodeDecode() throws Exception {\n        final QCodec qcodec = new QCodec();\n        final String plain = \"= Hello there =\\r\\n\";\n        final String encoded = qcodec.encode(plain);\n        assertEquals(\"Basic Q encoding test\",\n            \"=?UTF-8?Q?=3D Hello there =3D=0D=0A?=\", encoded);\n        assertEquals(\"Basic Q decoding test\",\n            plain, qcodec.decode(encoded));\n    }",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 43)",
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 52)",
            "(line 91,col 9)-(line 92,col 62)",
            "(line 93,col 9)-(line 94,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode()",
        "snippet": "    @Test\n    public void testUnsafeEncodeDecode() throws Exception {\n        final QCodec qcodec = new QCodec();\n        final String plain = \"?_=\\r\\n\";\n        final String encoded = qcodec.encode(plain);\n        assertEquals(\"Unsafe chars Q encoding test\",\n            \"=?UTF-8?Q?=3F=5F=3D=0D=0A?=\", encoded);\n        assertEquals(\"Unsafe chars Q decoding test\",\n            plain, qcodec.decode(encoded));\n    }",
        "begin_line": 97,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 43)",
            "(line 100,col 9)-(line 100,col 39)",
            "(line 101,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 103,col 52)",
            "(line 104,col 9)-(line 105,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull()",
        "snippet": "    @Test\n    public void testEncodeDecodeNull() throws Exception {\n        final QCodec qcodec = new QCodec();\n        assertNull(\"Null string Q encoding test\",\n            qcodec.encode((String)null));\n        assertNull(\"Null string Q decoding test\",\n            qcodec.decode((String)null));\n    }",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 114,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull()",
        "snippet": "    @Test\n    public void testEncodeStringWithNull() throws Exception {\n        final QCodec qcodec = new QCodec();\n        final String test = null;\n        final String result = qcodec.encode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 117,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 120,col 33)",
            "(line 121,col 9)-(line 121,col 63)",
            "(line 122,col 9)-(line 122,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull()",
        "snippet": "    @Test\n    public void testDecodeStringWithNull() throws Exception {\n        final QCodec qcodec = new QCodec();\n        final String test = null;\n        final String result = qcodec.decode( test );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 33)",
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeObjects()",
        "snippet": "    @Test\n    public void testEncodeObjects() throws Exception {\n        final QCodec qcodec = new QCodec();\n        final String plain = \"1+1 = 2\";\n        final String encoded = (String) qcodec.encode((Object) plain);\n        assertEquals(\"Basic Q encoding test\",\n            \"=?UTF-8?Q?1+1 =3D 2?=\", encoded);\n\n        final Object result = qcodec.encode((Object) null);\n        assertEquals( \"Encoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            qcodec.encode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (final EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 134,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 43)",
            "(line 137,col 9)-(line 137,col 39)",
            "(line 138,col 9)-(line 138,col 70)",
            "(line 139,col 9)-(line 140,col 46)",
            "(line 142,col 9)-(line 142,col 59)",
            "(line 143,col 9)-(line 143,col 81)",
            "(line 145,col 9)-(line 151,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testInvalidEncoding()",
        "snippet": "    @Test(expected=UnsupportedCharsetException.class)\n    public void testInvalidEncoding() {\n        new QCodec(\"NONSENSE\");\n    }",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testDecodeObjects()",
        "snippet": "    @Test\n    public void testDecodeObjects() throws Exception {\n        final QCodec qcodec = new QCodec();\n        final String decoded = \"=?UTF-8?Q?1+1 =3D 2?=\";\n        final String plain = (String) qcodec.decode((Object) decoded);\n        assertEquals(\"Basic Q decoding test\",\n            \"1+1 = 2\", plain);\n\n        final Object result = qcodec.decode((Object) null);\n        assertEquals( \"Decoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            qcodec.decode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (final DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 160,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 43)",
            "(line 163,col 9)-(line 163,col 55)",
            "(line 164,col 9)-(line 164,col 70)",
            "(line 165,col 9)-(line 166,col 30)",
            "(line 168,col 9)-(line 168,col 59)",
            "(line 169,col 9)-(line 169,col 81)",
            "(line 171,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks()",
        "snippet": "    @Test\n    public void testEncodeDecodeBlanks() throws Exception {\n        final String plain = \"Mind those pesky blanks\";\n        final String encoded1 = \"=?UTF-8?Q?Mind those pesky blanks?=\";\n        final String encoded2 = \"=?UTF-8?Q?Mind_those_pesky_blanks?=\";\n        final QCodec qcodec = new QCodec();\n        qcodec.setEncodeBlanks(false);\n        String s = qcodec.encode(plain);\n        assertEquals(\"Blanks encoding with the Q codec test\", encoded1, s);\n        qcodec.setEncodeBlanks(true);\n        s = qcodec.encode(plain);\n        assertEquals(\"Blanks encoding with the Q codec test\", encoded2, s);\n        s = qcodec.decode(encoded1);\n        assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n        s = qcodec.decode(encoded2);\n        assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n    }",
        "begin_line": 181,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 55)",
            "(line 184,col 9)-(line 184,col 70)",
            "(line 185,col 9)-(line 185,col 70)",
            "(line 186,col 9)-(line 186,col 43)",
            "(line 187,col 9)-(line 187,col 38)",
            "(line 188,col 9)-(line 188,col 40)",
            "(line 189,col 9)-(line 189,col 75)",
            "(line 190,col 9)-(line 190,col 37)",
            "(line 191,col 9)-(line 191,col 33)",
            "(line 192,col 9)-(line 192,col 75)",
            "(line 193,col 9)-(line 193,col 36)",
            "(line 194,col 9)-(line 194,col 72)",
            "(line 195,col 9)-(line 195,col 36)",
            "(line 196,col 9)-(line 196,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
        "signature": "org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy()",
        "snippet": "    @Test\n    public void testLetUsMakeCloverHappy() throws Exception {\n        final QCodec qcodec = new QCodec();\n        qcodec.setEncodeBlanks(true);\n        assertTrue(qcodec.isEncodeBlanks());\n        qcodec.setEncodeBlanks(false);\n        assertFalse(qcodec.isEncodeBlanks());\n    }",
        "begin_line": 200,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 43)",
            "(line 203,col 9)-(line 203,col 37)",
            "(line 204,col 9)-(line 204,col 44)",
            "(line 205,col 9)-(line 205,col 38)",
            "(line 206,col 9)-(line 206,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.validateState(org.apache.commons.codec.net.URLCodec)",
        "snippet": "    private void validateState(final URLCodec urlCodec) {\n        // no tests for now.\n    }",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.constructString(int[])",
        "snippet": "    private String constructString(final int [] unicodeChars) {\n        final StringBuilder buffer = new StringBuilder();\n        if (unicodeChars != null) {\n            for (final int unicodeChar : unicodeChars) {\n                buffer.append((char)unicodeChar);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 52,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 57)",
            "(line 54,col 9)-(line 58,col 9)",
            "(line 59,col 9)-(line 59,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip()",
        "snippet": "    @Test\n    public void testUTF8RoundTrip() throws Exception {\n\n        final String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n        final String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n\n        final URLCodec urlCodec = new URLCodec();\n        this.validateState(urlCodec);\n\n        assertEquals(\n            \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\",\n            urlCodec.encode(ru_msg, CharEncoding.UTF_8)\n        );\n        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, CharEncoding.UTF_8));\n\n        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 62,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 69)",
            "(line 66,col 9)-(line 66,col 74)",
            "(line 68,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 71,col 9)-(line 74,col 10)",
            "(line 75,col 9)-(line 75,col 96)",
            "(line 77,col 9)-(line 77,col 111)",
            "(line 78,col 9)-(line 78,col 111)",
            "(line 79,col 9)-(line 79,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode()",
        "snippet": "    @Test\n    public void testBasicEncodeDecode() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String plain = \"Hello there!\";\n        final String encoded = urlCodec.encode(plain);\n        assertEquals(\"Basic URL encoding test\",\n            \"Hello+there%21\", encoded);\n        assertEquals(\"Basic URL decoding test\",\n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 82,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 49)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 88,col 39)",
            "(line 89,col 9)-(line 90,col 45)",
            "(line 91,col 9)-(line 91,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode()",
        "snippet": "    @Test\n    public void testSafeCharEncodeDecode() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String plain = \"abc123_-.*\";\n        final String encoded = urlCodec.encode(plain);\n        assertEquals(\"Safe chars URL encoding test\",\n            plain, encoded);\n        assertEquals(\"Safe chars URL decoding test\",\n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 95,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 49)",
            "(line 98,col 9)-(line 98,col 42)",
            "(line 99,col 9)-(line 99,col 54)",
            "(line 100,col 9)-(line 101,col 28)",
            "(line 102,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 104,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode()",
        "snippet": "    @Test\n    public void testUnsafeEncodeDecode() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String plain = \"~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n        final String encoded = urlCodec.encode(plain);\n        assertEquals(\"Unsafe chars URL encoding test\",\n            \"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\", encoded);\n        assertEquals(\"Unsafe chars URL decoding test\",\n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 108,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 49)",
            "(line 111,col 9)-(line 111,col 56)",
            "(line 112,col 9)-(line 112,col 54)",
            "(line 113,col 9)-(line 114,col 91)",
            "(line 115,col 9)-(line 116,col 45)",
            "(line 117,col 9)-(line 117,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull()",
        "snippet": "    @Test\n    public void testEncodeDecodeNull() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        assertNull(\"Null string URL encoding test\",\n            urlCodec.encode((String)null));\n        assertNull(\"Null string URL decoding test\",\n            urlCodec.decode((String)null));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 121,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 49)",
            "(line 124,col 9)-(line 125,col 43)",
            "(line 126,col 9)-(line 127,col 43)",
            "(line 128,col 9)-(line 128,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid()",
        "snippet": "    @Test\n    public void testDecodeInvalid() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        try {\n            urlCodec.decode(\"%\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            urlCodec.decode(\"%A\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            // Bad 1st char after %\n            urlCodec.decode(\"%WW\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            // Bad 2nd char after %\n            urlCodec.decode(\"%0W\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 132,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 49)",
            "(line 135,col 9)-(line 140,col 9)",
            "(line 141,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 160,col 9)",
            "(line 161,col 9)-(line 161,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent()",
        "snippet": "    @Test\n    public void testDecodeInvalidContent() throws UnsupportedEncodingException, DecoderException {\n        final String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n        final URLCodec urlCodec = new URLCodec();\n        final byte[] input = ch_msg.getBytes(\"ISO-8859-1\");\n        final byte[] output = urlCodec.decode(input);\n        assertEquals(input.length, output.length);\n        for (int i = 0; i < input.length; i++) {\n            assertEquals(input[i], output[i]);\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 164,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 74)",
            "(line 167,col 9)-(line 167,col 49)",
            "(line 168,col 9)-(line 168,col 59)",
            "(line 169,col 9)-(line 169,col 53)",
            "(line 170,col 9)-(line 170,col 50)",
            "(line 171,col 9)-(line 173,col 9)",
            "(line 174,col 9)-(line 174,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeNull()",
        "snippet": "    @Test\n    public void testEncodeNull() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final byte[] plain = null;\n        final byte[] encoded = urlCodec.encode(plain);\n        assertEquals(\"Encoding a null string should return null\",\n            null, encoded);\n        this.validateState(urlCodec);\n    }",
        "begin_line": 177,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 49)",
            "(line 180,col 9)-(line 180,col 34)",
            "(line 181,col 9)-(line 181,col 54)",
            "(line 182,col 9)-(line 183,col 27)",
            "(line 184,col 9)-(line 184,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet()",
        "snippet": "    @Test\n    public void testEncodeUrlWithNullBitSet() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String plain = \"Hello there!\";\n        final String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(Charsets.UTF_8)));\n        assertEquals(\"Basic URL encoding test\",\n            \"Hello+there%21\", encoded);\n        assertEquals(\"Basic URL decoding test\",\n            plain, urlCodec.decode(encoded));\n        this.validateState(urlCodec);\n    }",
        "begin_line": 187,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 49)",
            "(line 190,col 9)-(line 190,col 44)",
            "(line 191,col 9)-(line 191,col 101)",
            "(line 192,col 9)-(line 193,col 39)",
            "(line 194,col 9)-(line 195,col 45)",
            "(line 196,col 9)-(line 196,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray()",
        "snippet": "    @Test\n    public void testDecodeWithNullArray() throws Exception {\n        final byte[] plain = null;\n        final byte[] result = URLCodec.decodeUrl( plain );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 199,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 34)",
            "(line 202,col 9)-(line 202,col 58)",
            "(line 203,col 9)-(line 203,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull()",
        "snippet": "    @Test\n    public void testEncodeStringWithNull() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String test = null;\n        final String result = urlCodec.encode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 206,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 49)",
            "(line 209,col 9)-(line 209,col 33)",
            "(line 210,col 9)-(line 210,col 65)",
            "(line 211,col 9)-(line 211,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull()",
        "snippet": "    @Test\n    public void testDecodeStringWithNull() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String test = null;\n        final String result = urlCodec.decode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 214,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 49)",
            "(line 217,col 9)-(line 217,col 33)",
            "(line 218,col 9)-(line 218,col 65)",
            "(line 219,col 9)-(line 219,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testEncodeObjects()",
        "snippet": "    @Test\n    public void testEncodeObjects() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String plain = \"Hello there!\";\n        String encoded = (String) urlCodec.encode((Object) plain);\n        assertEquals(\"Basic URL encoding test\",\n            \"Hello+there%21\", encoded);\n\n        final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n        final byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n        encoded = new String(encodedBA);\n        assertEquals(\"Basic URL encoding test\",\n            \"Hello+there%21\", encoded);\n\n        final Object result = urlCodec.encode((Object) null);\n        assertEquals( \"Encoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            urlCodec.encode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (final EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 222,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 49)",
            "(line 225,col 9)-(line 225,col 44)",
            "(line 226,col 9)-(line 226,col 66)",
            "(line 227,col 9)-(line 228,col 39)",
            "(line 230,col 9)-(line 230,col 62)",
            "(line 231,col 9)-(line 231,col 76)",
            "(line 232,col 9)-(line 232,col 40)",
            "(line 233,col 9)-(line 234,col 39)",
            "(line 236,col 9)-(line 236,col 61)",
            "(line 237,col 9)-(line 237,col 81)",
            "(line 239,col 9)-(line 245,col 9)",
            "(line 246,col 9)-(line 246,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding()",
        "snippet": "    @Test\n    public void testInvalidEncoding() {\n        final URLCodec urlCodec = new URLCodec(\"NONSENSE\");\n        final String plain = \"Hello there!\";\n        try {\n            urlCodec.encode(plain);\n            fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n        } catch (final EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        try {\n            urlCodec.decode(plain);\n            fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n        } catch (final DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 249,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 59)",
            "(line 252,col 9)-(line 252,col 44)",
            "(line 253,col 9)-(line 258,col 9)",
            "(line 259,col 9)-(line 264,col 9)",
            "(line 265,col 9)-(line 265,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDecodeObjects()",
        "snippet": "    @Test\n    public void testDecodeObjects() throws Exception {\n        final URLCodec urlCodec = new URLCodec();\n        final String plain = \"Hello+there%21\";\n        String decoded = (String) urlCodec.decode((Object) plain);\n        assertEquals(\"Basic URL decoding test\",\n            \"Hello there!\", decoded);\n\n        final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n        final byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n        decoded = new String(decodedBA);\n        assertEquals(\"Basic URL decoding test\",\n            \"Hello there!\", decoded);\n\n        final Object result = urlCodec.decode((Object) null);\n        assertEquals( \"Decoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            urlCodec.decode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (final DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n        this.validateState(urlCodec);\n    }",
        "begin_line": 268,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 49)",
            "(line 271,col 9)-(line 271,col 46)",
            "(line 272,col 9)-(line 272,col 66)",
            "(line 273,col 9)-(line 274,col 37)",
            "(line 276,col 9)-(line 276,col 62)",
            "(line 277,col 9)-(line 277,col 76)",
            "(line 278,col 9)-(line 278,col 40)",
            "(line 279,col 9)-(line 280,col 37)",
            "(line 282,col 9)-(line 282,col 61)",
            "(line 283,col 9)-(line 283,col 81)",
            "(line 285,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 292,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.URLCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
        "signature": "org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding()",
        "snippet": "    @Test\n    public void testDefaultEncoding() throws Exception {\n        final String plain = \"Hello there!\";\n        final URLCodec urlCodec = new URLCodec(\"UnicodeBig\");\n        urlCodec.encode(plain); // To work around a weird quirk in Java 1.2.2\n        final String encoded1 = urlCodec.encode(plain, \"UnicodeBig\");\n        final String encoded2 = urlCodec.encode(plain);\n        assertEquals(encoded1, encoded2);\n        this.validateState(urlCodec);\n    }",
        "begin_line": 295,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 44)",
            "(line 298,col 9)-(line 298,col 61)",
            "(line 299,col 9)-(line 299,col 31)",
            "(line 300,col 9)-(line 300,col 69)",
            "(line 301,col 9)-(line 301,col 55)",
            "(line 302,col 9)-(line 302,col 41)",
            "(line 303,col 9)-(line 303,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.UtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/UtilsTest.java",
        "signature": "org.apache.commons.codec.net.UtilsTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        new Utils();\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n     * to restrict instantiation right now.\n     ",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.constructString(int[])",
        "snippet": "    private String constructString(final int [] unicodeChars) {\n        final StringBuilder buffer = new StringBuilder();\n        if (unicodeChars != null) {\n            for (final int unicodeChar : unicodeChars) {\n                buffer.append((char)unicodeChar);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 46,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 57)",
            "(line 48,col 9)-(line 52,col 9)",
            "(line 53,col 9)-(line 53,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip()",
        "snippet": "    @Test\n    public void testUTF8RoundTrip() throws Exception {\n\n        final String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n        final String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n\n        assertEquals(\n            \"=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82\",\n        qpcodec.encode(ru_msg, CharEncoding.UTF_8)\n        );\n        assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, CharEncoding.UTF_8));\n\n        assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n        assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n    }",
        "begin_line": 56,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 69)",
            "(line 60,col 9)-(line 60,col 74)",
            "(line 62,col 9)-(line 62,col 72)",
            "(line 64,col 9)-(line 67,col 10)",
            "(line 68,col 9)-(line 68,col 95)",
            "(line 70,col 9)-(line 70,col 109)",
            "(line 71,col 9)-(line 71,col 109)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode()",
        "snippet": "    @Test\n    public void testBasicEncodeDecode() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String plain = \"= Hello there =\\r\\n\";\n        final String encoded = qpcodec.encode(plain);\n        assertEquals(\"Basic quoted-printable encoding test\",\n            \"=3D Hello there =3D=0D=0A\", encoded);\n        assertEquals(\"Basic quoted-printable decoding test\",\n            plain, qpcodec.decode(encoded));\n    }",
        "begin_line": 74,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 72)",
            "(line 77,col 9)-(line 77,col 51)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 82,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode()",
        "snippet": "    @Test\n    public void testSafeCharEncodeDecode() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String plain = \"abc123_-.*~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n        final String encoded = qpcodec.encode(plain);\n        assertEquals(\"Safe chars quoted-printable encoding test\",\n            plain, encoded);\n        assertEquals(\"Safe chars quoted-printable decoding test\",\n            plain, qpcodec.decode(encoded));\n    }",
        "begin_line": 85,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 72)",
            "(line 88,col 9)-(line 88,col 66)",
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 91,col 28)",
            "(line 92,col 9)-(line 93,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode()",
        "snippet": "    @Test\n    public void testUnsafeEncodeDecode() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String plain = \"=\\r\\n\";\n        final String encoded = qpcodec.encode(plain);\n        assertEquals(\"Unsafe chars quoted-printable encoding test\",\n            \"=3D=0D=0A\", encoded);\n        assertEquals(\"Unsafe chars quoted-printable decoding test\",\n            plain, qpcodec.decode(encoded));\n    }",
        "begin_line": 97,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 72)",
            "(line 100,col 9)-(line 100,col 37)",
            "(line 101,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 105,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull()",
        "snippet": "    @Test\n    public void testEncodeDecodeNull() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        assertNull(\"Null string quoted-printable encoding test\",\n            qpcodec.encode((String)null));\n        assertNull(\"Null string quoted-printable decoding test\",\n            qpcodec.decode((String)null));\n    }",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 72)",
            "(line 111,col 9)-(line 112,col 42)",
            "(line 113,col 9)-(line 114,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid()",
        "snippet": "    @Test\n    public void testDecodeInvalid() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        try {\n            qpcodec.decode(\"=\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            qpcodec.decode(\"=A\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n        try {\n            qpcodec.decode(\"=WW\");\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected. Move on\n        }\n    }",
        "begin_line": 118,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 72)",
            "(line 121,col 9)-(line 126,col 9)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 138,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull()",
        "snippet": "    @Test\n    public void testEncodeNull() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final byte[] plain = null;\n        final byte[] encoded = qpcodec.encode(plain);\n        assertEquals(\"Encoding a null string should return null\",\n            null, encoded);\n    }",
        "begin_line": 141,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 143,col 72)",
            "(line 144,col 9)-(line 144,col 34)",
            "(line 145,col 9)-(line 145,col 53)",
            "(line 146,col 9)-(line 147,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet()",
        "snippet": "    @Test\n    public void testEncodeUrlWithNullBitSet() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String plain = \"1+1 = 2\";\n        final String encoded = new String(QuotedPrintableCodec.\n            encodeQuotedPrintable(null, plain.getBytes(Charsets.UTF_8)));\n        assertEquals(\"Basic quoted-printable encoding test\",\n            \"1+1 =3D 2\", encoded);\n        assertEquals(\"Basic quoted-printable decoding test\",\n            plain, qpcodec.decode(encoded));\n\n    }",
        "begin_line": 150,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 39)",
            "(line 154,col 9)-(line 155,col 73)",
            "(line 156,col 9)-(line 157,col 34)",
            "(line 158,col 9)-(line 159,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray()",
        "snippet": "    @Test\n    public void testDecodeWithNullArray() throws Exception {\n        final byte[] plain = null;\n        final byte[] result = QuotedPrintableCodec.decodeQuotedPrintable( plain );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 163,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 82)",
            "(line 167,col 9)-(line 167,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull()",
        "snippet": "    @Test\n    public void testEncodeStringWithNull() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String test = null;\n        final String result = qpcodec.encode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 170,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 72)",
            "(line 173,col 9)-(line 173,col 33)",
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull()",
        "snippet": "    @Test\n    public void testDecodeStringWithNull() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String test = null;\n        final String result = qpcodec.decode( test, \"charset\" );\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 178,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 72)",
            "(line 181,col 9)-(line 181,col 33)",
            "(line 182,col 9)-(line 182,col 64)",
            "(line 183,col 9)-(line 183,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects()",
        "snippet": "    @Test\n    public void testEncodeObjects() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String plain = \"1+1 = 2\";\n        String encoded = (String) qpcodec.encode((Object) plain);\n        assertEquals(\"Basic quoted-printable encoding test\",\n            \"1+1 =3D 2\", encoded);\n\n        final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n        final byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA);\n        encoded = new String(encodedBA);\n        assertEquals(\"Basic quoted-printable encoding test\",\n            \"1+1 =3D 2\", encoded);\n\n        final Object result = qpcodec.encode((Object) null);\n        assertEquals( \"Encoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            qpcodec.encode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (final EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 186,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 72)",
            "(line 189,col 9)-(line 189,col 39)",
            "(line 190,col 9)-(line 190,col 65)",
            "(line 191,col 9)-(line 192,col 34)",
            "(line 194,col 9)-(line 194,col 62)",
            "(line 195,col 9)-(line 195,col 75)",
            "(line 196,col 9)-(line 196,col 40)",
            "(line 197,col 9)-(line 198,col 34)",
            "(line 200,col 9)-(line 200,col 60)",
            "(line 201,col 9)-(line 201,col 81)",
            "(line 203,col 9)-(line 209,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testInvalidEncoding()",
        "snippet": "    @Test(expected=UnsupportedCharsetException.class)\n    public void testInvalidEncoding() {\n        new QuotedPrintableCodec(\"NONSENSE\");\n    }",
        "begin_line": 212,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects()",
        "snippet": "    @Test\n    public void testDecodeObjects() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        final String plain = \"1+1 =3D 2\";\n        String decoded = (String) qpcodec.decode((Object) plain);\n        assertEquals(\"Basic quoted-printable decoding test\",\n            \"1+1 = 2\", decoded);\n\n        final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n        final byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA);\n        decoded = new String(decodedBA);\n        assertEquals(\"Basic quoted-printable decoding test\",\n            \"1+1 = 2\", decoded);\n\n        final Object result = qpcodec.decode((Object) null);\n        assertEquals( \"Decoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            qpcodec.decode( dObj );\n            fail( \"Trying to url encode a Double object should cause an exception.\");\n        } catch (final DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 217,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 72)",
            "(line 220,col 9)-(line 220,col 41)",
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 223,col 32)",
            "(line 225,col 9)-(line 225,col 62)",
            "(line 226,col 9)-(line 226,col 75)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 228,col 9)-(line 229,col 32)",
            "(line 231,col 9)-(line 231,col 60)",
            "(line 232,col 9)-(line 232,col 81)",
            "(line 234,col 9)-(line 240,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding()",
        "snippet": "    @Test\n    public void testDefaultEncoding() throws Exception {\n        final String plain = \"Hello there!\";\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(\"UnicodeBig\");\n        qpcodec.encode(plain); // To work around a weird quirk in Java 1.2.2\n        final String encoded1 = qpcodec.encode(plain, \"UnicodeBig\");\n        final String encoded2 = qpcodec.encode(plain);\n        assertEquals(encoded1, encoded2);\n    }",
        "begin_line": 243,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 44)",
            "(line 246,col 9)-(line 246,col 84)",
            "(line 247,col 9)-(line 247,col 30)",
            "(line 248,col 9)-(line 248,col 68)",
            "(line 249,col 9)-(line 249,col 54)",
            "(line 250,col 9)-(line 250,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode()",
        "snippet": "    @Test\n    public void testSoftLineBreakDecode() throws Exception {\n        final String qpdata = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\nmathematics is the most beautiful branch of philosophy.\";\n        final String expected = \"If you believe that truth=beauty, then surely mathematics is the most beautiful branch of philosophy.\";\n\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n        assertEquals(expected, qpcodec.decode(qpdata));\n\n        final String encoded = qpcodec.encode(expected);\n        assertEquals(expected, qpcodec.decode(encoded));\n    }",
        "begin_line": 253,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 143)",
            "(line 256,col 9)-(line 256,col 136)",
            "(line 258,col 9)-(line 258,col 72)",
            "(line 259,col 9)-(line 259,col 55)",
            "(line 261,col 9)-(line 261,col 56)",
            "(line 262,col 9)-(line 262,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode()",
        "snippet": "    @Test\n    public void testSoftLineBreakEncode() throws Exception {\n        final String qpdata = \"If you believe that truth=3Dbeauty, then surely mathematics is the most b=\\r\\neautiful branch of philosophy.\";\n        final String expected = \"If you believe that truth=beauty, then surely mathematics is the most beautiful branch of philosophy.\";\n\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n        assertEquals(qpdata, qpcodec.encode(expected));\n\n        final String decoded = qpcodec.decode(qpdata);\n        assertEquals(qpdata, qpcodec.encode(decoded));\n    }",
        "begin_line": 265,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 141)",
            "(line 268,col 9)-(line 268,col 136)",
            "(line 270,col 9)-(line 270,col 76)",
            "(line 271,col 9)-(line 271,col 55)",
            "(line 273,col 9)-(line 273,col 54)",
            "(line 274,col 9)-(line 274,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF()",
        "snippet": "    @Test\n    public void testSkipNotEncodedCRLF() throws Exception {\n        final String qpdata = \"CRLF in an\\n encoded text should be=20=\\r\\n\\rskipped in the\\r decoding.\";\n        final String expected = \"CRLF in an encoded text should be skipped in the decoding.\";\n\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n        assertEquals(expected, qpcodec.decode(qpdata));\n\n        final String encoded = qpcodec.encode(expected);\n        assertEquals(expected, qpcodec.decode(encoded));\n    }",
        "begin_line": 277,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 104)",
            "(line 280,col 9)-(line 280,col 93)",
            "(line 282,col 9)-(line 282,col 76)",
            "(line 283,col 9)-(line 283,col 55)",
            "(line 285,col 9)-(line 285,col 56)",
            "(line 286,col 9)-(line 286,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial()",
        "snippet": "    @Test\n    public void testTrailingSpecial() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n\n        String plain =\"This is a example of a quoted-printable text file. This might contain sp=cial chars.\";\n        String expected = \"This is a example of a quoted-printable text file. This might contain sp=3D=\\r\\ncial chars.\";\n        assertEquals(expected, qpcodec.encode(plain));\n\n        plain =\"This is a example of a quoted-printable text file. This might contain ta\\tbs as well.\";\n        expected = \"This is a example of a quoted-printable text file. This might contain ta=09=\\r\\nbs as well.\";\n        assertEquals(expected, qpcodec.encode(plain));\n    }",
        "begin_line": 289,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 76)",
            "(line 293,col 9)-(line 293,col 109)",
            "(line 294,col 9)-(line 294,col 120)",
            "(line 295,col 9)-(line 295,col 54)",
            "(line 297,col 9)-(line 297,col 103)",
            "(line 298,col 9)-(line 298,col 113)",
            "(line 299,col 9)-(line 299,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak()",
        "snippet": "    @Test\n    public void testUltimateSoftBreak() throws Exception {\n        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n\n        String plain =\"This is a example of a quoted-printable text file. There is no end to it\\t\";\n        String expected = \"This is a example of a quoted-printable text file. There is no end to i=\\r\\nt=09\";\n\n        assertEquals(expected, qpcodec.encode(plain));\n\n        plain =\"This is a example of a quoted-printable text file. There is no end to it \";\n        expected = \"This is a example of a quoted-printable text file. There is no end to i=\\r\\nt=20\";\n\n        assertEquals(expected, qpcodec.encode(plain));\n\n        // whitespace before soft break\n        plain =\"This is a example of a quoted-printable text file. There is no end to   \";\n        expected = \"This is a example of a quoted-printable text file. There is no end to=20=\\r\\n =20\";\n\n        assertEquals(expected, qpcodec.encode(plain));\n\n        // non-printable character before soft break\n        plain =\"This is a example of a quoted-printable text file. There is no end to=  \";\n        expected = \"This is a example of a quoted-printable text file. There is no end to=3D=\\r\\n =20\";\n\n        assertEquals(expected, qpcodec.encode(plain));\n    }",
        "begin_line": 302,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 76)",
            "(line 306,col 9)-(line 306,col 99)",
            "(line 307,col 9)-(line 307,col 109)",
            "(line 309,col 9)-(line 309,col 54)",
            "(line 311,col 9)-(line 311,col 91)",
            "(line 312,col 9)-(line 312,col 102)",
            "(line 314,col 9)-(line 314,col 54)",
            "(line 317,col 9)-(line 317,col 90)",
            "(line 318,col 9)-(line 318,col 103)",
            "(line 320,col 9)-(line 320,col 54)",
            "(line 323,col 9)-(line 323,col 90)",
            "(line 324,col 9)-(line 324,col 103)",
            "(line 326,col 9)-(line 326,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.QuotedPrintableCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
        "signature": "org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes()",
        "snippet": "    @Test\n    public void testFinalBytes() throws Exception {\n        // whitespace, but does not need to be encoded\n        final String plain =\"This is a example of a quoted=printable text file. There is no tt\";\n        final String expected = \"This is a example of a quoted=3Dprintable text file. There is no tt\";\n\n        assertEquals(expected, new QuotedPrintableCodec(true).encode(plain));\n    }",
        "begin_line": 329,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 96)",
            "(line 333,col 9)-(line 333,col 102)",
            "(line 335,col 9)-(line 335,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522TestCodec.doDecoding(byte[])",
        "snippet": "        @Override\n        protected byte[] doDecoding(final byte[] bytes) {\n            return bytes;\n        }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 13)-(line 38,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522TestCodec.doEncoding(byte[])",
        "snippet": "        @Override\n        protected byte[] doEncoding(final byte[] bytes) {\n            return bytes;\n        }",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 13)-(line 43,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.RFC1522TestCodec.getEncoding()",
        "snippet": "        @Override\n        protected String getEncoding() {\n            return \"T\";\n        }",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 13)-(line 48,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.testNullInput()",
        "snippet": "    @Test\n    public void testNullInput() throws Exception {\n        final RFC1522TestCodec testcodec = new RFC1522TestCodec();\n        assertNull(testcodec.decodeText(null));\n        assertNull(testcodec.encodeText(null, CharEncoding.UTF_8));\n    }",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 66)",
            "(line 56,col 9)-(line 56,col 47)",
            "(line 57,col 9)-(line 57,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException(java.lang.String)",
        "snippet": "    private void assertExpectedDecoderException(final String s) throws Exception {\n        final RFC1522TestCodec testcodec = new RFC1522TestCodec();\n        try {\n            testcodec.decodeText(s);\n            fail(\"DecoderException should have been thrown\");\n        } catch (final DecoderException e) {\n            // Expected.\n        }\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 66)",
            "(line 62,col 9)-(line 67,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.RFC1522CodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
        "signature": "org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid()",
        "snippet": "    @Test\n    public void testDecodeInvalid() throws Exception {\n        assertExpectedDecoderException(\"whatever\");\n        assertExpectedDecoderException(\"=?\");\n        assertExpectedDecoderException(\"?=\");\n        assertExpectedDecoderException(\"==\");\n        assertExpectedDecoderException(\"=??=\");\n        assertExpectedDecoderException(\"=?stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8??=\");\n        assertExpectedDecoderException(\"=?UTF-8?stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8?T?stuff\");\n        assertExpectedDecoderException(\"=??T?stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8??stuff?=\");\n        assertExpectedDecoderException(\"=?UTF-8?W?stuff?=\");\n    }",
        "begin_line": 70,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 45)",
            "(line 74,col 9)-(line 74,col 45)",
            "(line 75,col 9)-(line 75,col 45)",
            "(line 76,col 9)-(line 76,col 47)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 79,col 58)",
            "(line 80,col 9)-(line 80,col 58)",
            "(line 81,col 9)-(line 81,col 55)",
            "(line 82,col 9)-(line 82,col 59)",
            "(line 83,col 9)-(line 83,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.constructString(int[])",
        "snippet": "    private String constructString(final int[] unicodeChars) {\n        final StringBuilder buffer = new StringBuilder();\n        if (unicodeChars != null) {\n            for (final int unicodeChar : unicodeChars) {\n                buffer.append((char) unicodeChar);\n            }\n        }\n        return buffer.toString();\n    }",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 57)",
            "(line 46,col 9)-(line 50,col 9)",
            "(line 51,col 9)-(line 51,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testNullInput()",
        "snippet": "    @Test\n    public void testNullInput() throws Exception {\n        final BCodec bcodec = new BCodec();\n        assertNull(bcodec.doDecoding(null));\n        assertNull(bcodec.doEncoding(null));\n    }",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 43)",
            "(line 57,col 9)-(line 57,col 44)",
            "(line 58,col 9)-(line 58,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip()",
        "snippet": "    @Test\n    public void testUTF8RoundTrip() throws Exception {\n\n        final String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n        final String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n\n        final BCodec bcodec = new BCodec(CharEncoding.UTF_8);\n\n        assertEquals(\"=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?=\", bcodec.encode(ru_msg));\n        assertEquals(\"=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?=\", bcodec.encode(ch_msg));\n\n        assertEquals(ru_msg, bcodec.decode(bcodec.encode(ru_msg)));\n        assertEquals(ch_msg, bcodec.decode(bcodec.encode(ch_msg)));\n    }",
        "begin_line": 61,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 69)",
            "(line 65,col 9)-(line 65,col 74)",
            "(line 67,col 9)-(line 67,col 61)",
            "(line 69,col 9)-(line 69,col 88)",
            "(line 70,col 9)-(line 70,col 80)",
            "(line 72,col 9)-(line 72,col 67)",
            "(line 73,col 9)-(line 73,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode()",
        "snippet": "    @Test\n    public void testBasicEncodeDecode() throws Exception {\n        final BCodec bcodec = new BCodec();\n        final String plain = \"Hello there\";\n        final String encoded = bcodec.encode(plain);\n        assertEquals(\"Basic B encoding test\", \"=?UTF-8?B?SGVsbG8gdGhlcmU=?=\", encoded);\n        assertEquals(\"Basic B decoding test\", plain, bcodec.decode(encoded));\n    }",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 43)",
            "(line 79,col 9)-(line 79,col 43)",
            "(line 80,col 9)-(line 80,col 52)",
            "(line 81,col 9)-(line 81,col 87)",
            "(line 82,col 9)-(line 82,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull()",
        "snippet": "    @Test\n    public void testEncodeDecodeNull() throws Exception {\n        final BCodec bcodec = new BCodec();\n        assertNull(\"Null string B encoding test\", bcodec.encode((String) null));\n        assertNull(\"Null string B decoding test\", bcodec.decode((String) null));\n    }",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 43)",
            "(line 88,col 9)-(line 88,col 80)",
            "(line 89,col 9)-(line 89,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull()",
        "snippet": "    @Test\n    public void testEncodeStringWithNull() throws Exception {\n        final BCodec bcodec = new BCodec();\n        final String test = null;\n        final String result = bcodec.encode(test, \"charset\");\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 92,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 43)",
            "(line 95,col 9)-(line 95,col 33)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 97,col 9)-(line 97,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull()",
        "snippet": "    @Test\n    public void testDecodeStringWithNull() throws Exception {\n        final BCodec bcodec = new BCodec();\n        final String test = null;\n        final String result = bcodec.decode(test);\n        assertEquals(\"Result should be null\", null, result);\n    }",
        "begin_line": 100,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 43)",
            "(line 103,col 9)-(line 103,col 33)",
            "(line 104,col 9)-(line 104,col 50)",
            "(line 105,col 9)-(line 105,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testEncodeObjects()",
        "snippet": "    @Test\n    public void testEncodeObjects() throws Exception {\n        final BCodec bcodec = new BCodec();\n        final String plain = \"what not\";\n        final String encoded = (String) bcodec.encode((Object) plain);\n\n        assertEquals(\"Basic B encoding test\", \"=?UTF-8?B?d2hhdCBub3Q=?=\", encoded);\n\n        final Object result = bcodec.encode((Object) null);\n        assertEquals(\"Encoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            bcodec.encode(dObj);\n            fail(\"Trying to url encode a Double object should cause an exception.\");\n        } catch (final EncoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 108,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 111,col 40)",
            "(line 112,col 9)-(line 112,col 70)",
            "(line 114,col 9)-(line 114,col 83)",
            "(line 116,col 9)-(line 116,col 59)",
            "(line 117,col 9)-(line 117,col 80)",
            "(line 119,col 9)-(line 125,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testInvalidEncoding()",
        "snippet": "    @Test(expected=UnsupportedCharsetException.class)\n    public void testInvalidEncoding() {\n        new BCodec(\"NONSENSE\");\n    }",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.net.BCodecTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
        "signature": "org.apache.commons.codec.net.BCodecTest.testDecodeObjects()",
        "snippet": "    @Test\n    public void testDecodeObjects() throws Exception {\n        final BCodec bcodec = new BCodec();\n        final String decoded = \"=?UTF-8?B?d2hhdCBub3Q=?=\";\n        final String plain = (String) bcodec.decode((Object) decoded);\n        assertEquals(\"Basic B decoding test\", \"what not\", plain);\n\n        final Object result = bcodec.decode((Object) null);\n        assertEquals(\"Decoding a null Object should return null\", null, result);\n\n        try {\n            final Object dObj = new Double(3.0);\n            bcodec.decode(dObj);\n            fail(\"Trying to url encode a Double object should cause an exception.\");\n        } catch (final DecoderException ee) {\n            // Exception expected, test segment passes.\n        }\n    }",
        "begin_line": 133,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 43)",
            "(line 136,col 9)-(line 136,col 58)",
            "(line 137,col 9)-(line 137,col 70)",
            "(line 138,col 9)-(line 138,col 65)",
            "(line 140,col 9)-(line 140,col 59)",
            "(line 141,col 9)-(line 141,col 80)",
            "(line 143,col 9)-(line 149,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.assertEncodings(java.lang.String[]...)",
        "snippet": "    private void assertEncodings(final String[]... testValues) throws EncoderException {\n        for (final String[] arr : testValues) {\n            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n        }\n    }",
        "begin_line": 44,
        "end_line": 48,
        "comment": "\n     * Takes an array of String pairs where each pair's first element is the input and the second element the expected\n     * encoding.\n     *\n     * @param testValues\n     *            an array of String pairs where each pair's first element is the input and the second element the\n     *            expected encoding.\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 45,col 9)-(line 47,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.createStringEncoder()",
        "snippet": "    @Override\n    protected Nysiis createStringEncoder() {\n        return new Nysiis();\n    }",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.encodeAll(java.lang.String[], java.lang.String)",
        "snippet": "    private void encodeAll(final String[] strings, final String expectedEncoding) {\n        for (final String string : strings) {\n            Assert.assertEquals(\"Problem with \" + string, expectedEncoding, getStringEncoder().encode(string));\n        }\n    }",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 58,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testBran()",
        "snippet": "    @Test\n    public void testBran() {\n        encodeAll(new String[] { \"Brian\", \"Brown\", \"Brun\" }, \"BRAN\");\n    }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testCap()",
        "snippet": "    @Test\n    public void testCap() {\n        this.encodeAll(new String[] { \"Capp\", \"Cope\", \"Copp\", \"Kipp\" }, \"CAP\");\n    }",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testDad()",
        "snippet": "    @Test\n    public void testDad() {\n        // Data Quality and Record Linkage Techniques P.121 claims this is DAN,\n        // but it should be DAD, verified also with dropby.com\n        this.encodeAll(new String[] { \"Dent\" }, \"DAD\");\n    }",
        "begin_line": 71,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testDan()",
        "snippet": "    @Test\n    public void testDan() {\n        this.encodeAll(new String[] { \"Dane\", \"Dean\", \"Dionne\" }, \"DAN\");\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testDropBy()",
        "snippet": "    @Test\n    public void testDropBy() throws EncoderException {\n        // Explanation of differences between this implementation and the one at dropby.com is\n        // prepended to the test string. The referenced rules refer to the outlined steps the\n        // class description for Nysiis.\n\n        this.assertEncodings(\n                // 1. Transcode first characters of name\n                new String[] { \"MACINTOSH\", \"MCANT\" },\n                // violates 4j: the second N should not be added, as the first\n                //              key char is already a N\n                new String[] { \"KNUTH\", \"NAT\" },           // Original: NNAT; modified: NATH\n                // O and E are transcoded to A because of rule 4a\n                // H also to A because of rule 4h\n                // the N gets mysteriously lost, maybe because of a wrongly implemented rule 4h\n                // that skips the next char in such a case?\n                // the remaining A is removed because of rule 7\n                new String[] { \"KOEHN\", \"CAN\" },           // Original: C\n                // violates 4j: see also KNUTH\n                new String[] { \"PHILLIPSON\", \"FALAPSAN\" }, // Original: FFALAP[SAN]\n                // violates 4j: see also KNUTH\n                new String[] { \"PFEISTER\", \"FASTAR\" },     // Original: FFASTA[R]\n                // violates 4j: see also KNUTH\n                new String[] { \"SCHOENHOEFT\", \"SANAFT\" },  // Original: SSANAF[T]\n                // 2. Transcode last characters of name:\n                new String[] { \"MCKEE\", \"MCY\" },\n                new String[] { \"MACKIE\", \"MCY\" },\n                new String[] { \"HEITSCHMIDT\", \"HATSNAD\" },\n                new String[] { \"BART\", \"BAD\" },\n                new String[] { \"HURD\", \"HAD\" },\n                new String[] { \"HUNT\", \"HAD\" },\n                new String[] { \"WESTERLUND\", \"WASTARLAD\" },\n                // 4. Transcode remaining characters by following these rules,\n                //    incrementing by one character each time:\n                new String[] { \"CASSTEVENS\", \"CASTAFAN\" },\n                new String[] { \"VASQUEZ\", \"VASG\" },\n                new String[] { \"FRAZIER\", \"FRASAR\" },\n                new String[] { \"BOWMAN\", \"BANAN\" },\n                new String[] { \"MCKNIGHT\", \"MCNAGT\" },\n                new String[] { \"RICKERT\", \"RACAD\" },\n                // violates 5: the last S is not removed\n                // when comparing to DEUTS, which is phonetically similar\n                // the result it also DAT, which is correct for DEUTSCH too imo\n                new String[] { \"DEUTSCH\", \"DAT\" },         // Original: DATS\n                new String[] { \"WESTPHAL\", \"WASTFAL\" },\n                // violates 4h: the H should be transcoded to S and thus ignored as\n                // the first key character is also S\n                new String[] { \"SHRIVER\", \"SRAVAR\" },      // Original: SHRAVA[R]\n                // same as KOEHN, the L gets mysteriously lost\n                new String[] { \"KUHL\", \"CAL\" },            // Original: C\n                new String[] { \"RAWSON\", \"RASAN\" },\n                // If last character is S, remove it\n                new String[] { \"JILES\", \"JAL\" },\n                // violates 6: if the last two characters are AY, remove A\n                new String[] { \"CARRAWAY\", \"CARY\" },       // Original: CARAY\n                new String[] { \"YAMADA\", \"YANAD\" });\n    }",
        "begin_line": 89,
        "end_line": 145,
        "comment": "\n     * Tests data gathered from around the internet.\n     *\n     * @see <a href=\"http://www.dropby.com/NYSIISTextStrings.html\">http://www.dropby.com/NYSIISTextStrings.html</a>\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 95,col 9)-(line 144,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testFal()",
        "snippet": "    @Test\n    public void testFal() {\n        this.encodeAll(new String[] { \"Phil\" }, \"FAL\");\n    }",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testOthers()",
        "snippet": "    @Test\n    public void testOthers() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"O'Daniel\", \"ODANAL\" },\n                new String[] { \"O'Donnel\", \"ODANAL\" },\n                new String[] { \"Cory\", \"CARY\" },\n                new String[] { \"Corey\", \"CARY\" },\n                new String[] { \"Kory\", \"CARY\" },\n                //\n                new String[] { \"FUZZY\", \"FASY\" });\n    }",
        "begin_line": 157,
        "end_line": 167,
        "comment": "\n     * Tests data gathered from around the internets.\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 159,col 9)-(line 166,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule1()",
        "snippet": "    @Test\n    public void testRule1() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"MACX\", \"MCX\" },\n                new String[] { \"KNX\", \"NX\" },\n                new String[] { \"KX\", \"CX\" },\n                new String[] { \"PHX\", \"FX\" },\n                new String[] { \"PFX\", \"FX\" },\n                new String[] { \"SCHX\", \"SX\" });\n    }",
        "begin_line": 174,
        "end_line": 183,
        "comment": "\n     * Tests rule 1: Translate first characters of name: MAC \u2192 MCC, KN \u2192 N, K \u2192 C, PH, PF \u2192 FF, SCH \u2192 SSS\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 182,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule2()",
        "snippet": "    @Test\n    public void testRule2() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"XEE\", \"XY\" },\n                new String[] { \"XIE\", \"XY\" },\n                new String[] { \"XDT\", \"XD\" },\n                new String[] { \"XRT\", \"XD\" },\n                new String[] { \"XRD\", \"XD\" },\n                new String[] { \"XNT\", \"XD\" },\n                new String[] { \"XND\", \"XD\" });\n    }",
        "begin_line": 190,
        "end_line": 200,
        "comment": "\n     * Tests rule 2: Translate last characters of name: EE \u2192 Y, IE \u2192 Y, DT, RT, RD, NT, ND \u2192 D\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 199,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule4Dot1()",
        "snippet": "    @Test\n    public void testRule4Dot1() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"XEV\", \"XAF\" },\n                new String[] { \"XAX\", \"XAX\" },\n                new String[] { \"XEX\", \"XAX\" },\n                new String[] { \"XIX\", \"XAX\" },\n                new String[] { \"XOX\", \"XAX\" },\n                new String[] { \"XUX\", \"XAX\" });\n    }",
        "begin_line": 207,
        "end_line": 216,
        "comment": "\n     * Tests rule 4.1: EV \u2192 AF else A, E, I, O, U \u2192 A\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 209,col 9)-(line 215,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule4Dot2()",
        "snippet": "    @Test\n    public void testRule4Dot2() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"XQ\", \"XG\" },\n                new String[] { \"XZ\", \"X\" },\n                new String[] { \"XM\", \"XN\" });\n    }",
        "begin_line": 223,
        "end_line": 229,
        "comment": "\n     * Tests rule 4.2: Q \u2192 G, Z \u2192 S, M \u2192 N\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 225,col 9)-(line 228,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule5()",
        "snippet": "    @Test\n    public void testRule5() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"XS\", \"X\" },\n                new String[] { \"XSS\", \"X\" });\n    }",
        "begin_line": 236,
        "end_line": 241,
        "comment": "\n     * Tests rule 5: If last character is S, remove it.\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 238,col 9)-(line 240,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule6()",
        "snippet": "    @Test\n    public void testRule6() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"XAY\", \"XY\" },\n                new String[] { \"XAYS\", \"XY\" }); // Rules 5, 6\n    }",
        "begin_line": 248,
        "end_line": 253,
        "comment": "\n     * Tests rule 6: If last characters are AY, replace with Y.\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 250,col 9)-(line 252,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testRule7()",
        "snippet": "    @Test\n    public void testRule7() throws EncoderException {\n        this.assertEncodings(\n                new String[] { \"XA\", \"X\" },\n                new String[] { \"XAS\", \"X\" }); // Rules 5, 7\n    }",
        "begin_line": 260,
        "end_line": 265,
        "comment": "\n     * Tests rule 7: If last character is A, remove it.\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 262,col 9)-(line 264,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testSnad()",
        "snippet": "    @Test\n    public void testSnad() {\n        // Data Quality and Record Linkage Techniques P.121 claims this is SNAT,\n        // but it should be SNAD\n        this.encodeAll(new String[] { \"Schmidt\" }, \"SNAD\");\n    }",
        "begin_line": 266,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testSnat()",
        "snippet": "    @Test\n    public void testSnat() {\n        this.encodeAll(new String[] { \"Smith\", \"Schmit\" }, \"SNAT\");\n    }",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testSpecialBranches()",
        "snippet": "    @Test\n    public void testSpecialBranches() {\n        this.encodeAll(new String[] { \"Kobwick\" }, \"CABWAC\");\n        this.encodeAll(new String[] { \"Kocher\" }, \"CACAR\");\n        this.encodeAll(new String[] { \"Fesca\" }, \"FASC\");\n        this.encodeAll(new String[] { \"Shom\" }, \"SAN\");\n        this.encodeAll(new String[] { \"Ohlo\" }, \"OL\");\n        this.encodeAll(new String[] { \"Uhu\" }, \"UH\");\n        this.encodeAll(new String[] { \"Um\" }, \"UN\");\n    }",
        "begin_line": 278,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 61)",
            "(line 281,col 9)-(line 281,col 59)",
            "(line 282,col 9)-(line 282,col 57)",
            "(line 283,col 9)-(line 283,col 55)",
            "(line 284,col 9)-(line 284,col 54)",
            "(line 285,col 9)-(line 285,col 53)",
            "(line 286,col 9)-(line 286,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testTranan()",
        "snippet": "    @Test\n    public void testTranan() {\n        this.encodeAll(new String[] { \"Trueman\", \"Truman\" }, \"TRANAN\");\n    }",
        "begin_line": 289,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.NysiisTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
        "signature": "org.apache.commons.codec.language.NysiisTest.testTrueVariant()",
        "snippet": "    @Test\n    public void testTrueVariant() {\n        final Nysiis encoder = new Nysiis(true);\n\n        final String encoded = encoder.encode(\"WESTERLUND\");\n        Assert.assertTrue(encoded.length() <= 6);\n        Assert.assertEquals(\"WASTAR\", encoded);\n    }",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 48)",
            "(line 298,col 9)-(line 298,col 60)",
            "(line 299,col 9)-(line 299,col 49)",
            "(line 300,col 9)-(line 300,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.createStringEncoder()",
        "snippet": "    @Override\n    protected ColognePhonetic createStringEncoder() {\n        return new ColognePhonetic();\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe()",
        "snippet": "    @Test\n    public void testAabjoe() throws EncoderException {\n        this.checkEncoding(\"01\", \"Aabjoe\");\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testAaclan()",
        "snippet": "    @Test\n    public void testAaclan() throws EncoderException {\n        this.checkEncoding(\"0856\", \"Aaclan\");\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122()",
        "snippet": "    @Test\n    public void testAychlmajrForCodec122() throws EncoderException {\n        this.checkEncoding(\"04567\", \"Aychlmajr\");\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     * Tests [CODEC-122]\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases()",
        "snippet": "    @Test\n    public void testEdgeCases() throws EncoderException {\n        final String[][] data = {\n            {\"a\", \"0\"},\n            {\"e\", \"0\"},\n            {\"i\", \"0\"},\n            {\"o\", \"0\"},\n            {\"u\", \"0\"},\n            {\"\\u00E4\", \"0\"}, // a-umlaut\n            {\"\\u00F6\", \"0\"}, // o-umlaut\n            {\"\\u00FC\", \"0\"}, // u-umlaut\n            {\"aa\", \"0\"},\n            {\"ha\", \"0\"},\n            {\"h\", \"\"},\n            {\"aha\", \"0\"},\n            {\"b\", \"1\"},\n            {\"p\", \"1\"},\n            {\"ph\", \"3\"},\n            {\"f\", \"3\"},\n            {\"v\", \"3\"},\n            {\"w\", \"3\"},\n            {\"g\", \"4\"},\n            {\"k\", \"4\"},\n            {\"q\", \"4\"},\n            {\"x\", \"48\"},\n            {\"ax\", \"048\"},\n            {\"cx\", \"48\"},\n            {\"l\", \"5\"},\n            {\"cl\", \"45\"},\n            {\"acl\", \"085\"},\n            {\"mn\", \"6\"},\n            {\"r\", \"7\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 57,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 88,col 24)",
            "(line 89,col 9)-(line 89,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testExamples()",
        "snippet": "    @Test\n    public void testExamples() throws EncoderException {\n        final String[][] data = {\n            {\"m\\u00DCller\", \"657\"}, // m\u00dcller - why upper case U-umlaut?\n            {\"schmidt\", \"862\"},\n            {\"schneider\", \"8627\"},\n            {\"fischer\", \"387\"},\n            {\"weber\", \"317\"},\n            {\"wagner\", \"3467\"},\n            {\"becker\", \"147\"},\n            {\"hoffmann\", \"0366\"},\n            {\"sch\\u00C4fer\", \"837\"}, // sch\u00c4fer - why upper case A-umlaut ?\n            {\"Breschnew\", \"17863\"},\n            {\"Wikipedia\", \"3412\"},\n            {\"peter\", \"127\"},\n            {\"pharma\", \"376\"},\n            {\"m\\u00f6nchengladbach\", \"664645214\"}, // m\u00f6nchengladbach\n            {\"deutsch\", \"28\"},\n            {\"deutz\", \"28\"},\n            {\"hamburg\", \"06174\"},\n            {\"hannover\", \"0637\"},\n            {\"christstollen\", \"478256\"},\n            {\"Xanthippe\", \"48621\"},\n            {\"Zacharias\", \"8478\"},\n            {\"Holzbau\", \"0581\"},\n            {\"matsch\", \"68\"},\n            {\"matz\", \"68\"},\n            {\"Arbeitsamt\", \"071862\"},\n            {\"Eberhard\", \"01772\"},\n            {\"Eberhardt\", \"01772\"},\n            {\"heithabu\", \"021\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 92,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 122,col 33)",
            "(line 123,col 9)-(line 123,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testHyphen()",
        "snippet": "    @Test\n    public void testHyphen() throws EncoderException {\n        final String[][] data = {{\"bergisch-gladbach\", \"174845214\"},\n                {\"M\\u00fcller-L\\u00fcdenscheidt\", \"65752682\"}}; // M\u00fcller-L\u00fcdenscheidt\n        this.checkEncodings(data);\n    }",
        "begin_line": 126,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 129,col 63)",
            "(line 130,col 9)-(line 130,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals()",
        "snippet": "    @Test\n    public void testIsEncodeEquals() {\n        final String[][] data = {\n            {\"Meyer\", \"M\\u00fcller\"}, // M\u00fcller\n            {\"Meyer\", \"Mayr\"},\n            {\"house\", \"house\"},\n            {\"House\", \"house\"},\n            {\"Haus\", \"house\"},\n            {\"ganz\", \"Gans\"},\n            {\"ganz\", \"G\\u00e4nse\"}, // G\u00e4nse\n            {\"Miyagi\", \"Miyako\"}};\n        for (final String[] element : data) {\n            this.getStringEncoder().isEncodeEqual(element[1], element[0]);\n        }\n    }",
        "begin_line": 133,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 143,col 34)",
            "(line 144,col 9)-(line 146,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella()",
        "snippet": "    @Test\n    public void testVariationsMella() throws EncoderException {\n        final String data[] = {\"mella\", \"milah\", \"moulla\", \"mellah\", \"muehle\", \"mule\"};\n        this.checkEncodingVariations(\"65\", data);\n    }",
        "begin_line": 149,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 87)",
            "(line 152,col 9)-(line 152,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.ColognePhoneticTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
        "signature": "org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer()",
        "snippet": "    @Test\n    public void testVariationsMeyer() throws EncoderException {\n        final String data[] = {\"Meier\", \"Maier\", \"Mair\", \"Meyer\", \"Meyr\", \"Mejer\", \"Major\"};\n        this.checkEncodingVariations(\"67\", data);\n    }",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 92)",
            "(line 158,col 9)-(line 158,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone1Test.createStringEncoder()",
        "snippet": "    @Override\n    protected Caverphone1 createStringEncoder() {\n        return new Caverphone1();\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedCommonCodeAT1111() throws EncoderException {\n        this.checkEncodingVariations(\"AT1111\", new String[]{\n            \"add\",\n            \"aid\",\n            \"at\",\n            \"art\",\n            \"eat\",\n            \"earth\",\n            \"head\",\n            \"hit\",\n            \"hot\",\n            \"hold\",\n            \"hard\",\n            \"heart\",\n            \"it\",\n            \"out\",\n            \"old\"});\n    }",
        "begin_line": 45,
        "end_line": 63,
        "comment": "\n     * Tests example adapted from version 2.0  http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * AT1111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone1Test.testEndMb()",
        "snippet": "    @Test\n    public void testEndMb() throws EncoderException {\n        final String[][] data = {{\"mb\", \"M11111\"}, {\"mbmb\", \"MPM111\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 71)",
            "(line 68,col 9)-(line 68,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals()",
        "snippet": "    @Test\n    public void testIsCaverphoneEquals() throws EncoderException {\n        final Caverphone1 caverphone = new Caverphone1();\n        Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isEncodeEqual(\"Peter\", \"Stevenson\"));\n        Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isEncodeEqual(\"Peter\", \"Peady\"));\n    }",
        "begin_line": 76,
        "end_line": 81,
        "comment": "\n     * Tests some examples from version 2.0 http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 57)",
            "(line 79,col 9)-(line 79,col 119)",
            "(line 80,col 9)-(line 80,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples()",
        "snippet": "    @Test\n    public void testSpecificationV1Examples() throws EncoderException {\n        final String[][] data = {{\"David\", \"TFT111\"}, {\"Whittle\", \"WTL111\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\n     * Tests example from http://caversham.otago.ac.nz/files/working/ctp060902.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 77)",
            "(line 91,col 9)-(line 91,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone1Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples()",
        "snippet": "    @Test\n    public void testWikipediaExamples() throws EncoderException {\n        final String[][] data = {{\"Lee\", \"L11111\"}, {\"Thompson\", \"TMPSN1\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "\n     * Tests examples from http://en.wikipedia.org/wiki/Caverphone\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 76)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual(java.lang.String, java.lang.String[])",
        "snippet": "    public void assertIsMetaphoneEqual(final String source, final String[] matches) {\n        // match source to all matches\n        for (final String matche : matches) {\n            assertTrue(\"Source: \" + source + \", should have same Metaphone as: \" + matche,\n                       this.getStringEncoder().isMetaphoneEqual(source, matche));\n        }\n        // match to each other\n        for (final String matche : matches) {\n            for (final String matche2 : matches) {\n                assertTrue(this.getStringEncoder().isMetaphoneEqual(matche, matche2));\n            }\n        }\n    }",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 37,col 9)",
            "(line 39,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual(java.lang.String[][])",
        "snippet": "    public void assertMetaphoneEqual(final String[][] pairs) {\n        this.validateFixture(pairs);\n        for (final String[] pair : pairs) {\n            final String name0 = pair[0];\n            final String name1 = pair[1];\n            final String failMsg = \"Expected match between \" + name0 + \" and \" + name1;\n            assertTrue(failMsg, this.getStringEncoder().isMetaphoneEqual(name0, name1));\n            assertTrue(failMsg, this.getStringEncoder().isMetaphoneEqual(name1, name0));\n        }\n    }",
        "begin_line": 46,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 36)",
            "(line 48,col 9)-(line 54,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.createStringEncoder()",
        "snippet": "    @Override\n    protected Metaphone createStringEncoder() {\n        return new Metaphone();\n    }",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqual1() {\n        this.assertMetaphoneEqual(new String[][] { { \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"quick\", \"cookie\" }\n        });\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 68,col 11)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqual2() {\n        this.assertMetaphoneEqual(new String[][] { { \"Lawrence\", \"Lorenza\" }, {\n                \"Gary\", \"Cahra\" }, });\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "\n     * Matches computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 77,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualAero() {\n        this.assertIsMetaphoneEqual(\"Aero\", new String[] { \"Eure\" });\n    }",
        "begin_line": 85,
        "end_line": 88,
        "comment": "\n     * Initial AE case.\n     *\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualWhite() {\n        this.assertIsMetaphoneEqual(\n            \"White\",\n            new String[] { \"Wade\", \"Wait\", \"Waite\", \"Wat\", \"Whit\", \"Wiatt\", \"Wit\", \"Wittie\", \"Witty\", \"Wood\", \"Woodie\", \"Woody\" });\n    }",
        "begin_line": 95,
        "end_line": 100,
        "comment": "\n     * Initial WH case.\n     *\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 99,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualAlbert() {\n        this.assertIsMetaphoneEqual(\"Albert\", new String[] { \"Ailbert\", \"Alberik\", \"Albert\", \"Alberto\", \"Albrecht\" });\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "\n     * Initial A, not followed by an E case.\n     *\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualGary() {\n        this.assertIsMetaphoneEqual(\n            \"Gary\",\n            new String[] {\n                \"Cahra\",\n                \"Cara\",\n                \"Carey\",\n                \"Cari\",\n                \"Caria\",\n                \"Carie\",\n                \"Caro\",\n                \"Carree\",\n                \"Carri\",\n                \"Carrie\",\n                \"Carry\",\n                \"Cary\",\n                \"Cora\",\n                \"Corey\",\n                \"Cori\",\n                \"Corie\",\n                \"Correy\",\n                \"Corri\",\n                \"Corrie\",\n                \"Corry\",\n                \"Cory\",\n                \"Gray\",\n                \"Kara\",\n                \"Kare\",\n                \"Karee\",\n                \"Kari\",\n                \"Karia\",\n                \"Karie\",\n                \"Karrah\",\n                \"Karrie\",\n                \"Karry\",\n                \"Kary\",\n                \"Keri\",\n                \"Kerri\",\n                \"Kerrie\",\n                \"Kerry\",\n                \"Kira\",\n                \"Kiri\",\n                \"Kora\",\n                \"Kore\",\n                \"Kori\",\n                \"Korie\",\n                \"Korrie\",\n                \"Korry\" });\n    }",
        "begin_line": 115,
        "end_line": 164,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 163,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualJohn() {\n        this.assertIsMetaphoneEqual(\n            \"John\",\n            new String[] {\n                \"Gena\",\n                \"Gene\",\n                \"Genia\",\n                \"Genna\",\n                \"Genni\",\n                \"Gennie\",\n                \"Genny\",\n                \"Giana\",\n                \"Gianna\",\n                \"Gina\",\n                \"Ginni\",\n                \"Ginnie\",\n                \"Ginny\",\n                \"Jaine\",\n                \"Jan\",\n                \"Jana\",\n                \"Jane\",\n                \"Janey\",\n                \"Jania\",\n                \"Janie\",\n                \"Janna\",\n                \"Jany\",\n                \"Jayne\",\n                \"Jean\",\n                \"Jeana\",\n                \"Jeane\",\n                \"Jeanie\",\n                \"Jeanna\",\n                \"Jeanne\",\n                \"Jeannie\",\n                \"Jen\",\n                \"Jena\",\n                \"Jeni\",\n                \"Jenn\",\n                \"Jenna\",\n                \"Jennee\",\n                \"Jenni\",\n                \"Jennie\",\n                \"Jenny\",\n                \"Jinny\",\n                \"Jo Ann\",\n                \"Jo-Ann\",\n                \"Jo-Anne\",\n                \"Joan\",\n                \"Joana\",\n                \"Joane\",\n                \"Joanie\",\n                \"Joann\",\n                \"Joanna\",\n                \"Joanne\",\n                \"Joeann\",\n                \"Johna\",\n                \"Johnna\",\n                \"Joni\",\n                \"Jonie\",\n                \"Juana\",\n                \"June\",\n                \"Junia\",\n                \"Junie\" });\n    }",
        "begin_line": 169,
        "end_line": 233,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 232,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualKnight() {\n        this.assertIsMetaphoneEqual(\n            \"Knight\",\n            new String[] {\n                \"Hynda\",\n                \"Nada\",\n                \"Nadia\",\n                \"Nady\",\n                \"Nat\",\n                \"Nata\",\n                \"Natty\",\n                \"Neda\",\n                \"Nedda\",\n                \"Nedi\",\n                \"Netta\",\n                \"Netti\",\n                \"Nettie\",\n                \"Netty\",\n                \"Nita\",\n                \"Nydia\" });\n    }",
        "begin_line": 240,
        "end_line": 261,
        "comment": "\n     * Initial KN case.\n     *\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 260,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualMary() {\n        this.assertIsMetaphoneEqual(\n            \"Mary\",\n            new String[] {\n                \"Mair\",\n                \"Maire\",\n                \"Mara\",\n                \"Mareah\",\n                \"Mari\",\n                \"Maria\",\n                \"Marie\",\n                \"Mary\",\n                \"Maura\",\n                \"Maure\",\n                \"Meara\",\n                \"Merrie\",\n                \"Merry\",\n                \"Mira\",\n                \"Moira\",\n                \"Mora\",\n                \"Moria\",\n                \"Moyra\",\n                \"Muire\",\n                \"Myra\",\n                \"Myrah\" });\n    }",
        "begin_line": 265,
        "end_line": 291,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 267,col 9)-(line 290,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualParis() {\n        this.assertIsMetaphoneEqual(\"Paris\", new String[] { \"Pearcy\", \"Perris\", \"Piercy\", \"Pierz\", \"Pryse\" });\n    }",
        "begin_line": 296,
        "end_line": 299,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualPeter() {\n        this.assertIsMetaphoneEqual(\n            \"Peter\",\n            new String[] { \"Peadar\", \"Peder\", \"Pedro\", \"Peter\", \"Petr\", \"Peyter\", \"Pieter\", \"Pietro\", \"Piotr\" });\n    }",
        "begin_line": 304,
        "end_line": 309,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 306,col 9)-(line 308,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualRay() {\n        this.assertIsMetaphoneEqual(\"Ray\", new String[] { \"Ray\", \"Rey\", \"Roi\", \"Roy\", \"Ruy\" });\n    }",
        "begin_line": 314,
        "end_line": 317,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualSusan() {\n        this.assertIsMetaphoneEqual(\n            \"Susan\",\n            new String[] {\n                \"Siusan\",\n                \"Sosanna\",\n                \"Susan\",\n                \"Susana\",\n                \"Susann\",\n                \"Susanna\",\n                \"Susannah\",\n                \"Susanne\",\n                \"Suzann\",\n                \"Suzanna\",\n                \"Suzanne\",\n                \"Zuzana\" });\n    }",
        "begin_line": 322,
        "end_line": 339,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 338,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualWright() {\n        this.assertIsMetaphoneEqual(\"Wright\", new String[] { \"Rota\", \"Rudd\", \"Ryde\" });\n    }",
        "begin_line": 346,
        "end_line": 349,
        "comment": "\n     * Initial WR case.\n     *\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan()",
        "snippet": "    @Test\n    public void testIsMetaphoneEqualXalan() {\n        this.assertIsMetaphoneEqual(\n            \"Xalan\",\n            new String[] { \"Celene\", \"Celina\", \"Celine\", \"Selena\", \"Selene\", \"Selina\", \"Seline\", \"Suellen\", \"Xylina\" });\n    }",
        "begin_line": 354,
        "end_line": 359,
        "comment": "\n     * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 358,col 120)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testMetaphone()",
        "snippet": "    @Test\n    public void testMetaphone() {\n        assertEquals(\"HL\", this.getStringEncoder().metaphone(\"howl\"));\n        assertEquals(\"TSTN\", this.getStringEncoder().metaphone(\"testing\"));\n        assertEquals(\"0\", this.getStringEncoder().metaphone(\"The\"));\n        assertEquals(\"KK\", this.getStringEncoder().metaphone(\"quick\"));\n        assertEquals(\"BRN\", this.getStringEncoder().metaphone(\"brown\"));\n        assertEquals(\"FKS\", this.getStringEncoder().metaphone(\"fox\"));\n        assertEquals(\"JMPT\", this.getStringEncoder().metaphone(\"jumped\"));\n        assertEquals(\"OFR\", this.getStringEncoder().metaphone(\"over\"));\n        assertEquals(\"0\", this.getStringEncoder().metaphone(\"the\"));\n        assertEquals(\"LS\", this.getStringEncoder().metaphone(\"lazy\"));\n        assertEquals(\"TKS\", this.getStringEncoder().metaphone(\"dogs\"));\n    }",
        "begin_line": 361,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 70)",
            "(line 364,col 9)-(line 364,col 75)",
            "(line 365,col 9)-(line 365,col 68)",
            "(line 366,col 9)-(line 366,col 71)",
            "(line 367,col 9)-(line 367,col 72)",
            "(line 368,col 9)-(line 368,col 70)",
            "(line 369,col 9)-(line 369,col 74)",
            "(line 370,col 9)-(line 370,col 71)",
            "(line 371,col 9)-(line 371,col 68)",
            "(line 372,col 9)-(line 372,col 70)",
            "(line 373,col 9)-(line 373,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB()",
        "snippet": "    @Test\n    public void testWordEndingInMB() {\n        assertEquals( \"KM\", this.getStringEncoder().metaphone(\"COMB\") );\n        assertEquals( \"TM\", this.getStringEncoder().metaphone(\"TOMB\") );\n        assertEquals( \"WM\", this.getStringEncoder().metaphone(\"WOMB\") );\n    }",
        "begin_line": 376,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 72)",
            "(line 379,col 9)-(line 379,col 72)",
            "(line 380,col 9)-(line 380,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY()",
        "snippet": "    @Test\n    public void testDiscardOfSCEOrSCIOrSCY() {\n        assertEquals( \"SNS\", this.getStringEncoder().metaphone(\"SCIENCE\") );\n        assertEquals( \"SN\", this.getStringEncoder().metaphone(\"SCENE\") );\n        assertEquals( \"S\", this.getStringEncoder().metaphone(\"SCY\") );\n    }",
        "begin_line": 383,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 76)",
            "(line 386,col 9)-(line 386,col 73)",
            "(line 387,col 9)-(line 387,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testWhy()",
        "snippet": "    @Test\n    public void testWhy() {\n        // PHP returns \"H\". The original metaphone returns an empty string.\n        assertEquals(\"\", this.getStringEncoder().metaphone(\"WHY\"));\n    }",
        "begin_line": 393,
        "end_line": 397,
        "comment": "\n     * Tests (CODEC-57) Metaphone.metaphone(String) returns an empty string when passed the word \"why\"\n     ",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA()",
        "snippet": "    @Test\n    public void testWordsWithCIA() {\n        assertEquals( \"XP\", this.getStringEncoder().metaphone(\"CIAPO\") );\n    }",
        "begin_line": 399,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH()",
        "snippet": "    @Test\n    public void testTranslateOfSCHAndCH() {\n        assertEquals( \"SKTL\", this.getStringEncoder().metaphone(\"SCHEDULE\") );\n        assertEquals( \"SKMT\", this.getStringEncoder().metaphone(\"SCHEMATIC\") );\n\n        assertEquals( \"KRKT\", this.getStringEncoder().metaphone(\"CHARACTER\") );\n        assertEquals( \"TX\", this.getStringEncoder().metaphone(\"TEACH\") );\n    }",
        "begin_line": 404,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 78)",
            "(line 407,col 9)-(line 407,col 79)",
            "(line 409,col 9)-(line 409,col 79)",
            "(line 410,col 9)-(line 410,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY()",
        "snippet": "    @Test\n    public void testTranslateToJOfDGEOrDGIOrDGY() {\n        assertEquals( \"TJ\", this.getStringEncoder().metaphone(\"DODGY\") );\n        assertEquals( \"TJ\", this.getStringEncoder().metaphone(\"DODGE\") );\n        assertEquals( \"AJMT\", this.getStringEncoder().metaphone(\"ADGIEMTI\") );\n    }",
        "begin_line": 413,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 73)",
            "(line 416,col 9)-(line 416,col 73)",
            "(line 417,col 9)-(line 417,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG()",
        "snippet": "    @Test\n    public void testDiscardOfSilentHAfterG() {\n        assertEquals( \"KNT\", this.getStringEncoder().metaphone(\"GHENT\") );\n        assertEquals( \"B\", this.getStringEncoder().metaphone(\"BAUGH\") );\n    }",
        "begin_line": 420,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 74)",
            "(line 423,col 9)-(line 423,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN()",
        "snippet": "    @Test\n    public void testDiscardOfSilentGN() {\n        // NOTE: This does not test for silent GN, but for starting with GN\n        assertEquals( \"N\", this.getStringEncoder().metaphone(\"GNU\") );\n\n        // NOTE: Trying to test for GNED, but expected code does not appear to execute\n        assertEquals( \"SNT\", this.getStringEncoder().metaphone(\"SIGNED\") );\n    }",
        "begin_line": 426,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 70)",
            "(line 432,col 9)-(line 432,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testPHTOF()",
        "snippet": "    @Test\n    public void testPHTOF() {\n        assertEquals( \"FX\", this.getStringEncoder().metaphone(\"PHISH\") );\n    }",
        "begin_line": 435,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 437,col 9)-(line 437,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX()",
        "snippet": "    @Test\n    public void testSHAndSIOAndSIAToX() {\n        assertEquals( \"XT\", this.getStringEncoder().metaphone(\"SHOT\") );\n        assertEquals( \"OTXN\", this.getStringEncoder().metaphone(\"ODSIAN\") );\n        assertEquals( \"PLXN\", this.getStringEncoder().metaphone(\"PULSION\") );\n    }",
        "begin_line": 440,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 442,col 9)-(line 442,col 72)",
            "(line 443,col 9)-(line 443,col 76)",
            "(line 444,col 9)-(line 444,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX()",
        "snippet": "    @Test\n    public void testTIOAndTIAToX() {\n        assertEquals( \"OX\", this.getStringEncoder().metaphone(\"OTIA\") );\n        assertEquals( \"PRXN\", this.getStringEncoder().metaphone(\"PORTION\") );\n    }",
        "begin_line": 447,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 72)",
            "(line 450,col 9)-(line 450,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testTCH()",
        "snippet": "    @Test\n    public void testTCH() {\n        assertEquals( \"RX\", this.getStringEncoder().metaphone(\"RETCH\") );\n        assertEquals( \"WX\", this.getStringEncoder().metaphone(\"WATCH\") );\n    }",
        "begin_line": 453,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 455,col 9)-(line 455,col 73)",
            "(line 456,col 9)-(line 456,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testExceedLength()",
        "snippet": "    @Test\n    public void testExceedLength() {\n        // should be AKSKS, but istruncated by Max Code Length\n        assertEquals( \"AKSK\", this.getStringEncoder().metaphone(\"AXEAXE\") );\n    }",
        "begin_line": 459,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation()",
        "snippet": "    @Test\n    public void testSetMaxLengthWithTruncation() {\n        // should be AKSKS, but istruncated by Max Code Length\n        this.getStringEncoder().setMaxCodeLen( 6 );\n        assertEquals( \"AKSKSK\", this.getStringEncoder().metaphone(\"AXEAXEAXE\") );\n    }",
        "begin_line": 465,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 468,col 9)-(line 468,col 51)",
            "(line 469,col 9)-(line 469,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.MetaphoneTest.validateFixture(java.lang.String[][])",
        "snippet": "    public void validateFixture(final String[][] pairs) {\n        if (pairs.length == 0) {\n            fail(\"Test fixture is empty\");\n        }\n        for (int i = 0; i < pairs.length; i++) {\n            if (pairs[i].length != 2) {\n                fail(\"Error in test fixture in the data array at index \" + i);\n            }\n        }\n    }",
        "begin_line": 472,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 475,col 9)",
            "(line 476,col 9)-(line 480,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.createStringEncoder()",
        "snippet": "    @Override\n    protected Caverphone2 createStringEncoder() {\n        return new Caverphone2();\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedCommonCodeAT11111111() throws EncoderException {\n        this.checkEncodingVariations(\"AT11111111\", new String[]{\n            \"add\",\n            \"aid\",\n            \"at\",\n            \"art\",\n            \"eat\",\n            \"earth\",\n            \"head\",\n            \"hit\",\n            \"hot\",\n            \"hold\",\n            \"hard\",\n            \"heart\",\n            \"it\",\n            \"out\",\n            \"old\"});\n    }",
        "begin_line": 45,
        "end_line": 63,
        "comment": "\n     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * AT11111111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 47,col 9)-(line 62,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedExamples() throws EncoderException {\n        final String[][] data = {{\"Stevenson\", \"STFNSN1111\"}, {\"Peter\", \"PTA1111111\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 70,
        "end_line": 74,
        "comment": "\n     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 87)",
            "(line 73,col 9)-(line 73,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedRandomNameKLN1111111() throws EncoderException {\n        this.checkEncodingVariations(\"KLN1111111\", new String[]{\n            \"Cailean\",\n            \"Calan\",\n            \"Calen\",\n            \"Callahan\",\n            \"Callan\",\n            \"Callean\",\n            \"Carleen\",\n            \"Carlen\",\n            \"Carlene\",\n            \"Carlin\",\n            \"Carline\",\n            \"Carlyn\",\n            \"Carlynn\",\n            \"Carlynne\",\n            \"Charlean\",\n            \"Charleen\",\n            \"Charlene\",\n            \"Charline\",\n            \"Cherlyn\",\n            \"Chirlin\",\n            \"Clein\",\n            \"Cleon\",\n            \"Cline\",\n            \"Cohleen\",\n            \"Colan\",\n            \"Coleen\",\n            \"Colene\",\n            \"Colin\",\n            \"Colleen\",\n            \"Collen\",\n            \"Collin\",\n            \"Colline\",\n            \"Colon\",\n            \"Cullan\",\n            \"Cullen\",\n            \"Cullin\",\n            \"Gaelan\",\n            \"Galan\",\n            \"Galen\",\n            \"Garlan\",\n            \"Garlen\",\n            \"Gaulin\",\n            \"Gayleen\",\n            \"Gaylene\",\n            \"Giliane\",\n            \"Gillan\",\n            \"Gillian\",\n            \"Glen\",\n            \"Glenn\",\n            \"Glyn\",\n            \"Glynn\",\n            \"Gollin\",\n            \"Gorlin\",\n            \"Kalin\",\n            \"Karlan\",\n            \"Karleen\",\n            \"Karlen\",\n            \"Karlene\",\n            \"Karlin\",\n            \"Karlyn\",\n            \"Kaylyn\",\n            \"Keelin\",\n            \"Kellen\",\n            \"Kellene\",\n            \"Kellyann\",\n            \"Kellyn\",\n            \"Khalin\",\n            \"Kilan\",\n            \"Kilian\",\n            \"Killen\",\n            \"Killian\",\n            \"Killion\",\n            \"Klein\",\n            \"Kleon\",\n            \"Kline\",\n            \"Koerlin\",\n            \"Kylen\",\n            \"Kylynn\",\n            \"Quillan\",\n            \"Quillon\",\n            \"Qulllon\",\n            \"Xylon\"});\n    }",
        "begin_line": 81,
        "end_line": 166,
        "comment": "\n     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 165,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedRandomNameTN11111111() throws EncoderException {\n        this.checkEncodingVariations(\"TN11111111\", new String[]{\n            \"Dan\",\n            \"Dane\",\n            \"Dann\",\n            \"Darn\",\n            \"Daune\",\n            \"Dawn\",\n            \"Ddene\",\n            \"Dean\",\n            \"Deane\",\n            \"Deanne\",\n            \"DeeAnn\",\n            \"Deeann\",\n            \"Deeanne\",\n            \"Deeyn\",\n            \"Den\",\n            \"Dene\",\n            \"Denn\",\n            \"Deonne\",\n            \"Diahann\",\n            \"Dian\",\n            \"Diane\",\n            \"Diann\",\n            \"Dianne\",\n            \"Diannne\",\n            \"Dine\",\n            \"Dion\",\n            \"Dione\",\n            \"Dionne\",\n            \"Doane\",\n            \"Doehne\",\n            \"Don\",\n            \"Donn\",\n            \"Doone\",\n            \"Dorn\",\n            \"Down\",\n            \"Downe\",\n            \"Duane\",\n            \"Dun\",\n            \"Dunn\",\n            \"Duyne\",\n            \"Dyan\",\n            \"Dyane\",\n            \"Dyann\",\n            \"Dyanne\",\n            \"Dyun\",\n            \"Tan\",\n            \"Tann\",\n            \"Teahan\",\n            \"Ten\",\n            \"Tenn\",\n            \"Terhune\",\n            \"Thain\",\n            \"Thaine\",\n            \"Thane\",\n            \"Thanh\",\n            \"Thayne\",\n            \"Theone\",\n            \"Thin\",\n            \"Thorn\",\n            \"Thorne\",\n            \"Thun\",\n            \"Thynne\",\n            \"Tien\",\n            \"Tine\",\n            \"Tjon\",\n            \"Town\",\n            \"Towne\",\n            \"Turne\",\n            \"Tyne\"});\n    }",
        "begin_line": 173,
        "end_line": 245,
        "comment": "\n     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 244,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedRandomNameTTA1111111() throws EncoderException {\n        this.checkEncodingVariations(\"TTA1111111\", new String[]{\n            \"Darda\",\n            \"Datha\",\n            \"Dedie\",\n            \"Deedee\",\n            \"Deerdre\",\n            \"Deidre\",\n            \"Deirdre\",\n            \"Detta\",\n            \"Didi\",\n            \"Didier\",\n            \"Dido\",\n            \"Dierdre\",\n            \"Dieter\",\n            \"Dita\",\n            \"Ditter\",\n            \"Dodi\",\n            \"Dodie\",\n            \"Dody\",\n            \"Doherty\",\n            \"Dorthea\",\n            \"Dorthy\",\n            \"Doti\",\n            \"Dotti\",\n            \"Dottie\",\n            \"Dotty\",\n            \"Doty\",\n            \"Doughty\",\n            \"Douty\",\n            \"Dowdell\",\n            \"Duthie\",\n            \"Tada\",\n            \"Taddeo\",\n            \"Tadeo\",\n            \"Tadio\",\n            \"Tati\",\n            \"Teador\",\n            \"Tedda\",\n            \"Tedder\",\n            \"Teddi\",\n            \"Teddie\",\n            \"Teddy\",\n            \"Tedi\",\n            \"Tedie\",\n            \"Teeter\",\n            \"Teodoor\",\n            \"Teodor\",\n            \"Terti\",\n            \"Theda\",\n            \"Theodor\",\n            \"Theodore\",\n            \"Theta\",\n            \"Thilda\",\n            \"Thordia\",\n            \"Tilda\",\n            \"Tildi\",\n            \"Tildie\",\n            \"Tildy\",\n            \"Tita\",\n            \"Tito\",\n            \"Tjader\",\n            \"Toddie\",\n            \"Toddy\",\n            \"Torto\",\n            \"Tuddor\",\n            \"Tudor\",\n            \"Turtle\",\n            \"Tuttle\",\n            \"Tutto\"});\n    }",
        "begin_line": 252,
        "end_line": 323,
        "comment": "\n     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 322,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords()",
        "snippet": "    @Test\n    public void testCaverphoneRevisitedRandomWords() throws EncoderException {\n        this.checkEncodingVariations(\"RTA1111111\", new String[]{\"rather\", \"ready\", \"writer\"});\n        this.checkEncoding(\"SSA1111111\", \"social\");\n        this.checkEncodingVariations(\"APA1111111\", new String[]{\"able\", \"appear\"});\n    }",
        "begin_line": 330,
        "end_line": 335,
        "comment": "\n     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 94)",
            "(line 333,col 9)-(line 333,col 51)",
            "(line 334,col 9)-(line 334,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testEndMb()",
        "snippet": "    @Test\n    public void testEndMb() throws EncoderException {\n        final String[][] data = {{\"mb\", \"M111111111\"}, {\"mbmb\", \"MPM1111111\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 337,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 79)",
            "(line 340,col 9)-(line 340,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals()",
        "snippet": "    @Test\n    public void testIsCaverphoneEquals() throws EncoderException {\n        final Caverphone2 caverphone = new Caverphone2();\n        Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isEncodeEqual(\"Peter\", \"Stevenson\"));\n        Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isEncodeEqual(\"Peter\", \"Peady\"));\n    }",
        "begin_line": 344,
        "end_line": 349,
        "comment": " Caverphone Revisited",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 57)",
            "(line 347,col 9)-(line 347,col 119)",
            "(line 348,col 9)-(line 348,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.Caverphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
        "signature": "org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples()",
        "snippet": "    @Test\n    public void testSpecificationExamples() throws EncoderException {\n        final String[][] data = {\n            {\"Peter\", \"PTA1111111\"},\n            {\"ready\", \"RTA1111111\"},\n            {\"social\", \"SSA1111111\"},\n            {\"able\", \"APA1111111\"},\n            {\"Tedder\", \"TTA1111111\"},\n            {\"Karleen\", \"KLN1111111\"},\n            {\"Dyun\", \"TN11111111\"}};\n        this.checkEncodings(data);\n    }",
        "begin_line": 351,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 360,col 36)",
            "(line 361,col 9)-(line 361,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.createStringEncoder()",
        "snippet": "    @Override\n    protected RefinedSoundex createStringEncoder() {\n        return new RefinedSoundex();\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testDifference()",
        "snippet": "    @Test\n    public void testDifference() throws EncoderException {\n        // Edge cases\n        assertEquals(0, this.getStringEncoder().difference(null, null));\n        assertEquals(0, this.getStringEncoder().difference(\"\", \"\"));\n        assertEquals(0, this.getStringEncoder().difference(\" \", \" \"));\n        // Normal cases\n        assertEquals(6, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n        assertEquals(3, this.getStringEncoder().difference(\"Ann\", \"Andrew\"));\n        assertEquals(1, this.getStringEncoder().difference(\"Margaret\", \"Andrew\"));\n        assertEquals(1, this.getStringEncoder().difference(\"Janet\", \"Margaret\"));\n        // Examples from\n        // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n        assertEquals(5, this.getStringEncoder().difference(\"Green\", \"Greene\"));\n        assertEquals(1, this.getStringEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n        // Examples from\n        // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n        assertEquals(6, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n        assertEquals(8, this.getStringEncoder().difference(\"Smithers\", \"Smythers\"));\n        assertEquals(5, this.getStringEncoder().difference(\"Anothers\", \"Brothers\"));\n    }",
        "begin_line": 38,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 72)",
            "(line 42,col 9)-(line 42,col 68)",
            "(line 43,col 9)-(line 43,col 70)",
            "(line 45,col 9)-(line 45,col 79)",
            "(line 46,col 9)-(line 46,col 77)",
            "(line 47,col 9)-(line 47,col 82)",
            "(line 48,col 9)-(line 48,col 81)",
            "(line 51,col 9)-(line 51,col 79)",
            "(line 52,col 9)-(line 52,col 88)",
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 84)",
            "(line 57,col 9)-(line 57,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testEncode()",
        "snippet": "    @Test\n    public void testEncode() {\n        assertEquals(\"T6036084\", this.getStringEncoder().encode(\"testing\"));\n        assertEquals(\"T6036084\", this.getStringEncoder().encode(\"TESTING\"));\n        assertEquals(\"T60\", this.getStringEncoder().encode(\"The\"));\n        assertEquals(\"Q503\", this.getStringEncoder().encode(\"quick\"));\n        assertEquals(\"B1908\", this.getStringEncoder().encode(\"brown\"));\n        assertEquals(\"F205\", this.getStringEncoder().encode(\"fox\"));\n        assertEquals(\"J408106\", this.getStringEncoder().encode(\"jumped\"));\n        assertEquals(\"O0209\", this.getStringEncoder().encode(\"over\"));\n        assertEquals(\"T60\", this.getStringEncoder().encode(\"the\"));\n        assertEquals(\"L7050\", this.getStringEncoder().encode(\"lazy\"));\n        assertEquals(\"D6043\", this.getStringEncoder().encode(\"dogs\"));\n\n        // Testing CODEC-56\n        assertEquals(\"D6043\", RefinedSoundex.US_ENGLISH.encode(\"dogs\"));\n    }",
        "begin_line": 60,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 76)",
            "(line 63,col 9)-(line 63,col 76)",
            "(line 64,col 9)-(line 64,col 67)",
            "(line 65,col 9)-(line 65,col 70)",
            "(line 66,col 9)-(line 66,col 71)",
            "(line 67,col 9)-(line 67,col 68)",
            "(line 68,col 9)-(line 68,col 74)",
            "(line 69,col 9)-(line 69,col 70)",
            "(line 70,col 9)-(line 70,col 67)",
            "(line 71,col 9)-(line 71,col 70)",
            "(line 72,col 9)-(line 72,col 70)",
            "(line 75,col 9)-(line 75,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter()",
        "snippet": "    @Test\n    public void testGetMappingCodeNonLetter() {\n        final char code = this.getStringEncoder().getMappingCode('#');\n        assertEquals(\"Code does not equals zero\", 0, code);\n    }",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 70)",
            "(line 81,col 9)-(line 81,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance()",
        "snippet": "    @Test\n    public void testNewInstance() {\n        assertEquals(\"D6043\", new RefinedSoundex().soundex(\"dogs\"));\n    }",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2()",
        "snippet": "    @Test\n    public void testNewInstance2() {\n        assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"dogs\"));\n    }",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 122)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.RefinedSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
        "signature": "org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3()",
        "snippet": "    @Test\n    public void testNewInstance3() {\n        assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING).soundex(\"dogs\"));\n    }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.createStringEncoder()",
        "snippet": "    @Override\n    protected Soundex createStringEncoder() {\n        return new Soundex();\n    }",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testB650()",
        "snippet": "    @Test\n    public void testB650() throws EncoderException {\n        this.checkEncodingVariations(\"B650\", new String[]{\n            \"BARHAM\",\n            \"BARONE\",\n            \"BARRON\",\n            \"BERNA\",\n            \"BIRNEY\",\n            \"BIRNIE\",\n            \"BOOROM\",\n            \"BOREN\",\n            \"BORN\",\n            \"BOURN\",\n            \"BOURNE\",\n            \"BOWRON\",\n            \"BRAIN\",\n            \"BRAME\",\n            \"BRANN\",\n            \"BRAUN\",\n            \"BREEN\",\n            \"BRIEN\",\n            \"BRIM\",\n            \"BRIMM\",\n            \"BRINN\",\n            \"BRION\",\n            \"BROOM\",\n            \"BROOME\",\n            \"BROWN\",\n            \"BROWNE\",\n            \"BRUEN\",\n            \"BRUHN\",\n            \"BRUIN\",\n            \"BRUMM\",\n            \"BRUN\",\n            \"BRUNO\",\n            \"BRYAN\",\n            \"BURIAN\",\n            \"BURN\",\n            \"BURNEY\",\n            \"BYRAM\",\n            \"BYRNE\",\n            \"BYRON\",\n            \"BYRUM\"});\n    }",
        "begin_line": 41,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 83,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testBadCharacters()",
        "snippet": "    @Test\n    public void testBadCharacters() {\n        Assert.assertEquals(\"H452\", this.getStringEncoder().encode(\"HOL>MES\"));\n\n    }",
        "begin_line": 86,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testDifference()",
        "snippet": "    @Test\n    public void testDifference() throws EncoderException {\n        // Edge cases\n        Assert.assertEquals(0, this.getStringEncoder().difference(null, null));\n        Assert.assertEquals(0, this.getStringEncoder().difference(\"\", \"\"));\n        Assert.assertEquals(0, this.getStringEncoder().difference(\" \", \" \"));\n        // Normal cases\n        Assert.assertEquals(4, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n        Assert.assertEquals(2, this.getStringEncoder().difference(\"Ann\", \"Andrew\"));\n        Assert.assertEquals(1, this.getStringEncoder().difference(\"Margaret\", \"Andrew\"));\n        Assert.assertEquals(0, this.getStringEncoder().difference(\"Janet\", \"Margaret\"));\n        // Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n        Assert.assertEquals(4, this.getStringEncoder().difference(\"Green\", \"Greene\"));\n        Assert.assertEquals(0, this.getStringEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n        // Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n        Assert.assertEquals(4, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n        Assert.assertEquals(4, this.getStringEncoder().difference(\"Smithers\", \"Smythers\"));\n        Assert.assertEquals(2, this.getStringEncoder().difference(\"Anothers\", \"Brothers\"));\n    }",
        "begin_line": 92,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 79)",
            "(line 96,col 9)-(line 96,col 75)",
            "(line 97,col 9)-(line 97,col 77)",
            "(line 99,col 9)-(line 99,col 86)",
            "(line 100,col 9)-(line 100,col 84)",
            "(line 101,col 9)-(line 101,col 89)",
            "(line 102,col 9)-(line 102,col 88)",
            "(line 104,col 9)-(line 104,col 86)",
            "(line 105,col 9)-(line 105,col 95)",
            "(line 107,col 9)-(line 107,col 86)",
            "(line 108,col 9)-(line 108,col 91)",
            "(line 109,col 9)-(line 109,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBasic()",
        "snippet": "    @Test\n    public void testEncodeBasic() {\n        Assert.assertEquals(\"T235\", this.getStringEncoder().encode(\"testing\"));\n        Assert.assertEquals(\"T000\", this.getStringEncoder().encode(\"The\"));\n        Assert.assertEquals(\"Q200\", this.getStringEncoder().encode(\"quick\"));\n        Assert.assertEquals(\"B650\", this.getStringEncoder().encode(\"brown\"));\n        Assert.assertEquals(\"F200\", this.getStringEncoder().encode(\"fox\"));\n        Assert.assertEquals(\"J513\", this.getStringEncoder().encode(\"jumped\"));\n        Assert.assertEquals(\"O160\", this.getStringEncoder().encode(\"over\"));\n        Assert.assertEquals(\"T000\", this.getStringEncoder().encode(\"the\"));\n        Assert.assertEquals(\"L200\", this.getStringEncoder().encode(\"lazy\"));\n        Assert.assertEquals(\"D200\", this.getStringEncoder().encode(\"dogs\"));\n    }",
        "begin_line": 112,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 79)",
            "(line 115,col 9)-(line 115,col 75)",
            "(line 116,col 9)-(line 116,col 77)",
            "(line 117,col 9)-(line 117,col 77)",
            "(line 118,col 9)-(line 118,col 75)",
            "(line 119,col 9)-(line 119,col 78)",
            "(line 120,col 9)-(line 120,col 76)",
            "(line 121,col 9)-(line 121,col 75)",
            "(line 122,col 9)-(line 122,col 76)",
            "(line 123,col 9)-(line 123,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBatch2()",
        "snippet": "    @Test\n    public void testEncodeBatch2() {\n        Assert.assertEquals(\"A462\", this.getStringEncoder().encode(\"Allricht\"));\n        Assert.assertEquals(\"E166\", this.getStringEncoder().encode(\"Eberhard\"));\n        Assert.assertEquals(\"E521\", this.getStringEncoder().encode(\"Engebrethson\"));\n        Assert.assertEquals(\"H512\", this.getStringEncoder().encode(\"Heimbach\"));\n        Assert.assertEquals(\"H524\", this.getStringEncoder().encode(\"Hanselmann\"));\n        Assert.assertEquals(\"H431\", this.getStringEncoder().encode(\"Hildebrand\"));\n        Assert.assertEquals(\"K152\", this.getStringEncoder().encode(\"Kavanagh\"));\n        Assert.assertEquals(\"L530\", this.getStringEncoder().encode(\"Lind\"));\n        Assert.assertEquals(\"L222\", this.getStringEncoder().encode(\"Lukaschowsky\"));\n        Assert.assertEquals(\"M235\", this.getStringEncoder().encode(\"McDonnell\"));\n        Assert.assertEquals(\"M200\", this.getStringEncoder().encode(\"McGee\"));\n        Assert.assertEquals(\"O155\", this.getStringEncoder().encode(\"Opnian\"));\n        Assert.assertEquals(\"O155\", this.getStringEncoder().encode(\"Oppenheimer\"));\n        Assert.assertEquals(\"R355\", this.getStringEncoder().encode(\"Riedemanas\"));\n        Assert.assertEquals(\"Z300\", this.getStringEncoder().encode(\"Zita\"));\n        Assert.assertEquals(\"Z325\", this.getStringEncoder().encode(\"Zitzmeinn\"));\n    }",
        "begin_line": 129,
        "end_line": 147,
        "comment": "\n     * Examples from http://www.bradandkathy.com/genealogy/overviewofsoundex.html\n     ",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 80)",
            "(line 132,col 9)-(line 132,col 80)",
            "(line 133,col 9)-(line 133,col 84)",
            "(line 134,col 9)-(line 134,col 80)",
            "(line 135,col 9)-(line 135,col 82)",
            "(line 136,col 9)-(line 136,col 82)",
            "(line 137,col 9)-(line 137,col 80)",
            "(line 138,col 9)-(line 138,col 76)",
            "(line 139,col 9)-(line 139,col 84)",
            "(line 140,col 9)-(line 140,col 81)",
            "(line 141,col 9)-(line 141,col 77)",
            "(line 142,col 9)-(line 142,col 78)",
            "(line 143,col 9)-(line 143,col 83)",
            "(line 144,col 9)-(line 144,col 82)",
            "(line 145,col 9)-(line 145,col 76)",
            "(line 146,col 9)-(line 146,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBatch3()",
        "snippet": "    @Test\n    public void testEncodeBatch3() {\n        Assert.assertEquals(\"W252\", this.getStringEncoder().encode(\"Washington\"));\n        Assert.assertEquals(\"L000\", this.getStringEncoder().encode(\"Lee\"));\n        Assert.assertEquals(\"G362\", this.getStringEncoder().encode(\"Gutierrez\"));\n        Assert.assertEquals(\"P236\", this.getStringEncoder().encode(\"Pfister\"));\n        Assert.assertEquals(\"J250\", this.getStringEncoder().encode(\"Jackson\"));\n        Assert.assertEquals(\"T522\", this.getStringEncoder().encode(\"Tymczak\"));\n        // For VanDeusen: D-250 (D, 2 for the S, 5 for the N, 0 added) is also\n        // possible.\n        Assert.assertEquals(\"V532\", this.getStringEncoder().encode(\"VanDeusen\"));\n    }",
        "begin_line": 152,
        "end_line": 163,
        "comment": "\n     * Examples from http://www.archives.gov/research_room/genealogy/census/soundex.html\n     ",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 82)",
            "(line 155,col 9)-(line 155,col 75)",
            "(line 156,col 9)-(line 156,col 81)",
            "(line 157,col 9)-(line 157,col 79)",
            "(line 158,col 9)-(line 158,col 79)",
            "(line 159,col 9)-(line 159,col 79)",
            "(line 162,col 9)-(line 162,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeBatch4()",
        "snippet": "    @Test\n    public void testEncodeBatch4() {\n        Assert.assertEquals(\"H452\", this.getStringEncoder().encode(\"HOLMES\"));\n        Assert.assertEquals(\"A355\", this.getStringEncoder().encode(\"ADOMOMI\"));\n        Assert.assertEquals(\"V536\", this.getStringEncoder().encode(\"VONDERLEHR\"));\n        Assert.assertEquals(\"B400\", this.getStringEncoder().encode(\"BALL\"));\n        Assert.assertEquals(\"S000\", this.getStringEncoder().encode(\"SHAW\"));\n        Assert.assertEquals(\"J250\", this.getStringEncoder().encode(\"JACKSON\"));\n        Assert.assertEquals(\"S545\", this.getStringEncoder().encode(\"SCANLON\"));\n        Assert.assertEquals(\"S532\", this.getStringEncoder().encode(\"SAINTJOHN\"));\n\n    }",
        "begin_line": 168,
        "end_line": 179,
        "comment": "\n     * Examples from: http://www.myatt.demon.co.uk/sxalg.htm\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 78)",
            "(line 171,col 9)-(line 171,col 79)",
            "(line 172,col 9)-(line 172,col 82)",
            "(line 173,col 9)-(line 173,col 76)",
            "(line 174,col 9)-(line 174,col 76)",
            "(line 175,col 9)-(line 175,col 79)",
            "(line 176,col 9)-(line 176,col 79)",
            "(line 177,col 9)-(line 177,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes()",
        "snippet": "    @Test\n    public void testEncodeIgnoreApostrophes() throws EncoderException {\n        this.checkEncodingVariations(\"O165\", new String[]{\n            \"OBrien\",\n            \"'OBrien\",\n            \"O'Brien\",\n            \"OB'rien\",\n            \"OBr'ien\",\n            \"OBri'en\",\n            \"OBrie'n\",\n            \"OBrien'\"});\n    }",
        "begin_line": 181,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 191,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens()",
        "snippet": "    @Test\n    public void testEncodeIgnoreHyphens() throws EncoderException {\n        this.checkEncodingVariations(\"K525\", new String[]{\n            \"KINGSMITH\",\n            \"-KINGSMITH\",\n            \"K-INGSMITH\",\n            \"KI-NGSMITH\",\n            \"KIN-GSMITH\",\n            \"KING-SMITH\",\n            \"KINGS-MITH\",\n            \"KINGSM-ITH\",\n            \"KINGSMI-TH\",\n            \"KINGSMIT-H\",\n            \"KINGSMITH-\"});\n    }",
        "begin_line": 199,
        "end_line": 213,
        "comment": "\n     * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 212,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable()",
        "snippet": "    @Test\n    public void testEncodeIgnoreTrimmable() {\n        Assert.assertEquals(\"W252\", this.getStringEncoder().encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n    }",
        "begin_line": 215,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testHWRuleEx1()",
        "snippet": "    @Test\n    public void testHWRuleEx1() {\n        // From\n        // http://www.archives.gov/research_room/genealogy/census/soundex.html:\n        // Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1\n        // for the F). It is not coded A-226.\n        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcraft\"));\n        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcroft\"));\n        Assert.assertEquals(\"Y330\", this.getStringEncoder().encode(\"yehudit\"));\n        Assert.assertEquals(\"Y330\", this.getStringEncoder().encode(\"yhwdyt\"));\n    }",
        "begin_line": 223,
        "end_line": 233,
        "comment": "\n     * Consonants from the same code group separated by W or H are treated as one.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 80)",
            "(line 230,col 9)-(line 230,col 80)",
            "(line 231,col 9)-(line 231,col 79)",
            "(line 232,col 9)-(line 232,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testHWRuleEx2()",
        "snippet": "    @Test\n    public void testHWRuleEx2() {\n        Assert.assertEquals(\"B312\", this.getStringEncoder().encode(\"BOOTHDAVIS\"));\n        Assert.assertEquals(\"B312\", this.getStringEncoder().encode(\"BOOTH-DAVIS\"));\n    }",
        "begin_line": 240,
        "end_line": 244,
        "comment": "\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n     ",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 82)",
            "(line 243,col 9)-(line 243,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testHWRuleEx3()",
        "snippet": "    @Test\n    public void testHWRuleEx3() throws EncoderException {\n        Assert.assertEquals(\"S460\", this.getStringEncoder().encode(\"Sgler\"));\n        Assert.assertEquals(\"S460\", this.getStringEncoder().encode(\"Swhgler\"));\n        // Also S460:\n        this.checkEncodingVariations(\"S460\", new String[]{\n            \"SAILOR\",\n            \"SALYER\",\n            \"SAYLOR\",\n            \"SCHALLER\",\n            \"SCHELLER\",\n            \"SCHILLER\",\n            \"SCHOOLER\",\n            \"SCHULER\",\n            \"SCHUYLER\",\n            \"SEILER\",\n            \"SEYLER\",\n            \"SHOLAR\",\n            \"SHULER\",\n            \"SILAR\",\n            \"SILER\",\n            \"SILLER\"});\n    }",
        "begin_line": 251,
        "end_line": 273,
        "comment": "\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 77)",
            "(line 254,col 9)-(line 254,col 79)",
            "(line 256,col 9)-(line 272,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMsSqlServer1()",
        "snippet": "    @Test\n    public void testMsSqlServer1() {\n        Assert.assertEquals(\"S530\", this.getStringEncoder().encode(\"Smith\"));\n        Assert.assertEquals(\"S530\", this.getStringEncoder().encode(\"Smythe\"));\n    }",
        "begin_line": 279,
        "end_line": 283,
        "comment": "\n     * Examples for MS SQLServer from\n     * http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n     ",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 77)",
            "(line 282,col 9)-(line 282,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMsSqlServer2()",
        "snippet": "    @Test\n    public void testMsSqlServer2() throws EncoderException {\n        this.checkEncodingVariations(\"E625\", new String[]{\"Erickson\", \"Erickson\", \"Erikson\", \"Ericson\", \"Ericksen\", \"Ericsen\"});\n    }",
        "begin_line": 292,
        "end_line": 295,
        "comment": "\n     * Examples for MS SQLServer from\n     * http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support\n     * /kb/articles/Q100/3/65.asp&NoWebContent=1\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 128)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testMsSqlServer3()",
        "snippet": "    @Test\n    public void testMsSqlServer3() {\n        Assert.assertEquals(\"A500\", this.getStringEncoder().encode(\"Ann\"));\n        Assert.assertEquals(\"A536\", this.getStringEncoder().encode(\"Andrew\"));\n        Assert.assertEquals(\"J530\", this.getStringEncoder().encode(\"Janet\"));\n        Assert.assertEquals(\"M626\", this.getStringEncoder().encode(\"Margaret\"));\n        Assert.assertEquals(\"S315\", this.getStringEncoder().encode(\"Steven\"));\n        Assert.assertEquals(\"M240\", this.getStringEncoder().encode(\"Michael\"));\n        Assert.assertEquals(\"R163\", this.getStringEncoder().encode(\"Robert\"));\n        Assert.assertEquals(\"L600\", this.getStringEncoder().encode(\"Laura\"));\n        Assert.assertEquals(\"A500\", this.getStringEncoder().encode(\"Anne\"));\n    }",
        "begin_line": 300,
        "end_line": 311,
        "comment": "\n     * Examples for MS SQLServer from http://databases.about.com/library/weekly/aa042901a.htm\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 75)",
            "(line 303,col 9)-(line 303,col 78)",
            "(line 304,col 9)-(line 304,col 77)",
            "(line 305,col 9)-(line 305,col 80)",
            "(line 306,col 9)-(line 306,col 78)",
            "(line 307,col 9)-(line 307,col 79)",
            "(line 308,col 9)-(line 308,col 78)",
            "(line 309,col 9)-(line 309,col 77)",
            "(line 310,col 9)-(line 310,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testNewInstance()",
        "snippet": "    @Test\n    public void testNewInstance() {\n        Assert.assertEquals(\"W452\", new Soundex().soundex(\"Williams\"));\n    }",
        "begin_line": 316,
        "end_line": 319,
        "comment": "\n     * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56\n     ",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testNewInstance2()",
        "snippet": "    @Test\n    public void testNewInstance2() {\n        Assert.assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"Williams\"));\n    }",
        "begin_line": 321,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testNewInstance3()",
        "snippet": "    @Test\n    public void testNewInstance3() {\n        Assert.assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING).soundex(\"Williams\"));\n    }",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsConstructable()",
        "snippet": "    @Test\n    public void testSoundexUtilsConstructable() {\n        new SoundexUtils();\n    }",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour()",
        "snippet": "    @Test\n    public void testSoundexUtilsNullBehaviour() {\n        Assert.assertEquals(null, SoundexUtils.clean(null));\n        Assert.assertEquals(\"\", SoundexUtils.clean(\"\"));\n        Assert.assertEquals(0, SoundexUtils.differenceEncoded(null, \"\"));\n        Assert.assertEquals(0, SoundexUtils.differenceEncoded(\"\", null));\n    }",
        "begin_line": 336,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 60)",
            "(line 339,col 9)-(line 339,col 56)",
            "(line 340,col 9)-(line 340,col 73)",
            "(line 341,col 9)-(line 341,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic()",
        "snippet": "    @Test\n    public void testUsEnglishStatic() {\n        Assert.assertEquals(\"W452\", Soundex.US_ENGLISH.soundex(\"Williams\"));\n    }",
        "begin_line": 347,
        "end_line": 350,
        "comment": "\n     * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56\n     ",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute()",
        "snippet": "    @Test\n    public void testUsMappingEWithAcute() {\n        Assert.assertEquals(\"E000\", this.getStringEncoder().encode(\"e\"));\n        if (Character.isLetter('\\u00e9')) { // e-acute\n            try {\n                //         uppercase E-acute\n                Assert.assertEquals(\"\\u00c9000\", this.getStringEncoder().encode(\"\\u00e9\"));\n                Assert.fail(\"Expected IllegalArgumentException not thrown\");\n            } catch (final IllegalArgumentException e) {\n                // expected\n            }\n        } else {\n            Assert.assertEquals(\"\", this.getStringEncoder().encode(\"\\u00e9\"));\n        }\n    }",
        "begin_line": 357,
        "end_line": 371,
        "comment": "\n     * Fancy characters are not mapped by the default US mapping.\n     *\n     * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n     ",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 73)",
            "(line 360,col 9)-(line 370,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis()",
        "snippet": "    @Test\n    public void testUsMappingOWithDiaeresis() {\n        Assert.assertEquals(\"O000\", this.getStringEncoder().encode(\"o\"));\n        if (Character.isLetter('\\u00f6')) { // o-umlaut\n            try {\n                //         uppercase O-umlaut\n                Assert.assertEquals(\"\\u00d6000\", this.getStringEncoder().encode(\"\\u00f6\"));\n                Assert.fail(\"Expected IllegalArgumentException not thrown\");\n            } catch (final IllegalArgumentException e) {\n                // expected\n            }\n        } else {\n            Assert.assertEquals(\"\", this.getStringEncoder().encode(\"\\u00f6\"));\n        }\n    }",
        "begin_line": 378,
        "end_line": 392,
        "comment": "\n     * Fancy characters are not mapped by the default US mapping.\n     *\n     * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n     ",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 73)",
            "(line 381,col 9)-(line 391,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.SoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
        "signature": "org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex()",
        "snippet": "    @Test\n    public void testWikipediaAmericanSoundex() {\n        Assert.assertEquals(\"R163\", this.getStringEncoder().encode(\"Robert\"));\n        Assert.assertEquals(\"R163\", this.getStringEncoder().encode(\"Rupert\"));\n        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcraft\"));\n        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcroft\"));\n        Assert.assertEquals(\"T522\", this.getStringEncoder().encode(\"Tymczak\"));\n        Assert.assertEquals(\"P236\", this.getStringEncoder().encode(\"Pfister\"));\n    }",
        "begin_line": 397,
        "end_line": 405,
        "comment": "\n     * Tests example from http://en.wikipedia.org/wiki/Soundex#American_Soundex as of 2015-03-22.\n     ",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 78)",
            "(line 400,col 9)-(line 400,col 78)",
            "(line 401,col 9)-(line 401,col 80)",
            "(line 402,col 9)-(line 402,col 80)",
            "(line 403,col 9)-(line 403,col 79)",
            "(line 404,col 9)-(line 404,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved()",
        "snippet": "    @Test\n    public final void testAccentRemoval_AllLower_SuccessfullyRemoved() {\n        assertEquals(\"aeiou\", this.getStringEncoder().removeAccents(\"\u00e1\u00e9\u00ed\u00f3\u00fa\"));\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant()",
        "snippet": "    @Test\n    public final void testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant() {\n        assertEquals(\"ae io  u\", this.getStringEncoder().removeAccents(\"\u00e1\u00e9 \u00ed\u00f3  \u00fa\"));\n    }",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant()",
        "snippet": "    @Test\n    public final void testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant() {\n        assertEquals(\"AeiOuu\", this.getStringEncoder().removeAccents(\"\u00c1e\u00ed\u00d3uu\"));\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant()",
        "snippet": "    @Test\n    public final void testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant() {\n        assertEquals(\"A-e'i.,o&u\", this.getStringEncoder().removeAccents(\"\u00c1-e'\u00ed.,\u00f3&\u00fa\"));\n    }",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved()",
        "snippet": "    @Test\n    public final void testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved() {\n        assertEquals(\"aeou\u00dfAEOUnNa\", this.getStringEncoder().removeAccents(\"\u00e4\u00eb\u00f6\u00fc\u00df\u00c4\u00cb\u00d6\u00dc\u00f1\u00d1\u00e0\"));\n    }",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved()",
        "snippet": "    @Test\n    public final void testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved() {\n        assertEquals(\"E,E,E,E,U,U,I,I,A,A,O,e,e,e,e,u,u,i,i,a,a,o,c\",\n                this.getStringEncoder().removeAccents(\"\u00c8,\u00c9,\u00ca,\u00cb,\u00db,\u00d9,\u00cf,\u00ce,\u00c0,\u00c2,\u00d4,\u00e8,\u00e9,\u00ea,\u00eb,\u00fb,\u00f9,\u00ef,\u00ee,\u00e0,\u00e2,\u00f4,\u00e7\"));\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 67,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange()",
        "snippet": "    @Test\n    public final void testAccentRemovalNormalString_NoChange() {\n        assertEquals(\"Colorless green ideas sleep furiously\", this.getStringEncoder().removeAccents(\"Colorless green ideas sleep furiously\"));\n    }",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 142)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NINO_NoChange()",
        "snippet": "    @Test\n    public final void testAccentRemoval_NINO_NoChange() {\n        assertEquals(\"\", this.getStringEncoder().removeAccents(\"\"));\n    }",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_NullValue_ReturnNullSuccessfully()",
        "snippet": "    @Test\n    public final void testAccentRemoval_NullValue_ReturnNullSuccessfully() {\n        assertEquals(null, this.getStringEncoder().removeAccents(null));\n    }",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully()",
        "snippet": "    @Test\n    public final void testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully() {\n        assertEquals(\"BUBLE\", this.getStringEncoder().removeDoubleConsonants(\"BUBBLE\"));\n    }",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully()",
        "snippet": "    @Test\n    public final void testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully() {\n        assertEquals(\"MISISIPI\", this.getStringEncoder().removeDoubleConsonants(\"MISSISSIPPI\"));\n    }",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved()",
        "snippet": "    @Test\n    public final void testRemoveDoubleDoubleVowel_BEETLE_NotRemoved() {\n        assertEquals(\"BEETLE\", this.getStringEncoder().removeDoubleConsonants(\"BEETLE\"));\n    }",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_CapitalA_ReturnsTrue()",
        "snippet": "    @Test\n    public final void testIsVowel_CapitalA_ReturnsTrue() {\n        assertTrue(this.getStringEncoder().isVowel(\"A\"));\n    }",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testIsVowel_SmallD_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testIsVowel_SmallD_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isVowel(\"d\"));\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR()",
        "snippet": "    @Test\n    public final void testRemoveVowel_ALESSANDRA_Returns_ALSSNDR() {\n        assertEquals(\"ALSSNDR\", this.getStringEncoder().removeVowels(\"ALESSANDRA\"));\n    }",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN()",
        "snippet": "    @Test\n    public final void testRemoveVowel__AIDAN_Returns_ADN() {\n        assertEquals(\"ADN\", this.getStringEncoder().removeVowels(\"AIDAN\"));\n    }",
        "begin_line": 115,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__DECLAN_Returns_DCLN()",
        "snippet": "    @Test\n    public final void testRemoveVowel__DECLAN_Returns_DCLN() {\n        assertEquals(\"DCLN\", this.getStringEncoder().removeVowels(\"DECLAN\"));\n    }",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3__ALEXANDER_Returns_Aleder()",
        "snippet": "    @Test\n    public final void testGetFirstLast3__ALEXANDER_Returns_Aleder() {\n        assertEquals(\"Aleder\", this.getStringEncoder().getFirst3Last3(\"Alexzander\"));\n    }",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetFirstLast3_PETE_Returns_PETE()",
        "snippet": "    @Test\n    public final void testGetFirstLast3_PETE_Returns_PETE() {\n        assertEquals(\"PETE\", this.getStringEncoder().getFirst3Last3(\"PETE\"));\n    }",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4()",
        "snippet": "    @Test\n    public final void testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4() {\n        assertEquals(4, this.getStringEncoder().leftToRightThenRightToLeftProcessing(\"ALEXANDER\", \"ALEXANDRA\"));\n    }",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0()",
        "snippet": "    @Test\n    public final void testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0() {\n        assertEquals(0, this.getStringEncoder().leftToRightThenRightToLeftProcessing(\"EINSTEIN\", \"MICHAELA\"));\n    }",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully()",
        "snippet": "    @Test\n    public final void testGetMinRating_7_Return4_Successfully() {\n        assertEquals(4, this.getStringEncoder().getMinRating(7));\n    }",
        "begin_line": 145,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_1_Returns5_Successfully()",
        "snippet": "    @Test\n    public final void testGetMinRating_1_Returns5_Successfully() {\n        assertEquals(5, this.getStringEncoder().getMinRating(1));\n    }",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_2_Returns5_Successfully()",
        "snippet": "    @Test\n    public final void testGetMinRating_2_Returns5_Successfully() {\n        assertEquals(5, this.getStringEncoder().getMinRating(2));\n    }",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully()",
        "snippet": "    @Test\n    public final void testgetMinRating_5_Returns4_Successfully(){\n        assertEquals(4, this.getStringEncoder().getMinRating(5));\n    }",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2()",
        "snippet": "    @Test\n    public final void testgetMinRating_5_Returns4_Successfully2(){\n        assertEquals(4, this.getStringEncoder().getMinRating(5));\n    }",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully()",
        "snippet": "    @Test\n    public final void testgetMinRating_6_Returns4_Successfully(){\n        assertEquals(4, this.getStringEncoder().getMinRating(6));\n    }",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully()",
        "snippet": "    @Test\n    public final void testgetMinRating_7_Returns4_Successfully(){\n        assertEquals(4, this.getStringEncoder().getMinRating(7));\n    }",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully()",
        "snippet": "    @Test\n    public final void testgetMinRating_8_Returns3_Successfully(){\n        assertEquals(3, this.getStringEncoder().getMinRating(8));\n    }",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully()",
        "snippet": "    @Test\n    public final void testgetMinRating_10_Returns3_Successfully(){\n        assertEquals(3, this.getStringEncoder().getMinRating(10));\n    }",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully()",
        "snippet": "    @Test\n    public final void testgetMinRating_11_Returns_3_Successfully(){\n        assertEquals(3, this.getStringEncoder().getMinRating(11));\n    }",
        "begin_line": 190,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_13_Returns_1_Successfully()",
        "snippet": "    @Test\n    public final void testGetMinRating_13_Returns_1_Successfully() {\n        assertEquals(1, this.getStringEncoder().getMinRating(13));\n    }",
        "begin_line": 195,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean()",
        "snippet": "    @Test\n    public final void testcleanName_SuccessfullyClean() {\n        assertEquals(\"THISISATEST\", this.getStringEncoder().cleanName(\"This-\u00eds   a t.,es &t\"));\n    }",
        "begin_line": 200,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisVowel_SingleVowel_ReturnsTrue()",
        "snippet": "    @Test\n    public final void testisVowel_SingleVowel_ReturnsTrue() {\n        assertTrue(this.getStringEncoder().isVowel((\"I\")));\n    }",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"test\", \"\"));\n    }",
        "begin_line": 210,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"\", \"test\"));\n    }",
        "begin_line": 215,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"test\", \" \"));\n    }",
        "begin_line": 220,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\" \", \"test\"));\n    }",
        "begin_line": 225,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"test\", null));\n    }",
        "begin_line": 230,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(null, \"test\"));\n    }",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"t\", \"test\"));\n    }",
        "begin_line": 240,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse()",
        "snippet": "    @Test\n    public final void testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"test\", \"t\"));\n    }",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR()",
        "snippet": "    @Test\n    public final void testGetEncoding_HARPER_HRPR() {\n        assertEquals(\"HRPR\", this.getStringEncoder().encode(\"HARPER\"));\n    }",
        "begin_line": 254,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH()",
        "snippet": "    @Test\n    public final void testGetEncoding_SMITH_to_SMTH() {\n        assertEquals(\"SMTH\", this.getStringEncoder().encode(\"Smith\"));\n    }",
        "begin_line": 259,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH()",
        "snippet": "    @Test\n    public final void testGetEncoding_SMYTH_to_SMYTH() {\n        assertEquals(\"SMYTH\", this.getStringEncoder().encode(\"Smyth\"));\n    }",
        "begin_line": 264,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing()",
        "snippet": "    @Test\n    public final void testGetEncoding_Space_to_Nothing() {\n        assertEquals(\"\", this.getStringEncoder().encode(\" \"));\n    }",
        "begin_line": 269,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing()",
        "snippet": "    @Test\n    public final void testGetEncoding_NoSpace_to_Nothing() {\n        assertEquals(\"\", this.getStringEncoder().encode(\"\"));\n    }",
        "begin_line": 274,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing()",
        "snippet": "    @Test\n    public final void testGetEncoding_Null_to_Nothing() {\n        assertEquals(\"\", this.getStringEncoder().encode(null));\n    }",
        "begin_line": 279,
        "end_line": 282,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing()",
        "snippet": "    @Test\n    public final void testGetEncoding_One_Letter_to_Nothing() {\n        assertEquals(\"\", this.getStringEncoder().encode(\"E\"));\n    }",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully()",
        "snippet": "    @Test\n    public final void testCompareNameNullSpace_ReturnsFalseSuccessfully() {\n        assertFalse(getStringEncoder().isEncodeEquals(null, \" \"));\n    }",
        "begin_line": 289,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully()",
        "snippet": "    @Test\n    public final void testCompareNameSameNames_ReturnsFalseSuccessfully() {\n        assertTrue(getStringEncoder().isEncodeEquals(\"John\", \"John\"));\n    }",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_SMITH_SMYTH_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"smith\", \"smyth\"));\n    }",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_BURNS_BOURNE_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Burns\", \"Bourne\"));\n    }",
        "begin_line": 308,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch()",
        "snippet": "    @Test\n    public final void testCompare_ShortNames_AL_ED_WorksButNoMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Al\", \"Ed\"));\n    }",
        "begin_line": 313,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_CATHERINE_KATHRYN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Catherine\", \"Kathryn\"));\n    }",
        "begin_line": 318,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_BRIAN_BRYAN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Brian\", \"Bryan\"));\n    }",
        "begin_line": 323,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_SEAN_SHAUN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"S\u00e9an\", \"Shaun\"));\n    }",
        "begin_line": 328,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"C\u00f3lm.   \", \"C-ol\u00edn\"));\n    }",
        "begin_line": 333,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_STEPHEN_STEVEN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Stephen\", \"Steven\"));\n    }",
        "begin_line": 338,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_STEVEN_STEFAN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Steven\", \"Stefan\"));\n    }",
        "begin_line": 343,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_STEPHEN_STEFAN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Stephen\", \"Stefan\"));\n    }",
        "begin_line": 348,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_SAM_SAMUEL_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Sam\", \"Samuel\"));\n    }",
        "begin_line": 353,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_MICKY_MICHAEL_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Micky\", \"Michael\"));\n    }",
        "begin_line": 358,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_OONA_OONAGH_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Oona\", \"Oonagh\"));\n    }",
        "begin_line": 363,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_SOPHIE_SOFIA_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Sophie\", \"Sofia\"));\n    }",
        "begin_line": 368,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Franciszek\", \"Frances\"));\n    }",
        "begin_line": 373,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_TOMASZ_TOM_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Tomasz\", \"tom\"));\n    }",
        "begin_line": 378,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_SmallInput_CARK_Kl_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Kl\", \"Karl\"));\n    }",
        "begin_line": 383,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch()",
        "snippet": "    @Test\n    public final void testCompareNameToSingleLetter_KARL_C_DoesNotMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Karl\", \"C\"));\n    }",
        "begin_line": 388,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_ZACH_ZAKARIA_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Zach\", \"Zacharia\"));\n    }",
        "begin_line": 393,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch()",
        "snippet": "    @Test\n    public final void testCompare_KARL_ALESSANDRO_DoesNotMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Karl\", \"Alessandro\"));\n    }",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 400,col 9)-(line 400,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot()",
        "snippet": "    @Test\n    public final void testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"\u00dana\", \"Oonagh\")); // Disappointing\n    }",
        "begin_line": 403,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch()",
        "snippet": "    @Test\n    public final void testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"O'Sullivan\", \"\u00d3 ' S\u00failleabh\u00e1in\"));\n    }",
        "begin_line": 410,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch()",
        "snippet": "    @Test\n    public final void testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Moriarty\", \"OMuircheartaigh\"));\n    }",
        "begin_line": 415,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch()",
        "snippet": "    @Test\n    public final void testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"o'muireadhaigh\", \"\u00d3 'Muircheartaigh \"));\n    }",
        "begin_line": 420,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Cooper-Flynn\", \"Super-Lyn\"));\n    }",
        "begin_line": 425,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Hailey\", \"Halley\"));\n    }",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Auerbach\", \"Uhrbach\"));\n    }",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Moskowitz\", \"Moskovitz\"));\n    }",
        "begin_line": 442,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 444,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"LIPSHITZ\", \"LIPPSZYC\"));\n    }",
        "begin_line": 447,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"LEWINSKY\", \"LEVINSKI\"));\n    }",
        "begin_line": 452,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 454,col 9)-(line 454,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"SZLAMAWICZ\", \"SHLAMOVITZ\"));\n    }",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"R o s o ch o w a c ie c\", \" R o s o k ho v a ts e ts\"));\n    }",
        "begin_line": 462,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 115)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\" P rz e m y s l\", \" P sh e m e sh i l\"));\n    }",
        "begin_line": 467,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 469,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_PETERSON_PETERS_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Peterson\", \"Peters\"));\n    }",
        "begin_line": 474,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched()",
        "snippet": "    @Test\n    public final void testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"McGowan\", \"Mc Geoghegan\"));\n    }",
        "begin_line": 479,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 481,col 9)-(line 481,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch()",
        "snippet": "    @Test\n    public final void testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Murphy\", \" \"));\n    }",
        "begin_line": 484,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 486,col 9)-(line 486,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch()",
        "snippet": "    @Test\n    public final void testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Murphy\", \"\"));\n    }",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch()",
        "snippet": "    @Test\n    public final void testCompare_SurnameCornerCase_Nulls_NoMatch() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(null, null));\n    }",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 496,col 9)-(line 496,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected()",
        "snippet": "    @Test\n    public final void testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Murphy\", \"Lynch\"));\n    }",
        "begin_line": 499,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected()",
        "snippet": "    @Test\n    public final void testCompare_Forenames_SEAN_JOHN_MatchExpected() {\n        assertTrue(this.getStringEncoder().isEncodeEquals(\"Sean\", \"John\"));\n    }",
        "begin_line": 504,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 506,col 9)-(line 506,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected()",
        "snippet": "    @Test\n    public final void testCompare_Forenames_SEAN_PETE_NoMatchExpected() {\n        assertFalse(this.getStringEncoder().isEncodeEquals(\"Sean\", \"Pete\"));\n    }",
        "begin_line": 509,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
        "signature": "org.apache.commons.codec.language.MatchRatingApproachEncoderTest.createStringEncoder()",
        "snippet": "    @Override\n    protected MatchRatingApproachEncoder createStringEncoder() {\n        return new MatchRatingApproachEncoder();\n    }",
        "begin_line": 514,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 516,col 9)-(line 516,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.createStringEncoder()",
        "snippet": "    @Override\n    protected DaitchMokotoffSoundex createStringEncoder() {\n        return new DaitchMokotoffSoundex();\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.soundex(java.lang.String)",
        "snippet": "    private String soundex(final String source) {\n        return getStringEncoder().soundex(source);\n    }",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.encode(java.lang.String)",
        "snippet": "    private String encode(final String source) {\n        return getStringEncoder().encode(source);\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding()",
        "snippet": "    @Test\n    public void testAccentedCharacterFolding() {\n        Assert.assertEquals(\"294795\", soundex(\"Stra\u00dfburg\"));\n        Assert.assertEquals(\"294795\", soundex(\"Strasburg\"));\n\n        Assert.assertEquals(\"095600\", soundex(\"\u00c9regon\"));\n        Assert.assertEquals(\"095600\", soundex(\"Eregon\"));\n    }",
        "begin_line": 47,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 60)",
            "(line 50,col 9)-(line 50,col 60)",
            "(line 52,col 9)-(line 52,col 57)",
            "(line 53,col 9)-(line 53,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes()",
        "snippet": "    @Test\n    public void testAdjacentCodes() {\n        // AKSSOL\n        // A-KS-S-O-L\n        // 0-54-4---8 -> wrong\n        // 0-54-----8 -> correct\n        Assert.assertEquals(\"054800\", soundex(\"AKSSOL\"));\n\n        // GERSCHFELD\n        // G-E-RS-CH-F-E-L-D\n        // 5--4/94-5/4-7-8-3 -> wrong\n        // 5--4/94-5/--7-8-3 -> correct\n        Assert.assertEquals(\"547830|545783|594783|594578\", soundex(\"GERSCHFELD\"));\n    }",
        "begin_line": 56,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 57)",
            "(line 68,col 9)-(line 68,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeBasic()",
        "snippet": "    public void testEncodeBasic() {\n        // same as above, but without branching\n        Assert.assertEquals(\"097400\", encode(\"AUERBACH\"));\n        Assert.assertEquals(\"097400\", encode(\"OHRBACH\"));\n        Assert.assertEquals(\"874400\", encode(\"LIPSHITZ\"));\n        Assert.assertEquals(\"874400\", encode(\"LIPPSZYC\"));\n        Assert.assertEquals(\"876450\", encode(\"LEWINSKY\"));\n        Assert.assertEquals(\"876450\", encode(\"LEVINSKI\"));\n        Assert.assertEquals(\"486740\", encode(\"SZLAMAWICZ\"));\n        Assert.assertEquals(\"486740\", encode(\"SHLAMOVITZ\"));\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 58)",
            "(line 74,col 9)-(line 74,col 57)",
            "(line 75,col 9)-(line 75,col 58)",
            "(line 76,col 9)-(line 76,col 58)",
            "(line 77,col 9)-(line 77,col 58)",
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 80,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes()",
        "snippet": "    @Test\n    public void testEncodeIgnoreApostrophes() throws EncoderException {\n        this.checkEncodingVariations(\"079600\", new String[] { \"OBrien\", \"'OBrien\", \"O'Brien\", \"OB'rien\", \"OBr'ien\",\n                \"OBri'en\", \"OBrie'n\", \"OBrien'\" });\n    }",
        "begin_line": 83,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 86,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens()",
        "snippet": "    @Test\n    public void testEncodeIgnoreHyphens() throws EncoderException {\n        this.checkEncodingVariations(\"565463\", new String[] { \"KINGSMITH\", \"-KINGSMITH\", \"K-INGSMITH\", \"KI-NGSMITH\",\n                \"KIN-GSMITH\", \"KING-SMITH\", \"KINGS-MITH\", \"KINGSM-ITH\", \"KINGSMI-TH\", \"KINGSMIT-H\", \"KINGSMITH-\" });\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "\n     * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 97,col 116)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable()",
        "snippet": "    @Test\n    public void testEncodeIgnoreTrimmable() {\n        Assert.assertEquals(\"746536\", encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n        Assert.assertEquals(\"746536\", encode(\"Washington\"));\n    }",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 76)",
            "(line 103,col 9)-(line 103,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic()",
        "snippet": "    @Test\n    public void testSoundexBasic() {\n        Assert.assertEquals(\"583600\", soundex(\"GOLDEN\"));\n        Assert.assertEquals(\"087930\", soundex(\"Alpert\"));\n        Assert.assertEquals(\"791900\", soundex(\"Breuer\"));\n        Assert.assertEquals(\"579000\", soundex(\"Haber\"));\n        Assert.assertEquals(\"665600\", soundex(\"Mannheim\"));\n        Assert.assertEquals(\"664000\", soundex(\"Mintz\"));\n        Assert.assertEquals(\"370000\", soundex(\"Topf\"));\n        Assert.assertEquals(\"586660\", soundex(\"Kleinmann\"));\n        Assert.assertEquals(\"769600\", soundex(\"Ben Aron\"));\n\n        Assert.assertEquals(\"097400|097500\", soundex(\"AUERBACH\"));\n        Assert.assertEquals(\"097400|097500\", soundex(\"OHRBACH\"));\n        Assert.assertEquals(\"874400\", soundex(\"LIPSHITZ\"));\n        Assert.assertEquals(\"874400|874500\", soundex(\"LIPPSZYC\"));\n        Assert.assertEquals(\"876450\", soundex(\"LEWINSKY\"));\n        Assert.assertEquals(\"876450\", soundex(\"LEVINSKI\"));\n        Assert.assertEquals(\"486740\", soundex(\"SZLAMAWICZ\"));\n        Assert.assertEquals(\"486740\", soundex(\"SHLAMOVITZ\"));\n    }",
        "begin_line": 109,
        "end_line": 129,
        "comment": "\n     * Examples from http://www.jewishgen.org/infofiles/soundex.html\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 57)",
            "(line 112,col 9)-(line 112,col 57)",
            "(line 113,col 9)-(line 113,col 57)",
            "(line 114,col 9)-(line 114,col 56)",
            "(line 115,col 9)-(line 115,col 59)",
            "(line 116,col 9)-(line 116,col 56)",
            "(line 117,col 9)-(line 117,col 55)",
            "(line 118,col 9)-(line 118,col 60)",
            "(line 119,col 9)-(line 119,col 59)",
            "(line 121,col 9)-(line 121,col 66)",
            "(line 122,col 9)-(line 122,col 65)",
            "(line 123,col 9)-(line 123,col 59)",
            "(line 124,col 9)-(line 124,col 66)",
            "(line 125,col 9)-(line 125,col 59)",
            "(line 126,col 9)-(line 126,col 59)",
            "(line 127,col 9)-(line 127,col 61)",
            "(line 128,col 9)-(line 128,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2()",
        "snippet": "    @Test\n    public void testSoundexBasic2() {\n        Assert.assertEquals(\"467000|567000\", soundex(\"Ceniow\"));\n        Assert.assertEquals(\"467000\", soundex(\"Tsenyuv\"));\n        Assert.assertEquals(\"587400|587500\", soundex(\"Holubica\"));\n        Assert.assertEquals(\"587400\", soundex(\"Golubitsa\"));\n        Assert.assertEquals(\"746480|794648\", soundex(\"Przemysl\"));\n        Assert.assertEquals(\"746480\", soundex(\"Pshemeshil\"));\n        Assert.assertEquals(\"944744|944745|944754|944755|945744|945745|945754|945755\", soundex(\"Rosochowaciec\"));\n        Assert.assertEquals(\"945744\", soundex(\"Rosokhovatsets\"));\n    }",
        "begin_line": 134,
        "end_line": 144,
        "comment": "\n     * Examples from http://www.avotaynu.com/soundex.htm\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 64)",
            "(line 137,col 9)-(line 137,col 58)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 60)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 61)",
            "(line 142,col 9)-(line 142,col 113)",
            "(line 143,col 9)-(line 143,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3()",
        "snippet": "    @Test\n    public void testSoundexBasic3() {\n        Assert.assertEquals(\"734000|739400\", soundex(\"Peters\"));\n        Assert.assertEquals(\"734600|739460\", soundex(\"Peterson\"));\n        Assert.assertEquals(\"645740\", soundex(\"Moskowitz\"));\n        Assert.assertEquals(\"645740\", soundex(\"Moskovitz\"));\n        Assert.assertEquals(\"154600|145460|454600|445460\", soundex(\"Jackson\"));\n        Assert.assertEquals(\"154654|154645|154644|145465|145464|454654|454645|454644|445465|445464\",\n                soundex(\"Jackson-Jackson\"));\n    }",
        "begin_line": 149,
        "end_line": 158,
        "comment": "\n     * Examples from http://en.wikipedia.org/wiki/Daitch%E2%80%93Mokotoff_Soundex\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 64)",
            "(line 152,col 9)-(line 152,col 66)",
            "(line 153,col 9)-(line 153,col 60)",
            "(line 154,col 9)-(line 154,col 60)",
            "(line 155,col 9)-(line 155,col 79)",
            "(line 156,col 9)-(line 157,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
        "signature": "org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters()",
        "snippet": "    @Test\n    public void testSpecialRomanianCharacters() {\n        Assert.assertEquals(\"364000|464000\", soundex(\"\u0163amas\")); // t-cedilla\n        Assert.assertEquals(\"364000|464000\", soundex(\"\u021bamas\")); // t-comma\n    }",
        "begin_line": 160,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 63)",
            "(line 163,col 9)-(line 163,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone(int, boolean)",
        "snippet": "    private void checkDoubleMetaphone(final int typeIndex, final boolean alternate) {\n        for (int i = 0; i < TEST_DATA.length; i++) {\n            final String value = TEST_DATA[i][0];\n            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][typeIndex], this.getStringEncoder().doubleMetaphone(value, alternate));\n        }\n    }",
        "begin_line": 1264,
        "end_line": 1269,
        "comment": "",
        "child_ranges": [
            "(line 1265,col 9)-(line 1268,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.createStringEncoder()",
        "snippet": "    @Override\n    protected DoubleMetaphone createStringEncoder() {\n        return new DoubleMetaphone();\n    }",
        "begin_line": 1271,
        "end_line": 1274,
        "comment": "",
        "child_ranges": [
            "(line 1273,col 9)-(line 1273,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate()",
        "snippet": "    @Test\n    public void testDoubleMetaphoneAlternate() {\n        this.checkDoubleMetaphone(ALTERNATE_INDEX, true);\n    }",
        "begin_line": 1279,
        "end_line": 1282,
        "comment": "\n     * Test alternative encoding.\n     ",
        "child_ranges": [
            "(line 1281,col 9)-(line 1281,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphone2Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary()",
        "snippet": "    @Test\n    public void testDoubleMetaphonePrimary() {\n        this.checkDoubleMetaphone(PRIMARY_INDEX, false);\n    }",
        "begin_line": 1287,
        "end_line": 1290,
        "comment": "\n     * Test primary encoding.\n     ",
        "child_ranges": [
            "(line 1289,col 9)-(line 1289,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone(java.lang.String, java.lang.String)",
        "snippet": "    private void assertDoubleMetaphone(final String expected, final String source) {\n        assertEquals(expected, this.getStringEncoder().encode(source));\n        try {\n            assertEquals(expected, this.getStringEncoder().encode((Object) source));\n        } catch (final EncoderException e) {\n            fail(\"Unexpected expection: \" + e);\n        }\n        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source));\n        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source, false));\n    }",
        "begin_line": 1010,
        "end_line": 1019,
        "comment": "\n     * Tests encoding APIs in one place.\n     ",
        "child_ranges": [
            "(line 1011,col 9)-(line 1011,col 71)",
            "(line 1012,col 9)-(line 1016,col 9)",
            "(line 1017,col 9)-(line 1017,col 80)",
            "(line 1018,col 9)-(line 1018,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphoneAlt(java.lang.String, java.lang.String)",
        "snippet": "    public void assertDoubleMetaphoneAlt(final String expected, final String source) {\n        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source, true));\n    }",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "\n     * Tests encoding APIs in one place.\n     ",
        "child_ranges": [
            "(line 1025,col 9)-(line 1025,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.createStringEncoder()",
        "snippet": "    @Override\n    protected DoubleMetaphone createStringEncoder() {\n        return new DoubleMetaphone();\n    }",
        "begin_line": 1028,
        "end_line": 1031,
        "comment": "",
        "child_ranges": [
            "(line 1030,col 9)-(line 1030,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(java.lang.String[][], boolean)",
        "snippet": "    public void doubleMetaphoneEqualTest(final String[][] pairs, final boolean useAlternate) {\n        this.validateFixture(pairs);\n        for (final String[] pair : pairs) {\n            final String name0 = pair[0];\n            final String name1 = pair[1];\n            final String failMsg = \"Expected match between \" + name0 + \" and \" + name1 + \" (use alternate: \" + useAlternate + \")\";\n            assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, useAlternate));\n            assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name1, name0, useAlternate));\n            if (!useAlternate) {\n                assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1));\n                assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name1, name0));\n            }\n        }\n    }",
        "begin_line": 1033,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1034,col 9)-(line 1034,col 36)",
            "(line 1035,col 9)-(line 1045,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest(boolean)",
        "snippet": "    public void doubleMetaphoneNotEqualTest(final boolean alternate) {\n        assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Brain\", \"Band\", alternate));\n        assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Band\", \"Brain\", alternate));\n\n        if (!alternate) {\n            assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Brain\", \"Band\"));\n            assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Band\", \"Brain\"));\n        }\n    }",
        "begin_line": 1048,
        "end_line": 1056,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 9)-(line 1049,col 96)",
            "(line 1050,col 9)-(line 1050,col 96)",
            "(line 1052,col 9)-(line 1055,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla()",
        "snippet": "    @Test\n    public void testCCedilla() {\n        assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n    }",
        "begin_line": 1058,
        "end_line": 1061,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 9)-(line 1060,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184()",
        "snippet": "    @Test\n    public void testCodec184() throws Throwable {\n        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));\n        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));\n      }",
        "begin_line": 1063,
        "end_line": 1071,
        "comment": "",
        "child_ranges": [
            "(line 1065,col 9)-(line 1065,col 80)",
            "(line 1066,col 9)-(line 1066,col 79)",
            "(line 1067,col 9)-(line 1067,col 83)",
            "(line 1068,col 9)-(line 1068,col 82)",
            "(line 1069,col 9)-(line 1069,col 83)",
            "(line 1070,col 9)-(line 1070,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone()",
        "snippet": "    @Test\n    public void testDoubleMetaphone() {\n        assertDoubleMetaphone(\"TSTN\", \"testing\");\n        assertDoubleMetaphone(\"0\", \"The\");\n        assertDoubleMetaphone(\"KK\", \"quick\");\n        assertDoubleMetaphone(\"PRN\", \"brown\");\n        assertDoubleMetaphone(\"FKS\", \"fox\");\n        assertDoubleMetaphone(\"JMPT\", \"jumped\");\n        assertDoubleMetaphone(\"AFR\", \"over\");\n        assertDoubleMetaphone(\"0\", \"the\");\n        assertDoubleMetaphone(\"LS\", \"lazy\");\n        assertDoubleMetaphone(\"TKS\", \"dogs\");\n        assertDoubleMetaphone(\"MKFR\", \"MacCafferey\");\n        assertDoubleMetaphone(\"STFN\", \"Stephan\");\n        assertDoubleMetaphone(\"KSSK\", \"Kuczewski\");\n        assertDoubleMetaphone(\"MKLL\", \"McClelland\");\n        assertDoubleMetaphone(\"SNHS\", \"san jose\");\n        assertDoubleMetaphone(\"SNFP\", \"xenophobia\");\n\n        assertDoubleMetaphoneAlt(\"TSTN\", \"testing\");\n        assertDoubleMetaphoneAlt(\"T\", \"The\");\n        assertDoubleMetaphoneAlt(\"KK\", \"quick\");\n        assertDoubleMetaphoneAlt(\"PRN\", \"brown\");\n        assertDoubleMetaphoneAlt(\"FKS\", \"fox\");\n        assertDoubleMetaphoneAlt(\"AMPT\", \"jumped\");\n        assertDoubleMetaphoneAlt(\"AFR\", \"over\");\n        assertDoubleMetaphoneAlt(\"T\", \"the\");\n        assertDoubleMetaphoneAlt(\"LS\", \"lazy\");\n        assertDoubleMetaphoneAlt(\"TKS\", \"dogs\");\n        assertDoubleMetaphoneAlt(\"MKFR\", \"MacCafferey\");\n        assertDoubleMetaphoneAlt(\"STFN\", \"Stephan\");\n        assertDoubleMetaphoneAlt(\"KXFS\", \"Kutchefski\");\n        assertDoubleMetaphoneAlt(\"MKLL\", \"McClelland\");\n        assertDoubleMetaphoneAlt(\"SNHS\", \"san jose\");\n        assertDoubleMetaphoneAlt(\"SNFP\", \"xenophobia\");\n        assertDoubleMetaphoneAlt(\"FKR\", \"Fokker\");\n        assertDoubleMetaphoneAlt(\"AK\", \"Joqqi\");\n        assertDoubleMetaphoneAlt(\"HF\", \"Hovvi\");\n        assertDoubleMetaphoneAlt(\"XRN\", \"Czerny\");\n    }",
        "begin_line": 1073,
        "end_line": 1112,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 9)-(line 1075,col 49)",
            "(line 1076,col 9)-(line 1076,col 42)",
            "(line 1077,col 9)-(line 1077,col 45)",
            "(line 1078,col 9)-(line 1078,col 46)",
            "(line 1079,col 9)-(line 1079,col 44)",
            "(line 1080,col 9)-(line 1080,col 48)",
            "(line 1081,col 9)-(line 1081,col 45)",
            "(line 1082,col 9)-(line 1082,col 42)",
            "(line 1083,col 9)-(line 1083,col 44)",
            "(line 1084,col 9)-(line 1084,col 45)",
            "(line 1085,col 9)-(line 1085,col 53)",
            "(line 1086,col 9)-(line 1086,col 49)",
            "(line 1087,col 9)-(line 1087,col 51)",
            "(line 1088,col 9)-(line 1088,col 52)",
            "(line 1089,col 9)-(line 1089,col 50)",
            "(line 1090,col 9)-(line 1090,col 52)",
            "(line 1092,col 9)-(line 1092,col 52)",
            "(line 1093,col 9)-(line 1093,col 45)",
            "(line 1094,col 9)-(line 1094,col 48)",
            "(line 1095,col 9)-(line 1095,col 49)",
            "(line 1096,col 9)-(line 1096,col 47)",
            "(line 1097,col 9)-(line 1097,col 51)",
            "(line 1098,col 9)-(line 1098,col 48)",
            "(line 1099,col 9)-(line 1099,col 45)",
            "(line 1100,col 9)-(line 1100,col 47)",
            "(line 1101,col 9)-(line 1101,col 48)",
            "(line 1102,col 9)-(line 1102,col 56)",
            "(line 1103,col 9)-(line 1103,col 52)",
            "(line 1104,col 9)-(line 1104,col 55)",
            "(line 1105,col 9)-(line 1105,col 55)",
            "(line 1106,col 9)-(line 1106,col 53)",
            "(line 1107,col 9)-(line 1107,col 55)",
            "(line 1108,col 9)-(line 1108,col 50)",
            "(line 1109,col 9)-(line 1109,col 48)",
            "(line 1110,col 9)-(line 1110,col 48)",
            "(line 1111,col 9)-(line 1111,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty()",
        "snippet": "    @Test\n    public void testEmpty() {\n        assertEquals(null, this.getStringEncoder().doubleMetaphone(null));\n        assertEquals(null, this.getStringEncoder().doubleMetaphone(\"\"));\n        assertEquals(null, this.getStringEncoder().doubleMetaphone(\" \"));\n        assertEquals(null, this.getStringEncoder().doubleMetaphone(\"\\t\\n\\r \"));\n    }",
        "begin_line": 1114,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1116,col 9)-(line 1116,col 74)",
            "(line 1117,col 9)-(line 1117,col 72)",
            "(line 1118,col 9)-(line 1118,col 73)",
            "(line 1119,col 9)-(line 1119,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic()",
        "snippet": "    @Test\n    public void testIsDoubleMetaphoneEqualBasic() {\n        final String[][] testFixture = new String[][] { {\n                \"\", \"\" }, {\n                \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"cookie\", \"quick\" }, {\n                \"quick\", \"cookie\" }, {\n                \"Brian\", \"Bryan\" }, {\n                \"Auto\", \"Otto\" }, {\n                \"Steven\", \"Stefan\" }, {\n                \"Philipowitz\", \"Filipowicz\" }\n        };\n        doubleMetaphoneEqualTest(testFixture, false);\n        doubleMetaphoneEqualTest(testFixture, true);\n    }",
        "begin_line": 1122,
        "end_line": 1138,
        "comment": "",
        "child_ranges": [
            "(line 1124,col 9)-(line 1135,col 10)",
            "(line 1136,col 9)-(line 1136,col 53)",
            "(line 1137,col 9)-(line 1137,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended1()",
        "snippet": "    @Test\n    public void testIsDoubleMetaphoneEqualExtended1() {\n        //        String[][] testFixture = new String[][] { { \"Smith\", \"Schmidt\" }\n        //        };\n        //        doubleMetaphoneEqualTest(testFixture, false);\n        //        doubleMetaphoneEqualTest(testFixture, true);\n    }",
        "begin_line": 1143,
        "end_line": 1149,
        "comment": "\n     * Example in the original article but failures in this Java impl:\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2()",
        "snippet": "    @Test\n    public void testIsDoubleMetaphoneEqualExtended2() {\n        final String[][] testFixture = new String[][] { { \"Jablonski\", \"Yablonsky\" }\n        };\n        //doubleMetaphoneEqualTest(testFixture, false);\n        doubleMetaphoneEqualTest(testFixture, true);\n    }",
        "begin_line": 1151,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1153,col 9)-(line 1154,col 10)",
            "(line 1156,col 9)-(line 1156,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3()",
        "snippet": "    @Test\n    public void testIsDoubleMetaphoneEqualExtended3() {\n        this.validateFixture(FIXTURE);\n        final StringBuilder failures = new StringBuilder();\n        final StringBuilder matches = new StringBuilder();\n        final String cr = System.getProperty(\"line.separator\");\n        matches.append(\"private static final String[][] MATCHES = {\" + cr);\n        int failCount = 0;\n        for (int i = 0; i < FIXTURE.length; i++) {\n            final String name0 = FIXTURE[i][0];\n            final String name1 = FIXTURE[i][1];\n            final boolean match1 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, false);\n            final boolean match2 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, true);\n            if (match1 == false && match2 == false) {\n                final String failMsg = \"[\" + i + \"] \" + name0 + \" and \" + name1 + cr;\n                failures.append(failMsg);\n                failCount++;\n            } else {\n                matches.append(\"{\\\"\" + name0 + \"\\\", \\\"\" + name1 + \"\\\"},\" + cr);\n            }\n        }\n        matches.append(\"};\");\n        // Turn on to print a new MATCH array\n        //System.out.println(matches.toString());\n        if (failCount > 0) {\n            // Turn on to see which pairs do NOT match.\n            // String msg = failures.toString();\n            //fail(failCount + \" failures out of \" + FIXTURE.length + \". The\n            // following could be made to match: \" + cr + msg);\n        }\n    }",
        "begin_line": 1163,
        "end_line": 1193,
        "comment": "\n     * Used to generate the MATCHES array and test possible matches from the\n     * FIXTURE array.\n     ",
        "child_ranges": [
            "(line 1165,col 9)-(line 1165,col 38)",
            "(line 1166,col 9)-(line 1166,col 59)",
            "(line 1167,col 9)-(line 1167,col 58)",
            "(line 1168,col 9)-(line 1168,col 63)",
            "(line 1169,col 9)-(line 1169,col 75)",
            "(line 1170,col 9)-(line 1170,col 26)",
            "(line 1171,col 9)-(line 1183,col 9)",
            "(line 1184,col 9)-(line 1184,col 29)",
            "(line 1187,col 9)-(line 1192,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES()",
        "snippet": "    @Test\n    public void testIsDoubleMetaphoneEqualWithMATCHES() {\n        this.validateFixture(MATCHES);\n        for (int i = 0; i < MATCHES.length; i++) {\n            final String name0 = MATCHES[i][0];\n            final String name1 = MATCHES[i][1];\n            final boolean match1 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, false);\n            final boolean match2 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, true);\n            if (match1 == false && match2 == false) {\n                fail(\"Expected match [\" + i + \"] \" + name0 + \" and \" + name1);\n            }\n        }\n    }",
        "begin_line": 1195,
        "end_line": 1207,
        "comment": "",
        "child_ranges": [
            "(line 1197,col 9)-(line 1197,col 38)",
            "(line 1198,col 9)-(line 1206,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual()",
        "snippet": "    @Test\n    public void testIsDoubleMetaphoneNotEqual() {\n        doubleMetaphoneNotEqualTest(false);\n        doubleMetaphoneNotEqualTest(true);\n    }",
        "begin_line": 1209,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1211,col 9)-(line 1211,col 43)",
            "(line 1212,col 9)-(line 1212,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde()",
        "snippet": "    @Test\n    public void testNTilde() {\n        assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00f1\", \"N\")); // n-tilde\n    }",
        "begin_line": 1215,
        "end_line": 1218,
        "comment": "",
        "child_ranges": [
            "(line 1217,col 9)-(line 1217,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength()",
        "snippet": "    @Test\n    public void testSetMaxCodeLength() {\n        final String value = \"jumped\";\n\n        final DoubleMetaphone doubleMetaphone = new DoubleMetaphone();\n\n        // Sanity check of default settings\n        assertEquals(\"Default Max Code Length\", 4, doubleMetaphone.getMaxCodeLen());\n        assertEquals(\"Default Primary\",   \"JMPT\", doubleMetaphone.doubleMetaphone(value, false));\n        assertEquals(\"Default Alternate\", \"AMPT\", doubleMetaphone.doubleMetaphone(value, true));\n\n        // Check setting Max Code Length\n        doubleMetaphone.setMaxCodeLen(3);\n        assertEquals(\"Set Max Code Length\", 3, doubleMetaphone.getMaxCodeLen());\n        assertEquals(\"Max=3 Primary\",   \"JMP\", doubleMetaphone.doubleMetaphone(value, false));\n        assertEquals(\"Max=3 Alternate\", \"AMP\", doubleMetaphone.doubleMetaphone(value, true));\n    }",
        "begin_line": 1223,
        "end_line": 1239,
        "comment": "\n     * Test setting maximum length\n     ",
        "child_ranges": [
            "(line 1225,col 9)-(line 1225,col 38)",
            "(line 1227,col 9)-(line 1227,col 70)",
            "(line 1230,col 9)-(line 1230,col 84)",
            "(line 1231,col 9)-(line 1231,col 97)",
            "(line 1232,col 9)-(line 1232,col 96)",
            "(line 1235,col 9)-(line 1235,col 41)",
            "(line 1236,col 9)-(line 1236,col 80)",
            "(line 1237,col 9)-(line 1237,col 94)",
            "(line 1238,col 9)-(line 1238,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.DoubleMetaphoneTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "signature": "org.apache.commons.codec.language.DoubleMetaphoneTest.validateFixture(java.lang.String[][])",
        "snippet": "    public void validateFixture(final String[][] pairs) {\n        if (pairs.length == 0) {\n            fail(\"Test fixture is empty\");\n        }\n        for (int i = 0; i < pairs.length; i++) {\n            if (pairs[i].length != 2) {\n                fail(\"Error in test fixture in the data array at index \" + i);\n            }\n        }\n    }",
        "begin_line": 1241,
        "end_line": 1250,
        "comment": "",
        "child_ranges": [
            "(line 1242,col 9)-(line 1244,col 9)",
            "(line 1245,col 9)-(line 1249,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEnginePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEnginePerformanceTest.test()",
        "snippet": "    @Test\n    public void test() {\n        final PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);\n        final String input = \"Angelo\";\n        final long startMillis = System.currentTimeMillis();\n        for (int i = 0; i < LOOP; i++) {\n            engine.encode(input);\n        }\n        final long totalMillis = System.currentTimeMillis() - startMillis;\n        System.out.println(String.format(\"Time for encoding %,d times the input '%s': %,d millis.\", LOOP, input,\n                totalMillis));\n    }",
        "begin_line": 125,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 98)",
            "(line 128,col 9)-(line 128,col 38)",
            "(line 129,col 9)-(line 129,col 60)",
            "(line 130,col 9)-(line 132,col 9)",
            "(line 133,col 9)-(line 133,col 74)",
            "(line 134,col 9)-(line 135,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC()",
        "snippet": "    @Test\n    public void testSolrGENERIC() {\n        Map<String, String> args;\n\n        // concat is true, ruleType is EXACT\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"GENERIC\");\n        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"EXACT\");\n        assertEquals(encode(args, true, \"Angelo\"), \"anZelo|andZelo|angelo|anhelo|anjelo|anxelo\");\n        assertEquals(encode(args, true, \"D'Angelo\"), \"(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, true, \"Angelo\"), \"andZelo|angelo|anxelo\");\n        assertEquals(encode(args, true, \"1234\"), \"\");\n\n        // concat is false, ruleType is EXACT\n        args = new TreeMap<String, String>();\n        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"EXACT\");\n        assertEquals(encode(args, false, \"Angelo\"), \"anZelo|andZelo|angelo|anhelo|anjelo|anxelo\");\n        assertEquals(encode(args, false, \"D'Angelo\"), \"(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, false, \"Angelo\"), \"andZelo|angelo|anxelo\");\n        assertEquals(encode(args, false, \"1234\"), \"\");\n\n        // concat is true, ruleType is APPROX\n        args = new TreeMap<String, String>();\n        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"APPROX\");\n        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n        assertEquals(encode(args, true, \"D'Angelo\"), \"(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, true, \"Angelo\"), \"angilo|anxilo|anzilo|ongilo|onxilo|onzilo\");\n        assertEquals(encode(args, true, \"1234\"), \"\");\n\n        // concat is false, ruleType is APPROX\n        args = new TreeMap<String, String>();\n        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"APPROX\");\n        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n        assertEquals(encode(args, false, \"D'Angelo\"), \"(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, false, \"Angelo\"), \"angilo|anxilo|anzilo|ongilo|onxilo|onzilo\");\n        assertEquals(encode(args, false, \"1234\"), \"\");\n    }",
        "begin_line": 36,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 33)",
            "(line 41,col 9)-(line 41,col 45)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 162)",
            "(line 44,col 9)-(line 44,col 38)",
            "(line 45,col 9)-(line 45,col 97)",
            "(line 46,col 9)-(line 46,col 152)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 48,col 9)-(line 48,col 76)",
            "(line 49,col 9)-(line 49,col 53)",
            "(line 52,col 9)-(line 52,col 45)",
            "(line 53,col 9)-(line 53,col 163)",
            "(line 54,col 9)-(line 54,col 38)",
            "(line 55,col 9)-(line 55,col 98)",
            "(line 56,col 9)-(line 56,col 153)",
            "(line 57,col 9)-(line 57,col 57)",
            "(line 58,col 9)-(line 58,col 77)",
            "(line 59,col 9)-(line 59,col 54)",
            "(line 62,col 9)-(line 62,col 45)",
            "(line 63,col 9)-(line 63,col 162)",
            "(line 64,col 9)-(line 64,col 39)",
            "(line 65,col 9)-(line 65,col 162)",
            "(line 66,col 9)-(line 66,col 292)",
            "(line 67,col 9)-(line 67,col 57)",
            "(line 68,col 9)-(line 68,col 96)",
            "(line 69,col 9)-(line 69,col 53)",
            "(line 72,col 9)-(line 72,col 45)",
            "(line 73,col 9)-(line 73,col 163)",
            "(line 74,col 9)-(line 74,col 39)",
            "(line 75,col 9)-(line 75,col 163)",
            "(line 76,col 9)-(line 76,col 293)",
            "(line 77,col 9)-(line 77,col 57)",
            "(line 78,col 9)-(line 78,col 97)",
            "(line 79,col 9)-(line 79,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI()",
        "snippet": "    @Test\n    public void testSolrASHKENAZI() {\n        Map<String, String> args;\n\n        // concat is true, ruleType is EXACT\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"ASHKENAZI\");\n        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"EXACT\");\n        assertEquals(encode(args, true, \"Angelo\"), \"andZelo|angelo|anhelo|anxelo\");\n        assertEquals(encode(args, true, \"D'Angelo\"), \"dandZelo|dangelo|danhelo|danxelo\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, true, \"Angelo\"), \"angelo|anxelo\");\n        assertEquals(encode(args, true, \"1234\"), \"\");\n\n        // concat is false, ruleType is EXACT\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"ASHKENAZI\");\n        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"EXACT\");\n        assertEquals(encode(args, false, \"Angelo\"), \"andZelo|angelo|anhelo|anxelo\");\n        assertEquals(encode(args, false, \"D'Angelo\"), \"dandZelo|dangelo|danhelo|danxelo\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, false, \"Angelo\"), \"angelo|anxelo\");\n        assertEquals(encode(args, false, \"1234\"), \"\");\n\n        // concat is true, ruleType is APPROX\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"ASHKENAZI\");\n        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"APPROX\");\n        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n        assertEquals(encode(args, true, \"D'Angelo\"), \"dYngYlo|dYngilo|dangYlo|dangilo|danilo|danxilo|danzilo|dongYlo|dongilo|donilo|donxilo|donzilo\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, true, \"Angelo\"), \"angilo|anxilo|ongilo|onxilo\");\n        assertEquals(encode(args, true, \"1234\"), \"\");\n\n        // concat is false, ruleType is APPROX\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"ASHKENAZI\");\n        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n        args.put(\"ruleType\", \"APPROX\");\n        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n        assertEquals(encode(args, false, \"D'Angelo\"), \"dYngYlo|dYngilo|dangYlo|dangilo|danilo|danxilo|danzilo|dongYlo|dongilo|donilo|donxilo|donzilo\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, false, \"Angelo\"), \"angilo|anxilo|ongilo|onxilo\");\n        assertEquals(encode(args, false, \"1234\"), \"\");\n    }",
        "begin_line": 82,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 33)",
            "(line 87,col 9)-(line 87,col 45)",
            "(line 88,col 9)-(line 88,col 42)",
            "(line 89,col 9)-(line 89,col 136)",
            "(line 90,col 9)-(line 90,col 38)",
            "(line 91,col 9)-(line 91,col 83)",
            "(line 92,col 9)-(line 92,col 89)",
            "(line 93,col 9)-(line 93,col 57)",
            "(line 94,col 9)-(line 94,col 68)",
            "(line 95,col 9)-(line 95,col 53)",
            "(line 98,col 9)-(line 98,col 45)",
            "(line 99,col 9)-(line 99,col 42)",
            "(line 100,col 9)-(line 100,col 137)",
            "(line 101,col 9)-(line 101,col 38)",
            "(line 102,col 9)-(line 102,col 84)",
            "(line 103,col 9)-(line 103,col 90)",
            "(line 104,col 9)-(line 104,col 57)",
            "(line 105,col 9)-(line 105,col 69)",
            "(line 106,col 9)-(line 106,col 54)",
            "(line 109,col 9)-(line 109,col 45)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 136)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 113,col 9)-(line 113,col 136)",
            "(line 114,col 9)-(line 114,col 150)",
            "(line 115,col 9)-(line 115,col 57)",
            "(line 116,col 9)-(line 116,col 82)",
            "(line 117,col 9)-(line 117,col 53)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 42)",
            "(line 122,col 9)-(line 122,col 137)",
            "(line 123,col 9)-(line 123,col 39)",
            "(line 124,col 9)-(line 124,col 137)",
            "(line 125,col 9)-(line 125,col 151)",
            "(line 126,col 9)-(line 126,col 57)",
            "(line 127,col 9)-(line 127,col 83)",
            "(line 128,col 9)-(line 128,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC()",
        "snippet": "    @Test\n    public void testSolrSEPHARDIC() {\n        Map<String, String> args;\n\n        // concat is true, ruleType is EXACT\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"SEPHARDIC\");\n        assertEquals(encode(args, true, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        args.put(\"ruleType\", \"EXACT\");\n        assertEquals(encode(args, true, \"Angelo\"), \"anZelo|andZelo|anxelo\");\n        assertEquals(encode(args, true, \"D'Angelo\"), \"anZelo|andZelo|anxelo\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, true, \"Angelo\"), \"andZelo|anxelo\");\n        assertEquals(encode(args, true, \"1234\"), \"\");\n\n        // concat is false, ruleType is EXACT\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"SEPHARDIC\");\n        assertEquals(encode(args, false, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        args.put(\"ruleType\", \"EXACT\");\n        assertEquals(encode(args, false, \"Angelo\"), \"anZelo|andZelo|anxelo\");\n        assertEquals(encode(args, false, \"D'Angelo\"), \"danZelo|dandZelo|danxelo\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, false, \"Angelo\"), \"andZelo|anxelo\");\n        assertEquals(encode(args, false, \"1234\"), \"\");\n\n        // concat is true, ruleType is APPROX\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"SEPHARDIC\");\n        assertEquals(encode(args, true, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        args.put(\"ruleType\", \"APPROX\");\n        assertEquals(encode(args, true, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        assertEquals(encode(args, true, \"D'Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, true, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        assertEquals(encode(args, true, \"1234\"), \"\");\n\n        // concat is false, ruleType is APPROX\n        args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"SEPHARDIC\");\n        assertEquals(encode(args, false, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        args.put(\"ruleType\", \"APPROX\");\n        assertEquals(encode(args, false, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        assertEquals(encode(args, false, \"D'Angelo\"), \"danhila|danhilu|danzila|danzilu|nhila|nhilu|nzila|nzilu\");\n        args.put(\"languageSet\", \"italian,greek,spanish\");\n        assertEquals(encode(args, false, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n        assertEquals(encode(args, false, \"1234\"), \"\");\n    }",
        "begin_line": 131,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 33)",
            "(line 136,col 9)-(line 136,col 45)",
            "(line 137,col 9)-(line 137,col 42)",
            "(line 138,col 9)-(line 138,col 106)",
            "(line 139,col 9)-(line 139,col 38)",
            "(line 140,col 9)-(line 140,col 76)",
            "(line 141,col 9)-(line 141,col 78)",
            "(line 142,col 9)-(line 142,col 57)",
            "(line 143,col 9)-(line 143,col 69)",
            "(line 144,col 9)-(line 144,col 53)",
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 42)",
            "(line 149,col 9)-(line 149,col 107)",
            "(line 150,col 9)-(line 150,col 38)",
            "(line 151,col 9)-(line 151,col 77)",
            "(line 152,col 9)-(line 152,col 82)",
            "(line 153,col 9)-(line 153,col 57)",
            "(line 154,col 9)-(line 154,col 70)",
            "(line 155,col 9)-(line 155,col 54)",
            "(line 158,col 9)-(line 158,col 45)",
            "(line 159,col 9)-(line 159,col 42)",
            "(line 160,col 9)-(line 160,col 106)",
            "(line 161,col 9)-(line 161,col 39)",
            "(line 162,col 9)-(line 162,col 106)",
            "(line 163,col 9)-(line 163,col 108)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 106)",
            "(line 166,col 9)-(line 166,col 53)",
            "(line 169,col 9)-(line 169,col 45)",
            "(line 170,col 9)-(line 170,col 42)",
            "(line 171,col 9)-(line 171,col 107)",
            "(line 172,col 9)-(line 172,col 39)",
            "(line 173,col 9)-(line 173,col 107)",
            "(line 174,col 9)-(line 174,col 113)",
            "(line 175,col 9)-(line 175,col 57)",
            "(line 176,col 9)-(line 176,col 107)",
            "(line 177,col 9)-(line 177,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion()",
        "snippet": "    @Test\n    public void testCompatibilityWithOriginalVersion() {\n        // see CODEC-187\n        // comparison: http://stevemorse.org/census/soundex.html\n\n        final Map<String, String> args = new TreeMap<String, String>();\n        args.put(\"nameType\", \"GENERIC\");\n        args.put(\"ruleType\", \"APPROX\");\n\n        assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom\");\n        assertEquals(encode(args, true, \"Bendzin\"), \"bndzn|bntsn|bnzn|vndzn|vntsn\");\n\n        args.put(\"nameType\", \"ASHKENAZI\");\n        args.put(\"ruleType\", \"APPROX\");\n\n        assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abrom|avram|avrom|imbram|imbrom|obram|obrom|ombram|ombrom|ovram|ovrom\");\n        assertEquals(encode(args, true, \"Halpern\"), \"YlpYrn|Ylpirn|alpYrn|alpirn|olpYrn|olpirn|xalpirn|xolpirn\");\n\n    }",
        "begin_line": 180,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 71)",
            "(line 186,col 9)-(line 186,col 40)",
            "(line 187,col 9)-(line 187,col 39)",
            "(line 189,col 9)-(line 189,col 137)",
            "(line 190,col 9)-(line 190,col 84)",
            "(line 192,col 9)-(line 192,col 42)",
            "(line 193,col 9)-(line 193,col 39)",
            "(line 195,col 9)-(line 195,col 141)",
            "(line 196,col 9)-(line 196,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.encode(java.util.Map<java.lang.String, java.lang.String>, boolean, java.lang.String)",
        "snippet": "    private static String encode(final Map<String, String> args, final boolean concat, final String input) {\n        Languages.LanguageSet languageSet;\n        PhoneticEngine engine;\n\n        // PhoneticEngine = NameType + RuleType + concat\n        // we use common-codec's defaults: GENERIC + APPROX + true\n        final String nameTypeArg = args.get(\"nameType\");\n        final NameType nameType = (nameTypeArg == null) ? NameType.GENERIC : NameType.valueOf(nameTypeArg);\n\n        final String ruleTypeArg = args.get(\"ruleType\");\n        final RuleType ruleType = (ruleTypeArg == null) ? RuleType.APPROX : RuleType.valueOf(ruleTypeArg);\n\n        engine = new PhoneticEngine(nameType, ruleType, concat);\n\n        // LanguageSet: defaults to automagic, otherwise a comma-separated list.\n        final String languageSetArg = args.get(\"languageSet\");\n        if (languageSetArg == null || languageSetArg.equals(\"auto\")) {\n            languageSet = null;\n        } else {\n            languageSet = Languages.LanguageSet.from(new HashSet<String>(Arrays.asList(languageSetArg.split(\",\"))));\n        }\n\n        /*\n            org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java (lines 96-98) does this:\n\n            encoded = (languages == null)\n                ? engine.encode(termAtt.toString())\n                : engine.encode(termAtt.toString(), languages);\n\n            Hence our approach, below:\n        */\n        if (languageSet == null) {\n            return engine.encode(input);\n        }\n        return engine.encode(input, languageSet);\n    }",
        "begin_line": 207,
        "end_line": 242,
        "comment": "\n     * This code is similar in style to code found in Solr:\n     * solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java\n     *\n     * Making a JUnit test out of it to protect Solr from possible future\n     * regressions in Commons-Codec.\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 42)",
            "(line 209,col 9)-(line 209,col 30)",
            "(line 213,col 9)-(line 213,col 56)",
            "(line 214,col 9)-(line 214,col 107)",
            "(line 216,col 9)-(line 216,col 56)",
            "(line 217,col 9)-(line 217,col 106)",
            "(line 219,col 9)-(line 219,col 64)",
            "(line 222,col 9)-(line 222,col 62)",
            "(line 223,col 9)-(line 227,col 9)",
            "(line 238,col 9)-(line 240,col 9)",
            "(line 241,col 9)-(line 241,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineTest.data()",
        "snippet": "    @Parameterized.Parameters(name = \"{0}-{1}-{2}-{3}\")\n    public static List<Object[]> data() {\n        return Arrays\n                .asList(new Object[] { \"Renault\", \"rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult\", NameType.GENERIC, RuleType.APPROX, Boolean.TRUE, TEN },\n                        new Object[] { \"Renault\", \"rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinolt|rinult\", NameType.ASHKENAZI, RuleType.APPROX, Boolean.TRUE, TEN },\n                        new Object[] { \"Renault\", \"rinDlt\", NameType.ASHKENAZI, RuleType.APPROX, Boolean.TRUE, Integer.valueOf(1) },\n                        new Object[] { \"Renault\", \"rinDlt\", NameType.SEPHARDIC, RuleType.APPROX, Boolean.TRUE, TEN },\n                        new Object[] { \"SntJohn-Smith\", \"sntjonsmit\", NameType.GENERIC, RuleType.EXACT, Boolean.TRUE, TEN },\n                        new Object[] { \"d'ortley\", \"(ortlaj|ortlej)-(dortlaj|dortlej)\", NameType.GENERIC, RuleType.EXACT, Boolean.TRUE, TEN },\n                        new Object[] {\n                                \"van helsing\",\n                                \"(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)\",\n                                NameType.GENERIC,\n                                RuleType.EXACT,\n                                Boolean.FALSE, TEN },\n                        new Object[] {\n                                \"Judenburg\",\n                                \"iudnbYrk|iudnbirk|iudnburk|xudnbirk|xudnburk|zudnbirk|zudnburk\",\n                                NameType.GENERIC,\n                                RuleType.APPROX,\n                                Boolean.TRUE, TEN });\n    }",
        "begin_line": 40,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 60,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineTest.PhoneticEngineTest(java.lang.String, java.lang.String, org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean, int)",
        "snippet": "    public PhoneticEngineTest(final String name, final String phoneticExpected, final NameType nameType,\n                              final RuleType ruleType, final boolean concat, final int maxPhonemes) {\n        this.name = name;\n        this.phoneticExpected = phoneticExpected;\n        this.nameType = nameType;\n        this.ruleType = ruleType;\n        this.concat = concat;\n        this.maxPhonemes = maxPhonemes;\n    }",
        "begin_line": 70,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 25)",
            "(line 73,col 9)-(line 73,col 49)",
            "(line 74,col 9)-(line 74,col 33)",
            "(line 75,col 9)-(line 75,col 33)",
            "(line 76,col 9)-(line 76,col 29)",
            "(line 77,col 9)-(line 77,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.PhoneticEngineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
        "signature": "org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode()",
        "snippet": "    @Test(timeout = 10000L)\n    public void testEncode() {\n        final PhoneticEngine engine = new PhoneticEngine(this.nameType, this.ruleType, this.concat, this.maxPhonemes);\n\n        final String phoneticActual = engine.encode(this.name);\n\n        //System.err.println(\"expecting: \" + this.phoneticExpected);\n        //System.err.println(\"actual:    \" + phoneticActual);\n        assertEquals(\"phoneme incorrect\", this.phoneticExpected, phoneticActual);\n\n        if (this.concat) {\n            final String[] split = phoneticActual.split(\"\\\\|\");\n            assertTrue(split.length <= this.maxPhonemes);\n        } else {\n            final String[] words = phoneticActual.split(\"-\");\n            for (final String word : words) {\n                final String[] split = word.split(\"\\\\|\");\n                assertTrue(split.length <= this.maxPhonemes);\n            }\n        }\n    }",
        "begin_line": 80,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 118)",
            "(line 84,col 9)-(line 84,col 63)",
            "(line 88,col 9)-(line 88,col 81)",
            "(line 90,col 9)-(line 99,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder, java.lang.String)",
        "snippet": "    private void assertNotEmpty(final BeiderMorseEncoder bmpm, final String value) throws EncoderException {\n        Assert.assertFalse(value, bmpm.encode(value).equals(\"\"));\n    }",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createGenericApproxEncoder()",
        "snippet": "    private BeiderMorseEncoder createGenericApproxEncoder() {\n        final BeiderMorseEncoder encoder = new BeiderMorseEncoder();\n        encoder.setNameType(NameType.GENERIC);\n        encoder.setRuleType(RuleType.APPROX);\n        return encoder;\n    }",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 68)",
            "(line 44,col 9)-(line 44,col 46)",
            "(line 45,col 9)-(line 45,col 45)",
            "(line 46,col 9)-(line 46,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.createStringEncoder()",
        "snippet": "    @Override\n    protected StringEncoder createStringEncoder() {\n        return new BeiderMorseEncoder();\n    }",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars()",
        "snippet": "    @Test\n    public void testAllChars() throws EncoderException {\n        final BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n        for (char c = Character.MIN_VALUE; c < Character.MAX_VALUE; c++) {\n            bmpm.encode(Character.toString(c));\n        }\n    }",
        "begin_line": 59,
        "end_line": 65,
        "comment": "\n     * Tests we do not blow up.\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 69)",
            "(line 62,col 9)-(line 64,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter()",
        "snippet": "    @Test\n    public void testAsciiEncodeNotEmpty1Letter() throws EncoderException {\n        final BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n        for (char c = 'a'; c <= 'z'; c++) {\n            final String value = Character.toString(c);\n            final String valueU = value.toUpperCase();\n            assertNotEmpty(bmpm, value);\n            assertNotEmpty(bmpm, valueU);\n        }\n    }",
        "begin_line": 67,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 69)",
            "(line 70,col 9)-(line 75,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters()",
        "snippet": "    @Test\n    public void testAsciiEncodeNotEmpty2Letters() throws EncoderException {\n        final BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n        for (char c1 = 'a'; c1 <= 'z'; c1++) {\n            for (char c2 = 'a'; c2 <= 'z'; c2++) {\n                final String value = new String(new char[] { c1, c2 });\n                final String valueU = value.toUpperCase();\n                assertNotEmpty(bmpm, value);\n                assertNotEmpty(bmpm, valueU);\n            }\n        }\n    }",
        "begin_line": 78,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 69)",
            "(line 81,col 9)-(line 88,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty()",
        "snippet": "    @Test\n    public void testEncodeAtzNotEmpty() throws EncoderException {\n        final BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n        //String[] names = { \"\u00e1cz\", \"\u00e1tz\", \"Ign\u00e1cz\", \"Ign\u00e1tz\", \"Ign\u00e1c\" };\n        final String[] names = { \"\\u00e1cz\", \"\\u00e1tz\", \"Ign\\u00e1cz\", \"Ign\\u00e1tz\", \"Ign\\u00e1c\" };\n        for (final String name : names) {\n            assertNotEmpty(bmpm, name);\n        }\n    }",
        "begin_line": 91,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 69)",
            "(line 95,col 9)-(line 95,col 102)",
            "(line 96,col 9)-(line 98,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna()",
        "snippet": "    @Test\n    public void testEncodeGna() throws EncoderException {\n        final BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n        bmpm.encode(\"gna\");\n    }",
        "begin_line": 107,
        "end_line": 111,
        "comment": "\n     * Tests https://issues.apache.org/jira/browse/CODEC-125?focusedCommentId=13071566&page=com.atlassian.jira.plugin.system.issuetabpanels:\n     * comment-tabpanel#comment-13071566\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 69)",
            "(line 110,col 9)-(line 110,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidLangIllegalArgumentException() {\n        Rule.getInstance(NameType.GENERIC, RuleType.APPROX, \"noSuchLanguage\");\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException()",
        "snippet": "    @Test(expected = IllegalStateException.class)\n    public void testInvalidLangIllegalStateException() {\n        Lang.loadFromResource(\"thisIsAMadeUpResourceName\", Languages.getInstance(NameType.GENERIC));\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidLanguageIllegalArgumentException() {\n        Languages.getInstance(\"thereIsNoSuchLanguage\");\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname()",
        "snippet": "    @Test(timeout = 10000L)\n    public void testLongestEnglishSurname() throws EncoderException {\n        final BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n        bmpm.encode(\"MacGhilleseatheanaich\");\n    }",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 69)",
            "(line 131,col 9)-(line 131,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException()",
        "snippet": "    @Test(expected = IndexOutOfBoundsException.class)\n    public void testNegativeIndexForRuleMatchIndexOutOfBoundsException() {\n        final Rule r = new Rule(\"a\", \"\", \"\", new Rule.Phoneme(\"\", Languages.ANY_LANGUAGE));\n        r.patternAndContextMatches(\"bob\", -1);\n    }",
        "begin_line": 134,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 91)",
            "(line 137,col 9)-(line 137,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM()",
        "snippet": "    @Test\n    public void testOOM() throws EncoderException {\n        final String phrase = \"200697900'-->&#1913348150;</  bceaeef >aadaabcf\\\"aedfbff<!--\\'-->?>cae\"\n                + \"cfaaa><?&#<!--</script>&lang&fc;aadeaf?>>&bdquo<    cc =\\\"abff\\\"    /></   afe  >\"\n                + \"<script><!-- f(';<    cf aefbeef = \\\"bfabadcf\\\" ebbfeedd = fccabeb >\";\n\n        final BeiderMorseEncoder encoder = new BeiderMorseEncoder();\n        encoder.setNameType(NameType.GENERIC);\n        encoder.setRuleType(RuleType.EXACT);\n        encoder.setMaxPhonemes(10);\n\n        final String phonemes = encoder.encode(phrase);\n        assertTrue(phonemes.length() > 0);\n\n        final String[] phonemeArr = phonemes.split(\"\\\\|\");\n        assertTrue(phonemeArr.length <= 10);\n    }",
        "begin_line": 140,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 144,col 89)",
            "(line 146,col 9)-(line 146,col 68)",
            "(line 147,col 9)-(line 147,col 46)",
            "(line 148,col 9)-(line 148,col 44)",
            "(line 149,col 9)-(line 149,col 35)",
            "(line 151,col 9)-(line 151,col 55)",
            "(line 152,col 9)-(line 152,col 42)",
            "(line 154,col 9)-(line 154,col 58)",
            "(line 155,col 9)-(line 155,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat()",
        "snippet": "    @Test\n    public void testSetConcat() {\n        final BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n        bmpm.setConcat(false);\n        assertFalse(\"Should be able to set concat to false\", bmpm.isConcat());\n    }",
        "begin_line": 158,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 65)",
            "(line 161,col 9)-(line 161,col 30)",
            "(line 162,col 9)-(line 162,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh()",
        "snippet": "    @Test\n    public void testSetNameTypeAsh() {\n        final BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n        bmpm.setNameType(NameType.ASHKENAZI);\n        assertEquals(\"Name type should have been set to ash\", NameType.ASHKENAZI, bmpm.getNameType());\n    }",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 65)",
            "(line 168,col 9)-(line 168,col 45)",
            "(line 169,col 9)-(line 169,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact()",
        "snippet": "    @Test\n    public void testSetRuleTypeExact() {\n        final BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n        bmpm.setRuleType(RuleType.EXACT);\n        assertEquals(\"Rule type should have been set to exact\", RuleType.EXACT, bmpm.getRuleType());\n    }",
        "begin_line": 172,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 65)",
            "(line 175,col 9)-(line 175,col 41)",
            "(line 176,col 9)-(line 176,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testSetRuleTypeToRulesIllegalArgumentException() {\n        final BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n        bmpm.setRuleType(RuleType.RULES);\n    }",
        "begin_line": 179,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 65)",
            "(line 182,col 9)-(line 182,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck()",
        "snippet": "    @Test(/* timeout = 20000L */)\n    public void testSpeedCheck() throws EncoderException {\n        final BeiderMorseEncoder bmpm = this.createGenericApproxEncoder();\n        final StringBuilder stringBuffer = new StringBuilder();\n        stringBuffer.append(TEST_CHARS[0]);\n        for (int i = 0, j = 1; i < 40; i++, j++) {\n            if (j == TEST_CHARS.length) {\n                j = 0;\n            }\n            bmpm.encode(stringBuffer.toString());\n            stringBuffer.append(TEST_CHARS[j]);\n        }\n    }",
        "begin_line": 190,
        "end_line": 202,
        "comment": "\n     * (Un)luckily, the worse performing test because of the data in {@link #TEST_CHARS}\n     *\n     * @throws EncoderException\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 74)",
            "(line 193,col 9)-(line 193,col 63)",
            "(line 194,col 9)-(line 194,col 43)",
            "(line 195,col 9)-(line 201,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2()",
        "snippet": "    @Test\n    public void testSpeedCheck2() throws EncoderException {\n        final BeiderMorseEncoder bmpm = this.createGenericApproxEncoder();\n        final String phrase = \"ItstheendoftheworldasweknowitandIfeelfine\";\n\n        for (int i = 1; i <= phrase.length(); i++) {\n            bmpm.encode(phrase.subSequence(0, i));\n        }\n    }",
        "begin_line": 204,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 74)",
            "(line 207,col 9)-(line 207,col 74)",
            "(line 209,col 9)-(line 211,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
        "signature": "org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3()",
        "snippet": "    @Test\n    public void testSpeedCheck3() throws EncoderException {\n        final BeiderMorseEncoder bmpm = this.createGenericApproxEncoder();\n        final String phrase = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";\n\n        for (int i = 1; i <= phrase.length(); i++) {\n            bmpm.encode(phrase.subSequence(0, i));\n        }\n    }",
        "begin_line": 214,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 74)",
            "(line 217,col 9)-(line 217,col 85)",
            "(line 219,col 9)-(line 221,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test()",
        "snippet": "    @Test\n    public void test() {\n        final int times = 10000000;\n        System.out.print(\"Test with String : \");\n        test(\"Angelo\", times);\n        System.out.print(\"Test with StringBuilder : \");\n        test(new StringBuilder(\"Angelo\"), times);\n        System.out.print(\"Test with cached String : \");\n        test(cacheSubSequence(\"Angelo\"), times);\n        System.out.print(\"Test with cached StringBuilder : \");\n        test(cacheSubSequence(new StringBuilder(\"Angelo\")), times);\n    }",
        "begin_line": 24,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 35)",
            "(line 27,col 9)-(line 27,col 48)",
            "(line 28,col 9)-(line 28,col 30)",
            "(line 29,col 9)-(line 29,col 55)",
            "(line 30,col 9)-(line 30,col 49)",
            "(line 31,col 9)-(line 31,col 55)",
            "(line 32,col 9)-(line 32,col 48)",
            "(line 33,col 9)-(line 33,col 62)",
            "(line 34,col 9)-(line 34,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence, int)",
        "snippet": "    private void test(final CharSequence input, final int times) {\n        final long beginTime = System.currentTimeMillis();\n        for (int i = 0; i < times; i++) {\n            test(input);\n        }\n        System.out.println(System.currentTimeMillis() - beginTime + \" millis\");\n    }",
        "begin_line": 37,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 58)",
            "(line 39,col 9)-(line 41,col 9)",
            "(line 42,col 9)-(line 42,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.test(java.lang.CharSequence)",
        "snippet": "    private void test(final CharSequence input) {\n        for (int i = 0; i < input.length(); i++) {\n            for (int j = i; j <= input.length(); j++) {\n                input.subSequence(i, j);\n            }\n        }\n    }",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 50,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.cacheSubSequence(java.lang.CharSequence)",
        "snippet": "    private CharSequence cacheSubSequence(final CharSequence cached) {\n        final CharSequence[][] cache = new CharSequence[cached.length()][cached.length()];\n        return new CharSequence() {\n            @Override\n            public char charAt(final int index) {\n                return cached.charAt(index);\n            }\n\n            @Override\n            public int length() {\n                return cached.length();\n            }\n\n            @Override\n            public CharSequence subSequence(final int start, final int end) {\n                if (start == end) {\n                    return \"\";\n                }\n                CharSequence res = cache[start][end - 1];\n                if (res == null) {\n                    res = cached.subSequence(start, end);\n                    cache[start][end - 1] = res;\n                }\n                return res;\n            }\n        };\n    }",
        "begin_line": 53,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 90)",
            "(line 55,col 9)-(line 78,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.Anonymous-956e7c11-ad08-456c-8398-177b8f73f191.charAt(int)",
        "snippet": "            @Override\n            public char charAt(final int index) {\n                return cached.charAt(index);\n            }",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 58,col 17)-(line 58,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.Anonymous-3c2482fb-7347-47f4-8ba9-c54a6043b576.length()",
        "snippet": "            @Override\n            public int length() {\n                return cached.length();\n            }",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 17)-(line 63,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
        "signature": "org.apache.commons.codec.language.bm.CacheSubSequencePerformanceTest.Anonymous-17857034-0bbf-45a3-93a4-251053634ad3.subSequence(int, int)",
        "snippet": "            @Override\n            public CharSequence subSequence(final int start, final int end) {\n                if (start == end) {\n                    return \"\";\n                }\n                CharSequence res = cache[start][end - 1];\n                if (res == null) {\n                    res = cached.subSequence(start, end);\n                    cache[start][end - 1] = res;\n                }\n                return res;\n            }",
        "begin_line": 66,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 68,col 17)-(line 70,col 17)",
            "(line 71,col 17)-(line 71,col 57)",
            "(line 72,col 17)-(line 75,col 17)",
            "(line 76,col 17)-(line 76,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.LanguageGuessingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
        "signature": "org.apache.commons.codec.language.bm.LanguageGuessingTest.data()",
        "snippet": "    @Parameterized.Parameters(name = \"{0}-{1}-{2}\")\n    public static List<Object[]> data() {\n        return Arrays.asList(new Object[][] {\n                { \"Renault\", \"french\" },\n                { \"Mickiewicz\", \"polish\" },\n                { \"Thompson\", \"english\" }, // this also hits german and greeklatin\n                { \"Nu\\u00f1ez\", \"spanish\" }, // Nu\u00f1ez\n                { \"Carvalho\", \"portuguese\" },\n                { \"\\u010capek\", \"czech\" }, // \u010capek\n                { \"Sjneijder\", \"dutch\" },\n                { \"Klausewitz\", \"german\" },\n                { \"K\\u00fc\\u00e7\\u00fck\", \"turkish\" }, // K\u00fc\u00e7\u00fck\n                { \"Giacometti\", \"italian\" },\n                { \"Nagy\", \"hungarian\" },\n                { \"Ceau\\u015fescu\", \"romanian\" }, // Ceau\u015fescu\n                { \"Angelopoulos\", \"greeklatin\" },\n                { \"\\u0391\\u03b3\\u03b3\\u03b5\\u03bb\\u03cc\\u03c0\\u03bf\\u03c5\\u03bb\\u03bf\\u03c2\", \"greek\" }, // \u0391\u03b3\u03b3\u03b5\u03bb\u03cc\u03c0\u03bf\u03c5\u03bb\u03bf\u03c2\n                { \"\\u041f\\u0443\\u0448\\u043a\\u0438\\u043d\", \"cyrillic\" }, // \u041f\u0443\u0448\u043a\u0438\u043d\n                { \"\\u05db\\u05d4\\u05df\", \"hebrew\" }, // \u05db\u05d4\u05df\n                { \"\\u00e1cz\", \"any\" }, // \u00e1cz\n                { \"\\u00e1tz\", \"any\" } }); // \u00e1tz\n    }",
        "begin_line": 37,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 57,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.LanguageGuessingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
        "signature": "org.apache.commons.codec.language.bm.LanguageGuessingTest.LanguageGuessingTest(java.lang.String, java.lang.String)",
        "snippet": "    public LanguageGuessingTest(final String name, final String language) {\n        this.name = name;\n        this.language = language;\n    }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 25)",
            "(line 66,col 9)-(line 66,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.LanguageGuessingTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
        "signature": "org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing()",
        "snippet": "    @Test\n    public void testLanguageGuessing() {\n        final Languages.LanguageSet guesses = this.lang.guessLanguages(this.name);\n\n        assertTrue(\"language predicted for name '\" + this.name + \"' is wrong: \" + guesses + \" should contain '\" + this.language + \"'\",\n                guesses.contains(this.language));\n\n    }",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 82)",
            "(line 73,col 9)-(line 74,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
        "signature": "describeTo(Description)",
        "snippet": "        @Override\n        public void describeTo(final Description description) {\n            description.appendText(\"value should be negative\");\n        }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 13)-(line 36,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
        "signature": "org.apache.commons.codec.language.bm.RuleTest.NegativeIntegerBaseMatcher.matches(java.lang.Object)",
        "snippet": "        @Override\n        public boolean matches(final Object item) {\n            return ((Integer) item).intValue() < 0;\n        }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 13)-(line 41,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
        "signature": "org.apache.commons.codec.language.bm.RuleTest.makePhonemes()",
        "snippet": "    private Rule.Phoneme[][] makePhonemes() {\n        final String[][] words = {\n                { \"rinD\", \"rinDlt\", \"rina\", \"rinalt\", \"rino\", \"rinolt\", \"rinu\", \"rinult\" },\n                { \"dortlaj\", \"dortlej\", \"ortlaj\", \"ortlej\", \"ortlej-dortlaj\" } };\n        final Rule.Phoneme[][] phonemes = new Rule.Phoneme[words.length][];\n\n        for (int i = 0; i < words.length; i++) {\n            final String[] words_i = words[i];\n            final Rule.Phoneme[] phonemes_i = phonemes[i] = new Rule.Phoneme[words_i.length];\n            for (int j = 0; j < words_i.length; j++) {\n                phonemes_i[j] = new Rule.Phoneme(words_i[j], Languages.NO_LANGUAGES);\n            }\n        }\n\n        return phonemes;\n    }",
        "begin_line": 45,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 48,col 81)",
            "(line 49,col 9)-(line 49,col 75)",
            "(line 51,col 9)-(line 57,col 9)",
            "(line 59,col 9)-(line 59,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
        "signature": "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative()",
        "snippet": "    @Test\n    public void testPhonemeComparedToLaterIsNegative() {\n        for (final Rule.Phoneme[] phs : makePhonemes()) {\n            for (int i = 0; i < phs.length; i++) {\n                for (int j = i + 1; j < phs.length; j++) {\n                    final int c = Rule.Phoneme.COMPARATOR.compare(phs[i], phs[j]);\n\n                    assertThat(\"Comparing \" + phs[i].getPhonemeText() + \" to \" + phs[j].getPhonemeText() + \" should be negative\", Integer.valueOf(c),\n                            new NegativeIntegerBaseMatcher());\n                }\n            }\n        }\n    }",
        "begin_line": 62,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 73,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
        "signature": "org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero()",
        "snippet": "    @Test\n    public void testPhonemeComparedToSelfIsZero() {\n        for (final Rule.Phoneme[] phs : makePhonemes()) {\n            for (final Rule.Phoneme ph : phs) {\n                assertEquals(\"Phoneme compared to itself should be zero: \" + ph.getPhonemeText(), 0,\n                        Rule.Phoneme.COMPARATOR.compare(ph, ph));\n            }\n        }\n    }",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.codec.language.bm.RuleTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
        "signature": "org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks()",
        "snippet": "    @Test\n    public void testSubSequenceWorks() {\n        // AppendableCharSequence is private to Rule. We can only make it through a Phoneme.\n\n        final Rule.Phoneme a = new Rule.Phoneme(\"a\", null);\n        final Rule.Phoneme b = new Rule.Phoneme(\"b\", null);\n        final Rule.Phoneme cd = new Rule.Phoneme(\"cd\", null);\n        final Rule.Phoneme ef = new Rule.Phoneme(\"ef\", null);\n        final Rule.Phoneme ghi = new Rule.Phoneme(\"ghi\", null);\n        final Rule.Phoneme jkl = new Rule.Phoneme(\"jkl\", null);\n\n        assertEquals('a', a.getPhonemeText().charAt(0));\n        assertEquals('b', b.getPhonemeText().charAt(0));\n        assertEquals('c', cd.getPhonemeText().charAt(0));\n        assertEquals('d', cd.getPhonemeText().charAt(1));\n        assertEquals('e', ef.getPhonemeText().charAt(0));\n        assertEquals('f', ef.getPhonemeText().charAt(1));\n        assertEquals('g', ghi.getPhonemeText().charAt(0));\n        assertEquals('h', ghi.getPhonemeText().charAt(1));\n        assertEquals('i', ghi.getPhonemeText().charAt(2));\n        assertEquals('j', jkl.getPhonemeText().charAt(0));\n        assertEquals('k', jkl.getPhonemeText().charAt(1));\n        assertEquals('l', jkl.getPhonemeText().charAt(2));\n\n        final Rule.Phoneme a_b = new Rule.Phoneme(a, b);\n        assertEquals('a', a_b.getPhonemeText().charAt(0));\n        assertEquals('b', a_b.getPhonemeText().charAt(1));\n        assertEquals(\"ab\", a_b.getPhonemeText().subSequence(0, 2).toString());\n        assertEquals(\"a\", a_b.getPhonemeText().subSequence(0, 1).toString());\n        assertEquals(\"b\", a_b.getPhonemeText().subSequence(1, 2).toString());\n\n        final Rule.Phoneme cd_ef = new Rule.Phoneme(cd, ef);\n        assertEquals('c', cd_ef.getPhonemeText().charAt(0));\n        assertEquals('d', cd_ef.getPhonemeText().charAt(1));\n        assertEquals('e', cd_ef.getPhonemeText().charAt(2));\n        assertEquals('f', cd_ef.getPhonemeText().charAt(3));\n        assertEquals(\"c\", cd_ef.getPhonemeText().subSequence(0, 1).toString());\n        assertEquals(\"d\", cd_ef.getPhonemeText().subSequence(1, 2).toString());\n        assertEquals(\"e\", cd_ef.getPhonemeText().subSequence(2, 3).toString());\n        assertEquals(\"f\", cd_ef.getPhonemeText().subSequence(3, 4).toString());\n        assertEquals(\"cd\", cd_ef.getPhonemeText().subSequence(0, 2).toString());\n        assertEquals(\"de\", cd_ef.getPhonemeText().subSequence(1, 3).toString());\n        assertEquals(\"ef\", cd_ef.getPhonemeText().subSequence(2, 4).toString());\n        assertEquals(\"cde\", cd_ef.getPhonemeText().subSequence(0, 3).toString());\n        assertEquals(\"def\", cd_ef.getPhonemeText().subSequence(1, 4).toString());\n        assertEquals(\"cdef\", cd_ef.getPhonemeText().subSequence(0, 4).toString());\n\n        final Rule.Phoneme a_b_cd = new Rule.Phoneme(new Rule.Phoneme(a, b), cd);\n        assertEquals('a', a_b_cd.getPhonemeText().charAt(0));\n        assertEquals('b', a_b_cd.getPhonemeText().charAt(1));\n        assertEquals('c', a_b_cd.getPhonemeText().charAt(2));\n        assertEquals('d', a_b_cd.getPhonemeText().charAt(3));\n        assertEquals(\"a\", a_b_cd.getPhonemeText().subSequence(0, 1).toString());\n        assertEquals(\"b\", a_b_cd.getPhonemeText().subSequence(1, 2).toString());\n        assertEquals(\"c\", a_b_cd.getPhonemeText().subSequence(2, 3).toString());\n        assertEquals(\"d\", a_b_cd.getPhonemeText().subSequence(3, 4).toString());\n        assertEquals(\"ab\", a_b_cd.getPhonemeText().subSequence(0, 2).toString());\n        assertEquals(\"bc\", a_b_cd.getPhonemeText().subSequence(1, 3).toString());\n        assertEquals(\"cd\", a_b_cd.getPhonemeText().subSequence(2, 4).toString());\n        assertEquals(\"abc\", a_b_cd.getPhonemeText().subSequence(0, 3).toString());\n        assertEquals(\"bcd\", a_b_cd.getPhonemeText().subSequence(1, 4).toString());\n        assertEquals(\"abcd\", a_b_cd.getPhonemeText().subSequence(0, 4).toString());\n    }",
        "begin_line": 86,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 59)",
            "(line 91,col 9)-(line 91,col 59)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 61)",
            "(line 94,col 9)-(line 94,col 63)",
            "(line 95,col 9)-(line 95,col 63)",
            "(line 97,col 9)-(line 97,col 56)",
            "(line 98,col 9)-(line 98,col 56)",
            "(line 99,col 9)-(line 99,col 57)",
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 57)",
            "(line 102,col 9)-(line 102,col 57)",
            "(line 103,col 9)-(line 103,col 58)",
            "(line 104,col 9)-(line 104,col 58)",
            "(line 105,col 9)-(line 105,col 58)",
            "(line 106,col 9)-(line 106,col 58)",
            "(line 107,col 9)-(line 107,col 58)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 110,col 9)-(line 110,col 56)",
            "(line 111,col 9)-(line 111,col 58)",
            "(line 112,col 9)-(line 112,col 58)",
            "(line 113,col 9)-(line 113,col 78)",
            "(line 114,col 9)-(line 114,col 77)",
            "(line 115,col 9)-(line 115,col 77)",
            "(line 117,col 9)-(line 117,col 60)",
            "(line 118,col 9)-(line 118,col 60)",
            "(line 119,col 9)-(line 119,col 60)",
            "(line 120,col 9)-(line 120,col 60)",
            "(line 121,col 9)-(line 121,col 60)",
            "(line 122,col 9)-(line 122,col 79)",
            "(line 123,col 9)-(line 123,col 79)",
            "(line 124,col 9)-(line 124,col 79)",
            "(line 125,col 9)-(line 125,col 79)",
            "(line 126,col 9)-(line 126,col 80)",
            "(line 127,col 9)-(line 127,col 80)",
            "(line 128,col 9)-(line 128,col 80)",
            "(line 129,col 9)-(line 129,col 81)",
            "(line 130,col 9)-(line 130,col 81)",
            "(line 131,col 9)-(line 131,col 82)",
            "(line 133,col 9)-(line 133,col 81)",
            "(line 134,col 9)-(line 134,col 61)",
            "(line 135,col 9)-(line 135,col 61)",
            "(line 136,col 9)-(line 136,col 61)",
            "(line 137,col 9)-(line 137,col 61)",
            "(line 138,col 9)-(line 138,col 80)",
            "(line 139,col 9)-(line 139,col 80)",
            "(line 140,col 9)-(line 140,col 80)",
            "(line 141,col 9)-(line 141,col 80)",
            "(line 142,col 9)-(line 142,col 81)",
            "(line 143,col 9)-(line 143,col 81)",
            "(line 144,col 9)-(line 144,col 81)",
            "(line 145,col 9)-(line 145,col 82)",
            "(line 146,col 9)-(line 146,col 82)",
            "(line 147,col 9)-(line 147,col 83)"
        ]
    }
]