{
  "filepath": "/tmp/Codec-17b/src/main/java/org/apache/commons/codec/language/bm/Rule.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "Rule",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 82,
      "end_line": 728,
      "comment": "\n * A phoneme rule.\n * \u003cp\u003e\n * Rules have a pattern, left context, right context, output phoneme, set of languages for which they apply\n * and a logical flag indicating if all languages must be in play. A rule matches if:\n * \u003cul\u003e\n * \u003cli\u003ethe pattern matches at the current position\u003c/li\u003e\n * \u003cli\u003ethe string up until the beginning of the pattern matches the left context\u003c/li\u003e\n * \u003cli\u003ethe string from the end of the pattern matches the right context\u003c/li\u003e\n * \u003cli\u003elogical is ALL and all languages are in scope; or\u003c/li\u003e\n * \u003cli\u003elogical is any other value and at least one language is in scope\u003c/li\u003e\n * \u003c/ul\u003e\n * \u003cp\u003e\n * Rules are typically generated by parsing rules resources. In normal use, there will be no need for the user\n * to explicitly construct their own.\n * \u003cp\u003e\n * Rules are immutable and thread-safe.\n * \u003cp\u003e\n * \u003cb\u003eRules resources\u003c/b\u003e\n * \u003cp\u003e\n * Rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically\n * named following the pattern:\n * \u003cblockquote\u003eorg/apache/commons/codec/language/bm/${NameType#getName}_${RuleType#getName}_${language}.txt\u003c/blockquote\u003e\n * \u003cp\u003e\n * The format of these resources is the following:\n * \u003cul\u003e\n * \u003cli\u003e\u003cb\u003eRules:\u003c/b\u003e whitespace separated, double-quoted strings. There should be 4 columns to each row, and these\n * will be interpreted as:\n * \u003col\u003e\n * \u003cli\u003epattern\u003c/li\u003e\n * \u003cli\u003eleft context\u003c/li\u003e\n * \u003cli\u003eright context\u003c/li\u003e\n * \u003cli\u003ephoneme\u003c/li\u003e\n * \u003c/ol\u003e\n * \u003c/li\u003e\n * \u003cli\u003e\u003cb\u003eEnd-of-line comments:\u003c/b\u003e Any occurrence of \u0027//\u0027 will cause all text following on that line to be discarded\n * as a comment.\u003c/li\u003e\n * \u003cli\u003e\u003cb\u003eMulti-line comments:\u003c/b\u003e Any line starting with \u0027/*\u0027 will start multi-line commenting mode. This will skip\n * all content until a line ending in \u0027*\u0027 and \u0027/\u0027 is found.\u003c/li\u003e\n * \u003cli\u003e\u003cb\u003eBlank lines:\u003c/b\u003e All blank lines will be skipped.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n * @since 1.6\n * @version $Id$\n "
    },
    {
      "type": "class_interface",
      "name": "Phoneme",
      "is_interface": false,
      "parent_types": [
        "org.apache.commons.codec.language.bm.Rule.PhonemeExpr"
      ],
      "begin_line": 84,
      "end_line": 170,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "COMPARATOR"
      ],
      "begin_line": 85,
      "end_line": 104,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.Anonymous-81c0b0b5-a68d-4ff6-93a6-8c8577bf07fc.compare(org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme)",
      "begin_line": 86,
      "end_line": 103,
      "comment": "",
      "child_ranges": [
        "(line 88,col 17)-(line 96,col 17)",
        "(line 98,col 17)-(line 100,col 17)",
        "(line 102,col 17)-(line 102,col 25)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "phonemeText"
      ],
      "begin_line": 106,
      "end_line": 106,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "languages"
      ],
      "begin_line": 107,
      "end_line": 107,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.Phoneme(java.lang.CharSequence, org.apache.commons.codec.language.bm.Languages.LanguageSet)",
      "begin_line": 109,
      "end_line": 112,
      "comment": "",
      "child_ranges": [
        "(line 110,col 13)-(line 110,col 62)",
        "(line 111,col 13)-(line 111,col 39)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.Phoneme(org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme)",
      "begin_line": 114,
      "end_line": 117,
      "comment": "",
      "child_ranges": [
        "(line 115,col 13)-(line 115,col 65)",
        "(line 116,col 13)-(line 116,col 62)"
      ]
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.Phoneme(org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Rule.Phoneme, org.apache.commons.codec.language.bm.Languages.LanguageSet)",
      "begin_line": 119,
      "end_line": 122,
      "comment": "",
      "child_ranges": [
        "(line 120,col 13)-(line 120,col 53)",
        "(line 121,col 13)-(line 121,col 62)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.append(java.lang.CharSequence)",
      "begin_line": 124,
      "end_line": 127,
      "comment": "",
      "child_ranges": [
        "(line 125,col 13)-(line 125,col 41)",
        "(line 126,col 13)-(line 126,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.getLanguages()",
      "begin_line": 129,
      "end_line": 131,
      "comment": "",
      "child_ranges": [
        "(line 130,col 13)-(line 130,col 34)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.getPhonemes()",
      "begin_line": 133,
      "end_line": 136,
      "comment": "",
      "child_ranges": [
        "(line 135,col 13)-(line 135,col 47)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.getPhonemeText()",
      "begin_line": 138,
      "end_line": 140,
      "comment": "",
      "child_ranges": [
        "(line 139,col 13)-(line 139,col 36)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.join(org.apache.commons.codec.language.bm.Rule.Phoneme)",
      "begin_line": 149,
      "end_line": 153,
      "comment": "\n         * Deprecated since 1.9.\n         *\n         * @param right the Phoneme to join\n         * @return a new Phoneme\n         * @deprecated since 1.9\n         ",
      "child_ranges": [
        "(line 151,col 13)-(line 152,col 75)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.mergeWithLanguage(org.apache.commons.codec.language.bm.Languages.LanguageSet)",
      "begin_line": 162,
      "end_line": 164,
      "comment": "\n         * Returns a new Phoneme with the same text but a union of its\n         * current language set and the given one.\n         *\n         * @param lang the language set to merge\n         * @return a new Phoneme\n         ",
      "child_ranges": [
        "(line 163,col 11)-(line 163,col 86)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Phoneme.toString()",
      "begin_line": 166,
      "end_line": 169,
      "comment": "",
      "child_ranges": [
        "(line 168,col 11)-(line 168,col 64)"
      ]
    },
    {
      "type": "class_interface",
      "name": "PhonemeExpr",
      "is_interface": true,
      "parent_types": [],
      "begin_line": 172,
      "end_line": 174,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.PhonemeExpr.getPhonemes()",
      "begin_line": 173,
      "end_line": 173,
      "comment": "",
      "child_ranges": []
    },
    {
      "type": "class_interface",
      "name": "PhonemeList",
      "is_interface": false,
      "parent_types": [
        "org.apache.commons.codec.language.bm.Rule.PhonemeExpr"
      ],
      "begin_line": 176,
      "end_line": 187,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "phonemes"
      ],
      "begin_line": 177,
      "end_line": 177,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.codec.language.bm.Rule.PhonemeList.PhonemeList(java.util.List\u003corg.apache.commons.codec.language.bm.Rule.Phoneme\u003e)",
      "begin_line": 179,
      "end_line": 181,
      "comment": "",
      "child_ranges": [
        "(line 180,col 13)-(line 180,col 37)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.PhonemeList.getPhonemes()",
      "begin_line": 183,
      "end_line": 186,
      "comment": "",
      "child_ranges": [
        "(line 185,col 13)-(line 185,col 33)"
      ]
    },
    {
      "type": "class_interface",
      "name": "RPattern",
      "is_interface": true,
      "parent_types": [],
      "begin_line": 192,
      "end_line": 194,
      "comment": "\n     * A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(java.lang.CharSequence)",
      "begin_line": 193,
      "end_line": 193,
      "comment": "",
      "child_ranges": []
    },
    {
      "type": "field",
      "varNames": [
        "ALL_STRINGS_RMATCHER"
      ],
      "begin_line": 196,
      "end_line": 201,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-72a92ee5-cc1f-4b75-b70b-849f71debd6e.isMatch(java.lang.CharSequence)",
      "begin_line": 197,
      "end_line": 200,
      "comment": "",
      "child_ranges": [
        "(line 199,col 13)-(line 199,col 24)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "ALL"
      ],
      "begin_line": 203,
      "end_line": 203,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "DOUBLE_QUOTE"
      ],
      "begin_line": 205,
      "end_line": 205,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "HASH_INCLUDE"
      ],
      "begin_line": 207,
      "end_line": 207,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "RULES"
      ],
      "begin_line": 209,
      "end_line": 210,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.contains(java.lang.CharSequence, char)",
      "begin_line": 247,
      "end_line": 254,
      "comment": "",
      "child_ranges": [
        "(line 248,col 9)-(line 252,col 9)",
        "(line 253,col 9)-(line 253,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)",
      "begin_line": 256,
      "end_line": 259,
      "comment": "",
      "child_ranges": [
        "(line 257,col 9)-(line 258,col 69)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)",
      "begin_line": 261,
      "end_line": 270,
      "comment": "",
      "child_ranges": [
        "(line 262,col 9)-(line 262,col 70)",
        "(line 263,col 9)-(line 263,col 98)",
        "(line 265,col 9)-(line 267,col 9)",
        "(line 269,col 9)-(line 269,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.createScanner(java.lang.String)",
      "begin_line": 272,
      "end_line": 281,
      "comment": "",
      "child_ranges": [
        "(line 273,col 9)-(line 273,col 98)",
        "(line 274,col 9)-(line 274,col 98)",
        "(line 276,col 9)-(line 278,col 9)",
        "(line 280,col 9)-(line 280,col 64)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.endsWith(java.lang.CharSequence, java.lang.CharSequence)",
      "begin_line": 283,
      "end_line": 293,
      "comment": "",
      "child_ranges": [
        "(line 284,col 9)-(line 286,col 9)",
        "(line 287,col 9)-(line 291,col 9)",
        "(line 292,col 9)-(line 292,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages.LanguageSet)",
      "begin_line": 306,
      "end_line": 314,
      "comment": "\n     * Gets rules for a combination of name type, rule type and languages.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param langs\n     *            the set of languages to consider\n     * @return a list of Rules that apply\n     ",
      "child_ranges": [
        "(line 308,col 9)-(line 308,col 84)",
        "(line 309,col 9)-(line 309,col 58)",
        "(line 310,col 9)-(line 312,col 9)",
        "(line 313,col 9)-(line 313,col 24)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)",
      "begin_line": 327,
      "end_line": 329,
      "comment": "\n     * Gets rules for a combination of name type, rule type and a single language.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param lang\n     *            the language to consider\n     * @return a list of Rules that apply\n     ",
      "child_ranges": [
        "(line 328,col 9)-(line 328,col 101)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages.LanguageSet)",
      "begin_line": 343,
      "end_line": 347,
      "comment": "\n     * Gets rules for a combination of name type, rule type and languages.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param langs\n     *            the set of languages to consider\n     * @return a map containing all Rules that apply, grouped by the first character of the rule pattern\n     * @since 1.9\n     ",
      "child_ranges": [
        "(line 345,col 9)-(line 346,col 81)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)",
      "begin_line": 361,
      "end_line": 371,
      "comment": "\n     * Gets rules for a combination of name type, rule type and a single language.\n     *\n     * @param nameType\n     *            the NameType to consider\n     * @param rt\n     *            the RuleType to consider\n     * @param lang\n     *            the language to consider\n     * @return a map containing all Rules that apply, grouped by the first character of the rule pattern\n     * @since 1.9\n     ",
      "child_ranges": [
        "(line 363,col 9)-(line 363,col 84)",
        "(line 365,col 9)-(line 368,col 9)",
        "(line 370,col 9)-(line 370,col 21)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.parsePhoneme(java.lang.String)",
      "begin_line": 373,
      "end_line": 386,
      "comment": "",
      "child_ranges": [
        "(line 374,col 9)-(line 374,col 41)",
        "(line 375,col 9)-(line 384,col 9)",
        "(line 385,col 9)-(line 385,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(java.lang.String)",
      "begin_line": 388,
      "end_line": 406,
      "comment": "",
      "child_ranges": [
        "(line 389,col 9)-(line 404,col 9)",
        "(line 405,col 9)-(line 405,col 32)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.parseRules(java.util.Scanner, java.lang.String)",
      "begin_line": 408,
      "end_line": 499,
      "comment": "",
      "child_ranges": [
        "(line 409,col 9)-(line 409,col 80)",
        "(line 410,col 9)-(line 410,col 28)",
        "(line 412,col 9)-(line 412,col 43)",
        "(line 413,col 9)-(line 496,col 9)",
        "(line 498,col 9)-(line 498,col 21)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "myLine"
      ],
      "begin_line": 466,
      "end_line": 466,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "loc"
      ],
      "begin_line": 467,
      "end_line": 467,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-44948b72-0d85-4327-8701-2a0ebfd0767e.toString()",
      "begin_line": 469,
      "end_line": 480,
      "comment": "",
      "child_ranges": [
        "(line 471,col 37)-(line 471,col 81)",
        "(line 472,col 37)-(line 472,col 54)",
        "(line 473,col 37)-(line 473,col 71)",
        "(line 474,col 37)-(line 474,col 82)",
        "(line 475,col 37)-(line 475,col 82)",
        "(line 476,col 37)-(line 476,col 84)",
        "(line 477,col 37)-(line 477,col 84)",
        "(line 478,col 37)-(line 478,col 51)",
        "(line 479,col 37)-(line 479,col 57)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.pattern(java.lang.String)",
      "begin_line": 508,
      "end_line": 606,
      "comment": "\n     * Attempts to compile the regex into direct string ops, falling back to Pattern and Matcher in the worst case.\n     *\n     * @param regex\n     *            the regular expression to compile\n     * @return an RPattern that will match this regex\n     ",
      "child_ranges": [
        "(line 509,col 9)-(line 509,col 57)",
        "(line 510,col 9)-(line 510,col 53)",
        "(line 511,col 9)-(line 511,col 115)",
        "(line 512,col 9)-(line 512,col 52)",
        "(line 514,col 9)-(line 595,col 9)",
        "(line 597,col 9)-(line 605,col 10)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-0f5373b3-931e-47bb-b07d-8365674d10aa.isMatch(java.lang.CharSequence)",
      "begin_line": 586,
      "end_line": 590,
      "comment": "",
      "child_ranges": [
        "(line 588,col 33)-(line 589,col 107)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-62a2c568-ca6d-4885-9c81-d15bd9b8a6db.isMatch(java.lang.CharSequence)",
      "begin_line": 578,
      "end_line": 581,
      "comment": "",
      "child_ranges": [
        "(line 580,col 33)-(line 580,col 112)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-692f6940-7646-46cc-9632-e3e7c6692891.isMatch(java.lang.CharSequence)",
      "begin_line": 570,
      "end_line": 573,
      "comment": "",
      "child_ranges": [
        "(line 572,col 33)-(line 572,col 113)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-70e0c09e-f916-4d88-bc02-810c60b94acd.isMatch(java.lang.CharSequence)",
      "begin_line": 546,
      "end_line": 549,
      "comment": "",
      "child_ranges": [
        "(line 548,col 25)-(line 548,col 56)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-85819224-f81a-43f9-be31-f9bfa5df1ff6.isMatch(java.lang.CharSequence)",
      "begin_line": 538,
      "end_line": 541,
      "comment": "",
      "child_ranges": [
        "(line 540,col 25)-(line 540,col 58)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-7ede6e32-1f11-449a-ad0a-b5d7737a3a02.isMatch(java.lang.CharSequence)",
      "begin_line": 520,
      "end_line": 523,
      "comment": "",
      "child_ranges": [
        "(line 522,col 29)-(line 522,col 55)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-3676944b-c03e-4ed2-9e64-fcb6956f72e0.isMatch(java.lang.CharSequence)",
      "begin_line": 527,
      "end_line": 530,
      "comment": "",
      "child_ranges": [
        "(line 529,col 25)-(line 529,col 53)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "pattern"
      ],
      "begin_line": 598,
      "end_line": 598,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.Anonymous-dc782d0d-e24a-4ce0-b73b-99c62fddf482.isMatch(java.lang.CharSequence)",
      "begin_line": 600,
      "end_line": 604,
      "comment": "",
      "child_ranges": [
        "(line 602,col 17)-(line 602,col 63)",
        "(line 603,col 17)-(line 603,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.startsWith(java.lang.CharSequence, java.lang.CharSequence)",
      "begin_line": 608,
      "end_line": 618,
      "comment": "",
      "child_ranges": [
        "(line 609,col 9)-(line 611,col 9)",
        "(line 612,col 9)-(line 616,col 9)",
        "(line 617,col 9)-(line 617,col 20)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.stripQuotes(java.lang.String)",
      "begin_line": 620,
      "end_line": 630,
      "comment": "",
      "child_ranges": [
        "(line 621,col 9)-(line 623,col 9)",
        "(line 625,col 9)-(line 627,col 9)",
        "(line 629,col 9)-(line 629,col 19)"
      ]
    },
    {
      "type": "field",
      "varNames": [
        "lContext"
      ],
      "begin_line": 632,
      "end_line": 632,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "pattern"
      ],
      "begin_line": 634,
      "end_line": 634,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "phoneme"
      ],
      "begin_line": 636,
      "end_line": 636,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "rContext"
      ],
      "begin_line": 638,
      "end_line": 638,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.codec.language.bm.Rule.Rule(java.lang.String, java.lang.String, java.lang.String, org.apache.commons.codec.language.bm.Rule.PhonemeExpr)",
      "begin_line": 652,
      "end_line": 657,
      "comment": "\n     * Creates a new rule.\n     *\n     * @param pattern\n     *            the pattern\n     * @param lContext\n     *            the left context\n     * @param rContext\n     *            the right context\n     * @param phoneme\n     *            the resulting phoneme\n     ",
      "child_ranges": [
        "(line 653,col 9)-(line 653,col 31)",
        "(line 654,col 9)-(line 654,col 48)",
        "(line 655,col 9)-(line 655,col 48)",
        "(line 656,col 9)-(line 656,col 31)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getLContext()",
      "begin_line": 664,
      "end_line": 666,
      "comment": "\n     * Gets the left context. This is a regular expression that must match to the left of the pattern.\n     *\n     * @return the left context Pattern\n     ",
      "child_ranges": [
        "(line 665,col 9)-(line 665,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getPattern()",
      "begin_line": 673,
      "end_line": 675,
      "comment": "\n     * Gets the pattern. This is a string-literal that must exactly match.\n     *\n     * @return the pattern\n     ",
      "child_ranges": [
        "(line 674,col 9)-(line 674,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getPhoneme()",
      "begin_line": 682,
      "end_line": 684,
      "comment": "\n     * Gets the phoneme. If the rule matches, this is the phoneme associated with the pattern match.\n     *\n     * @return the phoneme\n     ",
      "child_ranges": [
        "(line 683,col 9)-(line 683,col 28)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.getRContext()",
      "begin_line": 691,
      "end_line": 693,
      "comment": "\n     * Gets the right context. This is a regular expression that must match to the right of the pattern.\n     *\n     * @return the right context Pattern\n     ",
      "child_ranges": [
        "(line 692,col 9)-(line 692,col 29)"
      ]
    },
    {
      "type": "method",
      "signature": "org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence, int)",
      "begin_line": 706,
      "end_line": 727,
      "comment": "\n     * Decides if the pattern and context match the input starting at a position. It is a match if the\n     * \u003ccode\u003elContext\u003c/code\u003e matches \u003ccode\u003einput\u003c/code\u003e up to \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003epattern\u003c/code\u003e matches at i and\n     * \u003ccode\u003erContext\u003c/code\u003e matches from the end of the match of \u003ccode\u003epattern\u003c/code\u003e to the end of \u003ccode\u003einput\u003c/code\u003e.\n     *\n     * @param input\n     *            the input String\n     * @param i\n     *            the int position within the input\n     * @return true if the pattern and left/right context match, false otherwise\n     ",
      "child_ranges": [
        "(line 707,col 9)-(line 709,col 9)",
        "(line 711,col 9)-(line 711,col 56)",
        "(line 712,col 9)-(line 712,col 42)",
        "(line 714,col 9)-(line 717,col 9)",
        "(line 721,col 9)-(line 725,col 9)",
        "(line 726,col 9)-(line 726,col 62)"
      ]
    }
  ]
}