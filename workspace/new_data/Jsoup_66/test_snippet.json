[
    {
        "class_name": "org.jsoup.TextUtil",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/TextUtil.java",
        "signature": "org.jsoup.TextUtil.stripNewlines(java.lang.String)",
        "snippet": "    public static String stripNewlines(String text) {\n        text = text.replaceAll(\"\\\\r?\\\\n\\\\s*\", \"\");\n        return text;\n    }",
        "begin_line": 8,
        "end_line": 11,
        "comment": "",
        "child_ranges": [
            "(line 9,col 9)-(line 9,col 50)",
            "(line 10,col 9)-(line 10,col 20)"
        ]
    },
    {
        "class_name": "org.jsoup.MultiLocaleRule",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/MultiLocaleRule.java",
        "signature": "apply(Statement, Description)",
        "snippet": "    public Statement apply(final Statement statement, final Description description) {\n        return new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                MultiLocaleTest annotation = description.getAnnotation(MultiLocaleTest.class);\n                if (annotation == null) {\n                    statement.evaluate();\n                    return;\n                }\n\n                evaluateWithLocale(Locale.ENGLISH);\n                evaluateWithLocale(new Locale(\"tr\"));\n            }\n\n            private void evaluateWithLocale(Locale locale) throws Throwable {\n                Locale oldLocale = Locale.getDefault();\n                Locale.setDefault(locale);\n                try {\n                    statement.evaluate();\n                } finally {\n                    Locale.setDefault(oldLocale);\n                }\n            }\n        };\n    }",
        "begin_line": 16,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 39,col 10)"
        ]
    },
    {
        "class_name": "org.jsoup.MultiLocaleRule",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/MultiLocaleRule.java",
        "signature": "evaluate()",
        "snippet": "            @Override\n            public void evaluate() throws Throwable {\n                MultiLocaleTest annotation = description.getAnnotation(MultiLocaleTest.class);\n                if (annotation == null) {\n                    statement.evaluate();\n                    return;\n                }\n\n                evaluateWithLocale(Locale.ENGLISH);\n                evaluateWithLocale(new Locale(\"tr\"));\n            }",
        "begin_line": 18,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 20,col 17)-(line 20,col 94)",
            "(line 21,col 17)-(line 24,col 17)",
            "(line 26,col 17)-(line 26,col 51)",
            "(line 27,col 17)-(line 27,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.MultiLocaleRule",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/MultiLocaleRule.java",
        "signature": "evaluateWithLocale(Locale)",
        "snippet": "            private void evaluateWithLocale(Locale locale) throws Throwable {\n                Locale oldLocale = Locale.getDefault();\n                Locale.setDefault(locale);\n                try {\n                    statement.evaluate();\n                } finally {\n                    Locale.setDefault(oldLocale);\n                }\n            }",
        "begin_line": 30,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 31,col 17)-(line 31,col 55)",
            "(line 32,col 17)-(line 32,col 42)",
            "(line 33,col 17)-(line 37,col 17)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testSimpleXmlParse()",
        "snippet": "    @Test\n    public void testSimpleXmlParse() {\n        String xml = \"<doc id=2 href='/bar'>Foo <br /><link>One</link><link>Two</link></doc>\";\n        XmlTreeBuilder tb = new XmlTreeBuilder();\n        Document doc = tb.parse(xml, \"http://foo.com/\");\n        assertEquals(\"<doc id=\\\"2\\\" href=\\\"/bar\\\">Foo <br /><link>One</link><link>Two</link></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n        assertEquals(doc.getElementById(\"2\").absUrl(\"href\"), \"http://foo.com/bar\");\n    }",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 94)",
            "(line 34,col 9)-(line 34,col 49)",
            "(line 35,col 9)-(line 35,col 56)",
            "(line 36,col 9)-(line 37,col 52)",
            "(line 38,col 9)-(line 38,col 83)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testPopToClose()",
        "snippet": "    @Test\n    public void testPopToClose() {\n        // test: </val> closes Two, </bar> ignored\n        String xml = \"<doc><val>One<val>Two</val></bar>Three</doc>\";\n        XmlTreeBuilder tb = new XmlTreeBuilder();\n        Document doc = tb.parse(xml, \"http://foo.com/\");\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 68)",
            "(line 45,col 9)-(line 45,col 49)",
            "(line 46,col 9)-(line 46,col 56)",
            "(line 47,col 9)-(line 48,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testCommentAndDocType()",
        "snippet": "    @Test\n    public void testCommentAndDocType() {\n        String xml = \"<!DOCTYPE HTML><!-- a comment -->One <qux />Two\";\n        XmlTreeBuilder tb = new XmlTreeBuilder();\n        Document doc = tb.parse(xml, \"http://foo.com/\");\n        assertEquals(\"<!DOCTYPE HTML><!-- a comment -->One <qux />Two\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 51,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 71)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 56)",
            "(line 56,col 9)-(line 57,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testSupplyParserToJsoupClass()",
        "snippet": "    @Test\n    public void testSupplyParserToJsoupClass() {\n        String xml = \"<doc><val>One<val>Two</val></bar>Three</doc>\";\n        Document doc = Jsoup.parse(xml, \"http://foo.com/\", Parser.xmlParser());\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 68)",
            "(line 63,col 9)-(line 63,col 79)",
            "(line 64,col 9)-(line 65,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testSupplyParserToConnection()",
        "snippet": "    @Ignore\n    @Test\n    public void testSupplyParserToConnection() throws IOException {\n        String xmlUrl = \"http://direct.infohound.net/tools/jsoup-xml-test.xml\";\n\n        // parse with both xml and html parser, ensure different\n        Document xmlDoc = Jsoup.connect(xmlUrl).parser(Parser.xmlParser()).get();\n        Document htmlDoc = Jsoup.connect(xmlUrl).parser(Parser.htmlParser()).get();\n        Document autoXmlDoc = Jsoup.connect(xmlUrl).get(); // check connection auto detects xml, uses xml parser\n\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(xmlDoc.html()));\n        assertFalse(htmlDoc.equals(xmlDoc));\n        assertEquals(xmlDoc, autoXmlDoc);\n        assertEquals(1, htmlDoc.select(\"head\").size()); // html parser normalises\n        assertEquals(0, xmlDoc.select(\"head\").size()); // xml parser does not\n        assertEquals(0, autoXmlDoc.select(\"head\").size()); // xml parser does not\n    }",
        "begin_line": 68,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 79)",
            "(line 74,col 9)-(line 74,col 81)",
            "(line 75,col 9)-(line 75,col 83)",
            "(line 76,col 9)-(line 76,col 58)",
            "(line 78,col 9)-(line 79,col 55)",
            "(line 80,col 9)-(line 80,col 44)",
            "(line 81,col 9)-(line 81,col 41)",
            "(line 82,col 9)-(line 82,col 55)",
            "(line 83,col 9)-(line 83,col 54)",
            "(line 84,col 9)-(line 84,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testSupplyParserToDataStream()",
        "snippet": "    @Test\n    public void testSupplyParserToDataStream() throws IOException, URISyntaxException {\n        File xmlFile = new File(XmlTreeBuilder.class.getResource(\"/htmltests/xml-test.xml\").toURI());\n        InputStream inStream = new FileInputStream(xmlFile);\n        Document doc = Jsoup.parse(inStream, null, \"http://foo.com\", Parser.xmlParser());\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 87,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 101)",
            "(line 90,col 9)-(line 90,col 60)",
            "(line 91,col 9)-(line 91,col 89)",
            "(line 92,col 9)-(line 93,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testDoesNotForceSelfClosingKnownTags()",
        "snippet": "    @Test\n    public void testDoesNotForceSelfClosingKnownTags() {\n        // html will force \"<br>one</br>\" to logically \"<br />One<br />\". XML should be stay \"<br>one</br> -- don't recognise tag.\n        Document htmlDoc = Jsoup.parse(\"<br>one</br>\");\n        assertEquals(\"<br>one\\n<br>\", htmlDoc.body().html());\n\n        Document xmlDoc = Jsoup.parse(\"<br>one</br>\", \"\", Parser.xmlParser());\n        assertEquals(\"<br>one</br>\", xmlDoc.html());\n    }",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 55)",
            "(line 100,col 9)-(line 100,col 61)",
            "(line 102,col 9)-(line 102,col 78)",
            "(line 103,col 9)-(line 103,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.handlesXmlDeclarationAsDeclaration()",
        "snippet": "    @Test public void handlesXmlDeclarationAsDeclaration() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<?xml encoding=\\\"UTF-8\\\"?> <body> One </body> <!-- comment -->\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));\n        assertEquals(\"#declaration\", doc.childNode(0).nodeName());\n        assertEquals(\"#comment\", doc.childNode(2).nodeName());\n    }",
        "begin_line": 106,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 82)",
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 110,col 65)",
            "(line 111,col 9)-(line 111,col 66)",
            "(line 112,col 9)-(line 112,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.xmlFragment()",
        "snippet": "    @Test public void xmlFragment() {\n        String xml = \"<one src='/foo/' />Two<three><four /></three>\";\n        List<Node> nodes = Parser.parseXmlFragment(xml, \"http://example.com/\");\n        assertEquals(3, nodes.size());\n\n        assertEquals(\"http://example.com/foo/\", nodes.get(0).absUrl(\"src\"));\n        assertEquals(\"one\", nodes.get(0).nodeName());\n        assertEquals(\"Two\", ((TextNode)nodes.get(1)).text());\n    }",
        "begin_line": 115,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 69)",
            "(line 117,col 9)-(line 117,col 79)",
            "(line 118,col 9)-(line 118,col 38)",
            "(line 120,col 9)-(line 120,col 76)",
            "(line 121,col 9)-(line 121,col 53)",
            "(line 122,col 9)-(line 122,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.xmlParseDefaultsToHtmlOutputSyntax()",
        "snippet": "    @Test public void xmlParseDefaultsToHtmlOutputSyntax() {\n        Document doc = Jsoup.parse(\"x\", \"\", Parser.xmlParser());\n        assertEquals(Syntax.xml, doc.outputSettings().syntax());\n    }",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 64)",
            "(line 127,col 9)-(line 127,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testDoesHandleEOFInTag()",
        "snippet": "    @Test\n    public void testDoesHandleEOFInTag() {\n        String html = \"<img src=asdf onerror=\\\"alert(1)\\\" x=\";\n        Document xmlDoc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<img src=\\\"asdf\\\" onerror=\\\"alert(1)\\\" x=\\\"\\\" />\", xmlDoc.html());\n    }",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 62)",
            "(line 133,col 9)-(line 133,col 68)",
            "(line 134,col 9)-(line 134,col 88)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testDetectCharsetEncodingDeclaration()",
        "snippet": "    @Test\n    public void testDetectCharsetEncodingDeclaration() throws IOException, URISyntaxException {\n        File xmlFile = new File(XmlTreeBuilder.class.getResource(\"/htmltests/xml-charset.xml\").toURI());\n        InputStream inStream = new FileInputStream(xmlFile);\n        Document doc = Jsoup.parse(inStream, null, \"http://example.com/\", Parser.xmlParser());\n        assertEquals(\"ISO-8859-1\", doc.charset().name());\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>\",\n            TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 137,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 104)",
            "(line 140,col 9)-(line 140,col 60)",
            "(line 141,col 9)-(line 141,col 94)",
            "(line 142,col 9)-(line 142,col 57)",
            "(line 143,col 9)-(line 144,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testParseDeclarationAttributes()",
        "snippet": "    @Test\n    public void testParseDeclarationAttributes() {\n        String xml = \"<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);\n        assertEquals(\"1\", decl.attr(\"version\"));\n        assertEquals(\"UTF-8\", decl.attr(\"encoding\"));\n        assertEquals(\"else\", decl.attr(\"something\"));\n        assertEquals(\"version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"\", decl.getWholeDeclaration());\n        assertEquals(\"<?xml version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"?>\", decl.outerHtml());\n    }",
        "begin_line": 147,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 91)",
            "(line 150,col 9)-(line 150,col 64)",
            "(line 151,col 9)-(line 151,col 64)",
            "(line 152,col 9)-(line 152,col 48)",
            "(line 153,col 9)-(line 153,col 53)",
            "(line 154,col 9)-(line 154,col 53)",
            "(line 155,col 9)-(line 155,col 104)",
            "(line 156,col 9)-(line 156,col 102)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.caseSensitiveDeclaration()",
        "snippet": "    @Test\n    public void caseSensitiveDeclaration() {\n        String xml = \"<?XML version='1' encoding='UTF-8' something='else'?>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(\"<?XML version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"?>\", doc.outerHtml());\n    }",
        "begin_line": 159,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 77)",
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 101)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.testCreatesValidProlog()",
        "snippet": "    @Test\n    public void testCreatesValidProlog() {\n        Document document = Document.createShell(\"\");\n        document.outputSettings().syntax(Syntax.xml);\n        document.charset(Charset.forName(\"utf-8\"));\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n            \"<html>\\n\" +\n            \" <head></head>\\n\" +\n            \" <body></body>\\n\" +\n            \"</html>\", document.outerHtml());\n    }",
        "begin_line": 166,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 168,col 9)-(line 168,col 53)",
            "(line 169,col 9)-(line 169,col 53)",
            "(line 170,col 9)-(line 170,col 51)",
            "(line 171,col 9)-(line 175,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.preservesCaseByDefault()",
        "snippet": "    @Test\n    public void preservesCaseByDefault() {\n        String xml = \"<TEST ID=1>Check</TEST>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(\"<TEST ID=\\\"1\\\">Check</TEST>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 178,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 47)",
            "(line 181,col 9)-(line 181,col 64)",
            "(line 182,col 9)-(line 182,col 88)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.XmlTreeBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "signature": "org.jsoup.parser.XmlTreeBuilderTest.canNormalizeCase()",
        "snippet": "    @Test\n    public void canNormalizeCase() {\n        String xml = \"<TEST ID=1>Check</TEST>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser().settings(ParseSettings.htmlDefault));\n        assertEquals(\"<test id=\\\"1\\\">Check</test>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 47)",
            "(line 188,col 9)-(line 188,col 100)",
            "(line 189,col 9)-(line 189,col 88)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consume()",
        "snippet": "    @Test public void consume() {\n        CharacterReader r = new CharacterReader(\"one\");\n        assertEquals(0, r.pos());\n        assertEquals('o', r.current());\n        assertEquals('o', r.consume());\n        assertEquals(1, r.pos());\n        assertEquals('n', r.current());\n        assertEquals(1, r.pos());\n        assertEquals('n', r.consume());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n        assertEquals(CharacterReader.EOF, r.consume());\n        assertTrue(r.isEmpty());\n        assertEquals(CharacterReader.EOF, r.consume());\n    }",
        "begin_line": 14,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 55)",
            "(line 16,col 9)-(line 16,col 33)",
            "(line 17,col 9)-(line 17,col 39)",
            "(line 18,col 9)-(line 18,col 39)",
            "(line 19,col 9)-(line 19,col 33)",
            "(line 20,col 9)-(line 20,col 39)",
            "(line 21,col 9)-(line 21,col 33)",
            "(line 22,col 9)-(line 22,col 39)",
            "(line 23,col 9)-(line 23,col 39)",
            "(line 24,col 9)-(line 24,col 32)",
            "(line 25,col 9)-(line 25,col 55)",
            "(line 26,col 9)-(line 26,col 32)",
            "(line 27,col 9)-(line 27,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.unconsume()",
        "snippet": "    @Test public void unconsume() {\n        CharacterReader r = new CharacterReader(\"one\");\n        assertEquals('o', r.consume());\n        assertEquals('n', r.current());\n        r.unconsume();\n        assertEquals('o', r.current());\n\n        assertEquals('o', r.consume());\n        assertEquals('n', r.consume());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n        r.unconsume();\n        assertFalse(r.isEmpty());\n        assertEquals('e', r.current());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n\n        assertEquals(CharacterReader.EOF, r.consume());\n        r.unconsume();\n        assertTrue(r.isEmpty());\n        assertEquals(CharacterReader.EOF, r.current());\n    }",
        "begin_line": 30,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 55)",
            "(line 32,col 9)-(line 32,col 39)",
            "(line 33,col 9)-(line 33,col 39)",
            "(line 34,col 9)-(line 34,col 22)",
            "(line 35,col 9)-(line 35,col 39)",
            "(line 37,col 9)-(line 37,col 39)",
            "(line 38,col 9)-(line 38,col 39)",
            "(line 39,col 9)-(line 39,col 39)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 41,col 9)-(line 41,col 22)",
            "(line 42,col 9)-(line 42,col 33)",
            "(line 43,col 9)-(line 43,col 39)",
            "(line 44,col 9)-(line 44,col 39)",
            "(line 45,col 9)-(line 45,col 32)",
            "(line 47,col 9)-(line 47,col 55)",
            "(line 48,col 9)-(line 48,col 22)",
            "(line 49,col 9)-(line 49,col 32)",
            "(line 50,col 9)-(line 50,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.mark()",
        "snippet": "    @Test public void mark() {\n        CharacterReader r = new CharacterReader(\"one\");\n        r.consume();\n        r.mark();\n        assertEquals('n', r.consume());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n        r.rewindToMark();\n        assertEquals('n', r.consume());\n    }",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 55)",
            "(line 55,col 9)-(line 55,col 20)",
            "(line 56,col 9)-(line 56,col 17)",
            "(line 57,col 9)-(line 57,col 39)",
            "(line 58,col 9)-(line 58,col 39)",
            "(line 59,col 9)-(line 59,col 32)",
            "(line 60,col 9)-(line 60,col 25)",
            "(line 61,col 9)-(line 61,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consumeToEnd()",
        "snippet": "    @Test public void consumeToEnd() {\n        String in = \"one two three\";\n        CharacterReader r = new CharacterReader(in);\n        String toEnd = r.consumeToEnd();\n        assertEquals(in, toEnd);\n        assertTrue(r.isEmpty());\n    }",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 36)",
            "(line 66,col 9)-(line 66,col 52)",
            "(line 67,col 9)-(line 67,col 40)",
            "(line 68,col 9)-(line 68,col 32)",
            "(line 69,col 9)-(line 69,col 32)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.nextIndexOfChar()",
        "snippet": "    @Test public void nextIndexOfChar() {\n        String in = \"blah blah\";\n        CharacterReader r = new CharacterReader(in);\n\n        assertEquals(-1, r.nextIndexOf('x'));\n        assertEquals(3, r.nextIndexOf('h'));\n        String pull = r.consumeTo('h');\n        assertEquals(\"bla\", pull);\n        r.consume();\n        assertEquals(2, r.nextIndexOf('l'));\n        assertEquals(\" blah\", r.consumeToEnd());\n        assertEquals(-1, r.nextIndexOf('x'));\n    }",
        "begin_line": 72,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 32)",
            "(line 74,col 9)-(line 74,col 52)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 78,col 39)",
            "(line 79,col 9)-(line 79,col 34)",
            "(line 80,col 9)-(line 80,col 20)",
            "(line 81,col 9)-(line 81,col 44)",
            "(line 82,col 9)-(line 82,col 48)",
            "(line 83,col 9)-(line 83,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.nextIndexOfString()",
        "snippet": "    @Test public void nextIndexOfString() {\n        String in = \"One Two something Two Three Four\";\n        CharacterReader r = new CharacterReader(in);\n\n        assertEquals(-1, r.nextIndexOf(\"Foo\"));\n        assertEquals(4, r.nextIndexOf(\"Two\"));\n        assertEquals(\"One Two \", r.consumeTo(\"something\"));\n        assertEquals(10, r.nextIndexOf(\"Two\"));\n        assertEquals(\"something Two Three Four\", r.consumeToEnd());\n        assertEquals(-1, r.nextIndexOf(\"Two\"));\n    }",
        "begin_line": 86,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 55)",
            "(line 88,col 9)-(line 88,col 52)",
            "(line 90,col 9)-(line 90,col 47)",
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 59)",
            "(line 93,col 9)-(line 93,col 47)",
            "(line 94,col 9)-(line 94,col 67)",
            "(line 95,col 9)-(line 95,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.nextIndexOfUnmatched()",
        "snippet": "    @Test public void nextIndexOfUnmatched() {\n        CharacterReader r = new CharacterReader(\"<[[one]]\");\n        assertEquals(-1, r.nextIndexOf(\"]]>\"));\n    }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 60)",
            "(line 100,col 9)-(line 100,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consumeToChar()",
        "snippet": "    @Test public void consumeToChar() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertEquals(\"One \", r.consumeTo('T'));\n        assertEquals(\"\", r.consumeTo('T')); // on Two\n        assertEquals('T', r.consume());\n        assertEquals(\"wo \", r.consumeTo('T'));\n        assertEquals('T', r.consume());\n        assertEquals(\"hree\", r.consumeTo('T')); // consume to end\n    }",
        "begin_line": 103,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 43)",
            "(line 107,col 9)-(line 107,col 39)",
            "(line 108,col 9)-(line 108,col 46)",
            "(line 109,col 9)-(line 109,col 39)",
            "(line 110,col 9)-(line 110,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consumeToString()",
        "snippet": "    @Test public void consumeToString() {\n        CharacterReader r = new CharacterReader(\"One Two Two Four\");\n        assertEquals(\"One \", r.consumeTo(\"Two\"));\n        assertEquals('T', r.consume());\n        assertEquals(\"wo \", r.consumeTo(\"Two\"));\n        assertEquals('T', r.consume());\n        assertEquals(\"wo Four\", r.consumeTo(\"Qux\"));\n    }",
        "begin_line": 113,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 49)",
            "(line 116,col 9)-(line 116,col 39)",
            "(line 117,col 9)-(line 117,col 48)",
            "(line 118,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 119,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.advance()",
        "snippet": "    @Test public void advance() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertEquals('O', r.consume());\n        r.advance();\n        assertEquals('e', r.consume());\n    }",
        "begin_line": 122,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 65)",
            "(line 124,col 9)-(line 124,col 39)",
            "(line 125,col 9)-(line 125,col 20)",
            "(line 126,col 9)-(line 126,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consumeToAny()",
        "snippet": "    @Test public void consumeToAny() {\n        CharacterReader r = new CharacterReader(\"One &bar; qux\");\n        assertEquals(\"One \", r.consumeToAny('&', ';'));\n        assertTrue(r.matches('&'));\n        assertTrue(r.matches(\"&bar;\"));\n        assertEquals('&', r.consume());\n        assertEquals(\"bar\", r.consumeToAny('&', ';'));\n        assertEquals(';', r.consume());\n        assertEquals(\" qux\", r.consumeToAny('&', ';'));\n    }",
        "begin_line": 129,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 65)",
            "(line 131,col 9)-(line 131,col 55)",
            "(line 132,col 9)-(line 132,col 35)",
            "(line 133,col 9)-(line 133,col 39)",
            "(line 134,col 9)-(line 134,col 39)",
            "(line 135,col 9)-(line 135,col 54)",
            "(line 136,col 9)-(line 136,col 39)",
            "(line 137,col 9)-(line 137,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consumeLetterSequence()",
        "snippet": "    @Test public void consumeLetterSequence() {\n        CharacterReader r = new CharacterReader(\"One &bar; qux\");\n        assertEquals(\"One\", r.consumeLetterSequence());\n        assertEquals(\" &\", r.consumeTo(\"bar;\"));\n        assertEquals(\"bar\", r.consumeLetterSequence());\n        assertEquals(\"; qux\", r.consumeToEnd());\n    }",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 65)",
            "(line 142,col 9)-(line 142,col 55)",
            "(line 143,col 9)-(line 143,col 48)",
            "(line 144,col 9)-(line 144,col 55)",
            "(line 145,col 9)-(line 145,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.consumeLetterThenDigitSequence()",
        "snippet": "    @Test public void consumeLetterThenDigitSequence() {\n        CharacterReader r = new CharacterReader(\"One12 Two &bar; qux\");\n        assertEquals(\"One12\", r.consumeLetterThenDigitSequence());\n        assertEquals(' ', r.consume());\n        assertEquals(\"Two\", r.consumeLetterThenDigitSequence());\n        assertEquals(\" &bar; qux\", r.consumeToEnd());\n    }",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 71)",
            "(line 150,col 9)-(line 150,col 66)",
            "(line 151,col 9)-(line 151,col 39)",
            "(line 152,col 9)-(line 152,col 64)",
            "(line 153,col 9)-(line 153,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.matches()",
        "snippet": "    @Test public void matches() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertTrue(r.matches('O'));\n        assertTrue(r.matches(\"One Two Three\"));\n        assertTrue(r.matches(\"One\"));\n        assertFalse(r.matches(\"one\"));\n        assertEquals('O', r.consume());\n        assertFalse(r.matches(\"One\"));\n        assertTrue(r.matches(\"ne Two Three\"));\n        assertFalse(r.matches(\"ne Two Three Four\"));\n        assertEquals(\"ne Two Three\", r.consumeToEnd());\n        assertFalse(r.matches(\"ne\"));\n        assertTrue(r.isEmpty());\n    }",
        "begin_line": 156,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 65)",
            "(line 158,col 9)-(line 158,col 35)",
            "(line 159,col 9)-(line 159,col 47)",
            "(line 160,col 9)-(line 160,col 37)",
            "(line 161,col 9)-(line 161,col 38)",
            "(line 162,col 9)-(line 162,col 39)",
            "(line 163,col 9)-(line 163,col 38)",
            "(line 164,col 9)-(line 164,col 46)",
            "(line 165,col 9)-(line 165,col 52)",
            "(line 166,col 9)-(line 166,col 55)",
            "(line 167,col 9)-(line 167,col 37)",
            "(line 168,col 9)-(line 168,col 32)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.matchesIgnoreCase()",
        "snippet": "    @Test\n    public void matchesIgnoreCase() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertTrue(r.matchesIgnoreCase(\"O\"));\n        assertTrue(r.matchesIgnoreCase(\"o\"));\n        assertTrue(r.matches('O'));\n        assertFalse(r.matches('o'));\n        assertTrue(r.matchesIgnoreCase(\"One Two Three\"));\n        assertTrue(r.matchesIgnoreCase(\"ONE two THREE\"));\n        assertTrue(r.matchesIgnoreCase(\"One\"));\n        assertTrue(r.matchesIgnoreCase(\"one\"));\n        assertEquals('O', r.consume());\n        assertFalse(r.matchesIgnoreCase(\"One\"));\n        assertTrue(r.matchesIgnoreCase(\"NE Two Three\"));\n        assertFalse(r.matchesIgnoreCase(\"ne Two Three Four\"));\n        assertEquals(\"ne Two Three\", r.consumeToEnd());\n        assertFalse(r.matchesIgnoreCase(\"ne\"));\n    }",
        "begin_line": 171,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 65)",
            "(line 174,col 9)-(line 174,col 45)",
            "(line 175,col 9)-(line 175,col 45)",
            "(line 176,col 9)-(line 176,col 35)",
            "(line 177,col 9)-(line 177,col 36)",
            "(line 178,col 9)-(line 178,col 57)",
            "(line 179,col 9)-(line 179,col 57)",
            "(line 180,col 9)-(line 180,col 47)",
            "(line 181,col 9)-(line 181,col 47)",
            "(line 182,col 9)-(line 182,col 39)",
            "(line 183,col 9)-(line 183,col 48)",
            "(line 184,col 9)-(line 184,col 56)",
            "(line 185,col 9)-(line 185,col 62)",
            "(line 186,col 9)-(line 186,col 55)",
            "(line 187,col 9)-(line 187,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.containsIgnoreCase()",
        "snippet": "    @Test public void containsIgnoreCase() {\n        CharacterReader r = new CharacterReader(\"One TWO three\");\n        assertTrue(r.containsIgnoreCase(\"two\"));\n        assertTrue(r.containsIgnoreCase(\"three\"));\n        // weird one: does not find one, because it scans for consistent case only\n        assertFalse(r.containsIgnoreCase(\"one\"));\n    }",
        "begin_line": 190,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 65)",
            "(line 192,col 9)-(line 192,col 48)",
            "(line 193,col 9)-(line 193,col 50)",
            "(line 195,col 9)-(line 195,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.matchesAny()",
        "snippet": "    @Test public void matchesAny() {\n        char[] scan = {' ', '\\n', '\\t'};\n        CharacterReader r = new CharacterReader(\"One\\nTwo\\tThree\");\n        assertFalse(r.matchesAny(scan));\n        assertEquals(\"One\", r.consumeToAny(scan));\n        assertTrue(r.matchesAny(scan));\n        assertEquals('\\n', r.consume());\n        assertFalse(r.matchesAny(scan));\n    }",
        "begin_line": 198,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 40)",
            "(line 200,col 9)-(line 200,col 67)",
            "(line 201,col 9)-(line 201,col 40)",
            "(line 202,col 9)-(line 202,col 50)",
            "(line 203,col 9)-(line 203,col 39)",
            "(line 204,col 9)-(line 204,col 40)",
            "(line 205,col 9)-(line 205,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.cachesStrings()",
        "snippet": "    @Test public void cachesStrings() {\n        CharacterReader r = new CharacterReader(\"Check\\tCheck\\tCheck\\tCHOKE\\tA string that is longer than 16 chars\");\n        String one = r.consumeTo('\\t');\n        r.consume();\n        String two = r.consumeTo('\\t');\n        r.consume();\n        String three = r.consumeTo('\\t');\n        r.consume();\n        String four = r.consumeTo('\\t');\n        r.consume();\n        String five = r.consumeTo('\\t');\n\n        assertEquals(\"Check\", one);\n        assertEquals(\"Check\", two);\n        assertEquals(\"Check\", three);\n        assertEquals(\"CHOKE\", four);\n        assertTrue(one == two);\n        assertTrue(two == three);\n        assertTrue(three != four);\n        assertTrue(four != five);\n        assertEquals(five, \"A string that is longer than 16 chars\");\n    }",
        "begin_line": 208,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 117)",
            "(line 210,col 9)-(line 210,col 39)",
            "(line 211,col 9)-(line 211,col 20)",
            "(line 212,col 9)-(line 212,col 39)",
            "(line 213,col 9)-(line 213,col 20)",
            "(line 214,col 9)-(line 214,col 41)",
            "(line 215,col 9)-(line 215,col 20)",
            "(line 216,col 9)-(line 216,col 40)",
            "(line 217,col 9)-(line 217,col 20)",
            "(line 218,col 9)-(line 218,col 40)",
            "(line 220,col 9)-(line 220,col 35)",
            "(line 221,col 9)-(line 221,col 35)",
            "(line 222,col 9)-(line 222,col 37)",
            "(line 223,col 9)-(line 223,col 36)",
            "(line 224,col 9)-(line 224,col 31)",
            "(line 225,col 9)-(line 225,col 33)",
            "(line 226,col 9)-(line 226,col 34)",
            "(line 227,col 9)-(line 227,col 33)",
            "(line 228,col 9)-(line 228,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.rangeEquals()",
        "snippet": "    @Test\n    public void rangeEquals() {\n        CharacterReader r = new CharacterReader(\"Check\\tCheck\\tCheck\\tCHOKE\");\n        assertTrue(r.rangeEquals(0, 5, \"Check\"));\n        assertFalse(r.rangeEquals(0, 5, \"CHOKE\"));\n        assertFalse(r.rangeEquals(0, 5, \"Chec\"));\n\n        assertTrue(r.rangeEquals(6, 5, \"Check\"));\n        assertFalse(r.rangeEquals(6, 5, \"Chuck\"));\n\n        assertTrue(r.rangeEquals(12, 5, \"Check\"));\n        assertFalse(r.rangeEquals(12, 5, \"Cheeky\"));\n\n        assertTrue(r.rangeEquals(18, 5, \"CHOKE\"));\n        assertFalse(r.rangeEquals(18, 5, \"CHIKE\"));\n    }",
        "begin_line": 231,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 78)",
            "(line 234,col 9)-(line 234,col 49)",
            "(line 235,col 9)-(line 235,col 50)",
            "(line 236,col 9)-(line 236,col 49)",
            "(line 238,col 9)-(line 238,col 49)",
            "(line 239,col 9)-(line 239,col 50)",
            "(line 241,col 9)-(line 241,col 50)",
            "(line 242,col 9)-(line 242,col 52)",
            "(line 244,col 9)-(line 244,col 50)",
            "(line 245,col 9)-(line 245,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.CharacterReaderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java",
        "signature": "org.jsoup.parser.CharacterReaderTest.empty()",
        "snippet": "    @Test\n    public void empty() {\n        CharacterReader r = new CharacterReader(\"One\");\n        assertTrue(r.matchConsume(\"One\"));\n        assertTrue(r.isEmpty());\n\n        r = new CharacterReader(\"Two\");\n        String two = r.consumeToEnd();\n        assertEquals(\"Two\", two);\n    }",
        "begin_line": 248,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 55)",
            "(line 251,col 9)-(line 251,col 42)",
            "(line 252,col 9)-(line 252,col 32)",
            "(line 254,col 9)-(line 254,col 39)",
            "(line 255,col 9)-(line 255,col 38)",
            "(line 256,col 9)-(line 256,col 33)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.parsesRoughAttributeString()",
        "snippet": "    @Test public void parsesRoughAttributeString() {\n        String html = \"<a id=\\\"123\\\" class=\\\"baz = 'bar'\\\" style = 'border: 2px'qux zim foo = 12 mux=18 />\";\n        // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>\n\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(7, attr.size());\n        assertEquals(\"123\", attr.get(\"id\"));\n        assertEquals(\"baz = 'bar'\", attr.get(\"class\"));\n        assertEquals(\"border: 2px\", attr.get(\"style\"));\n        assertEquals(\"\", attr.get(\"qux\"));\n        assertEquals(\"\", attr.get(\"zim\"));\n        assertEquals(\"12\", attr.get(\"foo\"));\n        assertEquals(\"18\", attr.get(\"mux\"));\n    }",
        "begin_line": 22,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 108)",
            "(line 26,col 9)-(line 26,col 68)",
            "(line 27,col 9)-(line 27,col 42)",
            "(line 28,col 9)-(line 28,col 37)",
            "(line 29,col 9)-(line 29,col 44)",
            "(line 30,col 9)-(line 30,col 55)",
            "(line 31,col 9)-(line 31,col 55)",
            "(line 32,col 9)-(line 32,col 42)",
            "(line 33,col 9)-(line 33,col 42)",
            "(line 34,col 9)-(line 34,col 44)",
            "(line 35,col 9)-(line 35,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.handlesNewLinesAndReturns()",
        "snippet": "    @Test public void handlesNewLinesAndReturns() {\n        String html = \"<a\\r\\nfoo='bar\\r\\nqux'\\r\\nbar\\r\\n=\\r\\ntwo>One</a>\";\n        Element el = Jsoup.parse(html).select(\"a\").first();\n        assertEquals(2, el.attributes().size());\n        assertEquals(\"bar\\r\\nqux\", el.attr(\"foo\")); // currently preserves newlines in quoted attributes. todo confirm if should.\n        assertEquals(\"two\", el.attr(\"bar\"));\n    }",
        "begin_line": 38,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 74)",
            "(line 40,col 9)-(line 40,col 59)",
            "(line 41,col 9)-(line 41,col 48)",
            "(line 42,col 9)-(line 42,col 51)",
            "(line 43,col 9)-(line 43,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.parsesEmptyString()",
        "snippet": "    @Test public void parsesEmptyString() {\n        String html = \"<a />\";\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(0, attr.size());\n    }",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 30)",
            "(line 48,col 9)-(line 48,col 68)",
            "(line 49,col 9)-(line 49,col 42)",
            "(line 50,col 9)-(line 50,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.canStartWithEq()",
        "snippet": "    @Test public void canStartWithEq() {\n        String html = \"<a =empty />\";\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(1, attr.size());\n        assertTrue(attr.hasKey(\"=empty\"));\n        assertEquals(\"\", attr.get(\"=empty\"));\n    }",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 37)",
            "(line 55,col 9)-(line 55,col 68)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 37)",
            "(line 58,col 9)-(line 58,col 42)",
            "(line 59,col 9)-(line 59,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.strictAttributeUnescapes()",
        "snippet": "    @Test public void strictAttributeUnescapes() {\n        String html = \"<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>\";\n        Elements els = Jsoup.parse(html).select(\"a\");\n        assertEquals(\"?foo=bar&mid&lt=true\", els.first().attr(\"href\"));\n        assertEquals(\"?foo=bar<qux&lg=1\", els.last().attr(\"href\"));\n    }",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 112)",
            "(line 64,col 9)-(line 64,col 53)",
            "(line 65,col 9)-(line 65,col 71)",
            "(line 66,col 9)-(line 66,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.moreAttributeUnescapes()",
        "snippet": "    @Test public void moreAttributeUnescapes() {\n        String html = \"<a href='&wr_id=123&mid-size=true&ok=&wr'>Check</a>\";\n        Elements els = Jsoup.parse(html).select(\"a\");\n        assertEquals(\"&wr_id=123&mid-size=true&ok=&wr\", els.first().attr(\"href\"));\n    }",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 76)",
            "(line 71,col 9)-(line 71,col 53)",
            "(line 72,col 9)-(line 72,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.parsesBooleanAttributes()",
        "snippet": "    @Test public void parsesBooleanAttributes() {\n        String html = \"<a normal=\\\"123\\\" boolean empty=\\\"\\\"></a>\";\n        Element el = Jsoup.parse(html).select(\"a\").first();\n        \n        assertEquals(\"123\", el.attr(\"normal\"));\n        assertEquals(\"\", el.attr(\"boolean\"));\n        assertEquals(\"\", el.attr(\"empty\"));\n        \n        List<Attribute> attributes = el.attributes().asList();\n        assertEquals(\"There should be 3 attribute present\", 3, attributes.size());\n        \n        // Assuming the list order always follows the parsed html\n\t\tassertFalse(\"'normal' attribute should not be boolean\", attributes.get(0) instanceof BooleanAttribute);        \n\t\tassertTrue(\"'boolean' attribute should be boolean\", attributes.get(1) instanceof BooleanAttribute);        \n\t\tassertFalse(\"'empty' attribute should not be boolean\", attributes.get(2) instanceof BooleanAttribute);        \n        \n        assertEquals(html, el.outerHtml());\n    }",
        "begin_line": 75,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 66)",
            "(line 77,col 9)-(line 77,col 59)",
            "(line 79,col 9)-(line 79,col 47)",
            "(line 80,col 9)-(line 80,col 45)",
            "(line 81,col 9)-(line 81,col 43)",
            "(line 83,col 9)-(line 83,col 62)",
            "(line 84,col 9)-(line 84,col 82)",
            "(line 87,col 3)-(line 87,col 105)",
            "(line 88,col 3)-(line 88,col 101)",
            "(line 89,col 3)-(line 89,col 104)",
            "(line 91,col 9)-(line 91,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.AttributeParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java",
        "signature": "org.jsoup.parser.AttributeParseTest.dropsSlashFromAttributeName()",
        "snippet": "    @Test public void dropsSlashFromAttributeName() {\n        String html = \"<img /onerror='doMyJob'/>\";\n        Document doc = Jsoup.parse(html);\n        assertTrue(\"SelfClosingStartTag ignores last character\", doc.select(\"img[onerror]\").size() != 0);\n        assertEquals(\"<img onerror=\\\"doMyJob\\\">\", doc.body().html());\n\n        doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<img onerror=\\\"doMyJob\\\" />\", doc.html());\n    }",
        "begin_line": 94,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 50)",
            "(line 96,col 9)-(line 96,col 41)",
            "(line 97,col 9)-(line 97,col 105)",
            "(line 98,col 9)-(line 98,col 69)",
            "(line 100,col 9)-(line 100,col 56)",
            "(line 101,col 9)-(line 101,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.isCaseSensitive()",
        "snippet": "    @Test public void isCaseSensitive() {\n        Tag p1 = Tag.valueOf(\"P\");\n        Tag p2 = Tag.valueOf(\"p\");\n        assertFalse(p1.equals(p2));\n    }",
        "begin_line": 16,
        "end_line": 20,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 34)",
            "(line 18,col 9)-(line 18,col 34)",
            "(line 19,col 9)-(line 19,col 35)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.canBeInsensitive()",
        "snippet": "    @Test @MultiLocaleTest public void canBeInsensitive() {\n        Tag script1 = Tag.valueOf(\"script\", ParseSettings.htmlDefault);\n        Tag script2 = Tag.valueOf(\"SCRIPT\", ParseSettings.htmlDefault);\n        assertSame(script1, script2);\n    }",
        "begin_line": 22,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 71)",
            "(line 24,col 9)-(line 24,col 71)",
            "(line 25,col 9)-(line 25,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.trims()",
        "snippet": "    @Test public void trims() {\n        Tag p1 = Tag.valueOf(\"p\");\n        Tag p2 = Tag.valueOf(\" p \");\n        assertEquals(p1, p2);\n    }",
        "begin_line": 28,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 34)",
            "(line 30,col 9)-(line 30,col 36)",
            "(line 31,col 9)-(line 31,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.equality()",
        "snippet": "    @Test public void equality() {\n        Tag p1 = Tag.valueOf(\"p\");\n        Tag p2 = Tag.valueOf(\"p\");\n        assertTrue(p1.equals(p2));\n        assertTrue(p1 == p2);\n    }",
        "begin_line": 34,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 34)",
            "(line 36,col 9)-(line 36,col 34)",
            "(line 37,col 9)-(line 37,col 34)",
            "(line 38,col 9)-(line 38,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.divSemantics()",
        "snippet": "    @Test public void divSemantics() {\n        Tag div = Tag.valueOf(\"div\");\n\n        assertTrue(div.isBlock());\n        assertTrue(div.formatAsBlock());\n    }",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 37)",
            "(line 44,col 9)-(line 44,col 34)",
            "(line 45,col 9)-(line 45,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.pSemantics()",
        "snippet": "    @Test public void pSemantics() {\n        Tag p = Tag.valueOf(\"p\");\n\n        assertTrue(p.isBlock());\n        assertFalse(p.formatAsBlock());\n    }",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 33)",
            "(line 51,col 9)-(line 51,col 32)",
            "(line 52,col 9)-(line 52,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.imgSemantics()",
        "snippet": "    @Test public void imgSemantics() {\n        Tag img = Tag.valueOf(\"img\");\n        assertTrue(img.isInline());\n        assertTrue(img.isSelfClosing());\n        assertFalse(img.isBlock());\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 37)",
            "(line 57,col 9)-(line 57,col 35)",
            "(line 58,col 9)-(line 58,col 40)",
            "(line 59,col 9)-(line 59,col 35)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.defaultSemantics()",
        "snippet": "    @Test public void defaultSemantics() {\n        Tag foo = Tag.valueOf(\"FOO\"); // not defined\n        Tag foo2 = Tag.valueOf(\"FOO\");\n\n        assertEquals(foo, foo2);\n        assertTrue(foo.isInline());\n        assertTrue(foo.formatAsBlock());\n    }",
        "begin_line": 62,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 64,col 38)",
            "(line 66,col 9)-(line 66,col 32)",
            "(line 67,col 9)-(line 67,col 35)",
            "(line 68,col 9)-(line 68,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.valueOfChecksNotNull()",
        "snippet": "    @Test(expected = IllegalArgumentException.class) public void valueOfChecksNotNull() {\n        Tag.valueOf(null);\n    }",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TagTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TagTest.java",
        "signature": "org.jsoup.parser.TagTest.valueOfChecksNotEmpty()",
        "snippet": "    @Test(expected = IllegalArgumentException.class) public void valueOfChecksNotEmpty() {\n        Tag.valueOf(\" \");\n    }",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 25)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesSimpleDocument()",
        "snippet": "    @Test public void parsesSimpleDocument() {\n        String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n        Document doc = Jsoup.parse(html);\n        // need a better way to verify these:\n        Element p = doc.body().child(0);\n        assertEquals(\"p\", p.tagName());\n        Element img = p.child(0);\n        assertEquals(\"foo.png\", img.attr(\"src\"));\n        assertEquals(\"img\", img.tagName());\n    }",
        "begin_line": 33,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 127)",
            "(line 35,col 9)-(line 35,col 41)",
            "(line 37,col 9)-(line 37,col 40)",
            "(line 38,col 9)-(line 38,col 39)",
            "(line 39,col 9)-(line 39,col 33)",
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesRoughAttributes()",
        "snippet": "    @Test public void parsesRoughAttributes() {\n        String html = \"<html><head><title>First!</title></head><body><p class=\\\"foo > bar\\\">First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        // need a better way to verify these:\n        Element p = doc.body().child(0);\n        assertEquals(\"p\", p.tagName());\n        assertEquals(\"foo > bar\", p.attr(\"class\"));\n    }",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 147)",
            "(line 46,col 9)-(line 46,col 41)",
            "(line 49,col 9)-(line 49,col 40)",
            "(line 50,col 9)-(line 50,col 39)",
            "(line 51,col 9)-(line 51,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesQuiteRoughAttributes()",
        "snippet": "    @Test public void parsesQuiteRoughAttributes() {\n        String html = \"<p =a>One<a <p>Something</p>Else\";\n        // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<p =a>One<a <p>Something</a></p>\\n\" +\n                \"<a <p>Else</a>\", doc.body().html());\n\n        doc = Jsoup.parse(\"<p .....>\");\n        assertEquals(\"<p .....></p>\", doc.body().html());\n    }",
        "begin_line": 54,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 57)",
            "(line 57,col 9)-(line 57,col 41)",
            "(line 58,col 9)-(line 59,col 53)",
            "(line 61,col 9)-(line 61,col 39)",
            "(line 62,col 9)-(line 62,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesComments()",
        "snippet": "    @Test public void parsesComments() {\n        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        Element body = doc.body();\n        Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag\n        assertEquals(\" <table><tr><td></table> \", comment.getData());\n        Element p = body.child(1);\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n    }",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 121)",
            "(line 67,col 9)-(line 67,col 41)",
            "(line 69,col 9)-(line 69,col 34)",
            "(line 70,col 9)-(line 70,col 54)",
            "(line 71,col 9)-(line 71,col 69)",
            "(line 72,col 9)-(line 72,col 34)",
            "(line 73,col 9)-(line 73,col 50)",
            "(line 74,col 9)-(line 74,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesUnterminatedComments()",
        "snippet": "    @Test public void parsesUnterminatedComments() {\n        String html = \"<p>Hello<!-- <tr><td>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.getElementsByTag(\"p\").get(0);\n        assertEquals(\"Hello\", p.text());\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n        Comment comment = (Comment) p.childNode(1);\n        assertEquals(\" <tr><td>\", comment.getData());\n    }",
        "begin_line": 77,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 46)",
            "(line 79,col 9)-(line 79,col 41)",
            "(line 80,col 9)-(line 80,col 53)",
            "(line 81,col 9)-(line 81,col 40)",
            "(line 82,col 9)-(line 82,col 50)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 51)",
            "(line 85,col 9)-(line 85,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.dropsUnterminatedTag()",
        "snippet": "    @Test public void dropsUnterminatedTag() {\n        // jsoup used to parse this to <p>, but whatwg, webkit will drop.\n        String h1 = \"<p\";\n        Document doc = Jsoup.parse(h1);\n        assertEquals(0, doc.getElementsByTag(\"p\").size());\n        assertEquals(\"\", doc.text());\n\n        String h2 = \"<div id=1<p id='2'\";\n        doc = Jsoup.parse(h2);\n        assertEquals(\"\", doc.text());\n    }",
        "begin_line": 88,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 25)",
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 58)",
            "(line 93,col 9)-(line 93,col 37)",
            "(line 95,col 9)-(line 95,col 41)",
            "(line 96,col 9)-(line 96,col 30)",
            "(line 97,col 9)-(line 97,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.dropsUnterminatedAttribute()",
        "snippet": "    @Test public void dropsUnterminatedAttribute() {\n        // jsoup used to parse this to <p id=\"foo\">, but whatwg, webkit will drop.\n        String h1 = \"<p id=\\\"foo\";\n        Document doc = Jsoup.parse(h1);\n        assertEquals(\"\", doc.text());\n    }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 39)",
            "(line 104,col 9)-(line 104,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesUnterminatedTextarea()",
        "snippet": "    @Test public void parsesUnterminatedTextarea() {\n        // don't parse right to end, but break on <p>\n        Document doc = Jsoup.parse(\"<body><p><textarea>one<p>two\");\n        Element t = doc.select(\"textarea\").first();\n        assertEquals(\"one\", t.text());\n        assertEquals(\"two\", doc.select(\"p\").get(1).text());\n    }",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 67)",
            "(line 110,col 9)-(line 110,col 51)",
            "(line 111,col 9)-(line 111,col 38)",
            "(line 112,col 9)-(line 112,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesUnterminatedOption()",
        "snippet": "    @Test public void parsesUnterminatedOption() {\n        // bit weird this -- browsers and spec get stuck in select until there's a </select>\n        Document doc = Jsoup.parse(\"<body><p><select><option>One<option>Two</p><p>Three</p>\");\n        Elements options = doc.select(\"option\");\n        assertEquals(2, options.size());\n        assertEquals(\"One\", options.first().text());\n        assertEquals(\"TwoThree\", options.last().text());\n    }",
        "begin_line": 115,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 94)",
            "(line 118,col 9)-(line 118,col 48)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 52)",
            "(line 121,col 9)-(line 121,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testSelectWithOption()",
        "snippet": "    @Test public void testSelectWithOption() {\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document document = parser.parseInput(\"<select><option>Option 1</option></select>\", \"http://jsoup.org\");\n        assertEquals(0, parser.getErrors().size());\n    }",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 44)",
            "(line 126,col 9)-(line 126,col 34)",
            "(line 127,col 9)-(line 127,col 112)",
            "(line 128,col 9)-(line 128,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testSpaceAfterTag()",
        "snippet": "    @Test public void testSpaceAfterTag() {\n        Document doc = Jsoup.parse(\"<div > <a name=\\\"top\\\"></a ><p id=1 >Hello</p></div>\");\n        assertEquals(\"<div> <a name=\\\"top\\\"></a><p id=\\\"1\\\">Hello</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 91)",
            "(line 133,col 9)-(line 133,col 121)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.createsDocumentStructure()",
        "snippet": "    @Test public void createsDocumentStructure() {\n        String html = \"<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>\";\n        Document doc = Jsoup.parse(html);\n        Element head = doc.head();\n        Element body = doc.body();\n\n        assertEquals(1, doc.children().size()); // root node: contains html node\n        assertEquals(2, doc.child(0).children().size()); // html node: head and body\n        assertEquals(3, head.children().size());\n        assertEquals(1, body.children().size());\n\n        assertEquals(\"keywords\", head.getElementsByTag(\"meta\").get(0).attr(\"name\"));\n        assertEquals(0, body.getElementsByTag(\"meta\").size());\n        assertEquals(\"jsoup\", doc.title());\n        assertEquals(\"Hello world\", body.text());\n        assertEquals(\"Hello world\", body.children().get(0).text());\n    }",
        "begin_line": 136,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 108)",
            "(line 138,col 9)-(line 138,col 41)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 142,col 9)-(line 142,col 47)",
            "(line 143,col 9)-(line 143,col 56)",
            "(line 144,col 9)-(line 144,col 48)",
            "(line 145,col 9)-(line 145,col 48)",
            "(line 147,col 9)-(line 147,col 84)",
            "(line 148,col 9)-(line 148,col 62)",
            "(line 149,col 9)-(line 149,col 43)",
            "(line 150,col 9)-(line 150,col 49)",
            "(line 151,col 9)-(line 151,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.createsStructureFromBodySnippet()",
        "snippet": "    @Test public void createsStructureFromBodySnippet() {\n        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine\n        // needs to move into the start of the body\n        String html = \"foo <b>bar</b> baz\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"foo bar baz\", doc.text());\n\n    }",
        "begin_line": 154,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 158,col 41)",
            "(line 159,col 9)-(line 159,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesEscapedData()",
        "snippet": "    @Test public void handlesEscapedData() {\n        String html = \"<div title='Surf &amp; Turf'>Reef &amp; Beef</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.getElementsByTag(\"div\").get(0);\n\n        assertEquals(\"Surf & Turf\", div.attr(\"title\"));\n        assertEquals(\"Reef & Beef\", div.text());\n    }",
        "begin_line": 163,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 75)",
            "(line 165,col 9)-(line 165,col 41)",
            "(line 166,col 9)-(line 166,col 57)",
            "(line 168,col 9)-(line 168,col 55)",
            "(line 169,col 9)-(line 169,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesDataOnlyTags()",
        "snippet": "    @Test public void handlesDataOnlyTags() {\n        String t = \"<style>font-family: bold</style>\";\n        List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\");\n        assertEquals(\"font-family: bold\", tels.get(0).data());\n        assertEquals(\"\", tels.get(0).text());\n\n        String s = \"<p>Hello</p><script>obj.insert('<a rel=\\\"none\\\" />');\\ni++;</script><p>There</p>\";\n        Document doc = Jsoup.parse(s);\n        assertEquals(\"Hello There\", doc.text());\n        assertEquals(\"obj.insert('<a rel=\\\"none\\\" />');\\ni++;\", doc.data());\n    }",
        "begin_line": 172,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 54)",
            "(line 174,col 9)-(line 174,col 70)",
            "(line 175,col 9)-(line 175,col 62)",
            "(line 176,col 9)-(line 176,col 45)",
            "(line 178,col 9)-(line 178,col 102)",
            "(line 179,col 9)-(line 179,col 38)",
            "(line 180,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 181,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesTextAfterData()",
        "snippet": "    @Test public void handlesTextAfterData() {\n        String h = \"<html><body>pre <script>inner</script> aft</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head></head><body>pre <script>inner</script> aft</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 184,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 78)",
            "(line 186,col 9)-(line 186,col 38)",
            "(line 187,col 9)-(line 187,col 130)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesTextArea()",
        "snippet": "    @Test public void handlesTextArea() {\n        Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\");\n        Elements els = doc.select(\"textarea\");\n        assertEquals(\"Hello\", els.text());\n        assertEquals(\"Hello\", els.val());\n    }",
        "begin_line": 190,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 65)",
            "(line 192,col 9)-(line 192,col 46)",
            "(line 193,col 9)-(line 193,col 42)",
            "(line 194,col 9)-(line 194,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.preservesSpaceInTextArea()",
        "snippet": "    @Test public void preservesSpaceInTextArea() {\n        // preserve because the tag is marked as preserve white space\n        Document doc = Jsoup.parse(\"<textarea>\\n\\tOne\\n\\tTwo\\n\\tThree\\n</textarea>\");\n        String expect = \"One\\n\\tTwo\\n\\tThree\"; // the leading and trailing spaces are dropped as a convenience to authors\n        Element el = doc.select(\"textarea\").first();\n        assertEquals(expect, el.text());\n        assertEquals(expect, el.val());\n        assertEquals(expect, el.html());\n        assertEquals(\"<textarea>\\n\\t\" + expect + \"\\n</textarea>\", el.outerHtml()); // but preserved in round-trip html\n    }",
        "begin_line": 197,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 85)",
            "(line 200,col 9)-(line 200,col 46)",
            "(line 201,col 9)-(line 201,col 52)",
            "(line 202,col 9)-(line 202,col 40)",
            "(line 203,col 9)-(line 203,col 39)",
            "(line 204,col 9)-(line 204,col 40)",
            "(line 205,col 9)-(line 205,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.preservesSpaceInScript()",
        "snippet": "    @Test public void preservesSpaceInScript() {\n        // preserve because it's content is a data node\n        Document doc = Jsoup.parse(\"<script>\\nOne\\n\\tTwo\\n\\tThree\\n</script>\");\n        String expect = \"\\nOne\\n\\tTwo\\n\\tThree\\n\";\n        Element el = doc.select(\"script\").first();\n        assertEquals(expect, el.data());\n        assertEquals(\"One\\n\\tTwo\\n\\tThree\", el.html());\n        assertEquals(\"<script>\" + expect + \"</script>\", el.outerHtml());\n    }",
        "begin_line": 208,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 79)",
            "(line 211,col 9)-(line 211,col 50)",
            "(line 212,col 9)-(line 212,col 50)",
            "(line 213,col 9)-(line 213,col 40)",
            "(line 214,col 9)-(line 214,col 55)",
            "(line 215,col 9)-(line 215,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.doesNotCreateImplicitLists()",
        "snippet": "    @Test public void doesNotCreateImplicitLists() {\n        // old jsoup used to wrap this in <ul>, but that's not to spec\n        String h = \"<li>Point one<li>Point two\";\n        Document doc = Jsoup.parse(h);\n        Elements ol = doc.select(\"ul\"); // should NOT have created a default ul.\n        assertEquals(0, ol.size());\n        Elements lis = doc.select(\"li\");\n        assertEquals(2, lis.size());\n        assertEquals(\"body\", lis.first().parent().tagName());\n\n        // no fiddling with non-implicit lists\n        String h2 = \"<ol><li><p>Point the first<li><p>Point the second\";\n        Document doc2 = Jsoup.parse(h2);\n\n        assertEquals(0, doc2.select(\"ul\").size());\n        assertEquals(1, doc2.select(\"ol\").size());\n        assertEquals(2, doc2.select(\"ol li\").size());\n        assertEquals(2, doc2.select(\"ol li p\").size());\n        assertEquals(1, doc2.select(\"ol li\").get(0).children().size()); // one p in first li\n    }",
        "begin_line": 218,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 48)",
            "(line 221,col 9)-(line 221,col 38)",
            "(line 222,col 9)-(line 222,col 39)",
            "(line 223,col 9)-(line 223,col 35)",
            "(line 224,col 9)-(line 224,col 40)",
            "(line 225,col 9)-(line 225,col 36)",
            "(line 226,col 9)-(line 226,col 61)",
            "(line 229,col 9)-(line 229,col 72)",
            "(line 230,col 9)-(line 230,col 40)",
            "(line 232,col 9)-(line 232,col 50)",
            "(line 233,col 9)-(line 233,col 50)",
            "(line 234,col 9)-(line 234,col 53)",
            "(line 235,col 9)-(line 235,col 55)",
            "(line 236,col 9)-(line 236,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.discardsNakedTds()",
        "snippet": "    @Test public void discardsNakedTds() {\n        // jsoup used to make this into an implicit table; but browsers make it into a text run\n        String h = \"<td>Hello<td><p>There<p>now\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello<p>There</p><p>now</p>\", TextUtil.stripNewlines(doc.body().html()));\n        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table\n    }",
        "begin_line": 239,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 49)",
            "(line 242,col 9)-(line 242,col 38)",
            "(line 243,col 9)-(line 243,col 95)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesNestedImplicitTable()",
        "snippet": "    @Test public void handlesNestedImplicitTable() {\n        Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n        assertEquals(\"<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 247,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 137)",
            "(line 249,col 9)-(line 249,col 237)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesWhatWgExpensesTableExample()",
        "snippet": "    @Test public void handlesWhatWgExpensesTableExample() {\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n        Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n        assertEquals(\"<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 252,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 499)",
            "(line 255,col 9)-(line 255,col 715)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesTbodyTable()",
        "snippet": "    @Test public void handlesTbodyTable() {\n        Document doc = Jsoup.parse(\"<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>\");\n        assertEquals(\"<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 141)",
            "(line 260,col 9)-(line 260,col 131)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesImplicitCaptionClose()",
        "snippet": "    @Test public void handlesImplicitCaptionClose() {\n        Document doc = Jsoup.parse(\"<table><caption>A caption<td>One<td>Two\");\n        assertEquals(\"<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 263,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 78)",
            "(line 265,col 9)-(line 265,col 159)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.noTableDirectInTable()",
        "snippet": "    @Test public void noTableDirectInTable() {\n        Document doc = Jsoup.parse(\"<table> <td>One <td><table><td>Two</table> <table><td>Three\");\n        assertEquals(\"<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>\",\n                TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 268,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 98)",
            "(line 270,col 9)-(line 271,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.ignoresDupeEndTrTag()",
        "snippet": "    @Test public void ignoresDupeEndTrTag() {\n        Document doc = Jsoup.parse(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>\"); // two </tr></tr>, must ignore or will close table\n        assertEquals(\"<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>\",\n                TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 274,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 139)",
            "(line 276,col 9)-(line 277,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesBaseTags()",
        "snippet": "    @Test public void handlesBaseTags() {\n        // only listen to the first base href\n        String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>\";\n        Document doc = Jsoup.parse(h, \"http://foo/\");\n        assertEquals(\"http://foo/2/\", doc.baseUri()); // gets set once, so doc and descendants have first only\n\n        Elements anchors = doc.getElementsByTag(\"a\");\n        assertEquals(3, anchors.size());\n\n        assertEquals(\"http://foo/2/\", anchors.get(0).baseUri());\n        assertEquals(\"http://foo/2/\", anchors.get(1).baseUri());\n        assertEquals(\"http://foo/2/\", anchors.get(2).baseUri());\n\n        assertEquals(\"http://foo/2/1\", anchors.get(0).absUrl(\"href\"));\n        assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n        assertEquals(\"http://foo/4\", anchors.get(2).absUrl(\"href\"));\n    }",
        "begin_line": 280,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 111)",
            "(line 283,col 9)-(line 283,col 53)",
            "(line 284,col 9)-(line 284,col 53)",
            "(line 286,col 9)-(line 286,col 53)",
            "(line 287,col 9)-(line 287,col 40)",
            "(line 289,col 9)-(line 289,col 64)",
            "(line 290,col 9)-(line 290,col 64)",
            "(line 291,col 9)-(line 291,col 64)",
            "(line 293,col 9)-(line 293,col 70)",
            "(line 294,col 9)-(line 294,col 70)",
            "(line 295,col 9)-(line 295,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesProtocolRelativeUrl()",
        "snippet": "    @Test public void handlesProtocolRelativeUrl() {\n        String base = \"https://example.com/\";\n        String html = \"<img src='//example.net/img.jpg'>\";\n        Document doc = Jsoup.parse(html, base);\n        Element el = doc.select(\"img\").first();\n        assertEquals(\"https://example.net/img.jpg\", el.absUrl(\"src\"));\n    }",
        "begin_line": 298,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 45)",
            "(line 300,col 9)-(line 300,col 58)",
            "(line 301,col 9)-(line 301,col 47)",
            "(line 302,col 9)-(line 302,col 47)",
            "(line 303,col 9)-(line 303,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesCdata()",
        "snippet": "    @Test public void handlesCdata() {\n        // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now\n        String h = \"<div id=1><![CDATA[<html>\\n<foo><&amp;]]></div>\"; // the &amp; in there should remain literal\n        Document doc = Jsoup.parse(h);\n        Element div = doc.getElementById(\"1\");\n        assertEquals(\"<html> <foo><&amp;\", div.text());\n        assertEquals(0, div.children().size());\n        assertEquals(1, div.childNodeSize()); // no elements, one text node\n    }",
        "begin_line": 306,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 69)",
            "(line 309,col 9)-(line 309,col 38)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 55)",
            "(line 312,col 9)-(line 312,col 47)",
            "(line 313,col 9)-(line 313,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedCdataAtEOF()",
        "snippet": "    @Test public void handlesUnclosedCdataAtEOF() {\n        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF\n        String h = \"<![CDATA[]]\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(1, doc.body().childNodeSize());\n    }",
        "begin_line": 316,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 33)",
            "(line 319,col 9)-(line 319,col 38)",
            "(line 320,col 9)-(line 320,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesInvalidStartTags()",
        "snippet": "    @Test public void handlesInvalidStartTags() {\n        String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello < There <&>\", doc.select(\"div\").first().text());\n    }",
        "begin_line": 323,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 54)",
            "(line 325,col 9)-(line 325,col 38)",
            "(line 326,col 9)-(line 326,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnknownTags()",
        "snippet": "    @Test public void handlesUnknownTags() {\n        String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements foos = doc.select(\"foo\");\n        assertEquals(2, foos.size());\n        assertEquals(\"bar\", foos.first().attr(\"title\"));\n        assertEquals(\"qux\", foos.last().attr(\"title\"));\n        assertEquals(\"there\", foos.last().text());\n    }",
        "begin_line": 329,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 330,col 79)",
            "(line 331,col 9)-(line 331,col 38)",
            "(line 332,col 9)-(line 332,col 42)",
            "(line 333,col 9)-(line 333,col 37)",
            "(line 334,col 9)-(line 334,col 56)",
            "(line 335,col 9)-(line 335,col 55)",
            "(line 336,col 9)-(line 336,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnknownInlineTags()",
        "snippet": "    @Test public void handlesUnknownInlineTags() {\n        String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\";\n        Document doc = Jsoup.parseBodyFragment(h);\n        String out = doc.body().html();\n        assertEquals(h, TextUtil.stripNewlines(out));\n    }",
        "begin_line": 339,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 83)",
            "(line 341,col 9)-(line 341,col 50)",
            "(line 342,col 9)-(line 342,col 39)",
            "(line 343,col 9)-(line 343,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.parsesBodyFragment()",
        "snippet": "    @Test public void parsesBodyFragment() {\n        String h = \"<!-- comment --><p><a href='foo'>One</a></p>\";\n        Document doc = Jsoup.parseBodyFragment(h, \"http://example.com\");\n        assertEquals(\"<body><!-- comment --><p><a href=\\\"foo\\\">One</a></p></body>\", TextUtil.stripNewlines(doc.body().outerHtml()));\n        assertEquals(\"http://example.com/foo\", doc.select(\"a\").first().absUrl(\"href\"));\n    }",
        "begin_line": 346,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 66)",
            "(line 348,col 9)-(line 348,col 72)",
            "(line 349,col 9)-(line 349,col 132)",
            "(line 350,col 9)-(line 350,col 87)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnknownNamespaceTags()",
        "snippet": "    @Test public void handlesUnknownNamespaceTags() {\n        // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.\n        String h = \"<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<foo:bar id=\\\"1\\\" /><abc:def id=\\\"2\\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 353,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 103)",
            "(line 356,col 9)-(line 356,col 38)",
            "(line 357,col 9)-(line 357,col 155)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesKnownEmptyBlocks()",
        "snippet": "    @Test public void handlesKnownEmptyBlocks() {\n        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n        String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img><img></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 360,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 153)",
            "(line 363,col 9)-(line 363,col 38)",
            "(line 364,col 9)-(line 364,col 222)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesKnownEmptyNoFrames()",
        "snippet": "    @Test public void handlesKnownEmptyNoFrames() {\n        String h = \"<html><head><noframes /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><noframes></noframes><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 367,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 91)",
            "(line 369,col 9)-(line 369,col 38)",
            "(line 370,col 9)-(line 370,col 143)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesKnownEmptyStyle()",
        "snippet": "    @Test public void handlesKnownEmptyStyle() {\n        String h = \"<html><head><style /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><style></style><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 373,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 88)",
            "(line 375,col 9)-(line 375,col 38)",
            "(line 376,col 9)-(line 376,col 137)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesKnownEmptyTitle()",
        "snippet": "    @Test public void handlesKnownEmptyTitle() {\n        String h = \"<html><head><title /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><title></title><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 379,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 88)",
            "(line 381,col 9)-(line 381,col 38)",
            "(line 382,col 9)-(line 382,col 137)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesKnownEmptyIframe()",
        "snippet": "    @Test public void handlesKnownEmptyIframe() {\n        String h = \"<p>One</p><iframe id=1 /><p>Two\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head></head><body><p>One</p><iframe id=\\\"1\\\"></iframe><p>Two</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 385,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 53)",
            "(line 387,col 9)-(line 387,col 38)",
            "(line 388,col 9)-(line 388,col 146)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesSolidusAtAttributeEnd()",
        "snippet": "    @Test public void handlesSolidusAtAttributeEnd() {\n        // this test makes sure [<a href=/>link</a>] is parsed as [<a href=\"/\">link</a>], not [<a href=\"\" /><a>link</a>]\n        String h = \"<a href=/>link</a>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<a href=\\\"/\\\">link</a>\", doc.body().html());\n    }",
        "begin_line": 391,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 40)",
            "(line 394,col 9)-(line 394,col 38)",
            "(line 395,col 9)-(line 395,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesMultiClosingBody()",
        "snippet": "    @Test public void handlesMultiClosingBody() {\n        String h = \"<body><p>Hello</body><p>there</p></body></body></html><p>now\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(3, doc.select(\"p\").size());\n        assertEquals(3, doc.body().children().size());\n    }",
        "begin_line": 398,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 82)",
            "(line 400,col 9)-(line 400,col 38)",
            "(line 401,col 9)-(line 401,col 48)",
            "(line 402,col 9)-(line 402,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedDefinitionLists()",
        "snippet": "    @Test public void handlesUnclosedDefinitionLists() {\n        // jsoup used to create a <dl>, but that's not to spec\n        String h = \"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(0, doc.select(\"dl\").size()); // no auto dl\n        assertEquals(4, doc.select(\"dt, dd\").size());\n        Elements dts = doc.select(\"dt\");\n        assertEquals(2, dts.size());\n        assertEquals(\"Zug\", dts.get(1).nextElementSibling().text());\n    }",
        "begin_line": 405,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 50)",
            "(line 408,col 9)-(line 408,col 38)",
            "(line 409,col 9)-(line 409,col 49)",
            "(line 410,col 9)-(line 410,col 53)",
            "(line 411,col 9)-(line 411,col 40)",
            "(line 412,col 9)-(line 412,col 36)",
            "(line 413,col 9)-(line 413,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesBlocksInDefinitions()",
        "snippet": "    @Test public void handlesBlocksInDefinitions() {\n        // per the spec, dt and dd are inline, but in practise are block\n        String h = \"<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"dt\", doc.select(\"#1\").first().parent().tagName());\n        assertEquals(\"dd\", doc.select(\"#2\").first().parent().tagName());\n        assertEquals(\"<dl><dt><div id=\\\"1\\\">Term</div></dt><dd><div id=\\\"2\\\">Def</div></dd></dl>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 416,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 418,col 9)-(line 418,col 88)",
            "(line 419,col 9)-(line 419,col 38)",
            "(line 420,col 9)-(line 420,col 72)",
            "(line 421,col 9)-(line 421,col 72)",
            "(line 422,col 9)-(line 422,col 142)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesFrames()",
        "snippet": "    @Test public void handlesFrames() {\n        String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\"><frame src=\\\"foo\\\"></frameset></html>\",\n                TextUtil.stripNewlines(doc.html()));\n        // no body auto vivification\n    }",
        "begin_line": 425,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 426,col 9)-(line 426,col 145)",
            "(line 427,col 9)-(line 427,col 38)",
            "(line 428,col 9)-(line 429,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.ignoresContentAfterFrameset()",
        "snippet": "    @Test public void ignoresContentAfterFrameset() {\n        String h = \"<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><title>One</title></head><frameset><frame><frame></frameset></html>\", TextUtil.stripNewlines(doc.html()));\n        // no body, no table. No crash!\n    }",
        "begin_line": 433,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 434,col 9)-(line 434,col 120)",
            "(line 435,col 9)-(line 435,col 38)",
            "(line 436,col 9)-(line 436,col 140)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesJavadocFont()",
        "snippet": "    @Test public void handlesJavadocFont() {\n        String h = \"<TD BGCOLOR=\\\"#EEEEFF\\\" CLASS=\\\"NavBarCell1\\\">    <A HREF=\\\"deprecated-list.html\\\"><FONT CLASS=\\\"NavBarFont1\\\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\";\n        Document doc = Jsoup.parse(h);\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"Deprecated\", a.text());\n        assertEquals(\"font\", a.child(0).tagName());\n        assertEquals(\"b\", a.child(0).child(0).tagName());\n    }",
        "begin_line": 440,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 172)",
            "(line 442,col 9)-(line 442,col 38)",
            "(line 443,col 9)-(line 443,col 44)",
            "(line 444,col 9)-(line 444,col 45)",
            "(line 445,col 9)-(line 445,col 51)",
            "(line 446,col 9)-(line 446,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesBaseWithoutHref()",
        "snippet": "    @Test public void handlesBaseWithoutHref() {\n        String h = \"<head><base target='_blank'></head><body><a href=/foo>Test</a></body>\";\n        Document doc = Jsoup.parse(h, \"http://example.com/\");\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"/foo\", a.attr(\"href\"));\n        assertEquals(\"http://example.com/foo\", a.attr(\"abs:href\"));\n    }",
        "begin_line": 449,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 91)",
            "(line 451,col 9)-(line 451,col 61)",
            "(line 452,col 9)-(line 452,col 44)",
            "(line 453,col 9)-(line 453,col 45)",
            "(line 454,col 9)-(line 454,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.normalisesDocument()",
        "snippet": "    @Test public void normalisesDocument() {\n        String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 457,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 112)",
            "(line 459,col 9)-(line 459,col 38)",
            "(line 460,col 9)-(line 461,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.normalisesEmptyDocument()",
        "snippet": "    @Test public void normalisesEmptyDocument() {\n        Document doc = Jsoup.parse(\"\");\n        assertEquals(\"<html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 464,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 39)",
            "(line 466,col 9)-(line 466,col 100)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.normalisesHeadlessBody()",
        "snippet": "    @Test public void normalisesHeadlessBody() {\n        Document doc = Jsoup.parse(\"<html><body><span class=\\\"foo\\\">bar</span>\");\n        assertEquals(\"<html><head></head><body><span class=\\\"foo\\\">bar</span></body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 469,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 81)",
            "(line 471,col 9)-(line 472,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.normalisedBodyAfterContent()",
        "snippet": "    @Test public void normalisedBodyAfterContent() {\n        Document doc = Jsoup.parse(\"<font face=Arial><body class=name><div>One</div></body></font>\");\n        assertEquals(\"<html><head></head><body class=\\\"name\\\"><font face=\\\"Arial\\\"><div>One</div></font></body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 101)",
            "(line 477,col 9)-(line 478,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.findsCharsetInMalformedMeta()",
        "snippet": "    @Test public void findsCharsetInMalformedMeta() {\n        String h = \"<meta http-equiv=Content-Type content=text/html; charset=gb2312>\";\n        // example cited for reason of html5's <meta charset> element\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"gb2312\", doc.select(\"meta\").attr(\"charset\"));\n    }",
        "begin_line": 481,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 86)",
            "(line 484,col 9)-(line 484,col 38)",
            "(line 485,col 9)-(line 485,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testHgroup()",
        "snippet": "    @Test public void testHgroup() {\n        // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK\n        Document doc = Jsoup.parse(\"<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>\");\n        assertEquals(\"<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 488,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 490,col 9)-(line 490,col 142)",
            "(line 491,col 9)-(line 491,col 191)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testRelaxedTags()",
        "snippet": "    @Test public void testRelaxedTags() {\n        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>\");\n        assertEquals(\"<abc_def id=\\\"1\\\">Hello</abc_def> <abc-def>There</abc-def>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 495,col 93)",
            "(line 496,col 9)-(line 496,col 126)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testHeaderContents()",
        "snippet": "    @Test public void testHeaderContents() {\n        // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any\n        // spec, which defines them as containing phrasing content only. so, reality over theory.\n        Document doc = Jsoup.parse(\"<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>\");\n        assertEquals(\"<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 499,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 502,col 9)-(line 502,col 105)",
            "(line 503,col 9)-(line 503,col 134)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testSpanContents()",
        "snippet": "    @Test public void testSpanContents() {\n        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag\n        Document doc = Jsoup.parse(\"<span>Hello <div>there</div> <span>now</span></span>\");\n        assertEquals(\"<span>Hello <div>there</div> <span>now</span></span>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 506,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 91)",
            "(line 509,col 9)-(line 509,col 120)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testNoImagesInNoScriptInHead()",
        "snippet": "    @Test public void testNoImagesInNoScriptInHead() {\n        // jsoup used to allow, but against spec if parsing with noscript\n        Document doc = Jsoup.parse(\"<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>\");\n        assertEquals(\"<html><head><noscript>&lt;img src=\\\"foo\\\"&gt;</noscript></head><body><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 512,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 126)",
            "(line 515,col 9)-(line 515,col 156)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testAFlowContents()",
        "snippet": "    @Test public void testAFlowContents() {\n        // html5 has <a> as either phrasing or block\n        Document doc = Jsoup.parse(\"<a>Hello <div>there</div> <span>now</span></a>\");\n        assertEquals(\"<a>Hello <div>there</div> <span>now</span></a>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 518,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 520,col 9)-(line 520,col 85)",
            "(line 521,col 9)-(line 521,col 114)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testFontFlowContents()",
        "snippet": "    @Test public void testFontFlowContents() {\n        // html5 has no definition of <font>; often used as flow\n        Document doc = Jsoup.parse(\"<font>Hello <div>there</div> <span>now</span></font>\");\n        assertEquals(\"<font>Hello <div>there</div> <span>now</span></font>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 524,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 526,col 9)-(line 526,col 91)",
            "(line 527,col 9)-(line 527,col 120)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesMisnestedTagsBI()",
        "snippet": "    @Test public void handlesMisnestedTagsBI() {\n        // whatwg: <b><i></b></i>\n        String h = \"<p>1<b>2<i>3</b>4</i>5</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<p>1<b>2<i>3</i></b><i>4</i>5</p>\", doc.body().html());\n        // adoption agency on </b>, reconstruction of formatters on 4.\n    }",
        "begin_line": 530,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 532,col 9)-(line 532,col 48)",
            "(line 533,col 9)-(line 533,col 38)",
            "(line 534,col 9)-(line 534,col 77)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesMisnestedTagsBP()",
        "snippet": "    @Test public void handlesMisnestedTagsBP() {\n        //  whatwg: <b><p></b></p>\n        String h = \"<b>1<p>2</b>3</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<b>1</b>\\n<p><b>2</b>3</p>\", doc.body().html());\n    }",
        "begin_line": 538,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 540,col 9)-(line 540,col 39)",
            "(line 541,col 9)-(line 541,col 38)",
            "(line 542,col 9)-(line 542,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesMisnestedAInDivs()",
        "snippet": "    @Ignore // todo: test case for https://github.com/jhy/jsoup/issues/845. Doesn't work yet.\n    @Test public void handlesMisnestedAInDivs() {\n        String h = \"<a href='#1'><div><div><a href='#2'>child</a</div</div></a>\";\n        String w = \"<a href=\\\"#1\\\"></a><div><a href=\\\"#1\\\"></a><div><a href=\\\"#1\\\"></a><a href=\\\"#2\\\">child</a></div></div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\n            StringUtil.normaliseWhitespace(w),\n            StringUtil.normaliseWhitespace(doc.body().html()));\n    }",
        "begin_line": 545,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 547,col 9)-(line 547,col 81)",
            "(line 548,col 9)-(line 548,col 125)",
            "(line 549,col 9)-(line 549,col 38)",
            "(line 550,col 9)-(line 552,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnexpectedMarkupInTables()",
        "snippet": "    @Test public void handlesUnexpectedMarkupInTables() {\n        // whatwg - tests markers in active formatting (if they didn't work, would get in in table)\n        // also tests foster parenting\n        String h = \"<table><b><tr><td>aaa</td></tr>bbb</table>ccc\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 555,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 67)",
            "(line 559,col 9)-(line 559,col 38)",
            "(line 560,col 9)-(line 560,col 146)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedFormattingElements()",
        "snippet": "    @Test public void handlesUnclosedFormattingElements() {\n        // whatwg: formatting elements get collected and applied, but excess elements are thrown away\n        String h = \"<!DOCTYPE html>\\n\" +\n                \"<p><b class=x><b class=x><b><b class=x><b class=x><b>X\\n\" +\n                \"<p>X\\n\" +\n                \"<p><b><b class=x><b>X\\n\" +\n                \"<p></b></b></b></b></b></b>X\";\n        Document doc = Jsoup.parse(h);\n        doc.outputSettings().indentAmount(0);\n        String want = \"<!doctype html>\\n\" +\n                \"<html>\\n\" +\n                \"<head></head>\\n\" +\n                \"<body>\\n\" +\n                \"<p><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></p>\\n\" +\n                \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></p>\\n\" +\n                \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></b></b></p>\\n\" +\n                \"<p>X</p>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        assertEquals(want, doc.html());\n    }",
        "begin_line": 563,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 569,col 47)",
            "(line 570,col 9)-(line 570,col 38)",
            "(line 571,col 9)-(line 571,col 45)",
            "(line 572,col 9)-(line 581,col 26)",
            "(line 582,col 9)-(line 582,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedAnchors()",
        "snippet": "    @Test public void handlesUnclosedAnchors() {\n        String h = \"<a href='http://example.com/'>Link<p>Error link</a>\";\n        Document doc = Jsoup.parse(h);\n        String want = \"<a href=\\\"http://example.com/\\\">Link</a>\\n<p><a href=\\\"http://example.com/\\\">Error link</a></p>\";\n        assertEquals(want, doc.body().html());\n    }",
        "begin_line": 585,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 73)",
            "(line 587,col 9)-(line 587,col 38)",
            "(line 588,col 9)-(line 588,col 120)",
            "(line 589,col 9)-(line 589,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.reconstructFormattingElements()",
        "snippet": "    @Test public void reconstructFormattingElements() {\n        // tests attributes and multi b\n        String h = \"<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<p><b class=\\\"one\\\">One <i>Two <b>Three</b></i></b></p>\\n<p><b class=\\\"one\\\"><i><b>Hello</b></i></b></p>\", doc.body().html());\n    }",
        "begin_line": 592,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 594,col 9)-(line 594,col 73)",
            "(line 595,col 9)-(line 595,col 38)",
            "(line 596,col 9)-(line 596,col 148)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.reconstructFormattingElementsInTable()",
        "snippet": "    @Test public void reconstructFormattingElementsInTable() {\n        // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,\n        // and the <i> inside the table and does not leak out.\n        String h = \"<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>\";\n        Document doc = Jsoup.parse(h);\n        String want = \"<p><b>One</b></p>\\n\" +\n                \"<b> \\n\" +\n                \" <table>\\n\" +\n                \"  <tbody>\\n\" +\n                \"   <tr>\\n\" +\n                \"    <td><p><i>Three</i></p><p><i>Four</i></p></td>\\n\" +\n                \"   </tr>\\n\" +\n                \"  </tbody>\\n\" +\n                \" </table> <p>Five</p></b>\";\n        assertEquals(want, doc.body().html());\n    }",
        "begin_line": 599,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 602,col 9)-(line 602,col 103)",
            "(line 603,col 9)-(line 603,col 38)",
            "(line 604,col 9)-(line 612,col 44)",
            "(line 613,col 9)-(line 613,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.commentBeforeHtml()",
        "snippet": "    @Test public void commentBeforeHtml() {\n        String h = \"<!-- comment --><!-- comment 2 --><p>One</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 616,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 66)",
            "(line 618,col 9)-(line 618,col 38)",
            "(line 619,col 9)-(line 619,col 144)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.emptyTdTag()",
        "snippet": "    @Test public void emptyTdTag() {\n        String h = \"<table><tr><td>One</td><td id='2' /></tr></table>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<td>One</td>\\n<td id=\\\"2\\\"></td>\", doc.select(\"tr\").first().html());\n    }",
        "begin_line": 622,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 623,col 9)-(line 623,col 71)",
            "(line 624,col 9)-(line 624,col 38)",
            "(line 625,col 9)-(line 625,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesSolidusInA()",
        "snippet": "    @Test public void handlesSolidusInA() {\n        // test for bug #66\n        String h = \"<a class=lp href=/lib/14160711/>link text</a>\";\n        Document doc = Jsoup.parse(h);\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"link text\", a.text());\n        assertEquals(\"/lib/14160711/\", a.attr(\"href\"));\n    }",
        "begin_line": 628,
        "end_line": 635,
        "comment": "",
        "child_ranges": [
            "(line 630,col 9)-(line 630,col 67)",
            "(line 631,col 9)-(line 631,col 38)",
            "(line 632,col 9)-(line 632,col 44)",
            "(line 633,col 9)-(line 633,col 44)",
            "(line 634,col 9)-(line 634,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesSpanInTbody()",
        "snippet": "    @Test public void handlesSpanInTbody() {\n        // test for bug 64\n        String h = \"<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(doc.select(\"span\").first().children().size(), 0); // the span gets closed\n        assertEquals(doc.select(\"table\").size(), 1); // only one table\n    }",
        "begin_line": 637,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 639,col 9)-(line 639,col 117)",
            "(line 640,col 9)-(line 640,col 38)",
            "(line 641,col 9)-(line 641,col 70)",
            "(line 642,col 9)-(line 642,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedTitleAtEof()",
        "snippet": "    @Test public void handlesUnclosedTitleAtEof() {\n        assertEquals(\"Data\", Jsoup.parse(\"<title>Data\").title());\n        assertEquals(\"Data<\", Jsoup.parse(\"<title>Data<\").title());\n        assertEquals(\"Data</\", Jsoup.parse(\"<title>Data</\").title());\n        assertEquals(\"Data</t\", Jsoup.parse(\"<title>Data</t\").title());\n        assertEquals(\"Data</ti\", Jsoup.parse(\"<title>Data</ti\").title());\n        assertEquals(\"Data\", Jsoup.parse(\"<title>Data</title>\").title());\n        assertEquals(\"Data\", Jsoup.parse(\"<title>Data</title >\").title());\n    }",
        "begin_line": 645,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 646,col 9)-(line 646,col 65)",
            "(line 647,col 9)-(line 647,col 67)",
            "(line 648,col 9)-(line 648,col 69)",
            "(line 649,col 9)-(line 649,col 71)",
            "(line 650,col 9)-(line 650,col 73)",
            "(line 651,col 9)-(line 651,col 73)",
            "(line 652,col 9)-(line 652,col 74)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedTitle()",
        "snippet": "    @Test public void handlesUnclosedTitle() {\n        Document one = Jsoup.parse(\"<title>One <b>Two <b>Three</TITLE><p>Test</p>\"); // has title, so <b> is plain text\n        assertEquals(\"One <b>Two <b>Three\", one.title());\n        assertEquals(\"Test\", one.select(\"p\").first().text());\n\n        Document two = Jsoup.parse(\"<title>One<b>Two <p>Test</p>\"); // no title, so <b> causes </title> breakout\n        assertEquals(\"One\", two.title());\n        assertEquals(\"<b>Two <p>Test</p></b>\", two.body().html());\n    }",
        "begin_line": 655,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 656,col 9)-(line 656,col 84)",
            "(line 657,col 9)-(line 657,col 57)",
            "(line 658,col 9)-(line 658,col 61)",
            "(line 660,col 9)-(line 660,col 67)",
            "(line 661,col 9)-(line 661,col 41)",
            "(line 662,col 9)-(line 662,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedScriptAtEof()",
        "snippet": "    @Test public void handlesUnclosedScriptAtEof() {\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data\").select(\"script\").first().data());\n        assertEquals(\"Data<\", Jsoup.parse(\"<script>Data<\").select(\"script\").first().data());\n        assertEquals(\"Data</sc\", Jsoup.parse(\"<script>Data</sc\").select(\"script\").first().data());\n        assertEquals(\"Data</-sc\", Jsoup.parse(\"<script>Data</-sc\").select(\"script\").first().data());\n        assertEquals(\"Data</sc-\", Jsoup.parse(\"<script>Data</sc-\").select(\"script\").first().data());\n        assertEquals(\"Data</sc--\", Jsoup.parse(\"<script>Data</sc--\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script>\").select(\"script\").first().data());\n        assertEquals(\"Data</script\", Jsoup.parse(\"<script>Data</script\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script \").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\\\"\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\\\"p\").select(\"script\").first().data());\n    }",
        "begin_line": 665,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 666,col 9)-(line 666,col 90)",
            "(line 667,col 9)-(line 667,col 92)",
            "(line 668,col 9)-(line 668,col 98)",
            "(line 669,col 9)-(line 669,col 100)",
            "(line 670,col 9)-(line 670,col 100)",
            "(line 671,col 9)-(line 671,col 102)",
            "(line 672,col 9)-(line 672,col 99)",
            "(line 673,col 9)-(line 673,col 106)",
            "(line 674,col 9)-(line 674,col 99)",
            "(line 675,col 9)-(line 675,col 100)",
            "(line 676,col 9)-(line 676,col 101)",
            "(line 677,col 9)-(line 677,col 103)",
            "(line 678,col 9)-(line 678,col 104)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesUnclosedRawtextAtEof()",
        "snippet": "    @Test public void handlesUnclosedRawtextAtEof() {\n        assertEquals(\"Data\", Jsoup.parse(\"<style>Data\").select(\"style\").first().data());\n        assertEquals(\"Data</st\", Jsoup.parse(\"<style>Data</st\").select(\"style\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<style>Data</style>\").select(\"style\").first().data());\n        assertEquals(\"Data</style\", Jsoup.parse(\"<style>Data</style\").select(\"style\").first().data());\n        assertEquals(\"Data</-style\", Jsoup.parse(\"<style>Data</-style\").select(\"style\").first().data());\n        assertEquals(\"Data</style-\", Jsoup.parse(\"<style>Data</style-\").select(\"style\").first().data());\n        assertEquals(\"Data</style--\", Jsoup.parse(\"<style>Data</style--\").select(\"style\").first().data());\n    }",
        "begin_line": 681,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 682,col 9)-(line 682,col 88)",
            "(line 683,col 9)-(line 683,col 96)",
            "(line 684,col 9)-(line 684,col 96)",
            "(line 685,col 9)-(line 685,col 102)",
            "(line 686,col 9)-(line 686,col 104)",
            "(line 687,col 9)-(line 687,col 104)",
            "(line 688,col 9)-(line 688,col 106)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.noImplicitFormForTextAreas()",
        "snippet": "    @Test public void noImplicitFormForTextAreas() {\n        // old jsoup parser would create implicit forms for form children like <textarea>, but no more\n        Document doc = Jsoup.parse(\"<textarea>One</textarea>\");\n        assertEquals(\"<textarea>One</textarea>\", doc.body().html());\n    }",
        "begin_line": 691,
        "end_line": 695,
        "comment": "",
        "child_ranges": [
            "(line 693,col 9)-(line 693,col 63)",
            "(line 694,col 9)-(line 694,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesEscapedScript()",
        "snippet": "    @Test public void handlesEscapedScript() {\n        Document doc = Jsoup.parse(\"<script><!-- one <script>Blah</script> --></script>\");\n        assertEquals(\"<!-- one <script>Blah</script> -->\", doc.select(\"script\").first().data());\n    }",
        "begin_line": 697,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 698,col 9)-(line 698,col 90)",
            "(line 699,col 9)-(line 699,col 96)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handles0CharacterAsText()",
        "snippet": "    @Test public void handles0CharacterAsText() {\n        Document doc = Jsoup.parse(\"0<p>0</p>\");\n        assertEquals(\"0\\n<p>0</p>\", doc.body().html());\n    }",
        "begin_line": 702,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 703,col 9)-(line 703,col 48)",
            "(line 704,col 9)-(line 704,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesNullInData()",
        "snippet": "    @Test public void handlesNullInData() {\n        Document doc = Jsoup.parse(\"<p id=\\u0000>Blah \\u0000</p>\");\n        assertEquals(\"<p id=\\\"\\uFFFD\\\">Blah \\u0000</p>\", doc.body().html()); // replaced in attr, NOT replaced in data\n    }",
        "begin_line": 707,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 708,col 9)-(line 708,col 67)",
            "(line 709,col 9)-(line 709,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesNullInComments()",
        "snippet": "    @Test public void handlesNullInComments() {\n        Document doc = Jsoup.parse(\"<body><!-- \\u0000 \\u0000 -->\");\n        assertEquals(\"<!-- \\uFFFD \\uFFFD -->\", doc.body().html());\n    }",
        "begin_line": 712,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 67)",
            "(line 714,col 9)-(line 714,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesNewlinesAndWhitespaceInTag()",
        "snippet": "    @Test public void handlesNewlinesAndWhitespaceInTag() {\n        Document doc = Jsoup.parse(\"<a \\n href=\\\"one\\\" \\r\\n id=\\\"two\\\" \\f >\");\n        assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());\n    }",
        "begin_line": 717,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 718,col 9)-(line 718,col 78)",
            "(line 719,col 9)-(line 719,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesWhitespaceInoDocType()",
        "snippet": "    @Test public void handlesWhitespaceInoDocType() {\n        String html = \"<!DOCTYPE html\\r\\n\" +\n                \"      PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\r\\n\" +\n                \"      \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\", doc.childNode(0).outerHtml());\n    }",
        "begin_line": 722,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 723,col 9)-(line 725,col 85)",
            "(line 726,col 9)-(line 726,col 41)",
            "(line 727,col 9)-(line 727,col 180)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.tracksErrorsWhenRequested()",
        "snippet": "    @Test public void tracksErrorsWhenRequested() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        assertEquals(5, errors.size());\n        assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());\n        assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());\n        assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());\n        assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());\n        assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());\n    }",
        "begin_line": 730,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 731,col 9)-(line 731,col 85)",
            "(line 732,col 9)-(line 732,col 64)",
            "(line 733,col 9)-(line 733,col 71)",
            "(line 735,col 9)-(line 735,col 53)",
            "(line 736,col 9)-(line 736,col 39)",
            "(line 737,col 9)-(line 737,col 96)",
            "(line 738,col 9)-(line 738,col 104)",
            "(line 739,col 9)-(line 739,col 116)",
            "(line 740,col 9)-(line 740,col 97)",
            "(line 741,col 9)-(line 741,col 118)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.tracksLimitedErrorsWhenRequested()",
        "snippet": "    @Test public void tracksLimitedErrorsWhenRequested() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(3);\n        Document doc = parser.parseInput(html, \"http://example.com\");\n\n        List<ParseError> errors = parser.getErrors();\n        assertEquals(3, errors.size());\n        assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());\n        assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());\n        assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());\n    }",
        "begin_line": 744,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 745,col 9)-(line 745,col 85)",
            "(line 746,col 9)-(line 746,col 62)",
            "(line 747,col 9)-(line 747,col 69)",
            "(line 749,col 9)-(line 749,col 53)",
            "(line 750,col 9)-(line 750,col 39)",
            "(line 751,col 9)-(line 751,col 96)",
            "(line 752,col 9)-(line 752,col 104)",
            "(line 753,col 9)-(line 753,col 116)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.noErrorsByDefault()",
        "snippet": "    @Test public void noErrorsByDefault() {\n        String html = \"<p>One</p href='no'>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser();\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n\n        List<ParseError> errors = parser.getErrors();\n        assertEquals(0, errors.size());\n    }",
        "begin_line": 756,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 757,col 9)-(line 757,col 70)",
            "(line 758,col 9)-(line 758,col 44)",
            "(line 759,col 9)-(line 759,col 71)",
            "(line 761,col 9)-(line 761,col 53)",
            "(line 762,col 9)-(line 762,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesCommentsInTable()",
        "snippet": "    @Test public void handlesCommentsInTable() {\n        String html = \"<table><tr><td>text</td><!-- Comment --></tr></table>\";\n        Document node = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>\", TextUtil.stripNewlines(node.outerHtml()));\n    }",
        "begin_line": 765,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 766,col 9)-(line 766,col 78)",
            "(line 767,col 9)-(line 767,col 54)",
            "(line 768,col 9)-(line 768,col 174)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesQuotesInCommentsInScripts()",
        "snippet": "    @Test public void handlesQuotesInCommentsInScripts() {\n        String html = \"<script>\\n\" +\n                \"  <!--\\n\" +\n                \"    document.write('</scr' + 'ipt>');\\n\" +\n                \"  // -->\\n\" +\n                \"</script>\";\n        Document node = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<script>\\n\" +\n                \"  <!--\\n\" +\n                \"    document.write('</scr' + 'ipt>');\\n\" +\n                \"  // -->\\n\" +\n                \"</script>\", node.body().html());\n    }",
        "begin_line": 771,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 776,col 28)",
            "(line 777,col 9)-(line 777,col 54)",
            "(line 778,col 9)-(line 782,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handleNullContextInParseFragment()",
        "snippet": "    @Test public void handleNullContextInParseFragment() {\n        String html = \"<ol><li>One</li></ol><p>Two</p>\";\n        List<Node> nodes = Parser.parseFragment(html, null, \"http://example.com/\");\n        assertEquals(1, nodes.size()); // returns <html> node (not document) -- no context means doc gets created\n        assertEquals(\"html\", nodes.get(0).nodeName());\n        assertEquals(\"<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>\", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));\n    }",
        "begin_line": 785,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 786,col 9)-(line 786,col 56)",
            "(line 787,col 9)-(line 787,col 83)",
            "(line 788,col 9)-(line 788,col 38)",
            "(line 789,col 9)-(line 789,col 54)",
            "(line 790,col 9)-(line 790,col 161)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.doesNotFindShortestMatchingEntity()",
        "snippet": "    @Test public void doesNotFindShortestMatchingEntity() {\n        // previous behaviour was to identify a possible entity, then chomp down the string until a match was found.\n        // (as defined in html5.) However in practise that lead to spurious matches against the author's intent.\n        String html = \"One &clubsuite; &clubsuit;\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(StringUtil.normaliseWhitespace(\"One &amp;clubsuite; \u2663\"), doc.body().html());\n    }",
        "begin_line": 793,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 51)",
            "(line 797,col 9)-(line 797,col 41)",
            "(line 798,col 9)-(line 798,col 97)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.relaxedBaseEntityMatchAndStrictExtendedMatch()",
        "snippet": "    @Test public void relaxedBaseEntityMatchAndStrictExtendedMatch() {\n        // extended entities need a ; at the end to match, base does not\n        String html = \"&amp &quot &reg &icy &hopf &icy; &hopf;\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended).charset(\"ascii\"); // modifies output only to clarify test\n        assertEquals(\"&amp; \\\" &reg; &amp;icy &amp;hopf &icy; &hopf;\", doc.body().html());\n    }",
        "begin_line": 801,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 803,col 9)-(line 803,col 64)",
            "(line 804,col 9)-(line 804,col 41)",
            "(line 805,col 9)-(line 805,col 87)",
            "(line 806,col 9)-(line 806,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesXmlDeclarationAsBogusComment()",
        "snippet": "    @Test public void handlesXmlDeclarationAsBogusComment() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 809,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 810,col 9)-(line 810,col 66)",
            "(line 811,col 9)-(line 811,col 41)",
            "(line 812,col 9)-(line 812,col 152)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesTagsInTextarea()",
        "snippet": "    @Test public void handlesTagsInTextarea() {\n        String html = \"<textarea><p>Jsoup</p></textarea>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>\", doc.body().html());\n    }",
        "begin_line": 815,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 816,col 9)-(line 816,col 58)",
            "(line 817,col 9)-(line 817,col 41)",
            "(line 818,col 9)-(line 818,col 89)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.createsFormElements()",
        "snippet": "    @Test public void createsFormElements() {\n        String html = \"<body><form><input id=1><input id=2></form></body>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.select(\"form\").first();\n\n        assertTrue(\"Is form element\", el instanceof FormElement);\n        FormElement form = (FormElement) el;\n        Elements controls = form.elements();\n        assertEquals(2, controls.size());\n        assertEquals(\"1\", controls.get(0).id());\n        assertEquals(\"2\", controls.get(1).id());\n    }",
        "begin_line": 822,
        "end_line": 833,
        "comment": " form tests",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 75)",
            "(line 824,col 9)-(line 824,col 41)",
            "(line 825,col 9)-(line 825,col 48)",
            "(line 827,col 9)-(line 827,col 65)",
            "(line 828,col 9)-(line 828,col 44)",
            "(line 829,col 9)-(line 829,col 44)",
            "(line 830,col 9)-(line 830,col 41)",
            "(line 831,col 9)-(line 831,col 48)",
            "(line 832,col 9)-(line 832,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.associatedFormControlsWithDisjointForms()",
        "snippet": "    @Test public void associatedFormControlsWithDisjointForms() {\n        // form gets closed, isn't parent of controls\n        String html = \"<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.select(\"form\").first();\n\n        assertTrue(\"Is form element\", el instanceof FormElement);\n        FormElement form = (FormElement) el;\n        Elements controls = form.elements();\n        assertEquals(2, controls.size());\n        assertEquals(\"1\", controls.get(0).id());\n        assertEquals(\"2\", controls.get(1).id());\n\n        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\"><td><input type=\\\"text\\\" id=\\\"2\\\"></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 835,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 837,col 9)-(line 837,col 109)",
            "(line 838,col 9)-(line 838,col 41)",
            "(line 839,col 9)-(line 839,col 48)",
            "(line 841,col 9)-(line 841,col 65)",
            "(line 842,col 9)-(line 842,col 44)",
            "(line 843,col 9)-(line 843,col 44)",
            "(line 844,col 9)-(line 844,col 41)",
            "(line 845,col 9)-(line 845,col 48)",
            "(line 846,col 9)-(line 846,col 48)",
            "(line 848,col 9)-(line 848,col 200)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesInputInTable()",
        "snippet": "    @Test public void handlesInputInTable() {\n        String h = \"<body>\\n\" +\n                \"<input type=\\\"hidden\\\" name=\\\"a\\\" value=\\\"\\\">\\n\" +\n                \"<table>\\n\" +\n                \"<input type=\\\"hidden\\\" name=\\\"b\\\" value=\\\"\\\" />\\n\" +\n                \"</table>\\n\" +\n                \"</body>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(1, doc.select(\"table input\").size());\n        assertEquals(2, doc.select(\"input\").size());\n    }",
        "begin_line": 851,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 852,col 9)-(line 857,col 26)",
            "(line 858,col 9)-(line 858,col 38)",
            "(line 859,col 9)-(line 859,col 58)",
            "(line 860,col 9)-(line 860,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.convertsImageToImg()",
        "snippet": "    @Test public void convertsImageToImg() {\n        // image to img, unless in a svg. old html cruft.\n        String h = \"<body><image><svg><image /></svg></body>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n    }",
        "begin_line": 863,
        "end_line": 868,
        "comment": "",
        "child_ranges": [
            "(line 865,col 9)-(line 865,col 62)",
            "(line 866,col 9)-(line 866,col 38)",
            "(line 867,col 9)-(line 867,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesInvalidDoctypes()",
        "snippet": "    @Test public void handlesInvalidDoctypes() {\n        // would previously throw invalid name exception on empty doctype\n        Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n        assertEquals(\n                \"<!doctype> <html> <head></head> <body></body> </html>\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n        assertEquals(\n                \"<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n        assertEquals(\n                \"<!doctype \ufffd> <html> <head></head> <body></body> </html>\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 870,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 872,col 9)-(line 872,col 49)",
            "(line 873,col 9)-(line 875,col 65)",
            "(line 877,col 9)-(line 877,col 63)",
            "(line 878,col 9)-(line 880,col 65)",
            "(line 882,col 9)-(line 882,col 47)",
            "(line 883,col 9)-(line 885,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesManyChildren()",
        "snippet": "    @Test public void handlesManyChildren() {\n        // Arrange\n        StringBuilder longBody = new StringBuilder(500000);\n        for (int i = 0; i < 25000; i++) {\n            longBody.append(i).append(\"<br>\");\n        }\n        \n        // Act\n        long start = System.currentTimeMillis();\n        Document doc = Parser.parseBodyFragment(longBody.toString(), \"\");\n        \n        // Assert\n        assertEquals(50000, doc.body().childNodeSize());\n        assertTrue(System.currentTimeMillis() - start < 1000);\n    }",
        "begin_line": 888,
        "end_line": 902,
        "comment": "",
        "child_ranges": [
            "(line 890,col 9)-(line 890,col 59)",
            "(line 891,col 9)-(line 893,col 9)",
            "(line 896,col 9)-(line 896,col 48)",
            "(line 897,col 9)-(line 897,col 73)",
            "(line 900,col 9)-(line 900,col 56)",
            "(line 901,col 9)-(line 901,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testInvalidTableContents()",
        "snippet": "    @Test\n    public void testInvalidTableContents() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n        String rendered = doc.toString();\n        int endOfEmail = rendered.indexOf(\"Comment\");\n        int guarantee = rendered.indexOf(\"Why am I here?\");\n        assertTrue(\"Comment not found\", endOfEmail > -1);\n        assertTrue(\"Search text not found\", guarantee > -1);\n        assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);\n    }",
        "begin_line": 904,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 906,col 9)-(line 906,col 78)",
            "(line 907,col 9)-(line 907,col 48)",
            "(line 908,col 9)-(line 908,col 47)",
            "(line 909,col 9)-(line 909,col 41)",
            "(line 910,col 9)-(line 910,col 53)",
            "(line 911,col 9)-(line 911,col 59)",
            "(line 912,col 9)-(line 912,col 57)",
            "(line 913,col 9)-(line 913,col 60)",
            "(line 914,col 9)-(line 914,col 85)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testNormalisesIsIndex()",
        "snippet": "    @Test public void testNormalisesIsIndex() {\n        Document doc = Jsoup.parse(\"<body><isindex action='/submit'></body>\");\n        String html = doc.outerHtml();\n        assertEquals(\"<form action=\\\"/submit\\\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label> <hr> </form>\",\n                StringUtil.normaliseWhitespace(doc.body().html()));\n    }",
        "begin_line": 917,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 918,col 9)-(line 918,col 78)",
            "(line 919,col 9)-(line 919,col 38)",
            "(line 920,col 9)-(line 921,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testReinsertionModeForThCelss()",
        "snippet": "    @Test public void testReinsertionModeForThCelss() {\n        String body = \"<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>\";\n        Document doc = Jsoup.parse(body);\n        assertEquals(1, doc.body().children().size());\n    }",
        "begin_line": 924,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 925,col 9)-(line 925,col 195)",
            "(line 926,col 9)-(line 926,col 41)",
            "(line 927,col 9)-(line 927,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testUsingSingleQuotesInQueries()",
        "snippet": "    @Test public void testUsingSingleQuotesInQueries() {\n        String body = \"<body> <div class='main'>hello</div></body>\";\n        Document doc = Jsoup.parse(body);\n        Elements main = doc.select(\"div[class='main']\");\n        assertEquals(\"hello\", main.text());\n    }",
        "begin_line": 930,
        "end_line": 935,
        "comment": "",
        "child_ranges": [
            "(line 931,col 9)-(line 931,col 68)",
            "(line 932,col 9)-(line 932,col 41)",
            "(line 933,col 9)-(line 933,col 56)",
            "(line 934,col 9)-(line 934,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testSupportsNonAsciiTags()",
        "snippet": "    @Test public void testSupportsNonAsciiTags() {\n        String body = \"<\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>Yes</\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5><\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u0442\u044d\u0433>Correct</<\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u0442\u044d\u0433>\";\n        Document doc = Jsoup.parse(body);\n        Elements els = doc.select(\"\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5\");\n        assertEquals(\"Yes\", els.text());\n        els = doc.select(\"\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u0442\u044d\u0433\");\n        assertEquals(\"Correct\", els.text());\n    }",
        "begin_line": 937,
        "end_line": 944,
        "comment": "",
        "child_ranges": [
            "(line 938,col 9)-(line 938,col 82)",
            "(line 939,col 9)-(line 939,col 41)",
            "(line 940,col 9)-(line 940,col 45)",
            "(line 941,col 9)-(line 941,col 40)",
            "(line 942,col 9)-(line 942,col 40)",
            "(line 943,col 9)-(line 943,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testSupportsPartiallyNonAsciiTags()",
        "snippet": "    @Test public void testSupportsPartiallyNonAsciiTags() {\n        String body = \"<div>Check</div\u00e1>\";\n        Document doc = Jsoup.parse(body);\n        Elements els = doc.select(\"div\");\n        assertEquals(\"Check\", els.text());\n    }",
        "begin_line": 946,
        "end_line": 951,
        "comment": "",
        "child_ranges": [
            "(line 947,col 9)-(line 947,col 42)",
            "(line 948,col 9)-(line 948,col 41)",
            "(line 949,col 9)-(line 949,col 41)",
            "(line 950,col 9)-(line 950,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testFragment()",
        "snippet": "    @Test public void testFragment() {\n        // make sure when parsing a body fragment, a script tag at start goes into the body\n        String html =\n            \"<script type=\\\"text/javascript\\\">console.log('foo');</script>\\n\" +\n                \"<div id=\\\"somecontent\\\">some content</div>\\n\" +\n                \"<script type=\\\"text/javascript\\\">console.log('bar');</script>\";\n\n        Document body = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<script type=\\\"text/javascript\\\">console.log('foo');</script> \\n\" +\n            \"<div id=\\\"somecontent\\\">\\n\" +\n            \" some content\\n\" +\n            \"</div> \\n\" +\n            \"<script type=\\\"text/javascript\\\">console.log('bar');</script>\", body.body().html());\n    }",
        "begin_line": 953,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 955,col 9)-(line 958,col 80)",
            "(line 960,col 9)-(line 960,col 54)",
            "(line 961,col 9)-(line 965,col 97)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testHtmlLowerCase()",
        "snippet": "    @Test public void testHtmlLowerCase() {\n        String html = \"<!doctype HTML><DIV ID=1>One</DIV>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!doctype html> <html> <head></head> <body> <div id=\\\"1\\\"> One </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 968,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 969,col 9)-(line 969,col 59)",
            "(line 970,col 9)-(line 970,col 41)",
            "(line 971,col 9)-(line 971,col 159)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.canPreserveTagCase()",
        "snippet": "    @Test public void canPreserveTagCase() {\n        Parser parser = Parser.htmlParser();\n        parser.settings(new ParseSettings(true, false));\n        Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n        assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <SPAN id=\\\"2\\\"></SPAN> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 974,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 975,col 9)-(line 975,col 44)",
            "(line 976,col 9)-(line 976,col 56)",
            "(line 977,col 9)-(line 977,col 70)",
            "(line 978,col 9)-(line 978,col 162)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.canPreserveAttributeCase()",
        "snippet": "    @Test public void canPreserveAttributeCase() {\n        Parser parser = Parser.htmlParser();\n        parser.settings(new ParseSettings(false, true));\n        Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n        assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <span ID=\\\"2\\\"></span> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 981,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 982,col 9)-(line 982,col 44)",
            "(line 983,col 9)-(line 983,col 56)",
            "(line 984,col 9)-(line 984,col 70)",
            "(line 985,col 9)-(line 985,col 162)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.canPreserveBothCase()",
        "snippet": "    @Test public void canPreserveBothCase() {\n        Parser parser = Parser.htmlParser();\n        parser.settings(new ParseSettings(true, true));\n        Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n        assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <SPAN ID=\\\"2\\\"></SPAN> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 988,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 989,col 9)-(line 989,col 44)",
            "(line 990,col 9)-(line 990,col 55)",
            "(line 991,col 9)-(line 991,col 70)",
            "(line 992,col 9)-(line 992,col 162)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.handlesControlCodeInAttributeName()",
        "snippet": "    @Test public void handlesControlCodeInAttributeName() {\n        Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");\n        assertEquals(\"<p><a>One</a><a></a><a foo=\\\"bar\\\">Two</a></p>\", doc.body().html());\n    }",
        "begin_line": 995,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 996,col 9)-(line 996,col 96)",
            "(line 997,col 9)-(line 997,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.caseSensitiveParseTree()",
        "snippet": "    @Test public void caseSensitiveParseTree() {\n        String html = \"<r><X>A</X><y>B</y></r>\";\n        Parser parser = Parser.htmlParser();\n        parser.settings(ParseSettings.preserveCase);\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<r> <X> A </X> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n    }",
        "begin_line": 1000,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 9)-(line 1001,col 48)",
            "(line 1002,col 9)-(line 1002,col 44)",
            "(line 1003,col 9)-(line 1003,col 52)",
            "(line 1004,col 9)-(line 1004,col 51)",
            "(line 1005,col 9)-(line 1005,col 106)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.caseInsensitiveParseTree()",
        "snippet": "    @Test public void caseInsensitiveParseTree() {\n        String html = \"<r><X>A</X><y>B</y></r>\";\n        Parser parser = Parser.htmlParser();\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<r> <x> A </x> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n    }",
        "begin_line": 1008,
        "end_line": 1013,
        "comment": "",
        "child_ranges": [
            "(line 1009,col 9)-(line 1009,col 48)",
            "(line 1010,col 9)-(line 1010,col 44)",
            "(line 1011,col 9)-(line 1011,col 51)",
            "(line 1012,col 9)-(line 1012,col 106)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.selfClosingVoidIsNotAnError()",
        "snippet": "    @Test public void selfClosingVoidIsNotAnError() {\n        String html = \"<p>test<br/>test<br/></p>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(0, parser.getErrors().size());\n\n        assertTrue(Jsoup.isValid(html, Whitelist.basic()));\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        assertEquals(\"<p>test<br>test<br></p>\", clean);\n    }",
        "begin_line": 1015,
        "end_line": 1024,
        "comment": "",
        "child_ranges": [
            "(line 1016,col 9)-(line 1016,col 50)",
            "(line 1017,col 9)-(line 1017,col 62)",
            "(line 1018,col 9)-(line 1018,col 36)",
            "(line 1019,col 9)-(line 1019,col 51)",
            "(line 1021,col 9)-(line 1021,col 59)",
            "(line 1022,col 9)-(line 1022,col 60)",
            "(line 1023,col 9)-(line 1023,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.selfClosingOnNonvoidIsError()",
        "snippet": "    @Test public void selfClosingOnNonvoidIsError() {\n        String html = \"<p>test</p><div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(1, parser.getErrors().size());\n        assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());\n\n        assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));\n        String clean = Jsoup.clean(html, Whitelist.relaxed());\n        assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));\n    }",
        "begin_line": 1026,
        "end_line": 1036,
        "comment": "",
        "child_ranges": [
            "(line 1027,col 9)-(line 1027,col 57)",
            "(line 1028,col 9)-(line 1028,col 62)",
            "(line 1029,col 9)-(line 1029,col 36)",
            "(line 1030,col 9)-(line 1030,col 51)",
            "(line 1031,col 9)-(line 1031,col 109)",
            "(line 1033,col 9)-(line 1033,col 62)",
            "(line 1034,col 9)-(line 1034,col 62)",
            "(line 1035,col 9)-(line 1035,col 104)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.HtmlParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "signature": "org.jsoup.parser.HtmlParserTest.testTemplateInsideTable()",
        "snippet": "  @Test public void testTemplateInsideTable() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n\n        Elements templates = doc.body().getElementsByTag(\"template\");\n        for (Element template : templates) {\n            assertTrue(template.childNodes().size() > 1);\n        }\n  }",
        "begin_line": 1038,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1039,col 9)-(line 1039,col 78)",
            "(line 1040,col 9)-(line 1040,col 48)",
            "(line 1041,col 9)-(line 1041,col 47)",
            "(line 1043,col 9)-(line 1043,col 69)",
            "(line 1044,col 9)-(line 1046,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompBalanced()",
        "snippet": "    @Test public void chompBalanced() {\n        TokenQueue tq = new TokenQueue(\":contains(one (two) three) four\");\n        String pre = tq.consumeTo(\"(\");\n        String guts = tq.chompBalanced('(', ')');\n        String remainder = tq.remainder();\n\n        assertEquals(\":contains\", pre);\n        assertEquals(\"one (two) three\", guts);\n        assertEquals(\" four\", remainder);\n    }",
        "begin_line": 10,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 11,col 9)-(line 11,col 74)",
            "(line 12,col 9)-(line 12,col 39)",
            "(line 13,col 9)-(line 13,col 49)",
            "(line 14,col 9)-(line 14,col 42)",
            "(line 16,col 9)-(line 16,col 39)",
            "(line 17,col 9)-(line 17,col 46)",
            "(line 18,col 9)-(line 18,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompEscapedBalanced()",
        "snippet": "    @Test public void chompEscapedBalanced() {\n        TokenQueue tq = new TokenQueue(\":contains(one (two) \\\\( \\\\) \\\\) three) four\");\n        String pre = tq.consumeTo(\"(\");\n        String guts = tq.chompBalanced('(', ')');\n        String remainder = tq.remainder();\n\n        assertEquals(\":contains\", pre);\n        assertEquals(\"one (two) \\\\( \\\\) \\\\) three\", guts);\n        assertEquals(\"one (two) ( ) ) three\", TokenQueue.unescape(guts));\n        assertEquals(\" four\", remainder);\n    }",
        "begin_line": 21,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 86)",
            "(line 23,col 9)-(line 23,col 39)",
            "(line 24,col 9)-(line 24,col 49)",
            "(line 25,col 9)-(line 25,col 42)",
            "(line 27,col 9)-(line 27,col 39)",
            "(line 28,col 9)-(line 28,col 58)",
            "(line 29,col 9)-(line 29,col 73)",
            "(line 30,col 9)-(line 30,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompBalancedMatchesAsMuchAsPossible()",
        "snippet": "    @Test public void chompBalancedMatchesAsMuchAsPossible() {\n        TokenQueue tq = new TokenQueue(\"unbalanced(something(or another)) else\");\n        tq.consumeTo(\"(\");\n        String match = tq.chompBalanced('(', ')');\n        assertEquals(\"something(or another)\", match);\n    }",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 81)",
            "(line 35,col 9)-(line 35,col 26)",
            "(line 36,col 9)-(line 36,col 50)",
            "(line 37,col 9)-(line 37,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.unescape()",
        "snippet": "    @Test public void unescape() {\n        assertEquals(\"one ( ) \\\\\", TokenQueue.unescape(\"one \\\\( \\\\) \\\\\\\\\"));\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.chompToIgnoreCase()",
        "snippet": "    @Test public void chompToIgnoreCase() {\n        String t = \"<textarea>one < two </TEXTarea>\";\n        TokenQueue tq = new TokenQueue(t);\n        String data = tq.chompToIgnoreCase(\"</textarea\");\n        assertEquals(\"<textarea>one < two \", data);\n        \n        tq = new TokenQueue(\"<textarea> one two < three </oops>\");\n        data = tq.chompToIgnoreCase(\"</textarea\");\n        assertEquals(\"<textarea> one two < three </oops>\", data);\n    }",
        "begin_line": 44,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 53)",
            "(line 46,col 9)-(line 46,col 42)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 48,col 9)-(line 48,col 51)",
            "(line 50,col 9)-(line 50,col 66)",
            "(line 51,col 9)-(line 51,col 50)",
            "(line 52,col 9)-(line 52,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.addFirst()",
        "snippet": "    @Test public void addFirst() {\n        TokenQueue tq = new TokenQueue(\"One Two\");\n        tq.consumeWord();\n        tq.addFirst(\"Three\");\n        assertEquals(\"Three Two\", tq.remainder());\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 50)",
            "(line 57,col 9)-(line 57,col 25)",
            "(line 58,col 9)-(line 58,col 29)",
            "(line 59,col 9)-(line 59,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.TokenQueueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java",
        "signature": "org.jsoup.parser.TokenQueueTest.consumeToIgnoreSecondCallTest()",
        "snippet": "    @Test \n    public void consumeToIgnoreSecondCallTest(){\n\t\tString t = \"<textarea>one < two </TEXTarea> third </TEXTarea>\";\n\t\tTokenQueue tq = new TokenQueue(t);\n\t\tString data = tq.chompToIgnoreCase(\"</textarea>\");\n\t\tassertEquals(\"<textarea>one < two \", data);\n\t\t\n\t\tdata = tq.chompToIgnoreCase(\"</textarea>\");\n\t\tassertEquals(\" third \", data);\n    }",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 65,col 3)-(line 65,col 65)",
            "(line 66,col 3)-(line 66,col 36)",
            "(line 67,col 3)-(line 67,col 52)",
            "(line 68,col 3)-(line 68,col 45)",
            "(line 70,col 3)-(line 70,col 45)",
            "(line 71,col 3)-(line 71,col 32)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserSettingsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserSettingsTest.java",
        "signature": "org.jsoup.parser.ParserSettingsTest.caseSupport()",
        "snippet": "    @Test @MultiLocaleTest public void caseSupport() {\n        ParseSettings bothOn = new ParseSettings(true, true);\n        ParseSettings bothOff = new ParseSettings(false, false);\n        ParseSettings tagOn = new ParseSettings(true, false);\n        ParseSettings attrOn = new ParseSettings(false, true);\n\n        assertEquals(\"IMG\", bothOn.normalizeTag(\"IMG\"));\n        assertEquals(\"ID\", bothOn.normalizeAttribute(\"ID\"));\n\n        assertEquals(\"img\", bothOff.normalizeTag(\"IMG\"));\n        assertEquals(\"id\", bothOff.normalizeAttribute(\"ID\"));\n\n        assertEquals(\"IMG\", tagOn.normalizeTag(\"IMG\"));\n        assertEquals(\"id\", tagOn.normalizeAttribute(\"ID\"));\n\n        assertEquals(\"img\", attrOn.normalizeTag(\"IMG\"));\n        assertEquals(\"ID\", attrOn.normalizeAttribute(\"ID\"));\n    }",
        "begin_line": 14,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 61)",
            "(line 16,col 9)-(line 16,col 64)",
            "(line 17,col 9)-(line 17,col 61)",
            "(line 18,col 9)-(line 18,col 62)",
            "(line 20,col 9)-(line 20,col 56)",
            "(line 21,col 9)-(line 21,col 60)",
            "(line 23,col 9)-(line 23,col 57)",
            "(line 24,col 9)-(line 24,col 61)",
            "(line 26,col 9)-(line 26,col 55)",
            "(line 27,col 9)-(line 27,col 59)",
            "(line 29,col 9)-(line 29,col 56)",
            "(line 30,col 9)-(line 30,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserSettingsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserSettingsTest.java",
        "signature": "org.jsoup.parser.ParserSettingsTest.attributeCaseNormalization()",
        "snippet": "    @Test @MultiLocaleTest public void attributeCaseNormalization() throws Exception {\n        ParseSettings parseSettings = new ParseSettings(false, false);\n\n        String normalizedAttribute = parseSettings.normalizeAttribute(\"HIDDEN\");\n\n        assertEquals(\"hidden\", normalizedAttribute);\n    }",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 70)",
            "(line 36,col 9)-(line 36,col 80)",
            "(line 38,col 9)-(line 38,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.parser.ParserSettingsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/parser/ParserSettingsTest.java",
        "signature": "org.jsoup.parser.ParserSettingsTest.attributesCaseNormalization()",
        "snippet": "    @Test @MultiLocaleTest public void attributesCaseNormalization() throws Exception {\n        ParseSettings parseSettings = new ParseSettings(false, false);\n        Attributes attributes = new Attributes();\n        attributes.put(\"ITEM\", \"1\");\n\n        Attributes normalizedAttributes = parseSettings.normalizeAttributes(attributes);\n\n        assertEquals(\"item\", normalizedAttributes.asList().get(0).getKey());\n    }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 70)",
            "(line 43,col 9)-(line 43,col 49)",
            "(line 44,col 9)-(line 44,col 36)",
            "(line 46,col 9)-(line 46,col 88)",
            "(line 48,col 9)-(line 48,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testSmhBizArticle()",
        "snippet": "    @Test\n    public void testSmhBizArticle() throws IOException {\n        File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\",\n                \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n        assertEquals(\"The board\u2019s next fear: the female quota\",\n                doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n        assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n\n        Elements articleBody = doc.select(\".articleBody > *\");\n        assertEquals(17, articleBody.size());\n        // todo: more tests!\n\n    }",
        "begin_line": 21,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 63)",
            "(line 24,col 9)-(line 25,col 107)",
            "(line 26,col 9)-(line 27,col 29)",
            "(line 28,col 9)-(line 28,col 64)",
            "(line 30,col 9)-(line 30,col 62)",
            "(line 31,col 9)-(line 31,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testNewsHomepage()",
        "snippet": "    @Test\n    public void testNewsHomepage() throws IOException {\n        File in = getFile(\"/htmltests/news-com-au-home.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\");\n        assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title());\n        assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim());\n\n        Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first();\n        assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\"));\n        assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\"));\n\n        Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n        assertEquals(\n                \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n                hs.attr(\"href\"));\n        assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n    }",
        "begin_line": 36,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 62)",
            "(line 39,col 9)-(line 39,col 75)",
            "(line 40,col 9)-(line 40,col 111)",
            "(line 41,col 9)-(line 41,col 107)",
            "(line 43,col 9)-(line 43,col 76)",
            "(line 44,col 9)-(line 44,col 66)",
            "(line 45,col 9)-(line 45,col 92)",
            "(line 47,col 9)-(line 47,col 83)",
            "(line 48,col 9)-(line 50,col 33)",
            "(line 51,col 9)-(line 51,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testGoogleSearchIpod()",
        "snippet": "    @Test\n    public void testGoogleSearchIpod() throws IOException {\n        File in = getFile(\"/htmltests/google-ipod.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\");\n        assertEquals(\"ipod - Google Search\", doc.title());\n        Elements results = doc.select(\"h3.r > a\");\n        assertEquals(12, results.size());\n        assertEquals(\n                \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n                results.get(0).attr(\"href\"));\n        assertEquals(\"http://www.apple.com/itunes/\",\n                results.get(1).attr(\"href\"));\n    }",
        "begin_line": 54,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 57)",
            "(line 57,col 9)-(line 57,col 110)",
            "(line 58,col 9)-(line 58,col 58)",
            "(line 59,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 41)",
            "(line 61,col 9)-(line 63,col 45)",
            "(line 64,col 9)-(line 65,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testBinary()",
        "snippet": "    @Test\n    public void testBinary() throws IOException {\n        File in = getFile(\"/htmltests/thumb.jpg\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        // nothing useful, but did not blow up\n        assertTrue(doc.text().contains(\"gd-jpeg\"));\n    }",
        "begin_line": 68,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 50)",
            "(line 71,col 9)-(line 71,col 48)",
            "(line 73,col 9)-(line 73,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testYahooJp()",
        "snippet": "    @Test\n    public void testYahooJp() throws IOException {\n        File in = getFile(\"/htmltests/yahoo-jp.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.yahoo.co.jp/index.html\"); // http charset is utf-8.\n        assertEquals(\"Yahoo! JAPAN\", doc.title());\n        Element a = doc.select(\"a[href=t/2322m2]\").first();\n        assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\",\n                a.attr(\"abs:href\")); // session put into <base>\n        assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n    }",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 54)",
            "(line 79,col 9)-(line 79,col 85)",
            "(line 80,col 9)-(line 80,col 50)",
            "(line 81,col 9)-(line 81,col 59)",
            "(line 82,col 9)-(line 83,col 36)",
            "(line 84,col 9)-(line 84,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testBaidu()",
        "snippet": "    @Test\n    public void testBaidu() throws IOException {\n        // tests <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\">\n        File in = getFile(\"/htmltests/baidu-cn-home.html\");\n        Document doc = Jsoup.parse(in, null,\n                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n        Element submit = doc.select(\"#su\").first();\n        assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n\n        // test from attribute match\n        submit = doc.select(\"input[value=\u767e\u5ea6\u4e00\u4e0b]\").first();\n        assertEquals(\"su\", submit.id());\n        Element newsLink = doc.select(\"a:contains(\u65b0)\").first();\n        assertEquals(\"http://news.baidu.com\", newsLink.absUrl(\"href\"));\n\n        // check auto-detect from meta\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n        assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n\n        doc.outputSettings().charset(\"ascii\");\n        assertEquals(\"<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>\",\n                doc.select(\"title\").outerHtml());\n    }",
        "begin_line": 87,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 59)",
            "(line 91,col 9)-(line 92,col 41)",
            "(line 93,col 9)-(line 93,col 51)",
            "(line 94,col 9)-(line 94,col 51)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 63)",
            "(line 100,col 9)-(line 100,col 71)",
            "(line 103,col 9)-(line 103,col 77)",
            "(line 104,col 9)-(line 104,col 88)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 108,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testBaiduVariant()",
        "snippet": "    @Test\n    public void testBaiduVariant() throws IOException {\n        // tests <meta charset> when preceded by another <meta>\n        File in = getFile(\"/htmltests/baidu-variant.html\");\n        Document doc = Jsoup.parse(in, null,\n                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n        // check auto-detect from meta\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n        assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053</title>\", doc.select(\"title\").outerHtml());\n    }",
        "begin_line": 111,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 59)",
            "(line 115,col 9)-(line 116,col 41)",
            "(line 118,col 9)-(line 118,col 77)",
            "(line 119,col 9)-(line 119,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testHtml5Charset()",
        "snippet": "    @Test\n    public void testHtml5Charset() throws IOException {\n        // test that <meta charset=\"gb2312\"> works\n        File in = getFile(\"/htmltests/meta-charset-1.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com/\"); //gb2312, has html5 <meta charset>\n        assertEquals(\"\u65b0\", doc.text());\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n\n        // double check, no charset, falls back to utf8 which is incorrect\n        in = getFile(\"/htmltests/meta-charset-2.html\"); //\n        doc = Jsoup.parse(in, null, \"http://example.com\"); // gb2312, no charset\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n        assertFalse(\"\u65b0\".equals(doc.text()));\n\n        // confirm fallback to utf8\n        in = getFile(\"/htmltests/meta-charset-3.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com/\"); // utf8, no charset\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n        assertEquals(\"\u65b0\", doc.text());\n    }",
        "begin_line": 122,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 60)",
            "(line 126,col 9)-(line 126,col 68)",
            "(line 127,col 9)-(line 127,col 38)",
            "(line 128,col 9)-(line 128,col 77)",
            "(line 131,col 9)-(line 131,col 55)",
            "(line 132,col 9)-(line 132,col 58)",
            "(line 133,col 9)-(line 133,col 76)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 137,col 9)-(line 137,col 55)",
            "(line 138,col 9)-(line 138,col 59)",
            "(line 139,col 9)-(line 139,col 76)",
            "(line 140,col 9)-(line 140,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testBrokenHtml5CharsetWithASingleDoubleQuote()",
        "snippet": "    @Test\n    public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {\n        InputStream in = inputStreamFrom(\"<html>\\n\" +\n                \"<head><meta charset=UTF-8\\\"></head>\\n\" +\n                \"<body></body>\\n\" +\n                \"</html>\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com/\");\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n    }",
        "begin_line": 143,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 148,col 27)",
            "(line 149,col 9)-(line 149,col 68)",
            "(line 150,col 9)-(line 150,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testNytArticle()",
        "snippet": "    @Test\n    public void testNytArticle() throws IOException {\n        // has tags like <nyt_text>\n        File in = getFile(\"/htmltests/nyt-article-1.html\");\n        Document doc = Jsoup.parse(in, null, \"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\");\n\n        Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n        assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n    }",
        "begin_line": 153,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 59)",
            "(line 157,col 9)-(line 157,col 111)",
            "(line 159,col 9)-(line 159,col 75)",
            "(line 160,col 9)-(line 160,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testYahooArticle()",
        "snippet": "    @Test\n    public void testYahooArticle() throws IOException {\n        File in = getFile(\"/htmltests/yahoo-article-1.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");\n        Element p = doc.select(\"p:contains(Volt will be sold in the United States)\").first();\n        assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n    }",
        "begin_line": 163,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 61)",
            "(line 166,col 9)-(line 166,col 105)",
            "(line 167,col 9)-(line 167,col 93)",
            "(line 168,col 9)-(line 168,col 185)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.testLowercaseUtf8Charset()",
        "snippet": "    @Test\n    public void testLowercaseUtf8Charset() throws IOException {\n        File in = getFile(\"/htmltests/lowercase-charset-test.html\");\n        Document doc = Jsoup.parse(in, null);\n\n        Element form = doc.select(\"#form\").first();\n        assertEquals(2, form.children().size());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().name());\n    }",
        "begin_line": 171,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 68)",
            "(line 174,col 9)-(line 174,col 45)",
            "(line 176,col 9)-(line 176,col 51)",
            "(line 177,col 9)-(line 177,col 48)",
            "(line 178,col 9)-(line 178,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.getFile(java.lang.String)",
        "snippet": "    public static File getFile(String resourceName) {\n        try {\n            File file = new File(ParseTest.class.getResource(resourceName).toURI());\n            return file;\n        } catch (URISyntaxException e) {\n            throw new IllegalStateException(e);\n        }\n    }",
        "begin_line": 181,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 187,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.ParseTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/ParseTest.java",
        "signature": "org.jsoup.integration.ParseTest.inputStreamFrom(java.lang.String)",
        "snippet": "    public static InputStream inputStreamFrom(String s) {\n        try {\n            return new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }",
        "begin_line": 190,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 195,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchURl()",
        "snippet": "    @Test\n    public void fetchURl() throws IOException {\n        String url = \"https://jsoup.org\"; // no trailing / to force redir\n        Document doc = Jsoup.parse(new URL(url), 10*1000);\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 41)",
            "(line 46,col 9)-(line 46,col 58)",
            "(line 47,col 9)-(line 47,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchURIWithWihtespace()",
        "snippet": "    @Test\n    public void fetchURIWithWihtespace() throws IOException {\n        Connection con = Jsoup.connect(\"http://try.jsoup.org/#with whitespaces\");\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 81)",
            "(line 53,col 9)-(line 53,col 33)",
            "(line 54,col 9)-(line 54,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchBaidu()",
        "snippet": "    @Test\n    public void fetchBaidu() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://www.baidu.com/\").timeout(10*1000).execute();\n        Document doc = res.parse();\n\n        assertEquals(\"GBK\", doc.outputSettings().charset().displayName());\n        assertEquals(\"GBK\", res.charset());\n        assert(res.hasCookie(\"BAIDUID\"));\n        assertEquals(\"text/html;charset=gbk\", res.contentType());\n    }",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 100)",
            "(line 60,col 9)-(line 60,col 35)",
            "(line 62,col 9)-(line 62,col 74)",
            "(line 63,col 9)-(line 63,col 43)",
            "(line 64,col 9)-(line 64,col 41)",
            "(line 65,col 9)-(line 65,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.exceptOnUnknownContentType()",
        "snippet": "    @Test\n    public void exceptOnUnknownContentType() {\n        String url = \"http://direct.jsoup.org/rez/osi_logo.png\"; // not text/* but image/png, should throw\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.parse(new URL(url), 3000);\n        } catch (UnsupportedMimeTypeException e) {\n            threw = true;\n            assertEquals(\"org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://direct.jsoup.org/rez/osi_logo.png\", e.toString());\n            assertEquals(url, e.getUrl());\n            assertEquals(\"image/png\", e.getMimeType());\n        } catch (IOException e) {\n        }\n        assertTrue(threw);\n    }",
        "begin_line": 68,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 64)",
            "(line 71,col 9)-(line 71,col 30)",
            "(line 72,col 9)-(line 80,col 9)",
            "(line 81,col 9)-(line 81,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.exceptOnUnsupportedProtocol()",
        "snippet": "    @Test\n    public void exceptOnUnsupportedProtocol(){\n        String url = \"file://etc/passwd\";\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.connect(url).get();\n        } catch (MalformedURLException e) {\n            threw = true;\n            assertEquals(\"java.net.MalformedURLException: Only http & https protocols supported\", e.toString());\n        } catch (IOException e) {\n        }\n        assertTrue(threw);\n    }",
        "begin_line": 84,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 41)",
            "(line 87,col 9)-(line 87,col 30)",
            "(line 88,col 9)-(line 94,col 9)",
            "(line 95,col 9)-(line 95,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ignoresContentTypeIfSoConfigured()",
        "snippet": "    @Test\n    public void ignoresContentTypeIfSoConfigured() throws IOException {\n        Document doc = Jsoup.connect(\"https://jsoup.org/rez/osi_logo.png\").ignoreContentType(true).get();\n        assertEquals(\"\", doc.title()); // this will cause an ugly parse tree\n    }",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 105)",
            "(line 101,col 9)-(line 101,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.doesPost()",
        "snippet": "    @Test\n    public void doesPost() throws IOException {\n        Document doc = Jsoup.connect(echoURL)\n            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n            .cookie(\"auth\", \"token\")\n            .post();\n\n        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n        //assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc)); // current proxy removes gzip on post\n        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n    }",
        "begin_line": 104,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 109,col 20)",
            "(line 111,col 9)-(line 111,col 59)",
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 45)",
            "(line 115,col 9)-(line 115,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.sendsRequestBodyJsonWithData()",
        "snippet": "    @Test\n    public void sendsRequestBodyJsonWithData() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoURL)\n            .requestBody(body)\n            .header(\"Content-Type\", \"application/json\")\n            .userAgent(browserUa)\n            .data(\"foo\", \"true\")\n            .post();\n        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n        assertEquals(\"application/json\", ihVal(\"CONTENT_TYPE\", doc));\n        assertEquals(\"foo=true\", ihVal(\"QUERY_STRING\", doc));\n        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n    }",
        "begin_line": 118,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 42)",
            "(line 121,col 9)-(line 126,col 20)",
            "(line 127,col 9)-(line 127,col 59)",
            "(line 128,col 9)-(line 128,col 69)",
            "(line 129,col 9)-(line 129,col 61)",
            "(line 130,col 9)-(line 130,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.sendsRequestBodyJsonWithoutData()",
        "snippet": "    @Test\n    public void sendsRequestBodyJsonWithoutData() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoURL)\n            .requestBody(body)\n            .header(\"Content-Type\", \"application/json\")\n            .userAgent(browserUa)\n            .post();\n        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n        assertEquals(\"application/json\", ihVal(\"CONTENT_TYPE\", doc));\n        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n    }",
        "begin_line": 133,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 140,col 20)",
            "(line 141,col 9)-(line 141,col 59)",
            "(line 142,col 9)-(line 142,col 69)",
            "(line 143,col 9)-(line 143,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.sendsRequestBody()",
        "snippet": "    @Test\n    public void sendsRequestBody() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoURL)\n            .requestBody(body)\n            .header(\"Content-Type\", \"text/plain\")\n            .userAgent(browserUa)\n            .post();\n        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n        assertEquals(\"text/plain\", ihVal(\"CONTENT_TYPE\", doc));\n        assertEquals(body, doc.select(\"th:contains(POSTDATA) ~ td\").text());\n    }",
        "begin_line": 146,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 42)",
            "(line 149,col 9)-(line 153,col 20)",
            "(line 154,col 9)-(line 154,col 59)",
            "(line 155,col 9)-(line 155,col 63)",
            "(line 156,col 9)-(line 156,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.sendsRequestBodyWithUrlParams()",
        "snippet": "    @Test\n    public void sendsRequestBodyWithUrlParams() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoURL)\n            .requestBody(body)\n            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n            .header(\"Content-Type\", \"text/plain\") // todo - if user sets content-type, we should append postcharset\n            .userAgent(browserUa)\n            .post();\n        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n        assertEquals(\"uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B\", ihVal(\"QUERY_STRING\", doc));\n        assertEquals(body, ihVal(\"POSTDATA\", doc));\n    }",
        "begin_line": 159,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 42)",
            "(line 162,col 9)-(line 167,col 20)",
            "(line 168,col 9)-(line 168,col 59)",
            "(line 169,col 9)-(line 169,col 117)",
            "(line 170,col 9)-(line 170,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.doesGet()",
        "snippet": "    @Test\n    public void doesGet() throws IOException {\n        Connection con = Jsoup.connect(echoURL + \"?what=the\")\n            .userAgent(\"Mozilla\")\n            .referrer(\"http://example.com\")\n            .data(\"what\", \"about & me?\");\n\n        Document doc = con.get();\n        assertEquals(\"what=the&what=about+%26+me%3F\", ihVal(\"QUERY_STRING\", doc));\n        assertEquals(\"the, about & me?\", ihVal(\"what\", doc));\n        assertEquals(\"Mozilla\", ihVal(\"HTTP_USER_AGENT\", doc));\n        assertEquals(\"http://example.com\", ihVal(\"HTTP_REFERER\", doc));\n    }",
        "begin_line": 173,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 178,col 41)",
            "(line 180,col 9)-(line 180,col 33)",
            "(line 181,col 9)-(line 181,col 82)",
            "(line 182,col 9)-(line 182,col 61)",
            "(line 183,col 9)-(line 183,col 63)",
            "(line 184,col 9)-(line 184,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.doesPut()",
        "snippet": "    @Test\n    public void doesPut() throws IOException {\n        Connection.Response res = Jsoup.connect(echoURL)\n                .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n                .cookie(\"auth\", \"token\")\n                .method(Connection.Method.PUT)\n                .execute();\n\n        Document doc = res.parse();\n        assertEquals(\"PUT\", ihVal(\"REQUEST_METHOD\", doc));\n        //assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc)); // current proxy removes gzip on post\n        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n    }",
        "begin_line": 187,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 193,col 27)",
            "(line 195,col 9)-(line 195,col 35)",
            "(line 196,col 9)-(line 196,col 58)",
            "(line 198,col 9)-(line 198,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ihVal(java.lang.String, org.jsoup.nodes.Document)",
        "snippet": "    private static String ihVal(String key, Document doc) {\n        return doc.select(\"th:contains(\"+key+\") + td\").first().text();\n    }",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 9)-(line 203,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsTempRedirect()",
        "snippet": "    @Test\n    public void followsTempRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\"); // http://jsoup.org\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }",
        "begin_line": 206,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 83)",
            "(line 209,col 9)-(line 209,col 33)",
            "(line 210,col 9)-(line 210,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsNewTempRedirect()",
        "snippet": "    @Test\n    public void followsNewTempRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/307.pl\"); // http://jsoup.org\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n        assertEquals(\"https://jsoup.org/\", con.response().url().toString());\n    }",
        "begin_line": 213,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 83)",
            "(line 216,col 9)-(line 216,col 33)",
            "(line 217,col 9)-(line 217,col 50)",
            "(line 218,col 9)-(line 218,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.postRedirectsFetchWithGet()",
        "snippet": "    @Test\n    public void postRedirectsFetchWithGet() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\")\n                .data(\"Argument\", \"Riposte\")\n                .method(Connection.Method.POST);\n        Connection.Response res = con.execute();\n        assertEquals(\"https://jsoup.org/\", res.url().toExternalForm());\n        assertEquals(Connection.Method.GET, res.method());\n    }",
        "begin_line": 221,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 225,col 48)",
            "(line 226,col 9)-(line 226,col 48)",
            "(line 227,col 9)-(line 227,col 71)",
            "(line 228,col 9)-(line 228,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsRedirectToHttps()",
        "snippet": "    @Test\n    public void followsRedirectToHttps() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-secure.pl\"); // https://www.google.com\n        con.data(\"id\", \"5\");\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"Google\"));\n    }",
        "begin_line": 231,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 90)",
            "(line 234,col 9)-(line 234,col 28)",
            "(line 235,col 9)-(line 235,col 33)",
            "(line 236,col 9)-(line 236,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsRelativeRedirect()",
        "snippet": "    @Test\n    public void followsRelativeRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel.pl\"); // to /tidy/\n        Document doc = con.post();\n        assertTrue(doc.title().contains(\"HTML Tidy Online\"));\n    }",
        "begin_line": 239,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 87)",
            "(line 242,col 9)-(line 242,col 34)",
            "(line 243,col 9)-(line 243,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsRelativeDotRedirect()",
        "snippet": "    @Test\n    public void followsRelativeDotRedirect() throws IOException {\n        // redirects to \"./ok.html\", should resolve to http://direct.infohound.net/tools/ok.html\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel-dot.pl\"); // to ./ok.html\n        Document doc = con.post();\n        assertTrue(doc.title().contains(\"OK\"));\n        assertEquals(doc.location(), \"http://direct.infohound.net/tools/ok.html\");\n    }",
        "begin_line": 246,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 91)",
            "(line 250,col 9)-(line 250,col 34)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 252,col 9)-(line 252,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsRelativeDotRedirect2()",
        "snippet": "    @Test\n    public void followsRelativeDotRedirect2() throws IOException {\n        //redirects to \"esportspenedes.cat/./ep/index.php\", should resolve to \"esportspenedes.cat/ep/index.php\"\n        Connection con = Jsoup.connect(\"http://esportspenedes.cat\")  // note lack of trailing / - server should redir to / first, then to ./ep/...; but doesn't'\n                .timeout(10000);\n        Document doc = con.post();\n        assertEquals(doc.location(), \"http://esportspenedes.cat/ep/index.php\");\n    }",
        "begin_line": 255,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 258,col 9)-(line 259,col 32)",
            "(line 260,col 9)-(line 260,col 34)",
            "(line 261,col 9)-(line 261,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.followsRedirectsWithWithespaces()",
        "snippet": "    @Test\n    public void followsRedirectsWithWithespaces() throws IOException {\n        Connection con = Jsoup.connect(\"http://tinyurl.com/kgofxl8\"); // to http://www.google.com/?q=white spaces\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"Google\"));\n    }",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 69)",
            "(line 267,col 9)-(line 267,col 33)",
            "(line 268,col 9)-(line 268,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.gracefullyHandleBrokenLocationRedirect()",
        "snippet": "    @Test\n    public void gracefullyHandleBrokenLocationRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://aag-ye.com\"); // has Location: http:/temp/AAG_New/en/index.php\n        con.get(); // would throw exception on error\n        assertTrue(true);\n    }",
        "begin_line": 271,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 60)",
            "(line 274,col 9)-(line 274,col 18)",
            "(line 275,col 9)-(line 275,col 25)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.throwsExceptionOnError()",
        "snippet": "    @Test\n    public void throwsExceptionOnError() {\n        String url = \"http://direct.infohound.net/tools/404\";\n        Connection con = Jsoup.connect(url);\n        boolean threw = false;\n        try {\n            Document doc = con.get();\n        } catch (HttpStatusException e) {\n            threw = true;\n            assertEquals(\"org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404, URL=http://direct.infohound.net/tools/404\", e.toString());\n            assertEquals(url, e.getUrl());\n            assertEquals(404, e.getStatusCode());\n        } catch (IOException e) {\n        }\n        assertTrue(threw);\n    }",
        "begin_line": 278,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 61)",
            "(line 281,col 9)-(line 281,col 44)",
            "(line 282,col 9)-(line 282,col 30)",
            "(line 283,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 292,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ignoresExceptionIfSoConfigured()",
        "snippet": "    @Test\n    public void ignoresExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/404\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(404, res.statusCode());\n        assertEquals(\"404 Not Found\", doc.select(\"h1\").first().text());\n    }",
        "begin_line": 295,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 103)",
            "(line 298,col 9)-(line 298,col 48)",
            "(line 299,col 9)-(line 299,col 35)",
            "(line 300,col 9)-(line 300,col 44)",
            "(line 301,col 9)-(line 301,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ignores500tExceptionIfSoConfigured()",
        "snippet": "    @Test\n    public void ignores500tExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/500.pl\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(500, res.statusCode());\n        assertEquals(\"Application Error\", res.statusMessage());\n        assertEquals(\"Woops\", doc.select(\"h1\").first().text());\n    }",
        "begin_line": 304,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 106)",
            "(line 307,col 9)-(line 307,col 48)",
            "(line 308,col 9)-(line 308,col 35)",
            "(line 309,col 9)-(line 309,col 44)",
            "(line 310,col 9)-(line 310,col 63)",
            "(line 311,col 9)-(line 311,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ignores500WithNoContentExceptionIfSoConfigured()",
        "snippet": "    @Test\n    public void ignores500WithNoContentExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/500-no-content.pl\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(500, res.statusCode());\n        assertEquals(\"Application Error\", res.statusMessage());\n    }",
        "begin_line": 314,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 117)",
            "(line 317,col 9)-(line 317,col 48)",
            "(line 318,col 9)-(line 318,col 35)",
            "(line 319,col 9)-(line 319,col 44)",
            "(line 320,col 9)-(line 320,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.ignores200WithNoContentExceptionIfSoConfigured()",
        "snippet": "    @Test\n    public void ignores200WithNoContentExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/200-no-content.pl\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(200, res.statusCode());\n        assertEquals(\"All Good\", res.statusMessage());\n    }",
        "begin_line": 323,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 117)",
            "(line 326,col 9)-(line 326,col 48)",
            "(line 327,col 9)-(line 327,col 35)",
            "(line 328,col 9)-(line 328,col 44)",
            "(line 329,col 9)-(line 329,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handles200WithNoContent()",
        "snippet": "    @Test\n    public void handles200WithNoContent() throws IOException {\n        Connection con = Jsoup\n            .connect(\"http://direct.infohound.net/tools/200-no-content.pl\")\n            .userAgent(browserUa);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(200, res.statusCode());\n\n        con = Jsoup\n            .connect(\"http://direct.infohound.net/tools/200-no-content.pl\")\n            .parser(Parser.xmlParser())\n            .userAgent(browserUa);\n        res = con.execute();\n        doc = res.parse();\n        assertEquals(200, res.statusCode());\n    }",
        "begin_line": 332,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 334,col 9)-(line 336,col 34)",
            "(line 337,col 9)-(line 337,col 48)",
            "(line 338,col 9)-(line 338,col 35)",
            "(line 339,col 9)-(line 339,col 44)",
            "(line 341,col 9)-(line 344,col 34)",
            "(line 345,col 9)-(line 345,col 28)",
            "(line 346,col 9)-(line 346,col 26)",
            "(line 347,col 9)-(line 347,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.doesntRedirectIfSoConfigured()",
        "snippet": "    @Test\n    public void doesntRedirectIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\").followRedirects(false);\n        Connection.Response res = con.execute();\n        assertEquals(302, res.statusCode());\n        assertEquals(\"http://jsoup.org\", res.header(\"Location\"));\n    }",
        "begin_line": 350,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 106)",
            "(line 353,col 9)-(line 353,col 48)",
            "(line 354,col 9)-(line 354,col 44)",
            "(line 355,col 9)-(line 355,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.redirectsResponseCookieToNextResponse()",
        "snippet": "    @Test\n    public void redirectsResponseCookieToNextResponse() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-cookie.pl\");\n        Connection.Response res = con.execute();\n        assertEquals(\"asdfg123\", res.cookie(\"token\")); // confirms that cookies set on 1st hit are presented in final result\n        Document doc = res.parse();\n        assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"HTTP_COOKIE\", doc)); // confirms that redirected hit saw cookie\n    }",
        "begin_line": 358,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 90)",
            "(line 361,col 9)-(line 361,col 48)",
            "(line 362,col 9)-(line 362,col 54)",
            "(line 363,col 9)-(line 363,col 35)",
            "(line 364,col 9)-(line 364,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.maximumRedirects()",
        "snippet": "    @Test\n    public void maximumRedirects() {\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.connect(\"http://direct.infohound.net/tools/loop.pl\").get();\n        } catch (IOException e) {\n            assertTrue(e.getMessage().contains(\"Too many redirects\"));\n            threw = true;\n        }\n        assertTrue(threw);\n    }",
        "begin_line": 367,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 30)",
            "(line 370,col 9)-(line 375,col 9)",
            "(line 376,col 9)-(line 376,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.multiCookieSet()",
        "snippet": "    @Test\n    public void multiCookieSet() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-cookie.pl\");\n        Connection.Response res = con.execute();\n\n        // test cookies set by redirect:\n        Map<String, String> cookies = res.cookies();\n        assertEquals(\"asdfg123\", cookies.get(\"token\"));\n        assertEquals(\"jhy\", cookies.get(\"uid\"));\n\n        // send those cookies into the echo URL by map:\n        Document doc = Jsoup.connect(echoURL).cookies(cookies).get();\n        assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"HTTP_COOKIE\", doc));\n    }",
        "begin_line": 379,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 381,col 9)-(line 381,col 90)",
            "(line 382,col 9)-(line 382,col 48)",
            "(line 385,col 9)-(line 385,col 52)",
            "(line 386,col 9)-(line 386,col 55)",
            "(line 387,col 9)-(line 387,col 48)",
            "(line 390,col 9)-(line 390,col 69)",
            "(line 391,col 9)-(line 391,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handlesDodgyCharset()",
        "snippet": "    @Test\n    public void handlesDodgyCharset() throws IOException {\n        // tests that when we get back \"UFT8\", that it is recognised as unsupported, and falls back to default instead\n        String url = \"http://direct.infohound.net/tools/bad-charset.pl\";\n        Connection.Response res = Jsoup.connect(url).execute();\n        assertEquals(\"text/html; charset=UFT8\", res.header(\"Content-Type\")); // from the header\n        assertEquals(null, res.charset()); // tried to get from header, not supported, so returns null\n        Document doc = res.parse(); // would throw an error if charset unsupported\n        assertTrue(doc.text().contains(\"Hello!\"));\n        assertEquals(\"UTF-8\", res.charset()); // set from default on parse\n    }",
        "begin_line": 394,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 397,col 9)-(line 397,col 72)",
            "(line 398,col 9)-(line 398,col 63)",
            "(line 399,col 9)-(line 399,col 76)",
            "(line 400,col 9)-(line 400,col 42)",
            "(line 401,col 9)-(line 401,col 35)",
            "(line 402,col 9)-(line 402,col 50)",
            "(line 403,col 9)-(line 403,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.maxBodySize()",
        "snippet": "    @Test\n    public void maxBodySize() throws IOException {\n        String url = \"http://direct.infohound.net/tools/large.html\"; // 280 K\n\n        Connection.Response defaultRes = Jsoup.connect(url).execute();\n        Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops\n        Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops\n        Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop\n        Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();\n\n        int actualDocText = 269541;\n        assertEquals(actualDocText, defaultRes.parse().text().length());\n        assertEquals(47200, smallRes.parse().text().length());\n        assertEquals(196577, mediumRes.parse().text().length());\n        assertEquals(actualDocText, largeRes.parse().text().length());\n        assertEquals(actualDocText, unlimitedRes.parse().text().length());\n    }",
        "begin_line": 406,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 68)",
            "(line 410,col 9)-(line 410,col 70)",
            "(line 411,col 9)-(line 411,col 91)",
            "(line 412,col 9)-(line 412,col 93)",
            "(line 413,col 9)-(line 413,col 92)",
            "(line 414,col 9)-(line 414,col 87)",
            "(line 416,col 9)-(line 416,col 35)",
            "(line 417,col 9)-(line 417,col 72)",
            "(line 418,col 9)-(line 418,col 62)",
            "(line 419,col 9)-(line 419,col 64)",
            "(line 420,col 9)-(line 420,col 70)",
            "(line 421,col 9)-(line 421,col 74)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.testUnsafeFail()",
        "snippet": "    @Test(expected = IOException.class)\n    public void testUnsafeFail() throws Exception {\n        String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n        Jsoup.connect(url).execute();\n    }",
        "begin_line": 431,
        "end_line": 435,
        "comment": "\n     * Verify that security disabling feature works properly.\n     * <p/>\n     * 1. try to hit url with invalid certificate and evaluate that exception is thrown\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 54)",
            "(line 434,col 9)-(line 434,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.testSNIFail()",
        "snippet": "    @Test(expected = IOException.class)\n    public void testSNIFail() throws Exception {\n        String url = WEBSITE_WITH_SNI;\n        Jsoup.connect(url).execute();\n    }",
        "begin_line": 447,
        "end_line": 451,
        "comment": "\n     * Verify that requests to websites with SNI fail on jdk 1.6\n     * <p/>\n     * read for more details:\n     * http://en.wikipedia.org/wiki/Server_Name_Indication\n     *\n     * Test is ignored independent from others as it requires JDK 1.6\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 449,col 9)-(line 449,col 38)",
            "(line 450,col 9)-(line 450,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.testSNIPass()",
        "snippet": "    @Test\n    public void testSNIPass() throws Exception {\n        String url = WEBSITE_WITH_SNI;\n        Connection.Response defaultRes = Jsoup.connect(url).validateTLSCertificates(false).execute();\n        assertEquals(defaultRes.statusCode(), 200);\n    }",
        "begin_line": 460,
        "end_line": 465,
        "comment": "\n     * Verify that requests to websites with SNI pass\n     * <p/>\n     * <b>NB!</b> this test is FAILING right now on jdk 1.6\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 462,col 9)-(line 462,col 38)",
            "(line 463,col 9)-(line 463,col 101)",
            "(line 464,col 9)-(line 464,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.testUnsafePass()",
        "snippet": "    @Test\n    public void testUnsafePass() throws Exception {\n        String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n        Connection.Response defaultRes = Jsoup.connect(url).validateTLSCertificates(false).execute();\n        assertEquals(defaultRes.statusCode(), 200);\n    }",
        "begin_line": 474,
        "end_line": 479,
        "comment": "\n     * Verify that security disabling feature works properly.\n     * <p/>\n     * 1. disable security checks and call the same url to verify that content is consumed correctly\n     *\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 54)",
            "(line 477,col 9)-(line 477,col 101)",
            "(line 478,col 9)-(line 478,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.shouldWorkForCharsetInExtraAttribute()",
        "snippet": "    @Test\n    public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n        Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();\n        Document doc = res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"ISO-8859-1\", res.charset());\n    }",
        "begin_line": 481,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 101)",
            "(line 484,col 9)-(line 484,col 35)",
            "(line 485,col 9)-(line 485,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()",
        "snippet": "    @Test\n    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://aamo.info/\").execute();\n        res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"ISO-8859-1\", res.charset());\n    }",
        "begin_line": 492,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 79)",
            "(line 495,col 9)-(line 495,col 20)",
            "(line 496,col 9)-(line 496,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.shouldParseBrokenHtml5MetaCharsetTagCorrectly()",
        "snippet": "    @Test\n    public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://9kuhkep.net\").execute();\n        res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"UTF-8\", res.charset());\n    }",
        "begin_line": 499,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 80)",
            "(line 502,col 9)-(line 502,col 20)",
            "(line 503,col 9)-(line 503,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.shouldEmptyMetaCharsetCorrectly()",
        "snippet": "    @Test\n    public void shouldEmptyMetaCharsetCorrectly() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://aastmultimedia.com\").execute();\n        res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"UTF-8\", res.charset());\n    }",
        "begin_line": 506,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 87)",
            "(line 509,col 9)-(line 509,col 20)",
            "(line 510,col 9)-(line 510,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.shouldWorkForDuplicateCharsetInTag()",
        "snippet": "    @Test\n    public void shouldWorkForDuplicateCharsetInTag() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://aaptsdassn.org\").execute();\n        Document doc = res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"ISO-8859-1\", res.charset());\n    }",
        "begin_line": 513,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 515,col 9)-(line 515,col 83)",
            "(line 516,col 9)-(line 516,col 35)",
            "(line 517,col 9)-(line 517,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.baseHrefCorrectAfterHttpEquiv()",
        "snippet": "    @Test\n    public void baseHrefCorrectAfterHttpEquiv() throws IOException {\n        // https://github.com/jhy/jsoup/issues/440\n        Connection.Response res = Jsoup.connect(\"http://direct.infohound.net/tools/charset-base.html\").execute();\n        Document doc = res.parse();\n        assertEquals(\"http://example.com/foo.jpg\", doc.select(\"img\").first().absUrl(\"src\"));\n    }",
        "begin_line": 520,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 523,col 9)-(line 523,col 113)",
            "(line 524,col 9)-(line 524,col 35)",
            "(line 525,col 9)-(line 525,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.postHtmlFile()",
        "snippet": "    @Test\n    public void postHtmlFile() throws IOException {\n        Document index = Jsoup.connect(\"http://direct.infohound.net/tidy/\").get();\n        FormElement form = index.select(\"[name=tidy]\").forms().get(0);\n        Connection post = form.submit();\n\n        File uploadFile = ParseTest.getFile(\"/htmltests/google-ipod.html\");\n        FileInputStream stream = new FileInputStream(uploadFile);\n        \n        Connection.KeyVal fileData = post.data(\"_file\");\n        fileData.value(\"check.html\");\n        fileData.inputStream(stream);\n\n        Connection.Response res;\n        try {\n            res = post.execute();\n        } finally {\n            stream.close();\n        }\n\n        Document out = res.parse();\n        assertTrue(out.text().contains(\"HTML Tidy Complete\"));\n    }",
        "begin_line": 531,
        "end_line": 553,
        "comment": "\n     * Test fetching a form, and submitting it with a file attached.\n     ",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 82)",
            "(line 534,col 9)-(line 534,col 70)",
            "(line 535,col 9)-(line 535,col 40)",
            "(line 537,col 9)-(line 537,col 75)",
            "(line 538,col 9)-(line 538,col 65)",
            "(line 540,col 9)-(line 540,col 56)",
            "(line 541,col 9)-(line 541,col 37)",
            "(line 542,col 9)-(line 542,col 37)",
            "(line 544,col 9)-(line 544,col 32)",
            "(line 545,col 9)-(line 549,col 9)",
            "(line 551,col 9)-(line 551,col 35)",
            "(line 552,col 9)-(line 552,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.postJpeg()",
        "snippet": "    @Test\n    public void postJpeg() throws IOException {\n        File thumb = ParseTest.getFile(\"/htmltests/thumb.jpg\");\n        Document result = Jsoup\n            .connect(\"http://regex.info/exif.cgi\")\n            .data(\"f\", thumb.getName(), new FileInputStream(thumb))\n            .userAgent(browserUa)\n            .post();\n\n        assertEquals(\"Baseline DCT, Huffman coding\", result.select(\"td:contains(Process) + td\").text());\n        assertEquals(\"1052 bytes 30 \u00d7 30\", result.select(\"td:contains(Size) + td\").text());\n    }",
        "begin_line": 558,
        "end_line": 569,
        "comment": "\n     * Tests upload of binary content to a remote service.\n     ",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 63)",
            "(line 561,col 9)-(line 565,col 20)",
            "(line 567,col 9)-(line 567,col 104)",
            "(line 568,col 9)-(line 568,col 91)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handles201Created()",
        "snippet": "    @Test\n    public void handles201Created() throws IOException {\n        Document doc = Jsoup.connect(\"http://direct.infohound.net/tools/201.pl\").get(); // 201, location=jsoup\n        assertEquals(\"https://jsoup.org/\", doc.location());\n    }",
        "begin_line": 571,
        "end_line": 575,
        "comment": "",
        "child_ranges": [
            "(line 573,col 9)-(line 573,col 87)",
            "(line 574,col 9)-(line 574,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchToW3c()",
        "snippet": "    @Test\n    public void fetchToW3c() throws IOException {\n        String url = \"https://jsoup.org\";\n        Document doc = Jsoup.connect(url).get();\n\n        W3CDom dom = new W3CDom();\n        org.w3c.dom.Document wDoc = dom.fromJsoup(doc);\n        assertEquals(url, wDoc.getDocumentURI());\n        String html = dom.asString(wDoc);\n        assertTrue(html.contains(\"jsoup\"));\n    }",
        "begin_line": 577,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 579,col 9)-(line 579,col 41)",
            "(line 580,col 9)-(line 580,col 48)",
            "(line 582,col 9)-(line 582,col 34)",
            "(line 583,col 9)-(line 583,col 55)",
            "(line 584,col 9)-(line 584,col 49)",
            "(line 585,col 9)-(line 585,col 41)",
            "(line 586,col 9)-(line 586,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchHandlesXml()",
        "snippet": "    @Test\n    public void fetchHandlesXml() throws IOException {\n        // should auto-detect xml and use XML parser, unless explicitly requested the html parser\n        String xmlUrl = \"http://direct.infohound.net/tools/parse-xml.xml\";\n        Connection con = Jsoup.connect(xmlUrl);\n        Document doc = con.get();\n        Connection.Request req = con.request();\n        assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder);\n        assertEquals(\"<xml> <link> one </link> <table> Two </table> </xml>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 589,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 592,col 9)-(line 592,col 74)",
            "(line 593,col 9)-(line 593,col 47)",
            "(line 594,col 9)-(line 594,col 33)",
            "(line 595,col 9)-(line 595,col 47)",
            "(line 596,col 9)-(line 596,col 76)",
            "(line 597,col 9)-(line 597,col 126)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchHandlesXmlAsHtmlWhenParserSet()",
        "snippet": "    @Test\n    public void fetchHandlesXmlAsHtmlWhenParserSet() throws IOException {\n        // should auto-detect xml and use XML parser, unless explicitly requested the html parser\n        String xmlUrl = \"http://direct.infohound.net/tools/parse-xml.xml\";\n        Connection con = Jsoup.connect(xmlUrl).parser(Parser.htmlParser());\n        Document doc = con.get();\n        Connection.Request req = con.request();\n        assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder);\n        assertEquals(\"<html> <head></head> <body> <xml> <link>one <table> Two </table> </xml> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }",
        "begin_line": 600,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 603,col 9)-(line 603,col 74)",
            "(line 604,col 9)-(line 604,col 75)",
            "(line 605,col 9)-(line 605,col 33)",
            "(line 606,col 9)-(line 606,col 47)",
            "(line 607,col 9)-(line 607,col 77)",
            "(line 608,col 9)-(line 608,col 161)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.combinesSameHeadersWithComma()",
        "snippet": "    @Test\n    public void combinesSameHeadersWithComma() throws IOException {\n        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n        String url = \"http://direct.infohound.net/tools/q.pl\";\n        Connection con = Jsoup.connect(url);\n        con.get();\n\n        Connection.Response res = con.response();\n        assertEquals(\"text/html\", res.header(\"Content-Type\"));\n        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n\n        List<String> header = res.headers(\"Cache-Control\");\n        assertEquals(2, header.size());\n        assertEquals(\"no-cache\", header.get(0));\n        assertEquals(\"no-store\", header.get(1));\n    }",
        "begin_line": 611,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 614,col 9)-(line 614,col 62)",
            "(line 615,col 9)-(line 615,col 44)",
            "(line 616,col 9)-(line 616,col 18)",
            "(line 618,col 9)-(line 618,col 49)",
            "(line 619,col 9)-(line 619,col 62)",
            "(line 620,col 9)-(line 620,col 72)",
            "(line 622,col 9)-(line 622,col 59)",
            "(line 623,col 9)-(line 623,col 39)",
            "(line 624,col 9)-(line 624,col 48)",
            "(line 625,col 9)-(line 625,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.sendHeadRequest()",
        "snippet": "    @Test\n    public void sendHeadRequest() throws IOException {\n        String url = \"http://direct.infohound.net/tools/parse-xml.xml\";\n        Connection con = Jsoup.connect(url).method(Connection.Method.HEAD);\n        final Connection.Response response = con.execute();\n        assertEquals(\"text/xml\", response.header(\"Content-Type\"));\n        assertEquals(\"\", response.body()); // head ought to have no body\n        Document doc = response.parse();\n        assertEquals(\"\", doc.text());\n    }",
        "begin_line": 628,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 630,col 9)-(line 630,col 71)",
            "(line 631,col 9)-(line 631,col 75)",
            "(line 632,col 9)-(line 632,col 59)",
            "(line 633,col 9)-(line 633,col 66)",
            "(line 634,col 9)-(line 634,col 42)",
            "(line 635,col 9)-(line 635,col 40)",
            "(line 636,col 9)-(line 636,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchViaHttpProxy()",
        "snippet": "    @Test\n    public void fetchViaHttpProxy() throws IOException {\n        String url = \"https://jsoup.org\";\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8888));\n        Document doc = Jsoup.connect(url).proxy(proxy).get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }",
        "begin_line": 644,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 646,col 9)-(line 646,col 41)",
            "(line 647,col 9)-(line 647,col 104)",
            "(line 648,col 9)-(line 648,col 61)",
            "(line 649,col 9)-(line 649,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.fetchViaHttpProxySetByArgument()",
        "snippet": "    @Test\n    public void fetchViaHttpProxySetByArgument() throws IOException {\n        String url = \"https://jsoup.org\";\n        Document doc = Jsoup.connect(url).proxy(\"localhost\", 8888).get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }",
        "begin_line": 652,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 654,col 9)-(line 654,col 41)",
            "(line 655,col 9)-(line 655,col 73)",
            "(line 656,col 9)-(line 656,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.invalidProxyFails()",
        "snippet": "    @Test\n    public void invalidProxyFails() throws IOException {\n        boolean caught = false;\n        String url = \"https://jsoup.org\";\n        try {\n            Document doc = Jsoup.connect(url).proxy(\"localhost\", 8889).get();\n        } catch (IOException e) {\n            caught = e instanceof ConnectException;\n        }\n        assertTrue(caught);\n    }",
        "begin_line": 659,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 661,col 9)-(line 661,col 31)",
            "(line 662,col 9)-(line 662,col 41)",
            "(line 663,col 9)-(line 667,col 9)",
            "(line 668,col 9)-(line 668,col 27)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.proxyGetAndSet()",
        "snippet": "    @Test\n    public void proxyGetAndSet() throws IOException {\n        String url = \"https://jsoup.org\";\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8889)); // invalid\n        final Connection con = Jsoup.connect(url).proxy(proxy);\n\n        assert con.request().proxy() == proxy;\n        con.request().proxy(null); // disable\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\")); // would fail if actually went via proxy\n    }",
        "begin_line": 671,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 673,col 9)-(line 673,col 41)",
            "(line 674,col 9)-(line 674,col 104)",
            "(line 675,col 9)-(line 675,col 63)",
            "(line 677,col 9)-(line 677,col 46)",
            "(line 678,col 9)-(line 678,col 34)",
            "(line 679,col 9)-(line 679,col 33)",
            "(line 680,col 9)-(line 680,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.throwsIfRequestBodyForGet()",
        "snippet": "    @Test\n    public void throwsIfRequestBodyForGet() throws IOException {\n        boolean caught = false;\n        String url = \"https://jsoup.org\";\n        try {\n            Document doc = Jsoup.connect(url).requestBody(\"fail\").get();\n        } catch (IllegalArgumentException e) {\n            caught = true;\n        }\n        assertTrue(caught);\n    }",
        "begin_line": 683,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 685,col 9)-(line 685,col 31)",
            "(line 686,col 9)-(line 686,col 41)",
            "(line 687,col 9)-(line 691,col 9)",
            "(line 692,col 9)-(line 692,col 27)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.canSpecifyResponseCharset()",
        "snippet": "    @Test\n    public void canSpecifyResponseCharset() throws IOException {\n        // both these docs have <80> in there as euro/control char depending on charset\n        String noCharsetUrl = \"http://direct.infohound.net/tools/Windows-1252-nocharset.html\";\n        String charsetUrl = \"http://direct.infohound.net/tools/Windows-1252-charset.html\";\n\n        // included in meta\n        Connection.Response res1 = Jsoup.connect(charsetUrl).execute();\n        assertEquals(null, res1.charset()); // not set in headers\n        final Document doc1 = res1.parse();\n        assertEquals(\"windows-1252\", doc1.charset().displayName()); // but determined at parse time\n        assertEquals(\"Cost is \u20ac100\", doc1.select(\"p\").text());\n        assertTrue(doc1.text().contains(\"\u20ac\"));\n\n        // no meta, no override\n        Connection.Response res2 = Jsoup.connect(noCharsetUrl).execute();\n        assertEquals(null, res2.charset()); // not set in headers\n        final Document doc2 = res2.parse();\n        assertEquals(\"UTF-8\", doc2.charset().displayName()); // so defaults to utf-8\n        assertEquals(\"Cost is \ufffd100\", doc2.select(\"p\").text());\n        assertTrue(doc2.text().contains(\"\ufffd\"));\n\n        // no meta, let's override\n        Connection.Response res3 = Jsoup.connect(noCharsetUrl).execute();\n        assertEquals(null, res3.charset()); // not set in headers\n        res3.charset(\"windows-1252\");\n        assertEquals(\"windows-1252\", res3.charset()); // read back\n        final Document doc3 = res3.parse();\n        assertEquals(\"windows-1252\", doc3.charset().displayName()); // from override\n        assertEquals(\"Cost is \u20ac100\", doc3.select(\"p\").text());\n        assertTrue(doc3.text().contains(\"\u20ac\"));\n    }",
        "begin_line": 695,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 698,col 9)-(line 698,col 94)",
            "(line 699,col 9)-(line 699,col 90)",
            "(line 702,col 9)-(line 702,col 71)",
            "(line 703,col 9)-(line 703,col 43)",
            "(line 704,col 9)-(line 704,col 43)",
            "(line 705,col 9)-(line 705,col 67)",
            "(line 706,col 9)-(line 706,col 62)",
            "(line 707,col 9)-(line 707,col 46)",
            "(line 710,col 9)-(line 710,col 73)",
            "(line 711,col 9)-(line 711,col 43)",
            "(line 712,col 9)-(line 712,col 43)",
            "(line 713,col 9)-(line 713,col 60)",
            "(line 714,col 9)-(line 714,col 62)",
            "(line 715,col 9)-(line 715,col 46)",
            "(line 718,col 9)-(line 718,col 73)",
            "(line 719,col 9)-(line 719,col 43)",
            "(line 720,col 9)-(line 720,col 37)",
            "(line 721,col 9)-(line 721,col 53)",
            "(line 722,col 9)-(line 722,col 43)",
            "(line 723,col 9)-(line 723,col 67)",
            "(line 724,col 9)-(line 724,col 62)",
            "(line 725,col 9)-(line 725,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handlesUnescapedRedirects()",
        "snippet": "    @Test\n    public void handlesUnescapedRedirects() throws IOException {\n        // URL locations should be url safe (ascii) but are often not, so we should try to guess\n        // in this case the location header is utf-8, but defined in spec as iso8859, so detect, convert, encode\n        String url = \"http://direct.infohound.net/tools/302-utf.pl\";\n        String urlEscaped = \"http://direct.infohound.net/tools/test%F0%9F%92%A9.html\";\n\n        Connection.Response res = Jsoup.connect(url).execute();\n        Document doc = res.parse();\n        assertEquals(doc.body().text(), \"\\uD83D\\uDCA9!\");\n        assertEquals(doc.location(), urlEscaped);\n\n        Connection.Response res2 = Jsoup.connect(url).followRedirects(false).execute();\n        assertEquals(\"/tools/test\\uD83D\\uDCA9.html\", res2.header(\"Location\"));\n        // if we didn't notice it was utf8, would look like: Location: /tools/test\u00f0\u009f\u0092\u00a9.html\n    }",
        "begin_line": 728,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 732,col 9)-(line 732,col 68)",
            "(line 733,col 9)-(line 733,col 86)",
            "(line 735,col 9)-(line 735,col 63)",
            "(line 736,col 9)-(line 736,col 35)",
            "(line 737,col 9)-(line 737,col 57)",
            "(line 738,col 9)-(line 738,col 49)",
            "(line 740,col 9)-(line 740,col 87)",
            "(line 741,col 9)-(line 741,col 78)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handlesEscapesInRedirecct()",
        "snippet": "    @Test public void handlesEscapesInRedirecct() throws IOException {\n        Document doc = Jsoup.connect(\"http://infohound.net/tools/302-escaped.pl\").get();\n        assertEquals(\"http://infohound.net/tools/q.pl?q=one%20two\", doc.location());\n\n        doc = Jsoup.connect(\"http://infohound.net/tools/302-white.pl\").get();\n        assertEquals(\"http://infohound.net/tools/q.pl?q=one%20two\", doc.location());\n    }",
        "begin_line": 745,
        "end_line": 751,
        "comment": "",
        "child_ranges": [
            "(line 746,col 9)-(line 746,col 88)",
            "(line 747,col 9)-(line 747,col 84)",
            "(line 749,col 9)-(line 749,col 77)",
            "(line 750,col 9)-(line 750,col 84)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handlesUt8fInUrl()",
        "snippet": "    @Test\n    public void handlesUt8fInUrl() throws IOException {\n        String url = \"http://direct.infohound.net/tools/test\\uD83D\\uDCA9.html\";\n        String urlEscaped = \"http://direct.infohound.net/tools/test%F0%9F%92%A9.html\";\n\n        Connection.Response res = Jsoup.connect(url).execute();\n        Document doc = res.parse();\n        assertEquals(\"\\uD83D\\uDCA9!\", doc.body().text());\n        assertEquals(urlEscaped, doc.location());\n    }",
        "begin_line": 753,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 755,col 9)-(line 755,col 79)",
            "(line 756,col 9)-(line 756,col 86)",
            "(line 758,col 9)-(line 758,col 63)",
            "(line 759,col 9)-(line 759,col 35)",
            "(line 760,col 9)-(line 760,col 57)",
            "(line 761,col 9)-(line 761,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.inWildUtfRedirect()",
        "snippet": "    @Test\n    public void inWildUtfRedirect() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://brabantn.ws/Q4F\").execute();\n        Document doc = res.parse();\n        assertEquals(\n            \"http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx\",\n            doc.location()\n            );\n    }",
        "begin_line": 764,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 766,col 9)-(line 766,col 84)",
            "(line 767,col 9)-(line 767,col 35)",
            "(line 768,col 9)-(line 771,col 14)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.inWildUtfRedirect2()",
        "snippet": "    @Test\n    public void inWildUtfRedirect2() throws IOException {\n        Connection.Response res = Jsoup.connect(\"https://ssl.souq.com/sa-en/2724288604627/s\").execute();\n        Document doc = res.parse();\n        assertEquals(\n            \"https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch\",\n            doc.location()\n        );\n    }",
        "begin_line": 774,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 776,col 9)-(line 776,col 104)",
            "(line 777,col 9)-(line 777,col 35)",
            "(line 778,col 9)-(line 781,col 10)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.canInterruptBodyStringRead()",
        "snippet": "    @Test public void canInterruptBodyStringRead() throws IOException, InterruptedException {\n        // todo - implement in interruptable channels, so it's immediate\n        final String[] body = new String[1];\n        Thread runner = new Thread(new Runnable() {\n            public void run() {\n                try {\n                    Connection.Response res = Jsoup.connect(\"http://jsscxml.org/serverload.stream\")\n                        .timeout(15 * 1000)\n                        .execute();\n                    body[0] = res.body();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n\n            }\n        });\n\n        runner.start();\n        Thread.sleep(1000 * 7);\n        runner.interrupt();\n        assertTrue(runner.isInterrupted());\n        runner.join();\n\n        assertTrue(body[0].length() > 0);\n    }",
        "begin_line": 784,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 786,col 9)-(line 786,col 44)",
            "(line 787,col 9)-(line 799,col 11)",
            "(line 801,col 9)-(line 801,col 23)",
            "(line 802,col 9)-(line 802,col 31)",
            "(line 803,col 9)-(line 803,col 27)",
            "(line 804,col 9)-(line 804,col 43)",
            "(line 805,col 9)-(line 805,col 22)",
            "(line 807,col 9)-(line 807,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.Anonymous-58cab863-b5d5-4071-b83b-230d91c786b7.run()",
        "snippet": "            public void run() {\n                try {\n                    Connection.Response res = Jsoup.connect(\"http://jsscxml.org/serverload.stream\")\n                        .timeout(15 * 1000)\n                        .execute();\n                    body[0] = res.body();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n\n            }",
        "begin_line": 788,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 789,col 17)-(line 796,col 17)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.canInterruptDocumentRead()",
        "snippet": "    @Test public void canInterruptDocumentRead() throws IOException, InterruptedException {\n        // todo - implement in interruptable channels, so it's immediate\n        final String[] body = new String[1];\n        Thread runner = new Thread(new Runnable() {\n            public void run() {\n                try {\n                    Connection.Response res = Jsoup.connect(\"http://jsscxml.org/serverload.stream\")\n                        .timeout(15 * 1000)\n                        .execute();\n                    body[0] = res.parse().text();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n\n            }\n        });\n\n        runner.start();\n        Thread.sleep(1000 * 7);\n        runner.interrupt();\n        assertTrue(runner.isInterrupted());\n        runner.join();\n\n        assertTrue(body[0].length() > 0);\n    }",
        "begin_line": 810,
        "end_line": 834,
        "comment": "",
        "child_ranges": [
            "(line 812,col 9)-(line 812,col 44)",
            "(line 813,col 9)-(line 825,col 11)",
            "(line 827,col 9)-(line 827,col 23)",
            "(line 828,col 9)-(line 828,col 31)",
            "(line 829,col 9)-(line 829,col 27)",
            "(line 830,col 9)-(line 830,col 43)",
            "(line 831,col 9)-(line 831,col 22)",
            "(line 833,col 9)-(line 833,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.Anonymous-efd23fd2-f0dd-4748-b9c8-62a216580512.run()",
        "snippet": "            public void run() {\n                try {\n                    Connection.Response res = Jsoup.connect(\"http://jsscxml.org/serverload.stream\")\n                        .timeout(15 * 1000)\n                        .execute();\n                    body[0] = res.parse().text();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n\n            }",
        "begin_line": 814,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 815,col 17)-(line 822,col 17)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handlesEscapedRedirectUrls()",
        "snippet": "    @Test public void handlesEscapedRedirectUrls() throws IOException {\n        String url = \"http://www.altalex.com/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione\";\n        // sends: Location:http://shop.wki.it/shared/sso/sso.aspx?sso=&url=http%3a%2f%2fwww.altalex.com%2fsession%2fset%2f%3freturnurl%3dhttp%253a%252f%252fwww.altalex.com%253a80%252fdocuments%252fnews%252f2016%252f12%252f06%252fquestioni-civilistiche-conseguenti-alla-depenalizzazione\n        // then to: http://www.altalex.com/session/set/?returnurl=http%3a%2f%2fwww.altalex.com%3a80%2fdocuments%2fnews%2f2016%2f12%2f06%2fquestioni-civilistiche-conseguenti-alla-depenalizzazione&sso=RDRG6T684G4AK2E7U591UGR923\n        // then : http://www.altalex.com:80/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione\n\n        // bug is that jsoup goes to\n        // \tGET /shared/sso/sso.aspx?sso=&url=http%253a%252f%252fwww.altalex.com%252fsession%252fset%252f%253freturnurl%253dhttp%25253a%25252f%25252fwww.altalex.com%25253a80%25252fdocuments%25252fnews%25252f2016%25252f12%25252f06%25252fquestioni-civilistiche-conseguenti-alla-depenalizzazione HTTP/1.1\n        // i.e. double escaped\n\n        Connection.Response res = Jsoup.connect(url)\n                .proxy(\"localhost\", 8888)\n                .execute();\n        Document doc = res.parse();\n        assertEquals(200, res.statusCode());\n    }",
        "begin_line": 836,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 837,col 9)-(line 837,col 129)",
            "(line 846,col 9)-(line 848,col 27)",
            "(line 849,col 9)-(line 849,col 35)",
            "(line 850,col 9)-(line 850,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.handlesUnicodeInQuery()",
        "snippet": "    @Test public void handlesUnicodeInQuery() throws IOException {\n        Document doc = Jsoup.connect(\"https://www.google.pl/search?q=g\u0105ska\").get();\n        assertEquals(\"g\u0105ska - Szukaj w Google\", doc.title());\n\n        doc = Jsoup.connect(\"http://mov-world.net/archiv/TV/A/%23No.Title/\").get();\n        assertEquals(\"Index of /archiv/TV/A/%23No.Title\", doc.title());\n    }",
        "begin_line": 853,
        "end_line": 859,
        "comment": "",
        "child_ranges": [
            "(line 854,col 9)-(line 854,col 83)",
            "(line 855,col 9)-(line 855,col 61)",
            "(line 857,col 9)-(line 857,col 83)",
            "(line 858,col 9)-(line 858,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.bodyAfterParseThrowsValidationError()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void bodyAfterParseThrowsValidationError() throws IOException {\n        Connection.Response res = Jsoup.connect(echoURL).execute();\n        Document doc = res.parse();\n        String body = res.body();\n    }",
        "begin_line": 861,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 862,col 9)-(line 862,col 67)",
            "(line 863,col 9)-(line 863,col 35)",
            "(line 864,col 9)-(line 864,col 33)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.bodyAndBytesAvailableBeforeParse()",
        "snippet": "    @Test public void bodyAndBytesAvailableBeforeParse() throws IOException {\n        Connection.Response res = Jsoup.connect(echoURL).execute();\n        String body = res.body();\n        assertTrue(body.contains(\"Environment\"));\n        byte[] bytes = res.bodyAsBytes();\n        assertTrue(bytes.length > 100);\n\n        Document doc = res.parse();\n        assertTrue(doc.title().contains(\"Environment\"));\n    }",
        "begin_line": 867,
        "end_line": 876,
        "comment": "",
        "child_ranges": [
            "(line 868,col 9)-(line 868,col 67)",
            "(line 869,col 9)-(line 869,col 33)",
            "(line 870,col 9)-(line 870,col 49)",
            "(line 871,col 9)-(line 871,col 41)",
            "(line 872,col 9)-(line 872,col 39)",
            "(line 874,col 9)-(line 874,col 35)",
            "(line 875,col 9)-(line 875,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.parseParseThrowsValidates()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void parseParseThrowsValidates() throws IOException {\n        Connection.Response res = Jsoup.connect(echoURL).execute();\n        Document doc = res.parse();\n        assertTrue(doc.title().contains(\"Environment\"));\n        Document doc2 = res.parse(); // should blow up because the response input stream has been drained\n    }",
        "begin_line": 878,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 879,col 9)-(line 879,col 67)",
            "(line 880,col 9)-(line 880,col 35)",
            "(line 881,col 9)-(line 881,col 56)",
            "(line 882,col 9)-(line 882,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.UrlConnectTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java",
        "signature": "org.jsoup.integration.UrlConnectTest.multipleParsesOkAfterBufferUp()",
        "snippet": "    @Test public void multipleParsesOkAfterBufferUp() throws IOException {\n        Connection.Response res = Jsoup.connect(echoURL).execute().bufferUp();\n\n        Document doc = res.parse();\n        assertTrue(doc.title().contains(\"Environment\"));\n\n        Document doc2 = res.parse();\n        assertTrue(doc2.title().contains(\"Environment\"));\n    }",
        "begin_line": 885,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 886,col 9)-(line 886,col 78)",
            "(line 888,col 9)-(line 888,col 35)",
            "(line 889,col 9)-(line 889,col 56)",
            "(line 891,col 9)-(line 891,col 36)",
            "(line 892,col 9)-(line 892,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.Benchmark",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/Benchmark.java",
        "signature": "org.jsoup.integration.Benchmark.run(java.lang.Runnable, java.lang.Runnable, int)",
        "snippet": "    public static void run(Runnable a, Runnable b, int count) {\n        long aMillis;\n        long bMillis;\n\n        print(\"Running test A (x%d)\", count);\n        aMillis = time(a, count);\n        print(\"Running test B\");\n        bMillis = time(b, count);\n\n        print(\"\\nResults:\");\n        print(\"A: %.2fs\", aMillis / 1000f);\n        print(\"B: %.2fs\", bMillis / 1000f);\n        print(\"\\nB ran in %.2f %% time of A\\n\", (bMillis *1f / aMillis * 1f) * 100f);\n    }",
        "begin_line": 10,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 11,col 9)-(line 11,col 21)",
            "(line 12,col 9)-(line 12,col 21)",
            "(line 14,col 9)-(line 14,col 45)",
            "(line 15,col 9)-(line 15,col 33)",
            "(line 16,col 9)-(line 16,col 32)",
            "(line 17,col 9)-(line 17,col 33)",
            "(line 19,col 9)-(line 19,col 28)",
            "(line 20,col 9)-(line 20,col 43)",
            "(line 21,col 9)-(line 21,col 43)",
            "(line 22,col 9)-(line 22,col 85)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.Benchmark",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/Benchmark.java",
        "signature": "org.jsoup.integration.Benchmark.time(java.lang.Runnable, int)",
        "snippet": "    private static long time(Runnable test, int count) {\n        Date start = new Date();\n        for (int i = 0; i < count; i++) {\n            test.run();\n        }\n        Date end = new Date();\n        return end.getTime() - start.getTime();\n    }",
        "begin_line": 25,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 32)",
            "(line 27,col 9)-(line 29,col 9)",
            "(line 30,col 9)-(line 30,col 30)",
            "(line 31,col 9)-(line 31,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.integration.Benchmark",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/integration/Benchmark.java",
        "signature": "org.jsoup.integration.Benchmark.print(java.lang.String, java.lang.Object...)",
        "snippet": "    private static void print(String msgFormat, Object... msgParams) {\n        System.out.println(String.format(msgFormat, msgParams));\n    }",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsExceptionOnParseWithoutExecute()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnParseWithoutExecute() throws IOException {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        con.response().parse();\n    }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 70)",
            "(line 31,col 9)-(line 31,col 31)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsExceptionOnBodyWithoutExecute()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnBodyWithoutExecute() throws IOException {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        con.response().body();\n    }",
        "begin_line": 34,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 70)",
            "(line 36,col 9)-(line 36,col 30)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsExceptionOnBodyAsBytesWithoutExecute()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsExceptionOnBodyAsBytesWithoutExecute() throws IOException {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        con.response().bodyAsBytes();\n    }",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 70)",
            "(line 41,col 9)-(line 41,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.caseInsensitiveHeaders()",
        "snippet": "    @Test @MultiLocaleTest public void caseInsensitiveHeaders() {\n        Connection.Response res = new HttpConnection.Response();\n        res.header(\"Accept-Encoding\", \"gzip\");\n        res.header(\"content-type\", \"text/html\");\n        res.header(\"refErrer\", \"http://example.com\");\n\n        assertTrue(res.hasHeader(\"Accept-Encoding\"));\n        assertTrue(res.hasHeader(\"accept-encoding\"));\n        assertTrue(res.hasHeader(\"accept-Encoding\"));\n        assertTrue(res.hasHeader(\"ACCEPT-ENCODING\"));\n\n        assertEquals(\"gzip\", res.header(\"accept-Encoding\"));\n        assertEquals(\"gzip\", res.header(\"ACCEPT-ENCODING\"));\n        assertEquals(\"text/html\", res.header(\"Content-Type\"));\n        assertEquals(\"http://example.com\", res.header(\"Referrer\"));\n\n        res.removeHeader(\"Content-Type\");\n        assertFalse(res.hasHeader(\"content-type\"));\n\n        res.removeHeader(\"ACCEPT-ENCODING\");\n        assertFalse(res.hasHeader(\"Accept-Encoding\"));\n\n        res.header(\"ACCEPT-ENCODING\", \"deflate\");\n        assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n        assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n    }",
        "begin_line": 44,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 64)",
            "(line 46,col 9)-(line 46,col 46)",
            "(line 47,col 9)-(line 47,col 48)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 50,col 9)-(line 50,col 53)",
            "(line 51,col 9)-(line 51,col 53)",
            "(line 52,col 9)-(line 52,col 53)",
            "(line 53,col 9)-(line 53,col 53)",
            "(line 55,col 9)-(line 55,col 60)",
            "(line 56,col 9)-(line 56,col 60)",
            "(line 57,col 9)-(line 57,col 62)",
            "(line 58,col 9)-(line 58,col 67)",
            "(line 60,col 9)-(line 60,col 41)",
            "(line 61,col 9)-(line 61,col 51)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 54)",
            "(line 66,col 9)-(line 66,col 49)",
            "(line 67,col 9)-(line 67,col 63)",
            "(line 68,col 9)-(line 68,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.headers()",
        "snippet": "    @Test public void headers() {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        Map<String, String> headers = new HashMap<>();\n        headers.put(\"content-type\", \"text/html\");\n        headers.put(\"Connection\", \"keep-alive\");\n        headers.put(\"Host\", \"http://example.com\");\n        con.headers(headers);\n        assertEquals(\"text/html\", con.request().header(\"content-type\"));\n        assertEquals(\"keep-alive\", con.request().header(\"Connection\"));\n        assertEquals(\"http://example.com\", con.request().header(\"Host\"));\n    }",
        "begin_line": 71,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 70)",
            "(line 73,col 9)-(line 73,col 54)",
            "(line 74,col 9)-(line 74,col 49)",
            "(line 75,col 9)-(line 75,col 48)",
            "(line 76,col 9)-(line 76,col 50)",
            "(line 77,col 9)-(line 77,col 29)",
            "(line 78,col 9)-(line 78,col 72)",
            "(line 79,col 9)-(line 79,col 71)",
            "(line 80,col 9)-(line 80,col 73)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.sameHeadersCombineWithComma()",
        "snippet": "    @Test public void sameHeadersCombineWithComma() {\n        Map<String, List<String>> headers = new HashMap<>();\n        List<String> values = new ArrayList<>();\n        values.add(\"no-cache\");\n        values.add(\"no-store\");\n        headers.put(\"Cache-Control\", values);\n        HttpConnection.Response res = new HttpConnection.Response();\n        res.processResponseHeaders(headers);\n        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n    }",
        "begin_line": 83,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 60)",
            "(line 85,col 9)-(line 85,col 48)",
            "(line 86,col 9)-(line 86,col 31)",
            "(line 87,col 9)-(line 87,col 31)",
            "(line 88,col 9)-(line 88,col 45)",
            "(line 89,col 9)-(line 89,col 68)",
            "(line 90,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.multipleHeaders()",
        "snippet": "    @Test public void multipleHeaders() {\n        Connection.Request req = new HttpConnection.Request();\n        req.addHeader(\"Accept\", \"Something\");\n        req.addHeader(\"Accept\", \"Everything\");\n        req.addHeader(\"Foo\", \"Bar\");\n\n        assertTrue(req.hasHeader(\"Accept\"));\n        assertTrue(req.hasHeader(\"ACCEpt\"));\n        assertEquals(\"Something, Everything\", req.header(\"accept\"));\n        assertTrue(req.hasHeader(\"fOO\"));\n        assertEquals(\"Bar\", req.header(\"foo\"));\n\n        List<String> accept = req.headers(\"accept\");\n        assertEquals(2, accept.size());\n        assertEquals(\"Something\", accept.get(0));\n        assertEquals(\"Everything\", accept.get(1));\n\n        Map<String, List<String>> headers = req.multiHeaders();\n        assertEquals(accept, headers.get(\"Accept\"));\n        assertEquals(\"Bar\", headers.get(\"Foo\").get(0));\n\n        assertTrue(req.hasHeader(\"Accept\"));\n        assertTrue(req.hasHeaderWithValue(\"accept\", \"Something\"));\n        assertTrue(req.hasHeaderWithValue(\"accept\", \"Everything\"));\n        assertFalse(req.hasHeaderWithValue(\"accept\", \"Something for nothing\"));\n\n        req.removeHeader(\"accept\");\n        headers = req.multiHeaders();\n        assertEquals(\"Bar\", headers.get(\"Foo\").get(0));\n        assertFalse(req.hasHeader(\"Accept\"));\n        assertTrue(headers.get(\"Accept\") == null);\n    }",
        "begin_line": 94,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 62)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 46)",
            "(line 98,col 9)-(line 98,col 36)",
            "(line 100,col 9)-(line 100,col 44)",
            "(line 101,col 9)-(line 101,col 44)",
            "(line 102,col 9)-(line 102,col 68)",
            "(line 103,col 9)-(line 103,col 41)",
            "(line 104,col 9)-(line 104,col 47)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 39)",
            "(line 108,col 9)-(line 108,col 49)",
            "(line 109,col 9)-(line 109,col 50)",
            "(line 111,col 9)-(line 111,col 63)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 55)",
            "(line 115,col 9)-(line 115,col 44)",
            "(line 116,col 9)-(line 116,col 66)",
            "(line 117,col 9)-(line 117,col 67)",
            "(line 118,col 9)-(line 118,col 79)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 55)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.ignoresEmptySetCookies()",
        "snippet": "    @Test public void ignoresEmptySetCookies() {\n        // prep http response header map\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Set-Cookie\", Collections.<String>emptyList());\n        HttpConnection.Response res = new HttpConnection.Response();\n        res.processResponseHeaders(headers);\n        assertEquals(0, res.cookies().size());\n    }",
        "begin_line": 127,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 60)",
            "(line 130,col 9)-(line 130,col 67)",
            "(line 131,col 9)-(line 131,col 68)",
            "(line 132,col 9)-(line 132,col 44)",
            "(line 133,col 9)-(line 133,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.ignoresEmptyCookieNameAndVals()",
        "snippet": "    @Test public void ignoresEmptyCookieNameAndVals() {\n        // prep http response header map\n        Map<String, List<String>> headers = new HashMap<>();\n        List<String> cookieStrings = new ArrayList<>();\n        cookieStrings.add(null);\n        cookieStrings.add(\"\");\n        cookieStrings.add(\"one\");\n        cookieStrings.add(\"two=\");\n        cookieStrings.add(\"three=;\");\n        cookieStrings.add(\"four=data; Domain=.example.com; Path=/\");\n\n        headers.put(\"Set-Cookie\", cookieStrings);\n        HttpConnection.Response res = new HttpConnection.Response();\n        res.processResponseHeaders(headers);\n        assertEquals(4, res.cookies().size());\n        assertEquals(\"\", res.cookie(\"one\"));\n        assertEquals(\"\", res.cookie(\"two\"));\n        assertEquals(\"\", res.cookie(\"three\"));\n        assertEquals(\"data\", res.cookie(\"four\"));\n    }",
        "begin_line": 136,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 60)",
            "(line 139,col 9)-(line 139,col 55)",
            "(line 140,col 9)-(line 140,col 32)",
            "(line 141,col 9)-(line 141,col 30)",
            "(line 142,col 9)-(line 142,col 33)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 144,col 9)-(line 144,col 37)",
            "(line 145,col 9)-(line 145,col 68)",
            "(line 147,col 9)-(line 147,col 49)",
            "(line 148,col 9)-(line 148,col 68)",
            "(line 149,col 9)-(line 149,col 44)",
            "(line 150,col 9)-(line 150,col 46)",
            "(line 151,col 9)-(line 151,col 44)",
            "(line 152,col 9)-(line 152,col 44)",
            "(line 153,col 9)-(line 153,col 46)",
            "(line 154,col 9)-(line 154,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.connectWithUrl()",
        "snippet": "    @Test public void connectWithUrl() throws MalformedURLException {\n        Connection con = HttpConnection.connect(new URL(\"http://example.com\"));\n        assertEquals(\"http://example.com\", con.request().url().toExternalForm());\n    }",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 79)",
            "(line 159,col 9)-(line 159,col 81)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsOnMalformedUrl()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsOnMalformedUrl() {\n        Connection con = HttpConnection.connect(\"bzzt\");\n    }",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.userAgent()",
        "snippet": "    @Test public void userAgent() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(HttpConnection.DEFAULT_UA, con.request().header(\"User-Agent\"));\n        con.userAgent(\"Mozilla\");\n        assertEquals(\"Mozilla\", con.request().header(\"User-Agent\"));\n    }",
        "begin_line": 166,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 71)",
            "(line 168,col 9)-(line 168,col 84)",
            "(line 169,col 9)-(line 169,col 33)",
            "(line 170,col 9)-(line 170,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.timeout()",
        "snippet": "    @Test public void timeout() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(30 * 1000, con.request().timeout());\n        con.timeout(1000);\n        assertEquals(1000, con.request().timeout());\n    }",
        "begin_line": 173,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 71)",
            "(line 175,col 9)-(line 175,col 57)",
            "(line 176,col 9)-(line 176,col 26)",
            "(line 177,col 9)-(line 177,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.referrer()",
        "snippet": "    @Test public void referrer() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.referrer(\"http://foo.com\");\n        assertEquals(\"http://foo.com\", con.request().header(\"Referer\"));\n    }",
        "begin_line": 180,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 71)",
            "(line 182,col 9)-(line 182,col 39)",
            "(line 183,col 9)-(line 183,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.method()",
        "snippet": "    @Test public void method() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(Connection.Method.GET, con.request().method());\n        con.method(Connection.Method.POST);\n        assertEquals(Connection.Method.POST, con.request().method());\n    }",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 71)",
            "(line 188,col 9)-(line 188,col 68)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 190,col 9)-(line 190,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.throwsOnOddData()",
        "snippet": "    @Test(expected=IllegalArgumentException.class) public void throwsOnOddData() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.data(\"Name\", \"val\", \"what\");\n    }",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 71)",
            "(line 195,col 9)-(line 195,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.data()",
        "snippet": "    @Test public void data() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.data(\"Name\", \"Val\", \"Foo\", \"bar\");\n        Collection<Connection.KeyVal> values = con.request().data();\n        Object[] data =  values.toArray();\n        Connection.KeyVal one = (Connection.KeyVal) data[0];\n        Connection.KeyVal two = (Connection.KeyVal) data[1];\n        assertEquals(\"Name\", one.key());\n        assertEquals(\"Val\", one.value());\n        assertEquals(\"Foo\", two.key());\n        assertEquals(\"bar\", two.value());\n    }",
        "begin_line": 198,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 71)",
            "(line 200,col 9)-(line 200,col 46)",
            "(line 201,col 9)-(line 201,col 68)",
            "(line 202,col 9)-(line 202,col 42)",
            "(line 203,col 9)-(line 203,col 60)",
            "(line 204,col 9)-(line 204,col 60)",
            "(line 205,col 9)-(line 205,col 40)",
            "(line 206,col 9)-(line 206,col 41)",
            "(line 207,col 9)-(line 207,col 39)",
            "(line 208,col 9)-(line 208,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.cookie()",
        "snippet": "    @Test public void cookie() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.cookie(\"Name\", \"Val\");\n        assertEquals(\"Val\", con.request().cookie(\"Name\"));\n    }",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 71)",
            "(line 213,col 9)-(line 213,col 34)",
            "(line 214,col 9)-(line 214,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.inputStream()",
        "snippet": "    @Test public void inputStream() {\n        Connection.KeyVal kv = HttpConnection.KeyVal.create(\"file\", \"thumb.jpg\", ParseTest.inputStreamFrom(\"Check\"));\n        assertEquals(\"file\", kv.key());\n        assertEquals(\"thumb.jpg\", kv.value());\n        assertTrue(kv.hasInputStream());\n\n        kv = HttpConnection.KeyVal.create(\"one\", \"two\");\n        assertEquals(\"one\", kv.key());\n        assertEquals(\"two\", kv.value());\n        assertFalse(kv.hasInputStream());\n    }",
        "begin_line": 217,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 117)",
            "(line 219,col 9)-(line 219,col 39)",
            "(line 220,col 9)-(line 220,col 46)",
            "(line 221,col 9)-(line 221,col 40)",
            "(line 223,col 9)-(line 223,col 56)",
            "(line 224,col 9)-(line 224,col 38)",
            "(line 225,col 9)-(line 225,col 40)",
            "(line 226,col 9)-(line 226,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.requestBody()",
        "snippet": "    @Test public void requestBody() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.requestBody(\"foo\");\n        assertEquals(\"foo\", con.request().requestBody());\n    }",
        "begin_line": 229,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 71)",
            "(line 231,col 9)-(line 231,col 31)",
            "(line 232,col 9)-(line 232,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.HttpConnectionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java",
        "signature": "org.jsoup.helper.HttpConnectionTest.encodeUrl()",
        "snippet": "    @Test public void encodeUrl() throws MalformedURLException {\n        URL url1 = new URL(\"http://test.com/?q=white space\");\n        URL url2 = HttpConnection.encodeUrl(url1);\n        assertEquals(\"http://test.com/?q=white%20space\", url2.toExternalForm());\n    }",
        "begin_line": 235,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 61)",
            "(line 237,col 9)-(line 237,col 50)",
            "(line 238,col 9)-(line 238,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.testCharset()",
        "snippet": "    @Test\n    public void testCharset() {\n        assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=UTF-8\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(null));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html;charset=Unknown\"));\n    }",
        "begin_line": 22,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 94)",
            "(line 25,col 9)-(line 25,col 94)",
            "(line 26,col 9)-(line 26,col 104)",
            "(line 27,col 9)-(line 27,col 76)",
            "(line 28,col 9)-(line 28,col 69)",
            "(line 29,col 9)-(line 29,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.testQuotedCharset()",
        "snippet": "    @Test public void testQuotedCharset() {\n        assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"utf-8\\\"\"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=\\\"UTF-8\\\"\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"ISO-8859-1\\\"\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"Unsupported\\\"\"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset='UTF-8'\"));\n    }",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 98)",
            "(line 34,col 9)-(line 34,col 97)",
            "(line 35,col 9)-(line 35,col 108)",
            "(line 36,col 9)-(line 36,col 101)",
            "(line 37,col 9)-(line 37,col 96)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.stream(java.lang.String)",
        "snippet": "    private InputStream stream(String data) {\n        return new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n    }",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.stream(java.lang.String, java.lang.String)",
        "snippet": "    private InputStream stream(String data, String charset) {\n        try {\n            return new ByteArrayInputStream(data.getBytes(charset));\n        } catch (UnsupportedEncodingException e) {\n            fail();\n        }\n        return null;\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 49,col 9)",
            "(line 50,col 9)-(line 50,col 20)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.discardsSpuriousByteOrderMark()",
        "snippet": "    @Test public void discardsSpuriousByteOrderMark() throws IOException {\n        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n        Document doc = DataUtil.parseInputStream(stream(html), \"UTF-8\", \"http://foo.com/\", Parser.htmlParser());\n        assertEquals(\"One\", doc.head().text());\n    }",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 91)",
            "(line 55,col 9)-(line 55,col 112)",
            "(line 56,col 9)-(line 56,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.discardsSpuriousByteOrderMarkWhenNoCharsetSet()",
        "snippet": "    @Test public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() throws IOException {\n        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n        Document doc = DataUtil.parseInputStream(stream(html), null, \"http://foo.com/\", Parser.htmlParser());\n        assertEquals(\"One\", doc.head().text());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n    }",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 91)",
            "(line 61,col 9)-(line 61,col 109)",
            "(line 62,col 9)-(line 62,col 47)",
            "(line 63,col 9)-(line 63,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.shouldNotThrowExceptionOnEmptyCharset()",
        "snippet": "    @Test\n    public void shouldNotThrowExceptionOnEmptyCharset() {\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\"));\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=;\"));\n    }",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 86)",
            "(line 69,col 9)-(line 69,col 87)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()",
        "snippet": "    @Test\n    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1, charset=1251\"));\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 118)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.shouldCorrectCharsetForDuplicateCharsetString()",
        "snippet": "    @Test\n    public void shouldCorrectCharsetForDuplicateCharsetString() {\n        assertEquals(\"iso-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=charset=iso-8859-1\"));\n    }",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 112)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.shouldReturnNullForIllegalCharsetNames()",
        "snippet": "    @Test\n    public void shouldReturnNullForIllegalCharsetNames() {\n        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=$HJKDF\u00a7$/(\"));\n    }",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 96)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.generatesMimeBoundaries()",
        "snippet": "    @Test\n    public void generatesMimeBoundaries() {\n        String m1 = DataUtil.mimeBoundary();\n        String m2 = DataUtil.mimeBoundary();\n\n        assertEquals(DataUtil.boundaryLength, m1.length());\n        assertEquals(DataUtil.boundaryLength, m2.length());\n        assertNotSame(m1, m2);\n    }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 44)",
            "(line 90,col 9)-(line 90,col 44)",
            "(line 92,col 9)-(line 92,col 59)",
            "(line 93,col 9)-(line 93,col 59)",
            "(line 94,col 9)-(line 94,col 30)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.wrongMetaCharsetFallback()",
        "snippet": "    @Test\n    public void wrongMetaCharsetFallback() throws IOException {\n        String html = \"<html><head><meta charset=iso-8></head><body></body></html>\";\n\n        Document doc = DataUtil.parseInputStream(stream(html), null, \"http://example.com\", Parser.htmlParser());\n\n        final String expected = \"<html>\\n\" +\n            \" <head>\\n\" +\n            \"  <meta charset=\\\"iso-8\\\">\\n\" +\n            \" </head>\\n\" +\n            \" <body></body>\\n\" +\n            \"</html>\";\n\n        assertEquals(expected, doc.toString());\n    }",
        "begin_line": 97,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 84)",
            "(line 101,col 9)-(line 101,col 112)",
            "(line 103,col 9)-(line 108,col 22)",
            "(line 110,col 9)-(line 110,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.secondMetaElementWithContentTypeContainsCharsetParameter()",
        "snippet": "    @Test\n    public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {\n        String html = \"<html><head>\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html\\\">\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=euc-kr\\\">\" +\n                \"</head><body>\ud55c\uad6d\uc5b4</body></html>\";\n\n        Document doc = DataUtil.parseInputStream(stream(html, \"euc-kr\"), null, \"http://example.com\", Parser.htmlParser());\n\n        assertEquals(\"\ud55c\uad6d\uc5b4\", doc.body().text());\n    }",
        "begin_line": 113,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 118,col 49)",
            "(line 120,col 9)-(line 120,col 122)",
            "(line 122,col 9)-(line 122,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.firstMetaElementWithCharsetShouldBeUsedForDecoding()",
        "snippet": "    @Test\n    public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {\n        String html = \"<html><head>\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=iso-8859-1\\\">\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=koi8-u\\\">\" +\n                \"</head><body>\u00dcbergr\u00f6\u00dfentr\u00e4ger</body></html>\";\n\n        Document doc = DataUtil.parseInputStream(stream(html, \"iso-8859-1\"), null, \"http://example.com\", Parser.htmlParser());\n\n        assertEquals(\"\u00dcbergr\u00f6\u00dfentr\u00e4ger\", doc.body().text());\n    }",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 130,col 62)",
            "(line 132,col 9)-(line 132,col 126)",
            "(line 134,col 9)-(line 134,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.DataUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/DataUtilTest.java",
        "signature": "org.jsoup.helper.DataUtilTest.supportsBOMinFiles()",
        "snippet": "    @Test\n    public void supportsBOMinFiles() throws IOException {\n        // test files from http://www.i18nl10n.com/korean/utftest/\n        File in = getFile(\"/bomtests/bom_utf16be.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-16BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf16le.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-16LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32be.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-32BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32le.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-32LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n    }",
        "begin_line": 137,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 56)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 143,col 9)-(line 143,col 50)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 58)",
            "(line 147,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 148,col 50)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 58)",
            "(line 152,col 9)-(line 152,col 53)",
            "(line 153,col 9)-(line 153,col 50)",
            "(line 155,col 9)-(line 155,col 51)",
            "(line 156,col 9)-(line 156,col 58)",
            "(line 157,col 9)-(line 157,col 53)",
            "(line 158,col 9)-(line 158,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.join()",
        "snippet": "    @Test public void join() {\n        assertEquals(\"\", StringUtil.join(Arrays.asList(\"\"), \" \"));\n        assertEquals(\"one\", StringUtil.join(Arrays.asList(\"one\"), \" \"));\n        assertEquals(\"one two three\", StringUtil.join(Arrays.asList(\"one\", \"two\", \"three\"), \" \"));\n    }",
        "begin_line": 15,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 66)",
            "(line 17,col 9)-(line 17,col 72)",
            "(line 18,col 9)-(line 18,col 98)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.padding()",
        "snippet": "    @Test public void padding() {\n        assertEquals(\"\", StringUtil.padding(0));\n        assertEquals(\" \", StringUtil.padding(1));\n        assertEquals(\"  \", StringUtil.padding(2));\n        assertEquals(\"               \", StringUtil.padding(15));\n        assertEquals(\"                                             \", StringUtil.padding(45));\n    }",
        "begin_line": 21,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 48)",
            "(line 23,col 9)-(line 23,col 49)",
            "(line 24,col 9)-(line 24,col 50)",
            "(line 25,col 9)-(line 25,col 64)",
            "(line 26,col 9)-(line 26,col 94)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.paddingInACan()",
        "snippet": "    @Test public void paddingInACan() {\n        String[] padding = StringUtil.padding;\n        assertEquals(21, padding.length);\n        for (int i = 0; i < padding.length; i++) {\n            assertEquals(i, padding[i].length());\n        }\n    }",
        "begin_line": 29,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 46)",
            "(line 31,col 9)-(line 31,col 41)",
            "(line 32,col 9)-(line 34,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.isBlank()",
        "snippet": "    @Test public void isBlank() {\n        assertTrue(StringUtil.isBlank(null));\n        assertTrue(StringUtil.isBlank(\"\"));\n        assertTrue(StringUtil.isBlank(\"      \"));\n        assertTrue(StringUtil.isBlank(\"   \\r\\n  \"));\n\n        assertFalse(StringUtil.isBlank(\"hello\"));\n        assertFalse(StringUtil.isBlank(\"   hello   \"));\n    }",
        "begin_line": 37,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 45)",
            "(line 39,col 9)-(line 39,col 43)",
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 52)",
            "(line 43,col 9)-(line 43,col 49)",
            "(line 44,col 9)-(line 44,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.isNumeric()",
        "snippet": "    @Test public void isNumeric() {\n        assertFalse(StringUtil.isNumeric(null));\n        assertFalse(StringUtil.isNumeric(\" \"));\n        assertFalse(StringUtil.isNumeric(\"123 546\"));\n        assertFalse(StringUtil.isNumeric(\"hello\"));\n        assertFalse(StringUtil.isNumeric(\"123.334\"));\n\n        assertTrue(StringUtil.isNumeric(\"1\"));\n        assertTrue(StringUtil.isNumeric(\"1234\"));\n    }",
        "begin_line": 47,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 48)",
            "(line 49,col 9)-(line 49,col 47)",
            "(line 50,col 9)-(line 50,col 53)",
            "(line 51,col 9)-(line 51,col 51)",
            "(line 52,col 9)-(line 52,col 53)",
            "(line 54,col 9)-(line 54,col 46)",
            "(line 55,col 9)-(line 55,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.isWhitespace()",
        "snippet": "    @Test public void isWhitespace() {\n        assertTrue(StringUtil.isWhitespace('\\t'));\n        assertTrue(StringUtil.isWhitespace('\\n'));\n        assertTrue(StringUtil.isWhitespace('\\r'));\n        assertTrue(StringUtil.isWhitespace('\\f'));\n        assertTrue(StringUtil.isWhitespace(' '));\n        \n        assertFalse(StringUtil.isWhitespace('\\u00a0'));\n        assertFalse(StringUtil.isWhitespace('\\u2000'));\n        assertFalse(StringUtil.isWhitespace('\\u3000'));\n    }",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 50)",
            "(line 61,col 9)-(line 61,col 50)",
            "(line 62,col 9)-(line 62,col 50)",
            "(line 63,col 9)-(line 63,col 49)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 55)",
            "(line 67,col 9)-(line 67,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.normaliseWhiteSpace()",
        "snippet": "    @Test public void normaliseWhiteSpace() {\n        assertEquals(\" \", normaliseWhitespace(\"    \\r \\n \\r\\n\"));\n        assertEquals(\" hello there \", normaliseWhitespace(\"   hello   \\r \\n  there    \\n\"));\n        assertEquals(\"hello\", normaliseWhitespace(\"hello\"));\n        assertEquals(\"hello there\", normaliseWhitespace(\"hello\\nthere\"));\n    }",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 65)",
            "(line 72,col 9)-(line 72,col 92)",
            "(line 73,col 9)-(line 73,col 60)",
            "(line 74,col 9)-(line 74,col 73)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.normaliseWhiteSpaceHandlesHighSurrogates()",
        "snippet": "    @Test public void normaliseWhiteSpaceHandlesHighSurrogates() {\n        String test71540chars = \"\\ud869\\udeb2\\u304b\\u309a  1\";\n        String test71540charsExpectedSingleWhitespace = \"\\ud869\\udeb2\\u304b\\u309a 1\";\n\n        assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars));\n        String extractedText = Jsoup.parse(test71540chars).text();\n        assertEquals(test71540charsExpectedSingleWhitespace, extractedText);\n    }",
        "begin_line": 77,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 62)",
            "(line 79,col 9)-(line 79,col 85)",
            "(line 81,col 9)-(line 81,col 98)",
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.StringUtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/StringUtilTest.java",
        "signature": "org.jsoup.helper.StringUtilTest.resolvesRelativeUrls()",
        "snippet": "    @Test public void resolvesRelativeUrls() {\n        assertEquals(\"http://example.com/one/two?three\", resolve(\"http://example.com\", \"./one/two?three\"));\n        assertEquals(\"http://example.com/one/two?three\", resolve(\"http://example.com?one\", \"./one/two?three\"));\n        assertEquals(\"http://example.com/one/two?three#four\", resolve(\"http://example.com\", \"./one/two?three#four\"));\n        assertEquals(\"https://example.com/one\", resolve(\"http://example.com/\", \"https://example.com/one\"));\n        assertEquals(\"http://example.com/one/two.html\", resolve(\"http://example.com/two/\", \"../one/two.html\"));\n        assertEquals(\"https://example2.com/one\", resolve(\"https://example.com/\", \"//example2.com/one\"));\n        assertEquals(\"https://example.com:8080/one\", resolve(\"https://example.com:8080\", \"./one\"));\n        assertEquals(\"https://example2.com/one\", resolve(\"http://example.com/\", \"https://example2.com/one\"));\n        assertEquals(\"https://example.com/one\", resolve(\"wrong\", \"https://example.com/one\"));\n        assertEquals(\"https://example.com/one\", resolve(\"https://example.com/one\", \"\"));\n        assertEquals(\"\", resolve(\"wrong\", \"also wrong\"));\n        assertEquals(\"ftp://example.com/one\", resolve(\"ftp://example.com/two/\", \"../one\"));\n        assertEquals(\"ftp://example.com/one/two.c\", resolve(\"ftp://example.com/one/\", \"./two.c\"));\n        assertEquals(\"ftp://example.com/one/two.c\", resolve(\"ftp://example.com/one/\", \"two.c\"));\n    }",
        "begin_line": 86,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 107)",
            "(line 88,col 9)-(line 88,col 111)",
            "(line 89,col 9)-(line 89,col 117)",
            "(line 90,col 9)-(line 90,col 107)",
            "(line 91,col 9)-(line 91,col 111)",
            "(line 92,col 9)-(line 92,col 104)",
            "(line 93,col 9)-(line 93,col 99)",
            "(line 94,col 9)-(line 94,col 109)",
            "(line 95,col 9)-(line 95,col 93)",
            "(line 96,col 9)-(line 96,col 88)",
            "(line 97,col 9)-(line 97,col 57)",
            "(line 98,col 9)-(line 98,col 91)",
            "(line 99,col 9)-(line 99,col 98)",
            "(line 100,col 9)-(line 100,col 96)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.W3CDomTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/W3CDomTest.java",
        "signature": "org.jsoup.helper.W3CDomTest.simpleConversion()",
        "snippet": "    @Test\n    public void simpleConversion() {\n        String html = \"<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')\";\n        org.jsoup.nodes.Document doc = Jsoup.parse(html);\n\n        W3CDom w3c = new W3CDom();\n        Document wDoc = w3c.fromJsoup(doc);\n        String out = TextUtil.stripNewlines(w3c.asString(wDoc));\n        String expected = TextUtil.stripNewlines(\n                \"<html><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"><title>W3c</title>\" +\n                \"</head><body><p class=\\\"one\\\" id=\\\"12\\\">Text</p><!-- comment --><invalid>What<script>alert('!')</script>\" +\n                \"</invalid></body></html>\"\n        );\n        assertEquals(expected, out);\n    }",
        "begin_line": 18,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 20,col 9)-(line 20,col 144)",
            "(line 21,col 9)-(line 21,col 57)",
            "(line 23,col 9)-(line 23,col 34)",
            "(line 24,col 9)-(line 24,col 43)",
            "(line 25,col 9)-(line 25,col 64)",
            "(line 26,col 9)-(line 30,col 10)",
            "(line 31,col 9)-(line 31,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.W3CDomTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/W3CDomTest.java",
        "signature": "org.jsoup.helper.W3CDomTest.convertsGoogle()",
        "snippet": "    @Test\n    public void convertsGoogle() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/google-ipod.html\");\n        org.jsoup.nodes.Document doc = Jsoup.parse(in, \"UTF8\");\n\n        W3CDom w3c = new W3CDom();\n        Document wDoc = w3c.fromJsoup(doc);\n        Node htmlEl = wDoc.getChildNodes().item(0);\n        assertEquals(null, htmlEl.getNamespaceURI());\n        assertEquals(\"html\", htmlEl.getLocalName());\n        assertEquals(\"html\", htmlEl.getNodeName());\n\n        String out = w3c.asString(wDoc);\n        assertTrue(out.contains(\"ipod\"));\n    }",
        "begin_line": 34,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 67)",
            "(line 37,col 9)-(line 37,col 63)",
            "(line 39,col 9)-(line 39,col 34)",
            "(line 40,col 9)-(line 40,col 43)",
            "(line 41,col 9)-(line 41,col 51)",
            "(line 42,col 9)-(line 42,col 53)",
            "(line 43,col 9)-(line 43,col 52)",
            "(line 44,col 9)-(line 44,col 51)",
            "(line 46,col 9)-(line 46,col 40)",
            "(line 47,col 9)-(line 47,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.W3CDomTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/W3CDomTest.java",
        "signature": "org.jsoup.helper.W3CDomTest.convertsGoogleLocation()",
        "snippet": "    @Test\n    public void convertsGoogleLocation() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/google-ipod.html\");\n        org.jsoup.nodes.Document doc = Jsoup.parse(in, \"UTF8\");\n\n        W3CDom w3c = new W3CDom();\n        Document wDoc = w3c.fromJsoup(doc);\n\n        String out = w3c.asString(wDoc);\n        assertEquals(doc.location(), wDoc.getDocumentURI() );\n    }",
        "begin_line": 51,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 67)",
            "(line 54,col 9)-(line 54,col 63)",
            "(line 56,col 9)-(line 56,col 34)",
            "(line 57,col 9)-(line 57,col 43)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 60,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.W3CDomTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/W3CDomTest.java",
        "signature": "org.jsoup.helper.W3CDomTest.namespacePreservation()",
        "snippet": "    @Test\n    public void namespacePreservation() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/namespaces.xhtml\");\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(in, \"UTF-8\");\n\n        Document doc;\n        org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n        doc = jDom.fromJsoup(jsoupDoc);\n\n        Node htmlEl = doc.getChildNodes().item(0);\n        assertEquals(\"http://www.w3.org/1999/xhtml\", htmlEl.getNamespaceURI());\n        assertEquals(\"html\", htmlEl.getLocalName());\n        assertEquals(\"html\", htmlEl.getNodeName());\n\n        Node epubTitle = htmlEl.getChildNodes().item(2).getChildNodes().item(3);\n        assertEquals(\"http://www.idpf.org/2007/ops\", epubTitle.getNamespaceURI());\n        assertEquals(\"title\", epubTitle.getLocalName());\n        assertEquals(\"epub:title\", epubTitle.getNodeName());\n\n        Node xSection = epubTitle.getNextSibling().getNextSibling();\n        assertEquals(\"urn:test\", xSection.getNamespaceURI());\n        assertEquals(\"section\", xSection.getLocalName());\n        assertEquals(\"x:section\", xSection.getNodeName());\n    }",
        "begin_line": 65,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 67)",
            "(line 68,col 9)-(line 68,col 42)",
            "(line 69,col 9)-(line 69,col 44)",
            "(line 71,col 9)-(line 71,col 21)",
            "(line 72,col 9)-(line 72,col 69)",
            "(line 73,col 9)-(line 73,col 39)",
            "(line 75,col 9)-(line 75,col 50)",
            "(line 76,col 9)-(line 76,col 79)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 51)",
            "(line 80,col 9)-(line 80,col 80)",
            "(line 81,col 9)-(line 81,col 82)",
            "(line 82,col 9)-(line 82,col 56)",
            "(line 83,col 9)-(line 83,col 60)",
            "(line 85,col 9)-(line 85,col 68)",
            "(line 86,col 9)-(line 86,col 61)",
            "(line 87,col 9)-(line 87,col 57)",
            "(line 88,col 9)-(line 88,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.helper.W3CDomTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/helper/W3CDomTest.java",
        "signature": "org.jsoup.helper.W3CDomTest.handlesInvalidAttributeNames()",
        "snippet": "    @Test\n    public void handlesInvalidAttributeNames() {\n        String html = \"<html><head></head><body style=\\\"color: red\\\" \\\" name\\\"></body></html>\";\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(html);\n        Element body = jsoupDoc.select(\"body\").first();\n        assertTrue(body.hasAttr(\"\\\"\")); // actually an attribute with key '\"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it\n        assertTrue(body.hasAttr(\"name\\\"\"));\n\n        Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);\n    }",
        "begin_line": 91,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 95)",
            "(line 94,col 9)-(line 94,col 42)",
            "(line 95,col 9)-(line 95,col 37)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 97,col 9)-(line 97,col 39)",
            "(line 98,col 9)-(line 98,col 43)",
            "(line 100,col 9)-(line 100,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.BuildEntities",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/BuildEntities.java",
        "signature": "org.jsoup.nodes.BuildEntities.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) throws IOException {\n        String url = \"https://www.w3.org/TR/2012/WD-html5-20121025/entities.json\";\n        Connection.Response res = Jsoup.connect(url)\n            .ignoreContentType(true)\n            .userAgent(UrlConnectTest.browserUa)\n            .execute();\n\n        Gson gson = new Gson();\n        Map<String, CharacterRef> input = gson.fromJson(res.body(),\n            new TypeToken<Map<String, CharacterRef>>() {\n            }.getType());\n\n\n        // build name sorted base and full character lists:\n        ArrayList<CharacterRef> base = new ArrayList<>();\n        ArrayList<CharacterRef> full = new ArrayList<>();\n\n        for (Map.Entry<String, CharacterRef> entry : input.entrySet()) {\n            String name = entry.getKey().substring(1); // name is like &acute or &acute; , trim &\n            CharacterRef ref = entry.getValue();\n            if (name.endsWith(\";\")) {\n                name = name.substring(0, name.length() - 1);\n                full.add(ref);\n            } else {\n                base.add(ref);\n            }\n            ref.name = name;\n        }\n        Collections.sort(base, byName);\n        Collections.sort(full, byName);\n\n        // now determine code point order\n        ArrayList<CharacterRef> baseByCode = new ArrayList<>(base);\n        ArrayList<CharacterRef> fullByCode = new ArrayList<>(full);\n        Collections.sort(baseByCode, byCode);\n        Collections.sort(fullByCode, byCode);\n\n        // and update their codepoint index.\n        @SuppressWarnings(\"unchecked\") ArrayList<CharacterRef>[] codelists = new ArrayList[]{baseByCode, fullByCode};\n        for (ArrayList<CharacterRef> codelist : codelists) {\n            for (int i = 0; i < codelist.size(); i++) {\n                codelist.get(i).codeIndex = i;\n            }\n        }\n\n        // now write them\n        persist(\"entities-full.properties\", full);\n        persist(\"entities-base.properties\", base);\n\n        System.out.println(\"Full size: \" + full.size() + \", base size: \" + base.size());\n    }",
        "begin_line": 25,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 26,col 9)-(line 26,col 82)",
            "(line 27,col 9)-(line 30,col 23)",
            "(line 32,col 9)-(line 32,col 31)",
            "(line 33,col 9)-(line 35,col 25)",
            "(line 39,col 9)-(line 39,col 57)",
            "(line 40,col 9)-(line 40,col 57)",
            "(line 42,col 9)-(line 52,col 9)",
            "(line 53,col 9)-(line 53,col 39)",
            "(line 54,col 9)-(line 54,col 39)",
            "(line 57,col 9)-(line 57,col 67)",
            "(line 58,col 9)-(line 58,col 67)",
            "(line 59,col 9)-(line 59,col 45)",
            "(line 60,col 9)-(line 60,col 45)",
            "(line 63,col 9)-(line 63,col 117)",
            "(line 64,col 9)-(line 68,col 9)",
            "(line 71,col 9)-(line 71,col 50)",
            "(line 72,col 9)-(line 72,col 50)",
            "(line 74,col 9)-(line 74,col 88)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.BuildEntities",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/BuildEntities.java",
        "signature": "org.jsoup.nodes.BuildEntities.persist(java.lang.String, java.util.ArrayList<org.jsoup.nodes.BuildEntities.CharacterRef>)",
        "snippet": "    private static void persist(String name, ArrayList<CharacterRef> refs) throws IOException {\n        String base = projectDir + \"/src/main/java/org/jsoup/nodes\";\n        File file = new File(base, name);\n        FileWriter writer = new FileWriter(file, false);\n        for (CharacterRef ref : refs) {\n            writer.append(ref.toString()).append(\"\\n\");\n        }\n        writer.close();\n    }",
        "begin_line": 77,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 68)",
            "(line 79,col 9)-(line 79,col 41)",
            "(line 80,col 9)-(line 80,col 56)",
            "(line 81,col 9)-(line 83,col 9)",
            "(line 84,col 9)-(line 84,col 23)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.BuildEntities",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/BuildEntities.java",
        "signature": "org.jsoup.nodes.BuildEntities.CharacterRef.toString()",
        "snippet": "        @Override\n        public String toString() {\n            return name\n                + \"=\"\n                + d(codepoints[0])\n                + (codepoints.length > 1 ? \",\" + d(codepoints[1]) : \"\")\n                + \";\" + d(codeIndex);\n        }",
        "begin_line": 93,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 95,col 13)-(line 99,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.BuildEntities",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/BuildEntities.java",
        "signature": "org.jsoup.nodes.BuildEntities.d(int)",
        "snippet": "    private static String d(int d) {\n        return Integer.toString(d, Entities.codepointRadix);\n    }",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.BuildEntities",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/BuildEntities.java",
        "signature": "org.jsoup.nodes.BuildEntities.ByName.compare(org.jsoup.nodes.BuildEntities.CharacterRef, org.jsoup.nodes.BuildEntities.CharacterRef)",
        "snippet": "        public int compare(CharacterRef o1, CharacterRef o2) {\n            return o1.name.compareTo(o2.name);\n        }",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 13)-(line 109,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.BuildEntities",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/BuildEntities.java",
        "signature": "org.jsoup.nodes.BuildEntities.ByCode.compare(org.jsoup.nodes.BuildEntities.CharacterRef, org.jsoup.nodes.BuildEntities.CharacterRef)",
        "snippet": "        public int compare(CharacterRef o1, CharacterRef o2) {\n            int[] c1 = o1.codepoints;\n            int[] c2 = o2.codepoints;\n            int first = c1[0] - c2[0];\n            if (first != 0)\n                return first;\n            if (c1.length == 1 && c2.length == 1) { // for the same code, use the shorter name\n                int len = o2.name.length() - o1.name.length();\n                if (len != 0)\n                    return len;\n                return o1.name.compareTo(o2.name);\n            }\n            if (c1.length == 2 && c2.length == 2)\n                return c1[1] - c2[1];\n            else\n                return c2.length - c1.length; // pushes multi down the list so hits on singles first (don't support multi lookup by codepoint yet)\n        }",
        "begin_line": 114,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 115,col 13)-(line 115,col 37)",
            "(line 116,col 13)-(line 116,col 37)",
            "(line 117,col 13)-(line 117,col 38)",
            "(line 118,col 13)-(line 119,col 29)",
            "(line 120,col 13)-(line 125,col 13)",
            "(line 126,col 13)-(line 129,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.html()",
        "snippet": "    @Test\n    public void html() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n\n        assertEquals(3, a.size());\n        assertTrue(a.hasKey(\"Tot\"));\n        assertTrue(a.hasKey(\"Hello\"));\n        assertTrue(a.hasKey(\"data-name\"));\n        assertFalse(a.hasKey(\"tot\"));\n        assertTrue(a.hasKeyIgnoreCase(\"tot\"));\n        assertEquals(\"There\", a.getIgnoreCase(\"hEllo\"));\n\n        Map<String, String> dataset = a.dataset();\n        assertEquals(1, dataset.size());\n        assertEquals(\"Jsoup\", dataset.get(\"name\"));\n        assertEquals(\"\", a.get(\"tot\"));\n        assertEquals(\"a&p\", a.get(\"Tot\"));\n        assertEquals(\"a&p\", a.getIgnoreCase(\"tot\"));\n\n        assertEquals(\" Tot=\\\"a&amp;p\\\" Hello=\\\"There\\\" data-name=\\\"Jsoup\\\"\", a.html());\n        assertEquals(a.html(), a.toString());\n    }",
        "begin_line": 19,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 21,col 9)-(line 21,col 40)",
            "(line 22,col 9)-(line 22,col 28)",
            "(line 23,col 9)-(line 23,col 32)",
            "(line 24,col 9)-(line 24,col 36)",
            "(line 26,col 9)-(line 26,col 34)",
            "(line 27,col 9)-(line 27,col 36)",
            "(line 28,col 9)-(line 28,col 38)",
            "(line 29,col 9)-(line 29,col 42)",
            "(line 30,col 9)-(line 30,col 37)",
            "(line 31,col 9)-(line 31,col 46)",
            "(line 32,col 9)-(line 32,col 56)",
            "(line 34,col 9)-(line 34,col 50)",
            "(line 35,col 9)-(line 35,col 40)",
            "(line 36,col 9)-(line 36,col 51)",
            "(line 37,col 9)-(line 37,col 39)",
            "(line 38,col 9)-(line 38,col 42)",
            "(line 39,col 9)-(line 39,col 52)",
            "(line 41,col 9)-(line 41,col 87)",
            "(line 42,col 9)-(line 42,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.testIteratorRemovable()",
        "snippet": "    @Test\n    public void testIteratorRemovable() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n        assertTrue(a.hasKey(\"Tot\"));\n\n        Iterator<Attribute> iterator = a.iterator();\n        Attribute attr = iterator.next();\n        assertEquals(\"Tot\", attr.getKey());\n        iterator.remove();\n        assertEquals(2, a.size());\n        attr = iterator.next();\n        assertEquals(\"Hello\", attr.getKey());\n        assertEquals(\"There\", attr.getValue());\n\n        // make sure that's flowing to the underlying attributes object\n        assertEquals(2, a.size());\n        assertEquals(\"There\", a.get(\"Hello\"));\n        assertFalse(a.hasKey(\"Tot\"));\n    }",
        "begin_line": 45,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 40)",
            "(line 48,col 9)-(line 48,col 28)",
            "(line 49,col 9)-(line 49,col 32)",
            "(line 50,col 9)-(line 50,col 36)",
            "(line 51,col 9)-(line 51,col 36)",
            "(line 53,col 9)-(line 53,col 52)",
            "(line 54,col 9)-(line 54,col 41)",
            "(line 55,col 9)-(line 55,col 43)",
            "(line 56,col 9)-(line 56,col 26)",
            "(line 57,col 9)-(line 57,col 34)",
            "(line 58,col 9)-(line 58,col 31)",
            "(line 59,col 9)-(line 59,col 45)",
            "(line 60,col 9)-(line 60,col 47)",
            "(line 63,col 9)-(line 63,col 34)",
            "(line 64,col 9)-(line 64,col 46)",
            "(line 65,col 9)-(line 65,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.testIteratorUpdateable()",
        "snippet": "    @Test\n    public void testIteratorUpdateable() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n\n        assertFalse(a.hasKey(\"Foo\"));\n        Iterator<Attribute> iterator = a.iterator();\n        Attribute attr = iterator.next();\n        attr.setKey(\"Foo\");\n        attr = iterator.next();\n        attr.setKey(\"Bar\");\n        attr.setValue(\"Qux\");\n\n        assertEquals(\"a&p\", a.get(\"Foo\"));\n        assertEquals(\"Qux\", a.get(\"Bar\"));\n        assertFalse(a.hasKey(\"Tot\"));\n        assertFalse(a.hasKey(\"Hello\"));\n    }",
        "begin_line": 68,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 40)",
            "(line 71,col 9)-(line 71,col 28)",
            "(line 72,col 9)-(line 72,col 32)",
            "(line 74,col 9)-(line 74,col 37)",
            "(line 75,col 9)-(line 75,col 52)",
            "(line 76,col 9)-(line 76,col 41)",
            "(line 77,col 9)-(line 77,col 27)",
            "(line 78,col 9)-(line 78,col 31)",
            "(line 79,col 9)-(line 79,col 27)",
            "(line 80,col 9)-(line 80,col 29)",
            "(line 82,col 9)-(line 82,col 42)",
            "(line 83,col 9)-(line 83,col 42)",
            "(line 84,col 9)-(line 84,col 37)",
            "(line 85,col 9)-(line 85,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.testIteratorHasNext()",
        "snippet": "    @Test public void testIteratorHasNext() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"1\");\n        a.put(\"Hello\", \"2\");\n        a.put(\"data-name\", \"3\");\n\n        int seen = 0;\n        for (Attribute attribute : a) {\n            seen++;\n            assertEquals(String.valueOf(seen), attribute.getValue());\n        }\n        assertEquals(3, seen);\n    }",
        "begin_line": 88,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 40)",
            "(line 90,col 9)-(line 90,col 26)",
            "(line 91,col 9)-(line 91,col 28)",
            "(line 92,col 9)-(line 92,col 32)",
            "(line 94,col 9)-(line 94,col 21)",
            "(line 95,col 9)-(line 98,col 9)",
            "(line 99,col 9)-(line 99,col 30)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.testIterator()",
        "snippet": "    @Test\n    public void testIterator() {\n        Attributes a = new Attributes();\n        String[][] datas = {{\"Tot\", \"raul\"},\n            {\"Hello\", \"pismuth\"},\n            {\"data-name\", \"Jsoup\"}};\n        for (String[] atts : datas) {\n            a.put(atts[0], atts[1]);\n        }\n\n        Iterator<Attribute> iterator = a.iterator();\n        assertTrue(iterator.hasNext());\n        int i = 0;\n        for (Attribute attribute : a) {\n            assertEquals(datas[i][0], attribute.getKey());\n            assertEquals(datas[i][1], attribute.getValue());\n            i++;\n        }\n        assertEquals(datas.length, i);\n    }",
        "begin_line": 102,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 107,col 36)",
            "(line 108,col 9)-(line 110,col 9)",
            "(line 112,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 39)",
            "(line 114,col 9)-(line 114,col 18)",
            "(line 115,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.testIteratorEmpty()",
        "snippet": "    @Test\n    public void testIteratorEmpty() {\n        Attributes a = new Attributes();\n\n        Iterator<Attribute> iterator = a.iterator();\n        assertFalse(iterator.hasNext());\n    }",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 40)",
            "(line 127,col 9)-(line 127,col 52)",
            "(line 128,col 9)-(line 128,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.removeCaseSensitive()",
        "snippet": "    @Test\n    public void removeCaseSensitive() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"tot\", \"one\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n\n        assertEquals(5, a.size());\n        a.remove(\"Tot\");\n        a.remove(\"Hello\");\n        assertEquals(3, a.size());\n        assertTrue(a.hasKey(\"tot\"));\n        assertFalse(a.hasKey(\"Tot\"));\n    }",
        "begin_line": 131,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 40)",
            "(line 134,col 9)-(line 134,col 28)",
            "(line 135,col 9)-(line 135,col 28)",
            "(line 136,col 9)-(line 136,col 32)",
            "(line 137,col 9)-(line 137,col 32)",
            "(line 138,col 9)-(line 138,col 36)",
            "(line 140,col 9)-(line 140,col 34)",
            "(line 141,col 9)-(line 141,col 24)",
            "(line 142,col 9)-(line 142,col 26)",
            "(line 143,col 9)-(line 143,col 34)",
            "(line 144,col 9)-(line 144,col 36)",
            "(line 145,col 9)-(line 145,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributesTest.java",
        "signature": "org.jsoup.nodes.AttributesTest.testSetKeyConsistency()",
        "snippet": "    @Test\n    public void testSetKeyConsistency() {\n        Attributes a = new Attributes();\n        a.put(\"a\", \"a\");\n        for(Attribute at : a) {\n            at.setKey(\"b\");\n        }\n        assertFalse(\"Attribute 'a' not correctly removed\", a.hasKey(\"a\"));\n        assertTrue(\"Attribute 'b' not present after renaming\", a.hasKey(\"b\"));\n    }",
        "begin_line": 148,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 40)",
            "(line 151,col 9)-(line 151,col 24)",
            "(line 152,col 9)-(line 154,col 9)",
            "(line 155,col 9)-(line 155,col 74)",
            "(line 156,col 9)-(line 156,col 78)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.constructorValidationOkWithBlankName()",
        "snippet": "    @Test\n    public void constructorValidationOkWithBlankName() {\n        DocumentType fail = new DocumentType(\"\",\"\", \"\");\n    }",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "child_ranges": [
            "(line 17,col 9)-(line 17,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.constructorValidationThrowsExceptionOnNulls()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void constructorValidationThrowsExceptionOnNulls() {\n        DocumentType fail = new DocumentType(\"html\", null, null);\n    }",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.constructorValidationOkWithBlankPublicAndSystemIds()",
        "snippet": "    @Test\n    public void constructorValidationOkWithBlankPublicAndSystemIds() {\n        DocumentType fail = new DocumentType(\"html\",\"\", \"\");\n    }",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.outerHtmlGeneration()",
        "snippet": "    @Test public void outerHtmlGeneration() {\n        DocumentType html5 = new DocumentType(\"html\", \"\", \"\");\n        assertEquals(\"<!doctype html>\", html5.outerHtml());\n\n        DocumentType publicDocType = new DocumentType(\"html\", \"-//IETF//DTD HTML//\", \"\");\n        assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//IETF//DTD HTML//\\\">\", publicDocType.outerHtml());\n\n        DocumentType systemDocType = new DocumentType(\"html\", \"\", \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\");\n        assertEquals(\"<!DOCTYPE html \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\", systemDocType.outerHtml());\n\n        DocumentType combo = new DocumentType(\"notHtml\", \"--public\", \"--system\");\n        assertEquals(\"<!DOCTYPE notHtml PUBLIC \\\"--public\\\" \\\"--system\\\">\", combo.outerHtml());\n    }",
        "begin_line": 30,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 62)",
            "(line 32,col 9)-(line 32,col 59)",
            "(line 34,col 9)-(line 34,col 89)",
            "(line 35,col 9)-(line 35,col 98)",
            "(line 37,col 9)-(line 37,col 128)",
            "(line 38,col 9)-(line 38,col 130)",
            "(line 40,col 9)-(line 40,col 81)",
            "(line 41,col 9)-(line 41,col 95)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.testRoundTrip()",
        "snippet": "    @Test public void testRoundTrip() {\n        String base = \"<!DOCTYPE html>\";\n        assertEquals(\"<!doctype html>\", htmlOutput(base));\n        assertEquals(base, xmlOutput(base));\n\n        String publicDoc = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n        assertEquals(publicDoc, htmlOutput(publicDoc));\n        assertEquals(publicDoc, xmlOutput(publicDoc));\n\n        String systemDoc = \"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\">\";\n        assertEquals(systemDoc, htmlOutput(systemDoc));\n        assertEquals(systemDoc, xmlOutput(systemDoc));\n\n        String legacyDoc = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\";\n        assertEquals(legacyDoc, htmlOutput(legacyDoc));\n        assertEquals(legacyDoc, xmlOutput(legacyDoc));\n    }",
        "begin_line": 44,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 40)",
            "(line 46,col 9)-(line 46,col 58)",
            "(line 47,col 9)-(line 47,col 44)",
            "(line 49,col 9)-(line 49,col 155)",
            "(line 50,col 9)-(line 50,col 55)",
            "(line 51,col 9)-(line 51,col 54)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 54,col 9)-(line 54,col 55)",
            "(line 55,col 9)-(line 55,col 54)",
            "(line 57,col 9)-(line 57,col 76)",
            "(line 58,col 9)-(line 58,col 55)",
            "(line 59,col 9)-(line 59,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.htmlOutput(java.lang.String)",
        "snippet": "    private String htmlOutput(String in) {\n        DocumentType type = (DocumentType) Jsoup.parse(in).childNode(0);\n        return type.outerHtml();\n    }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 72)",
            "(line 64,col 9)-(line 64,col 32)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTypeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java",
        "signature": "org.jsoup.nodes.DocumentTypeTest.xmlOutput(java.lang.String)",
        "snippet": "    private String xmlOutput(String in) {\n        return Jsoup.parse(in, \"\", Parser.xmlParser()).childNode(0).outerHtml();\n    }",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.hasAssociatedControls()",
        "snippet": "    @Test public void hasAssociatedControls() {\n        //\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\"\n        String html = \"<form id=1><button id=1><fieldset id=2 /><input id=3><keygen id=4><object id=5><output id=6>\" +\n                \"<select id=7><option></select><textarea id=8><p id=9>\";\n        Document doc = Jsoup.parse(html);\n\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        assertEquals(8, form.elements().size());\n    }",
        "begin_line": 17,
        "end_line": 25,
        "comment": "",
        "child_ranges": [
            "(line 19,col 9)-(line 20,col 72)",
            "(line 21,col 9)-(line 21,col 41)",
            "(line 23,col 9)-(line 23,col 68)",
            "(line 24,col 9)-(line 24,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.createsFormData()",
        "snippet": "    @Test public void createsFormData() {\n        String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n                \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n                \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n                \"<input name='ten' value='text' disabled>\" +\n                \"</form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n\n        assertEquals(6, data.size());\n        assertEquals(\"one=two\", data.get(0).toString());\n        assertEquals(\"three=four\", data.get(1).toString());\n        assertEquals(\"three=five\", data.get(2).toString());\n        assertEquals(\"six=seven\", data.get(3).toString());\n        assertEquals(\"seven=on\", data.get(4).toString()); // set\n        assertEquals(\"eight=on\", data.get(5).toString()); // default\n        // nine should not appear, not checked checkbox\n        // ten should not appear, disabled\n    }",
        "begin_line": 27,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 33,col 26)",
            "(line 34,col 9)-(line 34,col 41)",
            "(line 35,col 9)-(line 35,col 68)",
            "(line 36,col 9)-(line 36,col 55)",
            "(line 38,col 9)-(line 38,col 37)",
            "(line 39,col 9)-(line 39,col 56)",
            "(line 40,col 9)-(line 40,col 59)",
            "(line 41,col 9)-(line 41,col 59)",
            "(line 42,col 9)-(line 42,col 58)",
            "(line 43,col 9)-(line 43,col 57)",
            "(line 44,col 9)-(line 44,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.createsSubmitableConnection()",
        "snippet": "    @Test public void createsSubmitableConnection() {\n        String html = \"<form action='/search'><input name='q'></form>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/\");\n        doc.select(\"[name=q]\").attr(\"value\", \"jsoup\");\n\n        FormElement form = ((FormElement) doc.select(\"form\").first());\n        Connection con = form.submit();\n\n        assertEquals(Connection.Method.GET, con.request().method());\n        assertEquals(\"http://example.com/search\", con.request().url().toExternalForm());\n        List<Connection.KeyVal> dataList = (List<Connection.KeyVal>) con.request().data();\n        assertEquals(\"q=jsoup\", dataList.get(0).toString());\n\n        doc.select(\"form\").attr(\"method\", \"post\");\n        Connection con2 = form.submit();\n        assertEquals(Connection.Method.POST, con2.request().method());\n    }",
        "begin_line": 49,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 71)",
            "(line 51,col 9)-(line 51,col 64)",
            "(line 52,col 9)-(line 52,col 54)",
            "(line 54,col 9)-(line 54,col 70)",
            "(line 55,col 9)-(line 55,col 39)",
            "(line 57,col 9)-(line 57,col 68)",
            "(line 58,col 9)-(line 58,col 88)",
            "(line 59,col 9)-(line 59,col 90)",
            "(line 60,col 9)-(line 60,col 60)",
            "(line 62,col 9)-(line 62,col 50)",
            "(line 63,col 9)-(line 63,col 40)",
            "(line 64,col 9)-(line 64,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.actionWithNoValue()",
        "snippet": "    @Test public void actionWithNoValue() {\n        String html = \"<form><input name='q'></form>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/\");\n        FormElement form = ((FormElement) doc.select(\"form\").first());\n        Connection con = form.submit();\n\n        assertEquals(\"http://example.com/\", con.request().url().toExternalForm());\n    }",
        "begin_line": 67,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 54)",
            "(line 69,col 9)-(line 69,col 64)",
            "(line 70,col 9)-(line 70,col 70)",
            "(line 71,col 9)-(line 71,col 39)",
            "(line 73,col 9)-(line 73,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.actionWithNoBaseUri()",
        "snippet": "    @Test public void actionWithNoBaseUri() {\n        String html = \"<form><input name='q'></form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = ((FormElement) doc.select(\"form\").first());\n\n\n        boolean threw = false;\n        try {\n            Connection con = form.submit();\n        } catch (IllegalArgumentException e) {\n            threw = true;\n            assertEquals(\"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\",\n                    e.getMessage());\n        }\n        assertTrue(threw);\n    }",
        "begin_line": 76,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 54)",
            "(line 78,col 9)-(line 78,col 41)",
            "(line 79,col 9)-(line 79,col 70)",
            "(line 82,col 9)-(line 82,col 30)",
            "(line 83,col 9)-(line 89,col 9)",
            "(line 90,col 9)-(line 90,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.formsAddedAfterParseAreFormElements()",
        "snippet": "    @Test public void formsAddedAfterParseAreFormElements() {\n        Document doc = Jsoup.parse(\"<body />\");\n        doc.body().html(\"<form action='http://example.com/search'><input name='q' value='search'>\");\n        Element formEl = doc.select(\"form\").first();\n        assertTrue(formEl instanceof FormElement);\n\n        FormElement form = (FormElement) formEl;\n        assertEquals(1, form.elements().size());\n    }",
        "begin_line": 93,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 47)",
            "(line 95,col 9)-(line 95,col 100)",
            "(line 96,col 9)-(line 96,col 52)",
            "(line 97,col 9)-(line 97,col 50)",
            "(line 99,col 9)-(line 99,col 48)",
            "(line 100,col 9)-(line 100,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.controlsAddedAfterParseAreLinkedWithForms()",
        "snippet": "    @Test public void controlsAddedAfterParseAreLinkedWithForms() {\n        Document doc = Jsoup.parse(\"<body />\");\n        doc.body().html(\"<form />\");\n\n        Element formEl = doc.select(\"form\").first();\n        formEl.append(\"<input name=foo value=bar>\");\n\n        assertTrue(formEl instanceof FormElement);\n        FormElement form = (FormElement) formEl;\n        assertEquals(1, form.elements().size());\n\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(\"foo=bar\", data.get(0).toString());\n    }",
        "begin_line": 103,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 47)",
            "(line 105,col 9)-(line 105,col 36)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 52)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 48)",
            "(line 112,col 9)-(line 112,col 48)",
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 115,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.usesOnForCheckboxValueIfNoValueSet()",
        "snippet": "    @Test public void usesOnForCheckboxValueIfNoValueSet() {\n        Document doc = Jsoup.parse(\"<form><input type=checkbox checked name=foo></form>\");\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(\"on\", data.get(0).value());\n        assertEquals(\"foo\", data.get(0).key());\n    }",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 90)",
            "(line 120,col 9)-(line 120,col 68)",
            "(line 121,col 9)-(line 121,col 55)",
            "(line 122,col 9)-(line 122,col 48)",
            "(line 123,col 9)-(line 123,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.FormElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/FormElementTest.java",
        "signature": "org.jsoup.nodes.FormElementTest.adoptedFormsRetainInputs()",
        "snippet": "    @Test public void adoptedFormsRetainInputs() {\n        // test for https://github.com/jhy/jsoup/issues/249\n        String html = \"<html>\\n\" +\n                \"<body>  \\n\" +\n                \"  <table>\\n\" +\n                \"      <form action=\\\"/hello.php\\\" method=\\\"post\\\">\\n\" +\n                \"      <tr><td>User:</td><td> <input type=\\\"text\\\" name=\\\"user\\\" /></td></tr>\\n\" +\n                \"      <tr><td>Password:</td><td> <input type=\\\"password\\\" name=\\\"pass\\\" /></td></tr>\\n\" +\n                \"      <tr><td><input type=\\\"submit\\\" name=\\\"login\\\" value=\\\"login\\\" /></td></tr>\\n\" +\n                \"   </form>\\n\" +\n                \"  </table>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(3, data.size());\n        assertEquals(\"user\", data.get(0).key());\n        assertEquals(\"pass\", data.get(1).key());\n        assertEquals(\"login\", data.get(2).key());\n    }",
        "begin_line": 126,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 138,col 26)",
            "(line 139,col 9)-(line 139,col 41)",
            "(line 140,col 9)-(line 140,col 68)",
            "(line 141,col 9)-(line 141,col 55)",
            "(line 142,col 9)-(line 142,col 37)",
            "(line 143,col 9)-(line 143,col 48)",
            "(line 144,col 9)-(line 144,col 48)",
            "(line 145,col 9)-(line 145,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.getElementsByTagName()",
        "snippet": "    @Test public void getElementsByTagName() {\n        Document doc = Jsoup.parse(reference);\n        List<Element> divs = doc.getElementsByTag(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"div1\", divs.get(0).id());\n        assertEquals(\"div2\", divs.get(1).id());\n\n        List<Element> ps = doc.getElementsByTag(\"p\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText());\n        assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText());\n        List<Element> ps2 = doc.getElementsByTag(\"P\");\n        assertEquals(ps, ps2);\n\n        List<Element> imgs = doc.getElementsByTag(\"img\");\n        assertEquals(\"foo.png\", imgs.get(0).attr(\"src\"));\n\n        List<Element> empty = doc.getElementsByTag(\"wtf\");\n        assertEquals(0, empty.size());\n    }",
        "begin_line": 32,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 46)",
            "(line 34,col 9)-(line 34,col 57)",
            "(line 35,col 9)-(line 35,col 37)",
            "(line 36,col 9)-(line 36,col 47)",
            "(line 37,col 9)-(line 37,col 47)",
            "(line 39,col 9)-(line 39,col 53)",
            "(line 40,col 9)-(line 40,col 35)",
            "(line 41,col 9)-(line 41,col 82)",
            "(line 42,col 9)-(line 42,col 85)",
            "(line 43,col 9)-(line 43,col 54)",
            "(line 44,col 9)-(line 44,col 30)",
            "(line 46,col 9)-(line 46,col 57)",
            "(line 47,col 9)-(line 47,col 57)",
            "(line 49,col 9)-(line 49,col 58)",
            "(line 50,col 9)-(line 50,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.getNamespacedElementsByTag()",
        "snippet": "    @Test public void getNamespacedElementsByTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div>\");\n        Elements els = doc.getElementsByTag(\"abc:def\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.first().id());\n        assertEquals(\"abc:def\", els.first().tagName());\n    }",
        "begin_line": 53,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 79)",
            "(line 55,col 9)-(line 55,col 55)",
            "(line 56,col 9)-(line 56,col 36)",
            "(line 57,col 9)-(line 57,col 44)",
            "(line 58,col 9)-(line 58,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementById()",
        "snippet": "    @Test public void testGetElementById() {\n        Document doc = Jsoup.parse(reference);\n        Element div = doc.getElementById(\"div1\");\n        assertEquals(\"div1\", div.id());\n        assertNull(doc.getElementById(\"none\"));\n\n        Document doc2 = Jsoup.parse(\"<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>\");\n        Element div2 = doc2.getElementById(\"2\");\n        assertEquals(\"div\", div2.tagName()); // not the span\n        Element span = div2.child(0).getElementById(\"2\"); // called from <p> context should be span\n        assertEquals(\"span\", span.tagName());\n    }",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 46)",
            "(line 63,col 9)-(line 63,col 49)",
            "(line 64,col 9)-(line 64,col 39)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 67,col 9)-(line 67,col 109)",
            "(line 68,col 9)-(line 68,col 48)",
            "(line 69,col 9)-(line 69,col 44)",
            "(line 70,col 9)-(line 70,col 57)",
            "(line 71,col 9)-(line 71,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetText()",
        "snippet": "    @Test public void testGetText() {\n        Document doc = Jsoup.parse(reference);\n        assertEquals(\"Hello Another element\", doc.text());\n        assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n    }",
        "begin_line": 74,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 46)",
            "(line 76,col 9)-(line 76,col 58)",
            "(line 77,col 9)-(line 77,col 81)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetChildText()",
        "snippet": "    @Test public void testGetChildText() {\n        Document doc = Jsoup.parse(\"<p>Hello <b>there</b> now\");\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"Hello there now\", p.text());\n        assertEquals(\"Hello now\", p.ownText());\n    }",
        "begin_line": 80,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 64)",
            "(line 82,col 9)-(line 82,col 44)",
            "(line 83,col 9)-(line 83,col 50)",
            "(line 84,col 9)-(line 84,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNormalisesText()",
        "snippet": "    @Test public void testNormalisesText() {\n        String h = \"<p>Hello<p>There.</p> \\n <p>Here <b>is</b> \\n s<b>om</b>e text.\";\n        Document doc = Jsoup.parse(h);\n        String text = doc.text();\n        assertEquals(\"Hello There. Here is some text.\", text);\n    }",
        "begin_line": 87,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 85)",
            "(line 89,col 9)-(line 89,col 38)",
            "(line 90,col 9)-(line 90,col 33)",
            "(line 91,col 9)-(line 91,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testKeepsPreText()",
        "snippet": "    @Test public void testKeepsPreText() {\n        String h = \"<p>Hello \\n \\n there.</p> <div><pre>  What's \\n\\n  that?</pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there.   What's \\n\\n  that?\", doc.text());\n    }",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 84)",
            "(line 96,col 9)-(line 96,col 38)",
            "(line 97,col 9)-(line 97,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testKeepsPreTextInCode()",
        "snippet": "    @Test public void testKeepsPreTextInCode() {\n        String h = \"<pre><code>code\\n\\ncode</code></pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"<pre><code>code\\n\\ncode</code></pre>\", doc.body().html());\n    }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 58)",
            "(line 102,col 9)-(line 102,col 38)",
            "(line 103,col 9)-(line 103,col 49)",
            "(line 104,col 9)-(line 104,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testBrHasSpace()",
        "snippet": "    @Test public void testBrHasSpace() {\n        Document doc = Jsoup.parse(\"<p>Hello<br>there</p>\");\n        assertEquals(\"Hello there\", doc.text());\n        assertEquals(\"Hello there\", doc.select(\"p\").first().ownText());\n\n        doc = Jsoup.parse(\"<p>Hello <br> there</p>\");\n        assertEquals(\"Hello there\", doc.text());\n    }",
        "begin_line": 107,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 60)",
            "(line 109,col 9)-(line 109,col 48)",
            "(line 110,col 9)-(line 110,col 71)",
            "(line 112,col 9)-(line 112,col 53)",
            "(line 113,col 9)-(line 113,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetSiblings()",
        "snippet": "    @Test public void testGetSiblings() {\n        Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\");\n        Element p = doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }",
        "begin_line": 116,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 106)",
            "(line 118,col 9)-(line 118,col 44)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 65)",
            "(line 121,col 9)-(line 121,col 60)",
            "(line 122,col 9)-(line 122,col 62)",
            "(line 123,col 9)-(line 123,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetSiblingsWithDuplicateContent()",
        "snippet": "    @Test public void testGetSiblingsWithDuplicateContent() {\n        Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>\");\n        Element p = doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().nextElementSibling().text());\n        assertEquals(\"is\", p.nextElementSibling().nextElementSibling().nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }",
        "begin_line": 126,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 113)",
            "(line 128,col 9)-(line 128,col 44)",
            "(line 129,col 9)-(line 129,col 40)",
            "(line 130,col 9)-(line 130,col 65)",
            "(line 131,col 9)-(line 131,col 60)",
            "(line 132,col 9)-(line 132,col 81)",
            "(line 133,col 9)-(line 133,col 100)",
            "(line 134,col 9)-(line 134,col 62)",
            "(line 135,col 9)-(line 135,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetParents()",
        "snippet": "    @Test public void testGetParents() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <span>there</span></div>\");\n        Element span = doc.select(\"span\").first();\n        Elements parents = span.parents();\n\n        assertEquals(4, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n        assertEquals(\"body\", parents.get(2).tagName());\n        assertEquals(\"html\", parents.get(3).tagName());\n    }",
        "begin_line": 138,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 77)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 141,col 9)-(line 141,col 42)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 144,col 9)-(line 144,col 52)",
            "(line 145,col 9)-(line 145,col 54)",
            "(line 146,col 9)-(line 146,col 55)",
            "(line 147,col 9)-(line 147,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testElementSiblingIndex()",
        "snippet": "    @Test public void testElementSiblingIndex() {\n        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(0 == ps.get(0).elementSiblingIndex());\n        assertTrue(1 == ps.get(1).elementSiblingIndex());\n        assertTrue(2 == ps.get(2).elementSiblingIndex());\n    }",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 82)",
            "(line 152,col 9)-(line 152,col 38)",
            "(line 153,col 9)-(line 153,col 57)",
            "(line 154,col 9)-(line 154,col 57)",
            "(line 155,col 9)-(line 155,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testElementSiblingIndexSameContent()",
        "snippet": "    @Test public void testElementSiblingIndexSameContent() {\n        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>One</p>...<p>One</p>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(0 == ps.get(0).elementSiblingIndex());\n        assertTrue(1 == ps.get(1).elementSiblingIndex());\n        assertTrue(2 == ps.get(2).elementSiblingIndex());\n    }",
        "begin_line": 158,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 80)",
            "(line 160,col 9)-(line 160,col 38)",
            "(line 161,col 9)-(line 161,col 57)",
            "(line 162,col 9)-(line 162,col 57)",
            "(line 163,col 9)-(line 163,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithClass()",
        "snippet": "    @Test public void testGetElementsWithClass() {\n        Document doc = Jsoup.parse(\"<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>\");\n\n        List<Element> els = doc.getElementsByClass(\"mellow\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"span\", els.get(1).tagName());\n\n        List<Element> els2 = doc.getElementsByClass(\"yellow\");\n        assertEquals(2, els2.size());\n        assertEquals(\"div\", els2.get(0).tagName());\n        assertEquals(\"b\", els2.get(1).tagName());\n\n        List<Element> none = doc.getElementsByClass(\"solo\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 166,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 167,col 9)-(line 167,col 145)",
            "(line 169,col 9)-(line 169,col 61)",
            "(line 170,col 9)-(line 170,col 36)",
            "(line 171,col 9)-(line 171,col 50)",
            "(line 172,col 9)-(line 172,col 51)",
            "(line 174,col 9)-(line 174,col 62)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 51)",
            "(line 177,col 9)-(line 177,col 49)",
            "(line 179,col 9)-(line 179,col 60)",
            "(line 180,col 9)-(line 180,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttribute()",
        "snippet": "    @Test public void testGetElementsWithAttribute() {\n        Document doc = Jsoup.parse(\"<div style='bold'><p title=qux><p><b style></b></p></div>\");\n        List<Element> els = doc.getElementsByAttribute(\"style\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"b\", els.get(1).tagName());\n\n        List<Element> none = doc.getElementsByAttribute(\"class\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 183,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 96)",
            "(line 185,col 9)-(line 185,col 64)",
            "(line 186,col 9)-(line 186,col 36)",
            "(line 187,col 9)-(line 187,col 50)",
            "(line 188,col 9)-(line 188,col 48)",
            "(line 190,col 9)-(line 190,col 65)",
            "(line 191,col 9)-(line 191,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttributeDash()",
        "snippet": "    @Test public void testGetElementsWithAttributeDash() {\n        Document doc = Jsoup.parse(\"<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>\");\n        Elements meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n        assertEquals(1, meta.size());\n        assertEquals(\"1\", meta.first().id());\n    }",
        "begin_line": 194,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 164)",
            "(line 196,col 9)-(line 196,col 83)",
            "(line 197,col 9)-(line 197,col 37)",
            "(line 198,col 9)-(line 198,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetElementsWithAttributeValue()",
        "snippet": "    @Test public void testGetElementsWithAttributeValue() {\n        Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n        List<Element> els = doc.getElementsByAttributeValue(\"style\", \"bold\");\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n\n        List<Element> none = doc.getElementsByAttributeValue(\"style\", \"none\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 201,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 202,col 9)-(line 202,col 86)",
            "(line 203,col 9)-(line 203,col 77)",
            "(line 204,col 9)-(line 204,col 36)",
            "(line 205,col 9)-(line 205,col 50)",
            "(line 207,col 9)-(line 207,col 78)",
            "(line 208,col 9)-(line 208,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClassDomMethods()",
        "snippet": "    @Test public void testClassDomMethods() {\n        Document doc = Jsoup.parse(\"<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>\");\n        List<Element> els = doc.getElementsByAttribute(\"class\");\n        Element span = els.get(0);\n        assertEquals(\"mellow yellow\", span.className());\n        assertTrue(span.hasClass(\"mellow\"));\n        assertTrue(span.hasClass(\"yellow\"));\n        Set<String> classes = span.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"mellow\"));\n        assertTrue(classes.contains(\"yellow\"));\n\n        assertEquals(\"\", doc.className());\n        classes = doc.classNames();\n        assertEquals(0, classes.size());\n        assertFalse(doc.hasClass(\"mellow\"));\n    }",
        "begin_line": 211,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 106)",
            "(line 213,col 9)-(line 213,col 64)",
            "(line 214,col 9)-(line 214,col 34)",
            "(line 215,col 9)-(line 215,col 56)",
            "(line 216,col 9)-(line 216,col 44)",
            "(line 217,col 9)-(line 217,col 44)",
            "(line 218,col 9)-(line 218,col 48)",
            "(line 219,col 9)-(line 219,col 40)",
            "(line 220,col 9)-(line 220,col 47)",
            "(line 221,col 9)-(line 221,col 47)",
            "(line 223,col 9)-(line 223,col 42)",
            "(line 224,col 9)-(line 224,col 35)",
            "(line 225,col 9)-(line 225,col 40)",
            "(line 226,col 9)-(line 226,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testHasClassDomMethods()",
        "snippet": "    @Test public void testHasClassDomMethods() {\n        Tag tag = Tag.valueOf(\"a\");\n        Attributes attribs = new Attributes();\n        Element el = new Element(tag, \"\", attribs);\n        \n        attribs.put(\"class\", \"toto\");\n        boolean hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" toto\");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"toto \");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"\\ttoto \");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"  toto \");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \"ab\");\n        hasClass = el.hasClass(\"toto\");\n        assertFalse(hasClass);\n        \n        attribs.put(\"class\", \"     \");\n        hasClass = el.hasClass(\"toto\");\n        assertFalse(hasClass);\n        \n        attribs.put(\"class\", \"tototo\");\n        hasClass = el.hasClass(\"toto\");\n        assertFalse(hasClass);\n        \n        attribs.put(\"class\", \"raulpismuth  \");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" abcd  raulpismuth efgh \");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" abcd efgh raulpismuth\");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n        \n        attribs.put(\"class\", \" abcd efgh raulpismuth \");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n    }",
        "begin_line": 229,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 35)",
            "(line 231,col 9)-(line 231,col 46)",
            "(line 232,col 9)-(line 232,col 51)",
            "(line 234,col 9)-(line 234,col 37)",
            "(line 235,col 9)-(line 235,col 47)",
            "(line 236,col 9)-(line 236,col 29)",
            "(line 238,col 9)-(line 238,col 38)",
            "(line 239,col 9)-(line 239,col 39)",
            "(line 240,col 9)-(line 240,col 29)",
            "(line 242,col 9)-(line 242,col 38)",
            "(line 243,col 9)-(line 243,col 39)",
            "(line 244,col 9)-(line 244,col 29)",
            "(line 246,col 9)-(line 246,col 40)",
            "(line 247,col 9)-(line 247,col 39)",
            "(line 248,col 9)-(line 248,col 29)",
            "(line 250,col 9)-(line 250,col 40)",
            "(line 251,col 9)-(line 251,col 39)",
            "(line 252,col 9)-(line 252,col 29)",
            "(line 254,col 9)-(line 254,col 35)",
            "(line 255,col 9)-(line 255,col 39)",
            "(line 256,col 9)-(line 256,col 30)",
            "(line 258,col 9)-(line 258,col 38)",
            "(line 259,col 9)-(line 259,col 39)",
            "(line 260,col 9)-(line 260,col 30)",
            "(line 262,col 9)-(line 262,col 39)",
            "(line 263,col 9)-(line 263,col 39)",
            "(line 264,col 9)-(line 264,col 30)",
            "(line 266,col 9)-(line 266,col 46)",
            "(line 267,col 9)-(line 267,col 46)",
            "(line 268,col 9)-(line 268,col 29)",
            "(line 270,col 9)-(line 270,col 57)",
            "(line 271,col 9)-(line 271,col 46)",
            "(line 272,col 9)-(line 272,col 29)",
            "(line 274,col 9)-(line 274,col 55)",
            "(line 275,col 9)-(line 275,col 46)",
            "(line 276,col 9)-(line 276,col 29)",
            "(line 278,col 9)-(line 278,col 56)",
            "(line 279,col 9)-(line 279,col 46)",
            "(line 280,col 9)-(line 280,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClassUpdates()",
        "snippet": "    @Test public void testClassUpdates() {\n        Document doc = Jsoup.parse(\"<div class='mellow yellow'></div>\");\n        Element div = doc.select(\"div\").first();\n\n        div.addClass(\"green\");\n        assertEquals(\"mellow yellow green\", div.className());\n        div.removeClass(\"red\"); // noop\n        div.removeClass(\"yellow\");\n        assertEquals(\"mellow green\", div.className());\n        div.toggleClass(\"green\").toggleClass(\"red\");\n        assertEquals(\"mellow red\", div.className());\n    }",
        "begin_line": 284,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 72)",
            "(line 286,col 9)-(line 286,col 48)",
            "(line 288,col 9)-(line 288,col 30)",
            "(line 289,col 9)-(line 289,col 61)",
            "(line 290,col 9)-(line 290,col 31)",
            "(line 291,col 9)-(line 291,col 34)",
            "(line 292,col 9)-(line 292,col 54)",
            "(line 293,col 9)-(line 293,col 52)",
            "(line 294,col 9)-(line 294,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testOuterHtml()",
        "snippet": "    @Test public void testOuterHtml() {\n        Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n                TextUtil.stripNewlines(doc.outerHtml()));\n    }",
        "begin_line": 297,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 114)",
            "(line 299,col 9)-(line 300,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testInnerHtml()",
        "snippet": "    @Test public void testInnerHtml() {\n        Document doc = Jsoup.parse(\"<div>\\n <p>Hello</p> </div>\");\n        assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html());\n    }",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 304,col 9)-(line 304,col 66)",
            "(line 305,col 9)-(line 305,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testFormatHtml()",
        "snippet": "    @Test public void testFormatHtml() {\n        Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n        assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>Hello <span>jsoup <span>users</span></span></p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n    }",
        "begin_line": 308,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 138)",
            "(line 310,col 9)-(line 310,col 211)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testFormatOutline()",
        "snippet": "    @Test public void testFormatOutline() {\n        Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n        doc.outputSettings().outline(true);\n        assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>\\n    Hello \\n    <span>\\n     jsoup \\n     <span>users</span>\\n    </span>\\n   </p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n    }",
        "begin_line": 313,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 138)",
            "(line 315,col 9)-(line 315,col 43)",
            "(line 316,col 9)-(line 316,col 248)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetIndent()",
        "snippet": "    @Test public void testSetIndent() {\n        Document doc = Jsoup.parse(\"<div><p>Hello\\nthere</p></div>\");\n        doc.outputSettings().indentAmount(0);\n        assertEquals(\"<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>\", doc.html());\n    }",
        "begin_line": 319,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 69)",
            "(line 321,col 9)-(line 321,col 45)",
            "(line 322,col 9)-(line 322,col 119)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNotPretty()",
        "snippet": "    @Test public void testNotPretty() {\n        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there\\n</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there\\n</p></div></body></html>\", doc.html());\n\n        Element div = doc.select(\"div\").first();\n        assertEquals(\"   \\n<p>Hello\\n there\\n</p>\", div.html());\n    }",
        "begin_line": 325,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 77)",
            "(line 327,col 9)-(line 327,col 48)",
            "(line 328,col 9)-(line 328,col 114)",
            "(line 330,col 9)-(line 330,col 48)",
            "(line 331,col 9)-(line 331,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testEmptyElementFormatHtml()",
        "snippet": "    @Test public void testEmptyElementFormatHtml() {\n        // don't put newlines into empty blocks\n        Document doc = Jsoup.parse(\"<section><div></div></section>\");\n        assertEquals(\"<section>\\n <div></div>\\n</section>\", doc.select(\"section\").first().outerHtml());\n    }",
        "begin_line": 334,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 69)",
            "(line 337,col 9)-(line 337,col 103)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNoIndentOnScriptAndStyle()",
        "snippet": "    @Test public void testNoIndentOnScriptAndStyle() {\n        // don't newline+indent closing </script> and </style> tags\n        Document doc = Jsoup.parse(\"<script>one\\ntwo</script>\\n<style>three\\nfour</style>\");\n        assertEquals(\"<script>one\\ntwo</script> \\n<style>three\\nfour</style>\", doc.head().html());\n    }",
        "begin_line": 340,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 92)",
            "(line 343,col 9)-(line 343,col 98)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testContainerOutput()",
        "snippet": "    @Test public void testContainerOutput() {\n        Document doc = Jsoup.parse(\"<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>\");\n        assertEquals(\"<title>Hello there</title>\", doc.select(\"title\").first().outerHtml());\n        assertEquals(\"<div>\\n <p>Hello</p>\\n <p>there</p>\\n</div>\", doc.select(\"div\").first().outerHtml());\n        assertEquals(\"<div>\\n <p>Hello</p>\\n <p>there</p>\\n</div> \\n<div>\\n Another\\n</div>\", doc.select(\"body\").first().html());\n    }",
        "begin_line": 346,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 120)",
            "(line 348,col 9)-(line 348,col 92)",
            "(line 349,col 9)-(line 349,col 107)",
            "(line 350,col 9)-(line 350,col 129)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetText()",
        "snippet": "    @Test public void testSetText() {\n        String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there now\", doc.text()); // need to sort out node whitespace\n        assertEquals(\"there now\", doc.select(\"p\").get(0).text());\n\n        Element div = doc.getElementById(\"1\").text(\"Gone\");\n        assertEquals(\"Gone\", div.text());\n        assertEquals(0, doc.select(\"p\").size());\n    }",
        "begin_line": 353,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 67)",
            "(line 355,col 9)-(line 355,col 38)",
            "(line 356,col 9)-(line 356,col 52)",
            "(line 357,col 9)-(line 357,col 65)",
            "(line 359,col 9)-(line 359,col 59)",
            "(line 360,col 9)-(line 360,col 41)",
            "(line 361,col 9)-(line 361,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddNewElement()",
        "snippet": "    @Test public void testAddNewElement() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendElement(\"p\").text(\"there\");\n        div.appendElement(\"P\").attr(\"CLASS\", \"second\").text(\"now\");\n        // manually specifying tag and attributes should now preserve case, regardless of parse mode\n        assertEquals(\"<html><head></head><body><div id=\\\"1\\\"><p>Hello</p><p>there</p><P CLASS=\\\"second\\\">now</P></div></body></html>\",\n                TextUtil.stripNewlines(doc.html()));\n\n        // check sibling index (with short circuit on reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 364,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 67)",
            "(line 366,col 9)-(line 366,col 46)",
            "(line 367,col 9)-(line 367,col 45)",
            "(line 368,col 9)-(line 368,col 67)",
            "(line 370,col 9)-(line 371,col 52)",
            "(line 374,col 9)-(line 374,col 38)",
            "(line 375,col 9)-(line 377,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddBooleanAttribute()",
        "snippet": "    @Test public void testAddBooleanAttribute() {\n        Element div = new Element(Tag.valueOf(\"div\"), \"\");\n        \n        div.attr(\"true\", true);\n        \n        div.attr(\"false\", \"value\");\n        div.attr(\"false\", false);\n        \n        assertTrue(div.hasAttr(\"true\"));\n        assertEquals(\"\", div.attr(\"true\"));\n        \n        List<Attribute> attributes = div.attributes().asList();\n        assertEquals(\"There should be one attribute\", 1, attributes.size());\n\t\tassertTrue(\"Attribute should be boolean\", attributes.get(0) instanceof BooleanAttribute);\n        \n        assertFalse(div.hasAttr(\"false\"));\n \n        assertEquals(\"<div true></div>\", div.outerHtml());\n    }    ",
        "begin_line": 380,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 381,col 9)-(line 381,col 58)",
            "(line 383,col 9)-(line 383,col 31)",
            "(line 385,col 9)-(line 385,col 35)",
            "(line 386,col 9)-(line 386,col 33)",
            "(line 388,col 9)-(line 388,col 40)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 391,col 9)-(line 391,col 63)",
            "(line 392,col 9)-(line 392,col 76)",
            "(line 393,col 3)-(line 393,col 91)",
            "(line 395,col 9)-(line 395,col 42)",
            "(line 397,col 9)-(line 397,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAppendRowToTable()",
        "snippet": "    @Test public void testAppendRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"tbody\").first();\n        table.append(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 400,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 73)",
            "(line 402,col 9)-(line 402,col 52)",
            "(line 403,col 9)-(line 403,col 44)",
            "(line 405,col 9)-(line 405,col 136)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependRowToTable()",
        "snippet": "        @Test public void testPrependRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"tbody\").first();\n        table.prepend(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps = doc.select(\"tr\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 408,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 73)",
            "(line 410,col 9)-(line 410,col 52)",
            "(line 411,col 9)-(line 411,col 45)",
            "(line 413,col 9)-(line 413,col 136)",
            "(line 416,col 9)-(line 416,col 39)",
            "(line 417,col 9)-(line 419,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependElement()",
        "snippet": "    @Test public void testPrependElement() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependElement(\"p\").text(\"Before\");\n        assertEquals(\"Before\", div.child(0).text());\n        assertEquals(\"Hello\", div.child(1).text());\n    }",
        "begin_line": 422,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 67)",
            "(line 424,col 9)-(line 424,col 46)",
            "(line 425,col 9)-(line 425,col 47)",
            "(line 426,col 9)-(line 426,col 52)",
            "(line 427,col 9)-(line 427,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddNewText()",
        "snippet": "    @Test public void testAddNewText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendText(\" there & now >\");\n        assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html()));\n    }",
        "begin_line": 430,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 67)",
            "(line 432,col 9)-(line 432,col 46)",
            "(line 433,col 9)-(line 433,col 41)",
            "(line 434,col 9)-(line 434,col 94)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependText()",
        "snippet": "    @Test public void testPrependText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependText(\"there & now > \");\n        assertEquals(\"there & now > Hello\", div.text());\n        assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n    }",
        "begin_line": 437,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 67)",
            "(line 439,col 9)-(line 439,col 46)",
            "(line 440,col 9)-(line 440,col 42)",
            "(line 441,col 9)-(line 441,col 56)",
            "(line 442,col 9)-(line 442,col 94)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testThrowsOnAddNullText()",
        "snippet": "    @Test(expected = IllegalArgumentException.class) public void testThrowsOnAddNullText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendText(null);\n    }",
        "begin_line": 445,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 446,col 9)-(line 446,col 67)",
            "(line 447,col 9)-(line 447,col 46)",
            "(line 448,col 9)-(line 448,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testThrowsOnPrependNullText()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)  public void testThrowsOnPrependNullText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependText(null);\n    }",
        "begin_line": 451,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 452,col 9)-(line 452,col 67)",
            "(line 453,col 9)-(line 453,col 46)",
            "(line 454,col 9)-(line 454,col 30)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAddNewHtml()",
        "snippet": "    @Test public void testAddNewHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.append(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>Hello</p><p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (no reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 457,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 67)",
            "(line 459,col 9)-(line 459,col 46)",
            "(line 460,col 9)-(line 460,col 45)",
            "(line 461,col 9)-(line 461,col 95)",
            "(line 464,col 9)-(line 464,col 38)",
            "(line 465,col 9)-(line 467,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testPrependNewHtml()",
        "snippet": "    @Test public void testPrependNewHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prepend(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>there</p><p>now</p><p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }",
        "begin_line": 470,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 67)",
            "(line 472,col 9)-(line 472,col 46)",
            "(line 473,col 9)-(line 473,col 46)",
            "(line 474,col 9)-(line 474,col 95)",
            "(line 477,col 9)-(line 477,col 38)",
            "(line 478,col 9)-(line 480,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetHtml()",
        "snippet": "    @Test public void testSetHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.html(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n    }",
        "begin_line": 483,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 67)",
            "(line 485,col 9)-(line 485,col 46)",
            "(line 486,col 9)-(line 486,col 43)",
            "(line 487,col 9)-(line 487,col 83)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testSetHtmlTitle()",
        "snippet": "    @Test public void testSetHtmlTitle() {\n        Document doc = Jsoup.parse(\"<html><head id=2><title id=1></title></head></html>\");\n\n        Element title = doc.getElementById(\"1\");\n        title.html(\"good\");\n        assertEquals(\"good\", title.html());\n        title.html(\"<i>bad</i>\");\n        assertEquals(\"&lt;i&gt;bad&lt;/i&gt;\", title.html());\n\n        Element head = doc.getElementById(\"2\");\n        head.html(\"<title><i>bad</i></title>\");\n        assertEquals(\"<title>&lt;i&gt;bad&lt;/i&gt;</title>\", head.html());\n    }",
        "begin_line": 490,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 491,col 9)-(line 491,col 90)",
            "(line 493,col 9)-(line 493,col 48)",
            "(line 494,col 9)-(line 494,col 27)",
            "(line 495,col 9)-(line 495,col 43)",
            "(line 496,col 9)-(line 496,col 33)",
            "(line 497,col 9)-(line 497,col 61)",
            "(line 499,col 9)-(line 499,col 47)",
            "(line 500,col 9)-(line 500,col 47)",
            "(line 501,col 9)-(line 501,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testWrap()",
        "snippet": "    @Test public void testWrap() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p = doc.select(\"p\").first();\n        p.wrap(\"<div class='head'></div>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        Element ret = p.wrap(\"<div><div class=foo></div><p>What?</p></div>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><div><div class=\\\"foo\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\",\n                TextUtil.stripNewlines(doc.body().html()));\n\n        assertEquals(ret, p);\n    }",
        "begin_line": 504,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 74)",
            "(line 506,col 9)-(line 506,col 44)",
            "(line 507,col 9)-(line 507,col 43)",
            "(line 508,col 9)-(line 508,col 129)",
            "(line 510,col 9)-(line 510,col 77)",
            "(line 511,col 9)-(line 512,col 59)",
            "(line 514,col 9)-(line 514,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.before()",
        "snippet": "    @Test public void before() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.before(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().before(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 517,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 518,col 9)-(line 518,col 74)",
            "(line 519,col 9)-(line 519,col 45)",
            "(line 520,col 9)-(line 520,col 50)",
            "(line 521,col 9)-(line 521,col 131)",
            "(line 523,col 9)-(line 523,col 67)",
            "(line 524,col 9)-(line 524,col 156)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.after()",
        "snippet": "    @Test public void after() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.after(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().after(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 527,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 528,col 74)",
            "(line 529,col 9)-(line 529,col 45)",
            "(line 530,col 9)-(line 530,col 49)",
            "(line 531,col 9)-(line 531,col 131)",
            "(line 533,col 9)-(line 533,col 66)",
            "(line 534,col 9)-(line 534,col 156)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testWrapWithRemainder()",
        "snippet": "    @Test public void testWrapWithRemainder() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n        Element p = doc.select(\"p\").first();\n        p.wrap(\"<div class='head'></div><p>There!</p>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p><p>There!</p></div></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 537,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 538,col 9)-(line 538,col 62)",
            "(line 539,col 9)-(line 539,col 44)",
            "(line 540,col 9)-(line 540,col 56)",
            "(line 541,col 9)-(line 541,col 130)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testHasText()",
        "snippet": "    @Test public void testHasText() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\");\n        Element div = doc.select(\"div\").first();\n        Elements ps = doc.select(\"p\");\n\n        assertTrue(div.hasText());\n        assertTrue(ps.first().hasText());\n        assertFalse(ps.last().hasText());\n    }",
        "begin_line": 544,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 69)",
            "(line 546,col 9)-(line 546,col 48)",
            "(line 547,col 9)-(line 547,col 38)",
            "(line 549,col 9)-(line 549,col 34)",
            "(line 550,col 9)-(line 550,col 41)",
            "(line 551,col 9)-(line 551,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.dataset()",
        "snippet": "    @Test public void dataset() {\n        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>\");\n        Element div = doc.select(\"div\").first();\n        Map<String, String> dataset = div.dataset();\n        Attributes attributes = div.attributes();\n\n        // size, get, set, add, remove\n        assertEquals(2, dataset.size());\n        assertEquals(\"jsoup\", dataset.get(\"name\"));\n        assertEquals(\"jar\", dataset.get(\"package\"));\n\n        dataset.put(\"name\", \"jsoup updated\");\n        dataset.put(\"language\", \"java\");\n        dataset.remove(\"package\");\n\n        assertEquals(2, dataset.size());\n        assertEquals(4, attributes.size());\n        assertEquals(\"jsoup updated\", attributes.get(\"data-name\"));\n        assertEquals(\"jsoup updated\", dataset.get(\"name\"));\n        assertEquals(\"java\", attributes.get(\"data-language\"));\n        assertEquals(\"java\", dataset.get(\"language\"));\n\n        attributes.put(\"data-food\", \"bacon\");\n        assertEquals(3, dataset.size());\n        assertEquals(\"bacon\", dataset.get(\"food\"));\n\n        attributes.put(\"data-\", \"empty\");\n        assertEquals(null, dataset.get(\"\")); // data- is not a data attribute\n\n        Element p = doc.select(\"p\").first();\n        assertEquals(0, p.dataset().size());\n\n    }",
        "begin_line": 554,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 120)",
            "(line 556,col 9)-(line 556,col 48)",
            "(line 557,col 9)-(line 557,col 52)",
            "(line 558,col 9)-(line 558,col 49)",
            "(line 561,col 9)-(line 561,col 40)",
            "(line 562,col 9)-(line 562,col 51)",
            "(line 563,col 9)-(line 563,col 52)",
            "(line 565,col 9)-(line 565,col 45)",
            "(line 566,col 9)-(line 566,col 40)",
            "(line 567,col 9)-(line 567,col 34)",
            "(line 569,col 9)-(line 569,col 40)",
            "(line 570,col 9)-(line 570,col 43)",
            "(line 571,col 9)-(line 571,col 67)",
            "(line 572,col 9)-(line 572,col 59)",
            "(line 573,col 9)-(line 573,col 62)",
            "(line 574,col 9)-(line 574,col 54)",
            "(line 576,col 9)-(line 576,col 45)",
            "(line 577,col 9)-(line 577,col 40)",
            "(line 578,col 9)-(line 578,col 51)",
            "(line 580,col 9)-(line 580,col 41)",
            "(line 581,col 9)-(line 581,col 44)",
            "(line 583,col 9)-(line 583,col 44)",
            "(line 584,col 9)-(line 584,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.parentlessToString()",
        "snippet": "    @Test public void parentlessToString() {\n        Document doc = Jsoup.parse(\"<img src='foo'>\");\n        Element img = doc.select(\"img\").first();\n        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n\n        img.remove(); // lost its parent\n        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n    }",
        "begin_line": 588,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 54)",
            "(line 590,col 9)-(line 590,col 48)",
            "(line 591,col 9)-(line 591,col 58)",
            "(line 593,col 9)-(line 593,col 21)",
            "(line 594,col 9)-(line 594,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClone()",
        "snippet": "    @Test public void testClone() {\n        Document doc = Jsoup.parse(\"<div><p>One<p><span>Two</div>\");\n\n        Element p = doc.select(\"p\").get(1);\n        Element clone = p.clone();\n\n        assertNull(clone.parent()); // should be orphaned\n        assertEquals(0, clone.siblingIndex);\n        assertEquals(1, p.siblingIndex);\n        assertNotNull(p.parent());\n\n        clone.append(\"<span>Three\");\n        assertEquals(\"<p><span>Two</span><span>Three</span></p>\", TextUtil.stripNewlines(clone.outerHtml()));\n        assertEquals(\"<div><p>One</p><p><span>Two</span></p></div>\", TextUtil.stripNewlines(doc.body().html())); // not modified\n\n        doc.body().appendChild(clone); // adopt\n        assertNotNull(clone.parent());\n        assertEquals(\"<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 597,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 598,col 9)-(line 598,col 68)",
            "(line 600,col 9)-(line 600,col 43)",
            "(line 601,col 9)-(line 601,col 34)",
            "(line 603,col 9)-(line 603,col 35)",
            "(line 604,col 9)-(line 604,col 44)",
            "(line 605,col 9)-(line 605,col 40)",
            "(line 606,col 9)-(line 606,col 34)",
            "(line 608,col 9)-(line 608,col 36)",
            "(line 609,col 9)-(line 609,col 109)",
            "(line 610,col 9)-(line 610,col 112)",
            "(line 612,col 9)-(line 612,col 38)",
            "(line 613,col 9)-(line 613,col 38)",
            "(line 614,col 9)-(line 614,col 153)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClonesClassnames()",
        "snippet": "    @Test public void testClonesClassnames() {\n        Document doc = Jsoup.parse(\"<div class='one two'></div>\");\n        Element div = doc.select(\"div\").first();\n        Set<String> classes = div.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"one\"));\n        assertTrue(classes.contains(\"two\"));\n\n        Element copy = div.clone();\n        Set<String> copyClasses = copy.classNames();\n        assertEquals(2, copyClasses.size());\n        assertTrue(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"two\"));\n        copyClasses.add(\"three\");\n        copyClasses.remove(\"one\");\n\n        assertTrue(classes.contains(\"one\"));\n        assertFalse(classes.contains(\"three\"));\n        assertFalse(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"three\"));\n\n        assertEquals(\"\", div.html());\n        assertEquals(\"\", copy.html());\n    }",
        "begin_line": 617,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 618,col 9)-(line 618,col 66)",
            "(line 619,col 9)-(line 619,col 48)",
            "(line 620,col 9)-(line 620,col 47)",
            "(line 621,col 9)-(line 621,col 40)",
            "(line 622,col 9)-(line 622,col 44)",
            "(line 623,col 9)-(line 623,col 44)",
            "(line 625,col 9)-(line 625,col 35)",
            "(line 626,col 9)-(line 626,col 52)",
            "(line 627,col 9)-(line 627,col 44)",
            "(line 628,col 9)-(line 628,col 48)",
            "(line 629,col 9)-(line 629,col 48)",
            "(line 630,col 9)-(line 630,col 33)",
            "(line 631,col 9)-(line 631,col 34)",
            "(line 633,col 9)-(line 633,col 44)",
            "(line 634,col 9)-(line 634,col 47)",
            "(line 635,col 9)-(line 635,col 49)",
            "(line 636,col 9)-(line 636,col 50)",
            "(line 638,col 9)-(line 638,col 37)",
            "(line 639,col 9)-(line 639,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testTagNameSet()",
        "snippet": "    @Test public void testTagNameSet() {\n        Document doc = Jsoup.parse(\"<div><i>Hello</i>\");\n        doc.select(\"i\").first().tagName(\"em\");\n        assertEquals(0, doc.select(\"i\").size());\n        assertEquals(1, doc.select(\"em\").size());\n        assertEquals(\"<em>Hello</em>\", doc.select(\"div\").first().html());\n    }",
        "begin_line": 642,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 643,col 9)-(line 643,col 56)",
            "(line 644,col 9)-(line 644,col 46)",
            "(line 645,col 9)-(line 645,col 48)",
            "(line 646,col 9)-(line 646,col 49)",
            "(line 647,col 9)-(line 647,col 73)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testHtmlContainsOuter()",
        "snippet": "    @Test public void testHtmlContainsOuter() {\n        Document doc = Jsoup.parse(\"<title>Check</title> <div>Hello there</div>\");\n        doc.outputSettings().indentAmount(0);\n        assertTrue(doc.html().contains(doc.select(\"title\").outerHtml()));\n        assertTrue(doc.html().contains(doc.select(\"div\").outerHtml()));\n    }",
        "begin_line": 650,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 651,col 9)-(line 651,col 82)",
            "(line 652,col 9)-(line 652,col 45)",
            "(line 653,col 9)-(line 653,col 73)",
            "(line 654,col 9)-(line 654,col 71)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetTextNodes()",
        "snippet": "    @Test public void testGetTextNodes() {\n        Document doc = Jsoup.parse(\"<p>One <span>Two</span> Three <br> Four</p>\");\n        List<TextNode> textNodes = doc.select(\"p\").first().textNodes();\n\n        assertEquals(3, textNodes.size());\n        assertEquals(\"One \", textNodes.get(0).text());\n        assertEquals(\" Three \", textNodes.get(1).text());\n        assertEquals(\" Four\", textNodes.get(2).text());\n\n        assertEquals(0, doc.select(\"br\").first().textNodes().size());\n    }",
        "begin_line": 657,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 658,col 9)-(line 658,col 82)",
            "(line 659,col 9)-(line 659,col 71)",
            "(line 661,col 9)-(line 661,col 42)",
            "(line 662,col 9)-(line 662,col 54)",
            "(line 663,col 9)-(line 663,col 57)",
            "(line 664,col 9)-(line 664,col 55)",
            "(line 666,col 9)-(line 666,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testManipulateTextNodes()",
        "snippet": "    @Test public void testManipulateTextNodes() {\n        Document doc = Jsoup.parse(\"<p>One <span>Two</span> Three <br> Four</p>\");\n        Element p = doc.select(\"p\").first();\n        List<TextNode> textNodes = p.textNodes();\n\n        textNodes.get(1).text(\" three-more \");\n        textNodes.get(2).splitText(3).text(\"-ur\");\n\n        assertEquals(\"One Two three-more Fo-ur\", p.text());\n        assertEquals(\"One three-more Fo-ur\", p.ownText());\n        assertEquals(4, p.textNodes().size()); // grew because of split\n    }",
        "begin_line": 669,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 670,col 9)-(line 670,col 82)",
            "(line 671,col 9)-(line 671,col 44)",
            "(line 672,col 9)-(line 672,col 49)",
            "(line 674,col 9)-(line 674,col 46)",
            "(line 675,col 9)-(line 675,col 50)",
            "(line 677,col 9)-(line 677,col 59)",
            "(line 678,col 9)-(line 678,col 58)",
            "(line 679,col 9)-(line 679,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testGetDataNodes()",
        "snippet": "    @Test public void testGetDataNodes() {\n        Document doc = Jsoup.parse(\"<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>\");\n        Element script = doc.select(\"script\").first();\n        Element style = doc.select(\"style\").first();\n        Element p = doc.select(\"p\").first();\n\n        List<DataNode> scriptData = script.dataNodes();\n        assertEquals(1, scriptData.size());\n        assertEquals(\"One Two\", scriptData.get(0).getWholeData());\n\n        List<DataNode> styleData = style.dataNodes();\n        assertEquals(1, styleData.size());\n        assertEquals(\"Three Four\", styleData.get(0).getWholeData());\n\n        List<DataNode> pData = p.dataNodes();\n        assertEquals(0, pData.size());\n    }",
        "begin_line": 682,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 683,col 9)-(line 683,col 104)",
            "(line 684,col 9)-(line 684,col 54)",
            "(line 685,col 9)-(line 685,col 52)",
            "(line 686,col 9)-(line 686,col 44)",
            "(line 688,col 9)-(line 688,col 55)",
            "(line 689,col 9)-(line 689,col 43)",
            "(line 690,col 9)-(line 690,col 66)",
            "(line 692,col 9)-(line 692,col 53)",
            "(line 693,col 9)-(line 693,col 42)",
            "(line 694,col 9)-(line 694,col 68)",
            "(line 696,col 9)-(line 696,col 45)",
            "(line 697,col 9)-(line 697,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.elementIsNotASiblingOfItself()",
        "snippet": "    @Test public void elementIsNotASiblingOfItself() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());\n        Elements els = p2.siblingElements();\n        assertEquals(2, els.size());\n        assertEquals(\"<p>One</p>\", els.get(0).outerHtml());\n        assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());\n    }",
        "begin_line": 700,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 701,col 9)-(line 701,col 70)",
            "(line 702,col 9)-(line 702,col 44)",
            "(line 704,col 9)-(line 704,col 39)",
            "(line 705,col 9)-(line 705,col 44)",
            "(line 706,col 9)-(line 706,col 36)",
            "(line 707,col 9)-(line 707,col 59)",
            "(line 708,col 9)-(line 708,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testChildThrowsIndexOutOfBoundsOnMissing()",
        "snippet": "    @Test public void testChildThrowsIndexOutOfBoundsOnMissing() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p></div>\");\n        Element div = doc.select(\"div\").first();\n\n        assertEquals(2, div.children().size());\n        assertEquals(\"One\", div.child(0).text());\n\n        try {\n            div.child(3);\n            fail(\"Should throw index out of bounds\");\n        } catch (IndexOutOfBoundsException e) {}\n    }",
        "begin_line": 711,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 70)",
            "(line 713,col 9)-(line 713,col 48)",
            "(line 715,col 9)-(line 715,col 47)",
            "(line 716,col 9)-(line 716,col 49)",
            "(line 718,col 9)-(line 721,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.moveByAppend()",
        "snippet": "    @Test\n    public void moveByAppend() {\n        // test for https://github.com/jhy/jsoup/issues/239\n        // can empty an element and append its children to another element\n        Document doc = Jsoup.parse(\"<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Element div2 = doc.select(\"div\").get(1);\n\n        assertEquals(4, div1.childNodeSize());\n        List<Node> children = div1.childNodes();\n        assertEquals(4, children.size());\n\n        div2.insertChildren(0, children);\n\n        assertEquals(0, children.size()); // children is backed by div1.childNodes, moved, so should be 0 now\n        assertEquals(0, div1.childNodeSize());\n        assertEquals(4, div2.childNodeSize());\n        assertEquals(\"<div id=\\\"1\\\"></div>\\n<div id=\\\"2\\\">\\n Text \\n <p>One</p> Text \\n <p>Two</p>\\n</div>\",\n            doc.body().html());\n    }",
        "begin_line": 724,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 728,col 9)-(line 728,col 102)",
            "(line 729,col 9)-(line 729,col 48)",
            "(line 730,col 9)-(line 730,col 48)",
            "(line 732,col 9)-(line 732,col 46)",
            "(line 733,col 9)-(line 733,col 48)",
            "(line 734,col 9)-(line 734,col 41)",
            "(line 736,col 9)-(line 736,col 41)",
            "(line 738,col 9)-(line 738,col 41)",
            "(line 739,col 9)-(line 739,col 46)",
            "(line 740,col 9)-(line 740,col 46)",
            "(line 741,col 9)-(line 742,col 31)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.insertChildrenArgumentValidation()",
        "snippet": "    @Test\n    public void insertChildrenArgumentValidation() {\n        Document doc = Jsoup.parse(\"<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Element div2 = doc.select(\"div\").get(1);\n        List<Node> children = div1.childNodes();\n\n        try {\n            div2.insertChildren(6, children);\n            fail();\n        } catch (IllegalArgumentException e) {}\n\n        try {\n            div2.insertChildren(-5, children);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n\n        try {\n            div2.insertChildren(0, (Collection<? extends Node>) null);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }",
        "begin_line": 745,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 102)",
            "(line 748,col 9)-(line 748,col 48)",
            "(line 749,col 9)-(line 749,col 48)",
            "(line 750,col 9)-(line 750,col 48)",
            "(line 752,col 9)-(line 755,col 47)",
            "(line 757,col 9)-(line 761,col 9)",
            "(line 763,col 9)-(line 767,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.insertChildrenAtPosition()",
        "snippet": "    @Test\n    public void insertChildrenAtPosition() {\n        Document doc = Jsoup.parse(\"<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Elements p1s = div1.select(\"p\");\n        Element div2 = doc.select(\"div\").get(1);\n\n        assertEquals(2, div2.childNodeSize());\n        div2.insertChildren(-1, p1s);\n        assertEquals(2, div1.childNodeSize()); // moved two out\n        assertEquals(4, div2.childNodeSize());\n        assertEquals(3, p1s.get(1).siblingIndex()); // should be last\n\n        List<Node> els = new ArrayList<>();\n        Element el1 = new Element(Tag.valueOf(\"span\"), \"\").text(\"Span1\");\n        Element el2 = new Element(Tag.valueOf(\"span\"), \"\").text(\"Span2\");\n        TextNode tn1 = new TextNode(\"Text4\");\n        els.add(el1);\n        els.add(el2);\n        els.add(tn1);\n\n        assertNull(el1.parent());\n        div2.insertChildren(-2, els);\n        assertEquals(div2, el1.parent());\n        assertEquals(7, div2.childNodeSize());\n        assertEquals(3, el1.siblingIndex());\n        assertEquals(4, el2.siblingIndex());\n        assertEquals(5, tn1.siblingIndex());\n    }",
        "begin_line": 770,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 772,col 122)",
            "(line 773,col 9)-(line 773,col 48)",
            "(line 774,col 9)-(line 774,col 40)",
            "(line 775,col 9)-(line 775,col 48)",
            "(line 777,col 9)-(line 777,col 46)",
            "(line 778,col 9)-(line 778,col 37)",
            "(line 779,col 9)-(line 779,col 46)",
            "(line 780,col 9)-(line 780,col 46)",
            "(line 781,col 9)-(line 781,col 51)",
            "(line 783,col 9)-(line 783,col 43)",
            "(line 784,col 9)-(line 784,col 73)",
            "(line 785,col 9)-(line 785,col 73)",
            "(line 786,col 9)-(line 786,col 45)",
            "(line 787,col 9)-(line 787,col 21)",
            "(line 788,col 9)-(line 788,col 21)",
            "(line 789,col 9)-(line 789,col 21)",
            "(line 791,col 9)-(line 791,col 33)",
            "(line 792,col 9)-(line 792,col 37)",
            "(line 793,col 9)-(line 793,col 41)",
            "(line 794,col 9)-(line 794,col 46)",
            "(line 795,col 9)-(line 795,col 44)",
            "(line 796,col 9)-(line 796,col 44)",
            "(line 797,col 9)-(line 797,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.insertChildrenAsCopy()",
        "snippet": "    @Test\n    public void insertChildrenAsCopy() {\n        Document doc = Jsoup.parse(\"<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Element div2 = doc.select(\"div\").get(1);\n        Elements ps = doc.select(\"p\").clone();\n        ps.first().text(\"One cloned\");\n        div2.insertChildren(-1, ps);\n\n        assertEquals(4, div1.childNodeSize()); // not moved -- cloned\n        assertEquals(2, div2.childNodeSize());\n        assertEquals(\"<div id=\\\"1\\\">Text <p>One</p> Text <p>Two</p></div><div id=\\\"2\\\"><p>One cloned</p><p>Two</p></div>\",\n            TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 800,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 802,col 9)-(line 802,col 102)",
            "(line 803,col 9)-(line 803,col 48)",
            "(line 804,col 9)-(line 804,col 48)",
            "(line 805,col 9)-(line 805,col 46)",
            "(line 806,col 9)-(line 806,col 38)",
            "(line 807,col 9)-(line 807,col 36)",
            "(line 809,col 9)-(line 809,col 46)",
            "(line 810,col 9)-(line 810,col 46)",
            "(line 811,col 9)-(line 812,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testCssPath()",
        "snippet": "    @Test\n    public void testCssPath() {\n        Document doc = Jsoup.parse(\"<div id=\\\"id1\\\">A</div><div>B</div><div class=\\\"c1 c2\\\">C</div>\");\n        Element divA = doc.select(\"div\").get(0);\n        Element divB = doc.select(\"div\").get(1);\n        Element divC = doc.select(\"div\").get(2);\n        assertEquals(divA.cssSelector(), \"#id1\");\n        assertEquals(divB.cssSelector(), \"html > body > div:nth-child(2)\");\n        assertEquals(divC.cssSelector(), \"html > body > div.c1.c2\");\n\n        assertTrue(divA == doc.select(divA.cssSelector()).first());\n        assertTrue(divB == doc.select(divB.cssSelector()).first());\n        assertTrue(divC == doc.select(divC.cssSelector()).first());\n    }",
        "begin_line": 815,
        "end_line": 828,
        "comment": "",
        "child_ranges": [
            "(line 817,col 9)-(line 817,col 102)",
            "(line 818,col 9)-(line 818,col 48)",
            "(line 819,col 9)-(line 819,col 48)",
            "(line 820,col 9)-(line 820,col 48)",
            "(line 821,col 9)-(line 821,col 49)",
            "(line 822,col 9)-(line 822,col 75)",
            "(line 823,col 9)-(line 823,col 68)",
            "(line 825,col 9)-(line 825,col 67)",
            "(line 826,col 9)-(line 826,col 67)",
            "(line 827,col 9)-(line 827,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testClassNames()",
        "snippet": "    @Test\n    public void testClassNames() {\n        Document doc = Jsoup.parse(\"<div class=\\\"c1 c2\\\">C</div>\");\n        Element div = doc.select(\"div\").get(0);\n\n        assertEquals(\"c1 c2\", div.className());\n\n        final Set<String> set1 = div.classNames();\n        final Object[] arr1 = set1.toArray();\n        assertTrue(arr1.length==2);\n        assertEquals(\"c1\", arr1[0]);\n        assertEquals(\"c2\", arr1[1]);\n\n        // Changes to the set should not be reflected in the Elements getters\n       \tset1.add(\"c3\");\n        assertTrue(2==div.classNames().size());\n        assertEquals(\"c1 c2\", div.className());\n\n        // Update the class names to a fresh set\n        final Set<String> newSet = new LinkedHashSet<>(3);\n        newSet.addAll(set1);\n        newSet.add(\"c3\");\n        \n        div.classNames(newSet);\n\n        \n        assertEquals(\"c1 c2 c3\", div.className());\n\n        final Set<String> set2 = div.classNames();\n        final Object[] arr2 = set2.toArray();\n        assertTrue(arr2.length==3);\n        assertEquals(\"c1\", arr2[0]);\n        assertEquals(\"c2\", arr2[1]);\n        assertEquals(\"c3\", arr2[2]);\n    }",
        "begin_line": 831,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 833,col 9)-(line 833,col 67)",
            "(line 834,col 9)-(line 834,col 47)",
            "(line 836,col 9)-(line 836,col 47)",
            "(line 838,col 9)-(line 838,col 50)",
            "(line 839,col 9)-(line 839,col 45)",
            "(line 840,col 9)-(line 840,col 35)",
            "(line 841,col 9)-(line 841,col 36)",
            "(line 842,col 9)-(line 842,col 36)",
            "(line 845,col 9)-(line 845,col 23)",
            "(line 846,col 9)-(line 846,col 47)",
            "(line 847,col 9)-(line 847,col 47)",
            "(line 850,col 9)-(line 850,col 58)",
            "(line 851,col 9)-(line 851,col 28)",
            "(line 852,col 9)-(line 852,col 25)",
            "(line 854,col 9)-(line 854,col 31)",
            "(line 857,col 9)-(line 857,col 50)",
            "(line 859,col 9)-(line 859,col 50)",
            "(line 860,col 9)-(line 860,col 45)",
            "(line 861,col 9)-(line 861,col 35)",
            "(line 862,col 9)-(line 862,col 36)",
            "(line 863,col 9)-(line 863,col 36)",
            "(line 864,col 9)-(line 864,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testHashAndEqualsAndValue()",
        "snippet": "    @Test\n    public void testHashAndEqualsAndValue() {\n        // .equals and hashcode are identity. value is content.\n\n        String doc1 = \"<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\" +\n                \"<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\";\n\n        Document doc = Jsoup.parse(doc1);\n        Elements els = doc.select(\"p\");\n\n        /*\n        for (Element el : els) {\n            System.out.println(el.hashCode() + \" - \" + el.outerHtml());\n        }\n\n        0 1534787905 - <p class=\"one\">One</p>\n        1 1534787905 - <p class=\"one\">One</p>\n        2 1539683239 - <p class=\"one\">Two</p>\n        3 1535455211 - <p class=\"two\">One</p>\n        4 1534787905 - <p class=\"one\">One</p>\n        5 1534787905 - <p class=\"one\">One</p>\n        6 1539683239 - <p class=\"one\">Two</p>\n        7 1535455211 - <p class=\"two\">One</p>\n        */\n        assertEquals(8, els.size());\n        Element e0 = els.get(0);\n        Element e1 = els.get(1);\n        Element e2 = els.get(2);\n        Element e3 = els.get(3);\n        Element e4 = els.get(4);\n        Element e5 = els.get(5);\n        Element e6 = els.get(6);\n        Element e7 = els.get(7);\n\n        assertEquals(e0, e0);\n        assertTrue(e0.hasSameValue(e1));\n        assertTrue(e0.hasSameValue(e4));\n        assertTrue(e0.hasSameValue(e5));\n        assertFalse(e0.equals(e2));\n        assertFalse(e0.hasSameValue(e2));\n        assertFalse(e0.hasSameValue(e3));\n        assertFalse(e0.hasSameValue(e6));\n        assertFalse(e0.hasSameValue(e7));\n\n        assertEquals(e0.hashCode(), e0.hashCode());\n        assertFalse(e0.hashCode() == (e2.hashCode()));\n        assertFalse(e0.hashCode() == (e3).hashCode());\n        assertFalse(e0.hashCode() == (e6).hashCode());\n        assertFalse(e0.hashCode() == (e7).hashCode());\n    }",
        "begin_line": 867,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 871,col 9)-(line 872,col 115)",
            "(line 874,col 9)-(line 874,col 41)",
            "(line 875,col 9)-(line 875,col 39)",
            "(line 891,col 9)-(line 891,col 36)",
            "(line 892,col 9)-(line 892,col 32)",
            "(line 893,col 9)-(line 893,col 32)",
            "(line 894,col 9)-(line 894,col 32)",
            "(line 895,col 9)-(line 895,col 32)",
            "(line 896,col 9)-(line 896,col 32)",
            "(line 897,col 9)-(line 897,col 32)",
            "(line 898,col 9)-(line 898,col 32)",
            "(line 899,col 9)-(line 899,col 32)",
            "(line 901,col 9)-(line 901,col 29)",
            "(line 902,col 9)-(line 902,col 40)",
            "(line 903,col 9)-(line 903,col 40)",
            "(line 904,col 9)-(line 904,col 40)",
            "(line 905,col 9)-(line 905,col 35)",
            "(line 906,col 9)-(line 906,col 41)",
            "(line 907,col 9)-(line 907,col 41)",
            "(line 908,col 9)-(line 908,col 41)",
            "(line 909,col 9)-(line 909,col 41)",
            "(line 911,col 9)-(line 911,col 51)",
            "(line 912,col 9)-(line 912,col 54)",
            "(line 913,col 9)-(line 913,col 54)",
            "(line 914,col 9)-(line 914,col 54)",
            "(line 915,col 9)-(line 915,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testRelativeUrls()",
        "snippet": "    @Test public void testRelativeUrls() {\n        String html = \"<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/bar/\");\n        Elements els = doc.select(\"a\");\n\n        assertEquals(\"http://example.com/bar/one.html\", els.get(0).absUrl(\"href\"));\n        assertEquals(\"http://example.com/bar/two.html\", els.get(1).absUrl(\"href\"));\n        assertEquals(\"http://example.com/three.html\", els.get(2).absUrl(\"href\"));\n        assertEquals(\"http://example2.com/four/\", els.get(3).absUrl(\"href\"));\n        assertEquals(\"https://example2.com/five/\", els.get(4).absUrl(\"href\"));\n    }",
        "begin_line": 918,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 919,col 9)-(line 919,col 206)",
            "(line 920,col 9)-(line 920,col 68)",
            "(line 921,col 9)-(line 921,col 39)",
            "(line 923,col 9)-(line 923,col 83)",
            "(line 924,col 9)-(line 924,col 83)",
            "(line 925,col 9)-(line 925,col 81)",
            "(line 926,col 9)-(line 926,col 77)",
            "(line 927,col 9)-(line 927,col 78)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.appendMustCorrectlyMoveChildrenInsideOneParentElement()",
        "snippet": "    @Test\n    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {\n        Document doc = new Document(\"\");\n        Element body = doc.appendElement(\"body\");\n        body.appendElement(\"div1\");\n        body.appendElement(\"div2\");\n        final Element div3 = body.appendElement(\"div3\");\n        div3.text(\"Check\");\n        final Element div4 = body.appendElement(\"div4\");\n\n        ArrayList<Element> toMove = new ArrayList<>();\n        toMove.add(div3);\n        toMove.add(div4);\n\n        body.insertChildren(0, toMove);\n\n        String result = doc.toString().replaceAll(\"\\\\s+\", \"\");\n        assertEquals(\"<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>\", result);\n    }",
        "begin_line": 930,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 932,col 9)-(line 932,col 40)",
            "(line 933,col 9)-(line 933,col 49)",
            "(line 934,col 9)-(line 934,col 35)",
            "(line 935,col 9)-(line 935,col 35)",
            "(line 936,col 9)-(line 936,col 56)",
            "(line 937,col 9)-(line 937,col 27)",
            "(line 938,col 9)-(line 938,col 56)",
            "(line 940,col 9)-(line 940,col 54)",
            "(line 941,col 9)-(line 941,col 25)",
            "(line 942,col 9)-(line 942,col 25)",
            "(line 944,col 9)-(line 944,col 39)",
            "(line 946,col 9)-(line 946,col 62)",
            "(line 947,col 9)-(line 947,col 103)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testHashcodeIsStableWithContentChanges()",
        "snippet": "    @Test\n    public void testHashcodeIsStableWithContentChanges() {\n        Element root = new Element(Tag.valueOf(\"root\"), \"\");\n\n        HashSet<Element> set = new HashSet<>();\n        // Add root node:\n        set.add(root);\n\n        root.appendChild(new Element(Tag.valueOf(\"a\"), \"\"));\n        assertTrue(set.contains(root));\n    }",
        "begin_line": 950,
        "end_line": 960,
        "comment": "",
        "child_ranges": [
            "(line 952,col 9)-(line 952,col 60)",
            "(line 954,col 9)-(line 954,col 47)",
            "(line 956,col 9)-(line 956,col 22)",
            "(line 958,col 9)-(line 958,col 60)",
            "(line 959,col 9)-(line 959,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNamespacedElements()",
        "snippet": "    @Test\n    public void testNamespacedElements() {\n        // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.\n        String html = \"<html><body><fb:comments /></body></html>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/bar/\");\n        Elements els = doc.select(\"fb|comments\");\n        assertEquals(1, els.size());\n        assertEquals(\"html > body > fb|comments\", els.get(0).cssSelector());\n    }",
        "begin_line": 962,
        "end_line": 970,
        "comment": "",
        "child_ranges": [
            "(line 965,col 9)-(line 965,col 66)",
            "(line 966,col 9)-(line 966,col 68)",
            "(line 967,col 9)-(line 967,col 49)",
            "(line 968,col 9)-(line 968,col 36)",
            "(line 969,col 9)-(line 969,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testChainedRemoveAttributes()",
        "snippet": "    @Test\n    public void testChainedRemoveAttributes() {\n        String html = \"<a one two three four>Text</a>\";\n        Document doc = Jsoup.parse(html);\n        Element a = doc.select(\"a\").first();\n        a\n            .removeAttr(\"zero\")\n            .removeAttr(\"one\")\n            .removeAttr(\"two\")\n            .removeAttr(\"three\")\n            .removeAttr(\"four\")\n            .removeAttr(\"five\");\n        assertEquals(\"<a>Text</a>\", a.outerHtml());\n    }",
        "begin_line": 972,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 974,col 9)-(line 974,col 55)",
            "(line 975,col 9)-(line 975,col 41)",
            "(line 976,col 9)-(line 976,col 44)",
            "(line 977,col 9)-(line 983,col 32)",
            "(line 984,col 9)-(line 984,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testLoopedRemoveAttributes()",
        "snippet": "    @Test\n    public void testLoopedRemoveAttributes() {\n        String html = \"<a one two three four>Text</a><p foo>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        for (Element el : doc.getAllElements()) {\n            el.clearAttributes();\n        }\n\n        assertEquals(\"<a>Text</a>\\n<p>Two</p>\", doc.body().html());\n    }",
        "begin_line": 987,
        "end_line": 996,
        "comment": "",
        "child_ranges": [
            "(line 989,col 9)-(line 989,col 69)",
            "(line 990,col 9)-(line 990,col 41)",
            "(line 991,col 9)-(line 993,col 9)",
            "(line 995,col 9)-(line 995,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testIs()",
        "snippet": "    @Test\n    public void testIs() {\n        String html = \"<div><p>One <a class=big>Two</a> Three</p><p>Another</p>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.select(\"p\").first();\n\n        assertTrue(p.is(\"p\"));\n        assertFalse(p.is(\"div\"));\n        assertTrue(p.is(\"p:has(a)\"));\n        assertTrue(p.is(\"p:first-child\"));\n        assertFalse(p.is(\"p:last-child\"));\n        assertTrue(p.is(\"*\"));\n        assertTrue(p.is(\"div p\"));\n\n        Element q = doc.select(\"p\").last();\n        assertTrue(q.is(\"p\"));\n        assertTrue(q.is(\"p ~ p\"));\n        assertTrue(q.is(\"p + p\"));\n        assertTrue(q.is(\"p:last-child\"));\n        assertFalse(q.is(\"p a\"));\n        assertFalse(q.is(\"a\"));\n    }",
        "begin_line": 998,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1000,col 9)-(line 1000,col 81)",
            "(line 1001,col 9)-(line 1001,col 41)",
            "(line 1002,col 9)-(line 1002,col 44)",
            "(line 1004,col 9)-(line 1004,col 30)",
            "(line 1005,col 9)-(line 1005,col 33)",
            "(line 1006,col 9)-(line 1006,col 37)",
            "(line 1007,col 9)-(line 1007,col 42)",
            "(line 1008,col 9)-(line 1008,col 42)",
            "(line 1009,col 9)-(line 1009,col 30)",
            "(line 1010,col 9)-(line 1010,col 34)",
            "(line 1012,col 9)-(line 1012,col 43)",
            "(line 1013,col 9)-(line 1013,col 30)",
            "(line 1014,col 9)-(line 1014,col 34)",
            "(line 1015,col 9)-(line 1015,col 34)",
            "(line 1016,col 9)-(line 1016,col 41)",
            "(line 1017,col 9)-(line 1017,col 33)",
            "(line 1018,col 9)-(line 1018,col 31)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.elementByTagName()",
        "snippet": "    @Test public void elementByTagName() {\n        Element a = new Element(\"P\");\n        assertTrue(a.tagName().equals(\"P\"));\n    }",
        "begin_line": 1022,
        "end_line": 1025,
        "comment": "",
        "child_ranges": [
            "(line 1023,col 9)-(line 1023,col 37)",
            "(line 1024,col 9)-(line 1024,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testChildrenElements()",
        "snippet": "    @Test public void testChildrenElements() {\n        String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.select(\"div\").first();\n        Element p = doc.select(\"p\").first();\n        Element span = doc.select(\"span\").first();\n        Element foo = doc.select(\"foo\").first();\n        Element img = doc.select(\"img\").first();\n\n        Elements docChildren = div.children();\n        assertEquals(2, docChildren.size());\n        assertEquals(\"<p><a>One</a></p>\", docChildren.get(0).outerHtml());\n        assertEquals(\"<p><a>Two</a></p>\", docChildren.get(1).outerHtml());\n        assertEquals(3, div.childNodes().size());\n        assertEquals(\"Three\", div.childNodes().get(2).outerHtml());\n\n        assertEquals(1, p.children().size());\n        assertEquals(\"One\", p.children().text());\n\n        assertEquals(0, span.children().size());\n        assertEquals(1, span.childNodes().size());\n        assertEquals(\"Four\", span.childNodes().get(0).outerHtml());\n\n        assertEquals(0, foo.children().size());\n        assertEquals(0, foo.childNodes().size());\n        assertEquals(0, img.children().size());\n        assertEquals(0, img.childNodes().size());\n    }",
        "begin_line": 1027,
        "end_line": 1054,
        "comment": "",
        "child_ranges": [
            "(line 1028,col 9)-(line 1028,col 108)",
            "(line 1029,col 9)-(line 1029,col 41)",
            "(line 1030,col 9)-(line 1030,col 48)",
            "(line 1031,col 9)-(line 1031,col 44)",
            "(line 1032,col 9)-(line 1032,col 50)",
            "(line 1033,col 9)-(line 1033,col 48)",
            "(line 1034,col 9)-(line 1034,col 48)",
            "(line 1036,col 9)-(line 1036,col 46)",
            "(line 1037,col 9)-(line 1037,col 44)",
            "(line 1038,col 9)-(line 1038,col 74)",
            "(line 1039,col 9)-(line 1039,col 74)",
            "(line 1040,col 9)-(line 1040,col 49)",
            "(line 1041,col 9)-(line 1041,col 67)",
            "(line 1043,col 9)-(line 1043,col 45)",
            "(line 1044,col 9)-(line 1044,col 49)",
            "(line 1046,col 9)-(line 1046,col 48)",
            "(line 1047,col 9)-(line 1047,col 50)",
            "(line 1048,col 9)-(line 1048,col 67)",
            "(line 1050,col 9)-(line 1050,col 47)",
            "(line 1051,col 9)-(line 1051,col 49)",
            "(line 1052,col 9)-(line 1052,col 47)",
            "(line 1053,col 9)-(line 1053,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testShadowElementsAreUpdated()",
        "snippet": "    @Test public void testShadowElementsAreUpdated() {\n        String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.select(\"div\").first();\n        Elements els = div.children();\n        List<Node> nodes = div.childNodes();\n\n        assertEquals(2, els.size()); // the two Ps\n        assertEquals(3, nodes.size()); // the \"Three\" textnode\n\n        Element p3 = new Element(\"p\").text(\"P3\");\n        Element p4 = new Element(\"p\").text(\"P4\");\n        div.insertChildren(1, p3);\n        div.insertChildren(3, p4);\n        Elements els2 = div.children();\n\n        // first els should not have changed\n        assertEquals(2, els.size());\n        assertEquals(4, els2.size());\n\n        assertEquals(\"<p><a>One</a></p>\\n\" +\n            \"<p>P3</p>\\n\" +\n            \"<p><a>Two</a></p>\\n\" +\n            \"<p>P4</p>Three\", div.html());\n        assertEquals(\"P3\", els2.get(1).text());\n        assertEquals(\"P4\", els2.get(3).text());\n\n        p3.after(\"<span>Another</span\");\n\n        Elements els3 = div.children();\n        assertEquals(5, els3.size());\n        assertEquals(\"span\", els3.get(2).tagName());\n        assertEquals(\"Another\", els3.get(2).text());\n\n        assertEquals(\"<p><a>One</a></p>\\n\" +\n            \"<p>P3</p>\\n\" +\n            \"<span>Another</span>\\n\" +\n            \"<p><a>Two</a></p>\\n\" +\n            \"<p>P4</p>Three\", div.html());\n    }",
        "begin_line": 1056,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1057,col 9)-(line 1057,col 108)",
            "(line 1058,col 9)-(line 1058,col 41)",
            "(line 1059,col 9)-(line 1059,col 48)",
            "(line 1060,col 9)-(line 1060,col 38)",
            "(line 1061,col 9)-(line 1061,col 44)",
            "(line 1063,col 9)-(line 1063,col 36)",
            "(line 1064,col 9)-(line 1064,col 38)",
            "(line 1066,col 9)-(line 1066,col 49)",
            "(line 1067,col 9)-(line 1067,col 49)",
            "(line 1068,col 9)-(line 1068,col 34)",
            "(line 1069,col 9)-(line 1069,col 34)",
            "(line 1070,col 9)-(line 1070,col 39)",
            "(line 1073,col 9)-(line 1073,col 36)",
            "(line 1074,col 9)-(line 1074,col 37)",
            "(line 1076,col 9)-(line 1079,col 42)",
            "(line 1080,col 9)-(line 1080,col 47)",
            "(line 1081,col 9)-(line 1081,col 47)",
            "(line 1083,col 9)-(line 1083,col 40)",
            "(line 1085,col 9)-(line 1085,col 39)",
            "(line 1086,col 9)-(line 1086,col 37)",
            "(line 1087,col 9)-(line 1087,col 52)",
            "(line 1088,col 9)-(line 1088,col 52)",
            "(line 1090,col 9)-(line 1094,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.classNamesAndAttributeNameIsCaseInsensitive()",
        "snippet": "    @Test public void classNamesAndAttributeNameIsCaseInsensitive() {\n        String html = \"<p Class='SomeText AnotherText'>One</p>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"SomeText AnotherText\", p.className());\n        assertTrue(p.classNames().contains(\"SomeText\"));\n        assertTrue(p.classNames().contains(\"AnotherText\"));\n        assertTrue(p.hasClass(\"SomeText\"));\n        assertTrue(p.hasClass(\"sometext\"));\n        assertTrue(p.hasClass(\"AnotherText\"));\n        assertTrue(p.hasClass(\"anothertext\"));\n\n        Element p1 = doc.select(\".SomeText\").first();\n        Element p2 = doc.select(\".sometext\").first();\n        Element p3 = doc.select(\"[class=SomeText AnotherText]\").first();\n        Element p4 = doc.select(\"[Class=SomeText AnotherText]\").first();\n        Element p5 = doc.select(\"[class=sometext anothertext]\").first();\n        Element p6 = doc.select(\"[class=SomeText AnotherText]\").first();\n        Element p7 = doc.select(\"[class^=sometext]\").first();\n        Element p8 = doc.select(\"[class$=nothertext]\").first();\n        Element p9 = doc.select(\"[class^=sometext]\").first();\n        Element p10 = doc.select(\"[class$=AnotherText]\").first();\n\n        assertEquals(\"One\", p1.text());\n        assertEquals(p1, p2);\n        assertEquals(p1, p3);\n        assertEquals(p1, p4);\n        assertEquals(p1, p5);\n        assertEquals(p1, p6);\n        assertEquals(p1, p7);\n        assertEquals(p1, p8);\n        assertEquals(p1, p9);\n        assertEquals(p1, p10);\n    }",
        "begin_line": 1097,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 9)-(line 1098,col 64)",
            "(line 1099,col 9)-(line 1099,col 41)",
            "(line 1100,col 9)-(line 1100,col 44)",
            "(line 1101,col 9)-(line 1101,col 60)",
            "(line 1102,col 9)-(line 1102,col 56)",
            "(line 1103,col 9)-(line 1103,col 59)",
            "(line 1104,col 9)-(line 1104,col 43)",
            "(line 1105,col 9)-(line 1105,col 43)",
            "(line 1106,col 9)-(line 1106,col 46)",
            "(line 1107,col 9)-(line 1107,col 46)",
            "(line 1109,col 9)-(line 1109,col 53)",
            "(line 1110,col 9)-(line 1110,col 53)",
            "(line 1111,col 9)-(line 1111,col 72)",
            "(line 1112,col 9)-(line 1112,col 72)",
            "(line 1113,col 9)-(line 1113,col 72)",
            "(line 1114,col 9)-(line 1114,col 72)",
            "(line 1115,col 9)-(line 1115,col 61)",
            "(line 1116,col 9)-(line 1116,col 63)",
            "(line 1117,col 9)-(line 1117,col 61)",
            "(line 1118,col 9)-(line 1118,col 65)",
            "(line 1120,col 9)-(line 1120,col 39)",
            "(line 1121,col 9)-(line 1121,col 29)",
            "(line 1122,col 9)-(line 1122,col 29)",
            "(line 1123,col 9)-(line 1123,col 29)",
            "(line 1124,col 9)-(line 1124,col 29)",
            "(line 1125,col 9)-(line 1125,col 29)",
            "(line 1126,col 9)-(line 1126,col 29)",
            "(line 1127,col 9)-(line 1127,col 29)",
            "(line 1128,col 9)-(line 1128,col 29)",
            "(line 1129,col 9)-(line 1129,col 30)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testAppendTo()",
        "snippet": "\t@Test\n\tpublic void testAppendTo() {\n\t\tString parentHtml = \"<div class='a'></div>\";\n\t\tString childHtml = \"<div class='b'></div><p>Two</p>\";\n\n\t\tDocument parentDoc = Jsoup.parse(parentHtml);\n\t\tElement parent = parentDoc.body();\n        Document childDoc = Jsoup.parse(childHtml);\n\n        Element div = childDoc.select(\"div\").first();\n        Element p = childDoc.select(\"p\").first();\n        Element appendTo1 = div.appendTo(parent);\n        assertEquals(div, appendTo1);\n\n        Element appendTo2 = p.appendTo(div);\n        assertEquals(p, appendTo2);\n\n        assertEquals(\"<div class=\\\"a\\\"></div>\\n<div class=\\\"b\\\">\\n <p>Two</p>\\n</div>\", parentDoc.body().html());\n        assertEquals(\"\", childDoc.body().html()); // got moved out\n\t}",
        "begin_line": 1132,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1134,col 3)-(line 1134,col 46)",
            "(line 1135,col 3)-(line 1135,col 55)",
            "(line 1137,col 3)-(line 1137,col 47)",
            "(line 1138,col 3)-(line 1138,col 36)",
            "(line 1139,col 9)-(line 1139,col 51)",
            "(line 1141,col 9)-(line 1141,col 53)",
            "(line 1142,col 9)-(line 1142,col 49)",
            "(line 1143,col 9)-(line 1143,col 49)",
            "(line 1144,col 9)-(line 1144,col 37)",
            "(line 1146,col 9)-(line 1146,col 44)",
            "(line 1147,col 9)-(line 1147,col 35)",
            "(line 1149,col 9)-(line 1149,col 113)",
            "(line 1150,col 9)-(line 1150,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNormalizesNbspInText()",
        "snippet": "\t@Test public void testNormalizesNbspInText() {\n        String escaped = \"You can't always get what you&nbsp;want.\";\n        String withNbsp = \"You can't always get what you\u00a0want.\"; // there is an nbsp char in there\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"You can't always get what you want.\", p.text()); // text is normalized\n\n        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml()); // html / whole text keeps &nbsp;\n        assertEquals(withNbsp, p.textNodes().get(0).getWholeText());\n        assertEquals(160, withNbsp.charAt(29));\n\n        Element matched = doc.select(\"p:contains(get what you want)\").first();\n        assertEquals(\"p\", matched.nodeName());\n        assertTrue(matched.is(\":containsOwn(get what you want)\"));\n    }",
        "begin_line": 1153,
        "end_line": 1167,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 9)-(line 1154,col 68)",
            "(line 1155,col 9)-(line 1155,col 64)",
            "(line 1156,col 9)-(line 1156,col 52)",
            "(line 1157,col 9)-(line 1157,col 44)",
            "(line 1158,col 9)-(line 1158,col 70)",
            "(line 1160,col 9)-(line 1160,col 62)",
            "(line 1161,col 9)-(line 1161,col 68)",
            "(line 1162,col 9)-(line 1162,col 47)",
            "(line 1164,col 9)-(line 1164,col 78)",
            "(line 1165,col 9)-(line 1165,col 46)",
            "(line 1166,col 9)-(line 1166,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testRemoveBeforeIndex()",
        "snippet": "\t@Test\n\tpublic void testRemoveBeforeIndex() {\n\t\tDocument doc = Jsoup.parse(\n\t            \"<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>\",\n\t            \"\");\n\t    Element body = doc.select(\"body\").first();\n\t    Elements elems = body.select(\"p:matchesOwn(XXX)\");\n\t    Element xElem = elems.first();\n\t    Elements beforeX = xElem.parent().getElementsByIndexLessThan(xElem.elementSiblingIndex());\n\n\t    for(Element p : beforeX) {\n\t        p.remove();\n\t    }\n\n\t    assertEquals(\"<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>\", TextUtil.stripNewlines(body.outerHtml()));\n\t}",
        "begin_line": 1169,
        "end_line": 1184,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 3)-(line 1173,col 17)",
            "(line 1174,col 6)-(line 1174,col 47)",
            "(line 1175,col 6)-(line 1175,col 55)",
            "(line 1176,col 6)-(line 1176,col 35)",
            "(line 1177,col 6)-(line 1177,col 95)",
            "(line 1179,col 6)-(line 1181,col 6)",
            "(line 1183,col 6)-(line 1183,col 124)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testRemoveAfterIndex()",
        "snippet": "\t@Test\n\tpublic void testRemoveAfterIndex() {\n\t\t Document doc2 = Jsoup.parse(\n\t\t            \"<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>\",\n\t\t            \"\");\n\t    Element body = doc2.select(\"body\").first();\n\t    Elements elems = body.select(\"p:matchesOwn(XXX)\");\n\t    Element xElem = elems.first();\n\t    Elements afterX = xElem.parent().getElementsByIndexGreaterThan(xElem.elementSiblingIndex());\n\n\t    for(Element p : afterX) {\n\t        p.remove();\n\t    }\n\n\t    assertEquals(\"<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>\", TextUtil.stripNewlines(body.outerHtml()));\n\t}",
        "begin_line": 1186,
        "end_line": 1201,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 4)-(line 1190,col 18)",
            "(line 1191,col 6)-(line 1191,col 48)",
            "(line 1192,col 6)-(line 1192,col 55)",
            "(line 1193,col 6)-(line 1193,col 35)",
            "(line 1194,col 6)-(line 1194,col 97)",
            "(line 1196,col 6)-(line 1198,col 6)",
            "(line 1200,col 6)-(line 1200,col 126)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.whiteSpaceClassElement()",
        "snippet": "    @Test \n    public void whiteSpaceClassElement(){\n\t    Tag tag = Tag.valueOf(\"a\");\n\t    Attributes attribs = new Attributes();\n\t    Element el = new Element(tag, \"\", attribs);\n\t    \n\t    attribs.put(\"class\", \"abc \");\n\t    boolean hasClass = el.hasClass(\"ab\");\n\t    assertFalse(hasClass);\n\t}",
        "begin_line": 1203,
        "end_line": 1212,
        "comment": "",
        "child_ranges": [
            "(line 1205,col 6)-(line 1205,col 32)",
            "(line 1206,col 6)-(line 1206,col 43)",
            "(line 1207,col 6)-(line 1207,col 48)",
            "(line 1209,col 6)-(line 1209,col 34)",
            "(line 1210,col 6)-(line 1210,col 42)",
            "(line 1211,col 6)-(line 1211,col 27)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.ElementTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "signature": "org.jsoup.nodes.ElementTest.testNextElementSiblingAfterClone()",
        "snippet": "\t@Test\n    public void testNextElementSiblingAfterClone() {\n        // via https://github.com/jhy/jsoup/issues/951\n        String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";\n        String expectedText = \"New element\";\n        String cloneExpect = \"New element in clone\";\n\n        Document original = Jsoup.parse(html);\n        Document clone = original.clone();\n\n        Element originalElement = original.body().child(0);\n        originalElement.after(\"<div>\" + expectedText + \"</div>\");\n        Element originalNextElementSibling = originalElement.nextElementSibling();\n        Element originalNextSibling = (Element) originalElement.nextSibling();\n        assertEquals(expectedText, originalNextElementSibling.text());\n        assertEquals(expectedText, originalNextSibling.text());\n\n        Element cloneElement = clone.body().child(0);\n        cloneElement.after(\"<div>\" + cloneExpect + \"</div>\");\n        Element cloneNextElementSibling = cloneElement.nextElementSibling();\n        Element cloneNextSibling = (Element) cloneElement.nextSibling();\n        assertEquals(cloneExpect, cloneNextElementSibling.text());\n        assertEquals(cloneExpect, cloneNextSibling.text());\n    }",
        "begin_line": 1214,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1217,col 9)-(line 1217,col 117)",
            "(line 1218,col 9)-(line 1218,col 44)",
            "(line 1219,col 9)-(line 1219,col 52)",
            "(line 1221,col 9)-(line 1221,col 46)",
            "(line 1222,col 9)-(line 1222,col 42)",
            "(line 1224,col 9)-(line 1224,col 59)",
            "(line 1225,col 9)-(line 1225,col 65)",
            "(line 1226,col 9)-(line 1226,col 82)",
            "(line 1227,col 9)-(line 1227,col 78)",
            "(line 1228,col 9)-(line 1228,col 70)",
            "(line 1229,col 9)-(line 1229,col 63)",
            "(line 1231,col 9)-(line 1231,col 53)",
            "(line 1232,col 9)-(line 1232,col 61)",
            "(line 1233,col 9)-(line 1233,col 76)",
            "(line 1234,col 9)-(line 1234,col 72)",
            "(line 1235,col 9)-(line 1235,col 66)",
            "(line 1236,col 9)-(line 1236,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testBlank()",
        "snippet": "    @Test public void testBlank() {\n        TextNode one = new TextNode(\"\");\n        TextNode two = new TextNode(\"     \");\n        TextNode three = new TextNode(\"  \\n\\n   \");\n        TextNode four = new TextNode(\"Hello\");\n        TextNode five = new TextNode(\"  \\nHello \");\n\n        assertTrue(one.isBlank());\n        assertTrue(two.isBlank());\n        assertTrue(three.isBlank());\n        assertFalse(four.isBlank());\n        assertFalse(five.isBlank());\n    }",
        "begin_line": 14,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 40)",
            "(line 16,col 9)-(line 16,col 45)",
            "(line 17,col 9)-(line 17,col 51)",
            "(line 18,col 9)-(line 18,col 46)",
            "(line 19,col 9)-(line 19,col 51)",
            "(line 21,col 9)-(line 21,col 34)",
            "(line 22,col 9)-(line 22,col 34)",
            "(line 23,col 9)-(line 23,col 36)",
            "(line 24,col 9)-(line 24,col 36)",
            "(line 25,col 9)-(line 25,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testTextBean()",
        "snippet": "    @Test public void testTextBean() {\n        Document doc = Jsoup.parse(\"<p>One <span>two &amp;</span> three &amp;</p>\");\n        Element p = doc.select(\"p\").first();\n\n        Element span = doc.select(\"span\").first();\n        assertEquals(\"two &\", span.text());\n        TextNode spanText = (TextNode) span.childNode(0);\n        assertEquals(\"two &\", spanText.text());\n        \n        TextNode tn = (TextNode) p.childNode(2);\n        assertEquals(\" three &\", tn.text());\n        \n        tn.text(\" POW!\");\n        assertEquals(\"One <span>two &amp;</span> POW!\", TextUtil.stripNewlines(p.html()));\n\n        tn.attr(tn.nodeName(), \"kablam &\");\n        assertEquals(\"kablam &\", tn.text());\n        assertEquals(\"One <span>two &amp;</span>kablam &amp;\", TextUtil.stripNewlines(p.html()));\n    }",
        "begin_line": 28,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 84)",
            "(line 30,col 9)-(line 30,col 44)",
            "(line 32,col 9)-(line 32,col 50)",
            "(line 33,col 9)-(line 33,col 43)",
            "(line 34,col 9)-(line 34,col 57)",
            "(line 35,col 9)-(line 35,col 47)",
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 44)",
            "(line 40,col 9)-(line 40,col 25)",
            "(line 41,col 9)-(line 41,col 90)",
            "(line 43,col 9)-(line 43,col 43)",
            "(line 44,col 9)-(line 44,col 44)",
            "(line 45,col 9)-(line 45,col 97)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testSplitText()",
        "snippet": "    @Test public void testSplitText() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.select(\"div\").first();\n        TextNode tn = (TextNode) div.childNode(0);\n        TextNode tail = tn.splitText(6);\n        assertEquals(\"Hello \", tn.getWholeText());\n        assertEquals(\"there\", tail.getWholeText());\n        tail.text(\"there!\");\n        assertEquals(\"Hello there!\", div.text());\n        assertTrue(tn.parent() == tail.parent());\n    }",
        "begin_line": 48,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 61)",
            "(line 50,col 9)-(line 50,col 48)",
            "(line 51,col 9)-(line 51,col 50)",
            "(line 52,col 9)-(line 52,col 40)",
            "(line 53,col 9)-(line 53,col 50)",
            "(line 54,col 9)-(line 54,col 51)",
            "(line 55,col 9)-(line 55,col 28)",
            "(line 56,col 9)-(line 56,col 49)",
            "(line 57,col 9)-(line 57,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testSplitAnEmbolden()",
        "snippet": "    @Test public void testSplitAnEmbolden() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.select(\"div\").first();\n        TextNode tn = (TextNode) div.childNode(0);\n        TextNode tail = tn.splitText(6);\n        tail.wrap(\"<b></b>\");\n\n        assertEquals(\"Hello <b>there</b>\", TextUtil.stripNewlines(div.html())); // not great that we get \\n<b>there there... must correct\n    }",
        "begin_line": 60,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 61)",
            "(line 62,col 9)-(line 62,col 48)",
            "(line 63,col 9)-(line 63,col 50)",
            "(line 64,col 9)-(line 64,col 40)",
            "(line 65,col 9)-(line 65,col 29)",
            "(line 67,col 9)-(line 67,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.TextNodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java",
        "signature": "org.jsoup.nodes.TextNodeTest.testWithSupplementaryCharacter()",
        "snippet": "    @Test public void testWithSupplementaryCharacter(){\n        Document doc = Jsoup.parse(new String(Character.toChars(135361)));\n        TextNode t = doc.body().textNodes().get(0);\n        assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim());\n    }",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 74)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 82)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributeTest.java",
        "signature": "org.jsoup.nodes.AttributeTest.html()",
        "snippet": "    @Test public void html() {\n        Attribute attr = new Attribute(\"key\", \"value &\");\n        assertEquals(\"key=\\\"value &amp;\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }",
        "begin_line": 8,
        "end_line": 12,
        "comment": "",
        "child_ranges": [
            "(line 9,col 9)-(line 9,col 57)",
            "(line 10,col 9)-(line 10,col 57)",
            "(line 11,col 9)-(line 11,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.AttributeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/AttributeTest.java",
        "signature": "org.jsoup.nodes.AttributeTest.testWithSupplementaryCharacterInAttributeKeyAndValue()",
        "snippet": "    @Test public void testWithSupplementaryCharacterInAttributeKeyAndValue() {\n        String s = new String(Character.toChars(135361));\n        Attribute attr = new Attribute(s, \"A\" + s + \"B\");\n        assertEquals(s + \"=\\\"A\" + s + \"B\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }",
        "begin_line": 14,
        "end_line": 19,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 57)",
            "(line 16,col 9)-(line 16,col 57)",
            "(line 17,col 9)-(line 17,col 58)",
            "(line 18,col 9)-(line 18,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesBaseUri()",
        "snippet": "    @Test public void handlesBaseUri() {\n        Tag tag = Tag.valueOf(\"a\");\n        Attributes attribs = new Attributes();\n        attribs.put(\"relHref\", \"/foo\");\n        attribs.put(\"absHref\", \"http://bar/qux\");\n\n        Element noBase = new Element(tag, \"\", attribs);\n        assertEquals(\"\", noBase.absUrl(\"relHref\")); // with no base, should NOT fallback to href attrib, whatever it is\n        assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); // no base but valid attrib, return attrib\n\n        Element withBase = new Element(tag, \"http://foo/\", attribs);\n        assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); // construct abs from base + rel\n        assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); // href is abs, so returns that\n        assertEquals(\"\", withBase.absUrl(\"noval\"));\n\n        Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs);\n        assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n        assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing \n    }",
        "begin_line": 17,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 18,col 9)-(line 18,col 35)",
            "(line 19,col 9)-(line 19,col 46)",
            "(line 20,col 9)-(line 20,col 39)",
            "(line 21,col 9)-(line 21,col 49)",
            "(line 23,col 9)-(line 23,col 55)",
            "(line 24,col 9)-(line 24,col 51)",
            "(line 25,col 9)-(line 25,col 65)",
            "(line 27,col 9)-(line 27,col 68)",
            "(line 28,col 9)-(line 28,col 67)",
            "(line 29,col 9)-(line 29,col 67)",
            "(line 30,col 9)-(line 30,col 51)",
            "(line 32,col 9)-(line 32,col 81)",
            "(line 33,col 9)-(line 33,col 68)",
            "(line 34,col 9)-(line 34,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.setBaseUriIsRecursive()",
        "snippet": "    @Test public void setBaseUriIsRecursive() {\n        Document doc = Jsoup.parse(\"<div><p></p></div>\");\n        String baseUri = \"https://jsoup.org\";\n        doc.setBaseUri(baseUri);\n        \n        assertEquals(baseUri, doc.baseUri());\n        assertEquals(baseUri, doc.select(\"div\").first().baseUri());\n        assertEquals(baseUri, doc.select(\"p\").first().baseUri());\n    }",
        "begin_line": 37,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 57)",
            "(line 39,col 9)-(line 39,col 45)",
            "(line 40,col 9)-(line 40,col 32)",
            "(line 42,col 9)-(line 42,col 45)",
            "(line 43,col 9)-(line 43,col 67)",
            "(line 44,col 9)-(line 44,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesAbsPrefix()",
        "snippet": "    @Test public void handlesAbsPrefix() {\n        Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"https://jsoup.org/\");\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"/foo\", a.attr(\"href\"));\n        assertEquals(\"https://jsoup.org/foo\", a.attr(\"abs:href\"));\n        assertTrue(a.hasAttr(\"abs:href\"));\n    }",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 83)",
            "(line 49,col 9)-(line 49,col 44)",
            "(line 50,col 9)-(line 50,col 45)",
            "(line 51,col 9)-(line 51,col 66)",
            "(line 52,col 9)-(line 52,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesAbsOnImage()",
        "snippet": "    @Test public void handlesAbsOnImage() {\n        Document doc = Jsoup.parse(\"<p><img src=\\\"/rez/osi_logo.png\\\" /></p>\", \"https://jsoup.org/\");\n        Element img = doc.select(\"img\").first();\n        assertEquals(\"https://jsoup.org/rez/osi_logo.png\", img.attr(\"abs:src\"));\n        assertEquals(img.absUrl(\"src\"), img.attr(\"abs:src\"));\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 101)",
            "(line 57,col 9)-(line 57,col 48)",
            "(line 58,col 9)-(line 58,col 80)",
            "(line 59,col 9)-(line 59,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesAbsPrefixOnHasAttr()",
        "snippet": "    @Test public void handlesAbsPrefixOnHasAttr() {\n        // 1: no abs url; 2: has abs url\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org/'>Two</a>\");\n        Element one = doc.select(\"#1\").first();\n        Element two = doc.select(\"#2\").first();\n\n        assertFalse(one.hasAttr(\"abs:href\"));\n        assertTrue(one.hasAttr(\"href\"));\n        assertEquals(\"\", one.absUrl(\"href\"));\n\n        assertTrue(two.hasAttr(\"abs:href\"));\n        assertTrue(two.hasAttr(\"href\"));\n        assertEquals(\"https://jsoup.org/\", two.absUrl(\"href\"));\n    }",
        "begin_line": 62,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 108)",
            "(line 65,col 9)-(line 65,col 47)",
            "(line 66,col 9)-(line 66,col 47)",
            "(line 68,col 9)-(line 68,col 45)",
            "(line 69,col 9)-(line 69,col 40)",
            "(line 70,col 9)-(line 70,col 45)",
            "(line 72,col 9)-(line 72,col 44)",
            "(line 73,col 9)-(line 73,col 40)",
            "(line 74,col 9)-(line 74,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.literalAbsPrefix()",
        "snippet": "    @Test public void literalAbsPrefix() {\n        // if there is a literal attribute \"abs:xxx\", don't try and make absolute.\n        Document doc = Jsoup.parse(\"<a abs:href='odd'>One</a>\");\n        Element el = doc.select(\"a\").first();\n        assertTrue(el.hasAttr(\"abs:href\"));\n        assertEquals(\"odd\", el.attr(\"abs:href\"));\n    }",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 64)",
            "(line 80,col 9)-(line 80,col 45)",
            "(line 81,col 9)-(line 81,col 43)",
            "(line 82,col 9)-(line 82,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handleAbsOnFileUris()",
        "snippet": "    @Test public void handleAbsOnFileUris() {\n        Document doc = Jsoup.parse(\"<a href='password'>One/a><a href='/var/log/messages'>Two</a>\", \"file:/etc/\");\n        Element one = doc.select(\"a\").first();\n        assertEquals(\"file:/etc/password\", one.absUrl(\"href\"));\n        Element two = doc.select(\"a\").get(1);\n        assertEquals(\"file:/var/log/messages\", two.absUrl(\"href\"));\n    }",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 113)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 63)",
            "(line 89,col 9)-(line 89,col 45)",
            "(line 90,col 9)-(line 90,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handleAbsOnLocalhostFileUris()",
        "snippet": "    @Test\n    public void handleAbsOnLocalhostFileUris() {\n        Document doc = Jsoup.parse(\"<a href='password'>One/a><a href='/var/log/messages'>Two</a>\", \"file://localhost/etc/\");\n        Element one = doc.select(\"a\").first();\n        assertEquals(\"file://localhost/etc/password\", one.absUrl(\"href\"));\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 124)",
            "(line 96,col 9)-(line 96,col 46)",
            "(line 97,col 9)-(line 97,col 74)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.handlesAbsOnProtocolessAbsoluteUris()",
        "snippet": "    @Test\n    public void handlesAbsOnProtocolessAbsoluteUris() {\n        Document doc1 = Jsoup.parse(\"<a href='//example.net/foo'>One</a>\", \"http://example.com/\");\n        Document doc2 = Jsoup.parse(\"<a href='//example.net/foo'>One</a>\", \"https://example.com/\");\n\n        Element one = doc1.select(\"a\").first();\n        Element two = doc2.select(\"a\").first();\n\n        assertEquals(\"http://example.net/foo\", one.absUrl(\"href\"));\n        assertEquals(\"https://example.net/foo\", two.absUrl(\"href\"));\n\n        Document doc3 = Jsoup.parse(\"<img src=//www.google.com/images/errors/logo_sm.gif alt=Google>\", \"https://google.com\");\n        assertEquals(\"https://www.google.com/images/errors/logo_sm.gif\", doc3.select(\"img\").attr(\"abs:src\"));\n    }",
        "begin_line": 100,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 98)",
            "(line 103,col 9)-(line 103,col 99)",
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 47)",
            "(line 108,col 9)-(line 108,col 67)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 111,col 9)-(line 111,col 125)",
            "(line 112,col 9)-(line 112,col 109)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.absHandlesRelativeQuery()",
        "snippet": "    @Test public void absHandlesRelativeQuery() {\n        Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"https://jsoup.org/path/file?bar\");\n\n        Element a1 = doc.select(\"a\").first();\n        assertEquals(\"https://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n\n        Element a2 = doc.select(\"a\").get(1);\n        assertEquals(\"https://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n    }",
        "begin_line": 118,
        "end_line": 126,
        "comment": "\n    Test for an issue with Java's abs URL handler.\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 127)",
            "(line 121,col 9)-(line 121,col 45)",
            "(line 122,col 9)-(line 122,col 75)",
            "(line 124,col 9)-(line 124,col 44)",
            "(line 125,col 9)-(line 125,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.absHandlesDotFromIndex()",
        "snippet": "    @Test public void absHandlesDotFromIndex() {\n        Document doc = Jsoup.parse(\"<a href='./one/two.html'>One</a>\", \"http://example.com\");\n        Element a1 = doc.select(\"a\").first();\n        assertEquals(\"http://example.com/one/two.html\", a1.absUrl(\"href\"));\n    }",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 93)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 131,col 9)-(line 131,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.testRemove()",
        "snippet": "    @Test public void testRemove() {\n        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n        Element p = doc.select(\"p\").first();\n        p.childNode(0).remove();\n        \n        assertEquals(\"two three\", p.text());\n        assertEquals(\"<span>two</span> three\", TextUtil.stripNewlines(p.html()));\n    }",
        "begin_line": 134,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 72)",
            "(line 136,col 9)-(line 136,col 44)",
            "(line 137,col 9)-(line 137,col 32)",
            "(line 139,col 9)-(line 139,col 44)",
            "(line 140,col 9)-(line 140,col 81)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.testReplace()",
        "snippet": "    @Test public void testReplace() {\n        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n        Element p = doc.select(\"p\").first();\n        Element insert = doc.createElement(\"em\").text(\"foo\");\n        p.childNode(1).replaceWith(insert);\n        \n        assertEquals(\"One <em>foo</em> three\", p.html());\n    }",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 72)",
            "(line 145,col 9)-(line 145,col 44)",
            "(line 146,col 9)-(line 146,col 61)",
            "(line 147,col 9)-(line 147,col 43)",
            "(line 149,col 9)-(line 149,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.ownerDocument()",
        "snippet": "    @Test public void ownerDocument() {\n        Document doc = Jsoup.parse(\"<p>Hello\");\n        Element p = doc.select(\"p\").first();\n        assertTrue(p.ownerDocument() == doc);\n        assertTrue(doc.ownerDocument() == doc);\n        assertNull(doc.parent());\n    }",
        "begin_line": 152,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 47)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 155,col 9)-(line 155,col 45)",
            "(line 156,col 9)-(line 156,col 47)",
            "(line 157,col 9)-(line 157,col 33)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.root()",
        "snippet": "    @Test public void root() {\n        Document doc = Jsoup.parse(\"<div><p>Hello\");\n        Element p = doc.select(\"p\").first();\n        Node root = p.root();\n        assertTrue(doc == root);\n        assertNull(root.parent());\n        assertTrue(doc.root() == doc);\n        assertTrue(doc.root() == doc.ownerDocument());\n\n        Element standAlone = new Element(Tag.valueOf(\"p\"), \"\");\n        assertTrue(standAlone.parent() == null);\n        assertTrue(standAlone.root() == standAlone);\n        assertTrue(standAlone.ownerDocument() == null);\n    }",
        "begin_line": 160,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 52)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 163,col 9)-(line 163,col 29)",
            "(line 164,col 9)-(line 164,col 32)",
            "(line 165,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 38)",
            "(line 167,col 9)-(line 167,col 54)",
            "(line 169,col 9)-(line 169,col 63)",
            "(line 170,col 9)-(line 170,col 48)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.before()",
        "snippet": "    @Test public void before() {\n        Document doc = Jsoup.parse(\"<p>One <b>two</b> three</p>\");\n        Element newNode = new Element(Tag.valueOf(\"em\"), \"\");\n        newNode.appendText(\"four\");\n\n        doc.select(\"b\").first().before(newNode);\n        assertEquals(\"<p>One <em>four</em><b>two</b> three</p>\", doc.body().html());\n\n        doc.select(\"b\").first().before(\"<i>five</i>\");\n        assertEquals(\"<p>One <em>four</em><i>five</i><b>two</b> three</p>\", doc.body().html());\n    }",
        "begin_line": 175,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 66)",
            "(line 177,col 9)-(line 177,col 61)",
            "(line 178,col 9)-(line 178,col 35)",
            "(line 180,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 181,col 84)",
            "(line 183,col 9)-(line 183,col 54)",
            "(line 184,col 9)-(line 184,col 95)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.after()",
        "snippet": "    @Test public void after() {\n        Document doc = Jsoup.parse(\"<p>One <b>two</b> three</p>\");\n        Element newNode = new Element(Tag.valueOf(\"em\"), \"\");\n        newNode.appendText(\"four\");\n\n        doc.select(\"b\").first().after(newNode);\n        assertEquals(\"<p>One <b>two</b><em>four</em> three</p>\", doc.body().html());\n\n        doc.select(\"b\").first().after(\"<i>five</i>\");\n        assertEquals(\"<p>One <b>two</b><i>five</i><em>four</em> three</p>\", doc.body().html());\n    }",
        "begin_line": 187,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 66)",
            "(line 189,col 9)-(line 189,col 61)",
            "(line 190,col 9)-(line 190,col 35)",
            "(line 192,col 9)-(line 192,col 47)",
            "(line 193,col 9)-(line 193,col 84)",
            "(line 195,col 9)-(line 195,col 53)",
            "(line 196,col 9)-(line 196,col 95)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.unwrap()",
        "snippet": "    @Test public void unwrap() {\n        Document doc = Jsoup.parse(\"<div>One <span>Two <b>Three</b></span> Four</div>\");\n        Element span = doc.select(\"span\").first();\n        Node twoText = span.childNode(0);\n        Node node = span.unwrap();\n\n        assertEquals(\"<div>One Two <b>Three</b> Four</div>\", TextUtil.stripNewlines(doc.body().html()));\n        assertTrue(node instanceof TextNode);\n        assertEquals(\"Two \", ((TextNode) node).text());\n        assertEquals(node, twoText);\n        assertEquals(node.parent(), doc.select(\"div\").first());\n    }",
        "begin_line": 199,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 88)",
            "(line 201,col 9)-(line 201,col 50)",
            "(line 202,col 9)-(line 202,col 41)",
            "(line 203,col 9)-(line 203,col 34)",
            "(line 205,col 9)-(line 205,col 104)",
            "(line 206,col 9)-(line 206,col 45)",
            "(line 207,col 9)-(line 207,col 55)",
            "(line 208,col 9)-(line 208,col 36)",
            "(line 209,col 9)-(line 209,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.unwrapNoChildren()",
        "snippet": "    @Test public void unwrapNoChildren() {\n        Document doc = Jsoup.parse(\"<div>One <span></span> Two</div>\");\n        Element span = doc.select(\"span\").first();\n        Node node = span.unwrap();\n        assertEquals(\"<div>One  Two</div>\", TextUtil.stripNewlines(doc.body().html()));\n        assertTrue(node == null);\n    }",
        "begin_line": 212,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 71)",
            "(line 214,col 9)-(line 214,col 50)",
            "(line 215,col 9)-(line 215,col 34)",
            "(line 216,col 9)-(line 216,col 87)",
            "(line 217,col 9)-(line 217,col 33)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.traverse()",
        "snippet": "    @Test public void traverse() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        doc.select(\"div\").first().traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n            }\n\n            public void tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n            }\n        });\n        assertEquals(\"<div><p><#text></#text></p></div>\", accum.toString());\n    }",
        "begin_line": 220,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 78)",
            "(line 222,col 9)-(line 222,col 56)",
            "(line 223,col 9)-(line 231,col 11)",
            "(line 232,col 9)-(line 232,col 76)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.Anonymous-e41d8a67-5946-4ab9-b84b-42755fae7fe8.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public void head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n            }",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 17)-(line 225,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.Anonymous-d8abfa31-d351-43cb-b615-02946bcdbf7c.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public void tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n            }",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 229,col 17)-(line 229,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.orphanNodeReturnsNullForSiblingElements()",
        "snippet": "    @Test public void orphanNodeReturnsNullForSiblingElements() {\n        Node node = new Element(Tag.valueOf(\"p\"), \"\");\n        Element el = new Element(Tag.valueOf(\"p\"), \"\");\n\n        assertEquals(0, node.siblingIndex());\n        assertEquals(0, node.siblingNodes().size());\n\n        assertNull(node.previousSibling());\n        assertNull(node.nextSibling());\n\n        assertEquals(0, el.siblingElements().size());\n        assertNull(el.previousElementSibling());\n        assertNull(el.nextElementSibling());\n    }",
        "begin_line": 235,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 54)",
            "(line 237,col 9)-(line 237,col 55)",
            "(line 239,col 9)-(line 239,col 45)",
            "(line 240,col 9)-(line 240,col 52)",
            "(line 242,col 9)-(line 242,col 43)",
            "(line 243,col 9)-(line 243,col 39)",
            "(line 245,col 9)-(line 245,col 53)",
            "(line 246,col 9)-(line 246,col 48)",
            "(line 247,col 9)-(line 247,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.nodeIsNotASiblingOfItself()",
        "snippet": "    @Test public void nodeIsNotASiblingOfItself() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());\n        List<Node> nodes = p2.siblingNodes();\n        assertEquals(2, nodes.size());\n        assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());\n        assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());\n    }",
        "begin_line": 250,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 70)",
            "(line 252,col 9)-(line 252,col 44)",
            "(line 254,col 9)-(line 254,col 39)",
            "(line 255,col 9)-(line 255,col 45)",
            "(line 256,col 9)-(line 256,col 38)",
            "(line 257,col 9)-(line 257,col 61)",
            "(line 258,col 9)-(line 258,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.childNodesCopy()",
        "snippet": "    @Test public void childNodesCopy() {\n        Document doc = Jsoup.parse(\"<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>\");\n        Element div1 = doc.select(\"#1\").first();\n        Element div2 = doc.select(\"#2\").first();\n        List<Node> divChildren = div1.childNodesCopy();\n        assertEquals(5, divChildren.size());\n        TextNode tn1 = (TextNode) div1.childNode(0);\n        TextNode tn2 = (TextNode) divChildren.get(0);\n        tn2.text(\"Text 1 updated\");\n        assertEquals(\"Text 1 \", tn1.text());\n        div2.insertChildren(-1, divChildren);\n        assertEquals(\"<div id=\\\"1\\\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\\\"2\\\">Text 1 updated\"\n            +\"<p>One</p> Text 2 <p>Two</p><p>Three</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 261,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 262,col 9)-(line 262,col 104)",
            "(line 263,col 9)-(line 263,col 48)",
            "(line 264,col 9)-(line 264,col 48)",
            "(line 265,col 9)-(line 265,col 55)",
            "(line 266,col 9)-(line 266,col 44)",
            "(line 267,col 9)-(line 267,col 52)",
            "(line 268,col 9)-(line 268,col 53)",
            "(line 269,col 9)-(line 269,col 35)",
            "(line 270,col 9)-(line 270,col 44)",
            "(line 271,col 9)-(line 271,col 45)",
            "(line 272,col 9)-(line 273,col 106)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.supportsClone()",
        "snippet": "    @Test public void supportsClone() {\n        Document doc = org.jsoup.Jsoup.parse(\"<div class=foo>Text</div>\");\n        Element el = doc.select(\"div\").first();\n        assertTrue(el.hasClass(\"foo\"));\n\n        Element elClone = doc.clone().select(\"div\").first();\n        assertTrue(elClone.hasClass(\"foo\"));\n        assertTrue(elClone.text().equals(\"Text\"));\n\n        el.removeClass(\"foo\");\n        el.text(\"None\");\n        assertFalse(el.hasClass(\"foo\"));\n        assertTrue(elClone.hasClass(\"foo\"));\n        assertTrue(el.text().equals(\"None\"));\n        assertTrue(elClone.text().equals(\"Text\"));\n    }",
        "begin_line": 276,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 74)",
            "(line 278,col 9)-(line 278,col 47)",
            "(line 279,col 9)-(line 279,col 39)",
            "(line 281,col 9)-(line 281,col 60)",
            "(line 282,col 9)-(line 282,col 44)",
            "(line 283,col 9)-(line 283,col 50)",
            "(line 285,col 9)-(line 285,col 30)",
            "(line 286,col 9)-(line 286,col 24)",
            "(line 287,col 9)-(line 287,col 40)",
            "(line 288,col 9)-(line 288,col 44)",
            "(line 289,col 9)-(line 289,col 45)",
            "(line 290,col 9)-(line 290,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()",
        "snippet": "    @Test public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive() {\n        Document document = Jsoup.parse(\"<INPUT id=\\\"foo\\\" NAME=\\\"foo\\\" VALUE=\\\"\\\">\");\n        Element inputElement = document.select(\"#foo\").first();\n\n        inputElement.attr(\"value\",\"bar\");\n\n        assertEquals(singletonAttributes(\"value\", \"bar\"), getAttributesCaseInsensitive(inputElement, \"value\"));\n    }",
        "begin_line": 293,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 86)",
            "(line 295,col 9)-(line 295,col 63)",
            "(line 297,col 9)-(line 297,col 41)",
            "(line 299,col 9)-(line 299,col 111)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.getAttributesCaseInsensitive(org.jsoup.nodes.Element, java.lang.String)",
        "snippet": "    private Attributes getAttributesCaseInsensitive(Element element, String attributeName) {\n        Attributes matches = new Attributes();\n        for (Attribute attribute : element.attributes()) {\n            if (attribute.getKey().equalsIgnoreCase(attributeName)) {\n                matches.put(attribute);\n            }\n        }\n        return matches;\n    }",
        "begin_line": 302,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 46)",
            "(line 304,col 9)-(line 308,col 9)",
            "(line 309,col 9)-(line 309,col 23)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.NodeTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "signature": "org.jsoup.nodes.NodeTest.singletonAttributes(java.lang.String, java.lang.String)",
        "snippet": "    private Attributes singletonAttributes(String key, String value) {\n        Attributes attributes = new Attributes();\n        attributes.put(key, value);\n        return attributes;\n    }",
        "begin_line": 312,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 49)",
            "(line 314,col 9)-(line 314,col 35)",
            "(line 315,col 9)-(line 315,col 26)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.setTextPreservesDocumentStructure()",
        "snippet": "    @Test public void setTextPreservesDocumentStructure() {\n        Document doc = Jsoup.parse(\"<p>Hello</p>\");\n        doc.text(\"Replaced\");\n        assertEquals(\"Replaced\", doc.text());\n        assertEquals(\"Replaced\", doc.body().text());\n        assertEquals(1, doc.select(\"head\").size());\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 51)",
            "(line 37,col 9)-(line 37,col 29)",
            "(line 38,col 9)-(line 38,col 45)",
            "(line 39,col 9)-(line 39,col 52)",
            "(line 40,col 9)-(line 40,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testTitles()",
        "snippet": "    @Test public void testTitles() {\n        Document noTitle = Jsoup.parse(\"<p>Hello</p>\");\n        Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\");\n        \n        assertEquals(\"\", noTitle.title());\n        noTitle.title(\"Hello\");\n        assertEquals(\"Hello\", noTitle.title());\n        assertEquals(\"Hello\", noTitle.select(\"title\").first().text());\n        \n        assertEquals(\"First\", withTitle.title());\n        withTitle.title(\"Hello\");\n        assertEquals(\"Hello\", withTitle.title());\n        assertEquals(\"Hello\", withTitle.select(\"title\").first().text());\n\n        Document normaliseTitle = Jsoup.parse(\"<title>   Hello\\nthere   \\n   now   \\n\");\n        assertEquals(\"Hello there now\", normaliseTitle.title());\n    }",
        "begin_line": 43,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 55)",
            "(line 45,col 9)-(line 45,col 98)",
            "(line 47,col 9)-(line 47,col 42)",
            "(line 48,col 9)-(line 48,col 31)",
            "(line 49,col 9)-(line 49,col 47)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 52,col 9)-(line 52,col 49)",
            "(line 53,col 9)-(line 53,col 33)",
            "(line 54,col 9)-(line 54,col 49)",
            "(line 55,col 9)-(line 55,col 72)",
            "(line 57,col 9)-(line 57,col 88)",
            "(line 58,col 9)-(line 58,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testOutputEncoding()",
        "snippet": "    @Test public void testOutputEncoding() {\n        Document doc = Jsoup.parse(\"<p title=\u03c0>\u03c0 & < > </p>\");\n        // default is utf-8\n        assertEquals(\"<p title=\\\"\u03c0\\\">\u03c0 &amp; &lt; &gt; </p>\", doc.body().html());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().name());\n\n        doc.outputSettings().charset(\"ascii\");\n        assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());\n        assertEquals(\"<p title=\\\"&#x3c0;\\\">&#x3c0; &amp; &lt; &gt; </p>\", doc.body().html());\n\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n        assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt; </p>\", doc.body().html());\n    }",
        "begin_line": 61,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 62)",
            "(line 64,col 9)-(line 64,col 81)",
            "(line 65,col 9)-(line 65,col 69)",
            "(line 67,col 9)-(line 67,col 46)",
            "(line 68,col 9)-(line 68,col 82)",
            "(line 69,col 9)-(line 69,col 93)",
            "(line 71,col 9)-(line 71,col 70)",
            "(line 72,col 9)-(line 72,col 87)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testXhtmlReferences()",
        "snippet": "    @Test public void testXhtmlReferences() {\n        Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n        assertEquals(\"&lt; &gt; &amp; \\\" ' \u00d7\", doc.body().html());\n    }",
        "begin_line": 75,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 76)",
            "(line 77,col 9)-(line 77,col 67)",
            "(line 78,col 9)-(line 78,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testNormalisesStructure()",
        "snippet": "    @Test public void testNormalisesStructure() {\n        Document doc = Jsoup.parse(\"<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>\");\n        assertEquals(\"<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 152)",
            "(line 83,col 9)-(line 83,col 176)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testClone()",
        "snippet": "    @Test public void testClone() {\n        Document doc = Jsoup.parse(\"<title>Hello</title> <p>One<p>Two\");\n        Document clone = doc.clone();\n\n        assertEquals(\"<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>\", TextUtil.stripNewlines(clone.html()));\n        clone.title(\"Hello there\");\n        clone.select(\"p\").first().text(\"One more\").attr(\"id\", \"1\");\n        assertEquals(\"<html><head><title>Hello there</title> </head><body><p id=\\\"1\\\">One more</p><p>Two</p></body></html>\", TextUtil.stripNewlines(clone.html()));\n        assertEquals(\"<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }",
        "begin_line": 86,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 72)",
            "(line 88,col 9)-(line 88,col 37)",
            "(line 90,col 9)-(line 90,col 143)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 67)",
            "(line 93,col 9)-(line 93,col 163)",
            "(line 94,col 9)-(line 94,col 141)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testClonesDeclarations()",
        "snippet": "    @Test public void testClonesDeclarations() {\n        Document doc = Jsoup.parse(\"<!DOCTYPE html><html><head><title>Doctype test\");\n        Document clone = doc.clone();\n\n        assertEquals(doc.html(), clone.html());\n        assertEquals(\"<!doctype html><html><head><title>Doctype test</title></head><body></body></html>\",\n                TextUtil.stripNewlines(clone.html()));\n    }",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 85)",
            "(line 99,col 9)-(line 99,col 37)",
            "(line 101,col 9)-(line 101,col 47)",
            "(line 102,col 9)-(line 103,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testLocation()",
        "snippet": "    @Test public void testLocation() throws IOException {\n    \tFile in = new ParseTest().getFile(\"/htmltests/yahoo-jp.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.yahoo.co.jp/index.html\");\n        String location = doc.location();\n        String baseUri = doc.baseUri();\n        assertEquals(\"http://www.yahoo.co.jp/index.html\",location);\n        assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/\",baseUri);\n        in = new ParseTest().getFile(\"/htmltests/nyt-article-1.html\");\n        doc = Jsoup.parse(in, null, \"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\");\n        location = doc.location();\n        baseUri = doc.baseUri();\n        assertEquals(\"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\",location);\n        assertEquals(\"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\",baseUri);\n    }",
        "begin_line": 106,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 107,col 6)-(line 107,col 67)",
            "(line 108,col 9)-(line 108,col 85)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 39)",
            "(line 111,col 9)-(line 111,col 67)",
            "(line 112,col 9)-(line 112,col 118)",
            "(line 113,col 9)-(line 113,col 70)",
            "(line 114,col 9)-(line 114,col 102)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 116,col 9)-(line 116,col 32)",
            "(line 117,col 9)-(line 117,col 96)",
            "(line 118,col 9)-(line 118,col 95)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testHtmlAndXmlSyntax()",
        "snippet": "    @Test public void testHtmlAndXmlSyntax() {\n        String h = \"<!DOCTYPE html><body><img async checked='checked' src='&<>\\\"'>&lt;&gt;&amp;&quot;<foo />bar\";\n        Document doc = Jsoup.parse(h);\n\n        doc.outputSettings().syntax(Syntax.html);\n        assertEquals(\"<!doctype html>\\n\" +\n                \"<html>\\n\" +\n                \" <head></head>\\n\" +\n                \" <body>\\n\" +\n                \"  <img async checked src=\\\"&amp;<>&quot;\\\">&lt;&gt;&amp;\\\"\\n\" +\n                \"  <foo />bar\\n\" +\n                \" </body>\\n\" +\n                \"</html>\", doc.html());\n\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        assertEquals(\"<!DOCTYPE html>\\n\" +\n                \"<html>\\n\" +\n                \" <head></head>\\n\" +\n                \" <body>\\n\" +\n                \"  <img async=\\\"\\\" checked=\\\"checked\\\" src=\\\"&amp;<>&quot;\\\" />&lt;&gt;&amp;\\\"\\n\" +\n                \"  <foo />bar\\n\" +\n                \" </body>\\n\" +\n                \"</html>\", doc.html());\n    }",
        "begin_line": 121,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 113)",
            "(line 123,col 9)-(line 123,col 38)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 126,col 9)-(line 133,col 39)",
            "(line 135,col 9)-(line 135,col 72)",
            "(line 136,col 9)-(line 143,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.htmlParseDefaultsToHtmlOutputSyntax()",
        "snippet": "    @Test public void htmlParseDefaultsToHtmlOutputSyntax() {\n        Document doc = Jsoup.parse(\"x\");\n        assertEquals(Syntax.html, doc.outputSettings().syntax());\n    }",
        "begin_line": 146,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 40)",
            "(line 148,col 9)-(line 148,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testHtmlAppendable()",
        "snippet": "    @Test public void testHtmlAppendable() {\n    \tString htmlContent = \"<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>\";\n    \tDocument document = Jsoup.parse(htmlContent);\n    \tOutputSettings outputSettings = new OutputSettings();\n    \t\n    \toutputSettings.prettyPrint(false);\n    \tdocument.outputSettings(outputSettings);\n    \tassertEquals(htmlContent, document.html(new StringWriter()).toString());\n    }",
        "begin_line": 151,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 152,col 6)-(line 152,col 108)",
            "(line 153,col 6)-(line 153,col 50)",
            "(line 154,col 6)-(line 154,col 58)",
            "(line 156,col 6)-(line 156,col 39)",
            "(line 157,col 6)-(line 157,col 45)",
            "(line 158,col 6)-(line 158,col 77)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testOverflowClone()",
        "snippet": "    @Ignore\n    @Test public void testOverflowClone() {\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < 100000; i++) {\n            builder.insert(0, \"<i>\");\n            builder.append(\"</i>\");\n        }\n\n        Document doc = Jsoup.parse(builder.toString());\n        doc.clone();\n    }",
        "begin_line": 162,
        "end_line": 172,
        "comment": " Ignored since this test can take awhile to run.",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 52)",
            "(line 165,col 9)-(line 168,col 9)",
            "(line 170,col 9)-(line 170,col 55)",
            "(line 171,col 9)-(line 171,col 20)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.DocumentsWithSameContentAreEqual()",
        "snippet": "    @Test public void DocumentsWithSameContentAreEqual() throws Exception {\n        Document docA = Jsoup.parse(\"<div/>One\");\n        Document docB = Jsoup.parse(\"<div/>One\");\n        Document docC = Jsoup.parse(\"<div/>Two\");\n\n        assertFalse(docA.equals(docB));\n        assertTrue(docA.equals(docA));\n        assertEquals(docA.hashCode(), docA.hashCode());\n        assertFalse(docA.hashCode() == docC.hashCode());\n    }",
        "begin_line": 174,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 49)",
            "(line 176,col 9)-(line 176,col 49)",
            "(line 177,col 9)-(line 177,col 49)",
            "(line 179,col 9)-(line 179,col 39)",
            "(line 180,col 9)-(line 180,col 38)",
            "(line 181,col 9)-(line 181,col 55)",
            "(line 182,col 9)-(line 182,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.DocumentsWithSameContentAreVerifialbe()",
        "snippet": "    @Test public void DocumentsWithSameContentAreVerifialbe() throws Exception {\n        Document docA = Jsoup.parse(\"<div/>One\");\n        Document docB = Jsoup.parse(\"<div/>One\");\n        Document docC = Jsoup.parse(\"<div/>Two\");\n\n        assertTrue(docA.hasSameValue(docB));\n        assertFalse(docA.hasSameValue(docC));\n    }",
        "begin_line": 185,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 49)",
            "(line 187,col 9)-(line 187,col 49)",
            "(line 188,col 9)-(line 188,col 49)",
            "(line 190,col 9)-(line 190,col 44)",
            "(line 191,col 9)-(line 191,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateUtf8()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateUtf8() {\n        final Document doc = createHtmlDocument(\"changeThis\");\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlCharsetUTF8, doc.toString());\n        \n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertEquals(charsetUtf8, doc.charset().name());\n        assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }",
        "begin_line": 194,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 62)",
            "(line 197,col 9)-(line 197,col 43)",
            "(line 198,col 9)-(line 198,col 50)",
            "(line 200,col 9)-(line 205,col 50)",
            "(line 206,col 9)-(line 206,col 54)",
            "(line 208,col 9)-(line 208,col 70)",
            "(line 209,col 9)-(line 209,col 56)",
            "(line 210,col 9)-(line 210,col 67)",
            "(line 211,col 9)-(line 211,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateIso8859()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateIso8859() {\n        final Document doc = createHtmlDocument(\"changeThis\");\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n        \n        final String htmlCharsetISO = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlCharsetISO, doc.toString());\n        \n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertEquals(charsetIso8859, doc.charset().name());\n        assertEquals(charsetIso8859, selectedElement.attr(\"charset\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }",
        "begin_line": 214,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 62)",
            "(line 217,col 9)-(line 217,col 43)",
            "(line 218,col 9)-(line 218,col 53)",
            "(line 220,col 9)-(line 225,col 50)",
            "(line 226,col 9)-(line 226,col 53)",
            "(line 228,col 9)-(line 228,col 70)",
            "(line 229,col 9)-(line 229,col 59)",
            "(line 230,col 9)-(line 230,col 70)",
            "(line 231,col 9)-(line 231,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateNoCharset()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateNoCharset() {\n        final Document docNoCharset = Document.createShell(\"\");\n        docNoCharset.updateMetaCharsetElement(true);\n        docNoCharset.charset(Charset.forName(charsetUtf8));\n        \n        assertEquals(charsetUtf8, docNoCharset.select(\"meta[charset]\").first().attr(\"charset\"));\n        \n        final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlCharsetUTF8, docNoCharset.toString()); \n    }",
        "begin_line": 234,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 63)",
            "(line 237,col 9)-(line 237,col 52)",
            "(line 238,col 9)-(line 238,col 59)",
            "(line 240,col 9)-(line 240,col 96)",
            "(line 242,col 9)-(line 247,col 50)",
            "(line 248,col 9)-(line 248,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateDisabled()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateDisabled() {\n        final Document docDisabled = Document.createShell(\"\");\n        \n        final String htmlNoCharset = \"<html>\\n\" +\n                                        \" <head></head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlNoCharset, docDisabled.toString());\n        assertNull(docDisabled.select(\"meta[charset]\").first());\n    }",
        "begin_line": 251,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 62)",
            "(line 255,col 9)-(line 258,col 50)",
            "(line 259,col 9)-(line 259,col 60)",
            "(line 260,col 9)-(line 260,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateDisabledNoChanges()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateDisabledNoChanges() {\n        final Document doc = createHtmlDocument(\"dontTouch\");\n        \n        final String htmlCharset = \"<html>\\n\" +\n                                    \" <head>\\n\" +\n                                    \"  <meta charset=\\\"dontTouch\\\">\\n\" +\n                                    \"  <meta name=\\\"charset\\\" content=\\\"dontTouch\\\">\\n\" +\n                                    \" </head>\\n\" +\n                                    \" <body></body>\\n\" +\n                                    \"</html>\";\n        assertEquals(htmlCharset, doc.toString());\n        \n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertNotNull(selectedElement);\n        assertEquals(\"dontTouch\", selectedElement.attr(\"charset\"));\n        \n        selectedElement = doc.select(\"meta[name=charset]\").first();\n        assertNotNull(selectedElement);\n        assertEquals(\"dontTouch\", selectedElement.attr(\"content\"));\n    }",
        "begin_line": 263,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 61)",
            "(line 267,col 9)-(line 273,col 46)",
            "(line 274,col 9)-(line 274,col 50)",
            "(line 276,col 9)-(line 276,col 70)",
            "(line 277,col 9)-(line 277,col 39)",
            "(line 278,col 9)-(line 278,col 67)",
            "(line 280,col 9)-(line 280,col 67)",
            "(line 281,col 9)-(line 281,col 39)",
            "(line 282,col 9)-(line 282,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateEnabledAfterCharsetChange()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateEnabledAfterCharsetChange() {\n        final Document doc = createHtmlDocument(\"dontTouch\");\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n        assertTrue(doc.select(\"meta[name=charset]\").isEmpty());\n    }",
        "begin_line": 285,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 61)",
            "(line 288,col 9)-(line 288,col 50)",
            "(line 290,col 9)-(line 290,col 70)",
            "(line 291,col 9)-(line 291,col 67)",
            "(line 292,col 9)-(line 292,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateCleanup()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateCleanup() {\n        final Document doc = createHtmlDocument(\"dontTouch\");\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        \n        assertEquals(htmlCharsetUTF8, doc.toString());\n    }",
        "begin_line": 295,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 61)",
            "(line 298,col 9)-(line 298,col 43)",
            "(line 299,col 9)-(line 299,col 50)",
            "(line 301,col 9)-(line 306,col 50)",
            "(line 308,col 9)-(line 308,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlUtf8()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateXmlUtf8() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetUTF8, doc.toString());\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, doc.charset().name());\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }",
        "begin_line": 311,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 74)",
            "(line 314,col 9)-(line 314,col 43)",
            "(line 315,col 9)-(line 315,col 50)",
            "(line 317,col 9)-(line 320,col 50)",
            "(line 321,col 9)-(line 321,col 53)",
            "(line 323,col 9)-(line 323,col 72)",
            "(line 324,col 9)-(line 324,col 56)",
            "(line 325,col 9)-(line 325,col 65)",
            "(line 326,col 9)-(line 326,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlIso8859()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateXmlIso8859() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n        \n        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetISO, doc.toString());\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetIso8859, doc.charset().name());\n        assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }",
        "begin_line": 329,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 74)",
            "(line 332,col 9)-(line 332,col 43)",
            "(line 333,col 9)-(line 333,col 53)",
            "(line 335,col 9)-(line 338,col 50)",
            "(line 339,col 9)-(line 339,col 52)",
            "(line 341,col 9)-(line 341,col 72)",
            "(line 342,col 9)-(line 342,col 59)",
            "(line 343,col 9)-(line 343,col 68)",
            "(line 344,col 9)-(line 344,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlNoCharset()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateXmlNoCharset() {\n        final Document doc = createXmlDocument(\"1.0\", \"none\", false);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetUTF8, doc.toString());\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n    }",
        "begin_line": 347,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 69)",
            "(line 350,col 9)-(line 350,col 43)",
            "(line 351,col 9)-(line 351,col 50)",
            "(line 353,col 9)-(line 356,col 50)",
            "(line 357,col 9)-(line 357,col 53)",
            "(line 359,col 9)-(line 359,col 72)",
            "(line 360,col 9)-(line 360,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlDisabled()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateXmlDisabled() {\n        final Document doc = createXmlDocument(\"none\", \"none\", false);\n        \n        final String xmlNoCharset = \"<root>\\n\" +\n                                    \" node\\n\" +\n                                    \"</root>\";\n        assertEquals(xmlNoCharset, doc.toString());\n    }",
        "begin_line": 363,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 70)",
            "(line 367,col 9)-(line 369,col 46)",
            "(line 370,col 9)-(line 370,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlDisabledNoChanges()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdateXmlDisabledNoChanges() {\n        final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n        \n        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\"?>\\n\" +\n                                    \"<root>\\n\" +\n                                    \" node\\n\" +\n                                    \"</root>\";\n        assertEquals(xmlCharset, doc.toString());\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));\n        assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));\n    }",
        "begin_line": 373,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 79)",
            "(line 377,col 9)-(line 380,col 46)",
            "(line 381,col 9)-(line 381,col 49)",
            "(line 383,col 9)-(line 383,col 72)",
            "(line 384,col 9)-(line 384,col 65)",
            "(line 385,col 9)-(line 385,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdatedDisabledPerDefault()",
        "snippet": "    @Test\n    public void testMetaCharsetUpdatedDisabledPerDefault() {\n        final Document doc = createHtmlDocument(\"none\");\n        assertFalse(doc.updateMetaCharsetElement());\n    }",
        "begin_line": 388,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 56)",
            "(line 391,col 9)-(line 391,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.createHtmlDocument(java.lang.String)",
        "snippet": "    private Document createHtmlDocument(String charset) {\n        final Document doc = Document.createShell(\"\");\n        doc.head().appendElement(\"meta\").attr(\"charset\", charset);\n        doc.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", charset);\n        \n        return doc;\n    }",
        "begin_line": 394,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 54)",
            "(line 396,col 9)-(line 396,col 66)",
            "(line 397,col 9)-(line 397,col 90)",
            "(line 399,col 9)-(line 399,col 19)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.createXmlDocument(java.lang.String, java.lang.String, boolean)",
        "snippet": "    private Document createXmlDocument(String version, String charset, boolean addDecl) {\n        final Document doc = new Document(\"\");\n        doc.appendElement(\"root\").text(\"node\");\n        doc.outputSettings().syntax(Syntax.xml);\n        \n        if(addDecl) {\n            XmlDeclaration decl = new XmlDeclaration(\"xml\", false);\n            decl.attr(\"version\", version);\n            decl.attr(\"encoding\", charset);\n            doc.prependChild(decl);\n        }\n        \n        return doc;\n    }",
        "begin_line": 402,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 46)",
            "(line 404,col 9)-(line 404,col 47)",
            "(line 405,col 9)-(line 405,col 48)",
            "(line 407,col 9)-(line 412,col 9)",
            "(line 414,col 9)-(line 414,col 19)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.testShiftJisRoundtrip()",
        "snippet": "    @Test\n    public void testShiftJisRoundtrip() throws Exception {\n        String input =\n                \"<html>\"\n                        +   \"<head>\"\n                        +     \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=Shift_JIS\\\" />\"\n                        +   \"</head>\"\n                        +   \"<body>\"\n                        +     \"before&nbsp;after\"\n                        +   \"</body>\"\n                        + \"</html>\";\n        InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(\"ASCII\")));\n\n        Document doc = Jsoup.parse(is, null, \"http://example.com\");\n        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n\n        String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());\n\n        assertFalse(\"Should not have contained a '?'.\", output.contains(\"?\"));\n        assertTrue(\"Should have contained a '&#xa0;' or a '&nbsp;'.\",\n                output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"));\n    }",
        "begin_line": 417,
        "end_line": 438,
        "comment": "",
        "child_ranges": [
            "(line 419,col 9)-(line 427,col 36)",
            "(line 428,col 9)-(line 428,col 92)",
            "(line 430,col 9)-(line 430,col 67)",
            "(line 431,col 9)-(line 431,col 67)",
            "(line 433,col 9)-(line 433,col 120)",
            "(line 435,col 9)-(line 435,col 78)",
            "(line 436,col 9)-(line 437,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.parseAndHtmlOnDifferentThreads()",
        "snippet": "    @Test public void parseAndHtmlOnDifferentThreads() throws InterruptedException {\n        String html = \"<p>Alrighty then it's not \\uD83D\\uDCA9. <span>Next</span></p>\"; // \ud83d\udca9\n        String asci = \"<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>\";\n\n        final Document doc = Jsoup.parse(html);\n        final String[] out = new String[1];\n        final Elements p = doc.select(\"p\");\n        assertEquals(html, p.outerHtml());\n\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                out[0] = p.outerHtml();\n                doc.outputSettings().charset(StandardCharsets.US_ASCII);\n            }\n        });\n        thread.start();\n        thread.join();\n\n        assertEquals(html, out[0]);\n        assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset());\n        assertEquals(asci, p.outerHtml());\n    }",
        "begin_line": 440,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 86)",
            "(line 442,col 9)-(line 442,col 83)",
            "(line 444,col 9)-(line 444,col 47)",
            "(line 445,col 9)-(line 445,col 43)",
            "(line 446,col 9)-(line 446,col 43)",
            "(line 447,col 9)-(line 447,col 42)",
            "(line 449,col 9)-(line 455,col 11)",
            "(line 456,col 9)-(line 456,col 23)",
            "(line 457,col 9)-(line 457,col 22)",
            "(line 459,col 9)-(line 459,col 35)",
            "(line 460,col 9)-(line 460,col 80)",
            "(line 461,col 9)-(line 461,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.DocumentTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "signature": "org.jsoup.nodes.DocumentTest.Anonymous-1e9f5b45-fee3-4a57-a40d-65ca81872456.run()",
        "snippet": "            @Override\n            public void run() {\n                out[0] = p.outerHtml();\n                doc.outputSettings().charset(StandardCharsets.US_ASCII);\n            }",
        "begin_line": 450,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 452,col 17)-(line 452,col 39)",
            "(line 453,col 17)-(line 453,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.escape()",
        "snippet": "    @Test public void escape() {\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\";\n        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n        String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n        String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(xhtml));\n        String escapedUtfFull = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(extended));\n        String escapedUtfMin = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(xhtml));\n\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;\", escapedAscii);\n        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;\", escapedAsciiFull);\n        assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;\", escapedAsciiXhtml);\n        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\", escapedUtfFull);\n        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\", escapedUtfMin);\n        // odd that it's defined as aring in base but angst in full\n\n        // round trip\n        assertEquals(text, Entities.unescape(escapedAscii));\n        assertEquals(text, Entities.unescape(escapedAsciiFull));\n        assertEquals(text, Entities.unescape(escapedAsciiXhtml));\n        assertEquals(text, Entities.unescape(escapedUtfFull));\n        assertEquals(text, Entities.unescape(escapedUtfMin));\n    }",
        "begin_line": 11,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 12,col 9)-(line 12,col 54)",
            "(line 13,col 9)-(line 13,col 108)",
            "(line 14,col 9)-(line 14,col 116)",
            "(line 15,col 9)-(line 15,col 114)",
            "(line 16,col 9)-(line 16,col 114)",
            "(line 17,col 9)-(line 17,col 110)",
            "(line 19,col 9)-(line 19,col 121)",
            "(line 20,col 9)-(line 20,col 122)",
            "(line 21,col 9)-(line 21,col 121)",
            "(line 22,col 9)-(line 22,col 80)",
            "(line 23,col 9)-(line 23,col 79)",
            "(line 27,col 9)-(line 27,col 60)",
            "(line 28,col 9)-(line 28,col 64)",
            "(line 29,col 9)-(line 29,col 65)",
            "(line 30,col 9)-(line 30,col 62)",
            "(line 31,col 9)-(line 31,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.escapedSupplemtary()",
        "snippet": "    @Test public void escapedSupplemtary() {\n        String text = \"\\uD835\\uDD59\";\n        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n        assertEquals(\"&#x1d559;\", escapedAscii);\n        String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n        assertEquals(\"&hopf;\", escapedAsciiFull);\n        String escapedUtf= Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(extended));\n        assertEquals(text, escapedUtf);\n    }",
        "begin_line": 34,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 37)",
            "(line 36,col 9)-(line 36,col 108)",
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 116)",
            "(line 39,col 9)-(line 39,col 49)",
            "(line 40,col 9)-(line 40,col 109)",
            "(line 41,col 9)-(line 41,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.unescapeMultiChars()",
        "snippet": "    @Test public void unescapeMultiChars() {\n        String text = \"&NestedGreaterGreater; &nGg; &nGt; &nGtv; &Gt; &gg;\"; // gg is not combo, but 8811 could conflict with NestedGreaterGreater or others\n        String un = \"\u226b \u22d9\u0338 \u226b\u20d2 \u226b\u0338 \u226b \u226b\";\n        assertEquals(un, Entities.unescape(text));\n        String escaped = Entities.escape(un, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n        assertEquals(\"&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;\", escaped);\n        assertEquals(un, Entities.unescape(escaped));\n    }",
        "begin_line": 44,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 76)",
            "(line 46,col 9)-(line 46,col 37)",
            "(line 47,col 9)-(line 47,col 50)",
            "(line 48,col 9)-(line 48,col 105)",
            "(line 49,col 9)-(line 49,col 85)",
            "(line 50,col 9)-(line 50,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.xhtml()",
        "snippet": "    @Test public void xhtml() {\n        String text = \"&amp; &gt; &lt; &quot;\";\n        assertEquals(38, xhtml.codepointForName(\"amp\"));\n        assertEquals(62, xhtml.codepointForName(\"gt\"));\n        assertEquals(60, xhtml.codepointForName(\"lt\"));\n        assertEquals(34, xhtml.codepointForName(\"quot\"));\n\n        assertEquals(\"amp\", xhtml.nameForCodepoint(38));\n        assertEquals(\"gt\", xhtml.nameForCodepoint(62));\n        assertEquals(\"lt\", xhtml.nameForCodepoint(60));\n        assertEquals(\"quot\", xhtml.nameForCodepoint(34));\n    }",
        "begin_line": 53,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 47)",
            "(line 55,col 9)-(line 55,col 56)",
            "(line 56,col 9)-(line 56,col 55)",
            "(line 57,col 9)-(line 57,col 55)",
            "(line 58,col 9)-(line 58,col 57)",
            "(line 60,col 9)-(line 60,col 56)",
            "(line 61,col 9)-(line 61,col 55)",
            "(line 62,col 9)-(line 62,col 55)",
            "(line 63,col 9)-(line 63,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.getByName()",
        "snippet": "    @Test public void getByName() {\n        assertEquals(\"\u226b\u20d2\", Entities.getByName(\"nGt\"));\n        assertEquals(\"fj\", Entities.getByName(\"fjlig\"));\n        assertEquals(\"\u226b\", Entities.getByName(\"gg\"));\n        assertEquals(\"\u00a9\", Entities.getByName(\"copy\"));\n    }",
        "begin_line": 66,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 54)",
            "(line 68,col 9)-(line 68,col 56)",
            "(line 69,col 9)-(line 69,col 52)",
            "(line 70,col 9)-(line 70,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.escapeSupplementaryCharacter()",
        "snippet": "    @Test public void escapeSupplementaryCharacter() {\n        String text = new String(Character.toChars(135361));\n        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n        assertEquals(\"&#x210c1;\", escapedAscii);\n        String escapedUtf = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n        assertEquals(text, escapedUtf);\n    }",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 60)",
            "(line 75,col 9)-(line 75,col 108)",
            "(line 76,col 9)-(line 76,col 48)",
            "(line 77,col 9)-(line 77,col 106)",
            "(line 78,col 9)-(line 78,col 39)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.notMissingMultis()",
        "snippet": "    @Test public void notMissingMultis() {\n        String text = \"&nparsl;\";\n        String un = \"\\u2AFD\\u20E5\";\n        assertEquals(un, Entities.unescape(text));\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 33)",
            "(line 83,col 9)-(line 83,col 35)",
            "(line 84,col 9)-(line 84,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.notMissingSupplementals()",
        "snippet": "    @Test public void notMissingSupplementals() {\n        String text = \"&npolint; &qfr;\";\n        String un = \"\u2a14 \\uD835\\uDD2E\"; // \ud835\udd2e\n        assertEquals(un, Entities.unescape(text));\n    }",
        "begin_line": 87,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 37)",
            "(line 90,col 9)-(line 90,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.unescape()",
        "snippet": "    @Test public void unescape() {\n        String text = \"Hello &AElig; &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;\";\n        assertEquals(\"Hello \u00c6 &<> \u00ae \u00c5 &angst \u03c0 \u03c0 \u65b0 there &! \u00be \u00a9 \u00a9\", Entities.unescape(text));\n\n        assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n    }",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 125)",
            "(line 95,col 9)-(line 95,col 93)",
            "(line 97,col 9)-(line 97,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.strictUnescape()",
        "snippet": "    @Test public void strictUnescape() { // for attributes, enforce strict unescaping (must look like &#xxx; , not just &#xxx)\n        String text = \"Hello &amp= &amp;\";\n        assertEquals(\"Hello &amp= &\", Entities.unescape(text, true));\n        assertEquals(\"Hello &= &\", Entities.unescape(text));\n        assertEquals(\"Hello &= &\", Entities.unescape(text, false));\n    }",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 42)",
            "(line 102,col 9)-(line 102,col 69)",
            "(line 103,col 9)-(line 103,col 60)",
            "(line 104,col 9)-(line 104,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.caseSensitive()",
        "snippet": "    @Test public void caseSensitive() {\n        String unescaped = \"\u00dc \u00fc & &\";\n        assertEquals(\"&Uuml; &uuml; &amp; &amp;\",\n                Entities.escape(unescaped, new OutputSettings().charset(\"ascii\").escapeMode(extended)));\n        \n        String escaped = \"&Uuml; &uuml; &amp; &AMP\";\n        assertEquals(\"\u00dc \u00fc & &\", Entities.unescape(escaped));\n    }",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 37)",
            "(line 110,col 9)-(line 111,col 104)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.quoteReplacements()",
        "snippet": "    @Test public void quoteReplacements() {\n        String escaped = \"&#92; &#36;\";\n        String unescaped = \"\\\\ $\";\n        \n        assertEquals(unescaped, Entities.unescape(escaped));\n    }",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 39)",
            "(line 119,col 9)-(line 119,col 34)",
            "(line 121,col 9)-(line 121,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.letterDigitEntities()",
        "snippet": "    @Test public void letterDigitEntities() {\n        String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().charset(\"ascii\");\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;\", p.html());\n        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.text());\n        doc.outputSettings().charset(\"UTF-8\");\n        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.html());\n    }",
        "begin_line": 124,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 74)",
            "(line 126,col 9)-(line 126,col 41)",
            "(line 127,col 9)-(line 127,col 46)",
            "(line 128,col 9)-(line 128,col 44)",
            "(line 129,col 9)-(line 129,col 77)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 131,col 9)-(line 131,col 46)",
            "(line 132,col 9)-(line 132,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.noSpuriousDecodes()",
        "snippet": "    @Test public void noSpuriousDecodes() {\n        String string = \"http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2\";\n        assertEquals(string, Entities.unescape(string));\n    }",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 83)",
            "(line 137,col 9)-(line 137,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.nodes.EntitiesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java",
        "signature": "org.jsoup.nodes.EntitiesTest.escapesGtInXmlAttributesButNotInHtml()",
        "snippet": "    @Test public void escapesGtInXmlAttributesButNotInHtml() {\n        // https://github.com/jhy/jsoup/issues/528 - < is OK in HTML attribute values, but not in XML\n\n\n        String docHtml = \"<a title='<p>One</p>'>One</a>\";\n        Document doc = Jsoup.parse(docHtml);\n        Element element = doc.select(\"a\").first();\n\n        doc.outputSettings().escapeMode(base);\n        assertEquals(\"<a title=\\\"<p>One</p>\\\">One</a>\", element.outerHtml());\n\n        doc.outputSettings().escapeMode(xhtml);\n        assertEquals(\"<a title=\\\"&lt;p>One&lt;/p>\\\">One</a>\", element.outerHtml());\n    }",
        "begin_line": 140,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 57)",
            "(line 145,col 9)-(line 145,col 44)",
            "(line 146,col 9)-(line 146,col 50)",
            "(line 148,col 9)-(line 148,col 46)",
            "(line 149,col 9)-(line 149,col 77)",
            "(line 151,col 9)-(line 151,col 47)",
            "(line 152,col 9)-(line 152,col 83)"
        ]
    },
    {
        "class_name": "org.jsoup.select.QueryParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/QueryParserTest.java",
        "signature": "org.jsoup.select.QueryParserTest.testOrGetsCorrectPrecedence()",
        "snippet": "    @Test public void testOrGetsCorrectPrecedence() {\n        // tests that a selector \"a b, c d, e f\" evals to (a AND b) OR (c AND d) OR (e AND f)\"\n        // top level or, three child ands\n        Evaluator eval = QueryParser.parse(\"a b, c d, e f\");\n        assertTrue(eval instanceof CombiningEvaluator.Or);\n        CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;\n        assertEquals(3, or.evaluators.size());\n        for (Evaluator innerEval: or.evaluators) {\n            assertTrue(innerEval instanceof CombiningEvaluator.And);\n            CombiningEvaluator.And and = (CombiningEvaluator.And) innerEval;\n            assertEquals(2, and.evaluators.size());\n            assertTrue(and.evaluators.get(0) instanceof Evaluator.Tag);\n            assertTrue(and.evaluators.get(1) instanceof StructuralEvaluator.Parent);\n        }\n    }",
        "begin_line": 12,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 15,col 9)-(line 15,col 60)",
            "(line 16,col 9)-(line 16,col 58)",
            "(line 17,col 9)-(line 17,col 64)",
            "(line 18,col 9)-(line 18,col 46)",
            "(line 19,col 9)-(line 25,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.select.QueryParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/QueryParserTest.java",
        "signature": "org.jsoup.select.QueryParserTest.testParsesMultiCorrectly()",
        "snippet": "    @Test public void testParsesMultiCorrectly() {\n        Evaluator eval = QueryParser.parse(\".foo > ol, ol > li + li\");\n        assertTrue(eval instanceof CombiningEvaluator.Or);\n        CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;\n        assertEquals(2, or.evaluators.size());\n\n        CombiningEvaluator.And andLeft = (CombiningEvaluator.And) or.evaluators.get(0);\n        CombiningEvaluator.And andRight = (CombiningEvaluator.And) or.evaluators.get(1);\n\n        assertEquals(\"ol :ImmediateParent.foo\", andLeft.toString());\n        assertEquals(2, andLeft.evaluators.size());\n        assertEquals(\"li :prevli :ImmediateParentol\", andRight.toString());\n        assertEquals(2, andLeft.evaluators.size());\n    }",
        "begin_line": 28,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 70)",
            "(line 30,col 9)-(line 30,col 58)",
            "(line 31,col 9)-(line 31,col 64)",
            "(line 32,col 9)-(line 32,col 46)",
            "(line 34,col 9)-(line 34,col 87)",
            "(line 35,col 9)-(line 35,col 88)",
            "(line 37,col 9)-(line 37,col 68)",
            "(line 38,col 9)-(line 38,col 51)",
            "(line 39,col 9)-(line 39,col 75)",
            "(line 40,col 9)-(line 40,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.select.QueryParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/QueryParserTest.java",
        "signature": "org.jsoup.select.QueryParserTest.exceptionOnUncloseAttribute()",
        "snippet": "    @Test(expected = Selector.SelectorParseException.class) public void exceptionOnUncloseAttribute() {\n        Evaluator parse = QueryParser.parse(\"section > a[href=\\\"]\");\n    }",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.select.QueryParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/QueryParserTest.java",
        "signature": "org.jsoup.select.QueryParserTest.testParsesSingleQuoteInContains()",
        "snippet": "    @Test(expected = Selector.SelectorParseException.class)  public void testParsesSingleQuoteInContains() {\n        Evaluator parse = QueryParser.parse(\"p:contains(One \\\" One)\");\n    }",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByTag()",
        "snippet": "    @Test public void testByTag() {\n        // should be case insensitive\n        Elements els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>\").select(\"DIV\");\n        assertEquals(3, els.size());\n        assertEquals(\"1\", els.get(0).id());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(\"3\", els.get(2).id());\n\n        Elements none = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"span\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 21,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 107)",
            "(line 24,col 9)-(line 24,col 36)",
            "(line 25,col 9)-(line 25,col 43)",
            "(line 26,col 9)-(line 26,col 43)",
            "(line 27,col 9)-(line 27,col 43)",
            "(line 29,col 9)-(line 29,col 109)",
            "(line 30,col 9)-(line 30,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testById()",
        "snippet": "    @Test public void testById() {\n        Elements els = Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\").select(\"#foo\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"Foo two!\", els.get(1).text());\n\n        Elements none = Jsoup.parse(\"<div id=1></div>\").select(\"#foo\");\n        assertEquals(0, none.size());\n    }",
        "begin_line": 33,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 106)",
            "(line 35,col 9)-(line 35,col 36)",
            "(line 36,col 9)-(line 36,col 49)",
            "(line 37,col 9)-(line 37,col 52)",
            "(line 39,col 9)-(line 39,col 71)",
            "(line 40,col 9)-(line 40,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByClass()",
        "snippet": "    @Test public void testByClass() {\n        Elements els = Jsoup.parse(\"<p id=0 class='ONE two'><p id=1 class='one'><p id=2 class='two'>\").select(\"P.One\");\n        assertEquals(2, els.size());\n        assertEquals(\"0\", els.get(0).id());\n        assertEquals(\"1\", els.get(1).id());\n\n        Elements none = Jsoup.parse(\"<div class='one'></div>\").select(\".foo\");\n        assertEquals(0, none.size());\n\n        Elements els2 = Jsoup.parse(\"<div class='One-Two'></div>\").select(\".one-two\");\n        assertEquals(1, els2.size());\n    }",
        "begin_line": 43,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 119)",
            "(line 45,col 9)-(line 45,col 36)",
            "(line 46,col 9)-(line 46,col 43)",
            "(line 47,col 9)-(line 47,col 43)",
            "(line 49,col 9)-(line 49,col 78)",
            "(line 50,col 9)-(line 50,col 37)",
            "(line 52,col 9)-(line 52,col 86)",
            "(line 53,col 9)-(line 53,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByClassCaseInsensitive()",
        "snippet": "    @Test public void testByClassCaseInsensitive() {\n        String html = \"<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four\";\n        Elements elsFromClass = Jsoup.parse(html).select(\"P.Foo\");\n        Elements elsFromAttr = Jsoup.parse(html).select(\"p[class=foo]\");\n\n        assertEquals(elsFromAttr.size(), elsFromClass.size());\n        assertEquals(3, elsFromClass.size());\n        assertEquals(\"Two\", elsFromClass.get(1).text());\n    }",
        "begin_line": 56,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 96)",
            "(line 58,col 9)-(line 58,col 66)",
            "(line 59,col 9)-(line 59,col 72)",
            "(line 61,col 9)-(line 61,col 62)",
            "(line 62,col 9)-(line 62,col 45)",
            "(line 63,col 9)-(line 63,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttribute()",
        "snippet": "    @Test @MultiLocaleTest public void testByAttribute() {\n        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />\" +\n                \"<div data-name='with spaces'/>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements withTitle = doc.select(\"[title]\");\n        assertEquals(4, withTitle.size());\n\n        Elements foo = doc.select(\"[TITLE=foo]\");\n        assertEquals(1, foo.size());\n\n        Elements foo2 = doc.select(\"[title=\\\"foo\\\"]\");\n        assertEquals(1, foo2.size());\n\n        Elements foo3 = doc.select(\"[title=\\\"Foo\\\"]\");\n        assertEquals(1, foo3.size());\n\n        Elements dataName = doc.select(\"[data-name=\\\"with spaces\\\"]\");\n        assertEquals(1, dataName.size());\n        assertEquals(\"with spaces\", dataName.first().attr(\"data-name\"));\n\n        Elements not = doc.select(\"div[title!=bar]\");\n        assertEquals(5, not.size());\n        assertEquals(\"Foo\", not.first().attr(\"title\"));\n\n        Elements starts = doc.select(\"[title^=ba]\");\n        assertEquals(2, starts.size());\n        assertEquals(\"Bar\", starts.first().attr(\"title\"));\n        assertEquals(\"Balim\", starts.last().attr(\"title\"));\n\n        Elements ends = doc.select(\"[title$=im]\");\n        assertEquals(2, ends.size());\n        assertEquals(\"Balim\", ends.first().attr(\"title\"));\n        assertEquals(\"SLIM\", ends.last().attr(\"title\"));\n\n        Elements contains = doc.select(\"[title*=i]\");\n        assertEquals(2, contains.size());\n        assertEquals(\"Balim\", contains.first().attr(\"title\"));\n        assertEquals(\"SLIM\", contains.last().attr(\"title\"));\n    }",
        "begin_line": 66,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 69,col 38)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 42)",
            "(line 74,col 9)-(line 74,col 49)",
            "(line 75,col 9)-(line 75,col 36)",
            "(line 77,col 9)-(line 77,col 54)",
            "(line 78,col 9)-(line 78,col 37)",
            "(line 80,col 9)-(line 80,col 54)",
            "(line 81,col 9)-(line 81,col 37)",
            "(line 83,col 9)-(line 83,col 70)",
            "(line 84,col 9)-(line 84,col 41)",
            "(line 85,col 9)-(line 85,col 72)",
            "(line 87,col 9)-(line 87,col 53)",
            "(line 88,col 9)-(line 88,col 36)",
            "(line 89,col 9)-(line 89,col 55)",
            "(line 91,col 9)-(line 91,col 52)",
            "(line 92,col 9)-(line 92,col 39)",
            "(line 93,col 9)-(line 93,col 58)",
            "(line 94,col 9)-(line 94,col 59)",
            "(line 96,col 9)-(line 96,col 50)",
            "(line 97,col 9)-(line 97,col 37)",
            "(line 98,col 9)-(line 98,col 58)",
            "(line 99,col 9)-(line 99,col 56)",
            "(line 101,col 9)-(line 101,col 53)",
            "(line 102,col 9)-(line 102,col 41)",
            "(line 103,col 9)-(line 103,col 62)",
            "(line 104,col 9)-(line 104,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testNamespacedTag()",
        "snippet": "    @Test public void testNamespacedTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n        Elements byTag = doc.select(\"abc|def\");\n        assertEquals(2, byTag.size());\n        assertEquals(\"1\", byTag.first().id());\n        assertEquals(\"2\", byTag.last().id());\n\n        Elements byAttr = doc.select(\".bold\");\n        assertEquals(1, byAttr.size());\n        assertEquals(\"2\", byAttr.last().id());\n\n        Elements byTagAttr = doc.select(\"abc|def.bold\");\n        assertEquals(1, byTagAttr.size());\n        assertEquals(\"2\", byTagAttr.last().id());\n\n        Elements byContains = doc.select(\"abc|def:contains(e)\");\n        assertEquals(2, byContains.size());\n        assertEquals(\"1\", byContains.first().id());\n        assertEquals(\"2\", byContains.last().id());\n    }",
        "begin_line": 107,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 120)",
            "(line 109,col 9)-(line 109,col 47)",
            "(line 110,col 9)-(line 110,col 38)",
            "(line 111,col 9)-(line 111,col 46)",
            "(line 112,col 9)-(line 112,col 45)",
            "(line 114,col 9)-(line 114,col 46)",
            "(line 115,col 9)-(line 115,col 39)",
            "(line 116,col 9)-(line 116,col 46)",
            "(line 118,col 9)-(line 118,col 56)",
            "(line 119,col 9)-(line 119,col 42)",
            "(line 120,col 9)-(line 120,col 49)",
            "(line 122,col 9)-(line 122,col 64)",
            "(line 123,col 9)-(line 123,col 43)",
            "(line 124,col 9)-(line 124,col 51)",
            "(line 125,col 9)-(line 125,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testWildcardNamespacedTag()",
        "snippet": "    @Test public void testWildcardNamespacedTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n        Elements byTag = doc.select(\"*|def\");\n        assertEquals(2, byTag.size());\n        assertEquals(\"1\", byTag.first().id());\n        assertEquals(\"2\", byTag.last().id());\n\n        Elements byAttr = doc.select(\".bold\");\n        assertEquals(1, byAttr.size());\n        assertEquals(\"2\", byAttr.last().id());\n\n        Elements byTagAttr = doc.select(\"*|def.bold\");\n        assertEquals(1, byTagAttr.size());\n        assertEquals(\"2\", byTagAttr.last().id());\n\n        Elements byContains = doc.select(\"*|def:contains(e)\");\n        assertEquals(2, byContains.size());\n        assertEquals(\"1\", byContains.first().id());\n        assertEquals(\"2\", byContains.last().id());\n    }",
        "begin_line": 128,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 120)",
            "(line 130,col 9)-(line 130,col 45)",
            "(line 131,col 9)-(line 131,col 38)",
            "(line 132,col 9)-(line 132,col 46)",
            "(line 133,col 9)-(line 133,col 45)",
            "(line 135,col 9)-(line 135,col 46)",
            "(line 136,col 9)-(line 136,col 39)",
            "(line 137,col 9)-(line 137,col 46)",
            "(line 139,col 9)-(line 139,col 54)",
            "(line 140,col 9)-(line 140,col 42)",
            "(line 141,col 9)-(line 141,col 49)",
            "(line 143,col 9)-(line 143,col 62)",
            "(line 144,col 9)-(line 144,col 43)",
            "(line 145,col 9)-(line 145,col 51)",
            "(line 146,col 9)-(line 146,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeStarting()",
        "snippet": "    @Test @MultiLocaleTest public void testByAttributeStarting() {\n        Document doc = Jsoup.parse(\"<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n        Elements withData = doc.select(\"[^data-]\");\n        assertEquals(2, withData.size());\n        assertEquals(\"1\", withData.first().id());\n        assertEquals(\"2\", withData.last().id());\n\n        withData = doc.select(\"p[^data-]\");\n        assertEquals(1, withData.size());\n        assertEquals(\"2\", withData.first().id());\n\n        assertEquals(1, doc.select(\"[^attrib]\").size());\n    }",
        "begin_line": 149,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 128)",
            "(line 151,col 9)-(line 151,col 51)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 49)",
            "(line 154,col 9)-(line 154,col 48)",
            "(line 156,col 9)-(line 156,col 43)",
            "(line 157,col 9)-(line 157,col 41)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 160,col 9)-(line 160,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeRegex()",
        "snippet": "    @Test public void testByAttributeRegex() {\n        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>\");\n        Elements imgs = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g)]\");\n        assertEquals(3, imgs.size());\n        assertEquals(\"1\", imgs.get(0).id());\n        assertEquals(\"2\", imgs.get(1).id());\n        assertEquals(\"3\", imgs.get(2).id());\n    }",
        "begin_line": 163,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 135)",
            "(line 165,col 9)-(line 165,col 67)",
            "(line 166,col 9)-(line 166,col 37)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 168,col 9)-(line 168,col 44)",
            "(line 169,col 9)-(line 169,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeRegexCharacterClass()",
        "snippet": "    @Test public void testByAttributeRegexCharacterClass() {\n        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>\");\n        Elements imgs = doc.select(\"img[src~=[o]]\");\n        assertEquals(2, imgs.size());\n        assertEquals(\"1\", imgs.get(0).id());\n        assertEquals(\"4\", imgs.get(1).id());\n    }",
        "begin_line": 172,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 135)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 44)",
            "(line 177,col 9)-(line 177,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testByAttributeRegexCombined()",
        "snippet": "    @Test public void testByAttributeRegexCombined() {\n        Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n        Elements els = doc.select(\"div table[class~=x|y]\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.text());\n    }",
        "begin_line": 180,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 87)",
            "(line 182,col 9)-(line 182,col 59)",
            "(line 183,col 9)-(line 183,col 36)",
            "(line 184,col 9)-(line 184,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testCombinedWithContains()",
        "snippet": "    @Test public void testCombinedWithContains() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p><p>Two +</p><p>Three +</p>\");\n        Elements els = doc.select(\"p#1 + :contains(+)\");\n        assertEquals(1, els.size());\n        assertEquals(\"Two +\", els.text());\n        assertEquals(\"p\", els.first().tagName());\n    }",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 80)",
            "(line 189,col 9)-(line 189,col 56)",
            "(line 190,col 9)-(line 190,col 36)",
            "(line 191,col 9)-(line 191,col 42)",
            "(line 192,col 9)-(line 192,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testAllElements()",
        "snippet": "    @Test public void testAllElements() {\n        String h = \"<div><p>Hello</p><p><b>there</b></p></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements allDoc = doc.select(\"*\");\n        Elements allUnderDiv = doc.select(\"div *\");\n        assertEquals(8, allDoc.size());\n        assertEquals(3, allUnderDiv.size());\n        assertEquals(\"p\", allUnderDiv.first().tagName());\n    }",
        "begin_line": 195,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 64)",
            "(line 197,col 9)-(line 197,col 38)",
            "(line 198,col 9)-(line 198,col 42)",
            "(line 199,col 9)-(line 199,col 51)",
            "(line 200,col 9)-(line 200,col 39)",
            "(line 201,col 9)-(line 201,col 44)",
            "(line 202,col 9)-(line 202,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testAllWithClass()",
        "snippet": "    @Test public void testAllWithClass() {\n        String h = \"<p class=first>One<p class=first>Two<p>Three\";\n        Document doc = Jsoup.parse(h);\n        Elements ps = doc.select(\"*.first\");\n        assertEquals(2, ps.size());\n    }",
        "begin_line": 205,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 38)",
            "(line 208,col 9)-(line 208,col 44)",
            "(line 209,col 9)-(line 209,col 35)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testGroupOr()",
        "snippet": "    @Test public void testGroupOr() {\n        String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"p,div,[title]\");\n\n        assertEquals(5, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"foo\", els.get(0).attr(\"title\"));\n        assertEquals(\"div\", els.get(1).tagName());\n        assertEquals(\"bar\", els.get(1).attr(\"title\"));\n        assertEquals(\"div\", els.get(2).tagName());\n        assertTrue(els.get(2).attr(\"title\").length() == 0); // missing attributes come back as empty string\n        assertFalse(els.get(2).hasAttr(\"title\"));\n        assertEquals(\"p\", els.get(3).tagName());\n        assertEquals(\"span\", els.get(4).tagName());\n    }",
        "begin_line": 212,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 93)",
            "(line 214,col 9)-(line 214,col 38)",
            "(line 215,col 9)-(line 215,col 51)",
            "(line 217,col 9)-(line 217,col 36)",
            "(line 218,col 9)-(line 218,col 50)",
            "(line 219,col 9)-(line 219,col 54)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 221,col 9)-(line 221,col 54)",
            "(line 222,col 9)-(line 222,col 50)",
            "(line 223,col 9)-(line 223,col 59)",
            "(line 224,col 9)-(line 224,col 49)",
            "(line 225,col 9)-(line 225,col 48)",
            "(line 226,col 9)-(line 226,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testGroupOrAttribute()",
        "snippet": "    @Test public void testGroupOrAttribute() {\n        String h = \"<div id=1 /><div id=2 /><div title=foo /><div title=bar />\";\n        Elements els = Jsoup.parse(h).select(\"[id],[title=foo]\");\n\n        assertEquals(3, els.size());\n        assertEquals(\"1\", els.get(0).id());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(\"foo\", els.get(2).attr(\"title\"));\n    }",
        "begin_line": 229,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 80)",
            "(line 231,col 9)-(line 231,col 65)",
            "(line 233,col 9)-(line 233,col 36)",
            "(line 234,col 9)-(line 234,col 43)",
            "(line 235,col 9)-(line 235,col 43)",
            "(line 236,col 9)-(line 236,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.descendant()",
        "snippet": "    @Test public void descendant() {\n        String h = \"<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>\";\n        Document doc = Jsoup.parse(h);\n        Element root = doc.getElementsByClass(\"HEAD\").first();\n        \n        Elements els = root.select(\".head p\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"There\", els.get(1).text());\n\n        Elements p = root.select(\"p.first\");\n        assertEquals(1, p.size());\n        assertEquals(\"Hello\", p.get(0).text());\n\n        Elements empty = root.select(\"p .first\"); // self, not descend, should not match\n        assertEquals(0, empty.size());\n        \n        Elements aboveRoot = root.select(\"body div.head\");\n        assertEquals(0, aboveRoot.size());\n    }",
        "begin_line": 239,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 91)",
            "(line 241,col 9)-(line 241,col 38)",
            "(line 242,col 9)-(line 242,col 62)",
            "(line 244,col 9)-(line 244,col 46)",
            "(line 245,col 9)-(line 245,col 36)",
            "(line 246,col 9)-(line 246,col 49)",
            "(line 247,col 9)-(line 247,col 49)",
            "(line 249,col 9)-(line 249,col 44)",
            "(line 250,col 9)-(line 250,col 34)",
            "(line 251,col 9)-(line 251,col 47)",
            "(line 253,col 9)-(line 253,col 49)",
            "(line 254,col 9)-(line 254,col 38)",
            "(line 256,col 9)-(line 256,col 58)",
            "(line 257,col 9)-(line 257,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.and()",
        "snippet": "    @Test public void and() {\n        String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\";\n        Document doc = Jsoup.parse(h);\n\n        Elements div = doc.select(\"div.foo\");\n        assertEquals(1, div.size());\n        assertEquals(\"div\", div.first().tagName());\n\n        Elements p = doc.select(\"div .foo\"); // space indicates like \"div *.foo\"\n        assertEquals(1, p.size());\n        assertEquals(\"p\", p.first().tagName());\n\n        Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); // very specific!\n        assertEquals(1, div2.size());\n        assertEquals(\"div\", div2.first().tagName());\n\n        Elements p2 = doc.select(\"div *.foo\"); // space indicates like \"div *.foo\"\n        assertEquals(1, p2.size());\n        assertEquals(\"p\", p2.first().tagName());\n    }",
        "begin_line": 260,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 104)",
            "(line 262,col 9)-(line 262,col 38)",
            "(line 264,col 9)-(line 264,col 45)",
            "(line 265,col 9)-(line 265,col 36)",
            "(line 266,col 9)-(line 266,col 51)",
            "(line 268,col 9)-(line 268,col 44)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 270,col 9)-(line 270,col 47)",
            "(line 272,col 9)-(line 272,col 73)",
            "(line 273,col 9)-(line 273,col 37)",
            "(line 274,col 9)-(line 274,col 52)",
            "(line 276,col 9)-(line 276,col 46)",
            "(line 277,col 9)-(line 277,col 35)",
            "(line 278,col 9)-(line 278,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.deeperDescendant()",
        "snippet": "    @Test public void deeperDescendant() {\n        String h = \"<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>\";\n        Document doc = Jsoup.parse(h);\n        Element root = doc.getElementsByClass(\"head\").first();\n\n        Elements els = root.select(\"div p .first\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.first().text());\n        assertEquals(\"span\", els.first().tagName());\n\n        Elements aboveRoot = root.select(\"body p .first\");\n        assertEquals(0, aboveRoot.size());\n    }",
        "begin_line": 281,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 135)",
            "(line 283,col 9)-(line 283,col 38)",
            "(line 284,col 9)-(line 284,col 62)",
            "(line 286,col 9)-(line 286,col 51)",
            "(line 287,col 9)-(line 287,col 36)",
            "(line 288,col 9)-(line 288,col 50)",
            "(line 289,col 9)-(line 289,col 52)",
            "(line 291,col 9)-(line 291,col 58)",
            "(line 292,col 9)-(line 292,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.parentChildElement()",
        "snippet": "    @Test public void parentChildElement() {\n        String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements divs = doc.select(\"div > div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"2\", divs.get(0).id()); // 2 is child of 1\n        assertEquals(\"3\", divs.get(1).id()); // 3 is child of 2\n\n        Elements div2 = doc.select(\"div#1 > div\");\n        assertEquals(1, div2.size());\n        assertEquals(\"2\", div2.get(0).id());\n    }",
        "begin_line": 295,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 88)",
            "(line 297,col 9)-(line 297,col 38)",
            "(line 299,col 9)-(line 299,col 48)",
            "(line 300,col 9)-(line 300,col 37)",
            "(line 301,col 9)-(line 301,col 44)",
            "(line 302,col 9)-(line 302,col 44)",
            "(line 304,col 9)-(line 304,col 50)",
            "(line 305,col 9)-(line 305,col 37)",
            "(line 306,col 9)-(line 306,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.parentWithClassChild()",
        "snippet": "    @Test public void parentWithClassChild() {\n        String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements allAs = doc.select(\"h1 > a\");\n        assertEquals(3, allAs.size());\n        assertEquals(\"a\", allAs.first().tagName());\n\n        Elements fooAs = doc.select(\"h1.foo > a\");\n        assertEquals(2, fooAs.size());\n        assertEquals(\"a\", fooAs.first().tagName());\n\n        Elements barAs = doc.select(\"h1.foo > a.bar\");\n        assertEquals(1, barAs.size());\n    }",
        "begin_line": 309,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 115)",
            "(line 311,col 9)-(line 311,col 38)",
            "(line 313,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 38)",
            "(line 315,col 9)-(line 315,col 51)",
            "(line 317,col 9)-(line 317,col 50)",
            "(line 318,col 9)-(line 318,col 38)",
            "(line 319,col 9)-(line 319,col 51)",
            "(line 321,col 9)-(line 321,col 54)",
            "(line 322,col 9)-(line 322,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.parentChildStar()",
        "snippet": "    @Test public void parentChildStar() {\n        String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements divChilds = doc.select(\"div > *\");\n        assertEquals(3, divChilds.size());\n        assertEquals(\"p\", divChilds.get(0).tagName());\n        assertEquals(\"p\", divChilds.get(1).tagName());\n        assertEquals(\"span\", divChilds.get(2).tagName());\n    }",
        "begin_line": 325,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 96)",
            "(line 327,col 9)-(line 327,col 38)",
            "(line 328,col 9)-(line 328,col 51)",
            "(line 329,col 9)-(line 329,col 42)",
            "(line 330,col 9)-(line 330,col 54)",
            "(line 331,col 9)-(line 331,col 54)",
            "(line 332,col 9)-(line 332,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.multiChildDescent()",
        "snippet": "    @Test public void multiChildDescent() {\n        String h = \"<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"div#foo > h1.bar > a[href*=example]\");\n        assertEquals(1, els.size());\n        assertEquals(\"a\", els.first().tagName());\n    }",
        "begin_line": 335,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 336,col 9)-(line 336,col 94)",
            "(line 337,col 9)-(line 337,col 38)",
            "(line 338,col 9)-(line 338,col 73)",
            "(line 339,col 9)-(line 339,col 36)",
            "(line 340,col 9)-(line 340,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.caseInsensitive()",
        "snippet": "    @Test public void caseInsensitive() {\n        String h = \"<dIv tItle=bAr><div>\"; // mixed case so a simple toLowerCase() on value doesn't catch\n        Document doc = Jsoup.parse(h);\n\n        assertEquals(2, doc.select(\"DiV\").size());\n        assertEquals(1, doc.select(\"DiV[TiTLE]\").size());\n        assertEquals(1, doc.select(\"DiV[TiTLE=BAR]\").size());\n        assertEquals(0, doc.select(\"DiV[TiTLE=BARBARELLA]\").size());\n    }",
        "begin_line": 343,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 42)",
            "(line 345,col 9)-(line 345,col 38)",
            "(line 347,col 9)-(line 347,col 50)",
            "(line 348,col 9)-(line 348,col 57)",
            "(line 349,col 9)-(line 349,col 61)",
            "(line 350,col 9)-(line 350,col 68)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.adjacentSiblings()",
        "snippet": "    @Test public void adjacentSiblings() {\n        String h = \"<ol><li>One<li>Two<li>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li + li\");\n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }",
        "begin_line": 353,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 54)",
            "(line 355,col 9)-(line 355,col 38)",
            "(line 356,col 9)-(line 356,col 46)",
            "(line 357,col 9)-(line 357,col 37)",
            "(line 358,col 9)-(line 358,col 48)",
            "(line 359,col 9)-(line 359,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.adjacentSiblingsWithId()",
        "snippet": "    @Test public void adjacentSiblingsWithId() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li#1 + li#2\");\n        assertEquals(1, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n    }",
        "begin_line": 362,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 69)",
            "(line 364,col 9)-(line 364,col 38)",
            "(line 365,col 9)-(line 365,col 50)",
            "(line 366,col 9)-(line 366,col 37)",
            "(line 367,col 9)-(line 367,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.notAdjacent()",
        "snippet": "    @Test public void notAdjacent() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li#1 + li#3\");\n        assertEquals(0, sibs.size());\n    }",
        "begin_line": 370,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 69)",
            "(line 372,col 9)-(line 372,col 38)",
            "(line 373,col 9)-(line 373,col 50)",
            "(line 374,col 9)-(line 374,col 37)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.mixCombinator()",
        "snippet": "    @Test public void mixCombinator() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"body > div.foo li + li\");\n\n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }",
        "begin_line": 377,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 378,col 9)-(line 378,col 75)",
            "(line 379,col 9)-(line 379,col 38)",
            "(line 380,col 9)-(line 380,col 61)",
            "(line 382,col 9)-(line 382,col 37)",
            "(line 383,col 9)-(line 383,col 48)",
            "(line 384,col 9)-(line 384,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.mixCombinatorGroup()",
        "snippet": "    @Test public void mixCombinatorGroup() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".foo > ol, ol > li + li\");\n\n        assertEquals(3, els.size());\n        assertEquals(\"ol\", els.get(0).tagName());\n        assertEquals(\"Two\", els.get(1).text());\n        assertEquals(\"Three\", els.get(2).text());\n    }",
        "begin_line": 387,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 75)",
            "(line 389,col 9)-(line 389,col 38)",
            "(line 390,col 9)-(line 390,col 61)",
            "(line 392,col 9)-(line 392,col 36)",
            "(line 393,col 9)-(line 393,col 49)",
            "(line 394,col 9)-(line 394,col 47)",
            "(line 395,col 9)-(line 395,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.generalSiblings()",
        "snippet": "    @Test public void generalSiblings() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"#1 ~ #3\");\n        assertEquals(1, els.size());\n        assertEquals(\"Three\", els.first().text());\n    }",
        "begin_line": 398,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 69)",
            "(line 400,col 9)-(line 400,col 38)",
            "(line 401,col 9)-(line 401,col 45)",
            "(line 402,col 9)-(line 402,col 36)",
            "(line 403,col 9)-(line 403,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testCharactersInIdAndClass()",
        "snippet": "    @Test public void testCharactersInIdAndClass() {\n        // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)\n        String h = \"<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Element el1 = doc.getElementById(\"a1-foo_bar\");\n        assertEquals(\"One\", el1.text());\n        Element el2 = doc.getElementsByClass(\"b2-qux_bif\").first();\n        assertEquals(\"Two\", el2.text());\n\n        Element el3 = doc.select(\"#a1-foo_bar\").first();\n        assertEquals(\"One\", el3.text());\n        Element el4 = doc.select(\".b2-qux_bif\").first();\n        assertEquals(\"Two\", el4.text());\n    }",
        "begin_line": 407,
        "end_line": 421,
        "comment": " for http://github.com/jhy/jsoup/issues#issue/10",
        "child_ranges": [
            "(line 409,col 9)-(line 409,col 88)",
            "(line 410,col 9)-(line 410,col 38)",
            "(line 412,col 9)-(line 412,col 55)",
            "(line 413,col 9)-(line 413,col 40)",
            "(line 414,col 9)-(line 414,col 67)",
            "(line 415,col 9)-(line 415,col 40)",
            "(line 417,col 9)-(line 417,col 56)",
            "(line 418,col 9)-(line 418,col 40)",
            "(line 419,col 9)-(line 419,col 56)",
            "(line 420,col 9)-(line 420,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testSupportsLeadingCombinator()",
        "snippet": "    @Test public void testSupportsLeadingCombinator() {\n        String h = \"<div><p><span>One</span><span>Two</span></p></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Element p = doc.select(\"div > p\").first();\n        Elements spans = p.select(\"> span\");\n        assertEquals(2, spans.size());\n        assertEquals(\"One\", spans.first().text());\n\n        // make sure doesn't get nested\n        h = \"<div id=1><div id=2><div id=3></div></div></div>\";\n        doc = Jsoup.parse(h);\n        Element div = doc.select(\"div\").select(\" > div\").first();\n        assertEquals(\"2\", div.id());\n    }",
        "begin_line": 424,
        "end_line": 438,
        "comment": " for http://github.com/jhy/jsoup/issues#issue/13",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 72)",
            "(line 426,col 9)-(line 426,col 38)",
            "(line 428,col 9)-(line 428,col 50)",
            "(line 429,col 9)-(line 429,col 44)",
            "(line 430,col 9)-(line 430,col 38)",
            "(line 431,col 9)-(line 431,col 50)",
            "(line 434,col 9)-(line 434,col 63)",
            "(line 435,col 9)-(line 435,col 29)",
            "(line 436,col 9)-(line 436,col 65)",
            "(line 437,col 9)-(line 437,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoLessThan()",
        "snippet": "    @Test public void testPseudoLessThan() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:lt(2)\");\n        assertEquals(3, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Two\", ps.get(1).text());\n        assertEquals(\"Four\", ps.get(2).text());\n    }",
        "begin_line": 440,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 441,col 9)-(line 441,col 99)",
            "(line 442,col 9)-(line 442,col 48)",
            "(line 443,col 9)-(line 443,col 35)",
            "(line 444,col 9)-(line 444,col 46)",
            "(line 445,col 9)-(line 445,col 46)",
            "(line 446,col 9)-(line 446,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoGreaterThan()",
        "snippet": "    @Test public void testPseudoGreaterThan() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:gt(0)\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n        assertEquals(\"Three\", ps.get(1).text());\n    }",
        "begin_line": 449,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 98)",
            "(line 451,col 9)-(line 451,col 48)",
            "(line 452,col 9)-(line 452,col 35)",
            "(line 453,col 9)-(line 453,col 46)",
            "(line 454,col 9)-(line 454,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoEquals()",
        "snippet": "    @Test public void testPseudoEquals() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:eq(0)\");\n        assertEquals(2, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Four\", ps.get(1).text());\n\n        Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\");\n        assertEquals(1, ps2.size());\n        assertEquals(\"One\", ps2.get(0).text());\n        assertEquals(\"p\", ps2.get(0).tagName());\n    }",
        "begin_line": 457,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 99)",
            "(line 459,col 9)-(line 459,col 48)",
            "(line 460,col 9)-(line 460,col 35)",
            "(line 461,col 9)-(line 461,col 46)",
            "(line 462,col 9)-(line 462,col 47)",
            "(line 464,col 9)-(line 464,col 55)",
            "(line 465,col 9)-(line 465,col 36)",
            "(line 466,col 9)-(line 466,col 47)",
            "(line 467,col 9)-(line 467,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoBetween()",
        "snippet": "    @Test public void testPseudoBetween() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:gt(0):lt(2)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n    }",
        "begin_line": 470,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 99)",
            "(line 472,col 9)-(line 472,col 54)",
            "(line 473,col 9)-(line 473,col 35)",
            "(line 474,col 9)-(line 474,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoCombined()",
        "snippet": "    @Test public void testPseudoCombined() {\n        Document doc = Jsoup.parse(\"<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>\");\n        Elements ps = doc.select(\"div.foo p:gt(0)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n    }",
        "begin_line": 477,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 478,col 9)-(line 478,col 116)",
            "(line 479,col 9)-(line 479,col 52)",
            "(line 480,col 9)-(line 480,col 35)",
            "(line 481,col 9)-(line 481,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoHas()",
        "snippet": "    @Test public void testPseudoHas() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        assertEquals(2, divs1.size());\n        assertEquals(\"0\", divs1.get(0).id());\n        assertEquals(\"1\", divs1.get(1).id());\n\n        Elements divs2 = doc.select(\"div:has([class])\");\n        assertEquals(1, divs2.size());\n        assertEquals(\"1\", divs2.get(0).id());\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        assertEquals(3, divs3.size());\n        assertEquals(\"0\", divs3.get(0).id());\n        assertEquals(\"1\", divs3.get(1).id());\n        assertEquals(\"2\", divs3.get(2).id());\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        assertEquals(3, els1.size()); // body, div, dib\n        assertEquals(\"body\", els1.first().tagName());\n        assertEquals(\"0\", els1.get(1).id());\n        assertEquals(\"2\", els1.get(2).id());\n    }",
        "begin_line": 484,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 485,col 9)-(line 485,col 152)",
            "(line 487,col 9)-(line 487,col 53)",
            "(line 488,col 9)-(line 488,col 38)",
            "(line 489,col 9)-(line 489,col 45)",
            "(line 490,col 9)-(line 490,col 45)",
            "(line 492,col 9)-(line 492,col 56)",
            "(line 493,col 9)-(line 493,col 38)",
            "(line 494,col 9)-(line 494,col 45)",
            "(line 496,col 9)-(line 496,col 56)",
            "(line 497,col 9)-(line 497,col 38)",
            "(line 498,col 9)-(line 498,col 45)",
            "(line 499,col 9)-(line 499,col 45)",
            "(line 500,col 9)-(line 500,col 45)",
            "(line 502,col 9)-(line 502,col 53)",
            "(line 503,col 9)-(line 503,col 37)",
            "(line 504,col 9)-(line 504,col 53)",
            "(line 505,col 9)-(line 505,col 44)",
            "(line 506,col 9)-(line 506,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testNestedHas()",
        "snippet": "    @Test public void testNestedHas() {\n        Document doc = Jsoup.parse(\"<div><p><span>One</span></p></div> <div><p>Two</p></div>\");\n        Elements divs = doc.select(\"div:has(p:has(span))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"One\", divs.first().text());\n\n        // test matches in has\n        divs = doc.select(\"div:has(p:matches((?i)two))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"div\", divs.first().tagName());\n        assertEquals(\"Two\", divs.first().text());\n\n        // test contains in has\n        divs = doc.select(\"div:has(p:contains(two))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"div\", divs.first().tagName());\n        assertEquals(\"Two\", divs.first().text());\n    }",
        "begin_line": 509,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 510,col 9)-(line 510,col 95)",
            "(line 511,col 9)-(line 511,col 59)",
            "(line 512,col 9)-(line 512,col 37)",
            "(line 513,col 9)-(line 513,col 49)",
            "(line 516,col 9)-(line 516,col 57)",
            "(line 517,col 9)-(line 517,col 37)",
            "(line 518,col 9)-(line 518,col 52)",
            "(line 519,col 9)-(line 519,col 49)",
            "(line 522,col 9)-(line 522,col 54)",
            "(line 523,col 9)-(line 523,col 37)",
            "(line 524,col 9)-(line 524,col 52)",
            "(line 525,col 9)-(line 525,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPseudoContains()",
        "snippet": "    @Test @MultiLocaleTest public void testPseudoContains() {\n        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain, the.</p></div>\");\n\n        Elements ps1 = doc.select(\"p:contains(Rain)\");\n        assertEquals(3, ps1.size());\n\n        Elements ps2 = doc.select(\"p:contains(the rain)\");\n        assertEquals(2, ps2.size());\n        assertEquals(\"The Rain.\", ps2.first().html());\n        assertEquals(\"The <i>RAIN</i>.\", ps2.last().html());\n\n        Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n        assertEquals(1, ps3.size());\n        assertEquals(\"light\", ps3.first().className());\n\n        Elements ps4 = doc.select(\".light:contains(rain)\");\n        assertEquals(1, ps4.size());\n        assertEquals(\"light\", ps3.first().className());\n\n        Elements ps5 = doc.select(\":contains(rain)\");\n        assertEquals(8, ps5.size()); // html, body, div,...\n\n        Elements ps6 = doc.select(\":contains(RAIN)\");\n        assertEquals(8, ps6.size());\n    }",
        "begin_line": 528,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 529,col 9)-(line 529,col 120)",
            "(line 531,col 9)-(line 531,col 54)",
            "(line 532,col 9)-(line 532,col 36)",
            "(line 534,col 9)-(line 534,col 58)",
            "(line 535,col 9)-(line 535,col 36)",
            "(line 536,col 9)-(line 536,col 54)",
            "(line 537,col 9)-(line 537,col 60)",
            "(line 539,col 9)-(line 539,col 65)",
            "(line 540,col 9)-(line 540,col 36)",
            "(line 541,col 9)-(line 541,col 55)",
            "(line 543,col 9)-(line 543,col 59)",
            "(line 544,col 9)-(line 544,col 36)",
            "(line 545,col 9)-(line 545,col 55)",
            "(line 547,col 9)-(line 547,col 53)",
            "(line 548,col 9)-(line 548,col 36)",
            "(line 550,col 9)-(line 550,col 53)",
            "(line 551,col 9)-(line 551,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testPsuedoContainsWithParentheses()",
        "snippet": "    @Test public void testPsuedoContainsWithParentheses() {\n        Document doc = Jsoup.parse(\"<div><p id=1>This (is good)</p><p id=2>This is bad)</p>\");\n\n        Elements ps1 = doc.select(\"p:contains(this (is good))\");\n        assertEquals(1, ps1.size());\n        assertEquals(\"1\", ps1.first().id());\n\n        Elements ps2 = doc.select(\"p:contains(this is bad\\\\))\");\n        assertEquals(1, ps2.size());\n        assertEquals(\"2\", ps2.first().id());\n    }",
        "begin_line": 554,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 94)",
            "(line 557,col 9)-(line 557,col 64)",
            "(line 558,col 9)-(line 558,col 36)",
            "(line 559,col 9)-(line 559,col 44)",
            "(line 561,col 9)-(line 561,col 64)",
            "(line 562,col 9)-(line 562,col 36)",
            "(line 563,col 9)-(line 563,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.containsOwn()",
        "snippet": "    @Test @MultiLocaleTest public void containsOwn() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> igor</p>\");\n        Elements ps = doc.select(\"p:containsOwn(Hello IGOR)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"1\", ps.first().id());\n\n        assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n\n        Document doc2 = Jsoup.parse(\"<p>Hello <b>there</b> IGOR</p>\");\n        assertEquals(1, doc2.select(\"p:containsOwn(igor)\").size());\n\n    }",
        "begin_line": 566,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 567,col 9)-(line 567,col 74)",
            "(line 568,col 9)-(line 568,col 62)",
            "(line 569,col 9)-(line 569,col 35)",
            "(line 570,col 9)-(line 570,col 43)",
            "(line 572,col 9)-(line 572,col 67)",
            "(line 574,col 9)-(line 574,col 70)",
            "(line 575,col 9)-(line 575,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testMatches()",
        "snippet": "    @Test public void testMatches() {\n        Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n\n        Elements p1 = doc.select(\"p:matches(The rain)\"); // no match, case sensitive\n        assertEquals(0, p1.size());\n\n        Elements p2 = doc.select(\"p:matches((?i)the rain)\"); // case insense. should include root, html, body\n        assertEquals(1, p2.size());\n        assertEquals(\"1\", p2.first().id());\n\n        Elements p4 = doc.select(\"p:matches((?i)^rain$)\"); // bounding\n        assertEquals(1, p4.size());\n        assertEquals(\"4\", p4.first().id());\n\n        Elements p5 = doc.select(\"p:matches(\\\\d+)\");\n        assertEquals(1, p5.size());\n        assertEquals(\"2\", p5.first().id());\n\n        Elements p6 = doc.select(\"p:matches(\\\\w+\\\\s+\\\\(\\\\w+\\\\))\"); // test bracket matching\n        assertEquals(1, p6.size());\n        assertEquals(\"3\", p6.first().id());\n\n        Elements p7 = doc.select(\"p:matches((?i)the):has(i)\"); // multi\n        assertEquals(1, p7.size());\n        assertEquals(\"1\", p7.first().id());\n    }",
        "begin_line": 579,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 143)",
            "(line 582,col 9)-(line 582,col 56)",
            "(line 583,col 9)-(line 583,col 35)",
            "(line 585,col 9)-(line 585,col 60)",
            "(line 586,col 9)-(line 586,col 35)",
            "(line 587,col 9)-(line 587,col 43)",
            "(line 589,col 9)-(line 589,col 58)",
            "(line 590,col 9)-(line 590,col 35)",
            "(line 591,col 9)-(line 591,col 43)",
            "(line 593,col 9)-(line 593,col 52)",
            "(line 594,col 9)-(line 594,col 35)",
            "(line 595,col 9)-(line 595,col 43)",
            "(line 597,col 9)-(line 597,col 66)",
            "(line 598,col 9)-(line 598,col 35)",
            "(line 599,col 9)-(line 599,col 43)",
            "(line 601,col 9)-(line 601,col 62)",
            "(line 602,col 9)-(line 602,col 35)",
            "(line 603,col 9)-(line 603,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.matchesOwn()",
        "snippet": "    @Test public void matchesOwn() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n\n        Elements p1 = doc.select(\"p:matchesOwn((?i)hello now)\");\n        assertEquals(1, p1.size());\n        assertEquals(\"1\", p1.first().id());\n\n        assertEquals(0, doc.select(\"p:matchesOwn(there)\").size());\n    }",
        "begin_line": 606,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 607,col 9)-(line 607,col 73)",
            "(line 609,col 9)-(line 609,col 64)",
            "(line 610,col 9)-(line 610,col 35)",
            "(line 611,col 9)-(line 611,col 43)",
            "(line 613,col 9)-(line 613,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.testRelaxedTags()",
        "snippet": "    @Test public void testRelaxedTags() {\n        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n\n        Elements el1 = doc.select(\"abc_def\");\n        assertEquals(1, el1.size());\n        assertEquals(\"1\", el1.first().id());\n\n        Elements el2 = doc.select(\"abc-def\");\n        assertEquals(1, el2.size());\n        assertEquals(\"2\", el2.first().id());\n    }",
        "begin_line": 616,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 98)",
            "(line 619,col 9)-(line 619,col 45)",
            "(line 620,col 9)-(line 620,col 36)",
            "(line 621,col 9)-(line 621,col 44)",
            "(line 623,col 9)-(line 623,col 45)",
            "(line 624,col 9)-(line 624,col 36)",
            "(line 625,col 9)-(line 625,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.notParas()",
        "snippet": "    @Test public void notParas() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.select(\"p:not([id=1])\");\n        assertEquals(2, el1.size());\n        assertEquals(\"Two\", el1.first().text());\n        assertEquals(\"Three\", el1.last().text());\n\n        Elements el2 = doc.select(\"p:not(:has(span))\");\n        assertEquals(2, el2.size());\n        assertEquals(\"One\", el2.first().text());\n        assertEquals(\"Two\", el2.last().text());\n    }",
        "begin_line": 628,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 629,col 9)-(line 629,col 91)",
            "(line 631,col 9)-(line 631,col 51)",
            "(line 632,col 9)-(line 632,col 36)",
            "(line 633,col 9)-(line 633,col 48)",
            "(line 634,col 9)-(line 634,col 49)",
            "(line 636,col 9)-(line 636,col 55)",
            "(line 637,col 9)-(line 637,col 36)",
            "(line 638,col 9)-(line 638,col 48)",
            "(line 639,col 9)-(line 639,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.notAll()",
        "snippet": "    @Test public void notAll() {\n        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n        assertEquals(2, el1.size());\n        assertEquals(\"body\", el1.first().tagName());\n        assertEquals(\"span\", el1.last().tagName());\n    }",
        "begin_line": 642,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 643,col 9)-(line 643,col 75)",
            "(line 645,col 9)-(line 645,col 52)",
            "(line 646,col 9)-(line 646,col 36)",
            "(line 647,col 9)-(line 647,col 52)",
            "(line 648,col 9)-(line 648,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.notClass()",
        "snippet": "    @Test public void notClass() {\n        Document doc = Jsoup.parse(\"<div class=left>One</div><div class=right id=1><p>Two</p></div>\");\n\n        Elements el1 = doc.select(\"div:not(.left)\");\n        assertEquals(1, el1.size());\n        assertEquals(\"1\", el1.first().id());\n    }",
        "begin_line": 651,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 652,col 9)-(line 652,col 102)",
            "(line 654,col 9)-(line 654,col 52)",
            "(line 655,col 9)-(line 655,col 36)",
            "(line 656,col 9)-(line 656,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.handlesCommasInSelector()",
        "snippet": "    @Test public void handlesCommasInSelector() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        assertEquals(1, ps.size());\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        assertEquals(2, containers.size());\n        assertEquals(\"div\", containers.get(0).tagName());\n        assertEquals(\"li\", containers.get(1).tagName());\n        assertEquals(\"123\", containers.get(1).text());\n    }",
        "begin_line": 659,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 660,col 9)-(line 660,col 108)",
            "(line 662,col 9)-(line 662,col 47)",
            "(line 663,col 9)-(line 663,col 35)",
            "(line 665,col 9)-(line 665,col 69)",
            "(line 666,col 9)-(line 666,col 43)",
            "(line 667,col 9)-(line 667,col 57)",
            "(line 668,col 9)-(line 668,col 56)",
            "(line 669,col 9)-(line 669,col 54)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.selectSupplementaryCharacter()",
        "snippet": "    @Test public void selectSupplementaryCharacter() {\n        String s = new String(Character.toChars(135361));\n        Document doc = Jsoup.parse(\"<div k\" + s + \"='\" + s + \"'>^\" + s +\"$/div>\");\n        assertEquals(\"div\", doc.select(\"div[k\" + s + \"]\").first().tagName());\n        assertEquals(\"div\", doc.select(\"div:containsOwn(\" + s + \")\").first().tagName());\n    }",
        "begin_line": 672,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 673,col 9)-(line 673,col 57)",
            "(line 674,col 9)-(line 674,col 82)",
            "(line 675,col 9)-(line 675,col 77)",
            "(line 676,col 9)-(line 676,col 88)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.selectClassWithSpace()",
        "snippet": "    @Test\n    public void selectClassWithSpace() {\n        final String html = \"<div class=\\\"value\\\">class without space</div>\\n\"\n                          + \"<div class=\\\"value \\\">class with space</div>\";\n        \n        Document doc = Jsoup.parse(html);\n        \n        Elements found = doc.select(\"div[class=value ]\");\n        assertEquals(2, found.size());\n        assertEquals(\"class without space\", found.get(0).text());\n        assertEquals(\"class with space\", found.get(1).text());\n        \n        found = doc.select(\"div[class=\\\"value \\\"]\");\n        assertEquals(2, found.size());\n        assertEquals(\"class without space\", found.get(0).text());\n        assertEquals(\"class with space\", found.get(1).text());\n        \n        found = doc.select(\"div[class=\\\"value\\\\ \\\"]\");\n        assertEquals(0, found.size());\n    }",
        "begin_line": 679,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 681,col 9)-(line 682,col 75)",
            "(line 684,col 9)-(line 684,col 41)",
            "(line 686,col 9)-(line 686,col 57)",
            "(line 687,col 9)-(line 687,col 38)",
            "(line 688,col 9)-(line 688,col 65)",
            "(line 689,col 9)-(line 689,col 62)",
            "(line 691,col 9)-(line 691,col 52)",
            "(line 692,col 9)-(line 692,col 38)",
            "(line 693,col 9)-(line 693,col 65)",
            "(line 694,col 9)-(line 694,col 62)",
            "(line 696,col 9)-(line 696,col 54)",
            "(line 697,col 9)-(line 697,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.selectSameElements()",
        "snippet": "    @Test public void selectSameElements() {\n        final String html = \"<div>one</div><div>one</div>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"div\");\n        assertEquals(2, els.size());\n\n        Elements subSelect = els.select(\":contains(one)\");\n        assertEquals(2, subSelect.size());\n    }",
        "begin_line": 700,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 701,col 9)-(line 701,col 59)",
            "(line 703,col 9)-(line 703,col 41)",
            "(line 704,col 9)-(line 704,col 41)",
            "(line 705,col 9)-(line 705,col 36)",
            "(line 707,col 9)-(line 707,col 58)",
            "(line 708,col 9)-(line 708,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.attributeWithBrackets()",
        "snippet": "    @Test public void attributeWithBrackets() {\n        String html = \"<div data='End]'>One</div> <div data='[Another)]]'>Two</div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.select(\"div[data='End]']\").first().text());\n        assertEquals(\"Two\", doc.select(\"div[data='[Another)]]']\").first().text());\n        assertEquals(\"One\", doc.select(\"div[data=\\\"End]\\\"]\").first().text());\n        assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"]\").first().text());\n    }",
        "begin_line": 711,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 85)",
            "(line 713,col 9)-(line 713,col 41)",
            "(line 714,col 9)-(line 714,col 75)",
            "(line 715,col 9)-(line 715,col 82)",
            "(line 716,col 9)-(line 716,col 77)",
            "(line 717,col 9)-(line 717,col 84)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.containsData()",
        "snippet": "    @Test @MultiLocaleTest public void containsData() {\n        String html = \"<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>\";\n        Document doc = Jsoup.parse(html);\n        Element body = doc.body();\n\n        Elements dataEls1 = body.select(\":containsData(function)\");\n        Elements dataEls2 = body.select(\"script:containsData(function)\");\n        Elements dataEls3 = body.select(\"span:containsData(comments)\");\n        Elements dataEls4 = body.select(\":containsData(o)\");\n        Elements dataEls5 = body.select(\"style:containsData(ITEM)\");\n\n        assertEquals(2, dataEls1.size()); // body and script\n        assertEquals(1, dataEls2.size());\n        assertEquals(dataEls1.last(), dataEls2.first());\n        assertEquals(\"<script>FUNCTION</script>\", dataEls2.outerHtml());\n        assertEquals(1, dataEls3.size());\n        assertEquals(\"span\", dataEls3.first().tagName());\n        assertEquals(3, dataEls4.size());\n        assertEquals(\"body\", dataEls4.first().tagName());\n        assertEquals(\"script\", dataEls4.get(1).tagName());\n        assertEquals(\"span\", dataEls4.get(2).tagName());\n        assertEquals(1, dataEls5.size());\n    }",
        "begin_line": 720,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 721,col 9)-(line 721,col 114)",
            "(line 722,col 9)-(line 722,col 41)",
            "(line 723,col 9)-(line 723,col 34)",
            "(line 725,col 9)-(line 725,col 67)",
            "(line 726,col 9)-(line 726,col 73)",
            "(line 727,col 9)-(line 727,col 71)",
            "(line 728,col 9)-(line 728,col 60)",
            "(line 729,col 9)-(line 729,col 68)",
            "(line 731,col 9)-(line 731,col 41)",
            "(line 732,col 9)-(line 732,col 41)",
            "(line 733,col 9)-(line 733,col 56)",
            "(line 734,col 9)-(line 734,col 72)",
            "(line 735,col 9)-(line 735,col 41)",
            "(line 736,col 9)-(line 736,col 57)",
            "(line 737,col 9)-(line 737,col 41)",
            "(line 738,col 9)-(line 738,col 57)",
            "(line 739,col 9)-(line 739,col 58)",
            "(line 740,col 9)-(line 740,col 56)",
            "(line 741,col 9)-(line 741,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.containsWithQuote()",
        "snippet": "    @Test public void containsWithQuote() {\n        String html = \"<p>One'One</p><p>One'Two</p>\";\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"p:contains(One\\\\'One)\");\n        assertEquals(1, els.size());\n        assertEquals(\"One'One\", els.text());\n    }",
        "begin_line": 744,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 745,col 9)-(line 745,col 53)",
            "(line 746,col 9)-(line 746,col 41)",
            "(line 747,col 9)-(line 747,col 59)",
            "(line 748,col 9)-(line 748,col 36)",
            "(line 749,col 9)-(line 749,col 44)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.selectFirst()",
        "snippet": "    @Test public void selectFirst() {\n        String html = \"<p>One<p>Two<p>Three\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.selectFirst(\"p\").text());\n    }",
        "begin_line": 752,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 753,col 9)-(line 753,col 45)",
            "(line 754,col 9)-(line 754,col 41)",
            "(line 755,col 9)-(line 755,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.selectFirstWithAnd()",
        "snippet": "    @Test public void selectFirstWithAnd() {\n        String html = \"<p>One<p class=foo>Two<p>Three\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"Two\", doc.selectFirst(\"p.foo\").text());\n    }",
        "begin_line": 758,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 759,col 9)-(line 759,col 55)",
            "(line 760,col 9)-(line 760,col 41)",
            "(line 761,col 9)-(line 761,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.select.SelectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "signature": "org.jsoup.select.SelectorTest.selectFirstWithOr()",
        "snippet": "    @Test public void selectFirstWithOr() {\n        String html = \"<p>One<p>Two<p>Three<div>Four\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.selectFirst(\"p, div\").text());\n    }",
        "begin_line": 764,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 54)",
            "(line 766,col 9)-(line 766,col 41)",
            "(line 767,col 9)-(line 767,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.filter()",
        "snippet": "    @Test public void filter() {\n        String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".headline\").select(\"p\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"There\", els.get(1).text());\n    }",
        "begin_line": 22,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 23,col 9)-(line 23,col 126)",
            "(line 24,col 9)-(line 24,col 38)",
            "(line 25,col 9)-(line 25,col 59)",
            "(line 26,col 9)-(line 26,col 36)",
            "(line 27,col 9)-(line 27,col 49)",
            "(line 28,col 9)-(line 28,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.attributes()",
        "snippet": "    @Test public void attributes() {\n        String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\";\n        Document doc = Jsoup.parse(h);\n        Elements withTitle = doc.select(\"p[title]\");\n        assertEquals(2, withTitle.size());\n        assertTrue(withTitle.hasAttr(\"title\"));\n        assertFalse(withTitle.hasAttr(\"class\"));\n        assertEquals(\"foo\", withTitle.attr(\"title\"));\n\n        withTitle.removeAttr(\"title\");\n        assertEquals(2, withTitle.size()); // existing Elements are not reevaluated\n        assertEquals(0, doc.select(\"p[title]\").size());\n\n        Elements ps = doc.select(\"p\").attr(\"style\", \"classy\");\n        assertEquals(4, ps.size());\n        assertEquals(\"classy\", ps.last().attr(\"style\"));\n        assertEquals(\"bar\", ps.last().attr(\"class\"));\n    }",
        "begin_line": 31,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 74)",
            "(line 33,col 9)-(line 33,col 38)",
            "(line 34,col 9)-(line 34,col 52)",
            "(line 35,col 9)-(line 35,col 42)",
            "(line 36,col 9)-(line 36,col 47)",
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 53)",
            "(line 40,col 9)-(line 40,col 38)",
            "(line 41,col 9)-(line 41,col 42)",
            "(line 42,col 9)-(line 42,col 55)",
            "(line 44,col 9)-(line 44,col 62)",
            "(line 45,col 9)-(line 45,col 35)",
            "(line 46,col 9)-(line 46,col 56)",
            "(line 47,col 9)-(line 47,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.hasAttr()",
        "snippet": "    @Test public void hasAttr() {\n        Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(ps.hasAttr(\"class\"));\n        assertFalse(ps.hasAttr(\"style\"));\n    }",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 91)",
            "(line 52,col 9)-(line 52,col 38)",
            "(line 53,col 9)-(line 53,col 40)",
            "(line 54,col 9)-(line 54,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.hasAbsAttr()",
        "snippet": "    @Test public void hasAbsAttr() {\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>\");\n        Elements one = doc.select(\"#1\");\n        Elements two = doc.select(\"#2\");\n        Elements both = doc.select(\"a\");\n        assertFalse(one.hasAttr(\"abs:href\"));\n        assertTrue(two.hasAttr(\"abs:href\"));\n        assertTrue(both.hasAttr(\"abs:href\")); // hits on #2\n    }",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 107)",
            "(line 59,col 9)-(line 59,col 40)",
            "(line 60,col 9)-(line 60,col 40)",
            "(line 61,col 9)-(line 61,col 40)",
            "(line 62,col 9)-(line 62,col 45)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 64,col 9)-(line 64,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.attr()",
        "snippet": "    @Test public void attr() {\n        Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\");\n        String classVal = doc.select(\"p\").attr(\"class\");\n        assertEquals(\"foo\", classVal);\n    }",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 91)",
            "(line 69,col 9)-(line 69,col 56)",
            "(line 70,col 9)-(line 70,col 38)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.absAttr()",
        "snippet": "    @Test public void absAttr() {\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>\");\n        Elements one = doc.select(\"#1\");\n        Elements two = doc.select(\"#2\");\n        Elements both = doc.select(\"a\");\n\n        assertEquals(\"\", one.attr(\"abs:href\"));\n        assertEquals(\"https://jsoup.org\", two.attr(\"abs:href\"));\n        assertEquals(\"https://jsoup.org\", both.attr(\"abs:href\"));\n    }",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 107)",
            "(line 75,col 9)-(line 75,col 40)",
            "(line 76,col 9)-(line 76,col 40)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 79,col 9)-(line 79,col 47)",
            "(line 80,col 9)-(line 80,col 64)",
            "(line 81,col 9)-(line 81,col 65)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.classes()",
        "snippet": "    @Test public void classes() {\n        Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\");\n\n        Elements els = doc.select(\"p\");\n        assertTrue(els.hasClass(\"red\"));\n        assertFalse(els.hasClass(\"blue\"));\n        els.addClass(\"blue\");\n        els.removeClass(\"yellow\");\n        els.toggleClass(\"mellow\");\n\n        assertEquals(\"blue\", els.get(0).className());\n        assertEquals(\"red green blue mellow\", els.get(1).className());\n    }",
        "begin_line": 84,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 98)",
            "(line 87,col 9)-(line 87,col 39)",
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 42)",
            "(line 90,col 9)-(line 90,col 29)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 34)",
            "(line 94,col 9)-(line 94,col 53)",
            "(line 95,col 9)-(line 95,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.hasClassCaseInsensitive()",
        "snippet": "    @Test public void hasClassCaseInsensitive() {\n        Elements els = Jsoup.parse(\"<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE\").select(\"p\");\n        Element one = els.get(0);\n        Element two = els.get(1);\n        Element thr = els.get(2);\n\n        assertTrue(one.hasClass(\"One\"));\n        assertTrue(one.hasClass(\"ONE\"));\n\n        assertTrue(two.hasClass(\"TWO\"));\n        assertTrue(two.hasClass(\"Two\"));\n\n        assertTrue(thr.hasClass(\"ThreE\"));\n        assertTrue(thr.hasClass(\"three\"));\n    }",
        "begin_line": 98,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 105)",
            "(line 100,col 9)-(line 100,col 33)",
            "(line 101,col 9)-(line 101,col 33)",
            "(line 102,col 9)-(line 102,col 33)",
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 105,col 40)",
            "(line 107,col 9)-(line 107,col 40)",
            "(line 108,col 9)-(line 108,col 40)",
            "(line 110,col 9)-(line 110,col 42)",
            "(line 111,col 9)-(line 111,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.text()",
        "snippet": "    @Test public void text() {\n        String h = \"<div><p>Hello<p>there<p>world</div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there world\", doc.select(\"div > *\").text());\n    }",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 57)",
            "(line 116,col 9)-(line 116,col 38)",
            "(line 117,col 9)-(line 117,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.hasText()",
        "snippet": "    @Test public void hasText() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p></p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertTrue(divs.hasText());\n        assertFalse(doc.select(\"div + div\").hasText());\n    }",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 80)",
            "(line 122,col 9)-(line 122,col 42)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.html()",
        "snippet": "    @Test public void html() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertEquals(\"<p>Hello</p>\\n<p>There</p>\", divs.html());\n    }",
        "begin_line": 127,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 85)",
            "(line 129,col 9)-(line 129,col 42)",
            "(line 130,col 9)-(line 130,col 64)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.outerHtml()",
        "snippet": "    @Test public void outerHtml() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml()));\n    }",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 85)",
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 136,col 113)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.setHtml()",
        "snippet": "    @Test public void setHtml() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\");\n        Elements ps = doc.select(\"p\");\n        \n        ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\");\n        assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n        \n        ps.html(\"<span>Gone</span>\");\n        assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n    }",
        "begin_line": 139,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 71)",
            "(line 141,col 9)-(line 141,col 38)",
            "(line 143,col 9)-(line 143,col 56)",
            "(line 144,col 9)-(line 144,col 104)",
            "(line 146,col 9)-(line 146,col 37)",
            "(line 147,col 9)-(line 147,col 96)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.val()",
        "snippet": "    @Test public void val() {\n        Document doc = Jsoup.parse(\"<input value='one' /><textarea>two</textarea>\");\n        Elements els = doc.select(\"input, textarea\");\n        assertEquals(2, els.size());\n        assertEquals(\"one\", els.val());\n        assertEquals(\"two\", els.last().val());\n        \n        els.val(\"three\");\n        assertEquals(\"three\", els.first().val());\n        assertEquals(\"three\", els.last().val());\n        assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n    }",
        "begin_line": 150,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 84)",
            "(line 152,col 9)-(line 152,col 53)",
            "(line 153,col 9)-(line 153,col 36)",
            "(line 154,col 9)-(line 154,col 39)",
            "(line 155,col 9)-(line 155,col 46)",
            "(line 157,col 9)-(line 157,col 25)",
            "(line 158,col 9)-(line 158,col 49)",
            "(line 159,col 9)-(line 159,col 48)",
            "(line 160,col 9)-(line 160,col 75)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.before()",
        "snippet": "    @Test public void before() {\n        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n        doc.select(\"a\").before(\"<span>foo</span>\");\n        assertEquals(\"<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 163,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 74)",
            "(line 165,col 9)-(line 165,col 51)",
            "(line 166,col 9)-(line 166,col 135)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.after()",
        "snippet": "    @Test public void after() {\n        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n        doc.select(\"a\").after(\"<span>foo</span>\");\n        assertEquals(\"<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 169,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 74)",
            "(line 171,col 9)-(line 171,col 50)",
            "(line 172,col 9)-(line 172,col 135)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.wrap()",
        "snippet": "    @Test public void wrap() {\n        String h = \"<p><b>This</b> is <b>jsoup</b></p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"b\").wrap(\"<i></i>\");\n        assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html());\n    }",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 56)",
            "(line 177,col 9)-(line 177,col 38)",
            "(line 178,col 9)-(line 178,col 40)",
            "(line 179,col 9)-(line 179,col 92)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.wrapDiv()",
        "snippet": "    @Test public void wrapDiv() {\n        String h = \"<p><b>This</b> is <b>jsoup</b>.</p> <p>How do you like it?</p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"p\").wrap(\"<div></div>\");\n        assertEquals(\"<div><p><b>This</b> is <b>jsoup</b>.</p></div> <div><p>How do you like it?</p></div>\",\n                TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 84)",
            "(line 184,col 9)-(line 184,col 38)",
            "(line 185,col 9)-(line 185,col 44)",
            "(line 186,col 9)-(line 187,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.unwrap()",
        "snippet": "    @Test public void unwrap() {\n        String h = \"<div><font>One</font> <font><a href=\\\"/\\\">Two</a></font></div\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"font\").unwrap();\n        assertEquals(\"<div>One <a href=\\\"/\\\">Two</a></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 190,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 83)",
            "(line 192,col 9)-(line 192,col 38)",
            "(line 193,col 9)-(line 193,col 36)",
            "(line 194,col 9)-(line 194,col 104)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.unwrapP()",
        "snippet": "    @Test public void unwrapP() {\n        String h = \"<p><a>One</a> Two</p> Three <i>Four</i> <p>Fix <i>Six</i></p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"p\").unwrap();\n        assertEquals(\"<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>\", TextUtil.stripNewlines(doc.body().html()));\n    }",
        "begin_line": 197,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 83)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 33)",
            "(line 201,col 9)-(line 201,col 115)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.unwrapKeepsSpace()",
        "snippet": "    @Test public void unwrapKeepsSpace() {\n        String h = \"<p>One <span>two</span> <span>three</span> four</p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"span\").unwrap();\n        assertEquals(\"<p>One two three four</p>\", doc.body().html());\n    }",
        "begin_line": 204,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 73)",
            "(line 206,col 9)-(line 206,col 38)",
            "(line 207,col 9)-(line 207,col 36)",
            "(line 208,col 9)-(line 208,col 69)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.empty()",
        "snippet": "    @Test public void empty() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> <p>now!</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n\n        doc.select(\"p\").empty();\n        assertEquals(\"<div><p></p> <p></p></div>\", doc.body().html());\n    }",
        "begin_line": 211,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 87)",
            "(line 213,col 9)-(line 213,col 48)",
            "(line 215,col 9)-(line 215,col 32)",
            "(line 216,col 9)-(line 216,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.remove()",
        "snippet": "    @Test public void remove() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n        \n        doc.select(\"p\").remove();\n        assertEquals(\"<div> jsoup </div>\", doc.body().html());\n    }",
        "begin_line": 219,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 93)",
            "(line 221,col 9)-(line 221,col 48)",
            "(line 223,col 9)-(line 223,col 33)",
            "(line 224,col 9)-(line 224,col 62)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.eq()",
        "snippet": "    @Test public void eq() {\n        String h = \"<p>Hello<p>there<p>world\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"there\", doc.select(\"p\").eq(1).text());\n        assertEquals(\"there\", doc.select(\"p\").get(1).text());\n    }",
        "begin_line": 227,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 46)",
            "(line 229,col 9)-(line 229,col 38)",
            "(line 230,col 9)-(line 230,col 60)",
            "(line 231,col 9)-(line 231,col 61)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.is()",
        "snippet": "    @Test public void is() {\n        String h = \"<p>Hello<p title=foo>there<p>world\";\n        Document doc = Jsoup.parse(h);\n        Elements ps = doc.select(\"p\");\n        assertTrue(ps.is(\"[title=foo]\"));\n        assertFalse(ps.is(\"[title=bar]\"));\n    }",
        "begin_line": 234,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 56)",
            "(line 236,col 9)-(line 236,col 38)",
            "(line 237,col 9)-(line 237,col 38)",
            "(line 238,col 9)-(line 238,col 41)",
            "(line 239,col 9)-(line 239,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.parents()",
        "snippet": "    @Test public void parents() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><p>There</p>\");\n        Elements parents = doc.select(\"p\").parents();\n\n        assertEquals(3, parents.size());\n        assertEquals(\"div\", parents.get(0).tagName());\n        assertEquals(\"body\", parents.get(1).tagName());\n        assertEquals(\"html\", parents.get(2).tagName());\n    }",
        "begin_line": 242,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 74)",
            "(line 244,col 9)-(line 244,col 53)",
            "(line 246,col 9)-(line 246,col 40)",
            "(line 247,col 9)-(line 247,col 54)",
            "(line 248,col 9)-(line 248,col 55)",
            "(line 249,col 9)-(line 249,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.not()",
        "snippet": "    @Test public void not() {\n        Document doc = Jsoup.parse(\"<div id=1><p>One</p></div> <div id=2><p><span>Two</span></p></div>\");\n\n        Elements div1 = doc.select(\"div\").not(\":has(p > span)\");\n        assertEquals(1, div1.size());\n        assertEquals(\"1\", div1.first().id());\n\n        Elements div2 = doc.select(\"div\").not(\"#1\");\n        assertEquals(1, div2.size());\n        assertEquals(\"2\", div2.first().id());\n    }",
        "begin_line": 252,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 105)",
            "(line 255,col 9)-(line 255,col 64)",
            "(line 256,col 9)-(line 256,col 37)",
            "(line 257,col 9)-(line 257,col 45)",
            "(line 259,col 9)-(line 259,col 52)",
            "(line 260,col 9)-(line 260,col 37)",
            "(line 261,col 9)-(line 261,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.tagNameSet()",
        "snippet": "    @Test public void tagNameSet() {\n        Document doc = Jsoup.parse(\"<p>Hello <i>there</i> <i>now</i></p>\");\n        doc.select(\"i\").tagName(\"em\");\n\n        assertEquals(\"<p>Hello <em>there</em> <em>now</em></p>\", doc.body().html());\n    }",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 75)",
            "(line 266,col 9)-(line 266,col 38)",
            "(line 268,col 9)-(line 268,col 84)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.traverse()",
        "snippet": "    @Test public void traverse() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        doc.select(\"div\").traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n            }\n\n            public void tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n            }\n        });\n        assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n    }",
        "begin_line": 271,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 78)",
            "(line 273,col 9)-(line 273,col 56)",
            "(line 274,col 9)-(line 282,col 11)",
            "(line 283,col 9)-(line 283,col 102)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.Anonymous-29f93006-126b-441c-8d57-722ea138c286.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public void head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n            }",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 276,col 17)-(line 276,col 58)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.Anonymous-737e9ab9-19ac-4b64-acb1-7b9a77ee4b81.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public void tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n            }",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 280,col 17)-(line 280,col 59)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.forms()",
        "snippet": "    @Test public void forms() {\n        Document doc = Jsoup.parse(\"<form id=1><input name=q></form><div /><form id=2><input name=f></form>\");\n        Elements els = doc.select(\"*\");\n        assertEquals(9, els.size());\n\n        List<FormElement> forms = els.forms();\n        assertEquals(2, forms.size());\n        assertTrue(forms.get(0) != null);\n        assertTrue(forms.get(1) != null);\n        assertEquals(\"1\", forms.get(0).id());\n        assertEquals(\"2\", forms.get(1).id());\n    }",
        "begin_line": 286,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 287,col 9)-(line 287,col 110)",
            "(line 288,col 9)-(line 288,col 39)",
            "(line 289,col 9)-(line 289,col 36)",
            "(line 291,col 9)-(line 291,col 46)",
            "(line 292,col 9)-(line 292,col 38)",
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 41)",
            "(line 295,col 9)-(line 295,col 45)",
            "(line 296,col 9)-(line 296,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.classWithHyphen()",
        "snippet": "    @Test public void classWithHyphen() {\n        Document doc = Jsoup.parse(\"<p class='tab-nav'>Check</p>\");\n        Elements els = doc.getElementsByClass(\"tab-nav\");\n        assertEquals(1, els.size());\n        assertEquals(\"Check\", els.text());\n    }",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 300,col 67)",
            "(line 301,col 9)-(line 301,col 57)",
            "(line 302,col 9)-(line 302,col 36)",
            "(line 303,col 9)-(line 303,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.siblings()",
        "snippet": "    @Test public void siblings() {\n        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12</div>\");\n\n        Elements els = doc.select(\"p:eq(3)\"); // gets p4 and p10\n        assertEquals(2, els.size());\n\n        Elements next = els.next();\n        assertEquals(2, next.size());\n        assertEquals(\"5\", next.first().text());\n        assertEquals(\"11\", next.last().text());\n\n        assertEquals(0, els.next(\"p:contains(6)\").size());\n        final Elements nextF = els.next(\"p:contains(5)\");\n        assertEquals(1, nextF.size());\n        assertEquals(\"5\", nextF.first().text());\n\n        Elements nextA = els.nextAll();\n        assertEquals(4, nextA.size());\n        assertEquals(\"5\", nextA.first().text());\n        assertEquals(\"12\", nextA.last().text());\n\n        Elements nextAF = els.nextAll(\"p:contains(6)\");\n        assertEquals(1, nextAF.size());\n        assertEquals(\"6\", nextAF.first().text());\n\n        Elements prev = els.prev();\n        assertEquals(2, prev.size());\n        assertEquals(\"3\", prev.first().text());\n        assertEquals(\"9\", prev.last().text());\n\n        assertEquals(0, els.prev(\"p:contains(1)\").size());\n        final Elements prevF = els.prev(\"p:contains(3)\");\n        assertEquals(1, prevF.size());\n        assertEquals(\"3\", prevF.first().text());\n\n        Elements prevA = els.prevAll();\n        assertEquals(6, prevA.size());\n        assertEquals(\"3\", prevA.first().text());\n        assertEquals(\"7\", prevA.last().text());\n\n        Elements prevAF = els.prevAll(\"p:contains(1)\");\n        assertEquals(1, prevAF.size());\n        assertEquals(\"1\", prevAF.first().text());\n    }",
        "begin_line": 306,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 112)",
            "(line 309,col 9)-(line 309,col 45)",
            "(line 310,col 9)-(line 310,col 36)",
            "(line 312,col 9)-(line 312,col 35)",
            "(line 313,col 9)-(line 313,col 37)",
            "(line 314,col 9)-(line 314,col 47)",
            "(line 315,col 9)-(line 315,col 47)",
            "(line 317,col 9)-(line 317,col 58)",
            "(line 318,col 9)-(line 318,col 57)",
            "(line 319,col 9)-(line 319,col 38)",
            "(line 320,col 9)-(line 320,col 48)",
            "(line 322,col 9)-(line 322,col 39)",
            "(line 323,col 9)-(line 323,col 38)",
            "(line 324,col 9)-(line 324,col 48)",
            "(line 325,col 9)-(line 325,col 48)",
            "(line 327,col 9)-(line 327,col 55)",
            "(line 328,col 9)-(line 328,col 39)",
            "(line 329,col 9)-(line 329,col 49)",
            "(line 331,col 9)-(line 331,col 35)",
            "(line 332,col 9)-(line 332,col 37)",
            "(line 333,col 9)-(line 333,col 47)",
            "(line 334,col 9)-(line 334,col 46)",
            "(line 336,col 9)-(line 336,col 58)",
            "(line 337,col 9)-(line 337,col 57)",
            "(line 338,col 9)-(line 338,col 38)",
            "(line 339,col 9)-(line 339,col 48)",
            "(line 341,col 9)-(line 341,col 39)",
            "(line 342,col 9)-(line 342,col 38)",
            "(line 343,col 9)-(line 343,col 48)",
            "(line 344,col 9)-(line 344,col 47)",
            "(line 346,col 9)-(line 346,col 55)",
            "(line 347,col 9)-(line 347,col 39)",
            "(line 348,col 9)-(line 348,col 49)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.eachText()",
        "snippet": "    @Test public void eachText() {\n        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12<p></p></div>\");\n        List<String> divText = doc.select(\"div\").eachText();\n        assertEquals(2, divText.size());\n        assertEquals(\"1 2 3 4 5 6\", divText.get(0));\n        assertEquals(\"7 8 9 10 11 12\", divText.get(1));\n\n        List<String> pText = doc.select(\"p\").eachText();\n        Elements ps = doc.select(\"p\");\n        assertEquals(13, ps.size());\n        assertEquals(12, pText.size()); // not 13, as last doesn't have text\n        assertEquals(\"1\", pText.get(0));\n        assertEquals(\"2\", pText.get(1));\n        assertEquals(\"5\", pText.get(4));\n        assertEquals(\"7\", pText.get(6));\n        assertEquals(\"12\", pText.get(11));\n    }",
        "begin_line": 351,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 352,col 119)",
            "(line 353,col 9)-(line 353,col 60)",
            "(line 354,col 9)-(line 354,col 40)",
            "(line 355,col 9)-(line 355,col 52)",
            "(line 356,col 9)-(line 356,col 55)",
            "(line 358,col 9)-(line 358,col 56)",
            "(line 359,col 9)-(line 359,col 38)",
            "(line 360,col 9)-(line 360,col 36)",
            "(line 361,col 9)-(line 361,col 39)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 363,col 9)-(line 363,col 40)",
            "(line 364,col 9)-(line 364,col 40)",
            "(line 365,col 9)-(line 365,col 40)",
            "(line 366,col 9)-(line 366,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.ElementsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/ElementsTest.java",
        "signature": "org.jsoup.select.ElementsTest.eachAttr()",
        "snippet": "    @Test public void eachAttr() {\n        Document doc = Jsoup.parse(\n            \"<div><a href='/foo'>1</a><a href='http://example.com/bar'>2</a><a href=''>3</a><a>4</a>\",\n            \"http://example.com\");\n\n        List<String> hrefAttrs = doc.select(\"a\").eachAttr(\"href\");\n        assertEquals(3, hrefAttrs.size());\n        assertEquals(\"/foo\", hrefAttrs.get(0));\n        assertEquals(\"http://example.com/bar\", hrefAttrs.get(1));\n        assertEquals(\"\", hrefAttrs.get(2));\n        assertEquals(4, doc.select(\"a\").size());\n\n        List<String> absAttrs = doc.select(\"a\").eachAttr(\"abs:href\");\n        assertEquals(3, absAttrs.size());\n        assertEquals(3, absAttrs.size());\n        assertEquals(\"http://example.com/foo\", absAttrs.get(0));\n        assertEquals(\"http://example.com/bar\", absAttrs.get(1));\n        assertEquals(\"http://example.com\", absAttrs.get(2));\n    }",
        "begin_line": 369,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 372,col 34)",
            "(line 374,col 9)-(line 374,col 66)",
            "(line 375,col 9)-(line 375,col 42)",
            "(line 376,col 9)-(line 376,col 47)",
            "(line 377,col 9)-(line 377,col 65)",
            "(line 378,col 9)-(line 378,col 43)",
            "(line 379,col 9)-(line 379,col 48)",
            "(line 381,col 9)-(line 381,col 69)",
            "(line 382,col 9)-(line 382,col 41)",
            "(line 383,col 9)-(line 383,col 41)",
            "(line 384,col 9)-(line 384,col 64)",
            "(line 385,col 9)-(line 385,col 64)",
            "(line 386,col 9)-(line 386,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.initClass()",
        "snippet": "\t@BeforeClass\n\tpublic static void initClass() {\n\t\tStringBuilder sb = new StringBuilder(\"<html><head></head><body>\");\n\t\t\n\t\tsb.append(\"<div id='pseudo'>\");\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n\t\t}\n\t\tsb.append(\"</div>\");\n\n\t\tsb.append(\"<div id='type'>\");\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n\t\t\tsb.append(String.format(\"<span>%d</span>\",i));\n\t\t\tsb.append(String.format(\"<em>%d</em>\",i));\n            sb.append(String.format(\"<svg>%d</svg>\",i));\n\t\t}\n\t\tsb.append(\"</div>\");\n\n\t\tsb.append(\"<span id='onlySpan'><br /></span>\");\n\t\tsb.append(\"<p class='empty'><!-- Comment only is still empty! --></p>\");\n\t\t\n\t\tsb.append(\"<div id='only'>\");\n\t\tsb.append(\"Some text before the <em>only</em> child in this div\");\n\t\tsb.append(\"</div>\");\n\t\t\n\t\tsb.append(\"</body></html>\");\n\t\thtmlString = sb.toString();\n\t}",
        "begin_line": 17,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 19,col 3)-(line 19,col 68)",
            "(line 21,col 3)-(line 21,col 33)",
            "(line 22,col 3)-(line 24,col 3)",
            "(line 25,col 3)-(line 25,col 22)",
            "(line 27,col 3)-(line 27,col 31)",
            "(line 28,col 3)-(line 33,col 3)",
            "(line 34,col 3)-(line 34,col 22)",
            "(line 36,col 3)-(line 36,col 49)",
            "(line 37,col 3)-(line 37,col 74)",
            "(line 39,col 3)-(line 39,col 31)",
            "(line 40,col 3)-(line 40,col 68)",
            "(line 41,col 3)-(line 41,col 22)",
            "(line 43,col 3)-(line 43,col 30)",
            "(line 44,col 3)-(line 44,col 29)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.init()",
        "snippet": "\t@Before\n\tpublic void init() {\n\t\thtml  = Jsoup.parse(htmlString);\n\t}",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 3)-(line 49,col 34)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.firstChild()",
        "snippet": "\t@Test\n\tpublic void firstChild() {\n\t\tcheck(html.select(\"#pseudo :first-child\"), \"1\");\n\t\tcheck(html.select(\"html:first-child\"));\n\t}",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 54,col 3)-(line 54,col 50)",
            "(line 55,col 3)-(line 55,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.lastChild()",
        "snippet": "\t@Test\n\tpublic void lastChild() {\n\t\tcheck(html.select(\"#pseudo :last-child\"), \"10\");\n\t\tcheck(html.select(\"html:last-child\"));\n\t}",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 60,col 3)-(line 60,col 50)",
            "(line 61,col 3)-(line 61,col 40)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthChild_simple()",
        "snippet": "\t@Test\n\tpublic void nthChild_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#pseudo :nth-child(%d)\", i)), String.valueOf(i));\n\t\t}\n\t}",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 66,col 3)-(line 68,col 3)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthOfType_unknownTag()",
        "snippet": "    @Test\n    public void nthOfType_unknownTag() {\n        for(int i = 1; i <=10; i++) {\n            check(html.select(String.format(\"#type svg:nth-of-type(%d)\", i)), String.valueOf(i));\n        }\n    }",
        "begin_line": 71,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 75,col 9)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthLastChild_simple()",
        "snippet": "\t@Test\n\tpublic void nthLastChild_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#pseudo :nth-last-child(%d)\", i)), String.valueOf(11-i));\n\t\t}\n\t}",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 3)-(line 82,col 3)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthOfType_simple()",
        "snippet": "\t@Test\n\tpublic void nthOfType_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#type p:nth-of-type(%d)\", i)), String.valueOf(i));\n\t\t}\n\t}",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 87,col 3)-(line 89,col 3)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthLastOfType_simple()",
        "snippet": "\t@Test\n\tpublic void nthLastOfType_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#type :nth-last-of-type(%d)\", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));\n\t\t}\n\t}",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 94,col 3)-(line 96,col 3)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthChild_advanced()",
        "snippet": "\t@Test\n\tpublic void nthChild_advanced() {\n\t\tcheck(html.select(\"#pseudo :nth-child(-5)\"));\n\t\tcheck(html.select(\"#pseudo :nth-child(odd)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n-1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n+1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n+3)\"), \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(even)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-child(3n-1)\"), \"2\", \"5\", \"8\");\n\t\tcheck(html.select(\"#pseudo :nth-child(-2n+5)\"), \"1\", \"3\", \"5\");\n\t\tcheck(html.select(\"#pseudo :nth-child(+5)\"), \"5\");\n\t}",
        "begin_line": 99,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 101,col 3)-(line 101,col 47)",
            "(line 102,col 3)-(line 102,col 73)",
            "(line 103,col 3)-(line 103,col 74)",
            "(line 104,col 3)-(line 104,col 74)",
            "(line 105,col 3)-(line 105,col 69)",
            "(line 106,col 3)-(line 106,col 75)",
            "(line 107,col 3)-(line 107,col 73)",
            "(line 108,col 3)-(line 108,col 64)",
            "(line 109,col 3)-(line 109,col 65)",
            "(line 110,col 3)-(line 110,col 52)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthOfType_advanced()",
        "snippet": "\t@Test\n\tpublic void nthOfType_advanced() {\n\t\tcheck(html.select(\"#type :nth-of-type(-5)\"));\n\t\tcheck(html.select(\"#type p:nth-of-type(odd)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type em:nth-of-type(2n-1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-of-type(2n+1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type span:nth-of-type(2n+3)\"), \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-of-type(even)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type p:nth-of-type(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type p:nth-of-type(3n-1)\"), \"2\", \"5\", \"8\");\n\t\tcheck(html.select(\"#type p:nth-of-type(-2n+5)\"), \"1\", \"3\", \"5\");\n\t\tcheck(html.select(\"#type :nth-of-type(+5)\"), \"5\", \"5\", \"5\", \"5\");\n\t}",
        "begin_line": 113,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 115,col 3)-(line 115,col 47)",
            "(line 116,col 3)-(line 116,col 74)",
            "(line 117,col 3)-(line 117,col 76)",
            "(line 118,col 3)-(line 118,col 75)",
            "(line 119,col 3)-(line 119,col 73)",
            "(line 120,col 3)-(line 120,col 76)",
            "(line 121,col 3)-(line 121,col 74)",
            "(line 122,col 3)-(line 122,col 65)",
            "(line 123,col 3)-(line 123,col 66)",
            "(line 124,col 3)-(line 124,col 67)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthLastChild_advanced()",
        "snippet": "\t@Test\n\tpublic void nthLastChild_advanced() {\n\t\tcheck(html.select(\"#pseudo :nth-last-child(-5)\"));\n\t\tcheck(html.select(\"#pseudo :nth-last-child(odd)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n-1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n+1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n+3)\"), \"2\", \"4\", \"6\", \"8\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(even)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(3n-1)\"), \"3\", \"6\", \"9\");\n\n\t\tcheck(html.select(\"#pseudo :nth-last-child(-2n+5)\"), \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(+5)\"), \"6\");\n\t}",
        "begin_line": 128,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 130,col 3)-(line 130,col 52)",
            "(line 131,col 3)-(line 131,col 79)",
            "(line 132,col 3)-(line 132,col 80)",
            "(line 133,col 3)-(line 133,col 80)",
            "(line 134,col 3)-(line 134,col 74)",
            "(line 135,col 3)-(line 135,col 79)",
            "(line 136,col 3)-(line 136,col 77)",
            "(line 137,col 3)-(line 137,col 69)",
            "(line 139,col 3)-(line 139,col 71)",
            "(line 140,col 3)-(line 140,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.nthLastOfType_advanced()",
        "snippet": "\t@Test\n\tpublic void nthLastOfType_advanced() {\n\t\tcheck(html.select(\"#type :nth-last-of-type(-5)\"));\n\t\tcheck(html.select(\"#type p:nth-last-of-type(odd)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type em:nth-last-of-type(2n-1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(2n+1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type span:nth-last-of-type(2n+3)\"), \"2\", \"4\", \"6\", \"8\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(even)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(2n)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(3n-1)\"), \"3\", \"6\", \"9\");\n\n\t\tcheck(html.select(\"#type span:nth-last-of-type(-2n+5)\"), \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type :nth-last-of-type(+5)\"), \"6\", \"6\", \"6\", \"6\");\n\t}",
        "begin_line": 143,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 145,col 3)-(line 145,col 52)",
            "(line 146,col 3)-(line 146,col 80)",
            "(line 147,col 3)-(line 147,col 82)",
            "(line 148,col 3)-(line 148,col 81)",
            "(line 149,col 3)-(line 149,col 78)",
            "(line 150,col 3)-(line 150,col 80)",
            "(line 151,col 3)-(line 151,col 78)",
            "(line 152,col 3)-(line 152,col 70)",
            "(line 154,col 3)-(line 154,col 75)",
            "(line 155,col 3)-(line 155,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.firstOfType()",
        "snippet": "\t@Test\n\tpublic void firstOfType() {\n\t\tcheck(html.select(\"div:not(#only) :first-of-type\"), \"1\", \"1\", \"1\", \"1\", \"1\");\n\t}",
        "begin_line": 158,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 3)-(line 160,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.lastOfType()",
        "snippet": "\t@Test\n\tpublic void lastOfType() {\n\t\tcheck(html.select(\"div:not(#only) :last-of-type\"), \"10\", \"10\", \"10\", \"10\", \"10\");\n\t}",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 3)-(line 165,col 83)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.empty()",
        "snippet": "\t@Test\n\tpublic void empty() {\n\t\tfinal Elements sel = html.select(\":empty\");\n\t\tassertEquals(3, sel.size());\n\t\tassertEquals(\"head\", sel.get(0).tagName());\n\t\tassertEquals(\"br\", sel.get(1).tagName());\n\t\tassertEquals(\"p\", sel.get(2).tagName());\n\t}",
        "begin_line": 168,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 170,col 3)-(line 170,col 45)",
            "(line 171,col 3)-(line 171,col 30)",
            "(line 172,col 3)-(line 172,col 45)",
            "(line 173,col 3)-(line 173,col 43)",
            "(line 174,col 3)-(line 174,col 42)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.onlyChild()",
        "snippet": "\t@Test\n\tpublic void onlyChild() {\n\t\tfinal Elements sel = html.select(\"span :only-child\");\n\t\tassertEquals(1, sel.size());\n\t\tassertEquals(\"br\", sel.get(0).tagName());\n\t\t\n\t\tcheck(html.select(\"#only :only-child\"), \"only\");\n\t}",
        "begin_line": 177,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 179,col 3)-(line 179,col 55)",
            "(line 180,col 3)-(line 180,col 30)",
            "(line 181,col 3)-(line 181,col 43)",
            "(line 183,col 3)-(line 183,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.onlyOfType()",
        "snippet": "\t@Test\n\tpublic void onlyOfType() {\n\t\tfinal Elements sel = html.select(\":only-of-type\");\n\t\tassertEquals(6, sel.size());\n\t\tassertEquals(\"head\", sel.get(0).tagName());\n\t\tassertEquals(\"body\", sel.get(1).tagName());\n\t\tassertEquals(\"span\", sel.get(2).tagName());\n\t\tassertEquals(\"br\", sel.get(3).tagName());\n\t\tassertEquals(\"p\", sel.get(4).tagName());\n\t\tassertTrue(sel.get(4).hasClass(\"empty\"));\n\t\tassertEquals(\"em\", sel.get(5).tagName());\n\t}",
        "begin_line": 186,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 188,col 3)-(line 188,col 52)",
            "(line 189,col 3)-(line 189,col 30)",
            "(line 190,col 3)-(line 190,col 45)",
            "(line 191,col 3)-(line 191,col 45)",
            "(line 192,col 3)-(line 192,col 45)",
            "(line 193,col 3)-(line 193,col 43)",
            "(line 194,col 3)-(line 194,col 42)",
            "(line 195,col 3)-(line 195,col 43)",
            "(line 196,col 3)-(line 196,col 43)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.check(org.jsoup.select.Elements, java.lang.String...)",
        "snippet": "\tprotected void check(Elements result, String...expectedContent ) {\n\t\tassertEquals(\"Number of elements\", expectedContent.length, result.size());\n\t\tfor (int i = 0; i < expectedContent.length; i++) {\n\t\t\tassertNotNull(result.get(i));\n\t\t\tassertEquals(\"Expected element\",expectedContent[i], result.get(i).ownText());\n\t\t}\n\t}",
        "begin_line": 199,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 200,col 3)-(line 200,col 76)",
            "(line 201,col 3)-(line 204,col 3)"
        ]
    },
    {
        "class_name": "org.jsoup.select.CssTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/CssTest.java",
        "signature": "org.jsoup.select.CssTest.root()",
        "snippet": "\t@Test\n\tpublic void root() {\n\t\tElements sel = html.select(\":root\");\n\t\tassertEquals(1, sel.size());\n\t\tassertNotNull(sel.get(0));\n\t\tassertEquals(Tag.valueOf(\"html\"), sel.get(0).tag());\n\n\t\tElements sel2 = html.select(\"body\").select(\":root\");\n\t\tassertEquals(1, sel2.size());\n\t\tassertNotNull(sel2.get(0));\n\t\tassertEquals(Tag.valueOf(\"body\"), sel2.get(0).tag());\n\t}",
        "begin_line": 208,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 210,col 3)-(line 210,col 38)",
            "(line 211,col 3)-(line 211,col 30)",
            "(line 212,col 3)-(line 212,col 28)",
            "(line 213,col 3)-(line 213,col 54)",
            "(line 215,col 3)-(line 215,col 54)",
            "(line 216,col 3)-(line 216,col 31)",
            "(line 217,col 3)-(line 217,col 29)",
            "(line 218,col 3)-(line 218,col 55)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.filterVisit()",
        "snippet": "    @Test\n    public void filterVisit() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }\n\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n    }",
        "begin_line": 14,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 16,col 9)-(line 16,col 78)",
            "(line 17,col 9)-(line 17,col 56)",
            "(line 18,col 9)-(line 28,col 30)",
            "(line 29,col 9)-(line 29,col 102)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-4c7e1549-236d-40fc-92f8-6b4f695d881c.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "child_ranges": [
            "(line 20,col 17)-(line 20,col 58)",
            "(line 21,col 17)-(line 21,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-b20057a8-d3f4-4232-8fdb-7e603bbe018b.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 25,col 17)-(line 25,col 59)",
            "(line 26,col 17)-(line 26,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.filterSkipChildren()",
        "snippet": "    @Test\n    public void filterSkipChildren() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n                // OMIT contents of p:\n                return (\"p\".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;\n            }\n\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div><p></p></div><div><#text></#text></div>\", accum.toString());\n    }",
        "begin_line": 32,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 78)",
            "(line 35,col 9)-(line 35,col 56)",
            "(line 36,col 9)-(line 47,col 30)",
            "(line 48,col 9)-(line 48,col 87)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-4d707bb1-4567-40e0-b1be-83eb42494bfe.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n                // OMIT contents of p:\n                return (\"p\".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;\n            }",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 17)-(line 38,col 58)",
            "(line 40,col 17)-(line 40,col 106)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-88b02f16-cfbe-48d9-b4ea-c46a1629420f.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 44,col 17)-(line 44,col 59)",
            "(line 45,col 17)-(line 45,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.filterSkipEntirely()",
        "snippet": "    @Test\n    public void filterSkipEntirely() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            public FilterResult head(Node node, int depth) {\n                // OMIT p:\n                if (\"p\".equals(node.nodeName()))\n                    return FilterResult.SKIP_ENTIRELY;\n                accum.append(\"<\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }\n\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div></div><div><#text></#text></div>\", accum.toString());\n    }",
        "begin_line": 51,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 78)",
            "(line 54,col 9)-(line 54,col 56)",
            "(line 55,col 9)-(line 68,col 30)",
            "(line 69,col 9)-(line 69,col 80)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-af64ba3d-0dc4-4e1e-b31d-7f00edeb95e1.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult head(Node node, int depth) {\n                // OMIT p:\n                if (\"p\".equals(node.nodeName()))\n                    return FilterResult.SKIP_ENTIRELY;\n                accum.append(\"<\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 17)-(line 59,col 54)",
            "(line 60,col 17)-(line 60,col 58)",
            "(line 61,col 17)-(line 61,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-9e9f1436-0162-46c1-8f5a-959fc20630bc.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 65,col 17)-(line 65,col 59)",
            "(line 66,col 17)-(line 66,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.filterRemove()",
        "snippet": "    @Test\n    public void filterRemove() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There be <b>bold</b></div>\");\n        NodeTraversor.filter(new NodeFilter() {\n            public FilterResult head(Node node, int depth) {\n                // Delete \"p\" in head:\n                return (\"p\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n            }\n\n            public FilterResult tail(Node node, int depth) {\n                // Delete \"b\" in tail:\n                return (\"b\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div></div>\\n<div>\\n There be \\n</div>\", doc.select(\"body\").html());\n    }",
        "begin_line": 72,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 93)",
            "(line 75,col 9)-(line 85,col 30)",
            "(line 86,col 9)-(line 86,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-56495ddf-0255-4c8d-bfba-72dc80c15e37.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult head(Node node, int depth) {\n                // Delete \"p\" in head:\n                return (\"p\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n            }",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 17)-(line 78,col 99)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-0181c502-92f3-4b50-81a3-735f3aa84c4f.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult tail(Node node, int depth) {\n                // Delete \"b\" in tail:\n                return (\"b\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n            }",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 17)-(line 83,col 99)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.filterStop()",
        "snippet": "    @Test\n    public void filterStop() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }\n\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                // Stop after p.\n                return (\"p\".equals(node.nodeName())) ? FilterResult.STOP : FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div><p><#text></#text></p>\", accum.toString());\n    }",
        "begin_line": 89,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 78)",
            "(line 92,col 9)-(line 92,col 56)",
            "(line 93,col 9)-(line 104,col 30)",
            "(line 105,col 9)-(line 105,col 70)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-27e22c20-abdc-40eb-b2e4-d57515668f4f.head(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\" + node.nodeName() + \">\");\n                return FilterResult.CONTINUE;\n            }",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 95,col 17)-(line 95,col 58)",
            "(line 96,col 17)-(line 96,col 45)"
        ]
    },
    {
        "class_name": "org.jsoup.select.TraversorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/select/TraversorTest.java",
        "signature": "org.jsoup.select.TraversorTest.Anonymous-49636eec-3248-4fa2-bc66-66ae6ff44cf2.tail(org.jsoup.nodes.Node, int)",
        "snippet": "            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\" + node.nodeName() + \">\");\n                // Stop after p.\n                return (\"p\".equals(node.nodeName())) ? FilterResult.STOP : FilterResult.CONTINUE;\n            }",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 17)-(line 100,col 59)",
            "(line 102,col 17)-(line 102,col 97)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.simpleBehaviourTest()",
        "snippet": "    @Test public void simpleBehaviourTest() {\n        String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n\n        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 21,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 22,col 9)-(line 22,col 102)",
            "(line 23,col 9)-(line 23,col 66)",
            "(line 25,col 9)-(line 25,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.simpleBehaviourTest2()",
        "snippet": "    @Test public void simpleBehaviourTest2() {\n        String h = \"Hello <b>there</b>!\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n\n        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 28,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 41)",
            "(line 30,col 9)-(line 30,col 66)",
            "(line 32,col 9)-(line 32,col 79)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.basicBehaviourTest()",
        "snippet": "    @Test public void basicBehaviourTest() {\n        String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basic());\n\n        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"http://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 35,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 144)",
            "(line 37,col 9)-(line 37,col 61)",
            "(line 39,col 9)-(line 40,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.basicWithImagesTest()",
        "snippet": "    @Test public void basicWithImagesTest() {\n        String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\"></p><p><img></p>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 121)",
            "(line 45,col 9)-(line 45,col 71)",
            "(line 46,col 9)-(line 46,col 126)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testRelaxed()",
        "snippet": "    @Test public void testRelaxed() {\n        String h = \"<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 78)",
            "(line 51,col 9)-(line 51,col 63)",
            "(line 52,col 9)-(line 52,col 136)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testRemoveTags()",
        "snippet": "    @Test public void testRemoveTags() {\n        String h = \"<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeTags(\"a\"));\n\n        assertEquals(\"<p>Nice</p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 98)",
            "(line 57,col 9)-(line 57,col 77)",
            "(line 59,col 9)-(line 59,col 101)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testRemoveAttributes()",
        "snippet": "    @Test public void testRemoveAttributes() {\n        String h = \"<div><p>Nice</p><blockquote cite='http://example.com/quotations'>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeAttributes(\"blockquote\", \"cite\"));\n\n        assertEquals(\"<p>Nice</p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 105)",
            "(line 64,col 9)-(line 64,col 100)",
            "(line 66,col 9)-(line 66,col 101)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testRemoveEnforcedAttributes()",
        "snippet": "    @Test public void testRemoveEnforcedAttributes() {\n        String h = \"<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeEnforcedAttribute(\"a\", \"rel\"));\n\n        assertEquals(\"<p><a href=\\\"http://nice.com\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 98)",
            "(line 71,col 9)-(line 71,col 97)",
            "(line 73,col 9)-(line 74,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testRemoveProtocols()",
        "snippet": "    @Test public void testRemoveProtocols() {\n        String h = \"<p>Contact me <a href='mailto:info@example.com'>here</a></p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeProtocols(\"a\", \"href\", \"ftp\", \"mailto\"));\n\n        assertEquals(\"<p>Contact me <a rel=\\\"nofollow\\\">here</a></p>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 82)",
            "(line 79,col 9)-(line 79,col 107)",
            "(line 81,col 9)-(line 82,col 51)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.whitelistedProtocolShouldBeRetained()",
        "snippet": "    @Test @MultiLocaleTest public void whitelistedProtocolShouldBeRetained() {\n        Whitelist whitelist = Whitelist.none()\n                .addTags(\"a\")\n                .addAttributes(\"a\", \"href\")\n                .addProtocols(\"a\", \"href\", \"something\");\n\n        String cleanHtml = Jsoup.clean(\"<a href=\\\"SOMETHING://x\\\"></a>\", whitelist);\n\n        assertEquals(\"<a href=\\\"SOMETHING://x\\\"></a>\", TextUtil.stripNewlines(cleanHtml));\n    }",
        "begin_line": 85,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 89,col 56)",
            "(line 91,col 9)-(line 91,col 84)",
            "(line 93,col 9)-(line 93,col 90)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropComments()",
        "snippet": "    @Test public void testDropComments() {\n        String h = \"<p>Hello<!-- no --></p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<p>Hello</p>\", cleanHtml);\n    }",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 63)",
            "(line 99,col 9)-(line 99,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropXmlProc()",
        "snippet": "    @Test public void testDropXmlProc() {\n        String h = \"<?import namespace=\\\"xss\\\"><p>Hello</p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<p>Hello</p>\", cleanHtml);\n    }",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 61)",
            "(line 104,col 9)-(line 104,col 63)",
            "(line 105,col 9)-(line 105,col 48)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropScript()",
        "snippet": "    @Test public void testDropScript() {\n        String h = \"<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"\", cleanHtml);\n    }",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 88)",
            "(line 110,col 9)-(line 110,col 63)",
            "(line 111,col 9)-(line 111,col 36)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropImageScript()",
        "snippet": "    @Test public void testDropImageScript() {\n        String h = \"<IMG SRC=\\\"javascript:alert('XSS')\\\">\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<img>\", cleanHtml);\n    }",
        "begin_line": 114,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 59)",
            "(line 116,col 9)-(line 116,col 63)",
            "(line 117,col 9)-(line 117,col 41)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testCleanJavascriptHref()",
        "snippet": "    @Test public void testCleanJavascriptHref() {\n        String h = \"<A HREF=\\\"javascript:document.location='http://www.google.com/'\\\">XSS</A>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<a>XSS</a>\", cleanHtml);\n    }",
        "begin_line": 120,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 95)",
            "(line 122,col 9)-(line 122,col 63)",
            "(line 123,col 9)-(line 123,col 46)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testCleanAnchorProtocol()",
        "snippet": "    @Test public void testCleanAnchorProtocol() {\n        String validAnchor = \"<a href=\\\"#valid\\\">Valid anchor</a>\";\n        String invalidAnchor = \"<a href=\\\"#anchor with spaces\\\">Invalid anchor</a>\";\n\n        // A Whitelist that does not allow anchors will strip them out.\n        String cleanHtml = Jsoup.clean(validAnchor, Whitelist.relaxed());\n        assertEquals(\"<a>Valid anchor</a>\", cleanHtml);\n\n        cleanHtml = Jsoup.clean(invalidAnchor, Whitelist.relaxed());\n        assertEquals(\"<a>Invalid anchor</a>\", cleanHtml);\n\n        // A Whitelist that allows them will keep them.\n        Whitelist relaxedWithAnchor = Whitelist.relaxed().addProtocols(\"a\", \"href\", \"#\");\n\n        cleanHtml = Jsoup.clean(validAnchor, relaxedWithAnchor);\n        assertEquals(validAnchor, cleanHtml);\n\n        // An invalid anchor is never valid.\n        cleanHtml = Jsoup.clean(invalidAnchor, relaxedWithAnchor);\n        assertEquals(\"<a>Invalid anchor</a>\", cleanHtml);\n    }",
        "begin_line": 126,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 67)",
            "(line 128,col 9)-(line 128,col 84)",
            "(line 131,col 9)-(line 131,col 73)",
            "(line 132,col 9)-(line 132,col 55)",
            "(line 134,col 9)-(line 134,col 68)",
            "(line 135,col 9)-(line 135,col 57)",
            "(line 138,col 9)-(line 138,col 89)",
            "(line 140,col 9)-(line 140,col 64)",
            "(line 141,col 9)-(line 141,col 45)",
            "(line 144,col 9)-(line 144,col 66)",
            "(line 145,col 9)-(line 145,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testDropsUnknownTags()",
        "snippet": "    @Test public void testDropsUnknownTags() {\n        String h = \"<p><custom foo=true>Test</custom></p>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n        assertEquals(\"<p>Test</p>\", cleanHtml);\n    }",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 59)",
            "(line 150,col 9)-(line 150,col 63)",
            "(line 151,col 9)-(line 151,col 47)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testHandlesEmptyAttributes()",
        "snippet": "    @Test public void testHandlesEmptyAttributes() {\n        String h = \"<img alt=\\\"\\\" src= unknown=''>\";\n        String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n        assertEquals(\"<img alt=\\\"\\\">\", cleanHtml);\n    }",
        "begin_line": 154,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 52)",
            "(line 156,col 9)-(line 156,col 71)",
            "(line 157,col 9)-(line 157,col 50)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testIsValidBodyHtml()",
        "snippet": "    @Test public void testIsValidBodyHtml() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n        assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));\n        assertFalse(Jsoup.isValid(ok, Whitelist.none()));\n        assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));\n    }",
        "begin_line": 160,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 93)",
            "(line 162,col 9)-(line 162,col 79)",
            "(line 163,col 9)-(line 163,col 62)",
            "(line 164,col 9)-(line 164,col 62)",
            "(line 165,col 9)-(line 165,col 54)",
            "(line 166,col 9)-(line 166,col 76)",
            "(line 167,col 9)-(line 167,col 97)",
            "(line 168,col 9)-(line 168,col 76)",
            "(line 169,col 9)-(line 169,col 35)",
            "(line 170,col 9)-(line 170,col 57)",
            "(line 171,col 9)-(line 171,col 58)",
            "(line 172,col 9)-(line 172,col 60)",
            "(line 173,col 9)-(line 173,col 60)",
            "(line 174,col 9)-(line 174,col 60)",
            "(line 175,col 9)-(line 175,col 60)",
            "(line 176,col 9)-(line 176,col 60)",
            "(line 177,col 9)-(line 177,col 60)",
            "(line 178,col 9)-(line 178,col 57)",
            "(line 179,col 9)-(line 179,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testIsValidDocument()",
        "snippet": "    @Test public void testIsValidDocument() {\n        String ok = \"<html><head></head><body><p>Hello</p></body><html>\";\n        String nok = \"<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>\";\n\n        Whitelist relaxed = Whitelist.relaxed();\n        Cleaner cleaner = new Cleaner(relaxed);\n        Document okDoc = Jsoup.parse(ok);\n        assertTrue(cleaner.isValid(okDoc));\n        assertFalse(cleaner.isValid(Jsoup.parse(nok)));\n        assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));\n    }",
        "begin_line": 182,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 73)",
            "(line 184,col 9)-(line 184,col 116)",
            "(line 186,col 9)-(line 186,col 48)",
            "(line 187,col 9)-(line 187,col 47)",
            "(line 188,col 9)-(line 188,col 41)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 190,col 9)-(line 190,col 55)",
            "(line 191,col 9)-(line 191,col 66)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.resolvesRelativeLinks()",
        "snippet": "    @Test public void resolvesRelativeLinks() {\n        String html = \"<a href='/foo'>Link</a><img src='/bar'>\";\n        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages());\n        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"http://example.com/bar\\\">\", clean);\n    }",
        "begin_line": 194,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 64)",
            "(line 196,col 9)-(line 196,col 93)",
            "(line 197,col 9)-(line 197,col 130)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.preservesRelativeLinksIfConfigured()",
        "snippet": "    @Test public void preservesRelativeLinksIfConfigured() {\n        String html = \"<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>\";\n        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basicWithImages().preserveRelativeLinks(true));\n        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a>\\n<img src=\\\"/bar\\\"> \\n<img>\", clean);\n    }",
        "begin_line": 200,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 95)",
            "(line 202,col 9)-(line 202,col 121)",
            "(line 203,col 9)-(line 203,col 102)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.dropsUnresolvableRelativeLinks()",
        "snippet": "    @Test public void dropsUnresolvableRelativeLinks() {\n        String html = \"<a href='/foo'>Link</a>\";\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", clean);\n    }",
        "begin_line": 206,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 48)",
            "(line 208,col 9)-(line 208,col 60)",
            "(line 209,col 9)-(line 209,col 60)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.handlesCustomProtocols()",
        "snippet": "    @Test public void handlesCustomProtocols() {\n        String html = \"<img src='cid:12345' /> <img src='data:gzzt' />\";\n        String dropped = Jsoup.clean(html, Whitelist.basicWithImages());\n        assertEquals(\"<img> \\n<img>\", dropped);\n\n        String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols(\"img\", \"src\", \"cid\", \"data\"));\n        assertEquals(\"<img src=\\\"cid:12345\\\"> \\n<img src=\\\"data:gzzt\\\">\", preserved);\n    }",
        "begin_line": 212,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 72)",
            "(line 214,col 9)-(line 214,col 72)",
            "(line 215,col 9)-(line 215,col 47)",
            "(line 217,col 9)-(line 217,col 116)",
            "(line 218,col 9)-(line 218,col 85)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.handlesAllPseudoTag()",
        "snippet": "    @Test public void handlesAllPseudoTag() {\n        String html = \"<p class='foo' src='bar'><a class='qux'>link</a></p>\";\n        Whitelist whitelist = new Whitelist()\n                .addAttributes(\":all\", \"class\")\n                .addAttributes(\"p\", \"style\")\n                .addTags(\"p\", \"a\");\n\n        String clean = Jsoup.clean(html, whitelist);\n        assertEquals(\"<p class=\\\"foo\\\"><a class=\\\"qux\\\">link</a></p>\", clean);\n    }",
        "begin_line": 221,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 77)",
            "(line 223,col 9)-(line 226,col 35)",
            "(line 228,col 9)-(line 228,col 52)",
            "(line 229,col 9)-(line 229,col 78)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.addsTagOnAttributesIfNotSet()",
        "snippet": "    @Test public void addsTagOnAttributesIfNotSet() {\n        String html = \"<p class='foo' src='bar'>One</p>\";\n        Whitelist whitelist = new Whitelist()\n            .addAttributes(\"p\", \"class\");\n        // ^^ whitelist does not have explicit tag add for p, inferred from add attributes.\n        String clean = Jsoup.clean(html, whitelist);\n        assertEquals(\"<p class=\\\"foo\\\">One</p>\", clean);\n    }",
        "begin_line": 232,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 57)",
            "(line 234,col 9)-(line 235,col 41)",
            "(line 237,col 9)-(line 237,col 52)",
            "(line 238,col 9)-(line 238,col 56)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.supplyOutputSettings()",
        "snippet": "    @Test public void supplyOutputSettings() {\n        // test that one can override the default document output settings\n        Document.OutputSettings os = new Document.OutputSettings();\n        os.prettyPrint(false);\n        os.escapeMode(Entities.EscapeMode.extended);\n        os.charset(\"ascii\");\n\n        String html = \"<div><p>&bernou;</p></div>\";\n        String customOut = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);\n        String defaultOut = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed());\n        assertNotSame(defaultOut, customOut);\n\n        assertEquals(\"<div><p>&Bscr;</p></div>\", customOut); // entities now prefers shorted names if aliased\n        assertEquals(\"<div>\\n\" +\n            \" <p>\u212c</p>\\n\" +\n            \"</div>\", defaultOut);\n\n        os.charset(\"ASCII\");\n        os.escapeMode(Entities.EscapeMode.base);\n        String customOut2 = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);\n        assertEquals(\"<div><p>&#x212c;</p></div>\", customOut2);\n    }",
        "begin_line": 241,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 67)",
            "(line 244,col 9)-(line 244,col 30)",
            "(line 245,col 9)-(line 245,col 52)",
            "(line 246,col 9)-(line 246,col 28)",
            "(line 248,col 9)-(line 248,col 51)",
            "(line 249,col 9)-(line 249,col 89)",
            "(line 250,col 9)-(line 250,col 86)",
            "(line 251,col 9)-(line 251,col 45)",
            "(line 253,col 9)-(line 253,col 60)",
            "(line 254,col 9)-(line 256,col 34)",
            "(line 258,col 9)-(line 258,col 28)",
            "(line 259,col 9)-(line 259,col 48)",
            "(line 260,col 9)-(line 260,col 90)",
            "(line 261,col 9)-(line 261,col 63)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.handlesFramesets()",
        "snippet": "    @Test public void handlesFramesets() {\n        String dirty = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\";\n        String clean = Jsoup.clean(dirty, Whitelist.basic());\n        assertEquals(\"\", clean); // nothing good can come out of that\n\n        Document dirtyDoc = Jsoup.parse(dirty);\n        Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc);\n        assertFalse(cleanDoc == null);\n        assertEquals(0, cleanDoc.body().childNodeSize());\n    }",
        "begin_line": 264,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 153)",
            "(line 266,col 9)-(line 266,col 61)",
            "(line 267,col 9)-(line 267,col 32)",
            "(line 269,col 9)-(line 269,col 47)",
            "(line 270,col 9)-(line 270,col 75)",
            "(line 271,col 9)-(line 271,col 38)",
            "(line 272,col 9)-(line 272,col 57)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.cleansInternationalText()",
        "snippet": "    @Test public void cleansInternationalText() {\n        assertEquals(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Jsoup.clean(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Whitelist.none()));\n    }",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 72)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.testScriptTagInWhiteList()",
        "snippet": "    @Test\n    public void testScriptTagInWhiteList() {\n        Whitelist whitelist = Whitelist.relaxed();\n        whitelist.addTags( \"script\" );\n        assertTrue( Jsoup.isValid(\"Hello<script>alert('Doh')</script>World !\", whitelist ) );\n    }",
        "begin_line": 279,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 50)",
            "(line 282,col 9)-(line 282,col 38)",
            "(line 283,col 9)-(line 283,col 93)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.bailsIfRemovingProtocolThatsNotSet()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void bailsIfRemovingProtocolThatsNotSet() {\n        // a case that came up on the email list\n        Whitelist w = Whitelist.none();\n\n        // note no add tag, and removing protocol without adding first\n        w.addAttributes(\"a\", \"href\");\n        w.removeProtocols(\"a\", \"href\", \"javascript\"); // with no protocols enforced, this was a noop. Now validates.\n    }",
        "begin_line": 286,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 39)",
            "(line 292,col 9)-(line 292,col 37)",
            "(line 293,col 9)-(line 293,col 53)"
        ]
    },
    {
        "class_name": "org.jsoup.safety.CleanerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "signature": "org.jsoup.safety.CleanerTest.handlesControlCharactersAfterTagName()",
        "snippet": "    @Test public void handlesControlCharactersAfterTagName() {\n        String html = \"<a/\\06>\";\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        assertEquals(\"<a rel=\\\"nofollow\\\"></a>\", clean);\n    }",
        "begin_line": 296,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 297,col 9)-(line 297,col 32)",
            "(line 298,col 9)-(line 298,col 60)",
            "(line 299,col 9)-(line 299,col 56)"
        ]
    }
]