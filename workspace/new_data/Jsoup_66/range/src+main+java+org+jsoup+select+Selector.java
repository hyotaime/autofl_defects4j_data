{
  "filepath": "/tmp/Jsoup-66b/src/main/java/org/jsoup/select/Selector.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "Selector",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 76,
      "end_line": 166,
      "comment": "\n * CSS-like element selector, that finds elements matching a query.\n *\n * \u003ch2\u003eSelector syntax\u003c/h2\u003e\n * \u003cp\u003e\n * A selector is a chain of simple selectors, separated by combinators. Selectors are \u003cb\u003ecase insensitive\u003c/b\u003e (including against\n * elements, attributes, and attribute values).\n * \u003c/p\u003e\n * \u003cp\u003e\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n * \u003c/p\u003e\n * \u003ctable summary\u003d\"\"\u003e\n * \u003ctr\u003e\u003cth align\u003d\"left\"\u003ePattern\u003c/th\u003e\u003cth align\u003d\"left\"\u003eMatches\u003c/th\u003e\u003cth align\u003d\"left\"\u003eExample\u003c/th\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eany element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003etag\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with the given tag name\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e*|E\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements of type E in any namespace \u003ci\u003ens\u003c/i\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e*|name\u003c/code\u003e finds \u003ccode\u003e\u0026lt;fb:name\u0026gt;\u003c/code\u003e elements\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ens|E\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements of type E in the namespace \u003ci\u003ens\u003c/i\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003efb|name\u003c/code\u003e finds \u003ccode\u003e\u0026lt;fb:name\u0026gt;\u003c/code\u003e elements\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e#id\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with attribute ID of \"id\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv#wrap\u003c/code\u003e, \u003ccode\u003e#logo\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e.class\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with a class name of \"class\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv.left\u003c/code\u003e, \u003ccode\u003e.result\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\" (with any value)\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ea[href]\u003c/code\u003e, \u003ccode\u003e[title]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[^attrPrefix]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e[^data-]\u003c/code\u003e, \u003ccode\u003ediv[^data-]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr\u003dval]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\", and value equal to \"val\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eimg[width\u003d500]\u003c/code\u003e, \u003ccode\u003ea[rel\u003dnofollow]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr\u003d\u0026quot;val\u0026quot;]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\", and value equal to \"val\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003espan[hello\u003d\"Cleveland\"][goodbye\u003d\"Columbus\"]\u003c/code\u003e, \u003ccode\u003ea[rel\u003d\u0026quot;nofollow\u0026quot;]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr^\u003dvalPrefix]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\", and value starting with \"valPrefix\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ea[href^\u003dhttp:]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr$\u003dvalSuffix]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\", and value ending with \"valSuffix\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eimg[src$\u003d.png]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr*\u003dvalContaining]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\", and value containing \"valContaining\"\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ea[href*\u003d/search/]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e[attr~\u003d\u003cem\u003eregex\u003c/em\u003e]\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements with an attribute named \"attr\", and value matching the regular expression\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eimg[src~\u003d(?i)\\\\.(png|jpe?g)]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003eThe above may be combined in any order\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv.header[title]\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ctd colspan\u003d\"3\"\u003e\u003ch3\u003eCombinators\u003c/h3\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eE F\u003c/code\u003e\u003c/td\u003e\u003ctd\u003ean F element descended from an E element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv a\u003c/code\u003e, \u003ccode\u003e.logo h1\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eE {@literal \u003e} F\u003c/code\u003e\u003c/td\u003e\u003ctd\u003ean F direct child of E\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eol {@literal \u003e} li\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eE + F\u003c/code\u003e\u003c/td\u003e\u003ctd\u003ean F element immediately preceded by sibling E\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eli + li\u003c/code\u003e, \u003ccode\u003ediv.head + div\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eE ~ F\u003c/code\u003e\u003c/td\u003e\u003ctd\u003ean F element preceded by sibling E\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eh1 ~ p\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eE, F, G\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eall matching elements E, F, or G\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ea[href], div, h3\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ctd colspan\u003d\"3\"\u003e\u003ch3\u003ePseudo selectors\u003c/h3\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:lt(\u003cem\u003en\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements whose sibling index is less than \u003cem\u003en\u003c/em\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etd:lt(3)\u003c/code\u003e finds the first 3 cells of each row\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:gt(\u003cem\u003en\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements whose sibling index is greater than \u003cem\u003en\u003c/em\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etd:gt(1)\u003c/code\u003e finds cells after skipping the first two\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:eq(\u003cem\u003en\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements whose sibling index is equal to \u003cem\u003en\u003c/em\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etd:eq(0)\u003c/code\u003e finds the first cell of each row\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:has(\u003cem\u003eselector\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that contains at least one element matching the \u003cem\u003eselector\u003c/em\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv:has(p)\u003c/code\u003e finds divs that contain p elements \u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:not(\u003cem\u003eselector\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that do not match the \u003cem\u003eselector\u003c/em\u003e. See also {@link Elements#not(String)}\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv:not(.logo)\u003c/code\u003e finds all divs that do not have the \"logo\" class.\u003cp\u003e\u003ccode\u003ediv:not(:has(div))\u003c/code\u003e finds divs that do not contain divs.\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:contains(\u003cem\u003etext\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ep:contains(jsoup)\u003c/code\u003e finds p elements containing the text \"jsoup\".\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:matches(\u003cem\u003eregex\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etd:matches(\\\\d+)\u003c/code\u003e finds table cells containing digits. \u003ccode\u003ediv:matches((?i)login)\u003c/code\u003e finds divs containing the text, case insensitively.\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:containsOwn(\u003cem\u003etext\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that directly contain the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ep:containsOwn(jsoup)\u003c/code\u003e finds p elements with own text \"jsoup\".\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:matchesOwn(\u003cem\u003eregex\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etd:matchesOwn(\\\\d+)\u003c/code\u003e finds table cells directly containing digits. \u003ccode\u003ediv:matchesOwn((?i)login)\u003c/code\u003e finds divs containing the text, case insensitively.\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:containsData(\u003cem\u003edata\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that contains the specified \u003cem\u003edata\u003c/em\u003e. The contents of {@code script} and {@code style} elements, and {@code comment} nodes (etc) are considered data nodes, not text nodes. The search is case insensitive. The data may appear in the found element, or any of its descendants.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003escript:contains(jsoup)\u003c/code\u003e finds script elements containing the data \"jsoup\".\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003eThe above may be combined in any order and with other selectors\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e.light:contains(name):eq(0)\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd colspan\u003d\"3\"\u003e\u003ch3\u003eStructural pseudo selectors\u003c/h3\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:root\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eThe element that is the root of the document. In HTML, this is the \u003ccode\u003ehtml\u003c/code\u003e element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003e:root\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:nth-child(\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003cp\u003eelements that have \u003ccode\u003e\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e-1\u003c/code\u003e siblings \u003cb\u003ebefore\u003c/b\u003e it in the document tree, for any positive integer or zero value of \u003ccode\u003en\u003c/code\u003e, and has a parent element. For values of \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e greater than zero, this effectively divides the element\u0027s children into groups of a elements (the last group taking the remainder), and selecting the \u003cem\u003eb\u003c/em\u003eth element of each group. For example, this allows the selectors to address every other row in a table, and could be used to alternate the color of paragraph text in a cycle of four. The \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e values must be integers (positive, negative, or zero). The index of the first child of an element is 1.\u003c/p\u003e\n * In addition to this, \u003ccode\u003e:nth-child()\u003c/code\u003e can take \u003ccode\u003eodd\u003c/code\u003e and \u003ccode\u003eeven\u003c/code\u003e as arguments instead. \u003ccode\u003eodd\u003c/code\u003e has the same signification as \u003ccode\u003e2n+1\u003c/code\u003e, and \u003ccode\u003eeven\u003c/code\u003e has the same signification as \u003ccode\u003e2n\u003c/code\u003e.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etr:nth-child(2n+1)\u003c/code\u003e finds every odd row of a table. \u003ccode\u003e:nth-child(10n-1)\u003c/code\u003e the 9th, 19th, 29th, etc, element. \u003ccode\u003eli:nth-child(5)\u003c/code\u003e the 5h li\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:nth-last-child(\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that have \u003ccode\u003e\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e-1\u003c/code\u003e siblings \u003cb\u003eafter\u003c/b\u003e it in the document tree. Otherwise like \u003ccode\u003e:nth-child()\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etr:nth-last-child(-n+2)\u003c/code\u003e the last two rows of a table\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:nth-of-type(\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003epseudo-class notation represents an element that has \u003ccode\u003e\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e-1\u003c/code\u003e siblings with the same expanded element name \u003cem\u003ebefore\u003c/em\u003e it in the document tree, for any zero or positive integer value of n, and has a parent element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eimg:nth-of-type(2n+1)\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:nth-last-of-type(\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e)\u003c/code\u003e\u003c/td\u003e\u003ctd\u003epseudo-class notation represents an element that has \u003ccode\u003e\u003cem\u003ea\u003c/em\u003en+\u003cem\u003eb\u003c/em\u003e-1\u003c/code\u003e siblings with the same expanded element name \u003cem\u003eafter\u003c/em\u003e it in the document tree, for any zero or positive integer value of n, and has a parent element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eimg:nth-last-of-type(2n+1)\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:first-child\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that are the first child of some other element.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ediv {@literal \u003e} p:first-child\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:last-child\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that are the last child of some other element.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eol {@literal \u003e} li:last-child\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:first-of-type\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that are the first sibling of its type in the list of children of its parent element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003edl dt:first-of-type\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:last-of-type\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that are the last sibling of its type in the list of children of its parent element\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etr {@literal \u003e} td:last-of-type\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:only-child\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that have a parent element and whose parent element hasve no other element children\u003c/td\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:only-of-type\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e an element that has a parent element and whose parent element has no other element children with the same expanded element name\u003c/td\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003ctr\u003e\u003ctd\u003e\u003ccode\u003e:empty\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eelements that have no children at all\u003c/td\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\n * \u003c/table\u003e\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n * @see Element#select(String)\n "
    },
    {
      "type": "constructor",
      "signature": "org.jsoup.select.Selector.Selector()",
      "begin_line": 78,
      "end_line": 78,
      "comment": " not instantiable",
      "child_ranges": []
    },
    {
      "type": "method",
      "signature": "org.jsoup.select.Selector.select(java.lang.String, org.jsoup.nodes.Element)",
      "begin_line": 88,
      "end_line": 91,
      "comment": "\n     * Find elements matching selector.\n     *\n     * @param query CSS selector\n     * @param root  root element to descend into\n     * @return matching elements, empty if none\n     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n     ",
      "child_ranges": [
        "(line 89,col 9)-(line 89,col 33)",
        "(line 90,col 9)-(line 90,col 54)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jsoup.select.Selector.select(org.jsoup.select.Evaluator, org.jsoup.nodes.Element)",
      "begin_line": 100,
      "end_line": 104,
      "comment": "\n     * Find elements matching selector.\n     *\n     * @param evaluator CSS selector\n     * @param root root element to descend into\n     * @return matching elements, empty if none\n     ",
      "child_ranges": [
        "(line 101,col 9)-(line 101,col 36)",
        "(line 102,col 9)-(line 102,col 31)",
        "(line 103,col 9)-(line 103,col 50)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jsoup.select.Selector.select(java.lang.String, java.lang.Iterable\u003corg.jsoup.nodes.Element\u003e)",
      "begin_line": 113,
      "end_line": 131,
      "comment": "\n     * Find elements matching selector.\n     *\n     * @param query CSS selector\n     * @param roots root elements to descend into\n     * @return matching elements, empty if none\n     ",
      "child_ranges": [
        "(line 114,col 9)-(line 114,col 33)",
        "(line 115,col 9)-(line 115,col 32)",
        "(line 116,col 9)-(line 116,col 55)",
        "(line 117,col 9)-(line 117,col 56)",
        "(line 118,col 9)-(line 118,col 81)",
        "(line 121,col 9)-(line 129,col 9)",
        "(line 130,col 9)-(line 130,col 38)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jsoup.select.Selector.filterOut(java.util.Collection\u003corg.jsoup.nodes.Element\u003e, java.util.Collection\u003corg.jsoup.nodes.Element\u003e)",
      "begin_line": 134,
      "end_line": 148,
      "comment": " exclude set. package open so that Elements can implement .not() selector.",
      "child_ranges": [
        "(line 135,col 9)-(line 135,col 41)",
        "(line 136,col 9)-(line 146,col 9)",
        "(line 147,col 9)-(line 147,col 22)"
      ]
    },
    {
      "type": "method",
      "signature": "org.jsoup.select.Selector.selectFirst(java.lang.String, org.jsoup.nodes.Element)",
      "begin_line": 156,
      "end_line": 159,
      "comment": "\n     * Find the first element that matches the query.\n     * @param cssQuery CSS selector\n     * @param root root element to descend into\n     * @return the matching element, or \u003cb\u003enull\u003c/b\u003e if none.\n     ",
      "child_ranges": [
        "(line 157,col 9)-(line 157,col 36)",
        "(line 158,col 9)-(line 158,col 70)"
      ]
    },
    {
      "type": "class_interface",
      "name": "SelectorParseException",
      "is_interface": false,
      "parent_types": [
        "java.lang.IllegalStateException"
      ],
      "begin_line": 161,
      "end_line": 165,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.jsoup.select.Selector.SelectorParseException.SelectorParseException(java.lang.String, java.lang.Object...)",
      "begin_line": 162,
      "end_line": 164,
      "comment": "",
      "child_ranges": [
        "(line 163,col 13)-(line 163,col 46)"
      ]
    }
  ]
}