[
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11457()",
        "snippet": "    public void test11457() throws Exception\n    {\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n        String[] args = new String[]{\"--verbose\"};\n\n        CommandLineParser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse(options, args);\n        assertTrue(cmd.hasOption(\"verbose\"));\n    }",
        "begin_line": 31,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 40)",
            "(line 34,col 9)-(line 34,col 73)",
            "(line 35,col 9)-(line 35,col 50)",
            "(line 37,col 9)-(line 37,col 53)",
            "(line 39,col 9)-(line 39,col 54)",
            "(line 40,col 9)-(line 40,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11458()",
        "snippet": "    public void test11458() throws Exception\n    {\n        Options options = new Options();\n        options.addOption( OptionBuilder.withValueSeparator( '=' ).hasArgs().create( 'D' ) );\n        options.addOption( OptionBuilder.withValueSeparator( ':' ).hasArgs().create( 'p' ) );\n        String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" , \"-pfile1:file2:file3\" };\n\n        CommandLineParser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse(options, args);\n\n        String[] values = cmd.getOptionValues('D');\n\n        assertEquals(values[0], \"JAVA_HOME\");\n        assertEquals(values[1], \"/opt/java\");\n\n        values = cmd.getOptionValues('p');\n\n        assertEquals(values[0], \"file1\");\n        assertEquals(values[1], \"file2\");\n        assertEquals(values[2], \"file3\");\n\n        Iterator iter = cmd.iterator();\n        while (iter.hasNext())\n        {\n            Option opt = (Option) iter.next();\n            switch (opt.getId())\n            {\n                case 'D':\n                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\n                    assertEquals(opt.getValue(1), \"/opt/java\");\n                    break;\n                case 'p':\n                    assertEquals(opt.getValue(0), \"file1\");\n                    assertEquals(opt.getValue(1), \"file2\");\n                    assertEquals(opt.getValue(2), \"file3\");\n                    break;\n                default:\n                    fail(\"-D option not found\");\n            }\n        }\n    }",
        "begin_line": 43,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 40)",
            "(line 46,col 9)-(line 46,col 93)",
            "(line 47,col 9)-(line 47,col 93)",
            "(line 48,col 9)-(line 48,col 89)",
            "(line 50,col 9)-(line 50,col 53)",
            "(line 52,col 9)-(line 52,col 54)",
            "(line 54,col 9)-(line 54,col 51)",
            "(line 56,col 9)-(line 56,col 45)",
            "(line 57,col 9)-(line 57,col 45)",
            "(line 59,col 9)-(line 59,col 42)",
            "(line 61,col 9)-(line 61,col 41)",
            "(line 62,col 9)-(line 62,col 41)",
            "(line 63,col 9)-(line 63,col 41)",
            "(line 65,col 9)-(line 65,col 39)",
            "(line 66,col 9)-(line 83,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11680()",
        "snippet": "    public void test11680() throws Exception\n    {\n        Options options = new Options();\n        options.addOption(\"f\", true, \"foobar\");\n        options.addOption(\"m\", true, \"missing\");\n        String[] args = new String[]{\"-f\", \"foo\"};\n\n        CommandLineParser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse(options, args);\n\n        cmd.getOptionValue(\"f\", \"default f\");\n        cmd.getOptionValue(\"m\", \"default m\");\n    }",
        "begin_line": 86,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 40)",
            "(line 89,col 9)-(line 89,col 47)",
            "(line 90,col 9)-(line 90,col 48)",
            "(line 91,col 9)-(line 91,col 50)",
            "(line 93,col 9)-(line 93,col 53)",
            "(line 95,col 9)-(line 95,col 54)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test11456()",
        "snippet": "    public void test11456() throws Exception\n    {\n        // Posix \n        Options options = new Options();\n        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n        String[] args = new String[] { \"-a\", \"-bvalue\" };\n\n        CommandLineParser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse( options, args );\n        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n\n        // GNU\n        options = new Options();\n        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n        args = new String[] { \"-a\", \"-b\", \"value\" };\n\n        parser = new GnuParser();\n\n        cmd = parser.parse( options, args );\n        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n    }",
        "begin_line": 101,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 105,col 74)",
            "(line 106,col 9)-(line 106,col 66)",
            "(line 107,col 9)-(line 107,col 57)",
            "(line 109,col 9)-(line 109,col 53)",
            "(line 111,col 9)-(line 111,col 56)",
            "(line 112,col 9)-(line 112,col 59)",
            "(line 115,col 9)-(line 115,col 32)",
            "(line 116,col 9)-(line 116,col 74)",
            "(line 117,col 9)-(line 117,col 66)",
            "(line 118,col 9)-(line 118,col 52)",
            "(line 120,col 9)-(line 120,col 33)",
            "(line 122,col 9)-(line 122,col 44)",
            "(line 123,col 9)-(line 123,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test12210()",
        "snippet": "    public void test12210() throws Exception\n    {\n        // create the main options object which will handle the first parameter\n        Options mainOptions = new Options();\n        // There can be 2 main exclusive options:  -exec|-rep\n\n        // Therefore, place them in an option group\n\n        String[] argv = new String[] { \"-exec\", \"-exec_opt1\", \"-exec_opt2\" };\n        OptionGroup grp = new OptionGroup();\n\n        grp.addOption(new Option(\"exec\",false,\"description for this option\"));\n\n        grp.addOption(new Option(\"rep\",false,\"description for this option\"));\n\n        mainOptions.addOptionGroup(grp);\n\n        // for the exec option, there are 2 options...\n        Options execOptions = new Options();\n        execOptions.addOption(\"exec_opt1\", false, \" desc\");\n        execOptions.addOption(\"exec_opt2\", false, \" desc\");\n\n        // similarly, for rep there are 2 options...\n        Options repOptions = new Options();\n        repOptions.addOption(\"repopto\", false, \"desc\");\n        repOptions.addOption(\"repoptt\", false, \"desc\");\n\n        // create the parser\n        GnuParser parser = new GnuParser();\n\n        // finally, parse the arguments:\n\n        // first parse the main options to see what the user has specified\n        // We set stopAtNonOption to true so it does not touch the remaining\n        // options\n        CommandLine cmd = parser.parse(mainOptions,argv,true);\n        // get the remaining options...\n        argv = cmd.getArgs();\n\n        if(cmd.hasOption(\"exec\"))\n        {\n            cmd = parser.parse(execOptions,argv,false);\n            // process the exec_op1 and exec_opt2...\n            assertTrue( cmd.hasOption(\"exec_opt1\") );\n            assertTrue( cmd.hasOption(\"exec_opt2\") );\n        }\n        else if(cmd.hasOption(\"rep\"))\n        {\n            cmd = parser.parse(repOptions,argv,false);\n            // process the rep_op1 and rep_opt2...\n        }\n        else {\n            fail( \"exec option not found\" );\n        }\n    }",
        "begin_line": 126,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 44)",
            "(line 134,col 9)-(line 134,col 77)",
            "(line 135,col 9)-(line 135,col 44)",
            "(line 137,col 9)-(line 137,col 78)",
            "(line 139,col 9)-(line 139,col 77)",
            "(line 141,col 9)-(line 141,col 40)",
            "(line 144,col 9)-(line 144,col 44)",
            "(line 145,col 9)-(line 145,col 59)",
            "(line 146,col 9)-(line 146,col 59)",
            "(line 149,col 9)-(line 149,col 43)",
            "(line 150,col 9)-(line 150,col 55)",
            "(line 151,col 9)-(line 151,col 55)",
            "(line 154,col 9)-(line 154,col 43)",
            "(line 161,col 9)-(line 161,col 62)",
            "(line 163,col 9)-(line 163,col 29)",
            "(line 165,col 9)-(line 179,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test13425()",
        "snippet": "    public void test13425() throws Exception\n    {\n        Options options = new Options();\n        Option oldpass = OptionBuilder.withLongOpt( \"old-password\" )\n            .withDescription( \"Use this option to specify the old password\" )\n            .hasArg()\n            .create( 'o' );\n        Option newpass = OptionBuilder.withLongOpt( \"new-password\" )\n            .withDescription( \"Use this option to specify the new password\" )\n            .hasArg()\n            .create( 'n' );\n\n        String[] args = { \n            \"-o\", \n            \"-n\", \n            \"newpassword\" \n        };\n\n        options.addOption( oldpass );\n        options.addOption( newpass );\n\n        Parser parser = new PosixParser();\n\n        try\n        {\n            parser.parse( options, args );\n        }\n        // catch the exception and leave the method\n        catch( Exception exp )\n        {\n            assertTrue( exp != null );\n            return;\n        }\n        fail( \"MissingArgumentException not caught.\" );\n    }",
        "begin_line": 182,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 40)",
            "(line 185,col 9)-(line 188,col 27)",
            "(line 189,col 9)-(line 192,col 27)",
            "(line 194,col 9)-(line 198,col 10)",
            "(line 200,col 9)-(line 200,col 37)",
            "(line 201,col 9)-(line 201,col 37)",
            "(line 203,col 9)-(line 203,col 42)",
            "(line 205,col 9)-(line 214,col 9)",
            "(line 215,col 9)-(line 215,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test13666()",
        "snippet": "    public void test13666() throws Exception\n    {\n        Options options = new Options();\n        Option dir = OptionBuilder.withDescription( \"dir\" ).hasArg().create( 'd' );\n        options.addOption( dir );\n        \n        final PrintStream oldSystemOut = System.out;\n        try\n        {\n            final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n            final PrintStream print = new PrintStream(bytes);\n            \n            // capture this platform's eol symbol\n            print.println();\n            final String eol = bytes.toString();\n            bytes.reset();\n            \n            System.setOut(new PrintStream(bytes));\n\n            HelpFormatter formatter = new HelpFormatter();\n            formatter.printHelp( \"dir\", options );\n\n            assertEquals(\"usage: dir\"+eol+\" -d <arg>   dir\"+eol,bytes.toString());\n        }\n        finally\n        {\n            System.setOut(oldSystemOut);\n        }\n    }",
        "begin_line": 218,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 40)",
            "(line 221,col 9)-(line 221,col 83)",
            "(line 222,col 9)-(line 222,col 33)",
            "(line 224,col 9)-(line 224,col 52)",
            "(line 225,col 9)-(line 245,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test13935()",
        "snippet": "    public void test13935() throws Exception\n    {\n        OptionGroup directions = new OptionGroup();\n\n        Option left = new Option( \"l\", \"left\", false, \"go left\" );\n        Option right = new Option( \"r\", \"right\", false, \"go right\" );\n        Option straight = new Option( \"s\", \"straight\", false, \"go straight\" );\n        Option forward = new Option( \"f\", \"forward\", false, \"go forward\" );\n        forward.setRequired( true );\n\n        directions.addOption( left );\n        directions.addOption( right );\n        directions.setRequired( true );\n\n        Options opts = new Options();\n        opts.addOptionGroup( directions );\n        opts.addOption( straight );\n\n        CommandLineParser parser = new PosixParser();\n        boolean exception = false;\n\n        String[] args = new String[] {  };\n        try\n        {\n            CommandLine line = parser.parse(opts, args);\n        }\n        catch (ParseException exp)\n        {\n            exception = true;\n        }\n\n        if (!exception)\n        {\n            fail(\"Expected exception not caught.\");\n        }\n\n        exception = false;\n\n        args = new String[] { \"-s\" };\n        try\n        {\n            CommandLine line = parser.parse(opts, args);\n        }\n        catch (ParseException exp)\n        {\n            exception = true;\n        }\n\n        if (!exception)\n        {\n            fail(\"Expected exception not caught.\");\n        }\n\n        exception = false;\n\n        args = new String[] { \"-s\", \"-l\" };\n        try\n        {\n            parser.parse(opts, args);\n        }\n        catch (ParseException exp)\n        {\n            fail(\"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage());\n        }\n\n        opts.addOption( forward );\n        args = new String[] { \"-s\", \"-l\", \"-f\" };\n        try\n        {\n            parser.parse(opts, args);\n        }\n        catch (ParseException exp)\n        {\n            fail(\"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage());\n        }\n    }",
        "begin_line": 248,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 51)",
            "(line 252,col 9)-(line 252,col 66)",
            "(line 253,col 9)-(line 253,col 69)",
            "(line 254,col 9)-(line 254,col 78)",
            "(line 255,col 9)-(line 255,col 75)",
            "(line 256,col 9)-(line 256,col 36)",
            "(line 258,col 9)-(line 258,col 37)",
            "(line 259,col 9)-(line 259,col 38)",
            "(line 260,col 9)-(line 260,col 39)",
            "(line 262,col 9)-(line 262,col 37)",
            "(line 263,col 9)-(line 263,col 42)",
            "(line 264,col 9)-(line 264,col 35)",
            "(line 266,col 9)-(line 266,col 53)",
            "(line 267,col 9)-(line 267,col 34)",
            "(line 269,col 9)-(line 269,col 42)",
            "(line 270,col 9)-(line 277,col 9)",
            "(line 279,col 9)-(line 282,col 9)",
            "(line 284,col 9)-(line 284,col 26)",
            "(line 286,col 9)-(line 286,col 37)",
            "(line 287,col 9)-(line 294,col 9)",
            "(line 296,col 9)-(line 299,col 9)",
            "(line 301,col 9)-(line 301,col 26)",
            "(line 303,col 9)-(line 303,col 43)",
            "(line 304,col 9)-(line 311,col 9)",
            "(line 313,col 9)-(line 313,col 34)",
            "(line 314,col 9)-(line 314,col 49)",
            "(line 315,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test14786()",
        "snippet": "    public void test14786() throws Exception\n    {\n        Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n        Options opts = new Options();\n        opts.addOption(o);\n        opts.addOption(o);\n\n        CommandLineParser parser = new GnuParser();\n\n        String[] args = new String[] { \"-test\" };\n\n        CommandLine line = parser.parse( opts, args );\n        assertTrue( line.hasOption( \"test\" ) );\n    }",
        "begin_line": 325,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 85)",
            "(line 328,col 9)-(line 328,col 37)",
            "(line 329,col 9)-(line 329,col 26)",
            "(line 330,col 9)-(line 330,col 26)",
            "(line 332,col 9)-(line 332,col 51)",
            "(line 334,col 9)-(line 334,col 49)",
            "(line 336,col 9)-(line 336,col 54)",
            "(line 337,col 9)-(line 337,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test15046()",
        "snippet": "    public void test15046() throws Exception\n    {\n        CommandLineParser parser = new PosixParser();\n        String[] CLI_ARGS = new String[] {\"-z\", \"c\"};\n\n        Options options = new Options();\n        options.addOption(new Option(\"z\", \"timezone\", true, \"affected option\"));\n\n        parser.parse(options, CLI_ARGS);\n        \n        //now add conflicting option\n        options.addOption(\"c\", \"conflict\", true, \"conflict option\");\n        CommandLine line = parser.parse(options, CLI_ARGS);\n        assertEquals( line.getOptionValue('z'), \"c\" );\n        assertTrue( !line.hasOption(\"c\") );\n    }",
        "begin_line": 340,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 53)",
            "(line 343,col 9)-(line 343,col 53)",
            "(line 345,col 9)-(line 345,col 40)",
            "(line 346,col 9)-(line 346,col 80)",
            "(line 348,col 9)-(line 348,col 40)",
            "(line 351,col 9)-(line 351,col 68)",
            "(line 352,col 9)-(line 352,col 59)",
            "(line 353,col 9)-(line 353,col 54)",
            "(line 354,col 9)-(line 354,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test15648()",
        "snippet": "    public void test15648() throws Exception\n    {\n        CommandLineParser parser = new PosixParser();\n        final String[] args = new String[] { \"-m\", \"\\\"Two Words\\\"\" };\n        Option m = OptionBuilder.hasArgs().create(\"m\");\n        Options options = new Options();\n        options.addOption( m );\n        CommandLine line = parser.parse( options, args );\n        assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n    }",
        "begin_line": 357,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 53)",
            "(line 360,col 9)-(line 360,col 69)",
            "(line 361,col 9)-(line 361,col 55)",
            "(line 362,col 9)-(line 362,col 40)",
            "(line 363,col 9)-(line 363,col 31)",
            "(line 364,col 9)-(line 364,col 57)",
            "(line 365,col 9)-(line 365,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test31148()",
        "snippet": "    public void test31148() throws ParseException\n    {\n        Option multiArgOption = new Option(\"o\",\"option with multiple args\");\n        multiArgOption.setArgs(1);\n        \n        Options options = new Options();\n        options.addOption(multiArgOption);\n        \n        Parser parser = new PosixParser();\n        String[] args = new String[]{};\n        Properties props = new Properties();\n        props.setProperty(\"o\",\"ovalue\");\n        CommandLine cl = parser.parse(options,args,props);\n        \n        assertTrue(cl.hasOption('o'));\n        assertEquals(\"ovalue\",cl.getOptionValue('o'));\n    }",
        "begin_line": 368,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 76)",
            "(line 371,col 9)-(line 371,col 34)",
            "(line 373,col 9)-(line 373,col 40)",
            "(line 374,col 9)-(line 374,col 42)",
            "(line 376,col 9)-(line 376,col 42)",
            "(line 377,col 9)-(line 377,col 39)",
            "(line 378,col 9)-(line 378,col 44)",
            "(line 379,col 9)-(line 379,col 40)",
            "(line 380,col 9)-(line 380,col 58)",
            "(line 382,col 9)-(line 382,col 38)",
            "(line 383,col 9)-(line 383,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BugsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "signature": "org.apache.commons.cli.BugsTest.test27635()",
        "snippet": "    public void test27635() {} // Fails in super class",
        "begin_line": 387,
        "end_line": 387,
        "comment": " Fails in super class",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        super.setUp();\n        parser = new PosixParser();\n    }",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 22)",
            "(line 30,col 9)-(line 30,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testDoubleDash2()",
        "snippet": "    public void testDoubleDash2() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testLongWithoutEqualSingleDash()",
        "snippet": "    public void testLongWithoutEqualSingleDash() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testAmbiguousLongWithoutEqualSingleDash()",
        "snippet": "    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testNegativeOption()",
        "snippet": "    public void testNegativeOption() throws Exception\n    {\n        // not supported by the PosixParser (CLI-184)\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testLongWithUnexpectedArgument1()",
        "snippet": "    public void testLongWithUnexpectedArgument1() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testLongWithEqualSingleDash()",
        "snippet": "    public void testLongWithEqualSingleDash() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testShortWithEqual()",
        "snippet": "    public void testShortWithEqual() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testUnambiguousPartialLongOption4()",
        "snippet": "    public void testUnambiguousPartialLongOption4() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.PosixParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java",
        "signature": "org.apache.commons.cli.PosixParserTest.testAmbiguousPartialLongOption4()",
        "snippet": "    public void testAmbiguousPartialLongOption4() throws Exception\n    {\n        // not supported by the PosixParser\n    }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.setUp()",
        "snippet": "    public void setUp() throws Exception\n    {\n        Options options = new Options();\n\n        options.addOption(\"a\", false, \"toggle -a\");\n        options.addOption(\"b\", true, \"set -b\");\n        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n        options.addOption(\"d\", \"d\", true, \"set -d\");\n\n        options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n        options.addOption(\"f\", \"f\", false, \"jk\");\n        options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArg().withDescription(\"set -h\").create('h'));\n        options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n        options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n        options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n        options.addOption(OptionBuilder.withLongOpt(\"m\").hasArgs().withDescription(\"set -m\").withValueSeparator().create('m'));\n\n        String[] args = new String[] { \"-a\",\n                                       \"-b\", \"foo\",\n                                       \"--c\",\n                                       \"--d\", \"bar\",\n                                       \"-e\", \"one\", \"two\",\n                                       \"-f\",\n                                       \"arg1\", \"arg2\",\n                                       \"-g\", \"val1\", \"val2\" , \"arg3\",\n                                       \"-h\", \"val1\", \"-i\",\n                                       \"-h\", \"val2\",\n                                       \"-jkey=value\",\n                                       \"-j\", \"key=value\",\n                                       \"-kkey1=value1\", \n                                       \"-kkey2=value2\",\n                                       \"-mkey=value\"};\n\n        CommandLineParser parser = new PosixParser();\n\n        cmd = parser.parse(options,args);\n    }",
        "begin_line": 27,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 40)",
            "(line 31,col 9)-(line 31,col 51)",
            "(line 32,col 9)-(line 32,col 47)",
            "(line 33,col 9)-(line 33,col 56)",
            "(line 34,col 9)-(line 34,col 52)",
            "(line 36,col 9)-(line 36,col 107)",
            "(line 37,col 9)-(line 37,col 49)",
            "(line 38,col 9)-(line 38,col 107)",
            "(line 39,col 9)-(line 39,col 105)",
            "(line 40,col 9)-(line 40,col 96)",
            "(line 41,col 9)-(line 41,col 130)",
            "(line 42,col 9)-(line 42,col 130)",
            "(line 43,col 9)-(line 43,col 127)",
            "(line 45,col 9)-(line 59,col 54)",
            "(line 61,col 9)-(line 61,col 53)",
            "(line 63,col 9)-(line 63,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testShortArgs()",
        "snippet": "    public void testShortArgs()\n    {\n        assertTrue(\"Option a is not set\", cmd.hasOption(\"a\"));\n        assertTrue(\"Option c is not set\", cmd.hasOption(\"c\"));\n\n        assertNull(cmd.getOptionValues(\"a\"));\n        assertNull(cmd.getOptionValues(\"c\"));\n    }",
        "begin_line": 66,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 62)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 45)",
            "(line 72,col 9)-(line 72,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testShortArgsWithValue()",
        "snippet": "    public void testShortArgsWithValue()\n    {\n        assertTrue(\"Option b is not set\", cmd.hasOption(\"b\"));\n        assertTrue(cmd.getOptionValue(\"b\").equals(\"foo\"));\n        assertEquals(1, cmd.getOptionValues(\"b\").length);\n\n        assertTrue(\"Option d is not set\", cmd.hasOption(\"d\"));\n        assertTrue(cmd.getOptionValue(\"d\").equals(\"bar\"));\n        assertEquals(1, cmd.getOptionValues(\"d\").length);\n    }",
        "begin_line": 75,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 62)",
            "(line 78,col 9)-(line 78,col 58)",
            "(line 79,col 9)-(line 79,col 57)",
            "(line 81,col 9)-(line 81,col 62)",
            "(line 82,col 9)-(line 82,col 58)",
            "(line 83,col 9)-(line 83,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testMultipleArgValues()",
        "snippet": "    public void testMultipleArgValues()\n    {\n        assertTrue(\"Option e is not set\", cmd.hasOption(\"e\"));\n        ArrayAssert.assertEquals(new String[] { \"one\", \"two\" }, cmd.getOptionValues(\"e\"));\n    }",
        "begin_line": 86,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 62)",
            "(line 89,col 9)-(line 89,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testTwoArgValues()",
        "snippet": "    public void testTwoArgValues()\n    {\n        assertTrue(\"Option g is not set\", cmd.hasOption(\"g\"));\n        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"g\"));\n    }",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 62)",
            "(line 95,col 9)-(line 95,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testComplexValues()",
        "snippet": "    public void testComplexValues()\n    {\n        assertTrue(\"Option i is not set\", cmd.hasOption(\"i\"));\n        assertTrue(\"Option h is not set\", cmd.hasOption(\"h\"));\n        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"h\"));\n    }",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 62)",
            "(line 101,col 9)-(line 101,col 62)",
            "(line 102,col 9)-(line 102,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testExtraArgs()",
        "snippet": "    public void testExtraArgs()\n    {\n        ArrayAssert.assertEquals(\"Extra args\", new String[] { \"arg1\", \"arg2\", \"arg3\" }, cmd.getArgs());\n    }",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValuesTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValuesTest.java",
        "signature": "org.apache.commons.cli.ValuesTest.testCharSeparator()",
        "snippet": "    public void testCharSeparator()\n    {\n        // tests the char methods of CommandLine that delegate to the String methods\n        assertTrue(\"Option j is not set\", cmd.hasOption(\"j\"));\n        assertTrue(\"Option j is not set\", cmd.hasOption('j'));\n        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues(\"j\"));\n        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues('j'));\n\n        assertTrue(\"Option k is not set\", cmd.hasOption(\"k\"));\n        assertTrue(\"Option k is not set\", cmd.hasOption('k'));\n        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues(\"k\"));\n        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues('k'));\n\n        assertTrue(\"Option m is not set\", cmd.hasOption(\"m\"));\n        assertTrue(\"Option m is not set\", cmd.hasOption('m'));\n        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues(\"m\"));\n        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues('m'));\n    }",
        "begin_line": 110,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 62)",
            "(line 114,col 9)-(line 114,col 62)",
            "(line 115,col 9)-(line 115,col 108)",
            "(line 116,col 9)-(line 116,col 108)",
            "(line 118,col 9)-(line 118,col 62)",
            "(line 119,col 9)-(line 119,col 62)",
            "(line 120,col 9)-(line 120,col 112)",
            "(line 121,col 9)-(line 121,col 112)",
            "(line 123,col 9)-(line 123,col 62)",
            "(line 124,col 9)-(line 124,col 62)",
            "(line 125,col 9)-(line 125,col 92)",
            "(line 126,col 9)-(line 126,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.CommandLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
        "signature": "org.apache.commons.cli.CommandLineTest.testGetOptionProperties()",
        "snippet": "    public void testGetOptionProperties() throws Exception\n    {\n        String[] args = new String[] { \"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\n        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create());\n\n        Parser parser = new GnuParser();\n        CommandLine cl = parser.parse(options, args);\n\n        Properties props = cl.getOptionProperties(\"D\");\n        assertNotNull(\"null properties\", props);\n        assertEquals(\"number of properties in \" + props, 4, props.size());\n        assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\n        assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\n        assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\n        assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\n\n        assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(\"property\").getProperty(\"foo\"));\n    }",
        "begin_line": 30,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 140)",
            "(line 34,col 9)-(line 34,col 40)",
            "(line 35,col 9)-(line 35,col 93)",
            "(line 36,col 9)-(line 36,col 106)",
            "(line 38,col 9)-(line 38,col 40)",
            "(line 39,col 9)-(line 39,col 53)",
            "(line 41,col 9)-(line 41,col 55)",
            "(line 42,col 9)-(line 42,col 48)",
            "(line 43,col 9)-(line 43,col 74)",
            "(line 44,col 9)-(line 44,col 74)",
            "(line 45,col 9)-(line 45,col 74)",
            "(line 46,col 9)-(line 46,col 72)",
            "(line 47,col 9)-(line 47,col 74)",
            "(line 49,col 9)-(line 49,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.CommandLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
        "signature": "org.apache.commons.cli.CommandLineTest.testGetOptions()",
        "snippet": "    public void testGetOptions()\n    {\n        CommandLine cmd = new CommandLine();\n        assertNotNull(cmd.getOptions());\n        assertEquals(0, cmd.getOptions().length);\n        \n        cmd.addOption(new Option(\"a\", null));\n        cmd.addOption(new Option(\"b\", null));\n        cmd.addOption(new Option(\"c\", null));\n        \n        assertEquals(3, cmd.getOptions().length);\n    }",
        "begin_line": 52,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 44)",
            "(line 55,col 9)-(line 55,col 40)",
            "(line 56,col 9)-(line 56,col 49)",
            "(line 58,col 9)-(line 58,col 45)",
            "(line 59,col 9)-(line 59,col 45)",
            "(line 60,col 9)-(line 60,col 45)",
            "(line 62,col 9)-(line 62,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\", true, \"Option accepts argument\");\n\n        parser = new PosixParser();\n    }",
        "begin_line": 27,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 117)",
            "(line 31,col 9)-(line 31,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.testOptionAndOptionWithArgument()",
        "snippet": "    public void testOptionAndOptionWithArgument() throws Exception\n    {\n        String[] args = new String[]{\n                \"-p\",\n                \"-attr\",\n                \"p\"\n        };\n\n        CommandLine cl = parser.parse(options, args);\n        assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n        assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n        assertTrue(\"Confirm arg of -attr\", cl.getOptionValue(\"attr\").equals(\"p\"));\n        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n    }",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 40,col 10)",
            "(line 42,col 9)-(line 42,col 53)",
            "(line 43,col 9)-(line 43,col 59)",
            "(line 44,col 9)-(line 44,col 65)",
            "(line 45,col 9)-(line 45,col 82)",
            "(line 46,col 9)-(line 46,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.testOptionWithArgument()",
        "snippet": "    public void testOptionWithArgument() throws Exception\n    {\n        String[] args = new String[]{\n                \"-attr\",\n                \"p\"\n        };\n\n        CommandLine cl = parser.parse(options, args);\n        assertFalse(\"Confirm -p is set\", cl.hasOption(\"p\"));\n        assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n        assertTrue(\"Confirm arg of -attr\",\n                cl.getOptionValue(\"attr\").equals(\"p\"));\n        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n    }",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 54,col 10)",
            "(line 56,col 9)-(line 56,col 53)",
            "(line 57,col 9)-(line 57,col 60)",
            "(line 58,col 9)-(line 58,col 65)",
            "(line 59,col 9)-(line 60,col 55)",
            "(line 61,col 9)-(line 61,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ArgumentIsOptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java",
        "signature": "org.apache.commons.cli.ArgumentIsOptionTest.testOption()",
        "snippet": "    public void testOption() throws Exception\n    {\n        String[] args = new String[]{\n                \"-p\"\n        };\n\n        CommandLine cl = parser.parse(options, args);\n        assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n        assertFalse(\"Confirm -attr is not set\", cl.hasOption(\"attr\"));\n        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n    }",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 68,col 10)",
            "(line 70,col 9)-(line 70,col 53)",
            "(line 71,col 9)-(line 71,col 59)",
            "(line 72,col 9)-(line 72,col 70)",
            "(line 73,col 9)-(line 73,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testLs()",
        "snippet": "    public void testLs() throws Exception {\n        // create the command line parser\n        CommandLineParser parser = new PosixParser();\n        Options options = new Options();\n        options.addOption( \"a\", \"all\", false, \"do not hide entries starting with .\" );\n        options.addOption( \"A\", \"almost-all\", false, \"do not list implied . and ..\" );\n        options.addOption( \"b\", \"escape\", false, \"print octal escapes for nongraphic characters\" );\n        options.addOption( OptionBuilder.withLongOpt( \"block-size\" )\n                                        .withDescription( \"use SIZE-byte blocks\" )\n                                        .hasArg()\n                                        .withArgName(\"SIZE\")\n                                        .create() );\n        options.addOption( \"B\", \"ignore-backups\", false, \"do not list implied entried ending with ~\");\n        options.addOption( \"c\", false, \"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\" );\n        options.addOption( \"C\", false, \"list entries by columns\" );\n\n        String[] args = new String[]{ \"--block-size=10\" };\n\n        CommandLine line = parser.parse( options, args );\n        assertTrue( line.hasOption( \"block-size\" ) );\n        assertEquals( line.getOptionValue( \"block-size\" ), \"10\" );\n    }",
        "begin_line": 39,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 53)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 43,col 9)-(line 43,col 86)",
            "(line 44,col 9)-(line 44,col 86)",
            "(line 45,col 9)-(line 45,col 99)",
            "(line 46,col 9)-(line 50,col 52)",
            "(line 51,col 9)-(line 51,col 102)",
            "(line 52,col 9)-(line 52,col 194)",
            "(line 53,col 9)-(line 53,col 67)",
            "(line 55,col 9)-(line 55,col 58)",
            "(line 57,col 9)-(line 57,col 57)",
            "(line 58,col 9)-(line 58,col 53)",
            "(line 59,col 9)-(line 59,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testAnt()",
        "snippet": "    public void testAnt() throws Exception {\n        // use the GNU parser\n        CommandLineParser parser = new GnuParser( );\n        Options options = new Options();\n        options.addOption( \"help\", false, \"print this message\" );\n        options.addOption( \"projecthelp\", false, \"print project help information\" );\n        options.addOption( \"version\", false, \"print the version information and exit\" );\n        options.addOption( \"quiet\", false, \"be extra quiet\" );\n        options.addOption( \"verbose\", false, \"be extra verbose\" );\n        options.addOption( \"debug\", false, \"print debug information\" );\n        options.addOption( \"logfile\", true, \"use given file for log\" );\n        options.addOption( \"logger\", true, \"the class which is to perform the logging\" );\n        options.addOption( \"listener\", true, \"add an instance of a class as a project listener\" );\n        options.addOption( \"buildfile\", true, \"use given buildfile\" );\n        options.addOption( OptionBuilder.withDescription( \"use value for given property\" )\n                                        .hasArgs()\n                                        .withValueSeparator()\n                                        .create( 'D' ) );\n                           //, null, true, , false, true );\n        options.addOption( \"find\", true, \"search for buildfile towards the root of the filesystem and use it\" );\n\n        String[] args = new String[]{ \"-buildfile\", \"mybuild.xml\",\n            \"-Dproperty=value\", \"-Dproperty1=value1\",\n            \"-projecthelp\" };\n\n        CommandLine line = parser.parse( options, args );\n\n        // check multiple values\n        String[] opts = line.getOptionValues( \"D\" );\n        assertEquals( \"property\", opts[0] );\n        assertEquals( \"value\", opts[1] );\n        assertEquals( \"property1\", opts[2] );\n        assertEquals( \"value1\", opts[3] );\n\n        // check single value\n        assertEquals( line.getOptionValue( \"buildfile\"), \"mybuild.xml\" );\n\n        // check option\n        assertTrue( line.hasOption( \"projecthelp\") );\n    }",
        "begin_line": 65,
        "end_line": 104,
        "comment": "\n     * Ant test\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 52)",
            "(line 68,col 9)-(line 68,col 40)",
            "(line 69,col 9)-(line 69,col 65)",
            "(line 70,col 9)-(line 70,col 84)",
            "(line 71,col 9)-(line 71,col 88)",
            "(line 72,col 9)-(line 72,col 62)",
            "(line 73,col 9)-(line 73,col 66)",
            "(line 74,col 9)-(line 74,col 71)",
            "(line 75,col 9)-(line 75,col 71)",
            "(line 76,col 9)-(line 76,col 89)",
            "(line 77,col 9)-(line 77,col 98)",
            "(line 78,col 9)-(line 78,col 70)",
            "(line 79,col 9)-(line 82,col 57)",
            "(line 84,col 9)-(line 84,col 112)",
            "(line 86,col 9)-(line 88,col 29)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 93,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 94,col 44)",
            "(line 95,col 9)-(line 95,col 41)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 42)",
            "(line 100,col 9)-(line 100,col 73)",
            "(line 103,col 9)-(line 103,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testGroovy()",
        "snippet": "    public void testGroovy() throws Exception {\n        Options options = new Options();\n\n        options.addOption(\n            OptionBuilder.withLongOpt(\"define\").\n                withDescription(\"define a system property\").\n                hasArg(true).\n                withArgName(\"name=value\").\n                create('D'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"usage information\")\n            .withLongOpt(\"help\")\n            .create('h'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"debug mode will print out full stack traces\")\n            .withLongOpt(\"debug\")\n            .create('d'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"display the Groovy and JVM versions\")\n            .withLongOpt(\"version\")\n            .create('v'));\n        options.addOption(\n            OptionBuilder.withArgName(\"charset\")\n            .hasArg()\n            .withDescription(\"specify the encoding of the files\")\n            .withLongOpt(\"encoding\")\n            .create('c'));\n        options.addOption(\n            OptionBuilder.withArgName(\"script\")\n            .hasArg()\n            .withDescription(\"specify a command line script\")\n            .create('e'));\n        options.addOption(\n            OptionBuilder.withArgName(\"extension\")\n            .hasOptionalArg()\n            .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n            .create('i'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"process files line by line using implicit 'line' variable\")\n            .create('n'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n            .withDescription(\"process files line by line and print result (see also -n)\")\n            .create('p'));\n        options.addOption(\n            OptionBuilder.withArgName(\"port\")\n            .hasOptionalArg()\n            .withDescription(\"listen on a port and process inbound lines\")\n            .create('l'));\n        options.addOption(\n            OptionBuilder.withArgName(\"splitPattern\")\n            .hasOptionalArg()\n            .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n            .withLongOpt(\"autosplit\")\n            .create('a'));\n\n        Parser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n\n        assertTrue(line.hasOption('e'));\n        assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n    }",
        "begin_line": 106,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 40)",
            "(line 109,col 9)-(line 114,col 29)",
            "(line 115,col 9)-(line 119,col 26)",
            "(line 120,col 9)-(line 124,col 26)",
            "(line 125,col 9)-(line 129,col 26)",
            "(line 130,col 9)-(line 135,col 26)",
            "(line 136,col 9)-(line 140,col 26)",
            "(line 141,col 9)-(line 145,col 26)",
            "(line 146,col 9)-(line 149,col 26)",
            "(line 150,col 9)-(line 153,col 26)",
            "(line 154,col 9)-(line 158,col 26)",
            "(line 159,col 9)-(line 164,col 26)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 97)",
            "(line 169,col 9)-(line 169,col 40)",
            "(line 170,col 9)-(line 170,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testMan()",
        "snippet": "    public void testMan()\n    {\n        String cmdLine =\n                \"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \" +\n                        \"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\";\n        Options options = new Options().\n                addOption(\"a\", \"all\", false, \"find all matching manual pages.\").\n                addOption(\"d\", \"debug\", false, \"emit debugging messages.\").\n                addOption(\"e\", \"extension\", false, \"limit search to extension type 'extension'.\").\n                addOption(\"f\", \"whatis\", false, \"equivalent to whatis.\").\n                addOption(\"k\", \"apropos\", false, \"equivalent to apropos.\").\n                addOption(\"w\", \"location\", false, \"print physical location of man page(s).\").\n                addOption(\"l\", \"local-file\", false, \"interpret 'page' argument(s) as local filename(s)\").\n                addOption(\"u\", \"update\", false, \"force a cache consistency check.\").\n                //FIXME - should generate -r,--prompt string\n                addOption(\"r\", \"prompt\", true, \"provide 'less' pager with prompt.\").\n                addOption(\"c\", \"catman\", false, \"used by catman to reformat out of date cat pages.\").\n                addOption(\"7\", \"ascii\", false, \"display ASCII translation or certain latin1 chars.\").\n                addOption(\"t\", \"troff\", false, \"use troff format pages.\").\n                //FIXME - should generate -T,--troff-device device\n                addOption(\"T\", \"troff-device\", true, \"use groff with selected device.\").\n                addOption(\"Z\", \"ditroff\", false, \"use groff with selected device.\").\n                addOption(\"D\", \"default\", false, \"reset all options to their default values.\").\n                //FIXME - should generate -M,--manpath path\n                addOption(\"M\", \"manpath\", true, \"set search path for manual pages to 'path'.\").\n                //FIXME - should generate -P,--pager pager\n                addOption(\"P\", \"pager\", true, \"use program 'pager' to display output.\").\n                //FIXME - should generate -S,--sections list\n                addOption(\"S\", \"sections\", true, \"use colon separated section list.\").\n                //FIXME - should generate -m,--systems system\n                addOption(\"m\", \"systems\", true, \"search for man pages from other unix system(s).\").\n                //FIXME - should generate -L,--locale locale\n                addOption(\"L\", \"locale\", true, \"define the locale for this particular man search.\").\n                //FIXME - should generate -p,--preprocessor string\n                addOption(\"p\", \"preprocessor\", true, \"string indicates which preprocessor to run.\\n\" +\n                         \" e - [n]eqn  p - pic     t - tbl\\n\" +\n                         \" g - grap    r - refer   v - vgrind\").\n                addOption(\"V\", \"version\", false, \"show version.\").\n                addOption(\"h\", \"help\", false, \"show this usage message.\");\n\n        HelpFormatter hf = new HelpFormatter();\n        //hf.printHelp(cmdLine, opts);\n        hf.printHelp(60, cmdLine, null, options, null);\n    }",
        "begin_line": 176,
        "end_line": 219,
        "comment": "\n     * author Slawek Zachcial\n     ",
        "child_ranges": [
            "(line 178,col 9)-(line 180,col 92)",
            "(line 181,col 9)-(line 214,col 74)",
            "(line 216,col 9)-(line 216,col 47)",
            "(line 218,col 9)-(line 218,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ApplicationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
        "signature": "org.apache.commons.cli.ApplicationTest.testNLT()",
        "snippet": "    public void testNLT() throws Exception {\n        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n\n        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Set time limit for execution, in minutes\")\n                                        .create(\"l\");\n\n        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n                                  .withValueSeparator()\n                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n                                  .create(\"a\");\n\n        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n                                     .withValueSeparator()\n                                     .withDescription(\"The NLT server address\")\n                                     .create(\"s\");\n\n        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n                                         .withValueSeparator()\n                                         .withDescription(\"Number of results per item\")\n                                         .create(\"r\");\n\n        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n                                         .withValueSeparator()\n                                         .withDescription(\"Use the specified configuration file\")\n                                         .create();\n\n        Options options = new Options();\n        options.addOption(help);\n        options.addOption(version);\n        options.addOption(newRun);\n        options.addOption(trackerRun);\n        options.addOption(timeLimit);\n        options.addOption(age);\n        options.addOption(server);\n        options.addOption(numResults);\n        options.addOption(configFile);\n\n        // create the command line parser\n        CommandLineParser parser = new PosixParser();\n\n        String[] args = new String[] {\n                \"-v\",\n                \"-l\",\n                \"10\",\n                \"-age\",\n                \"5\",\n                \"-file\",\n                \"filename\"\n            };\n\n        CommandLine line = parser.parse(options, args);\n        assertTrue(line.hasOption(\"v\"));\n        assertEquals(line.getOptionValue(\"l\"), \"10\");\n        assertEquals(line.getOptionValue(\"limit\"), \"10\");\n        assertEquals(line.getOptionValue(\"a\"), \"5\");\n        assertEquals(line.getOptionValue(\"age\"), \"5\");\n        assertEquals(line.getOptionValue(\"file\"), \"filename\");\n    }",
        "begin_line": 225,
        "end_line": 287,
        "comment": "\n     * Real world test with long and short options.\n     ",
        "child_ranges": [
            "(line 226,col 9)-(line 226,col 75)",
            "(line 227,col 9)-(line 227,col 88)",
            "(line 228,col 9)-(line 228,col 101)",
            "(line 229,col 9)-(line 229,col 113)",
            "(line 231,col 9)-(line 234,col 53)",
            "(line 236,col 9)-(line 239,col 47)",
            "(line 241,col 9)-(line 244,col 50)",
            "(line 246,col 9)-(line 249,col 54)",
            "(line 251,col 9)-(line 254,col 51)",
            "(line 256,col 9)-(line 256,col 40)",
            "(line 257,col 9)-(line 257,col 32)",
            "(line 258,col 9)-(line 258,col 35)",
            "(line 259,col 9)-(line 259,col 34)",
            "(line 260,col 9)-(line 260,col 38)",
            "(line 261,col 9)-(line 261,col 37)",
            "(line 262,col 9)-(line 262,col 31)",
            "(line 263,col 9)-(line 263,col 34)",
            "(line 264,col 9)-(line 264,col 38)",
            "(line 265,col 9)-(line 265,col 38)",
            "(line 268,col 9)-(line 268,col 53)",
            "(line 270,col 9)-(line 278,col 14)",
            "(line 280,col 9)-(line 280,col 55)",
            "(line 281,col 9)-(line 281,col 40)",
            "(line 282,col 9)-(line 282,col 53)",
            "(line 283,col 9)-(line 283,col 57)",
            "(line 284,col 9)-(line 284,col 52)",
            "(line 285,col 9)-(line 285,col 54)",
            "(line 286,col 9)-(line 286,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.UtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/UtilTest.java",
        "signature": "org.apache.commons.cli.UtilTest.testStripLeadingHyphens()",
        "snippet": "    public void testStripLeadingHyphens()\n    {\n        assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n        assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\n        assertEquals(\"-foo\", Util.stripLeadingHyphens(\"---foo\"));\n        assertNull(Util.stripLeadingHyphens(null));\n    }",
        "begin_line": 27,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 58)",
            "(line 30,col 9)-(line 30,col 63)",
            "(line 31,col 9)-(line 31,col 65)",
            "(line 32,col 9)-(line 32,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.UtilTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/UtilTest.java",
        "signature": "org.apache.commons.cli.UtilTest.testStripLeadingAndTrailingQuotes()",
        "snippet": "    public void testStripLeadingAndTrailingQuotes()\n    {\n        assertEquals(\"foo\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\"\"));\n        assertEquals(\"foo \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"foo \\\"bar\\\"\"));\n        assertEquals(\"\\\"foo\\\" bar\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" bar\"));\n        assertEquals(\"\\\"foo\\\" and \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" and \\\"bar\\\"\"));\n        assertEquals(\"\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"\"));\n    }",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 75)",
            "(line 38,col 9)-(line 38,col 87)",
            "(line 39,col 9)-(line 39,col 87)",
            "(line 40,col 9)-(line 40,col 103)",
            "(line 41,col 9)-(line 41,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.DefaultParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/DefaultParserTest.java",
        "signature": "org.apache.commons.cli.DefaultParserTest.setUp()",
        "snippet": "    public void setUp() {\n        super.setUp();\n        parser = new DefaultParser();\n    }",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 9)-(line 27,col 22)",
            "(line 28,col 9)-(line 28,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testSimple()",
        "snippet": "    public void testSimple()\n    {\n        Options opts = new Options();\n\n        opts.addOption(\"a\", false, \"toggle -a\");\n        opts.addOption(\"b\", true, \"toggle -b\");\n\n        assertTrue(opts.hasOption(\"a\"));\n        assertTrue(opts.hasOption(\"b\"));\n    }",
        "begin_line": 31,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 37)",
            "(line 35,col 9)-(line 35,col 48)",
            "(line 36,col 9)-(line 36,col 47)",
            "(line 38,col 9)-(line 38,col 40)",
            "(line 39,col 9)-(line 39,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testDuplicateSimple()",
        "snippet": "    public void testDuplicateSimple()\n    {\n        Options opts = new Options();\n        opts.addOption(\"a\", false, \"toggle -a\");\n        opts.addOption(\"a\", true, \"toggle -a*\");\n\n        assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n    }",
        "begin_line": 42,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 37)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 46,col 48)",
            "(line 48,col 9)-(line 48,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testLong()",
        "snippet": "    public void testLong()\n    {\n        Options opts = new Options();\n\n        opts.addOption(\"a\", \"--a\", false, \"toggle -a\");\n        opts.addOption(\"b\", \"--b\", true, \"set -b\");\n\n        assertTrue(opts.hasOption(\"a\"));\n        assertTrue(opts.hasOption(\"b\"));\n    }",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 37)",
            "(line 55,col 9)-(line 55,col 55)",
            "(line 56,col 9)-(line 56,col 51)",
            "(line 58,col 9)-(line 58,col 40)",
            "(line 59,col 9)-(line 59,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testDuplicateLong()",
        "snippet": "    public void testDuplicateLong()\n    {\n        Options opts = new Options();\n        opts.addOption(\"a\", \"--a\", false, \"toggle -a\");\n        opts.addOption(\"a\", \"--a\", false, \"toggle -a*\");\n        assertEquals(\"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription());\n    }",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 37)",
            "(line 65,col 9)-(line 65,col 55)",
            "(line 66,col 9)-(line 66,col 56)",
            "(line 67,col 9)-(line 67,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testHelpOptions()",
        "snippet": "    public void testHelpOptions()\n    {\n        Option longOnly1 = OptionBuilder.withLongOpt(\"long-only1\").create();\n        Option longOnly2 = OptionBuilder.withLongOpt(\"long-only2\").create();\n        Option shortOnly1 = OptionBuilder.create(\"1\");\n        Option shortOnly2 = OptionBuilder.create(\"2\");\n        Option bothA = OptionBuilder.withLongOpt(\"bothA\").create(\"a\");\n        Option bothB = OptionBuilder.withLongOpt(\"bothB\").create(\"b\");\n        \n        Options options = new Options();\n        options.addOption(longOnly1);\n        options.addOption(longOnly2);\n        options.addOption(shortOnly1);\n        options.addOption(shortOnly2);\n        options.addOption(bothA);\n        options.addOption(bothB);\n        \n        Collection allOptions = new ArrayList();\n        allOptions.add(longOnly1);\n        allOptions.add(longOnly2);\n        allOptions.add(shortOnly1);\n        allOptions.add(shortOnly2);\n        allOptions.add(bothA);\n        allOptions.add(bothB);\n        \n        Collection helpOptions = options.helpOptions();\n        \n        assertTrue(\"Everything in all should be in help\", helpOptions.containsAll(allOptions));\n        assertTrue(\"Everything in help should be in all\", allOptions.containsAll(helpOptions));        \n    }",
        "begin_line": 70,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 76)",
            "(line 73,col 9)-(line 73,col 76)",
            "(line 74,col 9)-(line 74,col 54)",
            "(line 75,col 9)-(line 75,col 54)",
            "(line 76,col 9)-(line 76,col 70)",
            "(line 77,col 9)-(line 77,col 70)",
            "(line 79,col 9)-(line 79,col 40)",
            "(line 80,col 9)-(line 80,col 37)",
            "(line 81,col 9)-(line 81,col 37)",
            "(line 82,col 9)-(line 82,col 38)",
            "(line 83,col 9)-(line 83,col 38)",
            "(line 84,col 9)-(line 84,col 33)",
            "(line 85,col 9)-(line 85,col 33)",
            "(line 87,col 9)-(line 87,col 48)",
            "(line 88,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 34)",
            "(line 90,col 9)-(line 90,col 35)",
            "(line 91,col 9)-(line 91,col 35)",
            "(line 92,col 9)-(line 92,col 30)",
            "(line 93,col 9)-(line 93,col 30)",
            "(line 95,col 9)-(line 95,col 55)",
            "(line 97,col 9)-(line 97,col 95)",
            "(line 98,col 9)-(line 98,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testMissingOptionException()",
        "snippet": "    public void testMissingOptionException() throws ParseException\n    {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        try\n        {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals(\"Missing required option: f\", e.getMessage());\n        }\n    }",
        "begin_line": 101,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 40)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testMissingOptionsException()",
        "snippet": "    public void testMissingOptionsException() throws ParseException\n    {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n        try\n        {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals(\"Missing required options: f, x\", e.getMessage());\n        }\n    }",
        "begin_line": 116,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 40)",
            "(line 119,col 9)-(line 119,col 66)",
            "(line 120,col 9)-(line 120,col 66)",
            "(line 121,col 9)-(line 129,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testToString()",
        "snippet": "    public void testToString()\n    {\n        Options options = new Options();\n        options.addOption(\"f\", \"foo\", true, \"Foo\");\n        options.addOption(\"b\", \"bar\", false, \"Bar\");\n\n        String s = options.toString();\n        assertNotNull(\"null string returned\", s);\n        assertTrue(\"foo option missing\", s.toLowerCase().indexOf(\"foo\") != -1);\n        assertTrue(\"bar option missing\", s.toLowerCase().indexOf(\"bar\") != -1);\n    }",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 40)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 52)",
            "(line 138,col 9)-(line 138,col 38)",
            "(line 139,col 9)-(line 139,col 49)",
            "(line 140,col 9)-(line 140,col 79)",
            "(line 141,col 9)-(line 141,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testGetOptionsGroups()",
        "snippet": "    public void testGetOptionsGroups()\n    {\n        Options options = new Options();\n\n        OptionGroup group1 = new OptionGroup();\n        group1.addOption(OptionBuilder.create('a'));\n        group1.addOption(OptionBuilder.create('b'));\n\n        OptionGroup group2 = new OptionGroup();\n        group2.addOption(OptionBuilder.create('x'));\n        group2.addOption(OptionBuilder.create('y'));\n\n        options.addOptionGroup(group1);\n        options.addOptionGroup(group2);\n\n        assertNotNull(options.getOptionGroups());\n        assertEquals(2, options.getOptionGroups().size());\n    }",
        "begin_line": 144,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 40)",
            "(line 148,col 9)-(line 148,col 47)",
            "(line 149,col 9)-(line 149,col 52)",
            "(line 150,col 9)-(line 150,col 52)",
            "(line 152,col 9)-(line 152,col 47)",
            "(line 153,col 9)-(line 153,col 52)",
            "(line 154,col 9)-(line 154,col 52)",
            "(line 156,col 9)-(line 156,col 39)",
            "(line 157,col 9)-(line 157,col 39)",
            "(line 159,col 9)-(line 159,col 49)",
            "(line 160,col 9)-(line 160,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionsTest.java",
        "signature": "org.apache.commons.cli.OptionsTest.testGetMatchingOpts()",
        "snippet": "    public void testGetMatchingOpts()\n    {\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n        \n        assertTrue(options.getMatchingOptions(\"foo\").isEmpty());\n        assertEquals(1, options.getMatchingOptions(\"version\").size());\n        assertEquals(2, options.getMatchingOptions(\"ver\").size());\n    }",
        "begin_line": 163,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 40)",
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 73)",
            "(line 169,col 9)-(line 169,col 64)",
            "(line 170,col 9)-(line 170,col 70)",
            "(line 171,col 9)-(line 171,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testCompleteOption()",
        "snippet": "    public void testCompleteOption( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( new Float( 10 ) )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        assertEquals( \"s\", simple.getOpt() );\n        assertEquals( \"simple option\", simple.getLongOpt() );\n        assertEquals( \"this is a simple option\", simple.getDescription() );\n        assertEquals( simple.getType().getClass(), Float.class );\n        assertTrue( simple.hasArg() );\n        assertTrue( simple.isRequired() );\n        assertTrue( simple.hasArgs() );\n    }",
        "begin_line": 24,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 25,col 9)-(line 31,col 52)",
            "(line 33,col 9)-(line 33,col 45)",
            "(line 34,col 9)-(line 34,col 61)",
            "(line 35,col 9)-(line 35,col 75)",
            "(line 36,col 9)-(line 36,col 65)",
            "(line 37,col 9)-(line 37,col 38)",
            "(line 38,col 9)-(line 38,col 42)",
            "(line 39,col 9)-(line 39,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions()",
        "snippet": "    public void testTwoCompleteOptions( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( new Float( 10 ) )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        assertEquals( \"s\", simple.getOpt() );\n        assertEquals( \"simple option\", simple.getLongOpt() );\n        assertEquals( \"this is a simple option\", simple.getDescription() );\n        assertEquals( simple.getType().getClass(), Float.class );\n        assertTrue( simple.hasArg() );\n        assertTrue( simple.isRequired() );\n        assertTrue( simple.hasArgs() );\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        assertEquals( \"d\", simple.getOpt() );\n        assertEquals( \"dimple option\", simple.getLongOpt() );\n        assertEquals( \"this is a dimple option\", simple.getDescription() );\n        assertNull( simple.getType() );\n        assertTrue( simple.hasArg() );\n        assertTrue( !simple.isRequired() );\n        assertTrue( !simple.hasArgs() );\n    }",
        "begin_line": 42,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 49,col 52)",
            "(line 51,col 9)-(line 51,col 45)",
            "(line 52,col 9)-(line 52,col 61)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 54,col 9)-(line 54,col 65)",
            "(line 55,col 9)-(line 55,col 38)",
            "(line 56,col 9)-(line 56,col 42)",
            "(line 57,col 9)-(line 57,col 39)",
            "(line 59,col 9)-(line 62,col 45)",
            "(line 64,col 9)-(line 64,col 45)",
            "(line 65,col 9)-(line 65,col 61)",
            "(line 66,col 9)-(line 66,col 75)",
            "(line 67,col 9)-(line 67,col 39)",
            "(line 68,col 9)-(line 68,col 38)",
            "(line 69,col 9)-(line 69,col 43)",
            "(line 70,col 9)-(line 70,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testBaseOptionCharOpt()",
        "snippet": "    public void testBaseOptionCharOpt() {\n        Option base = OptionBuilder.withDescription( \"option description\")\n                                   .create( 'o' );\n\n        assertEquals( \"o\", base.getOpt() );\n        assertEquals( \"option description\", base.getDescription() );\n        assertTrue( !base.hasArg() );\n    }",
        "begin_line": 73,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 75,col 50)",
            "(line 77,col 9)-(line 77,col 43)",
            "(line 78,col 9)-(line 78,col 68)",
            "(line 79,col 9)-(line 79,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testBaseOptionStringOpt()",
        "snippet": "    public void testBaseOptionStringOpt() {\n        Option base = OptionBuilder.withDescription( \"option description\")\n                                   .create( \"o\" );\n\n        assertEquals( \"o\", base.getOpt() );\n        assertEquals( \"option description\", base.getDescription() );\n        assertTrue( !base.hasArg() );\n    }",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 84,col 50)",
            "(line 86,col 9)-(line 86,col 43)",
            "(line 87,col 9)-(line 87,col 68)",
            "(line 88,col 9)-(line 88,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testSpecialOptChars()",
        "snippet": "    public void testSpecialOptChars() throws Exception\n    {\n        // '?'\n        Option opt1 = OptionBuilder.withDescription(\"help options\").create('?');\n        assertEquals(\"?\", opt1.getOpt());\n\n        // '@'\n        Option opt2 = OptionBuilder.withDescription(\"read from stdin\").create('@');\n        assertEquals(\"@\", opt2.getOpt());\n        \n        // ' '\n        try {\n            OptionBuilder.create(' ');\n            fail( \"IllegalArgumentException not caught\" );            \n        } catch (IllegalArgumentException e) {\n            // success\n        }\n    }",
        "begin_line": 91,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 41)",
            "(line 98,col 9)-(line 98,col 83)",
            "(line 99,col 9)-(line 99,col 41)",
            "(line 102,col 9)-(line 107,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testOptionArgNumbers()",
        "snippet": "    public void testOptionArgNumbers()\n    {\n        Option opt = OptionBuilder.withDescription( \"option description\" )\n                                  .hasArgs( 2 )\n                                  .create( 'o' );\n        assertEquals( 2, opt.getArgs() );\n    }",
        "begin_line": 110,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 114,col 49)",
            "(line 115,col 9)-(line 115,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testIllegalOptions()",
        "snippet": "    public void testIllegalOptions() {\n        // bad single character option\n        try {\n            OptionBuilder.withDescription( \"option description\" ).create( '\"' );\n            fail( \"IllegalArgumentException not caught\" );\n        }\n        catch( IllegalArgumentException exp ) {\n            // success\n        }\n\n        // bad character in option string\n        try {\n            Option opt = OptionBuilder.create( \"opt`\" );\n            fail( \"IllegalArgumentException not caught\" );\n        }\n        catch( IllegalArgumentException exp ) {\n            // success\n        }\n\n        // valid option \n        try {\n            Option opt = OptionBuilder.create( \"opt\" );\n            // success\n        }\n        catch( IllegalArgumentException exp ) {\n            fail( \"IllegalArgumentException caught\" );\n        }\n    }",
        "begin_line": 118,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 126,col 9)",
            "(line 129,col 9)-(line 135,col 9)",
            "(line 138,col 9)-(line 144,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testCreateIncompleteOption()",
        "snippet": "    public void testCreateIncompleteOption() {\n        try\n        {\n            OptionBuilder.hasArg().create();\n            fail(\"Incomplete option should be rejected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n            \n            // implicitly reset the builder\n            OptionBuilder.create( \"opt\" );\n        }\n    }",
        "begin_line": 147,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 159,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "signature": "org.apache.commons.cli.OptionBuilderTest.testBuilderIsResettedAlways()",
        "snippet": "    public void testBuilderIsResettedAlways() {\n        try\n        {\n            OptionBuilder.withDescription(\"JUnit\").create('\"');\n            fail(\"IllegalArgumentException expected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        assertNull(\"we inherited a description\", OptionBuilder.create('x').getDescription());\n\n        try\n        {\n            OptionBuilder.withDescription(\"JUnit\").create();\n            fail(\"IllegalArgumentException expected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        assertNull(\"we inherited a description\", OptionBuilder.create('x').getDescription());\n    }",
        "begin_line": 162,
        "end_line": 184,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 93)",
            "(line 174,col 9)-(line 182,col 9)",
            "(line 183,col 9)-(line 183,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        super.setUp();\n        parser = new BasicParser();\n    }",
        "begin_line": 26,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 28,col 9)-(line 28,col 22)",
            "(line 29,col 9)-(line 29,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testDoubleDash2()",
        "snippet": "    public void testDoubleDash2() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testLongWithoutEqualSingleDash()",
        "snippet": "    public void testLongWithoutEqualSingleDash() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testAmbiguousLongWithoutEqualSingleDash()",
        "snippet": "    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n    {\n        // not supported by the basicParser\n    }",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testNegativeOption()",
        "snippet": "    public void testNegativeOption() throws Exception\n    {\n        // not supported by the BasicParser (CLI-184)\n    }",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testPropertiesOption1()",
        "snippet": "    public void testPropertiesOption1() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testPropertiesOption2()",
        "snippet": "    public void testPropertiesOption2() throws Exception\n    {\n        // not supported by the BasicParser\n    }    ",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testShortWithEqual()",
        "snippet": "    public void testShortWithEqual() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testShortWithoutEqual()",
        "snippet": "    public void testShortWithoutEqual() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testLongWithEqualDoubleDash()",
        "snippet": "    public void testLongWithEqualDoubleDash() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testLongWithEqualSingleDash()",
        "snippet": "    public void testLongWithEqualSingleDash() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption1()",
        "snippet": "    public void testUnambiguousPartialLongOption1() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption2()",
        "snippet": "    public void testUnambiguousPartialLongOption2() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 87,
        "end_line": 90,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption3()",
        "snippet": "    public void testUnambiguousPartialLongOption3() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption4()",
        "snippet": "    public void testUnambiguousPartialLongOption4() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption1()",
        "snippet": "    public void testAmbiguousPartialLongOption1() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption2()",
        "snippet": "    public void testAmbiguousPartialLongOption2() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption3()",
        "snippet": "    public void testAmbiguousPartialLongOption3() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption4()",
        "snippet": "    public void testAmbiguousPartialLongOption4() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testPartialLongOptionSingleDash()",
        "snippet": "    public void testPartialLongOptionSingleDash() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testBursting()",
        "snippet": "    public void testBursting() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testUnrecognizedOptionWithBursting()",
        "snippet": "    public void testUnrecognizedOptionWithBursting() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testMissingArgWithBursting()",
        "snippet": "    public void testMissingArgWithBursting() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testStopBursting()",
        "snippet": "    public void testStopBursting() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.BasicParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java",
        "signature": "org.apache.commons.cli.BasicParserTest.testStopBursting2()",
        "snippet": "    public void testStopBursting2() throws Exception\n    {\n        // not supported by the BasicParser\n    }",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.TestOption.TestOption(java.lang.String, boolean, java.lang.String)",
        "snippet": "        public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException\n        {\n            super(opt, hasArg, description);\n        }",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 13)-(line 31,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.TestOption.addValue(java.lang.String)",
        "snippet": "        public boolean addValue(String value)\n        {\n            addValueForProcessing(value);\n            return true;\n        }",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 36,col 13)-(line 36,col 41)",
            "(line 37,col 13)-(line 37,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testClear()",
        "snippet": "    public void testClear()\n    {\n        TestOption option = new TestOption(\"x\", true, \"\");\n        assertEquals(0, option.getValuesList().size());\n        option.addValue(\"a\");\n        assertEquals(1, option.getValuesList().size());\n        option.clearValues();\n        assertEquals(0, option.getValuesList().size());\n    }",
        "begin_line": 41,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 58)",
            "(line 44,col 9)-(line 44,col 55)",
            "(line 45,col 9)-(line 45,col 29)",
            "(line 46,col 9)-(line 46,col 55)",
            "(line 47,col 9)-(line 47,col 29)",
            "(line 48,col 9)-(line 48,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testClone()",
        "snippet": "    public void testClone() throws CloneNotSupportedException\n    {\n        TestOption a = new TestOption(\"a\", true, \"\");\n        TestOption b = (TestOption) a.clone();\n        assertEquals(a, b);\n        assertNotSame(a, b);\n        a.setDescription(\"a\");\n        assertEquals(\"\", b.getDescription());\n        b.setArgs(2);\n        b.addValue(\"b1\");\n        b.addValue(\"b2\");\n        assertEquals(1, a.getArgs());\n        assertEquals(0, a.getValuesList().size());\n        assertEquals(2, b.getValues().length);\n    }",
        "begin_line": 52,
        "end_line": 66,
        "comment": " See http://issues.apache.org/jira/browse/CLI-21",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 46)",
            "(line 56,col 9)-(line 56,col 27)",
            "(line 57,col 9)-(line 57,col 28)",
            "(line 58,col 9)-(line 58,col 30)",
            "(line 59,col 9)-(line 59,col 45)",
            "(line 60,col 9)-(line 60,col 21)",
            "(line 61,col 9)-(line 61,col 25)",
            "(line 62,col 9)-(line 62,col 25)",
            "(line 63,col 9)-(line 63,col 37)",
            "(line 64,col 9)-(line 64,col 50)",
            "(line 65,col 9)-(line 65,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.DefaultOption.DefaultOption(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "        public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException\n        {\n            super(opt, true, description);\n            this.defaultValue = defaultValue;\n        }",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 74,col 13)-(line 74,col 42)",
            "(line 75,col 13)-(line 75,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.DefaultOption.getValue()",
        "snippet": "        public String getValue()\n        {\n            return super.getValue() != null ? super.getValue() : defaultValue;\n        }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 13)-(line 80,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testSubclass()",
        "snippet": "    public void testSubclass() throws CloneNotSupportedException\n    {\n        Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n        Option clone = (Option) option.clone();\n        assertEquals(\"myfile.txt\", clone.getValue());\n        assertEquals(DefaultOption.class, clone.getClass());\n    }",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 69)",
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 53)",
            "(line 89,col 9)-(line 89,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testHasArgName()",
        "snippet": "    public void testHasArgName()\n    {\n        Option option = new Option(\"f\", null);\n\n        option.setArgName(null);\n        assertFalse(option.hasArgName());\n\n        option.setArgName(\"\");\n        assertFalse(option.hasArgName());\n\n        option.setArgName(\"file\");\n        assertTrue(option.hasArgName());\n    }",
        "begin_line": 92,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 46)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 41)",
            "(line 99,col 9)-(line 99,col 30)",
            "(line 100,col 9)-(line 100,col 41)",
            "(line 102,col 9)-(line 102,col 34)",
            "(line 103,col 9)-(line 103,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testHasArgs()",
        "snippet": "    public void testHasArgs()\n    {\n        Option option = new Option(\"f\", null);\n\n        option.setArgs(0);\n        assertFalse(option.hasArgs());\n\n        option.setArgs(1);\n        assertFalse(option.hasArgs());\n\n        option.setArgs(10);\n        assertTrue(option.hasArgs());\n\n        option.setArgs(Option.UNLIMITED_VALUES);\n        assertTrue(option.hasArgs());\n\n        option.setArgs(Option.UNINITIALIZED);\n        assertFalse(option.hasArgs());\n    }",
        "begin_line": 106,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 46)",
            "(line 110,col 9)-(line 110,col 26)",
            "(line 111,col 9)-(line 111,col 38)",
            "(line 113,col 9)-(line 113,col 26)",
            "(line 114,col 9)-(line 114,col 38)",
            "(line 116,col 9)-(line 116,col 27)",
            "(line 117,col 9)-(line 117,col 37)",
            "(line 119,col 9)-(line 119,col 48)",
            "(line 120,col 9)-(line 120,col 37)",
            "(line 122,col 9)-(line 122,col 45)",
            "(line 123,col 9)-(line 123,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionTest.java",
        "signature": "org.apache.commons.cli.OptionTest.testGetValue()",
        "snippet": "    public void testGetValue()\n    {\n        Option option = new Option(\"f\", null);\n        option.setArgs(Option.UNLIMITED_VALUES);\n\n        assertEquals(\"default\", option.getValue(\"default\"));\n        assertEquals(null, option.getValue(0));\n\n        option.addValueForProcessing(\"foo\");\n        \n        assertEquals(\"foo\", option.getValue());\n        assertEquals(\"foo\", option.getValue(0));\n        assertEquals(\"foo\", option.getValue(\"default\"));\n    }",
        "begin_line": 126,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 46)",
            "(line 129,col 9)-(line 129,col 48)",
            "(line 131,col 9)-(line 131,col 60)",
            "(line 132,col 9)-(line 132,col 47)",
            "(line 134,col 9)-(line 134,col 44)",
            "(line 136,col 9)-(line 136,col 47)",
            "(line 137,col 9)-(line 137,col 48)",
            "(line 138,col 9)-(line 138,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.setUp()",
        "snippet": "    public void setUp()\n    {\n        options = new Options()\n            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n    }",
        "begin_line": 38,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 43,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testSimpleShort()",
        "snippet": "    public void testSimpleShort() throws Exception\n    {\n        String[] args = new String[] { \"-a\",\n                                       \"-b\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n        assertTrue(\"Confirm size of extra args\", cl.getArgList().size() == 2);\n    }",
        "begin_line": 46,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 50,col 54)",
            "(line 52,col 9)-(line 52,col 53)",
            "(line 54,col 9)-(line 54,col 59)",
            "(line 55,col 9)-(line 55,col 59)",
            "(line 56,col 9)-(line 56,col 80)",
            "(line 57,col 9)-(line 57,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testSimpleLong()",
        "snippet": "    public void testSimpleLong() throws Exception\n    {\n        String[] args = new String[] { \"--enable-a\",\n                                       \"--bfile\", \"toast\",\n                                       \"foo\", \"bar\" };\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n        assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n    }",
        "begin_line": 60,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 64,col 54)",
            "(line 66,col 9)-(line 66,col 53)",
            "(line 68,col 9)-(line 68,col 61)",
            "(line 69,col 9)-(line 69,col 61)",
            "(line 70,col 9)-(line 70,col 82)",
            "(line 71,col 9)-(line 71,col 95)",
            "(line 72,col 9)-(line 72,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMultiple()",
        "snippet": "    public void testMultiple() throws Exception\n    {\n        String[] args = new String[] { \"-c\",\n                                       \"foobar\",\n                                       \"-b\", \"toast\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n\n        cl = parser.parse(options, cl.getArgs());\n\n        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n    }",
        "begin_line": 75,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 79,col 55)",
            "(line 81,col 9)-(line 81,col 59)",
            "(line 82,col 9)-(line 82,col 59)",
            "(line 83,col 9)-(line 83,col 100)",
            "(line 85,col 9)-(line 85,col 49)",
            "(line 87,col 9)-(line 87,col 64)",
            "(line 88,col 9)-(line 88,col 59)",
            "(line 89,col 9)-(line 89,col 80)",
            "(line 90,col 9)-(line 90,col 99)",
            "(line 91,col 9)-(line 91,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMultipleWithLong()",
        "snippet": "    public void testMultipleWithLong() throws Exception\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"foobar\",\n                                       \"--bfile\", \"toast\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n\n        cl = parser.parse(options, cl.getArgs());\n\n        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n    }",
        "begin_line": 94,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 98,col 60)",
            "(line 100,col 9)-(line 100,col 59)",
            "(line 101,col 9)-(line 101,col 59)",
            "(line 102,col 9)-(line 102,col 100)",
            "(line 104,col 9)-(line 104,col 49)",
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 59)",
            "(line 108,col 9)-(line 108,col 80)",
            "(line 109,col 9)-(line 109,col 99)",
            "(line 110,col 9)-(line 110,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnrecognizedOption()",
        "snippet": "    public void testUnrecognizedOption() throws Exception\n    {\n        String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" };\n\n        try\n        {\n            parser.parse(options, args);\n            fail(\"UnrecognizedOptionException wasn't thrown\");\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            assertEquals(\"-d\", e.getOption());\n        }\n    }",
        "begin_line": 113,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 81)",
            "(line 117,col 9)-(line 125,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMissingArg()",
        "snippet": "    public void testMissingArg() throws Exception\n    {\n        String[] args = new String[] { \"-b\" };\n\n        boolean caught = false;\n\n        try\n        {\n            parser.parse(options, args);\n        }\n        catch (MissingArgumentException e)\n        {\n            caught = true;\n            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n        }\n\n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 128,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 46)",
            "(line 132,col 9)-(line 132,col 31)",
            "(line 134,col 9)-(line 142,col 9)",
            "(line 144,col 9)-(line 144,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testDoubleDash1()",
        "snippet": "    public void testDoubleDash1() throws Exception\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"--\",\n                                       \"-b\", \"toast\" };\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n        assertTrue(\"Confirm -b is not set\", !cl.hasOption(\"b\"));\n        assertTrue(\"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n    }",
        "begin_line": 147,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 151,col 55)",
            "(line 153,col 9)-(line 153,col 53)",
            "(line 155,col 9)-(line 155,col 59)",
            "(line 156,col 9)-(line 156,col 64)",
            "(line 157,col 9)-(line 157,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testDoubleDash2()",
        "snippet": "    public void testDoubleDash2() throws Exception\n    {\n        Options options = new Options();\n        options.addOption(OptionBuilder.hasArg().create('n'));\n        options.addOption(OptionBuilder.create('m'));\n\n        try\n        {\n            parser.parse(options, new String[]{\"-n\", \"--\", \"-m\"});\n            fail(\"MissingArgumentException not thrown for option -n\");\n        }\n        catch (MissingArgumentException e)\n        {\n            assertNotNull(\"option null\", e.getOption());\n            assertEquals(\"n\", e.getOption().getOpt());\n        }\n    }",
        "begin_line": 160,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 40)",
            "(line 163,col 9)-(line 163,col 62)",
            "(line 164,col 9)-(line 164,col 53)",
            "(line 166,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testSingleDash()",
        "snippet": "    public void testSingleDash() throws Exception\n    {\n        String[] args = new String[] { \"--copt\",\n                                       \"-b\", \"-\",\n                                       \"-a\",\n                                       \"-\" };\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\"));\n        assertTrue(\"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n        assertTrue(\"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\"));\n    }",
        "begin_line": 178,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 183,col 45)",
            "(line 185,col 9)-(line 185,col 53)",
            "(line 187,col 9)-(line 187,col 59)",
            "(line 188,col 9)-(line 188,col 59)",
            "(line 189,col 9)-(line 189,col 76)",
            "(line 190,col 9)-(line 190,col 98)",
            "(line 191,col 9)-(line 191,col 112)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testStopAtUnexpectedArg()",
        "snippet": "    public void testStopAtUnexpectedArg() throws Exception\n    {\n        String[] args = new String[] { \"-c\",\n                                       \"foober\",\n                                       \"-b\",\n                                       \"toast\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n    }",
        "begin_line": 194,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 196,col 9)-(line 199,col 49)",
            "(line 201,col 9)-(line 201,col 59)",
            "(line 202,col 9)-(line 202,col 59)",
            "(line 203,col 9)-(line 203,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testStopAtExpectedArg()",
        "snippet": "   public void testStopAtExpectedArg() throws Exception\n    {\n        String[] args = new String[]{\"-b\", \"foo\"};\n\n        CommandLine cl = parser.parse(options, args, true);\n\n        assertTrue(\"Confirm -b is set\", cl.hasOption('b'));\n        assertEquals(\"Confirm -b is set\", \"foo\", cl.getOptionValue('b'));\n        assertTrue(\"Confirm no extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 0);\n    }",
        "begin_line": 206,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 50)",
            "(line 210,col 9)-(line 210,col 59)",
            "(line 212,col 9)-(line 212,col 59)",
            "(line 213,col 9)-(line 213,col 73)",
            "(line 214,col 9)-(line 214,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testStopAtNonOptionShort()",
        "snippet": "    public void testStopAtNonOptionShort() throws Exception\n    {\n        String[] args = new String[]{\"-z\",\n                                     \"-a\",\n                                     \"-btoast\"};\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n    }",
        "begin_line": 217,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 221,col 48)",
            "(line 223,col 9)-(line 223,col 59)",
            "(line 224,col 9)-(line 224,col 64)",
            "(line 225,col 9)-(line 225,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testStopAtNonOptionLong()",
        "snippet": "    public void testStopAtNonOptionLong() throws Exception\n    {\n        String[] args = new String[]{\"--zop==1\",\n                                     \"-abtoast\",\n                                     \"--b=bar\"};\n\n        CommandLine cl = parser.parse(options, args, true);\n\n        assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\n        assertFalse(\"Confirm -b is not set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n    }",
        "begin_line": 228,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 232,col 48)",
            "(line 234,col 9)-(line 234,col 59)",
            "(line 236,col 9)-(line 236,col 64)",
            "(line 237,col 9)-(line 237,col 64)",
            "(line 238,col 9)-(line 238,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testNegativeArgument()",
        "snippet": "    public void testNegativeArgument() throws Exception\n    {\n        String[] args = new String[] { \"-b\", \"-1\"} ;\n\n        CommandLine cl = parser.parse(options, args);\n        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n    }",
        "begin_line": 241,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 243,col 52)",
            "(line 245,col 9)-(line 245,col 53)",
            "(line 246,col 9)-(line 246,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testNegativeOption()",
        "snippet": "    public void testNegativeOption() throws Exception\n    {\n        String[] args = new String[] { \"-b\", \"-1\"} ;\n        \n        options.addOption(\"1\", false, null);\n\n        CommandLine cl = parser.parse(options, args);\n        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n    }",
        "begin_line": 249,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 52)",
            "(line 253,col 9)-(line 253,col 44)",
            "(line 255,col 9)-(line 255,col 53)",
            "(line 256,col 9)-(line 256,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testArgumentStartingWithHyphen()",
        "snippet": "    public void testArgumentStartingWithHyphen() throws Exception\n    {\n        String[] args = new String[]{\"-b\", \"-foo\"};\n\n        CommandLine cl = parser.parse(options, args);\n        assertEquals(\"-foo\", cl.getOptionValue(\"b\"));\n    }",
        "begin_line": 259,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 51)",
            "(line 263,col 9)-(line 263,col 53)",
            "(line 264,col 9)-(line 264,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testShortWithEqual()",
        "snippet": "    public void testShortWithEqual() throws Exception\n    {\n        String[] args = new String[] { \"-f=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }",
        "begin_line": 267,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 50)",
            "(line 271,col 9)-(line 271,col 40)",
            "(line 272,col 9)-(line 272,col 81)",
            "(line 274,col 9)-(line 274,col 53)",
            "(line 276,col 9)-(line 276,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testShortWithoutEqual()",
        "snippet": "    public void testShortWithoutEqual() throws Exception\n    {\n        String[] args = new String[] { \"-fbar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }",
        "begin_line": 279,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 281,col 9)-(line 281,col 49)",
            "(line 283,col 9)-(line 283,col 40)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 286,col 9)-(line 286,col 53)",
            "(line 288,col 9)-(line 288,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testLongWithEqualDoubleDash()",
        "snippet": "    public void testLongWithEqualDoubleDash() throws Exception\n    {\n        String[] args = new String[] { \"--foo=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }",
        "begin_line": 291,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 53)",
            "(line 295,col 9)-(line 295,col 40)",
            "(line 296,col 9)-(line 296,col 81)",
            "(line 298,col 9)-(line 298,col 53)",
            "(line 300,col 9)-(line 300,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testLongWithEqualSingleDash()",
        "snippet": "    public void testLongWithEqualSingleDash() throws Exception\n    {\n        String[] args = new String[] { \"-foo=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }",
        "begin_line": 303,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 52)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 308,col 9)-(line 308,col 81)",
            "(line 310,col 9)-(line 310,col 53)",
            "(line 312,col 9)-(line 312,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testLongWithoutEqualSingleDash()",
        "snippet": "    public void testLongWithoutEqualSingleDash() throws Exception\n    {\n        String[] args = new String[] { \"-foobar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }",
        "begin_line": 315,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 51)",
            "(line 319,col 9)-(line 319,col 40)",
            "(line 320,col 9)-(line 320,col 81)",
            "(line 322,col 9)-(line 322,col 53)",
            "(line 324,col 9)-(line 324,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testAmbiguousLongWithoutEqualSingleDash()",
        "snippet": "    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n    {\n        String[] args = new String[] { \"-b\", \"-foobar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasOptionalArg().create('f'));\n        options.addOption(OptionBuilder.withLongOpt(\"bar\").hasOptionalArg().create('b'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"b\"));\n        assertTrue(cl.hasOption(\"f\"));\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }",
        "begin_line": 327,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 57)",
            "(line 331,col 9)-(line 331,col 40)",
            "(line 332,col 9)-(line 332,col 89)",
            "(line 333,col 9)-(line 333,col 89)",
            "(line 335,col 9)-(line 335,col 53)",
            "(line 337,col 9)-(line 337,col 38)",
            "(line 338,col 9)-(line 338,col 38)",
            "(line 339,col 9)-(line 339,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testLongWithoutEqualDoubleDash()",
        "snippet": "    public void testLongWithoutEqualDoubleDash() throws Exception\n    {\n        String[] args = new String[] { \"--foobar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n\n        CommandLine cl = parser.parse(options, args, true);\n\n        assertFalse(cl.hasOption(\"foo\")); // foo isn't expected to be recognized with a double dash\n    }",
        "begin_line": 342,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 52)",
            "(line 346,col 9)-(line 346,col 40)",
            "(line 347,col 9)-(line 347,col 81)",
            "(line 349,col 9)-(line 349,col 59)",
            "(line 351,col 9)-(line 351,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testLongWithUnexpectedArgument1()",
        "snippet": "    public void testLongWithUnexpectedArgument1() throws Exception\n    {\n        String[] args = new String[] { \"--foo=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n\n        try\n        {\n            parser.parse(options, args);\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            assertEquals(\"--foo=bar\", e.getOption());\n            return;\n        }\n\n        fail(\"UnrecognizedOptionException not thrown\");\n    }",
        "begin_line": 354,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 53)",
            "(line 358,col 9)-(line 358,col 40)",
            "(line 359,col 9)-(line 359,col 72)",
            "(line 361,col 9)-(line 369,col 9)",
            "(line 371,col 9)-(line 371,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testLongWithUnexpectedArgument2()",
        "snippet": "    public void testLongWithUnexpectedArgument2() throws Exception\n    {\n        String[] args = new String[] { \"-foobar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n\n        try\n        {\n            parser.parse(options, args);\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            assertEquals(\"-foobar\", e.getOption());\n            return;\n        }\n\n        fail(\"UnrecognizedOptionException not thrown\");\n    }",
        "begin_line": 374,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 51)",
            "(line 378,col 9)-(line 378,col 40)",
            "(line 379,col 9)-(line 379,col 72)",
            "(line 381,col 9)-(line 389,col 9)",
            "(line 391,col 9)-(line 391,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testShortWithUnexpectedArgument()",
        "snippet": "    public void testShortWithUnexpectedArgument() throws Exception\n    {\n        String[] args = new String[] { \"-f=bar\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n\n        try\n        {\n            parser.parse(options, args);\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            assertEquals(\"-f=bar\", e.getOption());\n            return;\n        }\n\n        fail(\"UnrecognizedOptionException not thrown\");\n    }",
        "begin_line": 394,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 50)",
            "(line 398,col 9)-(line 398,col 40)",
            "(line 399,col 9)-(line 399,col 72)",
            "(line 401,col 9)-(line 409,col 9)",
            "(line 411,col 9)-(line 411,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertiesOption1()",
        "snippet": "    public void testPropertiesOption1() throws Exception\n    {\n        String[] args = new String[] { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\n\n        CommandLine cl = parser.parse(options, args);\n\n        List values = Arrays.asList(cl.getOptionValues(\"J\"));\n        assertNotNull(\"null values\", values);\n        assertEquals(\"number of values\", 4, values.size());\n        assertEquals(\"value 1\", \"source\", values.get(0));\n        assertEquals(\"value 2\", \"1.5\", values.get(1));\n        assertEquals(\"value 3\", \"target\", values.get(2));\n        assertEquals(\"value 4\", \"1.5\", values.get(3));\n        \n        List argsleft = cl.getArgList();\n        assertEquals(\"Should be 1 arg left\", 1, argsleft.size());\n        assertEquals(\"Expecting foo\", \"foo\", argsleft.get(0));\n    }",
        "begin_line": 414,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 416,col 9)-(line 416,col 86)",
            "(line 418,col 9)-(line 418,col 40)",
            "(line 419,col 9)-(line 419,col 85)",
            "(line 421,col 9)-(line 421,col 53)",
            "(line 423,col 9)-(line 423,col 61)",
            "(line 424,col 9)-(line 424,col 45)",
            "(line 425,col 9)-(line 425,col 59)",
            "(line 426,col 9)-(line 426,col 57)",
            "(line 427,col 9)-(line 427,col 54)",
            "(line 428,col 9)-(line 428,col 57)",
            "(line 429,col 9)-(line 429,col 54)",
            "(line 431,col 9)-(line 431,col 40)",
            "(line 432,col 9)-(line 432,col 65)",
            "(line 433,col 9)-(line 433,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertiesOption2()",
        "snippet": "    public void testPropertiesOption2() throws Exception\n    {\n        String[] args = new String[] { \"-Dparam1\", \"-Dparam2=value2\", \"-D\"};\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\n\n        CommandLine cl = parser.parse(options, args);\n        \n        Properties props = cl.getOptionProperties(\"D\");\n        assertNotNull(\"null properties\", props);\n        assertEquals(\"number of properties in \" + props, 2, props.size());\n        assertEquals(\"property 1\", \"true\", props.getProperty(\"param1\"));\n        assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\n        \n        List argsleft = cl.getArgList();\n        assertEquals(\"Should be no arg left\", 0, argsleft.size());\n    }",
        "begin_line": 436,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 76)",
            "(line 440,col 9)-(line 440,col 40)",
            "(line 441,col 9)-(line 441,col 93)",
            "(line 443,col 9)-(line 443,col 53)",
            "(line 445,col 9)-(line 445,col 55)",
            "(line 446,col 9)-(line 446,col 48)",
            "(line 447,col 9)-(line 447,col 74)",
            "(line 448,col 9)-(line 448,col 72)",
            "(line 449,col 9)-(line 449,col 74)",
            "(line 451,col 9)-(line 451,col 40)",
            "(line 452,col 9)-(line 452,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnambiguousPartialLongOption1()",
        "snippet": "    public void testUnambiguousPartialLongOption1() throws Exception\n    {\n        String[] args = new String[] { \"--ver\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        \n        CommandLine cl = parser.parse(options, args);\n        \n        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n    }",
        "begin_line": 455,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 49)",
            "(line 459,col 9)-(line 459,col 40)",
            "(line 460,col 9)-(line 460,col 73)",
            "(line 461,col 9)-(line 461,col 70)",
            "(line 463,col 9)-(line 463,col 53)",
            "(line 465,col 9)-(line 465,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnambiguousPartialLongOption2()",
        "snippet": "    public void testUnambiguousPartialLongOption2() throws Exception\n    {\n        String[] args = new String[] { \"-ver\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        \n        CommandLine cl = parser.parse(options, args);\n        \n        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n    }",
        "begin_line": 468,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 48)",
            "(line 472,col 9)-(line 472,col 40)",
            "(line 473,col 9)-(line 473,col 73)",
            "(line 474,col 9)-(line 474,col 70)",
            "(line 476,col 9)-(line 476,col 53)",
            "(line 478,col 9)-(line 478,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnambiguousPartialLongOption3()",
        "snippet": "    public void testUnambiguousPartialLongOption3() throws Exception\n    {\n        String[] args = new String[] { \"--ver=1\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        \n        CommandLine cl = parser.parse(options, args);\n        \n        assertTrue(\"Confirm --verbose is set\", cl.hasOption(\"verbose\"));\n        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n    }",
        "begin_line": 481,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 483,col 9)-(line 483,col 51)",
            "(line 485,col 9)-(line 485,col 40)",
            "(line 486,col 9)-(line 486,col 90)",
            "(line 487,col 9)-(line 487,col 70)",
            "(line 489,col 9)-(line 489,col 53)",
            "(line 491,col 9)-(line 491,col 72)",
            "(line 492,col 9)-(line 492,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnambiguousPartialLongOption4()",
        "snippet": "    public void testUnambiguousPartialLongOption4() throws Exception\n    {\n        String[] args = new String[] { \"-ver=1\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        \n        CommandLine cl = parser.parse(options, args);\n        \n        assertTrue(\"Confirm --verbose is set\", cl.hasOption(\"verbose\"));\n        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n    }",
        "begin_line": 495,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 50)",
            "(line 499,col 9)-(line 499,col 40)",
            "(line 500,col 9)-(line 500,col 90)",
            "(line 501,col 9)-(line 501,col 70)",
            "(line 503,col 9)-(line 503,col 53)",
            "(line 505,col 9)-(line 505,col 72)",
            "(line 506,col 9)-(line 506,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testAmbiguousPartialLongOption1()",
        "snippet": "    public void testAmbiguousPartialLongOption1() throws Exception\n    {\n        String[] args = new String[] { \"--ver\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n        \n        boolean caught = false;\n        \n        try \n        {\n            parser.parse(options, args);\n        }\n        catch (AmbiguousOptionException e) \n        {\n            caught = true;\n            assertEquals(\"Partial option\", \"--ver\", e.getOption());\n            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n        }\n        \n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 509,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 49)",
            "(line 513,col 9)-(line 513,col 40)",
            "(line 514,col 9)-(line 514,col 73)",
            "(line 515,col 9)-(line 515,col 73)",
            "(line 517,col 9)-(line 517,col 31)",
            "(line 519,col 9)-(line 529,col 9)",
            "(line 531,col 9)-(line 531,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testAmbiguousPartialLongOption2()",
        "snippet": "    public void testAmbiguousPartialLongOption2() throws Exception\n    {\n        String[] args = new String[] { \"-ver\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n        \n        boolean caught = false;\n        \n        try \n        {\n            parser.parse(options, args);\n        }\n        catch (AmbiguousOptionException e) \n        {\n            caught = true;\n            assertEquals(\"Partial option\", \"-ver\", e.getOption());\n            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n        }\n        \n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 534,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 536,col 9)-(line 536,col 48)",
            "(line 538,col 9)-(line 538,col 40)",
            "(line 539,col 9)-(line 539,col 73)",
            "(line 540,col 9)-(line 540,col 73)",
            "(line 542,col 9)-(line 542,col 31)",
            "(line 544,col 9)-(line 554,col 9)",
            "(line 556,col 9)-(line 556,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testAmbiguousPartialLongOption3()",
        "snippet": "    public void testAmbiguousPartialLongOption3() throws Exception\n    {\n        String[] args = new String[] { \"--ver=1\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n        \n        boolean caught = false;\n        \n        try \n        {\n            parser.parse(options, args);\n        }\n        catch (AmbiguousOptionException e) \n        {\n            caught = true;\n            assertEquals(\"Partial option\", \"--ver\", e.getOption());\n            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n        }\n        \n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 559,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 561,col 9)-(line 561,col 51)",
            "(line 563,col 9)-(line 563,col 40)",
            "(line 564,col 9)-(line 564,col 73)",
            "(line 565,col 9)-(line 565,col 90)",
            "(line 567,col 9)-(line 567,col 31)",
            "(line 569,col 9)-(line 579,col 9)",
            "(line 581,col 9)-(line 581,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testAmbiguousPartialLongOption4()",
        "snippet": "    public void testAmbiguousPartialLongOption4() throws Exception\n    {\n        String[] args = new String[] { \"-ver=1\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n        \n        boolean caught = false;\n        \n        try \n        {\n            parser.parse(options, args);\n        }\n        catch (AmbiguousOptionException e) \n        {\n            caught = true;\n            assertEquals(\"Partial option\", \"-ver\", e.getOption());\n            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n        }\n        \n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 584,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 50)",
            "(line 588,col 9)-(line 588,col 40)",
            "(line 589,col 9)-(line 589,col 73)",
            "(line 590,col 9)-(line 590,col 90)",
            "(line 592,col 9)-(line 592,col 31)",
            "(line 594,col 9)-(line 604,col 9)",
            "(line 606,col 9)-(line 606,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPartialLongOptionSingleDash()",
        "snippet": "    public void testPartialLongOptionSingleDash() throws Exception\n    {\n        String[] args = new String[] { \"-ver\" };\n        \n        Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.hasArg().create('v'));\n        \n        CommandLine cl = parser.parse(options, args);\n        \n        assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n        assertTrue(\"Confirm -v is not set\", !cl.hasOption(\"v\"));\n    }",
        "begin_line": 609,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 48)",
            "(line 613,col 9)-(line 613,col 40)",
            "(line 614,col 9)-(line 614,col 73)",
            "(line 615,col 9)-(line 615,col 62)",
            "(line 617,col 9)-(line 617,col 53)",
            "(line 619,col 9)-(line 619,col 72)",
            "(line 620,col 9)-(line 620,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testWithRequiredOption()",
        "snippet": "    public void testWithRequiredOption() throws Exception\n    {\n        String[] args = new String[] { \"-b\", \"file\" };\n        \n        Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n\n        CommandLine cl = parser.parse(options,args);\n\n        assertTrue(\"Confirm -a is NOT set\", !cl.hasOption(\"a\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\"));\n        assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 623,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 625,col 9)-(line 625,col 54)",
            "(line 627,col 9)-(line 627,col 40)",
            "(line 628,col 9)-(line 628,col 56)",
            "(line 629,col 9)-(line 629,col 96)",
            "(line 631,col 9)-(line 631,col 52)",
            "(line 633,col 9)-(line 633,col 64)",
            "(line 634,col 9)-(line 634,col 59)",
            "(line 635,col 9)-(line 635,col 79)",
            "(line 636,col 9)-(line 636,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testOptionAndRequiredOption()",
        "snippet": "    public void testOptionAndRequiredOption() throws Exception\n    {\n        String[] args = new String[] { \"-a\", \"-b\", \"file\" };\n        \n        Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n\n        CommandLine cl = parser.parse(options,args);\n\n        assertTrue(\"Confirm -a is set\", cl.hasOption(\"a\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\"));\n        assertTrue(\"Confirm NO of extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 639,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 641,col 9)-(line 641,col 60)",
            "(line 643,col 9)-(line 643,col 40)",
            "(line 644,col 9)-(line 644,col 56)",
            "(line 645,col 9)-(line 645,col 96)",
            "(line 647,col 9)-(line 647,col 52)",
            "(line 649,col 9)-(line 649,col 59)",
            "(line 650,col 9)-(line 650,col 59)",
            "(line 651,col 9)-(line 651,col 79)",
            "(line 652,col 9)-(line 652,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMissingRequiredOption()",
        "snippet": "    public void testMissingRequiredOption()\n    {\n        String[] args = new String[] { \"-a\" };\n        \n        Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n\n        try\n        {\n            parser.parse(options,args);\n            fail(\"exception should have been thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals( \"Incorrect exception message\", \"Missing required option: b\", e.getMessage() );\n            assertTrue(e.getMissingOptions().contains(\"b\"));\n        }\n        catch (ParseException e)\n        {\n            fail(\"expected to catch MissingOptionException\");\n        }\n    }",
        "begin_line": 655,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 46)",
            "(line 659,col 9)-(line 659,col 40)",
            "(line 660,col 9)-(line 660,col 56)",
            "(line 661,col 9)-(line 661,col 96)",
            "(line 663,col 9)-(line 676,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMissingRequiredOptions()",
        "snippet": "    public void testMissingRequiredOptions()\n    {\n        String[] args = new String[] { \"-a\" };\n\n        Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n        options.addOption(OptionBuilder.withLongOpt(\"cfile\").hasArg().isRequired().create('c'));\n\n        try\n        {\n            parser.parse(options,args);\n            fail(\"exception should have been thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals(\"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage());\n            assertTrue(e.getMissingOptions().contains(\"b\"));\n            assertTrue(e.getMissingOptions().contains(\"c\"));\n        }\n        catch (ParseException e)\n        {\n            fail(\"expected to catch MissingOptionException\");\n        }\n    }",
        "begin_line": 679,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 681,col 9)-(line 681,col 46)",
            "(line 683,col 9)-(line 683,col 40)",
            "(line 684,col 9)-(line 684,col 56)",
            "(line 685,col 9)-(line 685,col 96)",
            "(line 686,col 9)-(line 686,col 96)",
            "(line 688,col 9)-(line 702,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMissingRequiredGroup()",
        "snippet": "    public void testMissingRequiredGroup() throws Exception\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.create(\"a\"));\n        group.addOption(OptionBuilder.create(\"b\"));\n        group.setRequired(true);\n\n        Options options = new Options();\n        options.addOptionGroup(group);\n        options.addOption(OptionBuilder.isRequired().create(\"c\"));\n\n        try\n        {\n            parser.parse(options, new String[] { \"-c\" });\n            fail(\"MissingOptionException not thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals(1, e.getMissingOptions().size());\n            assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\n        }\n        catch (ParseException e)\n        {\n            fail(\"Expected to catch MissingOptionException\");\n        }\n    }",
        "begin_line": 705,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 707,col 9)-(line 707,col 46)",
            "(line 708,col 9)-(line 708,col 51)",
            "(line 709,col 9)-(line 709,col 51)",
            "(line 710,col 9)-(line 710,col 32)",
            "(line 712,col 9)-(line 712,col 40)",
            "(line 713,col 9)-(line 713,col 38)",
            "(line 714,col 9)-(line 714,col 66)",
            "(line 716,col 9)-(line 729,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testOptionGroup()",
        "snippet": "    public void testOptionGroup() throws Exception\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.create(\"a\"));\n        group.addOption(OptionBuilder.create(\"b\"));\n        \n        Options options = new Options();\n        options.addOptionGroup(group);\n        \n        parser.parse(options, new String[] { \"-b\" });\n        \n        assertEquals(\"selected option\", \"b\", group.getSelected());\n    }",
        "begin_line": 732,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 734,col 9)-(line 734,col 46)",
            "(line 735,col 9)-(line 735,col 51)",
            "(line 736,col 9)-(line 736,col 51)",
            "(line 738,col 9)-(line 738,col 40)",
            "(line 739,col 9)-(line 739,col 38)",
            "(line 741,col 9)-(line 741,col 53)",
            "(line 743,col 9)-(line 743,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testOptionGroupLong()",
        "snippet": "    public void testOptionGroupLong() throws Exception\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.withLongOpt(\"foo\").create());\n        group.addOption(OptionBuilder.withLongOpt(\"bar\").create());\n        \n        Options options = new Options();\n        options.addOptionGroup(group);\n        \n        CommandLine cl = parser.parse(options, new String[] { \"--bar\" });\n        \n        assertTrue(cl.hasOption(\"bar\"));\n        assertEquals(\"selected option\", \"bar\", group.getSelected());\n    }",
        "begin_line": 746,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 748,col 9)-(line 748,col 46)",
            "(line 749,col 9)-(line 749,col 67)",
            "(line 750,col 9)-(line 750,col 67)",
            "(line 752,col 9)-(line 752,col 40)",
            "(line 753,col 9)-(line 753,col 38)",
            "(line 755,col 9)-(line 755,col 73)",
            "(line 757,col 9)-(line 757,col 40)",
            "(line 758,col 9)-(line 758,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testReuseOptionsTwice()",
        "snippet": "    public void testReuseOptionsTwice() throws Exception\n    {\n        Options opts = new Options();\n\t\topts.addOption(OptionBuilder.isRequired().create('v'));\n\n        // first parsing\n        parser.parse(opts, new String[] { \"-v\" });\n\n        try\n        {\n            // second parsing, with the same Options instance and an invalid command line\n            parser.parse(opts, new String[0]);\n            fail(\"MissingOptionException not thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            // expected\n        }\n    }",
        "begin_line": 761,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 763,col 9)-(line 763,col 37)",
            "(line 764,col 3)-(line 764,col 57)",
            "(line 767,col 9)-(line 767,col 50)",
            "(line 769,col 9)-(line 778,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testBursting()",
        "snippet": "    public void testBursting() throws Exception\n    {\n        String[] args = new String[] { \"-acbtoast\", \"foo\", \"bar\" };\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n    }",
        "begin_line": 781,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 783,col 9)-(line 783,col 67)",
            "(line 785,col 9)-(line 785,col 53)",
            "(line 787,col 9)-(line 787,col 61)",
            "(line 788,col 9)-(line 788,col 61)",
            "(line 789,col 9)-(line 789,col 61)",
            "(line 790,col 9)-(line 790,col 82)",
            "(line 791,col 9)-(line 791,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnrecognizedOptionWithBursting()",
        "snippet": "    public void testUnrecognizedOptionWithBursting() throws Exception\n    {\n        String[] args = new String[] { \"-adbtoast\", \"foo\", \"bar\" };\n\n        try\n        {\n            parser.parse(options, args);\n            fail(\"UnrecognizedOptionException wasn't thrown\");\n        }\n        catch (UnrecognizedOptionException e)\n        {\n            assertEquals(\"-adbtoast\", e.getOption());\n        }\n    }",
        "begin_line": 794,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 67)",
            "(line 798,col 9)-(line 806,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testMissingArgWithBursting()",
        "snippet": "    public void testMissingArgWithBursting() throws Exception\n    {\n        String[] args = new String[] { \"-acb\" };\n\n        boolean caught = false;\n\n        try\n        {\n            parser.parse(options, args);\n        }\n        catch (MissingArgumentException e)\n        {\n            caught = true;\n            assertEquals(\"option missing an argument\", \"b\", e.getOption().getOpt());\n        }\n\n        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n    }",
        "begin_line": 809,
        "end_line": 826,
        "comment": "",
        "child_ranges": [
            "(line 811,col 9)-(line 811,col 48)",
            "(line 813,col 9)-(line 813,col 31)",
            "(line 815,col 9)-(line 823,col 9)",
            "(line 825,col 9)-(line 825,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testStopBursting()",
        "snippet": "    public void testStopBursting() throws Exception\n    {\n        String[] args = new String[] { \"-azc\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n        assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n\n        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n        assertTrue(cl.getArgList().contains(\"zc\"));\n    }",
        "begin_line": 828,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 830,col 9)-(line 830,col 48)",
            "(line 832,col 9)-(line 832,col 59)",
            "(line 833,col 9)-(line 833,col 61)",
            "(line 834,col 9)-(line 834,col 66)",
            "(line 836,col 9)-(line 836,col 100)",
            "(line 837,col 9)-(line 837,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testStopBursting2()",
        "snippet": "    public void testStopBursting2() throws Exception\n    {\n        String[] args = new String[] { \"-c\", \"foobar\", \"-btoast\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(\"Confirm -c is set\", cl.hasOption(\"c\"));\n        assertTrue(\"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n\n        cl = parser.parse(options, cl.getArgs());\n\n        assertTrue(\"Confirm -c is not set\", !cl.hasOption(\"c\"));\n        assertTrue(\"Confirm -b is set\", cl.hasOption(\"b\"));\n        assertTrue(\"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\"));\n        assertTrue(\"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n        assertTrue(\"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\"));\n    }",
        "begin_line": 840,
        "end_line": 855,
        "comment": "",
        "child_ranges": [
            "(line 842,col 9)-(line 842,col 67)",
            "(line 844,col 9)-(line 844,col 59)",
            "(line 845,col 9)-(line 845,col 59)",
            "(line 846,col 9)-(line 846,col 100)",
            "(line 848,col 9)-(line 848,col 49)",
            "(line 850,col 9)-(line 850,col 64)",
            "(line 851,col 9)-(line 851,col 59)",
            "(line 852,col 9)-(line 852,col 80)",
            "(line 853,col 9)-(line 853,col 99)",
            "(line 854,col 9)-(line 854,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testUnlimitedArgs()",
        "snippet": "    public void testUnlimitedArgs() throws Exception\n    {\n        String[] args = new String[]{\"-e\", \"one\", \"two\", \"-f\", \"alpha\"};\n\n        Options options = new Options();\n        options.addOption(OptionBuilder.hasArgs().create(\"e\"));\n        options.addOption(OptionBuilder.hasArgs().create(\"f\"));\n\n        CommandLine cl = parser.parse(options, args);\n\n        assertTrue(\"Confirm -e is set\", cl.hasOption(\"e\"));\n        assertEquals(\"number of arg for -e\", 2, cl.getOptionValues(\"e\").length);\n        assertTrue(\"Confirm -f is set\", cl.hasOption(\"f\"));\n        assertEquals(\"number of arg for -f\", 1, cl.getOptionValues(\"f\").length);\n    }",
        "begin_line": 857,
        "end_line": 871,
        "comment": "",
        "child_ranges": [
            "(line 859,col 9)-(line 859,col 72)",
            "(line 861,col 9)-(line 861,col 40)",
            "(line 862,col 9)-(line 862,col 63)",
            "(line 863,col 9)-(line 863,col 63)",
            "(line 865,col 9)-(line 865,col 53)",
            "(line 867,col 9)-(line 867,col 59)",
            "(line 868,col 9)-(line 868,col 80)",
            "(line 869,col 9)-(line 869,col 59)",
            "(line 870,col 9)-(line 870,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.parse(org.apache.commons.cli.CommandLineParser, org.apache.commons.cli.Options, java.lang.String[], java.util.Properties)",
        "snippet": "    private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\n        if (parser instanceof Parser) {\n            return ((Parser) parser).parse(opts, args, properties);\n        } else if (parser instanceof DefaultParser) {\n            return ((DefaultParser) parser).parse(opts, args, properties);\n        } else {\n            throw new UnsupportedOperationException(\"Default options not supported by this parser\");\n        }\n    }",
        "begin_line": 873,
        "end_line": 881,
        "comment": "",
        "child_ranges": [
            "(line 874,col 9)-(line 880,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOptionSingularValue()",
        "snippet": "    public void testPropertyOptionSingularValue() throws Exception\n    {\n        Options opts = new Options();\n        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());        \n        \n        Properties properties = new Properties();\n        properties.setProperty( \"hide\", \"seek\" );\n\n        CommandLine cmd = parse(parser, opts, null, properties);\n        assertTrue( cmd.hasOption(\"hide\") );\n        assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n        assertTrue( !cmd.hasOption(\"fake\") );\n    }",
        "begin_line": 883,
        "end_line": 895,
        "comment": "",
        "child_ranges": [
            "(line 885,col 9)-(line 885,col 37)",
            "(line 886,col 9)-(line 886,col 86)",
            "(line 888,col 9)-(line 888,col 49)",
            "(line 889,col 9)-(line 889,col 49)",
            "(line 891,col 9)-(line 891,col 64)",
            "(line 892,col 9)-(line 892,col 44)",
            "(line 893,col 9)-(line 893,col 59)",
            "(line 894,col 9)-(line 894,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOptionFlags()",
        "snippet": "    public void testPropertyOptionFlags() throws Exception\n    {\n        Options opts = new Options();\n        opts.addOption(\"a\", false, \"toggle -a\");\n        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n        \n        Properties properties = new Properties();\n        properties.setProperty(\"a\", \"true\");\n        properties.setProperty(\"c\", \"yes\");\n        properties.setProperty(\"e\", \"1\");\n        \n        CommandLine cmd = parse(parser, opts, null, properties);\n        assertTrue(cmd.hasOption(\"a\"));\n        assertTrue(cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\"));\n        \n        \n        properties = new Properties();\n        properties.setProperty(\"a\", \"false\");\n        properties.setProperty(\"c\", \"no\");\n        properties.setProperty(\"e\", \"0\");\n        \n        cmd = parse(parser, opts, null, properties);\n        assertTrue(!cmd.hasOption(\"a\"));\n        assertTrue(!cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\")); // this option accepts an argument\n        \n        \n        properties = new Properties();\n        properties.setProperty(\"a\", \"TRUE\");\n        properties.setProperty(\"c\", \"nO\");\n        properties.setProperty(\"e\", \"TrUe\");\n        \n        cmd = parse(parser, opts, null, properties);\n        assertTrue(cmd.hasOption(\"a\"));\n        assertTrue(!cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\"));\n        \n        \n        properties = new Properties();\n        properties.setProperty(\"a\", \"just a string\");\n        properties.setProperty(\"e\", \"\");\n        \n        cmd = parse(parser, opts, null, properties);\n        assertTrue(!cmd.hasOption(\"a\"));\n        assertTrue(!cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\"));\n        \n        \n        properties = new Properties();\n        properties.setProperty(\"a\", \"0\");\n        properties.setProperty(\"c\", \"1\");\n        \n        cmd = parse(parser, opts, null, properties);\n        assertTrue(!cmd.hasOption(\"a\"));\n        assertTrue(cmd.hasOption(\"c\"));\n    } ",
        "begin_line": 897,
        "end_line": 954,
        "comment": "",
        "child_ranges": [
            "(line 899,col 9)-(line 899,col 37)",
            "(line 900,col 9)-(line 900,col 48)",
            "(line 901,col 9)-(line 901,col 53)",
            "(line 902,col 9)-(line 902,col 67)",
            "(line 904,col 9)-(line 904,col 49)",
            "(line 905,col 9)-(line 905,col 44)",
            "(line 906,col 9)-(line 906,col 43)",
            "(line 907,col 9)-(line 907,col 41)",
            "(line 909,col 9)-(line 909,col 64)",
            "(line 910,col 9)-(line 910,col 39)",
            "(line 911,col 9)-(line 911,col 39)",
            "(line 912,col 9)-(line 912,col 39)",
            "(line 915,col 9)-(line 915,col 38)",
            "(line 916,col 9)-(line 916,col 45)",
            "(line 917,col 9)-(line 917,col 42)",
            "(line 918,col 9)-(line 918,col 41)",
            "(line 920,col 9)-(line 920,col 52)",
            "(line 921,col 9)-(line 921,col 40)",
            "(line 922,col 9)-(line 922,col 40)",
            "(line 923,col 9)-(line 923,col 39)",
            "(line 926,col 9)-(line 926,col 38)",
            "(line 927,col 9)-(line 927,col 44)",
            "(line 928,col 9)-(line 928,col 42)",
            "(line 929,col 9)-(line 929,col 44)",
            "(line 931,col 9)-(line 931,col 52)",
            "(line 932,col 9)-(line 932,col 39)",
            "(line 933,col 9)-(line 933,col 40)",
            "(line 934,col 9)-(line 934,col 39)",
            "(line 937,col 9)-(line 937,col 38)",
            "(line 938,col 9)-(line 938,col 53)",
            "(line 939,col 9)-(line 939,col 40)",
            "(line 941,col 9)-(line 941,col 52)",
            "(line 942,col 9)-(line 942,col 40)",
            "(line 943,col 9)-(line 943,col 40)",
            "(line 944,col 9)-(line 944,col 39)",
            "(line 947,col 9)-(line 947,col 38)",
            "(line 948,col 9)-(line 948,col 41)",
            "(line 949,col 9)-(line 949,col 41)",
            "(line 951,col 9)-(line 951,col 52)",
            "(line 952,col 9)-(line 952,col 40)",
            "(line 953,col 9)-(line 953,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOptionMultipleValues()",
        "snippet": "    public void testPropertyOptionMultipleValues() throws Exception\n    {\n        Options opts = new Options();\n        opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\n        \n        Properties properties = new Properties();\n        properties.setProperty( \"k\", \"one,two\" );\n\n        String[] values = new String[] { \"one\", \"two\" };\n\n        CommandLine cmd = parse(parser, opts, null, properties);\n        assertTrue( cmd.hasOption(\"k\") );\n        assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n    }",
        "begin_line": 956,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 958,col 9)-(line 958,col 37)",
            "(line 959,col 9)-(line 959,col 84)",
            "(line 961,col 9)-(line 961,col 49)",
            "(line 962,col 9)-(line 962,col 49)",
            "(line 964,col 9)-(line 964,col 56)",
            "(line 966,col 9)-(line 966,col 64)",
            "(line 967,col 9)-(line 967,col 41)",
            "(line 968,col 9)-(line 968,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOverrideValues()",
        "snippet": "    public void testPropertyOverrideValues() throws Exception\n    {\n        Options opts = new Options();\n        opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n        opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n        \n        String[] args = new String[] { \"-j\", \"found\", \"-i\", \"ink\" };\n\n        Properties properties = new Properties();\n        properties.setProperty( \"j\", \"seek\" );\n\n        CommandLine cmd = parse(parser, opts, args, properties);\n        assertTrue( cmd.hasOption(\"j\") );\n        assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n        assertTrue( cmd.hasOption(\"i\") );\n        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n        assertTrue( !cmd.hasOption(\"fake\") );\n    }",
        "begin_line": 971,
        "end_line": 988,
        "comment": "",
        "child_ranges": [
            "(line 973,col 9)-(line 973,col 37)",
            "(line 974,col 9)-(line 974,col 69)",
            "(line 975,col 9)-(line 975,col 68)",
            "(line 977,col 9)-(line 977,col 68)",
            "(line 979,col 9)-(line 979,col 49)",
            "(line 980,col 9)-(line 980,col 46)",
            "(line 982,col 9)-(line 982,col 64)",
            "(line 983,col 9)-(line 983,col 41)",
            "(line 984,col 9)-(line 984,col 57)",
            "(line 985,col 9)-(line 985,col 41)",
            "(line 986,col 9)-(line 986,col 55)",
            "(line 987,col 9)-(line 987,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOptionRequired()",
        "snippet": "    public void testPropertyOptionRequired() throws Exception\n    {\n        Options opts = new Options();\n        opts.addOption(OptionBuilder.isRequired().create(\"f\"));\n        \n        Properties properties = new Properties();\n        properties.setProperty(\"f\", \"true\");\n        \n        CommandLine cmd = parse(parser, opts, null, properties);\n        assertTrue(cmd.hasOption(\"f\"));\n    }",
        "begin_line": 990,
        "end_line": 1000,
        "comment": "",
        "child_ranges": [
            "(line 992,col 9)-(line 992,col 37)",
            "(line 993,col 9)-(line 993,col 63)",
            "(line 995,col 9)-(line 995,col 49)",
            "(line 996,col 9)-(line 996,col 44)",
            "(line 998,col 9)-(line 998,col 64)",
            "(line 999,col 9)-(line 999,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOptionUnexpected()",
        "snippet": "    public void testPropertyOptionUnexpected() throws Exception\n    {\n        Options opts = new Options();\n        \n        Properties properties = new Properties();\n        properties.setProperty(\"f\", \"true\");\n        \n        try {\n            parse(parser, opts, null, properties);\n            fail(\"UnrecognizedOptionException expected\");\n        } catch (UnrecognizedOptionException e) {\n            // expected\n        }\n    }",
        "begin_line": 1002,
        "end_line": 1015,
        "comment": "",
        "child_ranges": [
            "(line 1004,col 9)-(line 1004,col 37)",
            "(line 1006,col 9)-(line 1006,col 49)",
            "(line 1007,col 9)-(line 1007,col 44)",
            "(line 1009,col 9)-(line 1014,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ParserTestCase",
        "child_classes": [
            "org.apache.commons.cli.PosixParserTest",
            "org.apache.commons.cli.BasicParserTest",
            "org.apache.commons.cli.GnuParserTest",
            "org.apache.commons.cli.DefaultParserTest"
        ],
        "src_path": "src/test/java/org/apache/commons/cli/ParserTestCase.java",
        "signature": "org.apache.commons.cli.ParserTestCase.testPropertyOptionGroup()",
        "snippet": "    public void testPropertyOptionGroup() throws Exception\n    {\n        Options opts = new Options();\n        \n        OptionGroup group1 = new OptionGroup();\n        group1.addOption(new Option(\"a\", null));\n        group1.addOption(new Option(\"b\", null));\n        opts.addOptionGroup(group1);\n        \n        OptionGroup group2 = new OptionGroup();\n        group2.addOption(new Option(\"x\", null));\n        group2.addOption(new Option(\"y\", null));\n        opts.addOptionGroup(group2);\n        \n        String[] args = new String[] { \"-a\" };\n        \n        Properties properties = new Properties();\n        properties.put(\"b\", \"true\");\n        properties.put(\"x\", \"true\");\n        \n        CommandLine cmd = parse(parser, opts, args, properties);\n        \n        assertTrue(cmd.hasOption(\"a\"));\n        assertFalse(cmd.hasOption(\"b\"));\n        assertTrue(cmd.hasOption(\"x\"));\n        assertFalse(cmd.hasOption(\"y\"));\n    }",
        "begin_line": 1017,
        "end_line": 1043,
        "comment": "",
        "child_ranges": [
            "(line 1019,col 9)-(line 1019,col 37)",
            "(line 1021,col 9)-(line 1021,col 47)",
            "(line 1022,col 9)-(line 1022,col 48)",
            "(line 1023,col 9)-(line 1023,col 48)",
            "(line 1024,col 9)-(line 1024,col 36)",
            "(line 1026,col 9)-(line 1026,col 47)",
            "(line 1027,col 9)-(line 1027,col 48)",
            "(line 1028,col 9)-(line 1028,col 48)",
            "(line 1029,col 9)-(line 1029,col 36)",
            "(line 1031,col 9)-(line 1031,col 46)",
            "(line 1033,col 9)-(line 1033,col 49)",
            "(line 1034,col 9)-(line 1034,col 36)",
            "(line 1035,col 9)-(line 1035,col 36)",
            "(line 1037,col 9)-(line 1037,col 64)",
            "(line 1039,col 9)-(line 1039,col 39)",
            "(line 1040,col 9)-(line 1040,col 40)",
            "(line 1041,col 9)-(line 1041,col 39)",
            "(line 1042,col 9)-(line 1042,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern()",
        "snippet": "    public void testSimplePattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/m*z#\");\n        String[] args = new String[] {\"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://commons.apache.org\", \"-z\", \"Thu Jun 06 17:48:57 EDT 2002\", \"-m\", \"test*\"};\n\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, args);\n\n        assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n        assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n        assertEquals(\"object flag b\", new Vector(), line.getOptionObject(\"b\"));\n        assertTrue(\"boolean true flag c\", line.hasOption(\"c\"));\n        assertFalse(\"boolean false flag d\", line.hasOption(\"d\"));\n        assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject(\"e\"));\n        assertEquals(\"class flag f\", Calendar.class, line.getOptionObject(\"f\"));\n        assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n        assertEquals(\"url flag t\", new URL(\"http://commons.apache.org\"), line.getOptionObject(\"t\"));\n\n        // tests the char methods of CommandLine that delegate to the String methods\n        assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n        assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n        assertEquals(\"object flag b\", new Vector(), line.getOptionObject('b'));\n        assertTrue(\"boolean true flag c\", line.hasOption('c'));\n        assertFalse(\"boolean false flag d\", line.hasOption('d'));\n        assertEquals(\"file flag e\", new File(\"build.xml\"), line.getOptionObject('e'));\n        assertEquals(\"class flag f\", Calendar.class, line.getOptionObject('f'));\n        assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\n        assertEquals(\"url flag t\", new URL(\"http://commons.apache.org\"), line.getOptionObject('t'));\n\n        // FILES NOT SUPPORTED YET\n        try {\n            assertEquals(\"files flag m\", new File[0], line.getOptionObject('m'));\n            fail(\"Multiple files are not supported yet, should have failed\");\n        } catch(UnsupportedOperationException uoe) {\n            // expected\n        }\n\n        // DATES NOT SUPPORTED YET\n        try {\n            assertEquals(\"date flag z\", new Date(1023400137276L), line.getOptionObject('z'));\n            fail(\"Date is not supported yet, should have failed\");\n        } catch(UnsupportedOperationException uoe) {\n            // expected\n        }\n    }",
        "begin_line": 35,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 82)",
            "(line 38,col 9)-(line 38,col 231)",
            "(line 40,col 9)-(line 40,col 53)",
            "(line 41,col 9)-(line 41,col 55)",
            "(line 43,col 9)-(line 43,col 64)",
            "(line 44,col 9)-(line 44,col 72)",
            "(line 45,col 9)-(line 45,col 79)",
            "(line 46,col 9)-(line 46,col 63)",
            "(line 47,col 9)-(line 47,col 65)",
            "(line 48,col 9)-(line 48,col 86)",
            "(line 49,col 9)-(line 49,col 80)",
            "(line 50,col 9)-(line 50,col 82)",
            "(line 51,col 9)-(line 51,col 100)",
            "(line 54,col 9)-(line 54,col 64)",
            "(line 55,col 9)-(line 55,col 72)",
            "(line 56,col 9)-(line 56,col 79)",
            "(line 57,col 9)-(line 57,col 63)",
            "(line 58,col 9)-(line 58,col 65)",
            "(line 59,col 9)-(line 59,col 86)",
            "(line 60,col 9)-(line 60,col 80)",
            "(line 61,col 9)-(line 61,col 82)",
            "(line 62,col 9)-(line 62,col 100)",
            "(line 65,col 9)-(line 70,col 9)",
            "(line 73,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testEmptyPattern()",
        "snippet": "    public void testEmptyPattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"\");\n        assertTrue(options.getOptions().isEmpty());\n    }",
        "begin_line": 81,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 64)",
            "(line 84,col 9)-(line 84,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testUntypedPattern()",
        "snippet": "    public void testUntypedPattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"abc\");\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-abc\" });\n\n        assertTrue(line.hasOption('a'));\n        assertNull(\"value a\", line.getOptionObject('a'));\n        assertTrue(line.hasOption('b'));\n        assertNull(\"value b\", line.getOptionObject('b'));\n        assertTrue(line.hasOption('c'));\n        assertNull(\"value c\", line.getOptionObject('c'));\n    }",
        "begin_line": 87,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 67)",
            "(line 90,col 9)-(line 90,col 53)",
            "(line 91,col 9)-(line 91,col 74)",
            "(line 93,col 9)-(line 93,col 40)",
            "(line 94,col 9)-(line 94,col 57)",
            "(line 95,col 9)-(line 95,col 40)",
            "(line 96,col 9)-(line 96,col 57)",
            "(line 97,col 9)-(line 97,col 40)",
            "(line 98,col 9)-(line 98,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testNumberPattern()",
        "snippet": "    public void testNumberPattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"n%d%x%\");\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\" });\n\n        assertEquals(\"n object class\", Long.class, line.getOptionObject(\"n\").getClass());\n        assertEquals(\"n value\", new Long(1), line.getOptionObject(\"n\"));\n\n        assertEquals(\"d object class\", Double.class, line.getOptionObject(\"d\").getClass());\n        assertEquals(\"d value\", new Double(2.1), line.getOptionObject(\"d\"));\n\n        assertNull(\"x object\", line.getOptionObject(\"x\"));\n    }",
        "begin_line": 101,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 70)",
            "(line 104,col 9)-(line 104,col 53)",
            "(line 105,col 9)-(line 105,col 103)",
            "(line 107,col 9)-(line 107,col 89)",
            "(line 108,col 9)-(line 108,col 72)",
            "(line 110,col 9)-(line 110,col 91)",
            "(line 111,col 9)-(line 111,col 76)",
            "(line 113,col 9)-(line 113,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testClassPattern()",
        "snippet": "    public void testClassPattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"c+d+\");\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-c\", \"java.util.Calendar\", \"-d\", \"System.DateTime\" });\n\n        assertEquals(\"c value\", Calendar.class, line.getOptionObject(\"c\"));\n        assertNull(\"d value\", line.getOptionObject(\"d\"));\n    }",
        "begin_line": 116,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 68)",
            "(line 119,col 9)-(line 119,col 53)",
            "(line 120,col 9)-(line 120,col 119)",
            "(line 122,col 9)-(line 122,col 75)",
            "(line 123,col 9)-(line 123,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testObjectPattern()",
        "snippet": "    public void testObjectPattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"o@i@n@\");\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-o\", \"java.lang.String\", \"-i\", \"java.util.Calendar\", \"-n\", \"System.DateTime\" });\n\n        assertEquals(\"o value\", \"\", line.getOptionObject(\"o\"));\n        assertNull(\"i value\", line.getOptionObject(\"i\"));\n        assertNull(\"n value\", line.getOptionObject(\"n\"));\n    }",
        "begin_line": 126,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 70)",
            "(line 129,col 9)-(line 129,col 53)",
            "(line 130,col 9)-(line 130,col 145)",
            "(line 132,col 9)-(line 132,col 63)",
            "(line 133,col 9)-(line 133,col 57)",
            "(line 134,col 9)-(line 134,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testURLPattern()",
        "snippet": "    public void testURLPattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"u/v/\");\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-u\", \"http://commons.apache.org\", \"-v\", \"foo://commons.apache.org\" });\n\n        assertEquals(\"u value\", new URL(\"http://commons.apache.org\"), line.getOptionObject(\"u\"));\n        assertNull(\"v value\", line.getOptionObject(\"v\"));\n    }",
        "begin_line": 137,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 68)",
            "(line 140,col 9)-(line 140,col 53)",
            "(line 141,col 9)-(line 141,col 135)",
            "(line 143,col 9)-(line 143,col 97)",
            "(line 144,col 9)-(line 144,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern()",
        "snippet": "    public void testExistingFilePattern() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"f<\");\n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options, new String[] { \"-f\", \"test.properties\" });\n\n        assertEquals(\"f value\", new File(\"test.properties\"), line.getOptionObject(\"f\"));\n\n        // todo test if an error is returned if the file doesn't exists (when it's implemented)\n    }",
        "begin_line": 147,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 66)",
            "(line 150,col 9)-(line 150,col 53)",
            "(line 151,col 9)-(line 151,col 91)",
            "(line 153,col 9)-(line 153,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.PatternOptionBuilderTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "signature": "org.apache.commons.cli.PatternOptionBuilderTest.testRequiredOption()",
        "snippet": "    public void testRequiredOption() throws Exception\n    {\n        Options options = PatternOptionBuilder.parsePattern(\"!n%m%\");\n        CommandLineParser parser = new PosixParser();\n\n        try\n        {\n            parser.parse(options, new String[]{\"\"});\n            fail(\"MissingOptionException wasn't thrown\");\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals(1, e.getMissingOptions().size());\n            assertTrue(e.getMissingOptions().contains(\"n\"));\n        }\n    }",
        "begin_line": 158,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 69)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 163,col 9)-(line 172,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        Option file = new Option( \"f\", \"file\", false, \"file to process\" );\n        Option dir = new Option( \"d\", \"directory\", false, \"directory to process\" );\n        OptionGroup group = new OptionGroup();\n        group.addOption( file );\n        group.addOption( dir );\n        _options = new Options().addOptionGroup( group );\n\n        Option section = new Option( \"s\", \"section\", false, \"section to process\" );\n        Option chapter = new Option( \"c\", \"chapter\", false, \"chapter to process\" );\n        OptionGroup group2 = new OptionGroup();\n        group2.addOption( section );\n        group2.addOption( chapter );\n\n        _options.addOptionGroup( group2 );\n\n        Option importOpt = new Option( null, \"import\", false, \"section to process\" );\n        Option exportOpt = new Option( null, \"export\", false, \"chapter to process\" );\n        OptionGroup group3 = new OptionGroup();\n        group3.addOption( importOpt );\n        group3.addOption( exportOpt );\n        _options.addOptionGroup( group3 );\n\n        _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n    }",
        "begin_line": 33,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 74)",
            "(line 36,col 9)-(line 36,col 83)",
            "(line 37,col 9)-(line 37,col 46)",
            "(line 38,col 9)-(line 38,col 32)",
            "(line 39,col 9)-(line 39,col 31)",
            "(line 40,col 9)-(line 40,col 57)",
            "(line 42,col 9)-(line 42,col 83)",
            "(line 43,col 9)-(line 43,col 83)",
            "(line 44,col 9)-(line 44,col 47)",
            "(line 45,col 9)-(line 45,col 36)",
            "(line 46,col 9)-(line 46,col 36)",
            "(line 48,col 9)-(line 48,col 42)",
            "(line 50,col 9)-(line 50,col 85)",
            "(line 51,col 9)-(line 51,col 85)",
            "(line 52,col 9)-(line 52,col 47)",
            "(line 53,col 9)-(line 53,col 38)",
            "(line 54,col 9)-(line 54,col 38)",
            "(line 55,col 9)-(line 55,col 42)",
            "(line 57,col 9)-(line 57,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testSingleOptionFromGroup()",
        "snippet": "    public void testSingleOptionFromGroup() throws Exception\n    {\n        String[] args = new String[] { \"-f\" };\n\n        CommandLine cl = parser.parse( _options, args);\n\n        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 60,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 46)",
            "(line 64,col 9)-(line 64,col 55)",
            "(line 66,col 9)-(line 66,col 66)",
            "(line 67,col 9)-(line 67,col 61)",
            "(line 68,col 9)-(line 68,col 66)",
            "(line 69,col 9)-(line 69,col 66)",
            "(line 70,col 9)-(line 70,col 66)",
            "(line 71,col 9)-(line 71,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testSingleOption()",
        "snippet": "    public void testSingleOption() throws Exception\n    {\n        String[] args = new String[] { \"-r\" };\n\n        CommandLine cl = parser.parse( _options, args);\n\n        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 46)",
            "(line 78,col 9)-(line 78,col 55)",
            "(line 80,col 9)-(line 80,col 61)",
            "(line 81,col 9)-(line 81,col 66)",
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoValidOptions()",
        "snippet": "    public void testTwoValidOptions() throws Exception\n    {\n        String[] args = new String[] { \"-r\", \"-f\" };\n\n        CommandLine cl = parser.parse( _options, args);\n\n        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 88,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 52)",
            "(line 92,col 9)-(line 92,col 55)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 61)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 99,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testSingleLongOption()",
        "snippet": "    public void testSingleLongOption() throws Exception\n    {\n        String[] args = new String[] { \"--file\" };\n\n        CommandLine cl = parser.parse( _options, args);\n\n        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 102,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 50)",
            "(line 106,col 9)-(line 106,col 55)",
            "(line 108,col 9)-(line 108,col 66)",
            "(line 109,col 9)-(line 109,col 61)",
            "(line 110,col 9)-(line 110,col 66)",
            "(line 111,col 9)-(line 111,col 66)",
            "(line 112,col 9)-(line 112,col 66)",
            "(line 113,col 9)-(line 113,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoValidLongOptions()",
        "snippet": "    public void testTwoValidLongOptions() throws Exception\n    {\n        String[] args = new String[] { \"--revision\", \"--file\" };\n\n        CommandLine cl = parser.parse( _options, args);\n\n        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 116,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 64)",
            "(line 120,col 9)-(line 120,col 55)",
            "(line 122,col 9)-(line 122,col 61)",
            "(line 123,col 9)-(line 123,col 61)",
            "(line 124,col 9)-(line 124,col 66)",
            "(line 125,col 9)-(line 125,col 66)",
            "(line 126,col 9)-(line 126,col 66)",
            "(line 127,col 9)-(line 127,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testNoOptionsExtraArgs()",
        "snippet": "    public void testNoOptionsExtraArgs() throws Exception\n    {\n        String[] args = new String[] { \"arg1\", \"arg2\" };\n\n        CommandLine cl = parser.parse( _options, args);\n\n        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n    }",
        "begin_line": 130,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 56)",
            "(line 134,col 9)-(line 134,col 55)",
            "(line 136,col 9)-(line 136,col 66)",
            "(line 137,col 9)-(line 137,col 66)",
            "(line 138,col 9)-(line 138,col 66)",
            "(line 139,col 9)-(line 139,col 66)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroup()",
        "snippet": "    public void testTwoOptionsFromGroup() throws Exception\n    {\n        String[] args = new String[] { \"-f\", \"-d\" };\n\n        try\n        {\n            parser.parse( _options, args);\n            fail( \"two arguments from group not allowed\" );\n        }\n        catch (AlreadySelectedException e)\n        {\n            assertNotNull(\"null option group\", e.getOptionGroup());\n            assertEquals(\"selected option\", \"f\", e.getOptionGroup().getSelected());\n            assertEquals(\"option\", \"d\", e.getOption().getOpt());\n        }\n    }",
        "begin_line": 144,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 52)",
            "(line 148,col 9)-(line 158,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoLongOptionsFromGroup()",
        "snippet": "    public void testTwoLongOptionsFromGroup() throws Exception\n    {\n        String[] args = new String[] { \"--file\", \"--directory\" };\n\n        try\n        {\n            parser.parse(_options, args);\n            fail( \"two arguments from group not allowed\" );\n        }\n        catch (AlreadySelectedException e)\n        {\n            assertNotNull(\"null option group\", e.getOptionGroup());\n            assertEquals(\"selected option\", \"f\", e.getOptionGroup().getSelected());\n            assertEquals(\"option\", \"d\", e.getOption().getOpt());\n        }\n    }",
        "begin_line": 161,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 65)",
            "(line 165,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromDifferentGroup()",
        "snippet": "    public void testTwoOptionsFromDifferentGroup() throws Exception\n    {\n        String[] args = new String[] { \"-f\", \"-s\" };\n\n        CommandLine cl = parser.parse( _options, args);\n        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n        assertTrue( \"Confirm -s is set\", cl.hasOption(\"s\") );\n        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n        assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n    }",
        "begin_line": 178,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 52)",
            "(line 182,col 9)-(line 182,col 55)",
            "(line 183,col 9)-(line 183,col 66)",
            "(line 184,col 9)-(line 184,col 61)",
            "(line 185,col 9)-(line 185,col 66)",
            "(line 186,col 9)-(line 186,col 61)",
            "(line 187,col 9)-(line 187,col 66)",
            "(line 188,col 9)-(line 188,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroupWithProperties()",
        "snippet": "    public void testTwoOptionsFromGroupWithProperties() throws Exception\n    {\n        String[] args = new String[] { \"-f\" };\n        \n        Properties properties = new Properties();\n        properties.put(\"d\", \"true\");\n        \n        CommandLine cl = parser.parse( _options, args, properties);\n        assertTrue(cl.hasOption(\"f\"));\n        assertTrue(!cl.hasOption(\"d\"));\n    }",
        "begin_line": 191,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 46)",
            "(line 195,col 9)-(line 195,col 49)",
            "(line 196,col 9)-(line 196,col 36)",
            "(line 198,col 9)-(line 198,col 67)",
            "(line 199,col 9)-(line 199,col 38)",
            "(line 200,col 9)-(line 200,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testValidLongOnlyOptions()",
        "snippet": "    public void testValidLongOnlyOptions() throws Exception\n    {\n        CommandLine cl1 = parser.parse(_options, new String[]{\"--export\"});\n        assertTrue(\"Confirm --export is set\", cl1.hasOption(\"export\"));\n\n        CommandLine cl2 = parser.parse(_options, new String[]{\"--import\"});\n        assertTrue(\"Confirm --import is set\", cl2.hasOption(\"import\"));\n    }",
        "begin_line": 203,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 75)",
            "(line 206,col 9)-(line 206,col 71)",
            "(line 208,col 9)-(line 208,col 75)",
            "(line 209,col 9)-(line 209,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testToString()",
        "snippet": "    public void testToString()\n    {\n        OptionGroup group1 = new OptionGroup();\n        group1.addOption(new Option(null, \"foo\", false, \"Foo\"));\n        group1.addOption(new Option(null, \"bar\", false, \"Bar\"));\n\n        if (!\"[--bar Bar, --foo Foo]\".equals(group1.toString())) {\n            assertEquals(\"[--foo Foo, --bar Bar]\", group1.toString());\n        }\n\n        OptionGroup group2 = new OptionGroup();\n        group2.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\n        group2.addOption(new Option(\"b\", \"bar\", false, \"Bar\"));\n\n        if (!\"[-b Bar, -f Foo]\".equals(group2.toString())) {\n            assertEquals(\"[-f Foo, -b Bar]\", group2.toString());\n        }\n    }",
        "begin_line": 212,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 47)",
            "(line 215,col 9)-(line 215,col 64)",
            "(line 216,col 9)-(line 216,col 64)",
            "(line 218,col 9)-(line 220,col 9)",
            "(line 222,col 9)-(line 222,col 47)",
            "(line 223,col 9)-(line 223,col 63)",
            "(line 224,col 9)-(line 224,col 63)",
            "(line 226,col 9)-(line 228,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.OptionGroupTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java",
        "signature": "org.apache.commons.cli.OptionGroupTest.testGetNames()",
        "snippet": "    public void testGetNames()\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.create('a'));\n        group.addOption(OptionBuilder.create('b'));\n\n        assertNotNull(\"null names\", group.getNames());\n        assertEquals(2, group.getNames().size());\n        assertTrue(group.getNames().contains(\"a\"));\n        assertTrue(group.getNames().contains(\"b\"));\n    }",
        "begin_line": 231,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 51)",
            "(line 235,col 9)-(line 235,col 51)",
            "(line 237,col 9)-(line 237,col 54)",
            "(line 238,col 9)-(line 238,col 49)",
            "(line 239,col 9)-(line 239,col 51)",
            "(line 240,col 9)-(line 240,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testFindWrapPos()",
        "snippet": "    public void testFindWrapPos() throws Exception\n    {\n        HelpFormatter hf = new HelpFormatter();\n\n        String text = \"This is a test.\";\n        //text width should be max 8; the wrap position is 7\n        assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n        //starting from 8 must give -1 - the wrap pos is after end\n        assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n        //if there is no a good position before width to make a wrapping look for the next one\n        text = \"aaaa aa\";\n        assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n    }",
        "begin_line": 38,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 47)",
            "(line 42,col 9)-(line 42,col 40)",
            "(line 44,col 9)-(line 44,col 69)",
            "(line 46,col 9)-(line 46,col 72)",
            "(line 48,col 9)-(line 48,col 25)",
            "(line 49,col 9)-(line 49,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintWrapped()",
        "snippet": "    public void testPrintWrapped() throws Exception\n    {\n        StringBuffer sb = new StringBuffer();\n        HelpFormatter hf = new HelpFormatter();\n\n        String text = \"This is a test.\";\n\n        String expected = \"This is a\" + hf.getNewLine() + \"test.\";\n        hf.renderWrappedText(sb, 12, 0, text);\n        assertEquals(\"single line text\", expected, sb.toString());\n\n        sb.setLength(0);\n        expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n        hf.renderWrappedText(sb, 12, 4, text);\n        assertEquals(\"single line padded text\", expected, sb.toString());\n\n        text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n               \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n\n        sb.setLength(0);\n        expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n                hf.getNewLine() +\n                \"                        form DATE[-DATE] where DATE\" +\n                hf.getNewLine() +\n                \"                        has form YYYY[MM[DD]]\";\n        hf.renderWrappedText(sb, 53, 24, text);\n        assertEquals(\"single line padded text 2\", expected, sb.toString());\n\n        text = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n               \"aaaaaa\" + hf.getNewLine() +\n               \"aaaaa\";\n\n        expected = text;\n        sb.setLength(0);\n        hf.renderWrappedText(sb, 16, 0, text);\n        assertEquals(\"multi line text\", expected, sb.toString());\n\n        expected = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n                   \"    aaaaaa\" + hf.getNewLine() +\n                   \"    aaaaa\";\n        sb.setLength(0);\n        hf.renderWrappedText(sb, 16, 4, text);\n        assertEquals(\"multi-line padded text\", expected, sb.toString());\n    }",
        "begin_line": 52,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 45)",
            "(line 55,col 9)-(line 55,col 47)",
            "(line 57,col 9)-(line 57,col 40)",
            "(line 59,col 9)-(line 59,col 66)",
            "(line 60,col 9)-(line 60,col 46)",
            "(line 61,col 9)-(line 61,col 66)",
            "(line 63,col 9)-(line 63,col 24)",
            "(line 64,col 9)-(line 64,col 63)",
            "(line 65,col 9)-(line 65,col 46)",
            "(line 66,col 9)-(line 66,col 73)",
            "(line 68,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 24)",
            "(line 72,col 9)-(line 76,col 64)",
            "(line 77,col 9)-(line 77,col 47)",
            "(line 78,col 9)-(line 78,col 75)",
            "(line 80,col 9)-(line 82,col 23)",
            "(line 84,col 9)-(line 84,col 24)",
            "(line 85,col 9)-(line 85,col 24)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 87,col 65)",
            "(line 89,col 9)-(line 91,col 31)",
            "(line 92,col 9)-(line 92,col 24)",
            "(line 93,col 9)-(line 93,col 46)",
            "(line 94,col 9)-(line 94,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintOptions()",
        "snippet": "    public void testPrintOptions() throws Exception\n    {\n        StringBuffer sb = new StringBuffer();\n        HelpFormatter hf = new HelpFormatter();\n        final int leftPad = 1;\n        final int descPad = 3;\n        final String lpad = hf.createPadding(leftPad);\n        final String dpad = hf.createPadding(descPad);\n        Options options = null;\n        String expected = null;\n\n        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n        hf.renderOptions(sb, 60, options, leftPad, descPad);\n        assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n\n        int nextLineTabStop = leftPad + descPad + \"-a\".length();\n        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n                   hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n        sb.setLength(0);\n        hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\n        assertEquals(\"simple wrapped option\", expected, sb.toString());\n\n\n        options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n        sb.setLength(0);\n        hf.renderOptions(sb, 60, options, leftPad, descPad);\n        assertEquals(\"long non-wrapped option\", expected, sb.toString());\n\n        nextLineTabStop = leftPad + descPad + \"-a,--aaa\".length();\n        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n                   hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n        sb.setLength(0);\n        hf.renderOptions(sb, 25, options, leftPad, descPad);\n        assertEquals(\"long wrapped option\", expected, sb.toString());\n\n        options = new Options().\n                addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n                addOption(\"b\", false, \"feeee eeee eeee eeee\");\n        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n                   hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n                   lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n                   hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n        sb.setLength(0);\n        hf.renderOptions(sb, 25, options, leftPad, descPad);\n        assertEquals(\"multiple wrapped options\", expected, sb.toString());\n    }",
        "begin_line": 97,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 45)",
            "(line 100,col 9)-(line 100,col 47)",
            "(line 101,col 9)-(line 101,col 30)",
            "(line 102,col 9)-(line 102,col 30)",
            "(line 103,col 9)-(line 103,col 54)",
            "(line 104,col 9)-(line 104,col 54)",
            "(line 105,col 9)-(line 105,col 31)",
            "(line 106,col 9)-(line 106,col 31)",
            "(line 108,col 9)-(line 108,col 82)",
            "(line 109,col 9)-(line 109,col 67)",
            "(line 110,col 9)-(line 110,col 60)",
            "(line 111,col 9)-(line 111,col 75)",
            "(line 113,col 9)-(line 113,col 64)",
            "(line 114,col 9)-(line 115,col 67)",
            "(line 116,col 9)-(line 116,col 24)",
            "(line 117,col 9)-(line 117,col 78)",
            "(line 118,col 9)-(line 118,col 71)",
            "(line 121,col 9)-(line 121,col 84)",
            "(line 122,col 9)-(line 122,col 68)",
            "(line 123,col 9)-(line 123,col 24)",
            "(line 124,col 9)-(line 124,col 60)",
            "(line 125,col 9)-(line 125,col 73)",
            "(line 127,col 9)-(line 127,col 66)",
            "(line 128,col 9)-(line 129,col 67)",
            "(line 130,col 9)-(line 130,col 24)",
            "(line 131,col 9)-(line 131,col 60)",
            "(line 132,col 9)-(line 132,col 69)",
            "(line 134,col 9)-(line 136,col 62)",
            "(line 137,col 9)-(line 140,col 67)",
            "(line 141,col 9)-(line 141,col 24)",
            "(line 142,col 9)-(line 142,col 60)",
            "(line 143,col 9)-(line 143,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintHelpWithEmptySyntax()",
        "snippet": "    public void testPrintHelpWithEmptySyntax()\n    {\n        HelpFormatter formatter = new HelpFormatter();\n        try\n        {\n            formatter.printHelp(null, new Options());\n            fail(\"null command line syntax should be rejected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n\n        try\n        {\n            formatter.printHelp(\"\", new Options());\n            fail(\"empty command line syntax should be rejected\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }",
        "begin_line": 146,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 54)",
            "(line 149,col 9)-(line 157,col 9)",
            "(line 159,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testAutomaticUsage()",
        "snippet": "    public void testAutomaticUsage() throws Exception\n    {\n        HelpFormatter hf = new HelpFormatter();\n        Options options = null;\n        String expected = \"usage: app [-a]\";\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        PrintWriter pw = new PrintWriter(out);\n\n        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n        hf.printUsage(pw, 60, \"app\", options);\n        pw.flush();\n        assertEquals(\"simple auto usage\", expected, out.toString().trim());\n        out.reset();\n\n        expected = \"usage: app [-a] [-b]\";\n        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\")\n                .addOption(\"b\", false, \"bbb\");\n        hf.printUsage(pw, 60, \"app\", options);\n        pw.flush();\n        assertEquals(\"simple auto usage\", expected, out.toString().trim());\n        out.reset();\n    }",
        "begin_line": 170,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 47)",
            "(line 173,col 9)-(line 173,col 31)",
            "(line 174,col 9)-(line 174,col 44)",
            "(line 175,col 9)-(line 175,col 64)",
            "(line 176,col 9)-(line 176,col 46)",
            "(line 178,col 9)-(line 178,col 82)",
            "(line 179,col 9)-(line 179,col 46)",
            "(line 180,col 9)-(line 180,col 19)",
            "(line 181,col 9)-(line 181,col 75)",
            "(line 182,col 9)-(line 182,col 20)",
            "(line 184,col 9)-(line 184,col 42)",
            "(line 185,col 9)-(line 186,col 46)",
            "(line 187,col 9)-(line 187,col 46)",
            "(line 188,col 9)-(line 188,col 19)",
            "(line 189,col 9)-(line 189,col 75)",
            "(line 190,col 9)-(line 190,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintUsage()",
        "snippet": "    public void testPrintUsage()\n    {\n        Option optionA = new Option(\"a\", \"first\");\n        Option optionB = new Option(\"b\", \"second\");\n        Option optionC = new Option(\"c\", \"third\");\n        Options opts = new Options();\n        opts.addOption(optionA);\n        opts.addOption(optionB);\n        opts.addOption(optionC);\n        HelpFormatter helpFormatter = new HelpFormatter();\n        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n        PrintWriter printWriter = new PrintWriter(bytesOut);\n        helpFormatter.printUsage(printWriter, 80, \"app\", opts);\n        printWriter.close();\n        assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, bytesOut.toString());\n    }",
        "begin_line": 195,
        "end_line": 210,
        "comment": " See https://issues.apache.org/jira/browse/CLI-131",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 50)",
            "(line 198,col 9)-(line 198,col 51)",
            "(line 199,col 9)-(line 199,col 50)",
            "(line 200,col 9)-(line 200,col 37)",
            "(line 201,col 9)-(line 201,col 32)",
            "(line 202,col 9)-(line 202,col 32)",
            "(line 203,col 9)-(line 203,col 32)",
            "(line 204,col 9)-(line 204,col 58)",
            "(line 205,col 9)-(line 205,col 69)",
            "(line 206,col 9)-(line 206,col 60)",
            "(line 207,col 9)-(line 207,col 63)",
            "(line 208,col 9)-(line 208,col 28)",
            "(line 209,col 9)-(line 209,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintSortedUsage()",
        "snippet": "    public void testPrintSortedUsage()\n    {\n        Options opts = new Options();\n        opts.addOption(new Option(\"a\", \"first\"));\n        opts.addOption(new Option(\"b\", \"second\"));\n        opts.addOption(new Option(\"c\", \"third\"));\n\n        HelpFormatter helpFormatter = new HelpFormatter();\n        helpFormatter.setOptionComparator(new Comparator()\n        {\n            public int compare(Object o1, Object o2)\n            {\n                // reverses the fuctionality of the default comparator\n                Option opt1 = (Option) o1;\n                Option opt2 = (Option) o2;\n                return opt2.getKey().compareToIgnoreCase(opt1.getKey());\n            }\n        });\n\n        StringWriter out = new StringWriter();\n        helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\n\n        assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\n    }",
        "begin_line": 213,
        "end_line": 236,
        "comment": " uses the test for CLI-131 to implement CLI-155",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 37)",
            "(line 216,col 9)-(line 216,col 49)",
            "(line 217,col 9)-(line 217,col 50)",
            "(line 218,col 9)-(line 218,col 49)",
            "(line 220,col 9)-(line 220,col 58)",
            "(line 221,col 9)-(line 230,col 11)",
            "(line 232,col 9)-(line 232,col 46)",
            "(line 233,col 9)-(line 233,col 72)",
            "(line 235,col 9)-(line 235,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.Anonymous-2152fa6a-d2b2-4aef-b808-f0478dfdf02e.compare(java.lang.Object, java.lang.Object)",
        "snippet": "            public int compare(Object o1, Object o2)\n            {\n                // reverses the fuctionality of the default comparator\n                Option opt1 = (Option) o1;\n                Option opt2 = (Option) o2;\n                return opt2.getKey().compareToIgnoreCase(opt1.getKey());\n            }",
        "begin_line": 223,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 226,col 17)-(line 226,col 42)",
            "(line 227,col 17)-(line 227,col 42)",
            "(line 228,col 17)-(line 228,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintSortedUsageWithNullComparator()",
        "snippet": "    public void testPrintSortedUsageWithNullComparator()\n    {\n        Options opts = new Options();\n        opts.addOption(new Option(\"a\", \"first\"));\n        opts.addOption(new Option(\"b\", \"second\"));\n        opts.addOption(new Option(\"c\", \"third\"));\n\n        HelpFormatter helpFormatter = new HelpFormatter();\n        helpFormatter.setOptionComparator(null);\n\n        StringWriter out = new StringWriter();\n        helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\n\n        assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, out.toString());\n    }",
        "begin_line": 238,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 240,col 9)-(line 240,col 37)",
            "(line 241,col 9)-(line 241,col 49)",
            "(line 242,col 9)-(line 242,col 50)",
            "(line 243,col 9)-(line 243,col 49)",
            "(line 245,col 9)-(line 245,col 58)",
            "(line 246,col 9)-(line 246,col 48)",
            "(line 248,col 9)-(line 248,col 46)",
            "(line 249,col 9)-(line 249,col 72)",
            "(line 251,col 9)-(line 251,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintOptionGroupUsage()",
        "snippet": "    public void testPrintOptionGroupUsage()\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.create(\"a\"));\n        group.addOption(OptionBuilder.create(\"b\"));\n        group.addOption(OptionBuilder.create(\"c\"));\n\n        Options options = new Options();\n        options.addOptionGroup(group);\n\n        StringWriter out = new StringWriter();\n\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app [-a | -b | -c]\" + EOL, out.toString());\n    }",
        "begin_line": 254,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 256,col 46)",
            "(line 257,col 9)-(line 257,col 51)",
            "(line 258,col 9)-(line 258,col 51)",
            "(line 259,col 9)-(line 259,col 51)",
            "(line 261,col 9)-(line 261,col 40)",
            "(line 262,col 9)-(line 262,col 38)",
            "(line 264,col 9)-(line 264,col 46)",
            "(line 266,col 9)-(line 266,col 54)",
            "(line 267,col 9)-(line 267,col 71)",
            "(line 269,col 9)-(line 269,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintRequiredOptionGroupUsage()",
        "snippet": "    public void testPrintRequiredOptionGroupUsage()\n    {\n        OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.create(\"a\"));\n        group.addOption(OptionBuilder.create(\"b\"));\n        group.addOption(OptionBuilder.create(\"c\"));\n        group.setRequired(true);\n\n        Options options = new Options();\n        options.addOptionGroup(group);\n\n        StringWriter out = new StringWriter();\n\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -a | -b | -c\" + EOL, out.toString());\n    }",
        "begin_line": 272,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 46)",
            "(line 275,col 9)-(line 275,col 51)",
            "(line 276,col 9)-(line 276,col 51)",
            "(line 277,col 9)-(line 277,col 51)",
            "(line 278,col 9)-(line 278,col 32)",
            "(line 280,col 9)-(line 280,col 40)",
            "(line 281,col 9)-(line 281,col 38)",
            "(line 283,col 9)-(line 283,col 46)",
            "(line 285,col 9)-(line 285,col 54)",
            "(line 286,col 9)-(line 286,col 71)",
            "(line 288,col 9)-(line 288,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage()",
        "snippet": "    public void testPrintOptionWithEmptyArgNameUsage()\n    {\n        Option option = new Option(\"f\", true, null);\n        option.setArgName(\"\");\n        option.setRequired(true);\n\n        Options options = new Options();\n        options.addOption(option);\n\n        StringWriter out = new StringWriter();\n\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -f\" + EOL, out.toString());\n    }",
        "begin_line": 291,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 52)",
            "(line 294,col 9)-(line 294,col 30)",
            "(line 295,col 9)-(line 295,col 33)",
            "(line 297,col 9)-(line 297,col 40)",
            "(line 298,col 9)-(line 298,col 34)",
            "(line 300,col 9)-(line 300,col 46)",
            "(line 302,col 9)-(line 302,col 54)",
            "(line 303,col 9)-(line 303,col 71)",
            "(line 305,col 9)-(line 305,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testRtrim()",
        "snippet": "    public void testRtrim()\n    {\n        HelpFormatter formatter = new HelpFormatter();\n\n        assertEquals(null, formatter.rtrim(null));\n        assertEquals(\"\", formatter.rtrim(\"\"));\n        assertEquals(\"  foo\", formatter.rtrim(\"  foo  \"));\n    }",
        "begin_line": 308,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 54)",
            "(line 312,col 9)-(line 312,col 50)",
            "(line 313,col 9)-(line 313,col 46)",
            "(line 314,col 9)-(line 314,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testAccessors()",
        "snippet": "    public void testAccessors()\n    {\n        HelpFormatter formatter = new HelpFormatter();\n\n        formatter.setArgName(\"argname\");\n        assertEquals(\"arg name\", \"argname\", formatter.getArgName());\n\n        formatter.setDescPadding(3);\n        assertEquals(\"desc padding\", 3, formatter.getDescPadding());\n\n        formatter.setLeftPadding(7);\n        assertEquals(\"left padding\", 7, formatter.getLeftPadding());\n\n        formatter.setLongOptPrefix(\"~~\");\n        assertEquals(\"long opt prefix\", \"~~\", formatter.getLongOptPrefix());\n\n        formatter.setNewLine(\"\\n\");\n        assertEquals(\"new line\", \"\\n\", formatter.getNewLine());\n\n        formatter.setOptPrefix(\"~\");\n        assertEquals(\"opt prefix\", \"~\", formatter.getOptPrefix());\n\n        formatter.setSyntaxPrefix(\"-> \");\n        assertEquals(\"syntax prefix\", \"-> \", formatter.getSyntaxPrefix());\n\n        formatter.setWidth(80);\n        assertEquals(\"width\", 80, formatter.getWidth());\n    }",
        "begin_line": 317,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 319,col 9)-(line 319,col 54)",
            "(line 321,col 9)-(line 321,col 40)",
            "(line 322,col 9)-(line 322,col 68)",
            "(line 324,col 9)-(line 324,col 36)",
            "(line 325,col 9)-(line 325,col 68)",
            "(line 327,col 9)-(line 327,col 36)",
            "(line 328,col 9)-(line 328,col 68)",
            "(line 330,col 9)-(line 330,col 41)",
            "(line 331,col 9)-(line 331,col 76)",
            "(line 333,col 9)-(line 333,col 35)",
            "(line 334,col 9)-(line 334,col 63)",
            "(line 336,col 9)-(line 336,col 36)",
            "(line 337,col 9)-(line 337,col 66)",
            "(line 339,col 9)-(line 339,col 41)",
            "(line 340,col 9)-(line 340,col 74)",
            "(line 342,col 9)-(line 342,col 31)",
            "(line 343,col 9)-(line 343,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testHeaderStartingWithLineSeparator()",
        "snippet": "    public void testHeaderStartingWithLineSeparator()\n    {\n        // related to Bugzilla #21215\n        Options options = new Options();\n        HelpFormatter formatter = new HelpFormatter();\n        String header = EOL + \"Header\";\n        String footer = \"Footer\";\n        StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                \"\" + EOL +\n                \"Header\" + EOL +\n                \"\" + EOL +\n                \"Footer\" + EOL\n                , out.toString());\n    }",
        "begin_line": 346,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 40)",
            "(line 350,col 9)-(line 350,col 54)",
            "(line 351,col 9)-(line 351,col 39)",
            "(line 352,col 9)-(line 352,col 33)",
            "(line 353,col 9)-(line 353,col 46)",
            "(line 354,col 9)-(line 354,col 101)",
            "(line 355,col 9)-(line 361,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testOptionWithoutShortFormat()",
        "snippet": "    public void testOptionWithoutShortFormat()\n    {\n        // related to Bugzilla #19383 (CLI-67)\n        Options options = new Options();\n        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb\"));\n        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"\", options, 2, 2, \"\", true);\n        assertEquals(\n                \"usage: foobar [-a] [--bbb] [-c]\" + EOL +\n                \"  -a,--aaa  aaaaaaa\" + EOL +\n                \"     --bbb  bbbbbbb\" + EOL +\n                \"  -c        ccccccc\" + EOL\n                , out.toString());\n    }",
        "begin_line": 364,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 367,col 9)-(line 367,col 40)",
            "(line 368,col 9)-(line 368,col 68)",
            "(line 369,col 9)-(line 369,col 69)",
            "(line 370,col 9)-(line 370,col 67)",
            "(line 372,col 9)-(line 372,col 54)",
            "(line 373,col 9)-(line 373,col 46)",
            "(line 374,col 9)-(line 374,col 93)",
            "(line 375,col 9)-(line 380,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testOptionWithoutShortFormat2()",
        "snippet": "    public void testOptionWithoutShortFormat2()\n    {\n        // related to Bugzilla #27635 (CLI-26)\n        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n        \n        Option timeLimit = OptionBuilder.withLongOpt(\"limit\")\n                                        .hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Set time limit for execution, in mintues\")\n                                        .create(\"l\");\n        \n        Option age = OptionBuilder.withLongOpt(\"age\")\n                                        .hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Age (in days) of cache item before being recomputed\")\n                                        .create(\"a\");\n        \n        Option server = OptionBuilder.withLongOpt(\"server\")\n                                        .hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"The NLT server address\")\n                                        .create(\"s\");\n        \n        Option numResults = OptionBuilder.withLongOpt(\"results\")\n                                        .hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Number of results per item\")\n                                        .create(\"r\");\n        \n        Option configFile = OptionBuilder.withLongOpt(\"config\")\n                                        .hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Use the specified configuration file\")\n                                        .create();\n        \n        Options mOptions = new Options();\n        mOptions.addOption(help);\n        mOptions.addOption(version);\n        mOptions.addOption(newRun);\n        mOptions.addOption(trackerRun);\n        mOptions.addOption(timeLimit);\n        mOptions.addOption(age);\n        mOptions.addOption(server);\n        mOptions.addOption(numResults);\n        mOptions.addOption(configFile);\n        \n        HelpFormatter formatter = new HelpFormatter();\n        final String EOL = System.getProperty(\"line.separator\");\n        StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out),80,\"commandline\",\"header\",mOptions,2,2,\"footer\",true);\n        assertEquals(\n                \"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\" + EOL +\n                \"       [-s <arg>] [-t] [-v]\" + EOL +\n                \"header\"+EOL+\n                \"  -a,--age <arg>      Age (in days) of cache item before being recomputed\"+EOL+\n                \"     --config <arg>   Use the specified configuration file\"+EOL+\n                \"  -h,--help           print this message\"+EOL+\n                \"  -l,--limit <arg>    Set time limit for execution, in mintues\"+EOL+\n                \"  -n,--new            Create NLT cache entries only for new items\"+EOL+\n                \"  -r,--results <arg>  Number of results per item\"+EOL+\n                \"  -s,--server <arg>   The NLT server address\"+EOL+\n                \"  -t,--tracker        Create NLT cache entries only for tracker items\"+EOL+\n                \"  -v,--version        print version information\"+EOL+\n                \"footer\"+EOL\n                ,out.toString());\n    }",
        "begin_line": 384,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 75)",
            "(line 388,col 9)-(line 388,col 88)",
            "(line 389,col 9)-(line 389,col 101)",
            "(line 390,col 9)-(line 390,col 113)",
            "(line 392,col 9)-(line 396,col 53)",
            "(line 398,col 9)-(line 402,col 53)",
            "(line 404,col 9)-(line 408,col 53)",
            "(line 410,col 9)-(line 414,col 53)",
            "(line 416,col 9)-(line 420,col 50)",
            "(line 422,col 9)-(line 422,col 41)",
            "(line 423,col 9)-(line 423,col 33)",
            "(line 424,col 9)-(line 424,col 36)",
            "(line 425,col 9)-(line 425,col 35)",
            "(line 426,col 9)-(line 426,col 39)",
            "(line 427,col 9)-(line 427,col 38)",
            "(line 428,col 9)-(line 428,col 32)",
            "(line 429,col 9)-(line 429,col 35)",
            "(line 430,col 9)-(line 430,col 39)",
            "(line 431,col 9)-(line 431,col 39)",
            "(line 433,col 9)-(line 433,col 54)",
            "(line 434,col 9)-(line 434,col 64)",
            "(line 435,col 9)-(line 435,col 46)",
            "(line 436,col 9)-(line 436,col 103)",
            "(line 437,col 9)-(line 451,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testHelpWithLongOptSeparator()",
        "snippet": "    public void testHelpWithLongOptSeparator() throws Exception\n    {\n        Options options = new Options();\n        options.addOption( \"f\", true, \"the file\" );\n        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n        \n        HelpFormatter formatter = new HelpFormatter();\n        assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\n        formatter.setLongOptSeparator(\"=\");\n        assertEquals(\"=\", formatter.getLongOptSeparator());\n        \n        StringWriter out = new StringWriter();\n\n        formatter.printHelp(new PrintWriter(out), 80, \"create\", \"header\", options, 2, 2, \"footer\");\n\n        assertEquals(\n                \"usage: create\" + EOL +\n                \"header\" + EOL +\n                \"     --age=<arg>    the age\" + EOL +\n                \"  -f <arg>          the file\" + EOL +\n                \"  -s,--size=<SIZE>  the size\" + EOL +\n                \"footer\" + EOL,\n                out.toString());\n    }",
        "begin_line": 454,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 456,col 9)-(line 456,col 40)",
            "(line 457,col 9)-(line 457,col 51)",
            "(line 458,col 9)-(line 458,col 130)",
            "(line 459,col 9)-(line 459,col 105)",
            "(line 461,col 9)-(line 461,col 54)",
            "(line 462,col 9)-(line 462,col 96)",
            "(line 463,col 9)-(line 463,col 43)",
            "(line 464,col 9)-(line 464,col 59)",
            "(line 466,col 9)-(line 466,col 46)",
            "(line 468,col 9)-(line 468,col 99)",
            "(line 470,col 9)-(line 477,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.HelpFormatterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java",
        "signature": "org.apache.commons.cli.HelpFormatterTest.testUsageWithLongOptSeparator()",
        "snippet": "    public void testUsageWithLongOptSeparator() throws Exception\n    {\n        Options options = new Options();\n        options.addOption( \"f\", true, \"the file\" );\n        options.addOption(OptionBuilder.withLongOpt(\"size\").withDescription(\"the size\").hasArg().withArgName(\"SIZE\").create('s'));\n        options.addOption(OptionBuilder.withLongOpt(\"age\").withDescription(\"the age\").hasArg().create());\n        \n        HelpFormatter formatter = new HelpFormatter();\n        formatter.setLongOptSeparator(\"=\");\n        \n        StringWriter out = new StringWriter();\n        \n        formatter.printUsage(new PrintWriter(out), 80, \"create\", options);\n        \n        assertEquals(\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\", out.toString().trim());\n    }",
        "begin_line": 480,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 40)",
            "(line 483,col 9)-(line 483,col 51)",
            "(line 484,col 9)-(line 484,col 130)",
            "(line 485,col 9)-(line 485,col 105)",
            "(line 487,col 9)-(line 487,col 54)",
            "(line 488,col 9)-(line 488,col 43)",
            "(line 490,col 9)-(line 490,col 46)",
            "(line 492,col 9)-(line 492,col 74)",
            "(line 494,col 9)-(line 494,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.setUp()",
        "snippet": "    public void setUp()\n    {\n        super.setUp();\n        parser = new GnuParser();\n    }",
        "begin_line": 22,
        "end_line": 26,
        "comment": "",
        "child_ranges": [
            "(line 24,col 9)-(line 24,col 22)",
            "(line 25,col 9)-(line 25,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testDoubleDash2()",
        "snippet": "    public void testDoubleDash2() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 28,
        "end_line": 31,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testLongWithoutEqualSingleDash()",
        "snippet": "    public void testLongWithoutEqualSingleDash() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testAmbiguousLongWithoutEqualSingleDash()",
        "snippet": "    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testNegativeOption()",
        "snippet": "    public void testNegativeOption() throws Exception\n    {\n        // not supported by the GnuParser (CLI-184)\n    }",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testLongWithUnexpectedArgument1()",
        "snippet": "    public void testLongWithUnexpectedArgument1() throws Exception \n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 48,
        "end_line": 51,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testLongWithUnexpectedArgument2()",
        "snippet": "    public void testLongWithUnexpectedArgument2() throws Exception \n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testShortWithUnexpectedArgument()",
        "snippet": "    public void testShortWithUnexpectedArgument() throws Exception \n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption1()",
        "snippet": "    public void testUnambiguousPartialLongOption1() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption2()",
        "snippet": "    public void testUnambiguousPartialLongOption2() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption3()",
        "snippet": "    public void testUnambiguousPartialLongOption3() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption4()",
        "snippet": "    public void testUnambiguousPartialLongOption4() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption1()",
        "snippet": "    public void testAmbiguousPartialLongOption1() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption2()",
        "snippet": "    public void testAmbiguousPartialLongOption2() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption3()",
        "snippet": "   public void testAmbiguousPartialLongOption3() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption4()",
        "snippet": "    public void testAmbiguousPartialLongOption4() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testPartialLongOptionSingleDash()",
        "snippet": "    public void testPartialLongOptionSingleDash() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testBursting()",
        "snippet": "    public void testBursting() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testUnrecognizedOptionWithBursting()",
        "snippet": "    public void testUnrecognizedOptionWithBursting() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testMissingArgWithBursting()",
        "snippet": "    public void testMissingArgWithBursting() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testStopBursting()",
        "snippet": "    public void testStopBursting() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.GnuParserTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java",
        "signature": "org.apache.commons.cli.GnuParserTest.testStopBursting2()",
        "snippet": "    public void testStopBursting2() throws Exception\n    {\n        // not supported by the GnuParser\n    }",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.setUp()",
        "snippet": "    public void setUp() throws Exception\n    {\n        opts.addOption(\"a\", false, \"toggle -a\");\n        opts.addOption(\"b\", true, \"set -b\");\n        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n        opts.addOption(\"d\", \"d\", true, \"set -d\");\n\n        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n        opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\"fish\").create());\n        opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\"gravy\").create());\n        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());\n        opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n        opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n\n        String[] args = new String[] { \"-a\",\n            \"-b\", \"foo\",\n            \"--c\",\n            \"--d\", \"bar\" \n        };\n\n        Parser parser = new PosixParser();\n        _cl = parser.parse(opts,args);\n    }",
        "begin_line": 27,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 29,col 9)-(line 29,col 48)",
            "(line 30,col 9)-(line 30,col 44)",
            "(line 31,col 9)-(line 31,col 53)",
            "(line 32,col 9)-(line 32,col 49)",
            "(line 34,col 9)-(line 34,col 67)",
            "(line 35,col 9)-(line 35,col 84)",
            "(line 36,col 9)-(line 36,col 86)",
            "(line 37,col 9)-(line 37,col 86)",
            "(line 38,col 9)-(line 38,col 69)",
            "(line 39,col 9)-(line 39,col 68)",
            "(line 41,col 9)-(line 45,col 10)",
            "(line 47,col 9)-(line 47,col 42)",
            "(line 48,col 9)-(line 48,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortNoArg()",
        "snippet": "    public void testShortNoArg()\n    {\n        assertTrue( _cl.hasOption(\"a\") );\n        assertNull( _cl.getOptionValue(\"a\") );\n    }",
        "begin_line": 51,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 41)",
            "(line 54,col 9)-(line 54,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortWithArg()",
        "snippet": "    public void testShortWithArg()\n    {\n        assertTrue( _cl.hasOption(\"b\") );\n        assertNotNull( _cl.getOptionValue(\"b\") );\n        assertEquals( _cl.getOptionValue(\"b\"), \"foo\");\n    }",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 41)",
            "(line 60,col 9)-(line 60,col 49)",
            "(line 61,col 9)-(line 61,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongNoArg()",
        "snippet": "    public void testLongNoArg()\n    {\n        assertTrue( _cl.hasOption(\"c\") );\n        assertNull( _cl.getOptionValue(\"c\") );\n    }",
        "begin_line": 64,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 41)",
            "(line 67,col 9)-(line 67,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongWithArg()",
        "snippet": "    public void testLongWithArg()\n    {\n        assertTrue( _cl.hasOption(\"d\") );\n        assertNotNull( _cl.getOptionValue(\"d\") );\n        assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n    }",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 41)",
            "(line 73,col 9)-(line 73,col 49)",
            "(line 74,col 9)-(line 74,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalArgNoValue()",
        "snippet": "    public void testShortOptionalArgNoValue() throws Exception\n    {\n        String[] args = new String[] { \"-e\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"e\") );\n        assertNull( cmd.getOptionValue(\"e\") );\n    }",
        "begin_line": 77,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 46)",
            "(line 81,col 9)-(line 81,col 42)",
            "(line 82,col 9)-(line 82,col 50)",
            "(line 83,col 9)-(line 83,col 41)",
            "(line 84,col 9)-(line 84,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalArgValue()",
        "snippet": "    public void testShortOptionalArgValue() throws Exception\n    {\n        String[] args = new String[] { \"-e\", \"everything\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"e\") );\n        assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n    }",
        "begin_line": 87,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 60)",
            "(line 91,col 9)-(line 91,col 42)",
            "(line 92,col 9)-(line 92,col 50)",
            "(line 93,col 9)-(line 93,col 41)",
            "(line 94,col 9)-(line 94,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalNoValue()",
        "snippet": "    public void testLongOptionalNoValue() throws Exception\n    {\n        String[] args = new String[] { \"--fish\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"fish\") );\n        assertNull( cmd.getOptionValue(\"fish\") );\n    }",
        "begin_line": 97,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 50)",
            "(line 101,col 9)-(line 101,col 42)",
            "(line 102,col 9)-(line 102,col 50)",
            "(line 103,col 9)-(line 103,col 44)",
            "(line 104,col 9)-(line 104,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalArgValue()",
        "snippet": "    public void testLongOptionalArgValue() throws Exception\n    {\n        String[] args = new String[] { \"--fish\", \"face\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"fish\") );\n        assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n    }",
        "begin_line": 107,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 58)",
            "(line 111,col 9)-(line 111,col 42)",
            "(line 112,col 9)-(line 112,col 50)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 114,col 9)-(line 114,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalArgValues()",
        "snippet": "    public void testShortOptionalArgValues() throws Exception\n    {\n        String[] args = new String[] { \"-j\", \"ink\", \"idea\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"j\") );\n        assertEquals( \"ink\", cmd.getOptionValue(\"j\") );\n        assertEquals( \"ink\", cmd.getOptionValues(\"j\")[0] );\n        assertEquals( \"idea\", cmd.getOptionValues(\"j\")[1] );\n        assertEquals( cmd.getArgs().length, 0 );\n    }",
        "begin_line": 117,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 61)",
            "(line 121,col 9)-(line 121,col 42)",
            "(line 122,col 9)-(line 122,col 50)",
            "(line 123,col 9)-(line 123,col 41)",
            "(line 124,col 9)-(line 124,col 55)",
            "(line 125,col 9)-(line 125,col 59)",
            "(line 126,col 9)-(line 126,col 60)",
            "(line 127,col 9)-(line 127,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalArgValues()",
        "snippet": "    public void testLongOptionalArgValues() throws Exception\n    {\n        String[] args = new String[] { \"--gravy\", \"gold\", \"garden\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"gravy\") );\n        assertEquals( \"gold\", cmd.getOptionValue(\"gravy\") );\n        assertEquals( \"gold\", cmd.getOptionValues(\"gravy\")[0] );\n        assertEquals( \"garden\", cmd.getOptionValues(\"gravy\")[1] );\n        assertEquals( cmd.getArgs().length, 0 );\n    }",
        "begin_line": 130,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 69)",
            "(line 134,col 9)-(line 134,col 42)",
            "(line 135,col 9)-(line 135,col 50)",
            "(line 136,col 9)-(line 136,col 45)",
            "(line 137,col 9)-(line 137,col 60)",
            "(line 138,col 9)-(line 138,col 64)",
            "(line 139,col 9)-(line 139,col 66)",
            "(line 140,col 9)-(line 140,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testShortOptionalNArgValues()",
        "snippet": "    public void testShortOptionalNArgValues() throws Exception\n    {\n        String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\n\n        Parser parser = new PosixParser();\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"i\") );\n        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n        assertEquals( \"ink\", cmd.getOptionValues(\"i\")[0] );\n        assertEquals( \"idea\", cmd.getOptionValues(\"i\")[1] );\n        assertEquals( cmd.getArgs().length, 2 );\n        assertEquals( \"isotope\", cmd.getArgs()[0] );\n        assertEquals( \"ice\", cmd.getArgs()[1] );\n    }",
        "begin_line": 143,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 79)",
            "(line 147,col 9)-(line 147,col 42)",
            "(line 148,col 9)-(line 148,col 50)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 150,col 55)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 152,col 60)",
            "(line 153,col 9)-(line 153,col 48)",
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.ValueTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/ValueTest.java",
        "signature": "org.apache.commons.cli.ValueTest.testLongOptionalNArgValues()",
        "snippet": "    public void testLongOptionalNArgValues() throws Exception\n    {\n        String[] args = new String[] { \n            \"--hide\", \"house\", \"hair\", \"head\"\n        };\n\n        Parser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse(opts,args);\n        assertTrue( cmd.hasOption(\"hide\") );\n        assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n        assertEquals( \"house\", cmd.getOptionValues(\"hide\")[0] );\n        assertEquals( \"hair\", cmd.getOptionValues(\"hide\")[1] );\n        assertEquals( cmd.getArgs().length, 1 );\n        assertEquals( \"head\", cmd.getArgs()[0] );\n    }",
        "begin_line": 158,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 162,col 10)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 166,col 9)-(line 166,col 50)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 168,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 64)",
            "(line 170,col 9)-(line 170,col 63)",
            "(line 171,col 9)-(line 171,col 48)",
            "(line 172,col 9)-(line 172,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI13Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI13Test.testCLI13()",
        "snippet": "    public void testCLI13() throws ParseException\n    {\n        final String debugOpt = \"debug\";\n        Option debug = OptionBuilder\n            .withArgName( debugOpt )\n            .withDescription( \"turn on debugging\" )\n            .withLongOpt( debugOpt )\n            .hasArg()\n            .create( 'd' );\n        Options options = new Options();\n        options.addOption( debug );\n        CommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n\n        assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\n        assertEquals(\"true\", commandLine.getOptionValue( 'd' ));\n        assertTrue(commandLine.hasOption( 'd'));\n        assertTrue(commandLine.hasOption( debugOpt));\n    }",
        "begin_line": 34,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 40)",
            "(line 37,col 9)-(line 42,col 27)",
            "(line 43,col 9)-(line 43,col 40)",
            "(line 44,col 9)-(line 44,col 35)",
            "(line 45,col 9)-(line 45,col 97)",
            "(line 47,col 9)-(line 47,col 69)",
            "(line 48,col 9)-(line 48,col 64)",
            "(line 49,col 9)-(line 49,col 48)",
            "(line 50,col 9)-(line 50,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.setUp()",
        "snippet": "    public void setUp() {\n        options = new Options();\n\n        Option algorithm = new Option(\"a\" , \"algo\", true, \"the algorithm which it to perform executing\");\n        algorithm.setArgName(\"algorithm name\");\n        options.addOption(algorithm);\n\n        Option key = new Option(\"k\" , \"key\", true, \"the key the setted algorithm uses to process\");\n        algorithm.setArgName(\"value\");\n        options.addOption(key);\n\n        parser = new PosixParser();\n    }",
        "begin_line": 35,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 32)",
            "(line 38,col 9)-(line 38,col 105)",
            "(line 39,col 9)-(line 39,col 47)",
            "(line 40,col 9)-(line 40,col 37)",
            "(line 42,col 9)-(line 42,col 99)",
            "(line 43,col 9)-(line 43,col 38)",
            "(line 44,col 9)-(line 44,col 31)",
            "(line 46,col 9)-(line 46,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testBasic()",
        "snippet": "    public void testBasic() throws Exception {\n        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n        CommandLine line = parser.parse( options, args);\n        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n        assertEquals( \"A\", line.getOptionValue(\"k\") );\n    }",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 67)",
            "(line 51,col 9)-(line 51,col 56)",
            "(line 52,col 9)-(line 52,col 59)",
            "(line 53,col 9)-(line 53,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testMistakenArgument()",
        "snippet": "    public void testMistakenArgument() throws Exception {\n        String[] args = new String[] { \"-a\", \"Caesar\", \"-k\", \"A\" };\n        CommandLine line = parser.parse( options, args);\n        args = new String[] { \"-a\", \"Caesar\", \"-k\", \"a\" };\n        line = parser.parse( options, args);\n        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n        assertEquals( \"a\", line.getOptionValue(\"k\") );\n    }",
        "begin_line": 56,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 67)",
            "(line 58,col 9)-(line 58,col 56)",
            "(line 59,col 9)-(line 59,col 58)",
            "(line 60,col 9)-(line 60,col 44)",
            "(line 61,col 9)-(line 61,col 59)",
            "(line 62,col 9)-(line 62,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testLackOfError()",
        "snippet": "    public void testLackOfError() throws Exception {\n        String[] args = new String[] { \"-k\", \"-a\",  \"Caesar\" };\n        try {\n            CommandLine line = parser.parse( options, args);\n            fail(\"MissingArgumentException expected\");\n        } catch(MissingArgumentException e) {\n            assertEquals(\"option missing an argument\", \"k\", e.getOption().getOpt());\n        }\n    }",
        "begin_line": 65,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 63)",
            "(line 67,col 9)-(line 72,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI71Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI71Test.testGetsDefaultIfOptional()",
        "snippet": "    public void testGetsDefaultIfOptional() throws Exception {\n        String[] args = new String[] { \"-k\", \"-a\", \"Caesar\" };\n        options.getOption(\"k\").setOptionalArg(true);\n        CommandLine line = parser.parse( options, args);\n        \n        assertEquals( \"Caesar\", line.getOptionValue(\"a\") );\n        assertEquals( \"a\", line.getOptionValue('k', \"a\") );\n    }",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 62)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 56)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI133Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI133Test.testOrder()",
        "snippet": "    public void testOrder() throws ParseException {\n        Option optionA = new Option(\"a\", \"first\");\n        Options opts = new Options();\n        opts.addOption(optionA);\n        PosixParser posixParser = new PosixParser();\n        CommandLine line = posixParser.parse(opts, null);\n        assertFalse(line.hasOption(null));\n    }",
        "begin_line": 32,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 50)",
            "(line 34,col 9)-(line 34,col 37)",
            "(line 35,col 9)-(line 35,col 32)",
            "(line 36,col 9)-(line 36,col 52)",
            "(line 37,col 9)-(line 37,col 57)",
            "(line 38,col 9)-(line 38,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI162Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI162Test.testInfiniteLoop()",
        "snippet": "    public void testInfiniteLoop() {\n        Options options = new Options();\n        options.addOption(\"h\", \"help\", false, \"This is a looooong description\");\n        HelpFormatter formatter = new HelpFormatter();\n        formatter.setWidth(20);\n        formatter.printHelp(\"app\", options); // used to hang & crash\n    }",
        "begin_line": 39,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 40)",
            "(line 41,col 9)-(line 41,col 80)",
            "(line 42,col 9)-(line 42,col 54)",
            "(line 43,col 9)-(line 43,col 31)",
            "(line 44,col 9)-(line 44,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI162Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines()",
        "snippet": "    public void testPrintHelpLongLines() throws ParseException, IOException {\n        // Constants used for options\n        final String OPT = \"-\";\n\n        final String OPT_COLUMN_NAMES = \"l\";\n\n        final String OPT_CONNECTION = \"c\";\n\n        final String OPT_DESCRIPTION = \"e\";\n\n        final String OPT_DRIVER = \"d\";\n\n        final String OPT_DRIVER_INFO = \"n\";\n\n        final String OPT_FILE_BINDING = \"b\";\n\n        final String OPT_FILE_JDBC = \"j\";\n\n        final String OPT_FILE_SFMD = \"f\";\n\n        final String OPT_HELP = \"h\";\n\n        final String OPT_HELP_ = \"help\";\n\n        final String OPT_INTERACTIVE = \"i\";\n\n        final String OPT_JDBC_TO_SFMD = \"2\";\n\n        final String OPT_JDBC_TO_SFMD_L = \"jdbc2sfmd\";\n\n        final String OPT_METADATA = \"m\";\n\n        final String OPT_PARAM_MODES_INT = \"o\";\n\n        final String OPT_PARAM_MODES_NAME = \"O\";\n\n        final String OPT_PARAM_NAMES = \"a\";\n\n        final String OPT_PARAM_TYPES_INT = \"y\";\n\n        final String OPT_PARAM_TYPES_NAME = \"Y\";\n\n        final String OPT_PASSWORD = \"p\";\n\n        final String OPT_PASSWORD_L = \"password\";\n\n        final String OPT_SQL = \"s\";\n\n        final String OPT_SQL_L = \"sql\";\n\n        final String OPT_SQL_SPLIT_DEFAULT = \"###\";\n\n        final String OPT_SQL_SPLIT_L = \"splitSql\";\n\n        final String OPT_STACK_TRACE = \"t\";\n\n        final String OPT_TIMING = \"g\";\n\n        final String OPT_TRIM_L = \"trim\";\n\n        final String OPT_USER = \"u\";\n\n        final String OPT_WRITE_TO_FILE = \"w\";\n\n        final String _PMODE_IN = \"IN\";\n\n        final String _PMODE_INOUT = \"INOUT\";\n\n        final String _PMODE_OUT = \"OUT\";\n\n        final String _PMODE_UNK = \"Unknown\";\n\n        final String PMODES = _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\n\n        // Options build\n        Options commandLineOptions;\n        commandLineOptions = new Options();\n        commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\n        commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\n        commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n            + OPT\n            + OPT_CONNECTION\n            + \" is not specified, all drivers on the classpath are displayed.\");\n        commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\n        commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\n        commandLineOptions\n                .addOption(\n                        OPT_PASSWORD,\n                        OPT_PASSWORD_L,\n                        true,\n                        \"The database password for the user specified with the \"\n                            + OPT\n                            + OPT_USER\n                            + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\n        commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\n        commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\n        commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\n        commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\n        commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\n        commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n                \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\n        commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n                \"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\n        commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\n        commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\n        commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\n        Option option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n            + OPT\n            + OPT_COLUMN_NAMES\n            + \" \\\"cname1 cname2\\\"\");\n        commandLineOptions.addOption(option);\n        option = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n            + OPT\n            + OPT_PARAM_NAMES\n            + \" \\\"pname1 pname2\\\"\");\n        commandLineOptions.addOption(option);\n        //\n        OptionGroup pOutTypesOptionGroup = new OptionGroup();\n        String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\n        final String typesClassName = Types.class.getName();\n        option = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n            + typesClassName\n            + \". \"\n            + pOutTypesOptionGroupDoc\n            + \" Example: \"\n            + OPT\n            + OPT_PARAM_TYPES_INT\n            + \" \\\"-10 12\\\"\");\n        commandLineOptions.addOption(option);\n        option = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n            + typesClassName\n            + \" names. \"\n            + pOutTypesOptionGroupDoc\n            + \" Example: \"\n            + OPT\n            + OPT_PARAM_TYPES_NAME\n            + \" \\\"CURSOR VARCHAR\\\"\");\n        commandLineOptions.addOption(option);\n        commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n        //\n        OptionGroup modesOptionGroup = new OptionGroup();\n        String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\n        option = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n            + ParameterMetaData.parameterModeIn\n            + \"=IN, \"\n            + ParameterMetaData.parameterModeInOut\n            + \"=INOUT, \"\n            + ParameterMetaData.parameterModeOut\n            + \"=OUT, \"\n            + ParameterMetaData.parameterModeUnknown\n            + \"=Unknown\"\n            + \"). \"\n            + modesOptionGroupDoc\n            + \" Example for 2 parameters, OUT and IN: \"\n            + OPT\n            + OPT_PARAM_MODES_INT\n            + \" \\\"\"\n            + ParameterMetaData.parameterModeOut\n            + \" \"\n            + ParameterMetaData.parameterModeIn\n            + \"\\\"\");\n        modesOptionGroup.addOption(option);\n        option = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n            + PMODES\n            + \"). \"\n            + modesOptionGroupDoc\n            + \" Example for 2 parameters, OUT and IN: \"\n            + OPT\n            + OPT_PARAM_MODES_NAME\n            + \" \\\"\"\n            + _PMODE_OUT\n            + \" \"\n            + _PMODE_IN\n            + \"\\\"\");\n        modesOptionGroup.addOption(option);\n        commandLineOptions.addOptionGroup(modesOptionGroup);\n        option = new Option(null, OPT_TRIM_L, true,\n                \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\n        option.setOptionalArg(true);\n        commandLineOptions.addOption(option);\n        option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n                \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\n        option.setArgs(2);\n        commandLineOptions.addOption(option);\n        new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\n    }",
        "begin_line": 47,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 31)",
            "(line 51,col 9)-(line 51,col 44)",
            "(line 53,col 9)-(line 53,col 42)",
            "(line 55,col 9)-(line 55,col 43)",
            "(line 57,col 9)-(line 57,col 38)",
            "(line 59,col 9)-(line 59,col 43)",
            "(line 61,col 9)-(line 61,col 44)",
            "(line 63,col 9)-(line 63,col 41)",
            "(line 65,col 9)-(line 65,col 41)",
            "(line 67,col 9)-(line 67,col 36)",
            "(line 69,col 9)-(line 69,col 40)",
            "(line 71,col 9)-(line 71,col 43)",
            "(line 73,col 9)-(line 73,col 44)",
            "(line 75,col 9)-(line 75,col 54)",
            "(line 77,col 9)-(line 77,col 40)",
            "(line 79,col 9)-(line 79,col 47)",
            "(line 81,col 9)-(line 81,col 48)",
            "(line 83,col 9)-(line 83,col 43)",
            "(line 85,col 9)-(line 85,col 47)",
            "(line 87,col 9)-(line 87,col 48)",
            "(line 89,col 9)-(line 89,col 40)",
            "(line 91,col 9)-(line 91,col 49)",
            "(line 93,col 9)-(line 93,col 35)",
            "(line 95,col 9)-(line 95,col 39)",
            "(line 97,col 9)-(line 97,col 51)",
            "(line 99,col 9)-(line 99,col 50)",
            "(line 101,col 9)-(line 101,col 43)",
            "(line 103,col 9)-(line 103,col 38)",
            "(line 105,col 9)-(line 105,col 41)",
            "(line 107,col 9)-(line 107,col 36)",
            "(line 109,col 9)-(line 109,col 45)",
            "(line 111,col 9)-(line 111,col 38)",
            "(line 113,col 9)-(line 113,col 44)",
            "(line 115,col 9)-(line 115,col 40)",
            "(line 117,col 9)-(line 117,col 44)",
            "(line 119,col 9)-(line 119,col 102)",
            "(line 122,col 9)-(line 122,col 35)",
            "(line 123,col 9)-(line 123,col 43)",
            "(line 124,col 9)-(line 124,col 90)",
            "(line 125,col 9)-(line 125,col 91)",
            "(line 126,col 9)-(line 129,col 80)",
            "(line 130,col 9)-(line 130,col 84)",
            "(line 131,col 9)-(line 131,col 85)",
            "(line 132,col 9)-(line 140,col 177)",
            "(line 141,col 9)-(line 141,col 135)",
            "(line 142,col 9)-(line 142,col 106)",
            "(line 143,col 9)-(line 143,col 122)",
            "(line 144,col 9)-(line 144,col 132)",
            "(line 145,col 9)-(line 145,col 116)",
            "(line 146,col 9)-(line 147,col 140)",
            "(line 148,col 9)-(line 149,col 113)",
            "(line 150,col 9)-(line 150,col 100)",
            "(line 151,col 9)-(line 151,col 106)",
            "(line 152,col 9)-(line 152,col 108)",
            "(line 153,col 9)-(line 156,col 36)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 161,col 36)",
            "(line 162,col 9)-(line 162,col 45)",
            "(line 164,col 9)-(line 164,col 61)",
            "(line 165,col 9)-(line 165,col 135)",
            "(line 166,col 9)-(line 166,col 60)",
            "(line 167,col 9)-(line 174,col 29)",
            "(line 175,col 9)-(line 175,col 45)",
            "(line 176,col 9)-(line 183,col 37)",
            "(line 184,col 9)-(line 184,col 45)",
            "(line 185,col 9)-(line 185,col 64)",
            "(line 187,col 9)-(line 187,col 57)",
            "(line 188,col 9)-(line 188,col 131)",
            "(line 189,col 9)-(line 207,col 20)",
            "(line 208,col 9)-(line 208,col 43)",
            "(line 209,col 9)-(line 220,col 20)",
            "(line 221,col 9)-(line 221,col 43)",
            "(line 222,col 9)-(line 222,col 60)",
            "(line 223,col 9)-(line 224,col 152)",
            "(line 225,col 9)-(line 225,col 36)",
            "(line 226,col 9)-(line 226,col 45)",
            "(line 227,col 9)-(line 228,col 114)",
            "(line 229,col 9)-(line 229,col 26)",
            "(line 230,col 9)-(line 230,col 45)",
            "(line 231,col 9)-(line 231,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI162Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunking()",
        "snippet": "    public void testLongLineChunking() throws ParseException, IOException {\n        Options options = new Options();\n        options.addOption(\"x\", \"extralongarg\", false,\n                                     \"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \" +\n                                     \"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \" +\n                                     \"yes. \");\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n        String expected = \"usage:\" + CR +\n                          \"       org.apache.commons.cli.bug.B\" + CR +\n                          \"       ugCLI162Test\" + CR +\n                          \"Header\" + CR +\n                          \"-x,--extralongarg     This\" + CR +\n                          \"                      description\" + CR +\n                          \"                      has\" + CR +\n                          \"                      ReallyLongVal\" + CR +\n                          \"                      uesThatAreLon\" + CR +\n                          \"                      gerThanTheWid\" + CR +\n                          \"                      thOfTheColumn\" + CR +\n                          \"                      s and also\" + CR +\n                          \"                      other\" + CR +\n                          \"                      ReallyLongVal\" + CR +\n                          \"                      uesThatAreHug\" + CR +\n                          \"                      erAndBiggerTh\" + CR +\n                          \"                      anTheWidthOfT\" + CR +\n                          \"                      heColumnsBob,\" + CR +\n                          \"                      yes.\" + CR +\n                          \"Footer\" + CR;\n        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n    }",
        "begin_line": 234,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 40)",
            "(line 236,col 9)-(line 239,col 46)",
            "(line 240,col 9)-(line 240,col 54)",
            "(line 241,col 9)-(line 241,col 45)",
            "(line 242,col 9)-(line 242,col 115)",
            "(line 243,col 9)-(line 262,col 40)",
            "(line 263,col 9)-(line 263,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI162Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored()",
        "snippet": "    public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\n        Options options = new Options();\n        options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n        System.err.println(sw.toString());\n        String expected = \"usage:\" + CR +\n                          \"       org.apache.comm\" + CR +\n                          \"       ons.cli.bug.Bug\" + CR +\n                          \"       CLI162Test\" + CR +\n                          \"Header\" + CR +\n                          \"-x,--extralongarg\" + CR +\n                          \" This description is\" + CR +\n                          \" Long.\" + CR +\n                          \"Footer\" + CR;\n        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n    }",
        "begin_line": 266,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 40)",
            "(line 268,col 9)-(line 268,col 84)",
            "(line 269,col 9)-(line 269,col 54)",
            "(line 270,col 9)-(line 270,col 45)",
            "(line 271,col 9)-(line 271,col 115)",
            "(line 272,col 9)-(line 272,col 42)",
            "(line 273,col 9)-(line 281,col 40)",
            "(line 282,col 9)-(line 282,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI18Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI18Test.testCLI18()",
        "snippet": "    public void testCLI18()\n    {\n        Options options = new Options();\n        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\n        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter out = new StringWriter();\n\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2, \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\n    }",
        "begin_line": 34,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 40)",
            "(line 37,col 9)-(line 37,col 68)",
            "(line 38,col 9)-(line 38,col 158)",
            "(line 39,col 9)-(line 39,col 67)",
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 46)",
            "(line 44,col 9)-(line 44,col 327)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI148Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI148Test.setUp()",
        "snippet": "    protected void setUp() throws Exception\n    {\n        options = new Options();\n        options.addOption(OptionBuilder.hasArg().create('t'));\n        options.addOption(OptionBuilder.hasArg().create('s'));\n    }",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 32)",
            "(line 39,col 9)-(line 39,col 62)",
            "(line 40,col 9)-(line 40,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI148Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI148Test.testWorkaround1()",
        "snippet": "    public void testWorkaround1() throws Exception\n    {\n        CommandLineParser parser = new PosixParser();\n        String[] args = new String[]{ \"-t-something\" };\n\n        CommandLine commandLine = parser.parse(options, args);\n        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n    }",
        "begin_line": 43,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 53)",
            "(line 46,col 9)-(line 46,col 55)",
            "(line 48,col 9)-(line 48,col 62)",
            "(line 49,col 9)-(line 49,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.cli.bug.BugCLI148Test",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java",
        "signature": "org.apache.commons.cli.bug.BugCLI148Test.testWorkaround2()",
        "snippet": "    public void testWorkaround2() throws Exception\n    {\n        CommandLineParser parser = new PosixParser();\n        String[] args = new String[]{ \"-t\", \"\\\"-something\\\"\" };\n\n        CommandLine commandLine = parser.parse(options, args);\n        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n    }",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 63)",
            "(line 57,col 9)-(line 57,col 62)",
            "(line 58,col 9)-(line 58,col 68)"
        ]
    }
]